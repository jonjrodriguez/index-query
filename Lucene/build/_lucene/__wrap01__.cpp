#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/OpenStringBuilder.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Appendable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *OpenStringBuilder::class$ = NULL;
          jmethodID *OpenStringBuilder::mids$ = NULL;
          bool OpenStringBuilder::live$ = false;

          jclass OpenStringBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/OpenStringBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_init$_ec6430f4] = env->getMethodID(cls, "<init>", "([CI)V");
              mids$[mid_append_fac808c8] = env->getMethodID(cls, "append", "(C)Ljava/lang/Appendable;");
              mids$[mid_append_ca3c2aa4] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Ljava/lang/Appendable;");
              mids$[mid_append_7f83fd04] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;");
              mids$[mid_capacity_54c6a179] = env->getMethodID(cls, "capacity", "()I");
              mids$[mid_charAt_39c7bd29] = env->getMethodID(cls, "charAt", "(I)C");
              mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
              mids$[mid_getArray_dab10e7f] = env->getMethodID(cls, "getArray", "()[C");
              mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
              mids$[mid_reserve_39c7bd3c] = env->getMethodID(cls, "reserve", "(I)V");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_set_ec6430f4] = env->getMethodID(cls, "set", "([CI)V");
              mids$[mid_setCharAt_83eec158] = env->getMethodID(cls, "setCharAt", "(IC)V");
              mids$[mid_setLength_39c7bd3c] = env->getMethodID(cls, "setLength", "(I)V");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
              mids$[mid_subSequence_f88dfd57] = env->getMethodID(cls, "subSequence", "(II)Ljava/lang/CharSequence;");
              mids$[mid_toCharArray_dab10e7f] = env->getMethodID(cls, "toCharArray", "()[C");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_unsafeWrite_39c7bd3c] = env->getMethodID(cls, "unsafeWrite", "(I)V");
              mids$[mid_unsafeWrite_87fd545a] = env->getMethodID(cls, "unsafeWrite", "(C)V");
              mids$[mid_unsafeWrite_6f0bb356] = env->getMethodID(cls, "unsafeWrite", "([CII)V");
              mids$[mid_write_5fdc3f48] = env->getMethodID(cls, "write", "(Ljava/lang/String;)V");
              mids$[mid_write_700e23d6] = env->getMethodID(cls, "write", "([C)V");
              mids$[mid_write_87fd545a] = env->getMethodID(cls, "write", "(C)V");
              mids$[mid_write_39c7bd3c] = env->getMethodID(cls, "write", "(I)V");
              mids$[mid_write_20cf5c67] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/analysis/util/OpenStringBuilder;)V");
              mids$[mid_write_6f0bb356] = env->getMethodID(cls, "write", "([CII)V");
              mids$[mid_resize_39c7bd3c] = env->getMethodID(cls, "resize", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OpenStringBuilder::OpenStringBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          OpenStringBuilder::OpenStringBuilder(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          OpenStringBuilder::OpenStringBuilder(const JArray< jchar > & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ec6430f4, a0.this$, a1)) {}

          ::java::lang::Appendable OpenStringBuilder::append(jchar a0) const
          {
            return ::java::lang::Appendable(env->callObjectMethod(this$, mids$[mid_append_fac808c8], a0));
          }

          ::java::lang::Appendable OpenStringBuilder::append(const ::java::lang::CharSequence & a0) const
          {
            return ::java::lang::Appendable(env->callObjectMethod(this$, mids$[mid_append_ca3c2aa4], a0.this$));
          }

          ::java::lang::Appendable OpenStringBuilder::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
          {
            return ::java::lang::Appendable(env->callObjectMethod(this$, mids$[mid_append_7f83fd04], a0.this$, a1, a2));
          }

          jint OpenStringBuilder::capacity() const
          {
            return env->callIntMethod(this$, mids$[mid_capacity_54c6a179]);
          }

          jchar OpenStringBuilder::charAt(jint a0) const
          {
            return env->callCharMethod(this$, mids$[mid_charAt_39c7bd29], a0);
          }

          void OpenStringBuilder::flush() const
          {
            env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
          }

          JArray< jchar > OpenStringBuilder::getArray() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_getArray_dab10e7f]));
          }

          jint OpenStringBuilder::length() const
          {
            return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
          }

          void OpenStringBuilder::reserve(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reserve_39c7bd3c], a0);
          }

          void OpenStringBuilder::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          void OpenStringBuilder::set(const JArray< jchar > & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_set_ec6430f4], a0.this$, a1);
          }

          void OpenStringBuilder::setCharAt(jint a0, jchar a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setCharAt_83eec158], a0, a1);
          }

          void OpenStringBuilder::setLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setLength_39c7bd3c], a0);
          }

          jint OpenStringBuilder::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }

          ::java::lang::CharSequence OpenStringBuilder::subSequence(jint a0, jint a1) const
          {
            return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_subSequence_f88dfd57], a0, a1));
          }

          JArray< jchar > OpenStringBuilder::toCharArray() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_toCharArray_dab10e7f]));
          }

          ::java::lang::String OpenStringBuilder::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          void OpenStringBuilder::unsafeWrite(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_unsafeWrite_39c7bd3c], a0);
          }

          void OpenStringBuilder::unsafeWrite(jchar a0) const
          {
            env->callVoidMethod(this$, mids$[mid_unsafeWrite_87fd545a], a0);
          }

          void OpenStringBuilder::unsafeWrite(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_unsafeWrite_6f0bb356], a0.this$, a1, a2);
          }

          void OpenStringBuilder::write(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_write_5fdc3f48], a0.this$);
          }

          void OpenStringBuilder::write(const JArray< jchar > & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_write_700e23d6], a0.this$);
          }

          void OpenStringBuilder::write(jchar a0) const
          {
            env->callVoidMethod(this$, mids$[mid_write_87fd545a], a0);
          }

          void OpenStringBuilder::write(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_write_39c7bd3c], a0);
          }

          void OpenStringBuilder::write(const OpenStringBuilder & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_write_20cf5c67], a0.this$);
          }

          void OpenStringBuilder::write(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_write_6f0bb356], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_OpenStringBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OpenStringBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OpenStringBuilder_init_(t_OpenStringBuilder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OpenStringBuilder_append(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_capacity(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_charAt(t_OpenStringBuilder *self, PyObject *arg);
          static PyObject *t_OpenStringBuilder_flush(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_getArray(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_length(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_reserve(t_OpenStringBuilder *self, PyObject *arg);
          static PyObject *t_OpenStringBuilder_reset(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_set(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_setCharAt(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_setLength(t_OpenStringBuilder *self, PyObject *arg);
          static PyObject *t_OpenStringBuilder_size(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_subSequence(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_toCharArray(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_toString(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_unsafeWrite(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_write(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_get__array(t_OpenStringBuilder *self, void *data);
          static PyGetSetDef t_OpenStringBuilder__fields_[] = {
            DECLARE_GET_FIELD(t_OpenStringBuilder, array),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_OpenStringBuilder__methods_[] = {
            DECLARE_METHOD(t_OpenStringBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OpenStringBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OpenStringBuilder, append, METH_VARARGS),
            DECLARE_METHOD(t_OpenStringBuilder, capacity, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, charAt, METH_O),
            DECLARE_METHOD(t_OpenStringBuilder, flush, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, getArray, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, length, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, reserve, METH_O),
            DECLARE_METHOD(t_OpenStringBuilder, reset, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, set, METH_VARARGS),
            DECLARE_METHOD(t_OpenStringBuilder, setCharAt, METH_VARARGS),
            DECLARE_METHOD(t_OpenStringBuilder, setLength, METH_O),
            DECLARE_METHOD(t_OpenStringBuilder, size, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, subSequence, METH_VARARGS),
            DECLARE_METHOD(t_OpenStringBuilder, toCharArray, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, toString, METH_VARARGS),
            DECLARE_METHOD(t_OpenStringBuilder, unsafeWrite, METH_VARARGS),
            DECLARE_METHOD(t_OpenStringBuilder, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(OpenStringBuilder, t_OpenStringBuilder, ::java::lang::Object, OpenStringBuilder, t_OpenStringBuilder_init_, 0, 0, t_OpenStringBuilder__fields_, 0, 0);

          void t_OpenStringBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(OpenStringBuilder), module, "OpenStringBuilder", 0);
          }

          void t_OpenStringBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(OpenStringBuilder).tp_dict, "class_", make_descriptor(OpenStringBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(OpenStringBuilder).tp_dict, "wrapfn_", make_descriptor(t_OpenStringBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(OpenStringBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OpenStringBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OpenStringBuilder::initializeClass, 1)))
              return NULL;
            return t_OpenStringBuilder::wrap_Object(OpenStringBuilder(((t_OpenStringBuilder *) arg)->object.this$));
          }
          static PyObject *t_OpenStringBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OpenStringBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OpenStringBuilder_init_(t_OpenStringBuilder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                OpenStringBuilder object((jobject) NULL);

                INT_CALL(object = OpenStringBuilder());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jint a0;
                OpenStringBuilder object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = OpenStringBuilder(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                OpenStringBuilder object((jobject) NULL);

                if (!parseArgs(args, "[CI", &a0, &a1))
                {
                  INT_CALL(object = OpenStringBuilder(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_OpenStringBuilder_append(t_OpenStringBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jchar a0;
                ::java::lang::Appendable result((jobject) NULL);

                if (!parseArgs(args, "C", &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::java::lang::t_Appendable::wrap_Object(result);
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::Appendable result((jobject) NULL);

                if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::java::lang::t_Appendable::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jint a1;
                jint a2;
                ::java::lang::Appendable result((jobject) NULL);

                if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.append(a0, a1, a2));
                  return ::java::lang::t_Appendable::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "append", args);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_capacity(t_OpenStringBuilder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.capacity());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_OpenStringBuilder_charAt(t_OpenStringBuilder *self, PyObject *arg)
          {
            jint a0;
            jchar result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.charAt(a0));
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            PyErr_SetArgsError((PyObject *) self, "charAt", arg);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_flush(t_OpenStringBuilder *self)
          {
            OBJ_CALL(self->object.flush());
            Py_RETURN_NONE;
          }

          static PyObject *t_OpenStringBuilder_getArray(t_OpenStringBuilder *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.getArray());
            return result.wrap();
          }

          static PyObject *t_OpenStringBuilder_length(t_OpenStringBuilder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.length());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_OpenStringBuilder_reserve(t_OpenStringBuilder *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.reserve(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "reserve", arg);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_reset(t_OpenStringBuilder *self)
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          static PyObject *t_OpenStringBuilder_set(t_OpenStringBuilder *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(self->object.set(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "set", args);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_setCharAt(t_OpenStringBuilder *self, PyObject *args)
          {
            jint a0;
            jchar a1;

            if (!parseArgs(args, "IC", &a0, &a1))
            {
              OBJ_CALL(self->object.setCharAt(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setCharAt", args);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_setLength(t_OpenStringBuilder *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setLength", arg);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_size(t_OpenStringBuilder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.size());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_OpenStringBuilder_subSequence(t_OpenStringBuilder *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::java::lang::CharSequence result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.subSequence(a0, a1));
              return ::java::lang::t_CharSequence::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "subSequence", args);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_toCharArray(t_OpenStringBuilder *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.toCharArray());
            return result.wrap();
          }

          static PyObject *t_OpenStringBuilder_toString(t_OpenStringBuilder *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(OpenStringBuilder), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_OpenStringBuilder_unsafeWrite(t_OpenStringBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(self->object.unsafeWrite(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                jchar a0;

                if (!parseArgs(args, "C", &a0))
                {
                  OBJ_CALL(self->object.unsafeWrite(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(self->object.unsafeWrite(a0, a1, a2));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "unsafeWrite", args);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_write(t_OpenStringBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(self->object.write(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jchar > a0((jobject) NULL);

                if (!parseArgs(args, "[C", &a0))
                {
                  OBJ_CALL(self->object.write(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                jchar a0;

                if (!parseArgs(args, "C", &a0))
                {
                  OBJ_CALL(self->object.write(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                jint a0;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(self->object.write(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                OpenStringBuilder a0((jobject) NULL);

                if (!parseArgs(args, "k", OpenStringBuilder::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.write(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(self->object.write(a0, a1, a2));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "write", args);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_get__array(t_OpenStringBuilder *self, void *data)
          {
            JArray< jchar > value((jobject) NULL);
            OBJ_CALL(value = self->object.getArray());
            return value.wrap();
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/function/FunctionDistinctValuesCollector$GroupCount.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {

            ::java::lang::Class *FunctionDistinctValuesCollector$GroupCount::class$ = NULL;
            jmethodID *FunctionDistinctValuesCollector$GroupCount::mids$ = NULL;
            bool FunctionDistinctValuesCollector$GroupCount::live$ = false;

            jclass FunctionDistinctValuesCollector$GroupCount::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/function/FunctionDistinctValuesCollector$GroupCount");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {
            static PyObject *t_FunctionDistinctValuesCollector$GroupCount_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionDistinctValuesCollector$GroupCount_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionDistinctValuesCollector$GroupCount_of_(t_FunctionDistinctValuesCollector$GroupCount *self, PyObject *args);
            static PyObject *t_FunctionDistinctValuesCollector$GroupCount_get__parameters_(t_FunctionDistinctValuesCollector$GroupCount *self, void *data);
            static PyGetSetDef t_FunctionDistinctValuesCollector$GroupCount__fields_[] = {
              DECLARE_GET_FIELD(t_FunctionDistinctValuesCollector$GroupCount, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FunctionDistinctValuesCollector$GroupCount__methods_[] = {
              DECLARE_METHOD(t_FunctionDistinctValuesCollector$GroupCount, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionDistinctValuesCollector$GroupCount, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionDistinctValuesCollector$GroupCount, of_, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FunctionDistinctValuesCollector$GroupCount, t_FunctionDistinctValuesCollector$GroupCount, ::org::apache::lucene::search::grouping::AbstractDistinctValuesCollector$GroupCount, FunctionDistinctValuesCollector$GroupCount, abstract_init, 0, 0, t_FunctionDistinctValuesCollector$GroupCount__fields_, 0, 0);
            PyObject *t_FunctionDistinctValuesCollector$GroupCount::wrap_Object(const FunctionDistinctValuesCollector$GroupCount& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionDistinctValuesCollector$GroupCount::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionDistinctValuesCollector$GroupCount *self = (t_FunctionDistinctValuesCollector$GroupCount *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_FunctionDistinctValuesCollector$GroupCount::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionDistinctValuesCollector$GroupCount::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionDistinctValuesCollector$GroupCount *self = (t_FunctionDistinctValuesCollector$GroupCount *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_FunctionDistinctValuesCollector$GroupCount::install(PyObject *module)
            {
              installType(&PY_TYPE(FunctionDistinctValuesCollector$GroupCount), module, "FunctionDistinctValuesCollector$GroupCount", 0);
            }

            void t_FunctionDistinctValuesCollector$GroupCount::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FunctionDistinctValuesCollector$GroupCount).tp_dict, "class_", make_descriptor(FunctionDistinctValuesCollector$GroupCount::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FunctionDistinctValuesCollector$GroupCount).tp_dict, "wrapfn_", make_descriptor(t_FunctionDistinctValuesCollector$GroupCount::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FunctionDistinctValuesCollector$GroupCount).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FunctionDistinctValuesCollector$GroupCount_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FunctionDistinctValuesCollector$GroupCount::initializeClass, 1)))
                return NULL;
              return t_FunctionDistinctValuesCollector$GroupCount::wrap_Object(FunctionDistinctValuesCollector$GroupCount(((t_FunctionDistinctValuesCollector$GroupCount *) arg)->object.this$));
            }
            static PyObject *t_FunctionDistinctValuesCollector$GroupCount_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FunctionDistinctValuesCollector$GroupCount::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FunctionDistinctValuesCollector$GroupCount_of_(t_FunctionDistinctValuesCollector$GroupCount *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }
            static PyObject *t_FunctionDistinctValuesCollector$GroupCount_get__parameters_(t_FunctionDistinctValuesCollector$GroupCount *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/Expression.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/expressions/Bindings.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/search/Rescorer.h"
#include "org/apache/lucene/search/SortField.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {

        ::java::lang::Class *Expression::class$ = NULL;
        jmethodID *Expression::mids$ = NULL;
        jfieldID *Expression::fids$ = NULL;
        bool Expression::live$ = false;

        jclass Expression::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/Expression");

            mids$ = new jmethodID[max_mid];
            mids$[mid_evaluate_d2e34bbb] = env->getMethodID(cls, "evaluate", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)D");
            mids$[mid_getRescorer_2fab3242] = env->getMethodID(cls, "getRescorer", "(Lorg/apache/lucene/expressions/Bindings;)Lorg/apache/lucene/search/Rescorer;");
            mids$[mid_getSortField_5395b0cd] = env->getMethodID(cls, "getSortField", "(Lorg/apache/lucene/expressions/Bindings;Z)Lorg/apache/lucene/search/SortField;");
            mids$[mid_getValueSource_125265df] = env->getMethodID(cls, "getValueSource", "(Lorg/apache/lucene/expressions/Bindings;)Lorg/apache/lucene/queries/function/ValueSource;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_sourceText] = env->getFieldID(cls, "sourceText", "Ljava/lang/String;");
            fids$[fid_variables] = env->getFieldID(cls, "variables", "[Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jdouble Expression::evaluate(jint a0, const JArray< ::org::apache::lucene::queries::function::FunctionValues > & a1) const
        {
          return env->callDoubleMethod(this$, mids$[mid_evaluate_d2e34bbb], a0, a1.this$);
        }

        ::org::apache::lucene::search::Rescorer Expression::getRescorer(const ::org::apache::lucene::expressions::Bindings & a0) const
        {
          return ::org::apache::lucene::search::Rescorer(env->callObjectMethod(this$, mids$[mid_getRescorer_2fab3242], a0.this$));
        }

        ::org::apache::lucene::search::SortField Expression::getSortField(const ::org::apache::lucene::expressions::Bindings & a0, jboolean a1) const
        {
          return ::org::apache::lucene::search::SortField(env->callObjectMethod(this$, mids$[mid_getSortField_5395b0cd], a0.this$, a1));
        }

        ::org::apache::lucene::queries::function::ValueSource Expression::getValueSource(const ::org::apache::lucene::expressions::Bindings & a0) const
        {
          return ::org::apache::lucene::queries::function::ValueSource(env->callObjectMethod(this$, mids$[mid_getValueSource_125265df], a0.this$));
        }

        ::java::lang::String Expression::_get_sourceText() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_sourceText]));
        }

        JArray< ::java::lang::String > Expression::_get_variables() const
        {
          return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_variables]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        static PyObject *t_Expression_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Expression_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Expression_evaluate(t_Expression *self, PyObject *args);
        static PyObject *t_Expression_getRescorer(t_Expression *self, PyObject *arg);
        static PyObject *t_Expression_getSortField(t_Expression *self, PyObject *args);
        static PyObject *t_Expression_getValueSource(t_Expression *self, PyObject *arg);
        static PyObject *t_Expression_get__sourceText(t_Expression *self, void *data);
        static PyObject *t_Expression_get__variables(t_Expression *self, void *data);

        static PyGetSetDef t_Expression__fields_[] = {
          DECLARE_GET_FIELD(t_Expression, sourceText),
          DECLARE_GET_FIELD(t_Expression, variables),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Expression__methods_[] = {
          DECLARE_METHOD(t_Expression, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Expression, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Expression, evaluate, METH_VARARGS),
          DECLARE_METHOD(t_Expression, getRescorer, METH_O),
          DECLARE_METHOD(t_Expression, getSortField, METH_VARARGS),
          DECLARE_METHOD(t_Expression, getValueSource, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Expression, t_Expression, ::java::lang::Object, Expression, abstract_init, 0, 0, t_Expression__fields_, 0, 0);

        void t_Expression::install(PyObject *module)
        {
          installType(&PY_TYPE(Expression), module, "Expression", 0);
        }

        void t_Expression::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Expression).tp_dict, "class_", make_descriptor(Expression::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Expression).tp_dict, "wrapfn_", make_descriptor(t_Expression::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Expression).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Expression_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Expression::initializeClass, 1)))
            return NULL;
          return t_Expression::wrap_Object(Expression(((t_Expression *) arg)->object.this$));
        }
        static PyObject *t_Expression_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Expression::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Expression_evaluate(t_Expression *self, PyObject *args)
        {
          jint a0;
          JArray< ::org::apache::lucene::queries::function::FunctionValues > a1((jobject) NULL);
          jdouble result;

          if (!parseArgs(args, "I[k", ::org::apache::lucene::queries::function::FunctionValues::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.evaluate(a0, a1));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "evaluate", args);
          return NULL;
        }

        static PyObject *t_Expression_getRescorer(t_Expression *self, PyObject *arg)
        {
          ::org::apache::lucene::expressions::Bindings a0((jobject) NULL);
          ::org::apache::lucene::search::Rescorer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::expressions::Bindings::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getRescorer(a0));
            return ::org::apache::lucene::search::t_Rescorer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getRescorer", arg);
          return NULL;
        }

        static PyObject *t_Expression_getSortField(t_Expression *self, PyObject *args)
        {
          ::org::apache::lucene::expressions::Bindings a0((jobject) NULL);
          jboolean a1;
          ::org::apache::lucene::search::SortField result((jobject) NULL);

          if (!parseArgs(args, "kZ", ::org::apache::lucene::expressions::Bindings::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getSortField(a0, a1));
            return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSortField", args);
          return NULL;
        }

        static PyObject *t_Expression_getValueSource(t_Expression *self, PyObject *arg)
        {
          ::org::apache::lucene::expressions::Bindings a0((jobject) NULL);
          ::org::apache::lucene::queries::function::ValueSource result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::expressions::Bindings::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getValueSource(a0));
            return ::org::apache::lucene::queries::function::t_ValueSource::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getValueSource", arg);
          return NULL;
        }

        static PyObject *t_Expression_get__sourceText(t_Expression *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_sourceText());
          return j2p(value);
        }

        static PyObject *t_Expression_get__variables(t_Expression *self, void *data)
        {
          JArray< ::java::lang::String > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_variables());
          return JArray<jstring>(value.this$).wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedLongValues$Builder.h"
#include "org/apache/lucene/util/packed/PackedLongValues.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedLongValues$Builder::class$ = NULL;
          jmethodID *PackedLongValues$Builder::mids$ = NULL;
          bool PackedLongValues$Builder::live$ = false;

          jclass PackedLongValues$Builder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedLongValues$Builder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_df85810b] = env->getMethodID(cls, "add", "(J)Lorg/apache/lucene/util/packed/PackedLongValues$Builder;");
              mids$[mid_build_020ed87b] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/util/packed/PackedLongValues;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_54c6a17a] = env->getMethodID(cls, "size", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedLongValues$Builder PackedLongValues$Builder::add(jlong a0) const
          {
            return PackedLongValues$Builder(env->callObjectMethod(this$, mids$[mid_add_df85810b], a0));
          }

          ::org::apache::lucene::util::packed::PackedLongValues PackedLongValues$Builder::build() const
          {
            return ::org::apache::lucene::util::packed::PackedLongValues(env->callObjectMethod(this$, mids$[mid_build_020ed87b]));
          }

          jlong PackedLongValues$Builder::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          jlong PackedLongValues$Builder::size() const
          {
            return env->callLongMethod(this$, mids$[mid_size_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedLongValues$Builder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedLongValues$Builder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedLongValues$Builder_add(t_PackedLongValues$Builder *self, PyObject *arg);
          static PyObject *t_PackedLongValues$Builder_build(t_PackedLongValues$Builder *self);
          static PyObject *t_PackedLongValues$Builder_ramBytesUsed(t_PackedLongValues$Builder *self);
          static PyObject *t_PackedLongValues$Builder_size(t_PackedLongValues$Builder *self);

          static PyMethodDef t_PackedLongValues$Builder__methods_[] = {
            DECLARE_METHOD(t_PackedLongValues$Builder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedLongValues$Builder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedLongValues$Builder, add, METH_O),
            DECLARE_METHOD(t_PackedLongValues$Builder, build, METH_NOARGS),
            DECLARE_METHOD(t_PackedLongValues$Builder, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_PackedLongValues$Builder, size, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedLongValues$Builder, t_PackedLongValues$Builder, ::java::lang::Object, PackedLongValues$Builder, abstract_init, 0, 0, 0, 0, 0);

          void t_PackedLongValues$Builder::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedLongValues$Builder), module, "PackedLongValues$Builder", 0);
          }

          void t_PackedLongValues$Builder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedLongValues$Builder).tp_dict, "class_", make_descriptor(PackedLongValues$Builder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedLongValues$Builder).tp_dict, "wrapfn_", make_descriptor(t_PackedLongValues$Builder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedLongValues$Builder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedLongValues$Builder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedLongValues$Builder::initializeClass, 1)))
              return NULL;
            return t_PackedLongValues$Builder::wrap_Object(PackedLongValues$Builder(((t_PackedLongValues$Builder *) arg)->object.this$));
          }
          static PyObject *t_PackedLongValues$Builder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedLongValues$Builder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PackedLongValues$Builder_add(t_PackedLongValues$Builder *self, PyObject *arg)
          {
            jlong a0;
            PackedLongValues$Builder result((jobject) NULL);

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = self->object.add(a0));
              return t_PackedLongValues$Builder::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "add", arg);
            return NULL;
          }

          static PyObject *t_PackedLongValues$Builder_build(t_PackedLongValues$Builder *self)
          {
            ::org::apache::lucene::util::packed::PackedLongValues result((jobject) NULL);
            OBJ_CALL(result = self->object.build());
            return ::org::apache::lucene::util::packed::t_PackedLongValues::wrap_Object(result);
          }

          static PyObject *t_PackedLongValues$Builder_ramBytesUsed(t_PackedLongValues$Builder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_PackedLongValues$Builder_size(t_PackedLongValues$Builder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/NumericDocValuesField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *NumericDocValuesField::class$ = NULL;
        jmethodID *NumericDocValuesField::mids$ = NULL;
        bool NumericDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *NumericDocValuesField::TYPE = NULL;

        jclass NumericDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/NumericDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4372eed5] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NumericDocValuesField::NumericDocValuesField(const ::java::lang::String & a0, jlong a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_4372eed5, a0.this$, a1)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_NumericDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NumericDocValuesField_init_(t_NumericDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_NumericDocValuesField__methods_[] = {
          DECLARE_METHOD(t_NumericDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericDocValuesField, t_NumericDocValuesField, ::org::apache::lucene::document::Field, NumericDocValuesField, t_NumericDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_NumericDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericDocValuesField), module, "NumericDocValuesField", 0);
        }

        void t_NumericDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericDocValuesField).tp_dict, "class_", make_descriptor(NumericDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_NumericDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(NumericDocValuesField::initializeClass);
          PyDict_SetItemString(PY_TYPE(NumericDocValuesField).tp_dict, "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*NumericDocValuesField::TYPE)));
        }

        static PyObject *t_NumericDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericDocValuesField::initializeClass, 1)))
            return NULL;
          return t_NumericDocValuesField::wrap_Object(NumericDocValuesField(((t_NumericDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_NumericDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NumericDocValuesField_init_(t_NumericDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          NumericDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sJ", &a0, &a1))
          {
            INT_CALL(object = NumericDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/LockObtainFailedException.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *LockObtainFailedException::class$ = NULL;
        jmethodID *LockObtainFailedException::mids$ = NULL;
        bool LockObtainFailedException::live$ = false;

        jclass LockObtainFailedException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/LockObtainFailedException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LockObtainFailedException::LockObtainFailedException(const ::java::lang::String & a0) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        LockObtainFailedException::LockObtainFailedException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_LockObtainFailedException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LockObtainFailedException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LockObtainFailedException_init_(t_LockObtainFailedException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_LockObtainFailedException__methods_[] = {
          DECLARE_METHOD(t_LockObtainFailedException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockObtainFailedException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LockObtainFailedException, t_LockObtainFailedException, ::java::io::IOException, LockObtainFailedException, t_LockObtainFailedException_init_, 0, 0, 0, 0, 0);

        void t_LockObtainFailedException::install(PyObject *module)
        {
          installType(&PY_TYPE(LockObtainFailedException), module, "LockObtainFailedException", 0);
        }

        void t_LockObtainFailedException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LockObtainFailedException).tp_dict, "class_", make_descriptor(LockObtainFailedException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LockObtainFailedException).tp_dict, "wrapfn_", make_descriptor(t_LockObtainFailedException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LockObtainFailedException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LockObtainFailedException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LockObtainFailedException::initializeClass, 1)))
            return NULL;
          return t_LockObtainFailedException::wrap_Object(LockObtainFailedException(((t_LockObtainFailedException *) arg)->object.this$));
        }
        static PyObject *t_LockObtainFailedException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LockObtainFailedException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LockObtainFailedException_init_(t_LockObtainFailedException *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              LockObtainFailedException object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = LockObtainFailedException(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Throwable a1((jobject) NULL);
              LockObtainFailedException object((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
              {
                INT_CALL(object = LockObtainFailedException(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonListIterator.h"
#include "java/util/ListIterator.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonListIterator::class$ = NULL;
        jmethodID *PythonListIterator::mids$ = NULL;
        bool PythonListIterator::live$ = false;

        jclass PythonListIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonListIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_290588ee] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)V");
            mids$[mid_hasPrevious_54c6a16a] = env->getMethodID(cls, "hasPrevious", "()Z");
            mids$[mid_nextIndex_54c6a179] = env->getMethodID(cls, "nextIndex", "()I");
            mids$[mid_previous_846352c3] = env->getMethodID(cls, "previous", "()Ljava/lang/Object;");
            mids$[mid_previousIndex_54c6a179] = env->getMethodID(cls, "previousIndex", "()I");
            mids$[mid_remove_54c6a166] = env->getMethodID(cls, "remove", "()V");
            mids$[mid_set_290588ee] = env->getMethodID(cls, "set", "(Ljava/lang/Object;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonListIterator::PythonListIterator() : ::org::apache::pylucene::util::PythonIterator(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonListIterator::add(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_290588ee], a0.this$);
        }

        jboolean PythonListIterator::hasPrevious() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPrevious_54c6a16a]);
        }

        jint PythonListIterator::nextIndex() const
        {
          return env->callIntMethod(this$, mids$[mid_nextIndex_54c6a179]);
        }

        ::java::lang::Object PythonListIterator::previous() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_previous_846352c3]));
        }

        jint PythonListIterator::previousIndex() const
        {
          return env->callIntMethod(this$, mids$[mid_previousIndex_54c6a179]);
        }

        void PythonListIterator::remove() const
        {
          env->callVoidMethod(this$, mids$[mid_remove_54c6a166]);
        }

        void PythonListIterator::set(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_set_290588ee], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonListIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonListIterator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonListIterator_init_(t_PythonListIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonListIterator_add(t_PythonListIterator *self, PyObject *arg);
        static PyObject *t_PythonListIterator_hasPrevious(t_PythonListIterator *self);
        static PyObject *t_PythonListIterator_nextIndex(t_PythonListIterator *self);
        static PyObject *t_PythonListIterator_previous(t_PythonListIterator *self);
        static PyObject *t_PythonListIterator_previousIndex(t_PythonListIterator *self);
        static PyObject *t_PythonListIterator_remove(t_PythonListIterator *self, PyObject *args);
        static PyObject *t_PythonListIterator_set(t_PythonListIterator *self, PyObject *arg);

        static PyMethodDef t_PythonListIterator__methods_[] = {
          DECLARE_METHOD(t_PythonListIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonListIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonListIterator, add, METH_O),
          DECLARE_METHOD(t_PythonListIterator, hasPrevious, METH_NOARGS),
          DECLARE_METHOD(t_PythonListIterator, nextIndex, METH_NOARGS),
          DECLARE_METHOD(t_PythonListIterator, previous, METH_NOARGS),
          DECLARE_METHOD(t_PythonListIterator, previousIndex, METH_NOARGS),
          DECLARE_METHOD(t_PythonListIterator, remove, METH_VARARGS),
          DECLARE_METHOD(t_PythonListIterator, set, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonListIterator, t_PythonListIterator, ::org::apache::pylucene::util::PythonIterator, PythonListIterator, t_PythonListIterator_init_, 0, 0, 0, 0, 0);

        void t_PythonListIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonListIterator), module, "PythonListIterator", 0);
        }

        void t_PythonListIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonListIterator).tp_dict, "class_", make_descriptor(PythonListIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonListIterator).tp_dict, "wrapfn_", make_descriptor(t_PythonListIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonListIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PythonListIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonListIterator::initializeClass, 1)))
            return NULL;
          return t_PythonListIterator::wrap_Object(PythonListIterator(((t_PythonListIterator *) arg)->object.this$));
        }
        static PyObject *t_PythonListIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonListIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonListIterator_init_(t_PythonListIterator *self, PyObject *args, PyObject *kwds)
        {
          PythonListIterator object((jobject) NULL);

          INT_CALL(object = PythonListIterator());
          self->object = object;

          return 0;
        }

        static PyObject *t_PythonListIterator_add(t_PythonListIterator *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(self->object.add(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_PythonListIterator_hasPrevious(t_PythonListIterator *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasPrevious());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_PythonListIterator_nextIndex(t_PythonListIterator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.nextIndex());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_PythonListIterator_previous(t_PythonListIterator *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.previous());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_PythonListIterator_previousIndex(t_PythonListIterator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.previousIndex());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_PythonListIterator_remove(t_PythonListIterator *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.remove());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonListIterator), (PyObject *) self, "remove", args, 2);
        }

        static PyObject *t_PythonListIterator_set(t_PythonListIterator *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(self->object.set(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "set", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/in/IndicNormalizationFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {

          ::java::lang::Class *IndicNormalizationFilterFactory::class$ = NULL;
          jmethodID *IndicNormalizationFilterFactory::mids$ = NULL;
          bool IndicNormalizationFilterFactory::live$ = false;

          jclass IndicNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/in/IndicNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndicNormalizationFilterFactory::IndicNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream IndicNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory IndicNormalizationFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {
          static PyObject *t_IndicNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndicNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndicNormalizationFilterFactory_init_(t_IndicNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndicNormalizationFilterFactory_create(t_IndicNormalizationFilterFactory *self, PyObject *args);
          static PyObject *t_IndicNormalizationFilterFactory_getMultiTermComponent(t_IndicNormalizationFilterFactory *self);
          static PyObject *t_IndicNormalizationFilterFactory_get__multiTermComponent(t_IndicNormalizationFilterFactory *self, void *data);
          static PyGetSetDef t_IndicNormalizationFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_IndicNormalizationFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IndicNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_IndicNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicNormalizationFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_IndicNormalizationFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IndicNormalizationFilterFactory, t_IndicNormalizationFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, IndicNormalizationFilterFactory, t_IndicNormalizationFilterFactory_init_, 0, 0, t_IndicNormalizationFilterFactory__fields_, 0, 0);

          void t_IndicNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(IndicNormalizationFilterFactory), module, "IndicNormalizationFilterFactory", 0);
          }

          void t_IndicNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IndicNormalizationFilterFactory).tp_dict, "class_", make_descriptor(IndicNormalizationFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IndicNormalizationFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_IndicNormalizationFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IndicNormalizationFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndicNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndicNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_IndicNormalizationFilterFactory::wrap_Object(IndicNormalizationFilterFactory(((t_IndicNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_IndicNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndicNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndicNormalizationFilterFactory_init_(t_IndicNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            IndicNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = IndicNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IndicNormalizationFilterFactory_create(t_IndicNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IndicNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_IndicNormalizationFilterFactory_getMultiTermComponent(t_IndicNormalizationFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_IndicNormalizationFilterFactory_get__multiTermComponent(t_IndicNormalizationFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cn/ChineseFilterFactory.h"
#include "org/apache/lucene/analysis/cn/ChineseFilter.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {

          ::java::lang::Class *ChineseFilterFactory::class$ = NULL;
          jmethodID *ChineseFilterFactory::mids$ = NULL;
          bool ChineseFilterFactory::live$ = false;

          jclass ChineseFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cn/ChineseFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_08dbb372] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/cn/ChineseFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ChineseFilterFactory::ChineseFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::cn::ChineseFilter ChineseFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::cn::ChineseFilter(env->callObjectMethod(this$, mids$[mid_create_08dbb372], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {
          static PyObject *t_ChineseFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ChineseFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ChineseFilterFactory_init_(t_ChineseFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ChineseFilterFactory_create(t_ChineseFilterFactory *self, PyObject *args);

          static PyMethodDef t_ChineseFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ChineseFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ChineseFilterFactory, t_ChineseFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ChineseFilterFactory, t_ChineseFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ChineseFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ChineseFilterFactory), module, "ChineseFilterFactory", 0);
          }

          void t_ChineseFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ChineseFilterFactory).tp_dict, "class_", make_descriptor(ChineseFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ChineseFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ChineseFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ChineseFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ChineseFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ChineseFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ChineseFilterFactory::wrap_Object(ChineseFilterFactory(((t_ChineseFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ChineseFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ChineseFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ChineseFilterFactory_init_(t_ChineseFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ChineseFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ChineseFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ChineseFilterFactory_create(t_ChineseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::cn::ChineseFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::cn::t_ChineseFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ChineseFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/OrQueryNode.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *OrQueryNode::class$ = NULL;
              jmethodID *OrQueryNode::mids$ = NULL;
              bool OrQueryNode::live$ = false;

              jclass OrQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/OrQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              OrQueryNode::OrQueryNode(const ::java::util::List & a0) : ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

              ::java::lang::CharSequence OrQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String OrQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_OrQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_OrQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_OrQueryNode_init_(t_OrQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_OrQueryNode_toQueryString(t_OrQueryNode *self, PyObject *args);
              static PyObject *t_OrQueryNode_toString(t_OrQueryNode *self, PyObject *args);

              static PyMethodDef t_OrQueryNode__methods_[] = {
                DECLARE_METHOD(t_OrQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_OrQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_OrQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_OrQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(OrQueryNode, t_OrQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode, OrQueryNode, t_OrQueryNode_init_, 0, 0, 0, 0, 0);

              void t_OrQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(OrQueryNode), module, "OrQueryNode", 0);
              }

              void t_OrQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(OrQueryNode).tp_dict, "class_", make_descriptor(OrQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(OrQueryNode).tp_dict, "wrapfn_", make_descriptor(t_OrQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(OrQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_OrQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, OrQueryNode::initializeClass, 1)))
                  return NULL;
                return t_OrQueryNode::wrap_Object(OrQueryNode(((t_OrQueryNode *) arg)->object.this$));
              }
              static PyObject *t_OrQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, OrQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_OrQueryNode_init_(t_OrQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                OrQueryNode object((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  INT_CALL(object = OrQueryNode(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_OrQueryNode_toQueryString(t_OrQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(OrQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_OrQueryNode_toString(t_OrQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(OrQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/TokenStreamToAutomaton.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *TokenStreamToAutomaton::class$ = NULL;
        jmethodID *TokenStreamToAutomaton::mids$ = NULL;
        bool TokenStreamToAutomaton::live$ = false;
        jint TokenStreamToAutomaton::HOLE = (jint) 0;
        jint TokenStreamToAutomaton::POS_SEP = (jint) 0;

        jclass TokenStreamToAutomaton::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/TokenStreamToAutomaton");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_setPreservePositionIncrements_bb0c767f] = env->getMethodID(cls, "setPreservePositionIncrements", "(Z)V");
            mids$[mid_setUnicodeArcs_bb0c767f] = env->getMethodID(cls, "setUnicodeArcs", "(Z)V");
            mids$[mid_toAutomaton_6e59061f] = env->getMethodID(cls, "toAutomaton", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/util/automaton/Automaton;");
            mids$[mid_changeToken_21e43cb7] = env->getMethodID(cls, "changeToken", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            HOLE = env->getStaticIntField(cls, "HOLE");
            POS_SEP = env->getStaticIntField(cls, "POS_SEP");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TokenStreamToAutomaton::TokenStreamToAutomaton() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void TokenStreamToAutomaton::setPreservePositionIncrements(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setPreservePositionIncrements_bb0c767f], a0);
        }

        void TokenStreamToAutomaton::setUnicodeArcs(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setUnicodeArcs_bb0c767f], a0);
        }

        ::org::apache::lucene::util::automaton::Automaton TokenStreamToAutomaton::toAutomaton(const ::org::apache::lucene::analysis::TokenStream & a0) const
        {
          return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_toAutomaton_6e59061f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_TokenStreamToAutomaton_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TokenStreamToAutomaton_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TokenStreamToAutomaton_init_(t_TokenStreamToAutomaton *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TokenStreamToAutomaton_setPreservePositionIncrements(t_TokenStreamToAutomaton *self, PyObject *arg);
        static PyObject *t_TokenStreamToAutomaton_setUnicodeArcs(t_TokenStreamToAutomaton *self, PyObject *arg);
        static PyObject *t_TokenStreamToAutomaton_toAutomaton(t_TokenStreamToAutomaton *self, PyObject *arg);
        static int t_TokenStreamToAutomaton_set__preservePositionIncrements(t_TokenStreamToAutomaton *self, PyObject *arg, void *data);
        static int t_TokenStreamToAutomaton_set__unicodeArcs(t_TokenStreamToAutomaton *self, PyObject *arg, void *data);
        static PyGetSetDef t_TokenStreamToAutomaton__fields_[] = {
          DECLARE_SET_FIELD(t_TokenStreamToAutomaton, preservePositionIncrements),
          DECLARE_SET_FIELD(t_TokenStreamToAutomaton, unicodeArcs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TokenStreamToAutomaton__methods_[] = {
          DECLARE_METHOD(t_TokenStreamToAutomaton, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenStreamToAutomaton, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenStreamToAutomaton, setPreservePositionIncrements, METH_O),
          DECLARE_METHOD(t_TokenStreamToAutomaton, setUnicodeArcs, METH_O),
          DECLARE_METHOD(t_TokenStreamToAutomaton, toAutomaton, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TokenStreamToAutomaton, t_TokenStreamToAutomaton, ::java::lang::Object, TokenStreamToAutomaton, t_TokenStreamToAutomaton_init_, 0, 0, t_TokenStreamToAutomaton__fields_, 0, 0);

        void t_TokenStreamToAutomaton::install(PyObject *module)
        {
          installType(&PY_TYPE(TokenStreamToAutomaton), module, "TokenStreamToAutomaton", 0);
        }

        void t_TokenStreamToAutomaton::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TokenStreamToAutomaton).tp_dict, "class_", make_descriptor(TokenStreamToAutomaton::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TokenStreamToAutomaton).tp_dict, "wrapfn_", make_descriptor(t_TokenStreamToAutomaton::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TokenStreamToAutomaton).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(TokenStreamToAutomaton::initializeClass);
          PyDict_SetItemString(PY_TYPE(TokenStreamToAutomaton).tp_dict, "HOLE", make_descriptor(TokenStreamToAutomaton::HOLE));
          PyDict_SetItemString(PY_TYPE(TokenStreamToAutomaton).tp_dict, "POS_SEP", make_descriptor(TokenStreamToAutomaton::POS_SEP));
        }

        static PyObject *t_TokenStreamToAutomaton_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TokenStreamToAutomaton::initializeClass, 1)))
            return NULL;
          return t_TokenStreamToAutomaton::wrap_Object(TokenStreamToAutomaton(((t_TokenStreamToAutomaton *) arg)->object.this$));
        }
        static PyObject *t_TokenStreamToAutomaton_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TokenStreamToAutomaton::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TokenStreamToAutomaton_init_(t_TokenStreamToAutomaton *self, PyObject *args, PyObject *kwds)
        {
          TokenStreamToAutomaton object((jobject) NULL);

          INT_CALL(object = TokenStreamToAutomaton());
          self->object = object;

          return 0;
        }

        static PyObject *t_TokenStreamToAutomaton_setPreservePositionIncrements(t_TokenStreamToAutomaton *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setPreservePositionIncrements(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setPreservePositionIncrements", arg);
          return NULL;
        }

        static PyObject *t_TokenStreamToAutomaton_setUnicodeArcs(t_TokenStreamToAutomaton *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setUnicodeArcs(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setUnicodeArcs", arg);
          return NULL;
        }

        static PyObject *t_TokenStreamToAutomaton_toAutomaton(t_TokenStreamToAutomaton *self, PyObject *arg)
        {
          ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
          ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.toAutomaton(a0));
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "toAutomaton", arg);
          return NULL;
        }

        static int t_TokenStreamToAutomaton_set__preservePositionIncrements(t_TokenStreamToAutomaton *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setPreservePositionIncrements(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "preservePositionIncrements", arg);
          return -1;
        }

        static int t_TokenStreamToAutomaton_set__unicodeArcs(t_TokenStreamToAutomaton *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setUnicodeArcs(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "unicodeArcs", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FuzzyTermsEnum$LevenshteinAutomataAttributeImpl.h"
#include "org/apache/lucene/search/FuzzyTermsEnum$LevenshteinAutomataAttribute.h"
#include "java/lang/Class.h"
#include "java/util/List.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::class$ = NULL;
        jmethodID *FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::mids$ = NULL;
        bool FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::live$ = false;

        jclass FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FuzzyTermsEnum$LevenshteinAutomataAttributeImpl");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_automata_87851566] = env->getMethodID(cls, "automata", "()Ljava/util/List;");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::FuzzyTermsEnum$LevenshteinAutomataAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::java::util::List FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::automata() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_automata_87851566]));
        }

        void FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        void FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
        }

        jboolean FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_init_(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_automata(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self);
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_clear(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_copyTo(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_equals(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_hashCode(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args);

        static PyMethodDef t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl__methods_[] = {
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, automata, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, clear, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, copyTo, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, equals, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, hashCode, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, ::org::apache::lucene::util::AttributeImpl, FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_init_, 0, 0, 0, 0, 0);

        void t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::install(PyObject *module)
        {
          installType(&PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl), module, "FuzzyTermsEnum$LevenshteinAutomataAttributeImpl", 0);
        }

        void t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl).tp_dict, "class_", make_descriptor(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::initializeClass, 1)))
            return NULL;
          return t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::wrap_Object(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl(((t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *) arg)->object.this$));
        }
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_init_(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args, PyObject *kwds)
        {
          FuzzyTermsEnum$LevenshteinAutomataAttributeImpl object((jobject) NULL);

          INT_CALL(object = FuzzyTermsEnum$LevenshteinAutomataAttributeImpl());
          self->object = object;

          return 0;
        }

        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_automata(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.automata());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::util::automaton::PY_TYPE(CompiledAutomaton));
        }

        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_clear(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_copyTo(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyTo(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl), (PyObject *) self, "copyTo", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_equals(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_hashCode(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl), (PyObject *) self, "hashCode", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Outputs.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Outputs::class$ = NULL;
          jmethodID *Outputs::mids$ = NULL;
          bool Outputs::live$ = false;

          jclass Outputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Outputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_add_537d5bdf] = env->getMethodID(cls, "add", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_common_537d5bdf] = env->getMethodID(cls, "common", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_getNoOutput_846352c3] = env->getMethodID(cls, "getNoOutput", "()Ljava/lang/Object;");
              mids$[mid_merge_537d5bdf] = env->getMethodID(cls, "merge", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_outputToString_c9db4eed] = env->getMethodID(cls, "outputToString", "(Ljava/lang/Object;)Ljava/lang/String;");
              mids$[mid_ramBytesUsed_290588f2] = env->getMethodID(cls, "ramBytesUsed", "(Ljava/lang/Object;)J");
              mids$[mid_read_7d5f44e2] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Ljava/lang/Object;");
              mids$[mid_readFinalOutput_7d5f44e2] = env->getMethodID(cls, "readFinalOutput", "(Lorg/apache/lucene/store/DataInput;)Ljava/lang/Object;");
              mids$[mid_skipFinalOutput_f5d6a551] = env->getMethodID(cls, "skipFinalOutput", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_skipOutput_f5d6a551] = env->getMethodID(cls, "skipOutput", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_subtract_537d5bdf] = env->getMethodID(cls, "subtract", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_write_208ac1fb] = env->getMethodID(cls, "write", "(Ljava/lang/Object;Lorg/apache/lucene/store/DataOutput;)V");
              mids$[mid_writeFinalOutput_208ac1fb] = env->getMethodID(cls, "writeFinalOutput", "(Ljava/lang/Object;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Outputs::Outputs() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::java::lang::Object Outputs::add(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_add_537d5bdf], a0.this$, a1.this$));
          }

          ::java::lang::Object Outputs::common(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_common_537d5bdf], a0.this$, a1.this$));
          }

          ::java::lang::Object Outputs::getNoOutput() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getNoOutput_846352c3]));
          }

          ::java::lang::Object Outputs::merge(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_merge_537d5bdf], a0.this$, a1.this$));
          }

          ::java::lang::String Outputs::outputToString(const ::java::lang::Object & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_c9db4eed], a0.this$));
          }

          jlong Outputs::ramBytesUsed(const ::java::lang::Object & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_290588f2], a0.this$);
          }

          ::java::lang::Object Outputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_read_7d5f44e2], a0.this$));
          }

          ::java::lang::Object Outputs::readFinalOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_readFinalOutput_7d5f44e2], a0.this$));
          }

          void Outputs::skipFinalOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skipFinalOutput_f5d6a551], a0.this$);
          }

          void Outputs::skipOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skipOutput_f5d6a551], a0.this$);
          }

          ::java::lang::Object Outputs::subtract(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_subtract_537d5bdf], a0.this$, a1.this$));
          }

          void Outputs::write(const ::java::lang::Object & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_208ac1fb], a0.this$, a1.this$);
          }

          void Outputs::writeFinalOutput(const ::java::lang::Object & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_writeFinalOutput_208ac1fb], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Outputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Outputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Outputs_of_(t_Outputs *self, PyObject *args);
          static int t_Outputs_init_(t_Outputs *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Outputs_add(t_Outputs *self, PyObject *args);
          static PyObject *t_Outputs_common(t_Outputs *self, PyObject *args);
          static PyObject *t_Outputs_getNoOutput(t_Outputs *self);
          static PyObject *t_Outputs_merge(t_Outputs *self, PyObject *args);
          static PyObject *t_Outputs_outputToString(t_Outputs *self, PyObject *arg);
          static PyObject *t_Outputs_ramBytesUsed(t_Outputs *self, PyObject *arg);
          static PyObject *t_Outputs_read(t_Outputs *self, PyObject *arg);
          static PyObject *t_Outputs_readFinalOutput(t_Outputs *self, PyObject *arg);
          static PyObject *t_Outputs_skipFinalOutput(t_Outputs *self, PyObject *arg);
          static PyObject *t_Outputs_skipOutput(t_Outputs *self, PyObject *arg);
          static PyObject *t_Outputs_subtract(t_Outputs *self, PyObject *args);
          static PyObject *t_Outputs_write(t_Outputs *self, PyObject *args);
          static PyObject *t_Outputs_writeFinalOutput(t_Outputs *self, PyObject *args);
          static PyObject *t_Outputs_get__noOutput(t_Outputs *self, void *data);
          static PyObject *t_Outputs_get__parameters_(t_Outputs *self, void *data);
          static PyGetSetDef t_Outputs__fields_[] = {
            DECLARE_GET_FIELD(t_Outputs, noOutput),
            DECLARE_GET_FIELD(t_Outputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Outputs__methods_[] = {
            DECLARE_METHOD(t_Outputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Outputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Outputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_Outputs, add, METH_VARARGS),
            DECLARE_METHOD(t_Outputs, common, METH_VARARGS),
            DECLARE_METHOD(t_Outputs, getNoOutput, METH_NOARGS),
            DECLARE_METHOD(t_Outputs, merge, METH_VARARGS),
            DECLARE_METHOD(t_Outputs, outputToString, METH_O),
            DECLARE_METHOD(t_Outputs, ramBytesUsed, METH_O),
            DECLARE_METHOD(t_Outputs, read, METH_O),
            DECLARE_METHOD(t_Outputs, readFinalOutput, METH_O),
            DECLARE_METHOD(t_Outputs, skipFinalOutput, METH_O),
            DECLARE_METHOD(t_Outputs, skipOutput, METH_O),
            DECLARE_METHOD(t_Outputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_Outputs, write, METH_VARARGS),
            DECLARE_METHOD(t_Outputs, writeFinalOutput, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Outputs, t_Outputs, ::java::lang::Object, Outputs, t_Outputs_init_, 0, 0, t_Outputs__fields_, 0, 0);
          PyObject *t_Outputs::wrap_Object(const Outputs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Outputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Outputs *self = (t_Outputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Outputs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Outputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Outputs *self = (t_Outputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Outputs::install(PyObject *module)
          {
            installType(&PY_TYPE(Outputs), module, "Outputs", 0);
          }

          void t_Outputs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Outputs).tp_dict, "class_", make_descriptor(Outputs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Outputs).tp_dict, "wrapfn_", make_descriptor(t_Outputs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Outputs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Outputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Outputs::initializeClass, 1)))
              return NULL;
            return t_Outputs::wrap_Object(Outputs(((t_Outputs *) arg)->object.this$));
          }
          static PyObject *t_Outputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Outputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Outputs_of_(t_Outputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Outputs_init_(t_Outputs *self, PyObject *args, PyObject *kwds)
          {
            Outputs object((jobject) NULL);

            INT_CALL(object = Outputs());
            self->object = object;

            return 0;
          }

          static PyObject *t_Outputs_add(t_Outputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "OO", self->parameters[0], self->parameters[0], &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_Outputs_common(t_Outputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "OO", self->parameters[0], self->parameters[0], &a0, &a1))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "common", args);
            return NULL;
          }

          static PyObject *t_Outputs_getNoOutput(t_Outputs *self)
          {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.getNoOutput());
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          static PyObject *t_Outputs_merge(t_Outputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "OO", self->parameters[0], self->parameters[0], &a0, &a1))
            {
              OBJ_CALL(result = self->object.merge(a0, a1));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "merge", args);
            return NULL;
          }

          static PyObject *t_Outputs_outputToString(t_Outputs *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "O", self->parameters[0], &a0))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "outputToString", arg);
            return NULL;
          }

          static PyObject *t_Outputs_ramBytesUsed(t_Outputs *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);
            jlong result;

            if (!parseArg(arg, "O", self->parameters[0], &a0))
            {
              OBJ_CALL(result = self->object.ramBytesUsed(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "ramBytesUsed", arg);
            return NULL;
          }

          static PyObject *t_Outputs_read(t_Outputs *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "read", arg);
            return NULL;
          }

          static PyObject *t_Outputs_readFinalOutput(t_Outputs *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.readFinalOutput(a0));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "readFinalOutput", arg);
            return NULL;
          }

          static PyObject *t_Outputs_skipFinalOutput(t_Outputs *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.skipFinalOutput(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "skipFinalOutput", arg);
            return NULL;
          }

          static PyObject *t_Outputs_skipOutput(t_Outputs *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.skipOutput(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "skipOutput", arg);
            return NULL;
          }

          static PyObject *t_Outputs_subtract(t_Outputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "OO", self->parameters[0], self->parameters[0], &a0, &a1))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "subtract", args);
            return NULL;
          }

          static PyObject *t_Outputs_write(t_Outputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "Ok", self->parameters[0], ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "write", args);
            return NULL;
          }

          static PyObject *t_Outputs_writeFinalOutput(t_Outputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "Ok", self->parameters[0], ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.writeFinalOutput(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "writeFinalOutput", args);
            return NULL;
          }
          static PyObject *t_Outputs_get__parameters_(t_Outputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Outputs_get__noOutput(t_Outputs *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/NoLockFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *NoLockFactory::class$ = NULL;
        jmethodID *NoLockFactory::mids$ = NULL;
        bool NoLockFactory::live$ = false;

        jclass NoLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/NoLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_getNoLockFactory_a2b6ff3e] = env->getStaticMethodID(cls, "getNoLockFactory", "()Lorg/apache/lucene/store/NoLockFactory;");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void NoLockFactory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        NoLockFactory NoLockFactory::getNoLockFactory()
        {
          jclass cls = env->getClass(initializeClass);
          return NoLockFactory(env->callStaticObjectMethod(cls, mids$[mid_getNoLockFactory_a2b6ff3e]));
        }

        ::org::apache::lucene::store::Lock NoLockFactory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_NoLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoLockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoLockFactory_clearLock(t_NoLockFactory *self, PyObject *args);
        static PyObject *t_NoLockFactory_getNoLockFactory(PyTypeObject *type);
        static PyObject *t_NoLockFactory_makeLock(t_NoLockFactory *self, PyObject *args);
        static PyObject *t_NoLockFactory_get__noLockFactory(t_NoLockFactory *self, void *data);
        static PyGetSetDef t_NoLockFactory__fields_[] = {
          DECLARE_GET_FIELD(t_NoLockFactory, noLockFactory),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NoLockFactory__methods_[] = {
          DECLARE_METHOD(t_NoLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoLockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoLockFactory, clearLock, METH_VARARGS),
          DECLARE_METHOD(t_NoLockFactory, getNoLockFactory, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_NoLockFactory, makeLock, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NoLockFactory, t_NoLockFactory, ::org::apache::lucene::store::LockFactory, NoLockFactory, abstract_init, 0, 0, t_NoLockFactory__fields_, 0, 0);

        void t_NoLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(NoLockFactory), module, "NoLockFactory", 0);
        }

        void t_NoLockFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NoLockFactory).tp_dict, "class_", make_descriptor(NoLockFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NoLockFactory).tp_dict, "wrapfn_", make_descriptor(t_NoLockFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NoLockFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NoLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NoLockFactory::initializeClass, 1)))
            return NULL;
          return t_NoLockFactory::wrap_Object(NoLockFactory(((t_NoLockFactory *) arg)->object.this$));
        }
        static PyObject *t_NoLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NoLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NoLockFactory_clearLock(t_NoLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NoLockFactory), (PyObject *) self, "clearLock", args, 2);
        }

        static PyObject *t_NoLockFactory_getNoLockFactory(PyTypeObject *type)
        {
          NoLockFactory result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::store::NoLockFactory::getNoLockFactory());
          return t_NoLockFactory::wrap_Object(result);
        }

        static PyObject *t_NoLockFactory_makeLock(t_NoLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NoLockFactory), (PyObject *) self, "makeLock", args, 2);
        }

        static PyObject *t_NoLockFactory_get__noLockFactory(t_NoLockFactory *self, void *data)
        {
          NoLockFactory value((jobject) NULL);
          OBJ_CALL(value = self->object.getNoLockFactory());
          return t_NoLockFactory::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/NullFragmenter.h"
#include "org/apache/lucene/search/highlight/Fragmenter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *NullFragmenter::class$ = NULL;
          jmethodID *NullFragmenter::mids$ = NULL;
          bool NullFragmenter::live$ = false;

          jclass NullFragmenter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/NullFragmenter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_isNewFragment_54c6a16a] = env->getMethodID(cls, "isNewFragment", "()Z");
              mids$[mid_start_7d0c5392] = env->getMethodID(cls, "start", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NullFragmenter::NullFragmenter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean NullFragmenter::isNewFragment() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isNewFragment_54c6a16a]);
          }

          void NullFragmenter::start(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_start_7d0c5392], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_NullFragmenter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NullFragmenter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NullFragmenter_init_(t_NullFragmenter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NullFragmenter_isNewFragment(t_NullFragmenter *self);
          static PyObject *t_NullFragmenter_start(t_NullFragmenter *self, PyObject *args);
          static PyObject *t_NullFragmenter_get__newFragment(t_NullFragmenter *self, void *data);
          static PyGetSetDef t_NullFragmenter__fields_[] = {
            DECLARE_GET_FIELD(t_NullFragmenter, newFragment),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NullFragmenter__methods_[] = {
            DECLARE_METHOD(t_NullFragmenter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NullFragmenter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NullFragmenter, isNewFragment, METH_NOARGS),
            DECLARE_METHOD(t_NullFragmenter, start, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NullFragmenter, t_NullFragmenter, ::java::lang::Object, NullFragmenter, t_NullFragmenter_init_, 0, 0, t_NullFragmenter__fields_, 0, 0);

          void t_NullFragmenter::install(PyObject *module)
          {
            installType(&PY_TYPE(NullFragmenter), module, "NullFragmenter", 0);
          }

          void t_NullFragmenter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NullFragmenter).tp_dict, "class_", make_descriptor(NullFragmenter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NullFragmenter).tp_dict, "wrapfn_", make_descriptor(t_NullFragmenter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NullFragmenter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NullFragmenter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NullFragmenter::initializeClass, 1)))
              return NULL;
            return t_NullFragmenter::wrap_Object(NullFragmenter(((t_NullFragmenter *) arg)->object.this$));
          }
          static PyObject *t_NullFragmenter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NullFragmenter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NullFragmenter_init_(t_NullFragmenter *self, PyObject *args, PyObject *kwds)
          {
            NullFragmenter object((jobject) NULL);

            INT_CALL(object = NullFragmenter());
            self->object = object;

            return 0;
          }

          static PyObject *t_NullFragmenter_isNewFragment(t_NullFragmenter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isNewFragment());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_NullFragmenter_start(t_NullFragmenter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.start(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "start", args);
            return NULL;
          }

          static PyObject *t_NullFragmenter_get__newFragment(t_NullFragmenter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isNewFragment());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalMappingAtomicReader.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *OrdinalMappingAtomicReader::class$ = NULL;
          jmethodID *OrdinalMappingAtomicReader::mids$ = NULL;
          bool OrdinalMappingAtomicReader::live$ = false;

          jclass OrdinalMappingAtomicReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/OrdinalMappingAtomicReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_bec2640d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/AtomicReader;[ILorg/apache/lucene/facet/FacetsConfig;)V");
              mids$[mid_getBinaryDocValues_ecab96be] = env->getMethodID(cls, "getBinaryDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
              mids$[mid_encode_14756a33] = env->getMethodID(cls, "encode", "(Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getOrdinalsReader_bb2aeceb] = env->getMethodID(cls, "getOrdinalsReader", "(Ljava/lang/String;)Lorg/apache/lucene/facet/taxonomy/OrdinalsReader;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OrdinalMappingAtomicReader::OrdinalMappingAtomicReader(const ::org::apache::lucene::index::AtomicReader & a0, const JArray< jint > & a1, const ::org::apache::lucene::facet::FacetsConfig & a2) : ::org::apache::lucene::index::FilterAtomicReader(env->newObject(initializeClass, &mids$, mid_init$_bec2640d, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::index::BinaryDocValues OrdinalMappingAtomicReader::getBinaryDocValues(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinaryDocValues_ecab96be], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_OrdinalMappingAtomicReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OrdinalMappingAtomicReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OrdinalMappingAtomicReader_init_(t_OrdinalMappingAtomicReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OrdinalMappingAtomicReader_getBinaryDocValues(t_OrdinalMappingAtomicReader *self, PyObject *args);

          static PyMethodDef t_OrdinalMappingAtomicReader__methods_[] = {
            DECLARE_METHOD(t_OrdinalMappingAtomicReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OrdinalMappingAtomicReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OrdinalMappingAtomicReader, getBinaryDocValues, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(OrdinalMappingAtomicReader, t_OrdinalMappingAtomicReader, ::org::apache::lucene::index::FilterAtomicReader, OrdinalMappingAtomicReader, t_OrdinalMappingAtomicReader_init_, 0, 0, 0, 0, 0);

          void t_OrdinalMappingAtomicReader::install(PyObject *module)
          {
            installType(&PY_TYPE(OrdinalMappingAtomicReader), module, "OrdinalMappingAtomicReader", 0);
          }

          void t_OrdinalMappingAtomicReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(OrdinalMappingAtomicReader).tp_dict, "class_", make_descriptor(OrdinalMappingAtomicReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(OrdinalMappingAtomicReader).tp_dict, "wrapfn_", make_descriptor(t_OrdinalMappingAtomicReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(OrdinalMappingAtomicReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OrdinalMappingAtomicReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OrdinalMappingAtomicReader::initializeClass, 1)))
              return NULL;
            return t_OrdinalMappingAtomicReader::wrap_Object(OrdinalMappingAtomicReader(((t_OrdinalMappingAtomicReader *) arg)->object.this$));
          }
          static PyObject *t_OrdinalMappingAtomicReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OrdinalMappingAtomicReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OrdinalMappingAtomicReader_init_(t_OrdinalMappingAtomicReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
            JArray< jint > a1((jobject) NULL);
            ::org::apache::lucene::facet::FacetsConfig a2((jobject) NULL);
            OrdinalMappingAtomicReader object((jobject) NULL);

            if (!parseArgs(args, "k[Ik", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = OrdinalMappingAtomicReader(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_OrdinalMappingAtomicReader_getBinaryDocValues(t_OrdinalMappingAtomicReader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.getBinaryDocValues(a0));
              return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(OrdinalMappingAtomicReader), (PyObject *) self, "getBinaryDocValues", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/PatternParser.h"
#include "java/io/IOException.h"
#include "java/io/File.h"
#include "org/apache/lucene/analysis/compound/hyphenation/PatternConsumer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *PatternParser::class$ = NULL;
            jmethodID *PatternParser::mids$ = NULL;
            bool PatternParser::live$ = false;

            jclass PatternParser::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/PatternParser");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_f6e11b3c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/compound/hyphenation/PatternConsumer;)V");
                mids$[mid_characters_6f0bb356] = env->getMethodID(cls, "characters", "([CII)V");
                mids$[mid_endElement_9c119564] = env->getMethodID(cls, "endElement", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
                mids$[mid_parse_5fdc3f48] = env->getMethodID(cls, "parse", "(Ljava/lang/String;)V");
                mids$[mid_parse_c3dacf57] = env->getMethodID(cls, "parse", "(Ljava/io/File;)V");
                mids$[mid_setConsumer_f6e11b3c] = env->getMethodID(cls, "setConsumer", "(Lorg/apache/lucene/analysis/compound/hyphenation/PatternConsumer;)V");
                mids$[mid_getPattern_97a5258f] = env->getStaticMethodID(cls, "getPattern", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_readToken_7614059b] = env->getMethodID(cls, "readToken", "(Ljava/lang/StringBuilder;)Ljava/lang/String;");
                mids$[mid_normalizeException_27b9ce2f] = env->getMethodID(cls, "normalizeException", "(Ljava/util/ArrayList;)Ljava/util/ArrayList;");
                mids$[mid_getExceptionWord_0c7b6c64] = env->getMethodID(cls, "getExceptionWord", "(Ljava/util/ArrayList;)Ljava/lang/String;");
                mids$[mid_getInterletterValues_97a5258f] = env->getStaticMethodID(cls, "getInterletterValues", "(Ljava/lang/String;)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            PatternParser::PatternParser() : ::org::xml::sax::helpers::DefaultHandler(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            PatternParser::PatternParser(const ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer & a0) : ::org::xml::sax::helpers::DefaultHandler(env->newObject(initializeClass, &mids$, mid_init$_f6e11b3c, a0.this$)) {}

            void PatternParser::characters(const JArray< jchar > & a0, jint a1, jint a2) const
            {
              env->callVoidMethod(this$, mids$[mid_characters_6f0bb356], a0.this$, a1, a2);
            }

            void PatternParser::endElement(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) const
            {
              env->callVoidMethod(this$, mids$[mid_endElement_9c119564], a0.this$, a1.this$, a2.this$);
            }

            void PatternParser::parse(const ::java::lang::String & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_parse_5fdc3f48], a0.this$);
            }

            void PatternParser::parse(const ::java::io::File & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_parse_c3dacf57], a0.this$);
            }

            void PatternParser::setConsumer(const ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setConsumer_f6e11b3c], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_PatternParser_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_PatternParser_instance_(PyTypeObject *type, PyObject *arg);
            static int t_PatternParser_init_(t_PatternParser *self, PyObject *args, PyObject *kwds);
            static PyObject *t_PatternParser_characters(t_PatternParser *self, PyObject *args);
            static PyObject *t_PatternParser_endElement(t_PatternParser *self, PyObject *args);
            static PyObject *t_PatternParser_parse(t_PatternParser *self, PyObject *args);
            static PyObject *t_PatternParser_setConsumer(t_PatternParser *self, PyObject *arg);
            static int t_PatternParser_set__consumer(t_PatternParser *self, PyObject *arg, void *data);
            static PyGetSetDef t_PatternParser__fields_[] = {
              DECLARE_SET_FIELD(t_PatternParser, consumer),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_PatternParser__methods_[] = {
              DECLARE_METHOD(t_PatternParser, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PatternParser, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PatternParser, characters, METH_VARARGS),
              DECLARE_METHOD(t_PatternParser, endElement, METH_VARARGS),
              DECLARE_METHOD(t_PatternParser, parse, METH_VARARGS),
              DECLARE_METHOD(t_PatternParser, setConsumer, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(PatternParser, t_PatternParser, ::org::xml::sax::helpers::DefaultHandler, PatternParser, t_PatternParser_init_, 0, 0, t_PatternParser__fields_, 0, 0);

            void t_PatternParser::install(PyObject *module)
            {
              installType(&PY_TYPE(PatternParser), module, "PatternParser", 0);
            }

            void t_PatternParser::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(PatternParser).tp_dict, "class_", make_descriptor(PatternParser::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(PatternParser).tp_dict, "wrapfn_", make_descriptor(t_PatternParser::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(PatternParser).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_PatternParser_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, PatternParser::initializeClass, 1)))
                return NULL;
              return t_PatternParser::wrap_Object(PatternParser(((t_PatternParser *) arg)->object.this$));
            }
            static PyObject *t_PatternParser_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, PatternParser::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_PatternParser_init_(t_PatternParser *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  PatternParser object((jobject) NULL);

                  INT_CALL(object = PatternParser());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer a0((jobject) NULL);
                  PatternParser object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer::initializeClass, &a0))
                  {
                    INT_CALL(object = PatternParser(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_PatternParser_characters(t_PatternParser *self, PyObject *args)
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.characters(a0, a1, a2));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(PatternParser), (PyObject *) self, "characters", args, 2);
            }

            static PyObject *t_PatternParser_endElement(t_PatternParser *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);

              if (!parseArgs(args, "sss", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.endElement(a0, a1, a2));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(PatternParser), (PyObject *) self, "endElement", args, 2);
            }

            static PyObject *t_PatternParser_parse(t_PatternParser *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    OBJ_CALL(self->object.parse(a0));
                    Py_RETURN_NONE;
                  }
                }
                {
                  ::java::io::File a0((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
                  {
                    OBJ_CALL(self->object.parse(a0));
                    Py_RETURN_NONE;
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "parse", args);
              return NULL;
            }

            static PyObject *t_PatternParser_setConsumer(t_PatternParser *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setConsumer(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setConsumer", arg);
              return NULL;
            }

            static int t_PatternParser_set__consumer(t_PatternParser *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer::initializeClass, &value))
                {
                  INT_CALL(self->object.setConsumer(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "consumer", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Compile.h"
#include "java/lang/Exception.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Compile::class$ = NULL;
      jmethodID *Compile::mids$ = NULL;
      bool Compile::live$ = false;

      jclass Compile::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Compile");

          mids$ = new jmethodID[max_mid];
          mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      void Compile::main(const JArray< ::java::lang::String > & a0)
      {
        jclass cls = env->getClass(initializeClass);
        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Compile_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Compile_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Compile_main(PyTypeObject *type, PyObject *arg);

      static PyMethodDef t_Compile__methods_[] = {
        DECLARE_METHOD(t_Compile, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Compile, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Compile, main, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Compile, t_Compile, ::java::lang::Object, Compile, abstract_init, 0, 0, 0, 0, 0);

      void t_Compile::install(PyObject *module)
      {
        installType(&PY_TYPE(Compile), module, "Compile", 0);
      }

      void t_Compile::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Compile).tp_dict, "class_", make_descriptor(Compile::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Compile).tp_dict, "wrapfn_", make_descriptor(t_Compile::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Compile).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Compile_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Compile::initializeClass, 1)))
          return NULL;
        return t_Compile::wrap_Object(Compile(((t_Compile *) arg)->object.this$));
      }
      static PyObject *t_Compile_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Compile::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_Compile_main(PyTypeObject *type, PyObject *arg)
      {
        JArray< ::java::lang::String > a0((jobject) NULL);

        if (!parseArg(arg, "[s", &a0))
        {
          OBJ_CALL(::org::egothor::stemmer::Compile::main(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError(type, "main", arg);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fa/PersianCharFilter.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {

          ::java::lang::Class *PersianCharFilter::class$ = NULL;
          jmethodID *PersianCharFilter::mids$ = NULL;
          bool PersianCharFilter::live$ = false;

          jclass PersianCharFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fa/PersianCharFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
              mids$[mid_read_6f0bb349] = env->getMethodID(cls, "read", "([CII)I");
              mids$[mid_correct_39c7bd23] = env->getMethodID(cls, "correct", "(I)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PersianCharFilter::PersianCharFilter(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::CharFilter(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          jint PersianCharFilter::read() const
          {
            return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
          }

          jint PersianCharFilter::read(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callIntMethod(this$, mids$[mid_read_6f0bb349], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {
          static PyObject *t_PersianCharFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PersianCharFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PersianCharFilter_init_(t_PersianCharFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PersianCharFilter_read(t_PersianCharFilter *self, PyObject *args);

          static PyMethodDef t_PersianCharFilter__methods_[] = {
            DECLARE_METHOD(t_PersianCharFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianCharFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianCharFilter, read, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PersianCharFilter, t_PersianCharFilter, ::org::apache::lucene::analysis::CharFilter, PersianCharFilter, t_PersianCharFilter_init_, 0, 0, 0, 0, 0);

          void t_PersianCharFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PersianCharFilter), module, "PersianCharFilter", 0);
          }

          void t_PersianCharFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PersianCharFilter).tp_dict, "class_", make_descriptor(PersianCharFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PersianCharFilter).tp_dict, "wrapfn_", make_descriptor(t_PersianCharFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PersianCharFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PersianCharFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PersianCharFilter::initializeClass, 1)))
              return NULL;
            return t_PersianCharFilter::wrap_Object(PersianCharFilter(((t_PersianCharFilter *) arg)->object.this$));
          }
          static PyObject *t_PersianCharFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PersianCharFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PersianCharFilter_init_(t_PersianCharFilter *self, PyObject *args, PyObject *kwds)
          {
            ::java::io::Reader a0((jobject) NULL);
            PersianCharFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              INT_CALL(object = PersianCharFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PersianCharFilter_read(t_PersianCharFilter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jint result;
                OBJ_CALL(result = self->object.read());
                return PyInt_FromLong((long) result);
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jint result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.read(a0, a1, a2));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(PersianCharFilter), (PyObject *) self, "read", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *OrdinalsReader$OrdinalsSegmentReader::class$ = NULL;
          jmethodID *OrdinalsReader$OrdinalsSegmentReader::mids$ = NULL;
          bool OrdinalsReader$OrdinalsSegmentReader::live$ = false;

          jclass OrdinalsReader$OrdinalsSegmentReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_get_e6e32052] = env->getMethodID(cls, "get", "(ILorg/apache/lucene/util/IntsRef;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OrdinalsReader$OrdinalsSegmentReader::OrdinalsReader$OrdinalsSegmentReader() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void OrdinalsReader$OrdinalsSegmentReader::get(jint a0, const ::org::apache::lucene::util::IntsRef & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_get_e6e32052], a0, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_OrdinalsReader$OrdinalsSegmentReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OrdinalsReader$OrdinalsSegmentReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OrdinalsReader$OrdinalsSegmentReader_init_(t_OrdinalsReader$OrdinalsSegmentReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OrdinalsReader$OrdinalsSegmentReader_get(t_OrdinalsReader$OrdinalsSegmentReader *self, PyObject *args);

          static PyMethodDef t_OrdinalsReader$OrdinalsSegmentReader__methods_[] = {
            DECLARE_METHOD(t_OrdinalsReader$OrdinalsSegmentReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OrdinalsReader$OrdinalsSegmentReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OrdinalsReader$OrdinalsSegmentReader, get, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(OrdinalsReader$OrdinalsSegmentReader, t_OrdinalsReader$OrdinalsSegmentReader, ::java::lang::Object, OrdinalsReader$OrdinalsSegmentReader, t_OrdinalsReader$OrdinalsSegmentReader_init_, 0, 0, 0, 0, 0);

          void t_OrdinalsReader$OrdinalsSegmentReader::install(PyObject *module)
          {
            installType(&PY_TYPE(OrdinalsReader$OrdinalsSegmentReader), module, "OrdinalsReader$OrdinalsSegmentReader", 0);
          }

          void t_OrdinalsReader$OrdinalsSegmentReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(OrdinalsReader$OrdinalsSegmentReader).tp_dict, "class_", make_descriptor(OrdinalsReader$OrdinalsSegmentReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(OrdinalsReader$OrdinalsSegmentReader).tp_dict, "wrapfn_", make_descriptor(t_OrdinalsReader$OrdinalsSegmentReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(OrdinalsReader$OrdinalsSegmentReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OrdinalsReader$OrdinalsSegmentReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OrdinalsReader$OrdinalsSegmentReader::initializeClass, 1)))
              return NULL;
            return t_OrdinalsReader$OrdinalsSegmentReader::wrap_Object(OrdinalsReader$OrdinalsSegmentReader(((t_OrdinalsReader$OrdinalsSegmentReader *) arg)->object.this$));
          }
          static PyObject *t_OrdinalsReader$OrdinalsSegmentReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OrdinalsReader$OrdinalsSegmentReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OrdinalsReader$OrdinalsSegmentReader_init_(t_OrdinalsReader$OrdinalsSegmentReader *self, PyObject *args, PyObject *kwds)
          {
            OrdinalsReader$OrdinalsSegmentReader object((jobject) NULL);

            INT_CALL(object = OrdinalsReader$OrdinalsSegmentReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_OrdinalsReader$OrdinalsSegmentReader_get(t_OrdinalsReader$OrdinalsSegmentReader *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::util::IntsRef a1((jobject) NULL);

            if (!parseArgs(args, "Ik", ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.get(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "get", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/GrowableByteArrayDataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *GrowableByteArrayDataOutput::class$ = NULL;
        jmethodID *GrowableByteArrayDataOutput::mids$ = NULL;
        jfieldID *GrowableByteArrayDataOutput::fids$ = NULL;
        bool GrowableByteArrayDataOutput::live$ = false;

        jclass GrowableByteArrayDataOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/GrowableByteArrayDataOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_writeByte_b2271687] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_86f4435f] = env->getMethodID(cls, "writeBytes", "([BII)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_bytes] = env->getFieldID(cls, "bytes", "[B");
            fids$[fid_length] = env->getFieldID(cls, "length", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        GrowableByteArrayDataOutput::GrowableByteArrayDataOutput(jint a0) : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        void GrowableByteArrayDataOutput::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_b2271687], a0);
        }

        void GrowableByteArrayDataOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_86f4435f], a0.this$, a1, a2);
        }

        JArray< jbyte > GrowableByteArrayDataOutput::_get_bytes() const
        {
          return JArray< jbyte >(env->getObjectField(this$, fids$[fid_bytes]));
        }

        void GrowableByteArrayDataOutput::_set_bytes(const JArray< jbyte > & a0) const
        {
          env->setObjectField(this$, fids$[fid_bytes], a0.this$);
        }

        jint GrowableByteArrayDataOutput::_get_length() const
        {
          return env->getIntField(this$, fids$[fid_length]);
        }

        void GrowableByteArrayDataOutput::_set_length(jint a0) const
        {
          env->setIntField(this$, fids$[fid_length], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_GrowableByteArrayDataOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_GrowableByteArrayDataOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_GrowableByteArrayDataOutput_init_(t_GrowableByteArrayDataOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_GrowableByteArrayDataOutput_writeByte(t_GrowableByteArrayDataOutput *self, PyObject *args);
        static PyObject *t_GrowableByteArrayDataOutput_writeBytes(t_GrowableByteArrayDataOutput *self, PyObject *args);
        static PyObject *t_GrowableByteArrayDataOutput_get__bytes(t_GrowableByteArrayDataOutput *self, void *data);
        static int t_GrowableByteArrayDataOutput_set__bytes(t_GrowableByteArrayDataOutput *self, PyObject *arg, void *data);
        static PyObject *t_GrowableByteArrayDataOutput_get__length(t_GrowableByteArrayDataOutput *self, void *data);
        static int t_GrowableByteArrayDataOutput_set__length(t_GrowableByteArrayDataOutput *self, PyObject *arg, void *data);

        static PyGetSetDef t_GrowableByteArrayDataOutput__fields_[] = {
          DECLARE_GETSET_FIELD(t_GrowableByteArrayDataOutput, bytes),
          DECLARE_GETSET_FIELD(t_GrowableByteArrayDataOutput, length),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_GrowableByteArrayDataOutput__methods_[] = {
          DECLARE_METHOD(t_GrowableByteArrayDataOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GrowableByteArrayDataOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GrowableByteArrayDataOutput, writeByte, METH_VARARGS),
          DECLARE_METHOD(t_GrowableByteArrayDataOutput, writeBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(GrowableByteArrayDataOutput, t_GrowableByteArrayDataOutput, ::org::apache::lucene::store::DataOutput, GrowableByteArrayDataOutput, t_GrowableByteArrayDataOutput_init_, 0, 0, t_GrowableByteArrayDataOutput__fields_, 0, 0);

        void t_GrowableByteArrayDataOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(GrowableByteArrayDataOutput), module, "GrowableByteArrayDataOutput", 0);
        }

        void t_GrowableByteArrayDataOutput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(GrowableByteArrayDataOutput).tp_dict, "class_", make_descriptor(GrowableByteArrayDataOutput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(GrowableByteArrayDataOutput).tp_dict, "wrapfn_", make_descriptor(t_GrowableByteArrayDataOutput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(GrowableByteArrayDataOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_GrowableByteArrayDataOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, GrowableByteArrayDataOutput::initializeClass, 1)))
            return NULL;
          return t_GrowableByteArrayDataOutput::wrap_Object(GrowableByteArrayDataOutput(((t_GrowableByteArrayDataOutput *) arg)->object.this$));
        }
        static PyObject *t_GrowableByteArrayDataOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, GrowableByteArrayDataOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_GrowableByteArrayDataOutput_init_(t_GrowableByteArrayDataOutput *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          GrowableByteArrayDataOutput object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = GrowableByteArrayDataOutput(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_GrowableByteArrayDataOutput_writeByte(t_GrowableByteArrayDataOutput *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(GrowableByteArrayDataOutput), (PyObject *) self, "writeByte", args, 2);
        }

        static PyObject *t_GrowableByteArrayDataOutput_writeBytes(t_GrowableByteArrayDataOutput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(GrowableByteArrayDataOutput), (PyObject *) self, "writeBytes", args, 2);
        }

        static PyObject *t_GrowableByteArrayDataOutput_get__bytes(t_GrowableByteArrayDataOutput *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_bytes());
          return value.wrap();
        }
        static int t_GrowableByteArrayDataOutput_set__bytes(t_GrowableByteArrayDataOutput *self, PyObject *arg, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          if (!parseArg(arg, "[B", &value))
          {
            INT_CALL(self->object._set_bytes(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "bytes", arg);
          return -1;
        }

        static PyObject *t_GrowableByteArrayDataOutput_get__length(t_GrowableByteArrayDataOutput *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_length());
          return PyInt_FromLong((long) value);
        }
        static int t_GrowableByteArrayDataOutput_set__length(t_GrowableByteArrayDataOutput *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_length(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "length", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$DocComparator.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Integer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$DocComparator::class$ = NULL;
        jmethodID *FieldComparator$DocComparator::mids$ = NULL;
        bool FieldComparator$DocComparator::live$ = false;

        jclass FieldComparator$DocComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$DocComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_af7b73a4] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Integer;)V");
            mids$[mid_value_7266dabb] = env->getMethodID(cls, "value", "(I)Ljava/lang/Integer;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint FieldComparator$DocComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$DocComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$DocComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        void FieldComparator$DocComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$DocComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$DocComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$DocComparator::setTopValue(const ::java::lang::Integer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_af7b73a4], a0.this$);
        }

        ::java::lang::Integer FieldComparator$DocComparator::value(jint a0) const
        {
          return ::java::lang::Integer(env->callObjectMethod(this$, mids$[mid_value_7266dabb], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$DocComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$DocComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$DocComparator_of_(t_FieldComparator$DocComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DocComparator_compare(t_FieldComparator$DocComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DocComparator_compareBottom(t_FieldComparator$DocComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DocComparator_compareTop(t_FieldComparator$DocComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DocComparator_copy(t_FieldComparator$DocComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DocComparator_setBottom(t_FieldComparator$DocComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DocComparator_setNextReader(t_FieldComparator$DocComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DocComparator_setTopValue(t_FieldComparator$DocComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DocComparator_value(t_FieldComparator$DocComparator *self, PyObject *args);
        static int t_FieldComparator$DocComparator_set__bottom(t_FieldComparator$DocComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$DocComparator_set__nextReader(t_FieldComparator$DocComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$DocComparator_set__topValue(t_FieldComparator$DocComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$DocComparator_get__parameters_(t_FieldComparator$DocComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$DocComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$DocComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$DocComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$DocComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$DocComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$DocComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$DocComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$DocComparator, t_FieldComparator$DocComparator, ::org::apache::lucene::search::FieldComparator, FieldComparator$DocComparator, abstract_init, 0, 0, t_FieldComparator$DocComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$DocComparator::wrap_Object(const FieldComparator$DocComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$DocComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$DocComparator *self = (t_FieldComparator$DocComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$DocComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$DocComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$DocComparator *self = (t_FieldComparator$DocComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$DocComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$DocComparator), module, "FieldComparator$DocComparator", 0);
        }

        void t_FieldComparator$DocComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$DocComparator).tp_dict, "class_", make_descriptor(FieldComparator$DocComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$DocComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$DocComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$DocComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$DocComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$DocComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$DocComparator::wrap_Object(FieldComparator$DocComparator(((t_FieldComparator$DocComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$DocComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$DocComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$DocComparator_of_(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldComparator$DocComparator_compare(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$DocComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$DocComparator_compareBottom(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$DocComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$DocComparator_compareTop(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$DocComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$DocComparator_copy(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$DocComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$DocComparator_setBottom(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$DocComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$DocComparator_setNextReader(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
          }

          return callSuper(&PY_TYPE(FieldComparator$DocComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$DocComparator_setTopValue(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          ::java::lang::Integer a0((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Integer), &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$DocComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$DocComparator_value(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          jint a0;
          ::java::lang::Integer result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::java::lang::t_Integer::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$DocComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$DocComparator_get__parameters_(t_FieldComparator$DocComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$DocComparator_set__bottom(t_FieldComparator$DocComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$DocComparator_set__nextReader(t_FieldComparator$DocComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$DocComparator_set__topValue(t_FieldComparator$DocComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Integer value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Integer), &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/WAH8DocIdSet$WordBuilder.h"
#include "org/apache/lucene/util/WAH8DocIdSet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *WAH8DocIdSet$WordBuilder::class$ = NULL;
        jmethodID *WAH8DocIdSet$WordBuilder::mids$ = NULL;
        bool WAH8DocIdSet$WordBuilder::live$ = false;

        jclass WAH8DocIdSet$WordBuilder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/WAH8DocIdSet$WordBuilder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_build_b0ef9fd4] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/util/WAH8DocIdSet;");
            mids$[mid_setIndexInterval_3cc37a2d] = env->getMethodID(cls, "setIndexInterval", "(I)Lorg/apache/lucene/util/WAH8DocIdSet$WordBuilder;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::WAH8DocIdSet WAH8DocIdSet$WordBuilder::build() const
        {
          return ::org::apache::lucene::util::WAH8DocIdSet(env->callObjectMethod(this$, mids$[mid_build_b0ef9fd4]));
        }

        WAH8DocIdSet$WordBuilder WAH8DocIdSet$WordBuilder::setIndexInterval(jint a0) const
        {
          return WAH8DocIdSet$WordBuilder(env->callObjectMethod(this$, mids$[mid_setIndexInterval_3cc37a2d], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_WAH8DocIdSet$WordBuilder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WAH8DocIdSet$WordBuilder_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WAH8DocIdSet$WordBuilder_build(t_WAH8DocIdSet$WordBuilder *self);
        static PyObject *t_WAH8DocIdSet$WordBuilder_setIndexInterval(t_WAH8DocIdSet$WordBuilder *self, PyObject *arg);
        static int t_WAH8DocIdSet$WordBuilder_set__indexInterval(t_WAH8DocIdSet$WordBuilder *self, PyObject *arg, void *data);
        static PyGetSetDef t_WAH8DocIdSet$WordBuilder__fields_[] = {
          DECLARE_SET_FIELD(t_WAH8DocIdSet$WordBuilder, indexInterval),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_WAH8DocIdSet$WordBuilder__methods_[] = {
          DECLARE_METHOD(t_WAH8DocIdSet$WordBuilder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WAH8DocIdSet$WordBuilder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WAH8DocIdSet$WordBuilder, build, METH_NOARGS),
          DECLARE_METHOD(t_WAH8DocIdSet$WordBuilder, setIndexInterval, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(WAH8DocIdSet$WordBuilder, t_WAH8DocIdSet$WordBuilder, ::java::lang::Object, WAH8DocIdSet$WordBuilder, abstract_init, 0, 0, t_WAH8DocIdSet$WordBuilder__fields_, 0, 0);

        void t_WAH8DocIdSet$WordBuilder::install(PyObject *module)
        {
          installType(&PY_TYPE(WAH8DocIdSet$WordBuilder), module, "WAH8DocIdSet$WordBuilder", 0);
        }

        void t_WAH8DocIdSet$WordBuilder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet$WordBuilder).tp_dict, "class_", make_descriptor(WAH8DocIdSet$WordBuilder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet$WordBuilder).tp_dict, "wrapfn_", make_descriptor(t_WAH8DocIdSet$WordBuilder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet$WordBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_WAH8DocIdSet$WordBuilder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, WAH8DocIdSet$WordBuilder::initializeClass, 1)))
            return NULL;
          return t_WAH8DocIdSet$WordBuilder::wrap_Object(WAH8DocIdSet$WordBuilder(((t_WAH8DocIdSet$WordBuilder *) arg)->object.this$));
        }
        static PyObject *t_WAH8DocIdSet$WordBuilder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, WAH8DocIdSet$WordBuilder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_WAH8DocIdSet$WordBuilder_build(t_WAH8DocIdSet$WordBuilder *self)
        {
          ::org::apache::lucene::util::WAH8DocIdSet result((jobject) NULL);
          OBJ_CALL(result = self->object.build());
          return ::org::apache::lucene::util::t_WAH8DocIdSet::wrap_Object(result);
        }

        static PyObject *t_WAH8DocIdSet$WordBuilder_setIndexInterval(t_WAH8DocIdSet$WordBuilder *self, PyObject *arg)
        {
          jint a0;
          WAH8DocIdSet$WordBuilder result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setIndexInterval(a0));
            return t_WAH8DocIdSet$WordBuilder::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexInterval", arg);
          return NULL;
        }

        static int t_WAH8DocIdSet$WordBuilder_set__indexInterval(t_WAH8DocIdSet$WordBuilder *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setIndexInterval(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "indexInterval", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/join/ScoreMode.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ToParentBlockJoinQuery::class$ = NULL;
          jmethodID *ToParentBlockJoinQuery::mids$ = NULL;
          bool ToParentBlockJoinQuery::live$ = false;

          jclass ToParentBlockJoinQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ToParentBlockJoinQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_196d5feb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/join/ScoreMode;)V");
              mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ToParentBlockJoinQuery::ToParentBlockJoinQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Filter & a1, const ::org::apache::lucene::search::join::ScoreMode & a2) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_196d5feb, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::search::Weight ToParentBlockJoinQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
          }

          jboolean ToParentBlockJoinQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void ToParentBlockJoinQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          jint ToParentBlockJoinQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query ToParentBlockJoinQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          ::java::lang::String ToParentBlockJoinQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ToParentBlockJoinQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ToParentBlockJoinQuery_init_(t_ToParentBlockJoinQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ToParentBlockJoinQuery_createWeight(t_ToParentBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinQuery_equals(t_ToParentBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinQuery_extractTerms(t_ToParentBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinQuery_hashCode(t_ToParentBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinQuery_rewrite(t_ToParentBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinQuery_toString(t_ToParentBlockJoinQuery *self, PyObject *args);

          static PyMethodDef t_ToParentBlockJoinQuery__methods_[] = {
            DECLARE_METHOD(t_ToParentBlockJoinQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ToParentBlockJoinQuery, t_ToParentBlockJoinQuery, ::org::apache::lucene::search::Query, ToParentBlockJoinQuery, t_ToParentBlockJoinQuery_init_, 0, 0, 0, 0, 0);

          void t_ToParentBlockJoinQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(ToParentBlockJoinQuery), module, "ToParentBlockJoinQuery", 0);
          }

          void t_ToParentBlockJoinQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinQuery).tp_dict, "class_", make_descriptor(ToParentBlockJoinQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinQuery).tp_dict, "wrapfn_", make_descriptor(t_ToParentBlockJoinQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ToParentBlockJoinQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ToParentBlockJoinQuery::initializeClass, 1)))
              return NULL;
            return t_ToParentBlockJoinQuery::wrap_Object(ToParentBlockJoinQuery(((t_ToParentBlockJoinQuery *) arg)->object.this$));
          }
          static PyObject *t_ToParentBlockJoinQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ToParentBlockJoinQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ToParentBlockJoinQuery_init_(t_ToParentBlockJoinQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::org::apache::lucene::search::Filter a1((jobject) NULL);
            ::org::apache::lucene::search::join::ScoreMode a2((jobject) NULL);
            PyTypeObject **p2;
            ToParentBlockJoinQuery object((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::join::ScoreMode::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::search::join::t_ScoreMode::parameters_))
            {
              INT_CALL(object = ToParentBlockJoinQuery(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ToParentBlockJoinQuery_createWeight(t_ToParentBlockJoinQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.createWeight(a0));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_ToParentBlockJoinQuery_equals(t_ToParentBlockJoinQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_ToParentBlockJoinQuery_extractTerms(t_ToParentBlockJoinQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_ToParentBlockJoinQuery_hashCode(t_ToParentBlockJoinQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_ToParentBlockJoinQuery_rewrite(t_ToParentBlockJoinQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_ToParentBlockJoinQuery_toString(t_ToParentBlockJoinQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinQuery), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Enumeration.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *Enumeration::class$ = NULL;
    jmethodID *Enumeration::mids$ = NULL;
    bool Enumeration::live$ = false;

    jclass Enumeration::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/Enumeration");

        mids$ = new jmethodID[max_mid];
        mids$[mid_hasMoreElements_54c6a16a] = env->getMethodID(cls, "hasMoreElements", "()Z");
        mids$[mid_nextElement_846352c3] = env->getMethodID(cls, "nextElement", "()Ljava/lang/Object;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jboolean Enumeration::hasMoreElements() const
    {
      return env->callBooleanMethod(this$, mids$[mid_hasMoreElements_54c6a16a]);
    }

    ::java::lang::Object Enumeration::nextElement() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_nextElement_846352c3]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_Enumeration_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Enumeration_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Enumeration_of_(t_Enumeration *self, PyObject *args);
    static PyObject *t_Enumeration_hasMoreElements(t_Enumeration *self);
    static PyObject *t_Enumeration_nextElement(t_Enumeration *self);
    static PyObject *t_Enumeration_get__parameters_(t_Enumeration *self, void *data);
    static PyGetSetDef t_Enumeration__fields_[] = {
      DECLARE_GET_FIELD(t_Enumeration, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Enumeration__methods_[] = {
      DECLARE_METHOD(t_Enumeration, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Enumeration, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Enumeration, of_, METH_VARARGS),
      DECLARE_METHOD(t_Enumeration, hasMoreElements, METH_NOARGS),
      DECLARE_METHOD(t_Enumeration, nextElement, METH_NOARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Enumeration, t_Enumeration, ::java::lang::Object, Enumeration, abstract_init, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Enumeration *)) get_generic_enumeration_next< ::java::util::t_Enumeration,::java::lang::t_Object >), t_Enumeration__fields_, 0, 0);
    PyObject *t_Enumeration::wrap_Object(const Enumeration& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Enumeration::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Enumeration *self = (t_Enumeration *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_Enumeration::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Enumeration::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Enumeration *self = (t_Enumeration *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_Enumeration::install(PyObject *module)
    {
      installType(&PY_TYPE(Enumeration), module, "Enumeration", 0);
    }

    void t_Enumeration::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Enumeration).tp_dict, "class_", make_descriptor(Enumeration::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Enumeration).tp_dict, "wrapfn_", make_descriptor(t_Enumeration::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Enumeration).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Enumeration_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Enumeration::initializeClass, 1)))
        return NULL;
      return t_Enumeration::wrap_Object(Enumeration(((t_Enumeration *) arg)->object.this$));
    }
    static PyObject *t_Enumeration_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Enumeration::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Enumeration_of_(t_Enumeration *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_Enumeration_hasMoreElements(t_Enumeration *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.hasMoreElements());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Enumeration_nextElement(t_Enumeration *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.nextElement());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }
    static PyObject *t_Enumeration_get__parameters_(t_Enumeration *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/DocumentDictionary.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *DocumentDictionary::class$ = NULL;
          jmethodID *DocumentDictionary::mids$ = NULL;
          bool DocumentDictionary::live$ = false;

          jclass DocumentDictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/DocumentDictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d188be8d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_init$_d5472fa7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_init$_087c6971] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_getEntryIterator_23dc46b1] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DocumentDictionary::DocumentDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d188be8d, a0.this$, a1.this$, a2.this$)) {}

          DocumentDictionary::DocumentDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::java::lang::String & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d5472fa7, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          DocumentDictionary::DocumentDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::java::lang::String & a3, const ::java::lang::String & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_087c6971, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}

          ::org::apache::lucene::search::suggest::InputIterator DocumentDictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_23dc46b1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_DocumentDictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DocumentDictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DocumentDictionary_init_(t_DocumentDictionary *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DocumentDictionary_getEntryIterator(t_DocumentDictionary *self);
          static PyObject *t_DocumentDictionary_get__entryIterator(t_DocumentDictionary *self, void *data);
          static PyGetSetDef t_DocumentDictionary__fields_[] = {
            DECLARE_GET_FIELD(t_DocumentDictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DocumentDictionary__methods_[] = {
            DECLARE_METHOD(t_DocumentDictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocumentDictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocumentDictionary, getEntryIterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DocumentDictionary, t_DocumentDictionary, ::java::lang::Object, DocumentDictionary, t_DocumentDictionary_init_, 0, 0, t_DocumentDictionary__fields_, 0, 0);

          void t_DocumentDictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(DocumentDictionary), module, "DocumentDictionary", 0);
          }

          void t_DocumentDictionary::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DocumentDictionary).tp_dict, "class_", make_descriptor(DocumentDictionary::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DocumentDictionary).tp_dict, "wrapfn_", make_descriptor(t_DocumentDictionary::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DocumentDictionary).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DocumentDictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DocumentDictionary::initializeClass, 1)))
              return NULL;
            return t_DocumentDictionary::wrap_Object(DocumentDictionary(((t_DocumentDictionary *) arg)->object.this$));
          }
          static PyObject *t_DocumentDictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DocumentDictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DocumentDictionary_init_(t_DocumentDictionary *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                DocumentDictionary object((jobject) NULL);

                if (!parseArgs(args, "kss", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = DocumentDictionary(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                DocumentDictionary object((jobject) NULL);

                if (!parseArgs(args, "ksss", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = DocumentDictionary(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                ::java::lang::String a4((jobject) NULL);
                DocumentDictionary object((jobject) NULL);

                if (!parseArgs(args, "kssss", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = DocumentDictionary(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DocumentDictionary_getEntryIterator(t_DocumentDictionary *self)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
          }

          static PyObject *t_DocumentDictionary_get__entryIterator(t_DocumentDictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/postingshighlight/Passage.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {

          ::java::lang::Class *Passage::class$ = NULL;
          jmethodID *Passage::mids$ = NULL;
          bool Passage::live$ = false;

          jclass Passage::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/postingshighlight/Passage");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getEndOffset_54c6a179] = env->getMethodID(cls, "getEndOffset", "()I");
              mids$[mid_getMatchEnds_dab10e75] = env->getMethodID(cls, "getMatchEnds", "()[I");
              mids$[mid_getMatchStarts_dab10e75] = env->getMethodID(cls, "getMatchStarts", "()[I");
              mids$[mid_getMatchTerms_19d1f84d] = env->getMethodID(cls, "getMatchTerms", "()[Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getNumMatches_54c6a179] = env->getMethodID(cls, "getNumMatches", "()I");
              mids$[mid_getScore_54c6a176] = env->getMethodID(cls, "getScore", "()F");
              mids$[mid_getStartOffset_54c6a179] = env->getMethodID(cls, "getStartOffset", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Passage::Passage() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint Passage::getEndOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndOffset_54c6a179]);
          }

          JArray< jint > Passage::getMatchEnds() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getMatchEnds_dab10e75]));
          }

          JArray< jint > Passage::getMatchStarts() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getMatchStarts_dab10e75]));
          }

          JArray< ::org::apache::lucene::util::BytesRef > Passage::getMatchTerms() const
          {
            return JArray< ::org::apache::lucene::util::BytesRef >(env->callObjectMethod(this$, mids$[mid_getMatchTerms_19d1f84d]));
          }

          jint Passage::getNumMatches() const
          {
            return env->callIntMethod(this$, mids$[mid_getNumMatches_54c6a179]);
          }

          jfloat Passage::getScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getScore_54c6a176]);
          }

          jint Passage::getStartOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getStartOffset_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {
          static PyObject *t_Passage_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Passage_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Passage_init_(t_Passage *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Passage_getEndOffset(t_Passage *self);
          static PyObject *t_Passage_getMatchEnds(t_Passage *self);
          static PyObject *t_Passage_getMatchStarts(t_Passage *self);
          static PyObject *t_Passage_getMatchTerms(t_Passage *self);
          static PyObject *t_Passage_getNumMatches(t_Passage *self);
          static PyObject *t_Passage_getScore(t_Passage *self);
          static PyObject *t_Passage_getStartOffset(t_Passage *self);
          static PyObject *t_Passage_get__endOffset(t_Passage *self, void *data);
          static PyObject *t_Passage_get__matchEnds(t_Passage *self, void *data);
          static PyObject *t_Passage_get__matchStarts(t_Passage *self, void *data);
          static PyObject *t_Passage_get__matchTerms(t_Passage *self, void *data);
          static PyObject *t_Passage_get__numMatches(t_Passage *self, void *data);
          static PyObject *t_Passage_get__score(t_Passage *self, void *data);
          static PyObject *t_Passage_get__startOffset(t_Passage *self, void *data);
          static PyGetSetDef t_Passage__fields_[] = {
            DECLARE_GET_FIELD(t_Passage, endOffset),
            DECLARE_GET_FIELD(t_Passage, matchEnds),
            DECLARE_GET_FIELD(t_Passage, matchStarts),
            DECLARE_GET_FIELD(t_Passage, matchTerms),
            DECLARE_GET_FIELD(t_Passage, numMatches),
            DECLARE_GET_FIELD(t_Passage, score),
            DECLARE_GET_FIELD(t_Passage, startOffset),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Passage__methods_[] = {
            DECLARE_METHOD(t_Passage, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Passage, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Passage, getEndOffset, METH_NOARGS),
            DECLARE_METHOD(t_Passage, getMatchEnds, METH_NOARGS),
            DECLARE_METHOD(t_Passage, getMatchStarts, METH_NOARGS),
            DECLARE_METHOD(t_Passage, getMatchTerms, METH_NOARGS),
            DECLARE_METHOD(t_Passage, getNumMatches, METH_NOARGS),
            DECLARE_METHOD(t_Passage, getScore, METH_NOARGS),
            DECLARE_METHOD(t_Passage, getStartOffset, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Passage, t_Passage, ::java::lang::Object, Passage, t_Passage_init_, 0, 0, t_Passage__fields_, 0, 0);

          void t_Passage::install(PyObject *module)
          {
            installType(&PY_TYPE(Passage), module, "Passage", 0);
          }

          void t_Passage::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Passage).tp_dict, "class_", make_descriptor(Passage::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Passage).tp_dict, "wrapfn_", make_descriptor(t_Passage::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Passage).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Passage_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Passage::initializeClass, 1)))
              return NULL;
            return t_Passage::wrap_Object(Passage(((t_Passage *) arg)->object.this$));
          }
          static PyObject *t_Passage_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Passage::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Passage_init_(t_Passage *self, PyObject *args, PyObject *kwds)
          {
            Passage object((jobject) NULL);

            INT_CALL(object = Passage());
            self->object = object;

            return 0;
          }

          static PyObject *t_Passage_getEndOffset(t_Passage *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Passage_getMatchEnds(t_Passage *self)
          {
            JArray< jint > result((jobject) NULL);
            OBJ_CALL(result = self->object.getMatchEnds());
            return result.wrap();
          }

          static PyObject *t_Passage_getMatchStarts(t_Passage *self)
          {
            JArray< jint > result((jobject) NULL);
            OBJ_CALL(result = self->object.getMatchStarts());
            return result.wrap();
          }

          static PyObject *t_Passage_getMatchTerms(t_Passage *self)
          {
            JArray< ::org::apache::lucene::util::BytesRef > result((jobject) NULL);
            OBJ_CALL(result = self->object.getMatchTerms());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::util::t_BytesRef::wrap_jobject);
          }

          static PyObject *t_Passage_getNumMatches(t_Passage *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNumMatches());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Passage_getScore(t_Passage *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_Passage_getStartOffset(t_Passage *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStartOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Passage_get__endOffset(t_Passage *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_Passage_get__matchEnds(t_Passage *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object.getMatchEnds());
            return value.wrap();
          }

          static PyObject *t_Passage_get__matchStarts(t_Passage *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object.getMatchStarts());
            return value.wrap();
          }

          static PyObject *t_Passage_get__matchTerms(t_Passage *self, void *data)
          {
            JArray< ::org::apache::lucene::util::BytesRef > value((jobject) NULL);
            OBJ_CALL(value = self->object.getMatchTerms());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::util::t_BytesRef::wrap_jobject);
          }

          static PyObject *t_Passage_get__numMatches(t_Passage *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNumMatches());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_Passage_get__score(t_Passage *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getScore());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_Passage_get__startOffset(t_Passage *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStartOffset());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TopTermsRewrite.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TopTermsRewrite::class$ = NULL;
        jmethodID *TopTermsRewrite::mids$ = NULL;
        bool TopTermsRewrite::live$ = false;

        jclass TopTermsRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TopTermsRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_925c5bbc] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/Query;");
            mids$[mid_getMaxSize_54c6a179] = env->getMethodID(cls, "getMaxSize", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopTermsRewrite::TopTermsRewrite(jint a0) : ::org::apache::lucene::search::TermCollectingRewrite(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        jboolean TopTermsRewrite::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint TopTermsRewrite::getSize() const
        {
          return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
        }

        jint TopTermsRewrite::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query TopTermsRewrite::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_925c5bbc], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TopTermsRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopTermsRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopTermsRewrite_of_(t_TopTermsRewrite *self, PyObject *args);
        static int t_TopTermsRewrite_init_(t_TopTermsRewrite *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopTermsRewrite_equals(t_TopTermsRewrite *self, PyObject *args);
        static PyObject *t_TopTermsRewrite_getSize(t_TopTermsRewrite *self);
        static PyObject *t_TopTermsRewrite_hashCode(t_TopTermsRewrite *self, PyObject *args);
        static PyObject *t_TopTermsRewrite_rewrite(t_TopTermsRewrite *self, PyObject *args);
        static PyObject *t_TopTermsRewrite_get__size(t_TopTermsRewrite *self, void *data);
        static PyObject *t_TopTermsRewrite_get__parameters_(t_TopTermsRewrite *self, void *data);
        static PyGetSetDef t_TopTermsRewrite__fields_[] = {
          DECLARE_GET_FIELD(t_TopTermsRewrite, size),
          DECLARE_GET_FIELD(t_TopTermsRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopTermsRewrite__methods_[] = {
          DECLARE_METHOD(t_TopTermsRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopTermsRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopTermsRewrite, of_, METH_VARARGS),
          DECLARE_METHOD(t_TopTermsRewrite, equals, METH_VARARGS),
          DECLARE_METHOD(t_TopTermsRewrite, getSize, METH_NOARGS),
          DECLARE_METHOD(t_TopTermsRewrite, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_TopTermsRewrite, rewrite, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopTermsRewrite, t_TopTermsRewrite, ::org::apache::lucene::search::TermCollectingRewrite, TopTermsRewrite, t_TopTermsRewrite_init_, 0, 0, t_TopTermsRewrite__fields_, 0, 0);
        PyObject *t_TopTermsRewrite::wrap_Object(const TopTermsRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopTermsRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopTermsRewrite *self = (t_TopTermsRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopTermsRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopTermsRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopTermsRewrite *self = (t_TopTermsRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopTermsRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(TopTermsRewrite), module, "TopTermsRewrite", 0);
        }

        void t_TopTermsRewrite::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopTermsRewrite).tp_dict, "class_", make_descriptor(TopTermsRewrite::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopTermsRewrite).tp_dict, "wrapfn_", make_descriptor(t_TopTermsRewrite::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopTermsRewrite).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopTermsRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopTermsRewrite::initializeClass, 1)))
            return NULL;
          return t_TopTermsRewrite::wrap_Object(TopTermsRewrite(((t_TopTermsRewrite *) arg)->object.this$));
        }
        static PyObject *t_TopTermsRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopTermsRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopTermsRewrite_of_(t_TopTermsRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_TopTermsRewrite_init_(t_TopTermsRewrite *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          TopTermsRewrite object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = TopTermsRewrite(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TopTermsRewrite_equals(t_TopTermsRewrite *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TopTermsRewrite), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_TopTermsRewrite_getSize(t_TopTermsRewrite *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getSize());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_TopTermsRewrite_hashCode(t_TopTermsRewrite *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(TopTermsRewrite), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_TopTermsRewrite_rewrite(t_TopTermsRewrite *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.rewrite(a0, a1));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(TopTermsRewrite), (PyObject *) self, "rewrite", args, 2);
        }
        static PyObject *t_TopTermsRewrite_get__parameters_(t_TopTermsRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_TopTermsRewrite_get__size(t_TopTermsRewrite *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getSize());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/OpenRangeQueryNodeProcessor.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *OpenRangeQueryNodeProcessor::class$ = NULL;
              jmethodID *OpenRangeQueryNodeProcessor::mids$ = NULL;
              bool OpenRangeQueryNodeProcessor::live$ = false;
              ::java::lang::String *OpenRangeQueryNodeProcessor::OPEN_RANGE_TOKEN = NULL;

              jclass OpenRangeQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/OpenRangeQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  OPEN_RANGE_TOKEN = new ::java::lang::String(env->getStaticObjectField(cls, "OPEN_RANGE_TOKEN", "Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              OpenRangeQueryNodeProcessor::OpenRangeQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_OpenRangeQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_OpenRangeQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_OpenRangeQueryNodeProcessor_init_(t_OpenRangeQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_OpenRangeQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_OpenRangeQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_OpenRangeQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(OpenRangeQueryNodeProcessor, t_OpenRangeQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, OpenRangeQueryNodeProcessor, t_OpenRangeQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_OpenRangeQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(OpenRangeQueryNodeProcessor), module, "OpenRangeQueryNodeProcessor", 0);
              }

              void t_OpenRangeQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(OpenRangeQueryNodeProcessor).tp_dict, "class_", make_descriptor(OpenRangeQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(OpenRangeQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_OpenRangeQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(OpenRangeQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(OpenRangeQueryNodeProcessor::initializeClass);
                PyDict_SetItemString(PY_TYPE(OpenRangeQueryNodeProcessor).tp_dict, "OPEN_RANGE_TOKEN", make_descriptor(j2p(*OpenRangeQueryNodeProcessor::OPEN_RANGE_TOKEN)));
              }

              static PyObject *t_OpenRangeQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, OpenRangeQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_OpenRangeQueryNodeProcessor::wrap_Object(OpenRangeQueryNodeProcessor(((t_OpenRangeQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_OpenRangeQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, OpenRangeQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_OpenRangeQueryNodeProcessor_init_(t_OpenRangeQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                OpenRangeQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = OpenRangeQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/es/SpanishLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {

          ::java::lang::Class *SpanishLightStemFilter::class$ = NULL;
          jmethodID *SpanishLightStemFilter::mids$ = NULL;
          bool SpanishLightStemFilter::live$ = false;

          jclass SpanishLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/es/SpanishLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanishLightStemFilter::SpanishLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean SpanishLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {
          static PyObject *t_SpanishLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanishLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanishLightStemFilter_init_(t_SpanishLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanishLightStemFilter_incrementToken(t_SpanishLightStemFilter *self, PyObject *args);

          static PyMethodDef t_SpanishLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_SpanishLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanishLightStemFilter, t_SpanishLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, SpanishLightStemFilter, t_SpanishLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_SpanishLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanishLightStemFilter), module, "SpanishLightStemFilter", 0);
          }

          void t_SpanishLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanishLightStemFilter).tp_dict, "class_", make_descriptor(SpanishLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanishLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_SpanishLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanishLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanishLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanishLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_SpanishLightStemFilter::wrap_Object(SpanishLightStemFilter(((t_SpanishLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_SpanishLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanishLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanishLightStemFilter_init_(t_SpanishLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            SpanishLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = SpanishLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanishLightStemFilter_incrementToken(t_SpanishLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanishLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *EdgeNGramTokenFilter::class$ = NULL;
          jmethodID *EdgeNGramTokenFilter::mids$ = NULL;
          bool EdgeNGramTokenFilter::live$ = false;
          jint EdgeNGramTokenFilter::DEFAULT_MAX_GRAM_SIZE = (jint) 0;
          jint EdgeNGramTokenFilter::DEFAULT_MIN_GRAM_SIZE = (jint) 0;
          ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side *EdgeNGramTokenFilter::DEFAULT_SIDE = NULL;

          jclass EdgeNGramTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7f9e10a8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_init$_46a9ddd5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_init$_53f5f0b1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side;II)V");
              mids$[mid_init$_e3a5b9e6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;II)V");
              mids$[mid_init$_fa7af393] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;II)V");
              mids$[mid_init$_ef953ccc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side;II)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_GRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_GRAM_SIZE");
              DEFAULT_MIN_GRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_GRAM_SIZE");
              DEFAULT_SIDE = new ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side(env->getStaticObjectField(cls, "DEFAULT_SIDE", "Lorg/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EdgeNGramTokenFilter::EdgeNGramTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_7f9e10a8, a0.this$, a1, a2)) {}

          EdgeNGramTokenFilter::EdgeNGramTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_46a9ddd5, a0.this$, a1.this$, a2, a3)) {}

          EdgeNGramTokenFilter::EdgeNGramTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_53f5f0b1, a0.this$, a1.this$, a2, a3)) {}

          EdgeNGramTokenFilter::EdgeNGramTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::String & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_e3a5b9e6, a0.this$, a1.this$, a2, a3)) {}

          EdgeNGramTokenFilter::EdgeNGramTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::java::lang::String & a2, jint a3, jint a4) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_fa7af393, a0.this$, a1.this$, a2.this$, a3, a4)) {}

          EdgeNGramTokenFilter::EdgeNGramTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side & a2, jint a3, jint a4) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_ef953ccc, a0.this$, a1.this$, a2.this$, a3, a4)) {}

          jboolean EdgeNGramTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void EdgeNGramTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_EdgeNGramTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EdgeNGramTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EdgeNGramTokenFilter_init_(t_EdgeNGramTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EdgeNGramTokenFilter_incrementToken(t_EdgeNGramTokenFilter *self, PyObject *args);
          static PyObject *t_EdgeNGramTokenFilter_reset(t_EdgeNGramTokenFilter *self, PyObject *args);

          static PyMethodDef t_EdgeNGramTokenFilter__methods_[] = {
            DECLARE_METHOD(t_EdgeNGramTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EdgeNGramTokenFilter, t_EdgeNGramTokenFilter, ::org::apache::lucene::analysis::TokenFilter, EdgeNGramTokenFilter, t_EdgeNGramTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_EdgeNGramTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(EdgeNGramTokenFilter), module, "EdgeNGramTokenFilter", 0);
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter).tp_dict, "Side", make_descriptor(&PY_TYPE(EdgeNGramTokenFilter$Side)));
          }

          void t_EdgeNGramTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter).tp_dict, "class_", make_descriptor(EdgeNGramTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_EdgeNGramTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(EdgeNGramTokenFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter).tp_dict, "DEFAULT_MAX_GRAM_SIZE", make_descriptor(EdgeNGramTokenFilter::DEFAULT_MAX_GRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter).tp_dict, "DEFAULT_MIN_GRAM_SIZE", make_descriptor(EdgeNGramTokenFilter::DEFAULT_MIN_GRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter).tp_dict, "DEFAULT_SIDE", make_descriptor(::org::apache::lucene::analysis::ngram::t_EdgeNGramTokenFilter$Side::wrap_Object(*EdgeNGramTokenFilter::DEFAULT_SIDE)));
          }

          static PyObject *t_EdgeNGramTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EdgeNGramTokenFilter::initializeClass, 1)))
              return NULL;
            return t_EdgeNGramTokenFilter::wrap_Object(EdgeNGramTokenFilter(((t_EdgeNGramTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_EdgeNGramTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EdgeNGramTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EdgeNGramTokenFilter_init_(t_EdgeNGramTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                jint a2;
                EdgeNGramTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kII", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = EdgeNGramTokenFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jint a2;
                jint a3;
                EdgeNGramTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kkII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = EdgeNGramTokenFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side a1((jobject) NULL);
                PyTypeObject **p1;
                jint a2;
                jint a3;
                EdgeNGramTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kKII", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::ngram::t_EdgeNGramTokenFilter$Side::parameters_, &a2, &a3))
                {
                  INT_CALL(object = EdgeNGramTokenFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jint a2;
                jint a3;
                EdgeNGramTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "ksII", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = EdgeNGramTokenFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                jint a3;
                jint a4;
                EdgeNGramTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kksII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = EdgeNGramTokenFilter(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side a2((jobject) NULL);
                PyTypeObject **p2;
                jint a3;
                jint a4;
                EdgeNGramTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kkKII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::ngram::t_EdgeNGramTokenFilter$Side::parameters_, &a3, &a4))
                {
                  INT_CALL(object = EdgeNGramTokenFilter(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EdgeNGramTokenFilter_incrementToken(t_EdgeNGramTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(EdgeNGramTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_EdgeNGramTokenFilter_reset(t_EdgeNGramTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(EdgeNGramTokenFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ToChildBlockJoinQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ToChildBlockJoinQuery::class$ = NULL;
          jmethodID *ToChildBlockJoinQuery::mids$ = NULL;
          bool ToChildBlockJoinQuery::live$ = false;

          jclass ToChildBlockJoinQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ToChildBlockJoinQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4a597592] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;Z)V");
              mids$[mid_clone_c3569be0] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/join/ToChildBlockJoinQuery;");
              mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ToChildBlockJoinQuery::ToChildBlockJoinQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Filter & a1, jboolean a2) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_4a597592, a0.this$, a1.this$, a2)) {}

          ToChildBlockJoinQuery ToChildBlockJoinQuery::clone() const
          {
            return ToChildBlockJoinQuery(env->callObjectMethod(this$, mids$[mid_clone_c3569be0]));
          }

          ::org::apache::lucene::search::Weight ToChildBlockJoinQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
          }

          jboolean ToChildBlockJoinQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void ToChildBlockJoinQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          jint ToChildBlockJoinQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query ToChildBlockJoinQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          ::java::lang::String ToChildBlockJoinQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ToChildBlockJoinQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToChildBlockJoinQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ToChildBlockJoinQuery_init_(t_ToChildBlockJoinQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ToChildBlockJoinQuery_clone(t_ToChildBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToChildBlockJoinQuery_createWeight(t_ToChildBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToChildBlockJoinQuery_equals(t_ToChildBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToChildBlockJoinQuery_extractTerms(t_ToChildBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToChildBlockJoinQuery_hashCode(t_ToChildBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToChildBlockJoinQuery_rewrite(t_ToChildBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToChildBlockJoinQuery_toString(t_ToChildBlockJoinQuery *self, PyObject *args);

          static PyMethodDef t_ToChildBlockJoinQuery__methods_[] = {
            DECLARE_METHOD(t_ToChildBlockJoinQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ToChildBlockJoinQuery, t_ToChildBlockJoinQuery, ::org::apache::lucene::search::Query, ToChildBlockJoinQuery, t_ToChildBlockJoinQuery_init_, 0, 0, 0, 0, 0);

          void t_ToChildBlockJoinQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(ToChildBlockJoinQuery), module, "ToChildBlockJoinQuery", 0);
          }

          void t_ToChildBlockJoinQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ToChildBlockJoinQuery).tp_dict, "class_", make_descriptor(ToChildBlockJoinQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ToChildBlockJoinQuery).tp_dict, "wrapfn_", make_descriptor(t_ToChildBlockJoinQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ToChildBlockJoinQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ToChildBlockJoinQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ToChildBlockJoinQuery::initializeClass, 1)))
              return NULL;
            return t_ToChildBlockJoinQuery::wrap_Object(ToChildBlockJoinQuery(((t_ToChildBlockJoinQuery *) arg)->object.this$));
          }
          static PyObject *t_ToChildBlockJoinQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ToChildBlockJoinQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ToChildBlockJoinQuery_init_(t_ToChildBlockJoinQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::org::apache::lucene::search::Filter a1((jobject) NULL);
            jboolean a2;
            ToChildBlockJoinQuery object((jobject) NULL);

            if (!parseArgs(args, "kkZ", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = ToChildBlockJoinQuery(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ToChildBlockJoinQuery_clone(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            ToChildBlockJoinQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_ToChildBlockJoinQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_ToChildBlockJoinQuery_createWeight(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.createWeight(a0));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_ToChildBlockJoinQuery_equals(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_ToChildBlockJoinQuery_extractTerms(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_ToChildBlockJoinQuery_hashCode(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_ToChildBlockJoinQuery_rewrite(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_ToChildBlockJoinQuery_toString(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/RandomSamplingFacetsCollector.h"
#include "org/apache/lucene/facet/FacetsCollector$MatchingDocs.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *RandomSamplingFacetsCollector::class$ = NULL;
        jmethodID *RandomSamplingFacetsCollector::mids$ = NULL;
        bool RandomSamplingFacetsCollector::live$ = false;

        jclass RandomSamplingFacetsCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/RandomSamplingFacetsCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_03b232b5] = env->getMethodID(cls, "<init>", "(IJ)V");
            mids$[mid_amortizeFacetCounts_25b169d3] = env->getMethodID(cls, "amortizeFacetCounts", "(Lorg/apache/lucene/facet/FacetResult;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/facet/FacetResult;");
            mids$[mid_getMatchingDocs_87851566] = env->getMethodID(cls, "getMatchingDocs", "()Ljava/util/List;");
            mids$[mid_getOriginalMatchingDocs_87851566] = env->getMethodID(cls, "getOriginalMatchingDocs", "()Ljava/util/List;");
            mids$[mid_getSamplingRate_54c6a174] = env->getMethodID(cls, "getSamplingRate", "()D");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RandomSamplingFacetsCollector::RandomSamplingFacetsCollector(jint a0) : ::org::apache::lucene::facet::FacetsCollector(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        RandomSamplingFacetsCollector::RandomSamplingFacetsCollector(jint a0, jlong a1) : ::org::apache::lucene::facet::FacetsCollector(env->newObject(initializeClass, &mids$, mid_init$_03b232b5, a0, a1)) {}

        ::org::apache::lucene::facet::FacetResult RandomSamplingFacetsCollector::amortizeFacetCounts(const ::org::apache::lucene::facet::FacetResult & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::search::IndexSearcher & a2) const
        {
          return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_amortizeFacetCounts_25b169d3], a0.this$, a1.this$, a2.this$));
        }

        ::java::util::List RandomSamplingFacetsCollector::getMatchingDocs() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getMatchingDocs_87851566]));
        }

        ::java::util::List RandomSamplingFacetsCollector::getOriginalMatchingDocs() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getOriginalMatchingDocs_87851566]));
        }

        jdouble RandomSamplingFacetsCollector::getSamplingRate() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getSamplingRate_54c6a174]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_RandomSamplingFacetsCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RandomSamplingFacetsCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RandomSamplingFacetsCollector_init_(t_RandomSamplingFacetsCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RandomSamplingFacetsCollector_amortizeFacetCounts(t_RandomSamplingFacetsCollector *self, PyObject *args);
        static PyObject *t_RandomSamplingFacetsCollector_getMatchingDocs(t_RandomSamplingFacetsCollector *self, PyObject *args);
        static PyObject *t_RandomSamplingFacetsCollector_getOriginalMatchingDocs(t_RandomSamplingFacetsCollector *self);
        static PyObject *t_RandomSamplingFacetsCollector_getSamplingRate(t_RandomSamplingFacetsCollector *self);
        static PyObject *t_RandomSamplingFacetsCollector_get__matchingDocs(t_RandomSamplingFacetsCollector *self, void *data);
        static PyObject *t_RandomSamplingFacetsCollector_get__originalMatchingDocs(t_RandomSamplingFacetsCollector *self, void *data);
        static PyObject *t_RandomSamplingFacetsCollector_get__samplingRate(t_RandomSamplingFacetsCollector *self, void *data);
        static PyGetSetDef t_RandomSamplingFacetsCollector__fields_[] = {
          DECLARE_GET_FIELD(t_RandomSamplingFacetsCollector, matchingDocs),
          DECLARE_GET_FIELD(t_RandomSamplingFacetsCollector, originalMatchingDocs),
          DECLARE_GET_FIELD(t_RandomSamplingFacetsCollector, samplingRate),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RandomSamplingFacetsCollector__methods_[] = {
          DECLARE_METHOD(t_RandomSamplingFacetsCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RandomSamplingFacetsCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RandomSamplingFacetsCollector, amortizeFacetCounts, METH_VARARGS),
          DECLARE_METHOD(t_RandomSamplingFacetsCollector, getMatchingDocs, METH_VARARGS),
          DECLARE_METHOD(t_RandomSamplingFacetsCollector, getOriginalMatchingDocs, METH_NOARGS),
          DECLARE_METHOD(t_RandomSamplingFacetsCollector, getSamplingRate, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RandomSamplingFacetsCollector, t_RandomSamplingFacetsCollector, ::org::apache::lucene::facet::FacetsCollector, RandomSamplingFacetsCollector, t_RandomSamplingFacetsCollector_init_, 0, 0, t_RandomSamplingFacetsCollector__fields_, 0, 0);

        void t_RandomSamplingFacetsCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(RandomSamplingFacetsCollector), module, "RandomSamplingFacetsCollector", 0);
        }

        void t_RandomSamplingFacetsCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RandomSamplingFacetsCollector).tp_dict, "class_", make_descriptor(RandomSamplingFacetsCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RandomSamplingFacetsCollector).tp_dict, "wrapfn_", make_descriptor(t_RandomSamplingFacetsCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RandomSamplingFacetsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RandomSamplingFacetsCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RandomSamplingFacetsCollector::initializeClass, 1)))
            return NULL;
          return t_RandomSamplingFacetsCollector::wrap_Object(RandomSamplingFacetsCollector(((t_RandomSamplingFacetsCollector *) arg)->object.this$));
        }
        static PyObject *t_RandomSamplingFacetsCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RandomSamplingFacetsCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RandomSamplingFacetsCollector_init_(t_RandomSamplingFacetsCollector *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              RandomSamplingFacetsCollector object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = RandomSamplingFacetsCollector(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jint a0;
              jlong a1;
              RandomSamplingFacetsCollector object((jobject) NULL);

              if (!parseArgs(args, "IJ", &a0, &a1))
              {
                INT_CALL(object = RandomSamplingFacetsCollector(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RandomSamplingFacetsCollector_amortizeFacetCounts(t_RandomSamplingFacetsCollector *self, PyObject *args)
        {
          ::org::apache::lucene::facet::FacetResult a0((jobject) NULL);
          ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
          ::org::apache::lucene::search::IndexSearcher a2((jobject) NULL);
          ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::facet::FacetResult::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.amortizeFacetCounts(a0, a1, a2));
            return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "amortizeFacetCounts", args);
          return NULL;
        }

        static PyObject *t_RandomSamplingFacetsCollector_getMatchingDocs(t_RandomSamplingFacetsCollector *self, PyObject *args)
        {
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMatchingDocs());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::facet::PY_TYPE(FacetsCollector$MatchingDocs));
          }

          return callSuper(&PY_TYPE(RandomSamplingFacetsCollector), (PyObject *) self, "getMatchingDocs", args, 2);
        }

        static PyObject *t_RandomSamplingFacetsCollector_getOriginalMatchingDocs(t_RandomSamplingFacetsCollector *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.getOriginalMatchingDocs());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::facet::PY_TYPE(FacetsCollector$MatchingDocs));
        }

        static PyObject *t_RandomSamplingFacetsCollector_getSamplingRate(t_RandomSamplingFacetsCollector *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getSamplingRate());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_RandomSamplingFacetsCollector_get__matchingDocs(t_RandomSamplingFacetsCollector *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getMatchingDocs());
          return ::java::util::t_List::wrap_Object(value);
        }

        static PyObject *t_RandomSamplingFacetsCollector_get__originalMatchingDocs(t_RandomSamplingFacetsCollector *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getOriginalMatchingDocs());
          return ::java::util::t_List::wrap_Object(value);
        }

        static PyObject *t_RandomSamplingFacetsCollector_get__samplingRate(t_RandomSamplingFacetsCollector *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getSamplingRate());
          return PyFloat_FromDouble((double) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *Lucene43EdgeNGramTokenFilter::class$ = NULL;
          jmethodID *Lucene43EdgeNGramTokenFilter::mids$ = NULL;
          bool Lucene43EdgeNGramTokenFilter::live$ = false;
          jint Lucene43EdgeNGramTokenFilter::DEFAULT_MAX_GRAM_SIZE = (jint) 0;
          jint Lucene43EdgeNGramTokenFilter::DEFAULT_MIN_GRAM_SIZE = (jint) 0;

          jclass Lucene43EdgeNGramTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7f9e10a8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_GRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_GRAM_SIZE");
              DEFAULT_MIN_GRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_GRAM_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene43EdgeNGramTokenFilter::Lucene43EdgeNGramTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_7f9e10a8, a0.this$, a1, a2)) {}

          jboolean Lucene43EdgeNGramTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void Lucene43EdgeNGramTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_Lucene43EdgeNGramTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene43EdgeNGramTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene43EdgeNGramTokenFilter_init_(t_Lucene43EdgeNGramTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene43EdgeNGramTokenFilter_incrementToken(t_Lucene43EdgeNGramTokenFilter *self, PyObject *args);
          static PyObject *t_Lucene43EdgeNGramTokenFilter_reset(t_Lucene43EdgeNGramTokenFilter *self, PyObject *args);

          static PyMethodDef t_Lucene43EdgeNGramTokenFilter__methods_[] = {
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene43EdgeNGramTokenFilter, t_Lucene43EdgeNGramTokenFilter, ::org::apache::lucene::analysis::TokenFilter, Lucene43EdgeNGramTokenFilter, t_Lucene43EdgeNGramTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_Lucene43EdgeNGramTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene43EdgeNGramTokenFilter), module, "Lucene43EdgeNGramTokenFilter", 0);
          }

          void t_Lucene43EdgeNGramTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenFilter).tp_dict, "class_", make_descriptor(Lucene43EdgeNGramTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_Lucene43EdgeNGramTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene43EdgeNGramTokenFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenFilter).tp_dict, "DEFAULT_MAX_GRAM_SIZE", make_descriptor(Lucene43EdgeNGramTokenFilter::DEFAULT_MAX_GRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenFilter).tp_dict, "DEFAULT_MIN_GRAM_SIZE", make_descriptor(Lucene43EdgeNGramTokenFilter::DEFAULT_MIN_GRAM_SIZE));
          }

          static PyObject *t_Lucene43EdgeNGramTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene43EdgeNGramTokenFilter::initializeClass, 1)))
              return NULL;
            return t_Lucene43EdgeNGramTokenFilter::wrap_Object(Lucene43EdgeNGramTokenFilter(((t_Lucene43EdgeNGramTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_Lucene43EdgeNGramTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene43EdgeNGramTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene43EdgeNGramTokenFilter_init_(t_Lucene43EdgeNGramTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            jint a1;
            jint a2;
            Lucene43EdgeNGramTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kII", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = Lucene43EdgeNGramTokenFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene43EdgeNGramTokenFilter_incrementToken(t_Lucene43EdgeNGramTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Lucene43EdgeNGramTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_Lucene43EdgeNGramTokenFilter_reset(t_Lucene43EdgeNGramTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene43EdgeNGramTokenFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/PostingsBaseFormat.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/PostingsWriterBase.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *PostingsBaseFormat::class$ = NULL;
        jmethodID *PostingsBaseFormat::mids$ = NULL;
        jfieldID *PostingsBaseFormat::fids$ = NULL;
        bool PostingsBaseFormat::live$ = false;

        jclass PostingsBaseFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/PostingsBaseFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_postingsReaderBase_927fb3f2] = env->getMethodID(cls, "postingsReaderBase", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/PostingsReaderBase;");
            mids$[mid_postingsWriterBase_c1fe85c2] = env->getMethodID(cls, "postingsWriterBase", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/PostingsWriterBase;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_name] = env->getFieldID(cls, "name", "Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::PostingsReaderBase PostingsBaseFormat::postingsReaderBase(const ::org::apache::lucene::index::SegmentReadState & a0) const
        {
          return ::org::apache::lucene::codecs::PostingsReaderBase(env->callObjectMethod(this$, mids$[mid_postingsReaderBase_927fb3f2], a0.this$));
        }

        ::org::apache::lucene::codecs::PostingsWriterBase PostingsBaseFormat::postingsWriterBase(const ::org::apache::lucene::index::SegmentWriteState & a0) const
        {
          return ::org::apache::lucene::codecs::PostingsWriterBase(env->callObjectMethod(this$, mids$[mid_postingsWriterBase_c1fe85c2], a0.this$));
        }

        ::java::lang::String PostingsBaseFormat::_get_name() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_name]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_PostingsBaseFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsBaseFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsBaseFormat_postingsReaderBase(t_PostingsBaseFormat *self, PyObject *arg);
        static PyObject *t_PostingsBaseFormat_postingsWriterBase(t_PostingsBaseFormat *self, PyObject *arg);
        static PyObject *t_PostingsBaseFormat_get__name(t_PostingsBaseFormat *self, void *data);

        static PyGetSetDef t_PostingsBaseFormat__fields_[] = {
          DECLARE_GET_FIELD(t_PostingsBaseFormat, name),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PostingsBaseFormat__methods_[] = {
          DECLARE_METHOD(t_PostingsBaseFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsBaseFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsBaseFormat, postingsReaderBase, METH_O),
          DECLARE_METHOD(t_PostingsBaseFormat, postingsWriterBase, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PostingsBaseFormat, t_PostingsBaseFormat, ::java::lang::Object, PostingsBaseFormat, abstract_init, 0, 0, t_PostingsBaseFormat__fields_, 0, 0);

        void t_PostingsBaseFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(PostingsBaseFormat), module, "PostingsBaseFormat", 0);
        }

        void t_PostingsBaseFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PostingsBaseFormat).tp_dict, "class_", make_descriptor(PostingsBaseFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PostingsBaseFormat).tp_dict, "wrapfn_", make_descriptor(t_PostingsBaseFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PostingsBaseFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PostingsBaseFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PostingsBaseFormat::initializeClass, 1)))
            return NULL;
          return t_PostingsBaseFormat::wrap_Object(PostingsBaseFormat(((t_PostingsBaseFormat *) arg)->object.this$));
        }
        static PyObject *t_PostingsBaseFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PostingsBaseFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PostingsBaseFormat_postingsReaderBase(t_PostingsBaseFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
          ::org::apache::lucene::codecs::PostingsReaderBase result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.postingsReaderBase(a0));
            return ::org::apache::lucene::codecs::t_PostingsReaderBase::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "postingsReaderBase", arg);
          return NULL;
        }

        static PyObject *t_PostingsBaseFormat_postingsWriterBase(t_PostingsBaseFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
          ::org::apache::lucene::codecs::PostingsWriterBase result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.postingsWriterBase(a0));
            return ::org::apache::lucene::codecs::t_PostingsWriterBase::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "postingsWriterBase", arg);
          return NULL;
        }

        static PyObject *t_PostingsBaseFormat_get__name(t_PostingsBaseFormat *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_name());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$ReaderIterator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/LongsRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$ReaderIterator::class$ = NULL;
          jmethodID *PackedInts$ReaderIterator::mids$ = NULL;
          bool PackedInts$ReaderIterator::live$ = false;

          jclass PackedInts$ReaderIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$ReaderIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getBitsPerValue_54c6a179] = env->getMethodID(cls, "getBitsPerValue", "()I");
              mids$[mid_next_54c6a17a] = env->getMethodID(cls, "next", "()J");
              mids$[mid_next_a3d07a9b] = env->getMethodID(cls, "next", "(I)Lorg/apache/lucene/util/LongsRef;");
              mids$[mid_ord_54c6a179] = env->getMethodID(cls, "ord", "()I");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint PackedInts$ReaderIterator::getBitsPerValue() const
          {
            return env->callIntMethod(this$, mids$[mid_getBitsPerValue_54c6a179]);
          }

          jlong PackedInts$ReaderIterator::next() const
          {
            return env->callLongMethod(this$, mids$[mid_next_54c6a17a]);
          }

          ::org::apache::lucene::util::LongsRef PackedInts$ReaderIterator::next(jint a0) const
          {
            return ::org::apache::lucene::util::LongsRef(env->callObjectMethod(this$, mids$[mid_next_a3d07a9b], a0));
          }

          jint PackedInts$ReaderIterator::ord() const
          {
            return env->callIntMethod(this$, mids$[mid_ord_54c6a179]);
          }

          jint PackedInts$ReaderIterator::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$ReaderIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$ReaderIterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$ReaderIterator_getBitsPerValue(t_PackedInts$ReaderIterator *self);
          static PyObject *t_PackedInts$ReaderIterator_next(t_PackedInts$ReaderIterator *self, PyObject *args);
          static PyObject *t_PackedInts$ReaderIterator_ord(t_PackedInts$ReaderIterator *self);
          static PyObject *t_PackedInts$ReaderIterator_size(t_PackedInts$ReaderIterator *self);
          static PyObject *t_PackedInts$ReaderIterator_get__bitsPerValue(t_PackedInts$ReaderIterator *self, void *data);
          static PyGetSetDef t_PackedInts$ReaderIterator__fields_[] = {
            DECLARE_GET_FIELD(t_PackedInts$ReaderIterator, bitsPerValue),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PackedInts$ReaderIterator__methods_[] = {
            DECLARE_METHOD(t_PackedInts$ReaderIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$ReaderIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$ReaderIterator, getBitsPerValue, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$ReaderIterator, next, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$ReaderIterator, ord, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$ReaderIterator, size, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$ReaderIterator, t_PackedInts$ReaderIterator, ::java::lang::Object, PackedInts$ReaderIterator, abstract_init, 0, 0, t_PackedInts$ReaderIterator__fields_, 0, 0);

          void t_PackedInts$ReaderIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$ReaderIterator), module, "PackedInts$ReaderIterator", 0);
          }

          void t_PackedInts$ReaderIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$ReaderIterator).tp_dict, "class_", make_descriptor(PackedInts$ReaderIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$ReaderIterator).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$ReaderIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$ReaderIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$ReaderIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$ReaderIterator::initializeClass, 1)))
              return NULL;
            return t_PackedInts$ReaderIterator::wrap_Object(PackedInts$ReaderIterator(((t_PackedInts$ReaderIterator *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$ReaderIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$ReaderIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PackedInts$ReaderIterator_getBitsPerValue(t_PackedInts$ReaderIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBitsPerValue());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$ReaderIterator_next(t_PackedInts$ReaderIterator *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.next());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jint a0;
                ::org::apache::lucene::util::LongsRef result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.next(a0));
                  return ::org::apache::lucene::util::t_LongsRef::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "next", args);
            return NULL;
          }

          static PyObject *t_PackedInts$ReaderIterator_ord(t_PackedInts$ReaderIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.ord());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$ReaderIterator_size(t_PackedInts$ReaderIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.size());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$ReaderIterator_get__bitsPerValue(t_PackedInts$ReaderIterator *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBitsPerValue());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/util/NamedSPILoader$NamedSPI.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "java/lang/ClassLoader.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *Codec::class$ = NULL;
        jmethodID *Codec::mids$ = NULL;
        bool Codec::live$ = false;

        jclass Codec::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/Codec");

            mids$ = new jmethodID[max_mid];
            mids$[mid_availableCodecs_03e99967] = env->getStaticMethodID(cls, "availableCodecs", "()Ljava/util/Set;");
            mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
            mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
            mids$[mid_forName_e21a4685] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/Codec;");
            mids$[mid_getDefault_27f0a02b] = env->getStaticMethodID(cls, "getDefault", "()Lorg/apache/lucene/codecs/Codec;");
            mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
            mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
            mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
            mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
            mids$[mid_reloadCodecs_9110048d] = env->getStaticMethodID(cls, "reloadCodecs", "(Ljava/lang/ClassLoader;)V");
            mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
            mids$[mid_setDefault_848f310e] = env->getStaticMethodID(cls, "setDefault", "(Lorg/apache/lucene/codecs/Codec;)V");
            mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
            mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Set Codec::availableCodecs()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_availableCodecs_03e99967]));
        }

        ::org::apache::lucene::codecs::DocValuesFormat Codec::docValuesFormat() const
        {
          return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
        }

        ::org::apache::lucene::codecs::FieldInfosFormat Codec::fieldInfosFormat() const
        {
          return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
        }

        Codec Codec::forName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Codec(env->callStaticObjectMethod(cls, mids$[mid_forName_e21a4685], a0.this$));
        }

        Codec Codec::getDefault()
        {
          jclass cls = env->getClass(initializeClass);
          return Codec(env->callStaticObjectMethod(cls, mids$[mid_getDefault_27f0a02b]));
        }

        ::java::lang::String Codec::getName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
        }

        ::org::apache::lucene::codecs::LiveDocsFormat Codec::liveDocsFormat() const
        {
          return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
        }

        ::org::apache::lucene::codecs::NormsFormat Codec::normsFormat() const
        {
          return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
        }

        ::org::apache::lucene::codecs::PostingsFormat Codec::postingsFormat() const
        {
          return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
        }

        void Codec::reloadCodecs(const ::java::lang::ClassLoader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_reloadCodecs_9110048d], a0.this$);
        }

        ::org::apache::lucene::codecs::SegmentInfoFormat Codec::segmentInfoFormat() const
        {
          return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
        }

        void Codec::setDefault(const Codec & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_setDefault_848f310e], a0.this$);
        }

        ::org::apache::lucene::codecs::StoredFieldsFormat Codec::storedFieldsFormat() const
        {
          return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
        }

        ::org::apache::lucene::codecs::TermVectorsFormat Codec::termVectorsFormat() const
        {
          return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
        }

        ::java::lang::String Codec::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_Codec_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Codec_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Codec_availableCodecs(PyTypeObject *type);
        static PyObject *t_Codec_docValuesFormat(t_Codec *self);
        static PyObject *t_Codec_fieldInfosFormat(t_Codec *self);
        static PyObject *t_Codec_forName(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Codec_getDefault(PyTypeObject *type);
        static PyObject *t_Codec_getName(t_Codec *self);
        static PyObject *t_Codec_liveDocsFormat(t_Codec *self);
        static PyObject *t_Codec_normsFormat(t_Codec *self);
        static PyObject *t_Codec_postingsFormat(t_Codec *self);
        static PyObject *t_Codec_reloadCodecs(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Codec_segmentInfoFormat(t_Codec *self);
        static PyObject *t_Codec_setDefault(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Codec_storedFieldsFormat(t_Codec *self);
        static PyObject *t_Codec_termVectorsFormat(t_Codec *self);
        static PyObject *t_Codec_toString(t_Codec *self, PyObject *args);
        static PyObject *t_Codec_get__default(t_Codec *self, void *data);
        static int t_Codec_set__default(t_Codec *self, PyObject *arg, void *data);
        static PyObject *t_Codec_get__name(t_Codec *self, void *data);
        static PyGetSetDef t_Codec__fields_[] = {
          DECLARE_GETSET_FIELD(t_Codec, default),
          DECLARE_GET_FIELD(t_Codec, name),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Codec__methods_[] = {
          DECLARE_METHOD(t_Codec, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Codec, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Codec, availableCodecs, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_Codec, docValuesFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, fieldInfosFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, forName, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Codec, getDefault, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_Codec, getName, METH_NOARGS),
          DECLARE_METHOD(t_Codec, liveDocsFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, normsFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, postingsFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, reloadCodecs, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Codec, segmentInfoFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, setDefault, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Codec, storedFieldsFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, termVectorsFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Codec, t_Codec, ::java::lang::Object, Codec, abstract_init, 0, 0, t_Codec__fields_, 0, 0);

        void t_Codec::install(PyObject *module)
        {
          installType(&PY_TYPE(Codec), module, "Codec", 0);
        }

        void t_Codec::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Codec).tp_dict, "class_", make_descriptor(Codec::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Codec).tp_dict, "wrapfn_", make_descriptor(t_Codec::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Codec).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Codec_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Codec::initializeClass, 1)))
            return NULL;
          return t_Codec::wrap_Object(Codec(((t_Codec *) arg)->object.this$));
        }
        static PyObject *t_Codec_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Codec::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Codec_availableCodecs(PyTypeObject *type)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::codecs::Codec::availableCodecs());
          return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_Codec_docValuesFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.docValuesFormat());
          return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_fieldInfosFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.fieldInfosFormat());
          return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_forName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          Codec result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::Codec::forName(a0));
            return t_Codec::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "forName", arg);
          return NULL;
        }

        static PyObject *t_Codec_getDefault(PyTypeObject *type)
        {
          Codec result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::codecs::Codec::getDefault());
          return t_Codec::wrap_Object(result);
        }

        static PyObject *t_Codec_getName(t_Codec *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getName());
          return j2p(result);
        }

        static PyObject *t_Codec_liveDocsFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.liveDocsFormat());
          return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_normsFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.normsFormat());
          return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_postingsFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.postingsFormat());
          return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_reloadCodecs(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::ClassLoader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::codecs::Codec::reloadCodecs(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "reloadCodecs", arg);
          return NULL;
        }

        static PyObject *t_Codec_segmentInfoFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.segmentInfoFormat());
          return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_setDefault(PyTypeObject *type, PyObject *arg)
        {
          Codec a0((jobject) NULL);

          if (!parseArg(arg, "k", Codec::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::codecs::Codec::setDefault(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "setDefault", arg);
          return NULL;
        }

        static PyObject *t_Codec_storedFieldsFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.storedFieldsFormat());
          return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_termVectorsFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.termVectorsFormat());
          return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_toString(t_Codec *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(Codec), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Codec_get__default(t_Codec *self, void *data)
        {
          Codec value((jobject) NULL);
          OBJ_CALL(value = self->object.getDefault());
          return t_Codec::wrap_Object(value);
        }
        static int t_Codec_set__default(t_Codec *self, PyObject *arg, void *data)
        {
          {
            Codec value((jobject) NULL);
            if (!parseArg(arg, "k", Codec::initializeClass, &value))
            {
              INT_CALL(self->object.setDefault(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "default", arg);
          return -1;
        }

        static PyObject *t_Codec_get__name(t_Codec *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getName());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueLong.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueLong::class$ = NULL;
          jmethodID *MutableValueLong::mids$ = NULL;
          jfieldID *MutableValueLong::fids$ = NULL;
          bool MutableValueLong::live$ = false;

          jclass MutableValueLong::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueLong");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_290588f1] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_copy_d590ce7c] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_15ab3811] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equalsSameType_290588e2] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_846352c3] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_value] = env->getFieldID(cls, "value", "J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueLong::MutableValueLong() : ::org::apache::lucene::util::mutable$::MutableValue(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint MutableValueLong::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_290588f1], a0.this$);
          }

          void MutableValueLong::copy(const ::org::apache::lucene::util::mutable$::MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d590ce7c], a0.this$);
          }

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueLong::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_15ab3811]));
          }

          jboolean MutableValueLong::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_290588e2], a0.this$);
          }

          jint MutableValueLong::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::Object MutableValueLong::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_846352c3]));
          }

          jlong MutableValueLong::_get_value() const
          {
            return env->getLongField(this$, fids$[fid_value]);
          }

          void MutableValueLong::_set_value(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_value], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueLong_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueLong_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueLong_init_(t_MutableValueLong *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueLong_compareSameType(t_MutableValueLong *self, PyObject *args);
          static PyObject *t_MutableValueLong_copy(t_MutableValueLong *self, PyObject *args);
          static PyObject *t_MutableValueLong_duplicate(t_MutableValueLong *self, PyObject *args);
          static PyObject *t_MutableValueLong_equalsSameType(t_MutableValueLong *self, PyObject *args);
          static PyObject *t_MutableValueLong_hashCode(t_MutableValueLong *self, PyObject *args);
          static PyObject *t_MutableValueLong_toObject(t_MutableValueLong *self, PyObject *args);
          static PyObject *t_MutableValueLong_get__value(t_MutableValueLong *self, void *data);
          static int t_MutableValueLong_set__value(t_MutableValueLong *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValueLong__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValueLong, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValueLong__methods_[] = {
            DECLARE_METHOD(t_MutableValueLong, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueLong, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueLong, compareSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueLong, copy, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueLong, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueLong, equalsSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueLong, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueLong, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MutableValueLong, t_MutableValueLong, ::org::apache::lucene::util::mutable$::MutableValue, MutableValueLong, t_MutableValueLong_init_, 0, 0, t_MutableValueLong__fields_, 0, 0);

          void t_MutableValueLong::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueLong), module, "MutableValueLong", 0);
          }

          void t_MutableValueLong::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MutableValueLong).tp_dict, "class_", make_descriptor(MutableValueLong::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MutableValueLong).tp_dict, "wrapfn_", make_descriptor(t_MutableValueLong::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MutableValueLong).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueLong_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueLong::initializeClass, 1)))
              return NULL;
            return t_MutableValueLong::wrap_Object(MutableValueLong(((t_MutableValueLong *) arg)->object.this$));
          }
          static PyObject *t_MutableValueLong_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueLong::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueLong_init_(t_MutableValueLong *self, PyObject *args, PyObject *kwds)
          {
            MutableValueLong object((jobject) NULL);

            INT_CALL(object = MutableValueLong());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueLong_compareSameType(t_MutableValueLong *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueLong), (PyObject *) self, "compareSameType", args, 2);
          }

          static PyObject *t_MutableValueLong_copy(t_MutableValueLong *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::mutable$::MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(MutableValueLong), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_MutableValueLong_duplicate(t_MutableValueLong *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueLong), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueLong_equalsSameType(t_MutableValueLong *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MutableValueLong), (PyObject *) self, "equalsSameType", args, 2);
          }

          static PyObject *t_MutableValueLong_hashCode(t_MutableValueLong *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueLong), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValueLong_toObject(t_MutableValueLong *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueLong), (PyObject *) self, "toObject", args, 2);
          }

          static PyObject *t_MutableValueLong_get__value(t_MutableValueLong *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_value());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_MutableValueLong_set__value(t_MutableValueLong *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_value(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *FilterBuilder::class$ = NULL;
          jmethodID *FilterBuilder::mids$ = NULL;
          bool FilterBuilder::live$ = false;

          jclass FilterBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/FilterBuilder");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_FilterBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FilterBuilder_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_FilterBuilder__methods_[] = {
            DECLARE_METHOD(t_FilterBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilterBuilder, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FilterBuilder, t_FilterBuilder, ::java::lang::Object, FilterBuilder, abstract_init, 0, 0, 0, 0, 0);

          void t_FilterBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(FilterBuilder), module, "FilterBuilder", 0);
          }

          void t_FilterBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FilterBuilder).tp_dict, "class_", make_descriptor(FilterBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FilterBuilder).tp_dict, "wrapfn_", make_descriptor(t_FilterBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FilterBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FilterBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FilterBuilder::initializeClass, 1)))
              return NULL;
            return t_FilterBuilder::wrap_Object(FilterBuilder(((t_FilterBuilder *) arg)->object.this$));
          }
          static PyObject *t_FilterBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FilterBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefHash.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/util/ByteBlockPool.h"
#include "org/apache/lucene/util/BytesRefHash$BytesStartArray.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefHash::class$ = NULL;
        jmethodID *BytesRefHash::mids$ = NULL;
        bool BytesRefHash::live$ = false;
        jint BytesRefHash::DEFAULT_CAPACITY = (jint) 0;

        jclass BytesRefHash::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefHash");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_ca821364] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/ByteBlockPool;)V");
            mids$[mid_init$_348f324e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/ByteBlockPool;ILorg/apache/lucene/util/BytesRefHash$BytesStartArray;)V");
            mids$[mid_add_7bc03ddb] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_addByPoolOffset_39c7bd23] = env->getMethodID(cls, "addByPoolOffset", "(I)I");
            mids$[mid_byteStart_39c7bd23] = env->getMethodID(cls, "byteStart", "(I)I");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_clear_bb0c767f] = env->getMethodID(cls, "clear", "(Z)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_find_7bc03ddb] = env->getMethodID(cls, "find", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_get_ce5e2005] = env->getMethodID(cls, "get", "(ILorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_reinit_54c6a166] = env->getMethodID(cls, "reinit", "()V");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_sort_402cb660] = env->getMethodID(cls, "sort", "(Ljava/util/Comparator;)[I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_CAPACITY = env->getStaticIntField(cls, "DEFAULT_CAPACITY");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BytesRefHash::BytesRefHash() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        BytesRefHash::BytesRefHash(const ::org::apache::lucene::util::ByteBlockPool & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ca821364, a0.this$)) {}

        BytesRefHash::BytesRefHash(const ::org::apache::lucene::util::ByteBlockPool & a0, jint a1, const ::org::apache::lucene::util::BytesRefHash$BytesStartArray & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_348f324e, a0.this$, a1, a2.this$)) {}

        jint BytesRefHash::add(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_add_7bc03ddb], a0.this$);
        }

        jint BytesRefHash::addByPoolOffset(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_addByPoolOffset_39c7bd23], a0);
        }

        jint BytesRefHash::byteStart(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_byteStart_39c7bd23], a0);
        }

        void BytesRefHash::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        void BytesRefHash::clear(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_bb0c767f], a0);
        }

        void BytesRefHash::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jint BytesRefHash::find(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_find_7bc03ddb], a0.this$);
        }

        ::org::apache::lucene::util::BytesRef BytesRefHash::get(jint a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_get_ce5e2005], a0, a1.this$));
        }

        void BytesRefHash::reinit() const
        {
          env->callVoidMethod(this$, mids$[mid_reinit_54c6a166]);
        }

        jint BytesRefHash::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        JArray< jint > BytesRefHash::sort(const ::java::util::Comparator & a0) const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_sort_402cb660], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/BytesRefHash$DirectBytesStartArray.h"
#include "org/apache/lucene/util/BytesRefHash$MaxBytesLengthExceededException.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefHash_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefHash_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BytesRefHash_init_(t_BytesRefHash *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BytesRefHash_add(t_BytesRefHash *self, PyObject *arg);
        static PyObject *t_BytesRefHash_addByPoolOffset(t_BytesRefHash *self, PyObject *arg);
        static PyObject *t_BytesRefHash_byteStart(t_BytesRefHash *self, PyObject *arg);
        static PyObject *t_BytesRefHash_clear(t_BytesRefHash *self, PyObject *args);
        static PyObject *t_BytesRefHash_close(t_BytesRefHash *self);
        static PyObject *t_BytesRefHash_find(t_BytesRefHash *self, PyObject *arg);
        static PyObject *t_BytesRefHash_get(t_BytesRefHash *self, PyObject *args);
        static PyObject *t_BytesRefHash_reinit(t_BytesRefHash *self);
        static PyObject *t_BytesRefHash_size(t_BytesRefHash *self);
        static PyObject *t_BytesRefHash_sort(t_BytesRefHash *self, PyObject *arg);

        static PyMethodDef t_BytesRefHash__methods_[] = {
          DECLARE_METHOD(t_BytesRefHash, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash, add, METH_O),
          DECLARE_METHOD(t_BytesRefHash, addByPoolOffset, METH_O),
          DECLARE_METHOD(t_BytesRefHash, byteStart, METH_O),
          DECLARE_METHOD(t_BytesRefHash, clear, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefHash, close, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefHash, find, METH_O),
          DECLARE_METHOD(t_BytesRefHash, get, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefHash, reinit, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefHash, size, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefHash, sort, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BytesRefHash, t_BytesRefHash, ::java::lang::Object, BytesRefHash, t_BytesRefHash_init_, 0, 0, 0, 0, 0);

        void t_BytesRefHash::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefHash), module, "BytesRefHash", 0);
          PyDict_SetItemString(PY_TYPE(BytesRefHash).tp_dict, "DirectBytesStartArray", make_descriptor(&PY_TYPE(BytesRefHash$DirectBytesStartArray)));
          PyDict_SetItemString(PY_TYPE(BytesRefHash).tp_dict, "BytesStartArray", make_descriptor(&PY_TYPE(BytesRefHash$BytesStartArray)));
          PyDict_SetItemString(PY_TYPE(BytesRefHash).tp_dict, "MaxBytesLengthExceededException", make_descriptor(&PY_TYPE(BytesRefHash$MaxBytesLengthExceededException)));
        }

        void t_BytesRefHash::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BytesRefHash).tp_dict, "class_", make_descriptor(BytesRefHash::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BytesRefHash).tp_dict, "wrapfn_", make_descriptor(t_BytesRefHash::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BytesRefHash).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(BytesRefHash::initializeClass);
          PyDict_SetItemString(PY_TYPE(BytesRefHash).tp_dict, "DEFAULT_CAPACITY", make_descriptor(BytesRefHash::DEFAULT_CAPACITY));
        }

        static PyObject *t_BytesRefHash_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefHash::initializeClass, 1)))
            return NULL;
          return t_BytesRefHash::wrap_Object(BytesRefHash(((t_BytesRefHash *) arg)->object.this$));
        }
        static PyObject *t_BytesRefHash_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefHash::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BytesRefHash_init_(t_BytesRefHash *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              BytesRefHash object((jobject) NULL);

              INT_CALL(object = BytesRefHash());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::org::apache::lucene::util::ByteBlockPool a0((jobject) NULL);
              BytesRefHash object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::ByteBlockPool::initializeClass, &a0))
              {
                INT_CALL(object = BytesRefHash(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::util::ByteBlockPool a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::util::BytesRefHash$BytesStartArray a2((jobject) NULL);
              BytesRefHash object((jobject) NULL);

              if (!parseArgs(args, "kIk", ::org::apache::lucene::util::ByteBlockPool::initializeClass, ::org::apache::lucene::util::BytesRefHash$BytesStartArray::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = BytesRefHash(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BytesRefHash_add(t_BytesRefHash *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.add(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_BytesRefHash_addByPoolOffset(t_BytesRefHash *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.addByPoolOffset(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "addByPoolOffset", arg);
          return NULL;
        }

        static PyObject *t_BytesRefHash_byteStart(t_BytesRefHash *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.byteStart(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "byteStart", arg);
          return NULL;
        }

        static PyObject *t_BytesRefHash_clear(t_BytesRefHash *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }
            break;
           case 1:
            {
              jboolean a0;

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(self->object.clear(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "clear", args);
          return NULL;
        }

        static PyObject *t_BytesRefHash_close(t_BytesRefHash *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_BytesRefHash_find(t_BytesRefHash *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.find(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "find", arg);
          return NULL;
        }

        static PyObject *t_BytesRefHash_get(t_BytesRefHash *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.get(a0, a1));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", args);
          return NULL;
        }

        static PyObject *t_BytesRefHash_reinit(t_BytesRefHash *self)
        {
          OBJ_CALL(self->object.reinit());
          Py_RETURN_NONE;
        }

        static PyObject *t_BytesRefHash_size(t_BytesRefHash *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_BytesRefHash_sort(t_BytesRefHash *self, PyObject *arg)
        {
          ::java::util::Comparator a0((jobject) NULL);
          PyTypeObject **p0;
          JArray< jint > result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = self->object.sort(a0));
            return result.wrap();
          }

          PyErr_SetArgsError((PyObject *) self, "sort", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueDouble.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueDouble::class$ = NULL;
          jmethodID *MutableValueDouble::mids$ = NULL;
          jfieldID *MutableValueDouble::fids$ = NULL;
          bool MutableValueDouble::live$ = false;

          jclass MutableValueDouble::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueDouble");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_290588f1] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_copy_d590ce7c] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_15ab3811] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equalsSameType_290588e2] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_846352c3] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_value] = env->getFieldID(cls, "value", "D");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueDouble::MutableValueDouble() : ::org::apache::lucene::util::mutable$::MutableValue(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint MutableValueDouble::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_290588f1], a0.this$);
          }

          void MutableValueDouble::copy(const ::org::apache::lucene::util::mutable$::MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d590ce7c], a0.this$);
          }

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueDouble::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_15ab3811]));
          }

          jboolean MutableValueDouble::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_290588e2], a0.this$);
          }

          jint MutableValueDouble::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::Object MutableValueDouble::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_846352c3]));
          }

          jdouble MutableValueDouble::_get_value() const
          {
            return env->getDoubleField(this$, fids$[fid_value]);
          }

          void MutableValueDouble::_set_value(jdouble a0) const
          {
            env->setDoubleField(this$, fids$[fid_value], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueDouble_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueDouble_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueDouble_init_(t_MutableValueDouble *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueDouble_compareSameType(t_MutableValueDouble *self, PyObject *args);
          static PyObject *t_MutableValueDouble_copy(t_MutableValueDouble *self, PyObject *args);
          static PyObject *t_MutableValueDouble_duplicate(t_MutableValueDouble *self, PyObject *args);
          static PyObject *t_MutableValueDouble_equalsSameType(t_MutableValueDouble *self, PyObject *args);
          static PyObject *t_MutableValueDouble_hashCode(t_MutableValueDouble *self, PyObject *args);
          static PyObject *t_MutableValueDouble_toObject(t_MutableValueDouble *self, PyObject *args);
          static PyObject *t_MutableValueDouble_get__value(t_MutableValueDouble *self, void *data);
          static int t_MutableValueDouble_set__value(t_MutableValueDouble *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValueDouble__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValueDouble, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValueDouble__methods_[] = {
            DECLARE_METHOD(t_MutableValueDouble, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueDouble, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueDouble, compareSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueDouble, copy, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueDouble, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueDouble, equalsSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueDouble, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueDouble, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MutableValueDouble, t_MutableValueDouble, ::org::apache::lucene::util::mutable$::MutableValue, MutableValueDouble, t_MutableValueDouble_init_, 0, 0, t_MutableValueDouble__fields_, 0, 0);

          void t_MutableValueDouble::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueDouble), module, "MutableValueDouble", 0);
          }

          void t_MutableValueDouble::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MutableValueDouble).tp_dict, "class_", make_descriptor(MutableValueDouble::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MutableValueDouble).tp_dict, "wrapfn_", make_descriptor(t_MutableValueDouble::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MutableValueDouble).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueDouble_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueDouble::initializeClass, 1)))
              return NULL;
            return t_MutableValueDouble::wrap_Object(MutableValueDouble(((t_MutableValueDouble *) arg)->object.this$));
          }
          static PyObject *t_MutableValueDouble_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueDouble::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueDouble_init_(t_MutableValueDouble *self, PyObject *args, PyObject *kwds)
          {
            MutableValueDouble object((jobject) NULL);

            INT_CALL(object = MutableValueDouble());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueDouble_compareSameType(t_MutableValueDouble *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueDouble), (PyObject *) self, "compareSameType", args, 2);
          }

          static PyObject *t_MutableValueDouble_copy(t_MutableValueDouble *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::mutable$::MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(MutableValueDouble), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_MutableValueDouble_duplicate(t_MutableValueDouble *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueDouble), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueDouble_equalsSameType(t_MutableValueDouble *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MutableValueDouble), (PyObject *) self, "equalsSameType", args, 2);
          }

          static PyObject *t_MutableValueDouble_hashCode(t_MutableValueDouble *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueDouble), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValueDouble_toObject(t_MutableValueDouble *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueDouble), (PyObject *) self, "toObject", args, 2);
          }

          static PyObject *t_MutableValueDouble_get__value(t_MutableValueDouble *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_value());
            return PyFloat_FromDouble((double) value);
          }
          static int t_MutableValueDouble_set__value(t_MutableValueDouble *self, PyObject *arg, void *data)
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object._set_value(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/MultiLevelSkipListWriter.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *MultiLevelSkipListWriter::class$ = NULL;
        jmethodID *MultiLevelSkipListWriter::mids$ = NULL;
        bool MultiLevelSkipListWriter::live$ = false;

        jclass MultiLevelSkipListWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/MultiLevelSkipListWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_bufferSkip_39c7bd3c] = env->getMethodID(cls, "bufferSkip", "(I)V");
            mids$[mid_writeSkip_faad6216] = env->getMethodID(cls, "writeSkip", "(Lorg/apache/lucene/store/IndexOutput;)J");
            mids$[mid_init_54c6a166] = env->getMethodID(cls, "init", "()V");
            mids$[mid_resetSkip_54c6a166] = env->getMethodID(cls, "resetSkip", "()V");
            mids$[mid_writeSkipData_a31eeaec] = env->getMethodID(cls, "writeSkipData", "(ILorg/apache/lucene/store/IndexOutput;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void MultiLevelSkipListWriter::bufferSkip(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_bufferSkip_39c7bd3c], a0);
        }

        jlong MultiLevelSkipListWriter::writeSkip(const ::org::apache::lucene::store::IndexOutput & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_writeSkip_faad6216], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_MultiLevelSkipListWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiLevelSkipListWriter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiLevelSkipListWriter_bufferSkip(t_MultiLevelSkipListWriter *self, PyObject *arg);
        static PyObject *t_MultiLevelSkipListWriter_writeSkip(t_MultiLevelSkipListWriter *self, PyObject *arg);

        static PyMethodDef t_MultiLevelSkipListWriter__methods_[] = {
          DECLARE_METHOD(t_MultiLevelSkipListWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiLevelSkipListWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiLevelSkipListWriter, bufferSkip, METH_O),
          DECLARE_METHOD(t_MultiLevelSkipListWriter, writeSkip, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiLevelSkipListWriter, t_MultiLevelSkipListWriter, ::java::lang::Object, MultiLevelSkipListWriter, abstract_init, 0, 0, 0, 0, 0);

        void t_MultiLevelSkipListWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiLevelSkipListWriter), module, "MultiLevelSkipListWriter", 0);
        }

        void t_MultiLevelSkipListWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiLevelSkipListWriter).tp_dict, "class_", make_descriptor(MultiLevelSkipListWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiLevelSkipListWriter).tp_dict, "wrapfn_", make_descriptor(t_MultiLevelSkipListWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiLevelSkipListWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiLevelSkipListWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiLevelSkipListWriter::initializeClass, 1)))
            return NULL;
          return t_MultiLevelSkipListWriter::wrap_Object(MultiLevelSkipListWriter(((t_MultiLevelSkipListWriter *) arg)->object.this$));
        }
        static PyObject *t_MultiLevelSkipListWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiLevelSkipListWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiLevelSkipListWriter_bufferSkip(t_MultiLevelSkipListWriter *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.bufferSkip(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "bufferSkip", arg);
          return NULL;
        }

        static PyObject *t_MultiLevelSkipListWriter_writeSkip(t_MultiLevelSkipListWriter *self, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexOutput a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexOutput::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.writeSkip(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "writeSkip", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BM25Similarity.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "org/apache/lucene/search/similarities/Similarity$SimWeight.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BM25Similarity::class$ = NULL;
          jmethodID *BM25Similarity::mids$ = NULL;
          bool BM25Similarity::live$ = false;

          jclass BM25Similarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BM25Similarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_f1b0c004] = env->getMethodID(cls, "<init>", "(FF)V");
              mids$[mid_computeNorm_6ff84e0e] = env->getMethodID(cls, "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J");
              mids$[mid_computeWeight_8bb6ee0b] = env->getMethodID(cls, "computeWeight", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimWeight;");
              mids$[mid_getB_54c6a176] = env->getMethodID(cls, "getB", "()F");
              mids$[mid_getDiscountOverlaps_54c6a16a] = env->getMethodID(cls, "getDiscountOverlaps", "()Z");
              mids$[mid_getK1_54c6a176] = env->getMethodID(cls, "getK1", "()F");
              mids$[mid_idfExplain_9dde2121] = env->getMethodID(cls, "idfExplain", "(Lorg/apache/lucene/search/CollectionStatistics;Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_idfExplain_be4c9f2b] = env->getMethodID(cls, "idfExplain", "(Lorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_setDiscountOverlaps_bb0c767f] = env->getMethodID(cls, "setDiscountOverlaps", "(Z)V");
              mids$[mid_simScorer_9a2cfed8] = env->getMethodID(cls, "simScorer", "(Lorg/apache/lucene/search/similarities/Similarity$SimWeight;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_decodeNormValue_b2271697] = env->getMethodID(cls, "decodeNormValue", "(B)F");
              mids$[mid_sloppyFreq_39c7bd2c] = env->getMethodID(cls, "sloppyFreq", "(I)F");
              mids$[mid_scorePayload_ffd34a82] = env->getMethodID(cls, "scorePayload", "(IIILorg/apache/lucene/util/BytesRef;)F");
              mids$[mid_avgFieldLength_48af4d71] = env->getMethodID(cls, "avgFieldLength", "(Lorg/apache/lucene/search/CollectionStatistics;)F");
              mids$[mid_encodeNormValue_77691ed7] = env->getMethodID(cls, "encodeNormValue", "(FI)B");
              mids$[mid_idf_a7e12cb4] = env->getMethodID(cls, "idf", "(JJ)F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BM25Similarity::BM25Similarity() : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          BM25Similarity::BM25Similarity(jfloat a0, jfloat a1) : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_f1b0c004, a0, a1)) {}

          jlong BM25Similarity::computeNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_computeNorm_6ff84e0e], a0.this$);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimWeight BM25Similarity::computeWeight(jfloat a0, const ::org::apache::lucene::search::CollectionStatistics & a1, const JArray< ::org::apache::lucene::search::TermStatistics > & a2) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimWeight(env->callObjectMethod(this$, mids$[mid_computeWeight_8bb6ee0b], a0, a1.this$, a2.this$));
          }

          jfloat BM25Similarity::getB() const
          {
            return env->callFloatMethod(this$, mids$[mid_getB_54c6a176]);
          }

          jboolean BM25Similarity::getDiscountOverlaps() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getDiscountOverlaps_54c6a16a]);
          }

          jfloat BM25Similarity::getK1() const
          {
            return env->callFloatMethod(this$, mids$[mid_getK1_54c6a176]);
          }

          ::org::apache::lucene::search::Explanation BM25Similarity::idfExplain(const ::org::apache::lucene::search::CollectionStatistics & a0, const ::org::apache::lucene::search::TermStatistics & a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_idfExplain_9dde2121], a0.this$, a1.this$));
          }

          ::org::apache::lucene::search::Explanation BM25Similarity::idfExplain(const ::org::apache::lucene::search::CollectionStatistics & a0, const JArray< ::org::apache::lucene::search::TermStatistics > & a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_idfExplain_be4c9f2b], a0.this$, a1.this$));
          }

          void BM25Similarity::setDiscountOverlaps(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDiscountOverlaps_bb0c767f], a0);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimScorer BM25Similarity::simScorer(const ::org::apache::lucene::search::similarities::Similarity$SimWeight & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->callObjectMethod(this$, mids$[mid_simScorer_9a2cfed8], a0.this$, a1.this$));
          }

          ::java::lang::String BM25Similarity::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BM25Similarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BM25Similarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BM25Similarity_init_(t_BM25Similarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BM25Similarity_computeNorm(t_BM25Similarity *self, PyObject *args);
          static PyObject *t_BM25Similarity_computeWeight(t_BM25Similarity *self, PyObject *args);
          static PyObject *t_BM25Similarity_getB(t_BM25Similarity *self);
          static PyObject *t_BM25Similarity_getDiscountOverlaps(t_BM25Similarity *self);
          static PyObject *t_BM25Similarity_getK1(t_BM25Similarity *self);
          static PyObject *t_BM25Similarity_idfExplain(t_BM25Similarity *self, PyObject *args);
          static PyObject *t_BM25Similarity_setDiscountOverlaps(t_BM25Similarity *self, PyObject *arg);
          static PyObject *t_BM25Similarity_simScorer(t_BM25Similarity *self, PyObject *args);
          static PyObject *t_BM25Similarity_toString(t_BM25Similarity *self, PyObject *args);
          static PyObject *t_BM25Similarity_get__b(t_BM25Similarity *self, void *data);
          static PyObject *t_BM25Similarity_get__discountOverlaps(t_BM25Similarity *self, void *data);
          static int t_BM25Similarity_set__discountOverlaps(t_BM25Similarity *self, PyObject *arg, void *data);
          static PyObject *t_BM25Similarity_get__k1(t_BM25Similarity *self, void *data);
          static PyGetSetDef t_BM25Similarity__fields_[] = {
            DECLARE_GET_FIELD(t_BM25Similarity, b),
            DECLARE_GETSET_FIELD(t_BM25Similarity, discountOverlaps),
            DECLARE_GET_FIELD(t_BM25Similarity, k1),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BM25Similarity__methods_[] = {
            DECLARE_METHOD(t_BM25Similarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BM25Similarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BM25Similarity, computeNorm, METH_VARARGS),
            DECLARE_METHOD(t_BM25Similarity, computeWeight, METH_VARARGS),
            DECLARE_METHOD(t_BM25Similarity, getB, METH_NOARGS),
            DECLARE_METHOD(t_BM25Similarity, getDiscountOverlaps, METH_NOARGS),
            DECLARE_METHOD(t_BM25Similarity, getK1, METH_NOARGS),
            DECLARE_METHOD(t_BM25Similarity, idfExplain, METH_VARARGS),
            DECLARE_METHOD(t_BM25Similarity, setDiscountOverlaps, METH_O),
            DECLARE_METHOD(t_BM25Similarity, simScorer, METH_VARARGS),
            DECLARE_METHOD(t_BM25Similarity, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BM25Similarity, t_BM25Similarity, ::org::apache::lucene::search::similarities::Similarity, BM25Similarity, t_BM25Similarity_init_, 0, 0, t_BM25Similarity__fields_, 0, 0);

          void t_BM25Similarity::install(PyObject *module)
          {
            installType(&PY_TYPE(BM25Similarity), module, "BM25Similarity", 0);
          }

          void t_BM25Similarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BM25Similarity).tp_dict, "class_", make_descriptor(BM25Similarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BM25Similarity).tp_dict, "wrapfn_", make_descriptor(t_BM25Similarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BM25Similarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BM25Similarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BM25Similarity::initializeClass, 1)))
              return NULL;
            return t_BM25Similarity::wrap_Object(BM25Similarity(((t_BM25Similarity *) arg)->object.this$));
          }
          static PyObject *t_BM25Similarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BM25Similarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BM25Similarity_init_(t_BM25Similarity *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                BM25Similarity object((jobject) NULL);

                INT_CALL(object = BM25Similarity());
                self->object = object;
                break;
              }
              goto err;
             case 2:
              {
                jfloat a0;
                jfloat a1;
                BM25Similarity object((jobject) NULL);

                if (!parseArgs(args, "FF", &a0, &a1))
                {
                  INT_CALL(object = BM25Similarity(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BM25Similarity_computeNorm(t_BM25Similarity *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeNorm(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(BM25Similarity), (PyObject *) self, "computeNorm", args, 2);
          }

          static PyObject *t_BM25Similarity_computeWeight(t_BM25Similarity *self, PyObject *args)
          {
            jfloat a0;
            ::org::apache::lucene::search::CollectionStatistics a1((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a2((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimWeight result((jobject) NULL);

            if (!parseArgs(args, "Fk[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.computeWeight(a0, a1, a2));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimWeight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BM25Similarity), (PyObject *) self, "computeWeight", args, 2);
          }

          static PyObject *t_BM25Similarity_getB(t_BM25Similarity *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getB());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_BM25Similarity_getDiscountOverlaps(t_BM25Similarity *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getDiscountOverlaps());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_BM25Similarity_getK1(t_BM25Similarity *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getK1());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_BM25Similarity_idfExplain(t_BM25Similarity *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::search::CollectionStatistics a0((jobject) NULL);
                ::org::apache::lucene::search::TermStatistics a1((jobject) NULL);
                ::org::apache::lucene::search::Explanation result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.idfExplain(a0, a1));
                  return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::search::CollectionStatistics a0((jobject) NULL);
                JArray< ::org::apache::lucene::search::TermStatistics > a1((jobject) NULL);
                ::org::apache::lucene::search::Explanation result((jobject) NULL);

                if (!parseArgs(args, "k[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.idfExplain(a0, a1));
                  return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "idfExplain", args);
            return NULL;
          }

          static PyObject *t_BM25Similarity_setDiscountOverlaps(t_BM25Similarity *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setDiscountOverlaps(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDiscountOverlaps", arg);
            return NULL;
          }

          static PyObject *t_BM25Similarity_simScorer(t_BM25Similarity *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::Similarity$SimWeight a0((jobject) NULL);
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimScorer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::similarities::Similarity$SimWeight::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.simScorer(a0, a1));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BM25Similarity), (PyObject *) self, "simScorer", args, 2);
          }

          static PyObject *t_BM25Similarity_toString(t_BM25Similarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BM25Similarity), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_BM25Similarity_get__b(t_BM25Similarity *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getB());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_BM25Similarity_get__discountOverlaps(t_BM25Similarity *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getDiscountOverlaps());
            Py_RETURN_BOOL(value);
          }
          static int t_BM25Similarity_set__discountOverlaps(t_BM25Similarity *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setDiscountOverlaps(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "discountOverlaps", arg);
            return -1;
          }

          static PyObject *t_BM25Similarity_get__k1(t_BM25Similarity *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getK1());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/NumericUtils.h"
#include "org/apache/lucene/util/NumericUtils$IntRangeBuilder.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/NumericUtils$LongRangeBuilder.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *NumericUtils::class$ = NULL;
        jmethodID *NumericUtils::mids$ = NULL;
        bool NumericUtils::live$ = false;
        jint NumericUtils::BUF_SIZE_INT = (jint) 0;
        jint NumericUtils::BUF_SIZE_LONG = (jint) 0;
        jint NumericUtils::PRECISION_STEP_DEFAULT = (jint) 0;
        jint NumericUtils::PRECISION_STEP_DEFAULT_32 = (jint) 0;
        jbyte NumericUtils::SHIFT_START_INT = (jbyte) 0;
        jbyte NumericUtils::SHIFT_START_LONG = (jbyte) 0;

        jclass NumericUtils::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/NumericUtils");

            mids$ = new jmethodID[max_mid];
            mids$[mid_doubleToSortableLong_5d1c7659] = env->getStaticMethodID(cls, "doubleToSortableLong", "(D)J");
            mids$[mid_filterPrefixCodedInts_d737078b] = env->getStaticMethodID(cls, "filterPrefixCodedInts", "(Lorg/apache/lucene/index/TermsEnum;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_filterPrefixCodedLongs_d737078b] = env->getStaticMethodID(cls, "filterPrefixCodedLongs", "(Lorg/apache/lucene/index/TermsEnum;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_floatToSortableInt_06298cb4] = env->getStaticMethodID(cls, "floatToSortableInt", "(F)I");
            mids$[mid_getMaxInt_d0b7bb08] = env->getStaticMethodID(cls, "getMaxInt", "(Lorg/apache/lucene/index/Terms;)I");
            mids$[mid_getMaxLong_d0b7bb0b] = env->getStaticMethodID(cls, "getMaxLong", "(Lorg/apache/lucene/index/Terms;)J");
            mids$[mid_getMinInt_d0b7bb08] = env->getStaticMethodID(cls, "getMinInt", "(Lorg/apache/lucene/index/Terms;)I");
            mids$[mid_getMinLong_d0b7bb0b] = env->getStaticMethodID(cls, "getMinLong", "(Lorg/apache/lucene/index/Terms;)J");
            mids$[mid_getPrefixCodedIntShift_7bc03ddb] = env->getStaticMethodID(cls, "getPrefixCodedIntShift", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_getPrefixCodedLongShift_7bc03ddb] = env->getStaticMethodID(cls, "getPrefixCodedLongShift", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_intToPrefixCoded_1064070c] = env->getStaticMethodID(cls, "intToPrefixCoded", "(IILorg/apache/lucene/util/BytesRefBuilder;)V");
            mids$[mid_intToPrefixCodedBytes_1064070c] = env->getStaticMethodID(cls, "intToPrefixCodedBytes", "(IILorg/apache/lucene/util/BytesRefBuilder;)V");
            mids$[mid_longToPrefixCoded_7d39f4e5] = env->getStaticMethodID(cls, "longToPrefixCoded", "(JILorg/apache/lucene/util/BytesRefBuilder;)V");
            mids$[mid_longToPrefixCodedBytes_7d39f4e5] = env->getStaticMethodID(cls, "longToPrefixCodedBytes", "(JILorg/apache/lucene/util/BytesRefBuilder;)V");
            mids$[mid_prefixCodedToInt_7bc03ddb] = env->getStaticMethodID(cls, "prefixCodedToInt", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_prefixCodedToLong_7bc03dd8] = env->getStaticMethodID(cls, "prefixCodedToLong", "(Lorg/apache/lucene/util/BytesRef;)J");
            mids$[mid_sortableDoubleBits_0ee6df33] = env->getStaticMethodID(cls, "sortableDoubleBits", "(J)J");
            mids$[mid_sortableFloatBits_39c7bd23] = env->getStaticMethodID(cls, "sortableFloatBits", "(I)I");
            mids$[mid_sortableIntToFloat_39c7bd2c] = env->getStaticMethodID(cls, "sortableIntToFloat", "(I)F");
            mids$[mid_sortableLongToDouble_0ee6df3d] = env->getStaticMethodID(cls, "sortableLongToDouble", "(J)D");
            mids$[mid_splitIntRange_b263c325] = env->getStaticMethodID(cls, "splitIntRange", "(Lorg/apache/lucene/util/NumericUtils$IntRangeBuilder;III)V");
            mids$[mid_splitLongRange_585f2c31] = env->getStaticMethodID(cls, "splitLongRange", "(Lorg/apache/lucene/util/NumericUtils$LongRangeBuilder;IJJ)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            BUF_SIZE_INT = env->getStaticIntField(cls, "BUF_SIZE_INT");
            BUF_SIZE_LONG = env->getStaticIntField(cls, "BUF_SIZE_LONG");
            PRECISION_STEP_DEFAULT = env->getStaticIntField(cls, "PRECISION_STEP_DEFAULT");
            PRECISION_STEP_DEFAULT_32 = env->getStaticIntField(cls, "PRECISION_STEP_DEFAULT_32");
            SHIFT_START_INT = env->getStaticByteField(cls, "SHIFT_START_INT");
            SHIFT_START_LONG = env->getStaticByteField(cls, "SHIFT_START_LONG");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong NumericUtils::doubleToSortableLong(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_doubleToSortableLong_5d1c7659], a0);
        }

        ::org::apache::lucene::index::TermsEnum NumericUtils::filterPrefixCodedInts(const ::org::apache::lucene::index::TermsEnum & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::TermsEnum(env->callStaticObjectMethod(cls, mids$[mid_filterPrefixCodedInts_d737078b], a0.this$));
        }

        ::org::apache::lucene::index::TermsEnum NumericUtils::filterPrefixCodedLongs(const ::org::apache::lucene::index::TermsEnum & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::TermsEnum(env->callStaticObjectMethod(cls, mids$[mid_filterPrefixCodedLongs_d737078b], a0.this$));
        }

        jint NumericUtils::floatToSortableInt(jfloat a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_floatToSortableInt_06298cb4], a0);
        }

        jint NumericUtils::getMaxInt(const ::org::apache::lucene::index::Terms & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getMaxInt_d0b7bb08], a0.this$);
        }

        jlong NumericUtils::getMaxLong(const ::org::apache::lucene::index::Terms & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_getMaxLong_d0b7bb0b], a0.this$);
        }

        jint NumericUtils::getMinInt(const ::org::apache::lucene::index::Terms & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getMinInt_d0b7bb08], a0.this$);
        }

        jlong NumericUtils::getMinLong(const ::org::apache::lucene::index::Terms & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_getMinLong_d0b7bb0b], a0.this$);
        }

        jint NumericUtils::getPrefixCodedIntShift(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getPrefixCodedIntShift_7bc03ddb], a0.this$);
        }

        jint NumericUtils::getPrefixCodedLongShift(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getPrefixCodedLongShift_7bc03ddb], a0.this$);
        }

        void NumericUtils::intToPrefixCoded(jint a0, jint a1, const ::org::apache::lucene::util::BytesRefBuilder & a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_intToPrefixCoded_1064070c], a0, a1, a2.this$);
        }

        void NumericUtils::intToPrefixCodedBytes(jint a0, jint a1, const ::org::apache::lucene::util::BytesRefBuilder & a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_intToPrefixCodedBytes_1064070c], a0, a1, a2.this$);
        }

        void NumericUtils::longToPrefixCoded(jlong a0, jint a1, const ::org::apache::lucene::util::BytesRefBuilder & a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_longToPrefixCoded_7d39f4e5], a0, a1, a2.this$);
        }

        void NumericUtils::longToPrefixCodedBytes(jlong a0, jint a1, const ::org::apache::lucene::util::BytesRefBuilder & a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_longToPrefixCodedBytes_7d39f4e5], a0, a1, a2.this$);
        }

        jint NumericUtils::prefixCodedToInt(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_prefixCodedToInt_7bc03ddb], a0.this$);
        }

        jlong NumericUtils::prefixCodedToLong(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_prefixCodedToLong_7bc03dd8], a0.this$);
        }

        jlong NumericUtils::sortableDoubleBits(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sortableDoubleBits_0ee6df33], a0);
        }

        jint NumericUtils::sortableFloatBits(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_sortableFloatBits_39c7bd23], a0);
        }

        jfloat NumericUtils::sortableIntToFloat(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticFloatMethod(cls, mids$[mid_sortableIntToFloat_39c7bd2c], a0);
        }

        jdouble NumericUtils::sortableLongToDouble(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_sortableLongToDouble_0ee6df3d], a0);
        }

        void NumericUtils::splitIntRange(const ::org::apache::lucene::util::NumericUtils$IntRangeBuilder & a0, jint a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_splitIntRange_b263c325], a0.this$, a1, a2, a3);
        }

        void NumericUtils::splitLongRange(const ::org::apache::lucene::util::NumericUtils$LongRangeBuilder & a0, jint a1, jlong a2, jlong a3)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_splitLongRange_585f2c31], a0.this$, a1, a2, a3);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_NumericUtils_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_doubleToSortableLong(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_filterPrefixCodedInts(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_filterPrefixCodedLongs(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_floatToSortableInt(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_getMaxInt(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_getMaxLong(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_getMinInt(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_getMinLong(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_getPrefixCodedIntShift(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_getPrefixCodedLongShift(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_intToPrefixCoded(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericUtils_intToPrefixCodedBytes(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericUtils_longToPrefixCoded(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericUtils_longToPrefixCodedBytes(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericUtils_prefixCodedToInt(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_prefixCodedToLong(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_sortableDoubleBits(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_sortableFloatBits(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_sortableIntToFloat(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_sortableLongToDouble(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_splitIntRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericUtils_splitLongRange(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_NumericUtils__methods_[] = {
          DECLARE_METHOD(t_NumericUtils, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, doubleToSortableLong, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, filterPrefixCodedInts, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, filterPrefixCodedLongs, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, floatToSortableInt, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, getMaxInt, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, getMaxLong, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, getMinInt, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, getMinLong, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, getPrefixCodedIntShift, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, getPrefixCodedLongShift, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, intToPrefixCoded, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, intToPrefixCodedBytes, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, longToPrefixCoded, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, longToPrefixCodedBytes, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, prefixCodedToInt, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, prefixCodedToLong, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, sortableDoubleBits, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, sortableFloatBits, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, sortableIntToFloat, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, sortableLongToDouble, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, splitIntRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, splitLongRange, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericUtils, t_NumericUtils, ::java::lang::Object, NumericUtils, abstract_init, 0, 0, 0, 0, 0);

        void t_NumericUtils::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericUtils), module, "NumericUtils", 0);
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "IntRangeBuilder", make_descriptor(&PY_TYPE(NumericUtils$IntRangeBuilder)));
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "LongRangeBuilder", make_descriptor(&PY_TYPE(NumericUtils$LongRangeBuilder)));
        }

        void t_NumericUtils::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "class_", make_descriptor(NumericUtils::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "wrapfn_", make_descriptor(t_NumericUtils::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(NumericUtils::initializeClass);
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "BUF_SIZE_INT", make_descriptor(NumericUtils::BUF_SIZE_INT));
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "BUF_SIZE_LONG", make_descriptor(NumericUtils::BUF_SIZE_LONG));
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "PRECISION_STEP_DEFAULT", make_descriptor(NumericUtils::PRECISION_STEP_DEFAULT));
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "PRECISION_STEP_DEFAULT_32", make_descriptor(NumericUtils::PRECISION_STEP_DEFAULT_32));
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "SHIFT_START_INT", make_descriptor(NumericUtils::SHIFT_START_INT));
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "SHIFT_START_LONG", make_descriptor(NumericUtils::SHIFT_START_LONG));
        }

        static PyObject *t_NumericUtils_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericUtils::initializeClass, 1)))
            return NULL;
          return t_NumericUtils::wrap_Object(NumericUtils(((t_NumericUtils *) arg)->object.this$));
        }
        static PyObject *t_NumericUtils_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericUtils::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NumericUtils_doubleToSortableLong(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jlong result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::doubleToSortableLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "doubleToSortableLong", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_filterPrefixCodedInts(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::filterPrefixCodedInts(a0));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "filterPrefixCodedInts", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_filterPrefixCodedLongs(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::filterPrefixCodedLongs(a0));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "filterPrefixCodedLongs", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_floatToSortableInt(PyTypeObject *type, PyObject *arg)
        {
          jfloat a0;
          jint result;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::floatToSortableInt(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "floatToSortableInt", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_getMaxInt(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::Terms a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::getMaxInt(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "getMaxInt", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_getMaxLong(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::Terms a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::getMaxLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "getMaxLong", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_getMinInt(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::Terms a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::getMinInt(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "getMinInt", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_getMinLong(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::Terms a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::getMinLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "getMinLong", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_getPrefixCodedIntShift(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::getPrefixCodedIntShift(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "getPrefixCodedIntShift", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_getPrefixCodedLongShift(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::getPrefixCodedLongShift(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "getPrefixCodedLongShift", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_intToPrefixCoded(PyTypeObject *type, PyObject *args)
        {
          jint a0;
          jint a1;
          ::org::apache::lucene::util::BytesRefBuilder a2((jobject) NULL);

          if (!parseArgs(args, "IIk", ::org::apache::lucene::util::BytesRefBuilder::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::util::NumericUtils::intToPrefixCoded(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "intToPrefixCoded", args);
          return NULL;
        }

        static PyObject *t_NumericUtils_intToPrefixCodedBytes(PyTypeObject *type, PyObject *args)
        {
          jint a0;
          jint a1;
          ::org::apache::lucene::util::BytesRefBuilder a2((jobject) NULL);

          if (!parseArgs(args, "IIk", ::org::apache::lucene::util::BytesRefBuilder::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::util::NumericUtils::intToPrefixCodedBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "intToPrefixCodedBytes", args);
          return NULL;
        }

        static PyObject *t_NumericUtils_longToPrefixCoded(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          jint a1;
          ::org::apache::lucene::util::BytesRefBuilder a2((jobject) NULL);

          if (!parseArgs(args, "JIk", ::org::apache::lucene::util::BytesRefBuilder::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::util::NumericUtils::longToPrefixCoded(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "longToPrefixCoded", args);
          return NULL;
        }

        static PyObject *t_NumericUtils_longToPrefixCodedBytes(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          jint a1;
          ::org::apache::lucene::util::BytesRefBuilder a2((jobject) NULL);

          if (!parseArgs(args, "JIk", ::org::apache::lucene::util::BytesRefBuilder::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::util::NumericUtils::longToPrefixCodedBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "longToPrefixCodedBytes", args);
          return NULL;
        }

        static PyObject *t_NumericUtils_prefixCodedToInt(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::prefixCodedToInt(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "prefixCodedToInt", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_prefixCodedToLong(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::prefixCodedToLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "prefixCodedToLong", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_sortableDoubleBits(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::sortableDoubleBits(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "sortableDoubleBits", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_sortableFloatBits(PyTypeObject *type, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::sortableFloatBits(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "sortableFloatBits", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_sortableIntToFloat(PyTypeObject *type, PyObject *arg)
        {
          jint a0;
          jfloat result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::sortableIntToFloat(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "sortableIntToFloat", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_sortableLongToDouble(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          jdouble result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::sortableLongToDouble(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "sortableLongToDouble", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_splitIntRange(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::NumericUtils$IntRangeBuilder a0((jobject) NULL);
          jint a1;
          jint a2;
          jint a3;

          if (!parseArgs(args, "kIII", ::org::apache::lucene::util::NumericUtils$IntRangeBuilder::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::org::apache::lucene::util::NumericUtils::splitIntRange(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "splitIntRange", args);
          return NULL;
        }

        static PyObject *t_NumericUtils_splitLongRange(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::NumericUtils$LongRangeBuilder a0((jobject) NULL);
          jint a1;
          jlong a2;
          jlong a3;

          if (!parseArgs(args, "kIJJ", ::org::apache::lucene::util::NumericUtils$LongRangeBuilder::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::org::apache::lucene::util::NumericUtils::splitLongRange(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "splitLongRange", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene42/Lucene42FieldInfosFormat.h"
#include "org/apache/lucene/codecs/FieldInfosWriter.h"
#include "org/apache/lucene/codecs/FieldInfosReader.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {

          ::java::lang::Class *Lucene42FieldInfosFormat::class$ = NULL;
          jmethodID *Lucene42FieldInfosFormat::mids$ = NULL;
          bool Lucene42FieldInfosFormat::live$ = false;

          jclass Lucene42FieldInfosFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene42/Lucene42FieldInfosFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getFieldInfosReader_6ecd5494] = env->getMethodID(cls, "getFieldInfosReader", "()Lorg/apache/lucene/codecs/FieldInfosReader;");
              mids$[mid_getFieldInfosWriter_211ffa60] = env->getMethodID(cls, "getFieldInfosWriter", "()Lorg/apache/lucene/codecs/FieldInfosWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene42FieldInfosFormat::Lucene42FieldInfosFormat() : ::org::apache::lucene::codecs::FieldInfosFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::FieldInfosReader Lucene42FieldInfosFormat::getFieldInfosReader() const
          {
            return ::org::apache::lucene::codecs::FieldInfosReader(env->callObjectMethod(this$, mids$[mid_getFieldInfosReader_6ecd5494]));
          }

          ::org::apache::lucene::codecs::FieldInfosWriter Lucene42FieldInfosFormat::getFieldInfosWriter() const
          {
            return ::org::apache::lucene::codecs::FieldInfosWriter(env->callObjectMethod(this$, mids$[mid_getFieldInfosWriter_211ffa60]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {
          static PyObject *t_Lucene42FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene42FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene42FieldInfosFormat_init_(t_Lucene42FieldInfosFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene42FieldInfosFormat_getFieldInfosReader(t_Lucene42FieldInfosFormat *self, PyObject *args);
          static PyObject *t_Lucene42FieldInfosFormat_getFieldInfosWriter(t_Lucene42FieldInfosFormat *self, PyObject *args);
          static PyObject *t_Lucene42FieldInfosFormat_get__fieldInfosReader(t_Lucene42FieldInfosFormat *self, void *data);
          static PyObject *t_Lucene42FieldInfosFormat_get__fieldInfosWriter(t_Lucene42FieldInfosFormat *self, void *data);
          static PyGetSetDef t_Lucene42FieldInfosFormat__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene42FieldInfosFormat, fieldInfosReader),
            DECLARE_GET_FIELD(t_Lucene42FieldInfosFormat, fieldInfosWriter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene42FieldInfosFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene42FieldInfosFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42FieldInfosFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42FieldInfosFormat, getFieldInfosReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42FieldInfosFormat, getFieldInfosWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene42FieldInfosFormat, t_Lucene42FieldInfosFormat, ::org::apache::lucene::codecs::FieldInfosFormat, Lucene42FieldInfosFormat, t_Lucene42FieldInfosFormat_init_, 0, 0, t_Lucene42FieldInfosFormat__fields_, 0, 0);

          void t_Lucene42FieldInfosFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene42FieldInfosFormat), module, "Lucene42FieldInfosFormat", 0);
          }

          void t_Lucene42FieldInfosFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene42FieldInfosFormat).tp_dict, "class_", make_descriptor(Lucene42FieldInfosFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene42FieldInfosFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene42FieldInfosFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene42FieldInfosFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene42FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene42FieldInfosFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene42FieldInfosFormat::wrap_Object(Lucene42FieldInfosFormat(((t_Lucene42FieldInfosFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene42FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene42FieldInfosFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene42FieldInfosFormat_init_(t_Lucene42FieldInfosFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene42FieldInfosFormat object((jobject) NULL);

            INT_CALL(object = Lucene42FieldInfosFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene42FieldInfosFormat_getFieldInfosReader(t_Lucene42FieldInfosFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getFieldInfosReader());
              return ::org::apache::lucene::codecs::t_FieldInfosReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42FieldInfosFormat), (PyObject *) self, "getFieldInfosReader", args, 2);
          }

          static PyObject *t_Lucene42FieldInfosFormat_getFieldInfosWriter(t_Lucene42FieldInfosFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosWriter result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getFieldInfosWriter());
              return ::org::apache::lucene::codecs::t_FieldInfosWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42FieldInfosFormat), (PyObject *) self, "getFieldInfosWriter", args, 2);
          }

          static PyObject *t_Lucene42FieldInfosFormat_get__fieldInfosReader(t_Lucene42FieldInfosFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::FieldInfosReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldInfosReader());
            return ::org::apache::lucene::codecs::t_FieldInfosReader::wrap_Object(value);
          }

          static PyObject *t_Lucene42FieldInfosFormat_get__fieldInfosWriter(t_Lucene42FieldInfosFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::FieldInfosWriter value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldInfosWriter());
            return ::org::apache::lucene::codecs::t_FieldInfosWriter::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$DocValuesStatus.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$DocValuesStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$DocValuesStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$DocValuesStatus::fids$ = NULL;
        bool CheckIndex$Status$DocValuesStatus::live$ = false;

        jclass CheckIndex$Status$DocValuesStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$DocValuesStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_error] = env->getFieldID(cls, "error", "Ljava/lang/Throwable;");
            fids$[fid_totalBinaryFields] = env->getFieldID(cls, "totalBinaryFields", "J");
            fids$[fid_totalNumericFields] = env->getFieldID(cls, "totalNumericFields", "J");
            fids$[fid_totalSortedFields] = env->getFieldID(cls, "totalSortedFields", "J");
            fids$[fid_totalSortedNumericFields] = env->getFieldID(cls, "totalSortedNumericFields", "J");
            fids$[fid_totalSortedSetFields] = env->getFieldID(cls, "totalSortedSetFields", "J");
            fids$[fid_totalValueFields] = env->getFieldID(cls, "totalValueFields", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::Throwable CheckIndex$Status$DocValuesStatus::_get_error() const
        {
          return ::java::lang::Throwable(env->getObjectField(this$, fids$[fid_error]));
        }

        void CheckIndex$Status$DocValuesStatus::_set_error(const ::java::lang::Throwable & a0) const
        {
          env->setObjectField(this$, fids$[fid_error], a0.this$);
        }

        jlong CheckIndex$Status$DocValuesStatus::_get_totalBinaryFields() const
        {
          return env->getLongField(this$, fids$[fid_totalBinaryFields]);
        }

        void CheckIndex$Status$DocValuesStatus::_set_totalBinaryFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalBinaryFields], a0);
        }

        jlong CheckIndex$Status$DocValuesStatus::_get_totalNumericFields() const
        {
          return env->getLongField(this$, fids$[fid_totalNumericFields]);
        }

        void CheckIndex$Status$DocValuesStatus::_set_totalNumericFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalNumericFields], a0);
        }

        jlong CheckIndex$Status$DocValuesStatus::_get_totalSortedFields() const
        {
          return env->getLongField(this$, fids$[fid_totalSortedFields]);
        }

        void CheckIndex$Status$DocValuesStatus::_set_totalSortedFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalSortedFields], a0);
        }

        jlong CheckIndex$Status$DocValuesStatus::_get_totalSortedNumericFields() const
        {
          return env->getLongField(this$, fids$[fid_totalSortedNumericFields]);
        }

        void CheckIndex$Status$DocValuesStatus::_set_totalSortedNumericFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalSortedNumericFields], a0);
        }

        jlong CheckIndex$Status$DocValuesStatus::_get_totalSortedSetFields() const
        {
          return env->getLongField(this$, fids$[fid_totalSortedSetFields]);
        }

        void CheckIndex$Status$DocValuesStatus::_set_totalSortedSetFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalSortedSetFields], a0);
        }

        jlong CheckIndex$Status$DocValuesStatus::_get_totalValueFields() const
        {
          return env->getLongField(this$, fids$[fid_totalValueFields]);
        }

        void CheckIndex$Status$DocValuesStatus::_set_totalValueFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalValueFields], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$DocValuesStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__error(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__error(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalBinaryFields(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__totalBinaryFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalNumericFields(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__totalNumericFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalSortedFields(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__totalSortedFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalSortedNumericFields(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__totalSortedNumericFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalSortedSetFields(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__totalSortedSetFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalValueFields(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__totalValueFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$DocValuesStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, error),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, totalBinaryFields),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, totalNumericFields),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, totalSortedFields),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, totalSortedNumericFields),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, totalSortedSetFields),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, totalValueFields),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$DocValuesStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$DocValuesStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$DocValuesStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CheckIndex$Status$DocValuesStatus, t_CheckIndex$Status$DocValuesStatus, ::java::lang::Object, CheckIndex$Status$DocValuesStatus, abstract_init, 0, 0, t_CheckIndex$Status$DocValuesStatus__fields_, 0, 0);

        void t_CheckIndex$Status$DocValuesStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$DocValuesStatus), module, "CheckIndex$Status$DocValuesStatus", 0);
        }

        void t_CheckIndex$Status$DocValuesStatus::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$DocValuesStatus).tp_dict, "class_", make_descriptor(CheckIndex$Status$DocValuesStatus::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$DocValuesStatus).tp_dict, "wrapfn_", make_descriptor(t_CheckIndex$Status$DocValuesStatus::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$DocValuesStatus).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$DocValuesStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$DocValuesStatus::wrap_Object(CheckIndex$Status$DocValuesStatus(((t_CheckIndex$Status$DocValuesStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$DocValuesStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$DocValuesStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__error(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          OBJ_CALL(value = self->object._get_error());
          return ::java::lang::t_Throwable::wrap_Object(value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__error(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &value))
          {
            INT_CALL(self->object._set_error(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "error", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalBinaryFields(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalBinaryFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__totalBinaryFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalBinaryFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalBinaryFields", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalNumericFields(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalNumericFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__totalNumericFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalNumericFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalNumericFields", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalSortedFields(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalSortedFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__totalSortedFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalSortedFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalSortedFields", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalSortedNumericFields(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalSortedNumericFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__totalSortedNumericFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalSortedNumericFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalSortedNumericFields", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalSortedSetFields(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalSortedSetFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__totalSortedSetFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalSortedSetFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalSortedSetFields", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalValueFields(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalValueFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__totalValueFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalValueFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalValueFields", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/WeightedSpanTerm.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/highlight/PositionSpan.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *WeightedSpanTerm::class$ = NULL;
          jmethodID *WeightedSpanTerm::mids$ = NULL;
          bool WeightedSpanTerm::live$ = false;

          jclass WeightedSpanTerm::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/WeightedSpanTerm");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f3ab5075] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;)V");
              mids$[mid_init$_126740fe] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;Z)V");
              mids$[mid_addPositionSpans_1fde8fc3] = env->getMethodID(cls, "addPositionSpans", "(Ljava/util/List;)V");
              mids$[mid_checkPosition_39c7bd30] = env->getMethodID(cls, "checkPosition", "(I)Z");
              mids$[mid_getPositionSpans_87851566] = env->getMethodID(cls, "getPositionSpans", "()Ljava/util/List;");
              mids$[mid_isPositionSensitive_54c6a16a] = env->getMethodID(cls, "isPositionSensitive", "()Z");
              mids$[mid_setPositionSensitive_bb0c767f] = env->getMethodID(cls, "setPositionSensitive", "(Z)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WeightedSpanTerm::WeightedSpanTerm(jfloat a0, const ::java::lang::String & a1) : ::org::apache::lucene::search::highlight::WeightedTerm(env->newObject(initializeClass, &mids$, mid_init$_f3ab5075, a0, a1.this$)) {}

          WeightedSpanTerm::WeightedSpanTerm(jfloat a0, const ::java::lang::String & a1, jboolean a2) : ::org::apache::lucene::search::highlight::WeightedTerm(env->newObject(initializeClass, &mids$, mid_init$_126740fe, a0, a1.this$, a2)) {}

          void WeightedSpanTerm::addPositionSpans(const ::java::util::List & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_addPositionSpans_1fde8fc3], a0.this$);
          }

          jboolean WeightedSpanTerm::checkPosition(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_checkPosition_39c7bd30], a0);
          }

          ::java::util::List WeightedSpanTerm::getPositionSpans() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getPositionSpans_87851566]));
          }

          jboolean WeightedSpanTerm::isPositionSensitive() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isPositionSensitive_54c6a16a]);
          }

          void WeightedSpanTerm::setPositionSensitive(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionSensitive_bb0c767f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_WeightedSpanTerm_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WeightedSpanTerm_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WeightedSpanTerm_init_(t_WeightedSpanTerm *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WeightedSpanTerm_addPositionSpans(t_WeightedSpanTerm *self, PyObject *arg);
          static PyObject *t_WeightedSpanTerm_checkPosition(t_WeightedSpanTerm *self, PyObject *arg);
          static PyObject *t_WeightedSpanTerm_getPositionSpans(t_WeightedSpanTerm *self);
          static PyObject *t_WeightedSpanTerm_isPositionSensitive(t_WeightedSpanTerm *self);
          static PyObject *t_WeightedSpanTerm_setPositionSensitive(t_WeightedSpanTerm *self, PyObject *arg);
          static PyObject *t_WeightedSpanTerm_get__positionSensitive(t_WeightedSpanTerm *self, void *data);
          static int t_WeightedSpanTerm_set__positionSensitive(t_WeightedSpanTerm *self, PyObject *arg, void *data);
          static PyObject *t_WeightedSpanTerm_get__positionSpans(t_WeightedSpanTerm *self, void *data);
          static PyGetSetDef t_WeightedSpanTerm__fields_[] = {
            DECLARE_GETSET_FIELD(t_WeightedSpanTerm, positionSensitive),
            DECLARE_GET_FIELD(t_WeightedSpanTerm, positionSpans),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_WeightedSpanTerm__methods_[] = {
            DECLARE_METHOD(t_WeightedSpanTerm, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedSpanTerm, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedSpanTerm, addPositionSpans, METH_O),
            DECLARE_METHOD(t_WeightedSpanTerm, checkPosition, METH_O),
            DECLARE_METHOD(t_WeightedSpanTerm, getPositionSpans, METH_NOARGS),
            DECLARE_METHOD(t_WeightedSpanTerm, isPositionSensitive, METH_NOARGS),
            DECLARE_METHOD(t_WeightedSpanTerm, setPositionSensitive, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WeightedSpanTerm, t_WeightedSpanTerm, ::org::apache::lucene::search::highlight::WeightedTerm, WeightedSpanTerm, t_WeightedSpanTerm_init_, 0, 0, t_WeightedSpanTerm__fields_, 0, 0);

          void t_WeightedSpanTerm::install(PyObject *module)
          {
            installType(&PY_TYPE(WeightedSpanTerm), module, "WeightedSpanTerm", 0);
          }

          void t_WeightedSpanTerm::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WeightedSpanTerm).tp_dict, "class_", make_descriptor(WeightedSpanTerm::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WeightedSpanTerm).tp_dict, "wrapfn_", make_descriptor(t_WeightedSpanTerm::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WeightedSpanTerm).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WeightedSpanTerm_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WeightedSpanTerm::initializeClass, 1)))
              return NULL;
            return t_WeightedSpanTerm::wrap_Object(WeightedSpanTerm(((t_WeightedSpanTerm *) arg)->object.this$));
          }
          static PyObject *t_WeightedSpanTerm_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WeightedSpanTerm::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WeightedSpanTerm_init_(t_WeightedSpanTerm *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                jfloat a0;
                ::java::lang::String a1((jobject) NULL);
                WeightedSpanTerm object((jobject) NULL);

                if (!parseArgs(args, "Fs", &a0, &a1))
                {
                  INT_CALL(object = WeightedSpanTerm(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                jfloat a0;
                ::java::lang::String a1((jobject) NULL);
                jboolean a2;
                WeightedSpanTerm object((jobject) NULL);

                if (!parseArgs(args, "FsZ", &a0, &a1, &a2))
                {
                  INT_CALL(object = WeightedSpanTerm(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WeightedSpanTerm_addPositionSpans(t_WeightedSpanTerm *self, PyObject *arg)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(self->object.addPositionSpans(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addPositionSpans", arg);
            return NULL;
          }

          static PyObject *t_WeightedSpanTerm_checkPosition(t_WeightedSpanTerm *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.checkPosition(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "checkPosition", arg);
            return NULL;
          }

          static PyObject *t_WeightedSpanTerm_getPositionSpans(t_WeightedSpanTerm *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getPositionSpans());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::highlight::PY_TYPE(PositionSpan));
          }

          static PyObject *t_WeightedSpanTerm_isPositionSensitive(t_WeightedSpanTerm *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isPositionSensitive());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_WeightedSpanTerm_setPositionSensitive(t_WeightedSpanTerm *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setPositionSensitive(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionSensitive", arg);
            return NULL;
          }

          static PyObject *t_WeightedSpanTerm_get__positionSensitive(t_WeightedSpanTerm *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isPositionSensitive());
            Py_RETURN_BOOL(value);
          }
          static int t_WeightedSpanTerm_set__positionSensitive(t_WeightedSpanTerm *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setPositionSensitive(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionSensitive", arg);
            return -1;
          }

          static PyObject *t_WeightedSpanTerm_get__positionSpans(t_WeightedSpanTerm *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getPositionSpans());
            return ::java::util::t_List::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/codecs/PostingsWriterBase.h"
#include "org/apache/lucene/codecs/TermsConsumer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {

          ::java::lang::Class *BlockTreeTermsWriter::class$ = NULL;
          jmethodID *BlockTreeTermsWriter::mids$ = NULL;
          bool BlockTreeTermsWriter::live$ = false;
          jint BlockTreeTermsWriter::DEFAULT_MAX_BLOCK_SIZE = (jint) 0;
          jint BlockTreeTermsWriter::DEFAULT_MIN_BLOCK_SIZE = (jint) 0;
          jint BlockTreeTermsWriter::VERSION_APPEND_ONLY = (jint) 0;
          jint BlockTreeTermsWriter::VERSION_CHECKSUM = (jint) 0;
          jint BlockTreeTermsWriter::VERSION_CURRENT = (jint) 0;
          jint BlockTreeTermsWriter::VERSION_META_ARRAY = (jint) 0;
          jint BlockTreeTermsWriter::VERSION_MIN_MAX_TERMS = (jint) 0;
          jint BlockTreeTermsWriter::VERSION_START = (jint) 0;

          jclass BlockTreeTermsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_3f2db6e1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentWriteState;Lorg/apache/lucene/codecs/PostingsWriterBase;II)V");
              mids$[mid_addField_eb6fab90] = env->getMethodID(cls, "addField", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/codecs/TermsConsumer;");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_BLOCK_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_BLOCK_SIZE");
              DEFAULT_MIN_BLOCK_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_BLOCK_SIZE");
              VERSION_APPEND_ONLY = env->getStaticIntField(cls, "VERSION_APPEND_ONLY");
              VERSION_CHECKSUM = env->getStaticIntField(cls, "VERSION_CHECKSUM");
              VERSION_CURRENT = env->getStaticIntField(cls, "VERSION_CURRENT");
              VERSION_META_ARRAY = env->getStaticIntField(cls, "VERSION_META_ARRAY");
              VERSION_MIN_MAX_TERMS = env->getStaticIntField(cls, "VERSION_MIN_MAX_TERMS");
              VERSION_START = env->getStaticIntField(cls, "VERSION_START");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockTreeTermsWriter::BlockTreeTermsWriter(const ::org::apache::lucene::index::SegmentWriteState & a0, const ::org::apache::lucene::codecs::PostingsWriterBase & a1, jint a2, jint a3) : ::org::apache::lucene::codecs::FieldsConsumer(env->newObject(initializeClass, &mids$, mid_init$_3f2db6e1, a0.this$, a1.this$, a2, a3)) {}

          ::org::apache::lucene::codecs::TermsConsumer BlockTreeTermsWriter::addField(const ::org::apache::lucene::index::FieldInfo & a0) const
          {
            return ::org::apache::lucene::codecs::TermsConsumer(env->callObjectMethod(this$, mids$[mid_addField_eb6fab90], a0.this$));
          }

          void BlockTreeTermsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {
          static PyObject *t_BlockTreeTermsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockTreeTermsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockTreeTermsWriter_init_(t_BlockTreeTermsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BlockTreeTermsWriter_addField(t_BlockTreeTermsWriter *self, PyObject *args);
          static PyObject *t_BlockTreeTermsWriter_close(t_BlockTreeTermsWriter *self, PyObject *args);

          static PyMethodDef t_BlockTreeTermsWriter__methods_[] = {
            DECLARE_METHOD(t_BlockTreeTermsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockTreeTermsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockTreeTermsWriter, addField, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeTermsWriter, close, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BlockTreeTermsWriter, t_BlockTreeTermsWriter, ::org::apache::lucene::codecs::FieldsConsumer, BlockTreeTermsWriter, t_BlockTreeTermsWriter_init_, 0, 0, 0, 0, 0);

          void t_BlockTreeTermsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockTreeTermsWriter), module, "BlockTreeTermsWriter", 0);
          }

          void t_BlockTreeTermsWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "class_", make_descriptor(BlockTreeTermsWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "wrapfn_", make_descriptor(t_BlockTreeTermsWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(BlockTreeTermsWriter::initializeClass);
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "DEFAULT_MAX_BLOCK_SIZE", make_descriptor(BlockTreeTermsWriter::DEFAULT_MAX_BLOCK_SIZE));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "DEFAULT_MIN_BLOCK_SIZE", make_descriptor(BlockTreeTermsWriter::DEFAULT_MIN_BLOCK_SIZE));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "VERSION_APPEND_ONLY", make_descriptor(BlockTreeTermsWriter::VERSION_APPEND_ONLY));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "VERSION_CHECKSUM", make_descriptor(BlockTreeTermsWriter::VERSION_CHECKSUM));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "VERSION_CURRENT", make_descriptor(BlockTreeTermsWriter::VERSION_CURRENT));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "VERSION_META_ARRAY", make_descriptor(BlockTreeTermsWriter::VERSION_META_ARRAY));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "VERSION_MIN_MAX_TERMS", make_descriptor(BlockTreeTermsWriter::VERSION_MIN_MAX_TERMS));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "VERSION_START", make_descriptor(BlockTreeTermsWriter::VERSION_START));
          }

          static PyObject *t_BlockTreeTermsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockTreeTermsWriter::initializeClass, 1)))
              return NULL;
            return t_BlockTreeTermsWriter::wrap_Object(BlockTreeTermsWriter(((t_BlockTreeTermsWriter *) arg)->object.this$));
          }
          static PyObject *t_BlockTreeTermsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockTreeTermsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockTreeTermsWriter_init_(t_BlockTreeTermsWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsWriterBase a1((jobject) NULL);
            jint a2;
            jint a3;
            BlockTreeTermsWriter object((jobject) NULL);

            if (!parseArgs(args, "kkII", ::org::apache::lucene::index::SegmentWriteState::initializeClass, ::org::apache::lucene::codecs::PostingsWriterBase::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = BlockTreeTermsWriter(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BlockTreeTermsWriter_addField(t_BlockTreeTermsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::codecs::TermsConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.addField(a0));
              return ::org::apache::lucene::codecs::t_TermsConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BlockTreeTermsWriter), (PyObject *) self, "addField", args, 2);
          }

          static PyObject *t_BlockTreeTermsWriter_close(t_BlockTreeTermsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BlockTreeTermsWriter), (PyObject *) self, "close", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$StemmerOverrideMap.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/fst/FST$BytesReader.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *StemmerOverrideFilter$StemmerOverrideMap::class$ = NULL;
          jmethodID *StemmerOverrideFilter$StemmerOverrideMap::mids$ = NULL;
          bool StemmerOverrideFilter$StemmerOverrideMap::live$ = false;

          jclass StemmerOverrideFilter$StemmerOverrideMap::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$StemmerOverrideMap");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6d8e5bb9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;Z)V");
              mids$[mid_get_b662c4bb] = env->getMethodID(cls, "get", "([CILorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getBytesReader_92a3fc65] = env->getMethodID(cls, "getBytesReader", "()Lorg/apache/lucene/util/fst/FST$BytesReader;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StemmerOverrideFilter$StemmerOverrideMap::StemmerOverrideFilter$StemmerOverrideMap(const ::org::apache::lucene::util::fst::FST & a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6d8e5bb9, a0.this$, a1)) {}

          ::org::apache::lucene::util::BytesRef StemmerOverrideFilter$StemmerOverrideMap::get(const JArray< jchar > & a0, jint a1, const ::org::apache::lucene::util::fst::FST$Arc & a2, const ::org::apache::lucene::util::fst::FST$BytesReader & a3) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_get_b662c4bb], a0.this$, a1, a2.this$, a3.this$));
          }

          ::org::apache::lucene::util::fst::FST$BytesReader StemmerOverrideFilter$StemmerOverrideMap::getBytesReader() const
          {
            return ::org::apache::lucene::util::fst::FST$BytesReader(env->callObjectMethod(this$, mids$[mid_getBytesReader_92a3fc65]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StemmerOverrideFilter$StemmerOverrideMap_init_(t_StemmerOverrideFilter$StemmerOverrideMap *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_get(t_StemmerOverrideFilter$StemmerOverrideMap *self, PyObject *args);
          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_getBytesReader(t_StemmerOverrideFilter$StemmerOverrideMap *self);
          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_get__bytesReader(t_StemmerOverrideFilter$StemmerOverrideMap *self, void *data);
          static PyGetSetDef t_StemmerOverrideFilter$StemmerOverrideMap__fields_[] = {
            DECLARE_GET_FIELD(t_StemmerOverrideFilter$StemmerOverrideMap, bytesReader),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StemmerOverrideFilter$StemmerOverrideMap__methods_[] = {
            DECLARE_METHOD(t_StemmerOverrideFilter$StemmerOverrideMap, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilter$StemmerOverrideMap, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilter$StemmerOverrideMap, get, METH_VARARGS),
            DECLARE_METHOD(t_StemmerOverrideFilter$StemmerOverrideMap, getBytesReader, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StemmerOverrideFilter$StemmerOverrideMap, t_StemmerOverrideFilter$StemmerOverrideMap, ::java::lang::Object, StemmerOverrideFilter$StemmerOverrideMap, t_StemmerOverrideFilter$StemmerOverrideMap_init_, 0, 0, t_StemmerOverrideFilter$StemmerOverrideMap__fields_, 0, 0);

          void t_StemmerOverrideFilter$StemmerOverrideMap::install(PyObject *module)
          {
            installType(&PY_TYPE(StemmerOverrideFilter$StemmerOverrideMap), module, "StemmerOverrideFilter$StemmerOverrideMap", 0);
          }

          void t_StemmerOverrideFilter$StemmerOverrideMap::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter$StemmerOverrideMap).tp_dict, "class_", make_descriptor(StemmerOverrideFilter$StemmerOverrideMap::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter$StemmerOverrideMap).tp_dict, "wrapfn_", make_descriptor(t_StemmerOverrideFilter$StemmerOverrideMap::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter$StemmerOverrideMap).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StemmerOverrideFilter$StemmerOverrideMap::initializeClass, 1)))
              return NULL;
            return t_StemmerOverrideFilter$StemmerOverrideMap::wrap_Object(StemmerOverrideFilter$StemmerOverrideMap(((t_StemmerOverrideFilter$StemmerOverrideMap *) arg)->object.this$));
          }
          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StemmerOverrideFilter$StemmerOverrideMap::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StemmerOverrideFilter$StemmerOverrideMap_init_(t_StemmerOverrideFilter$StemmerOverrideMap *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean a1;
            StemmerOverrideFilter$StemmerOverrideMap object((jobject) NULL);

            if (!parseArgs(args, "KZ", ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1))
            {
              INT_CALL(object = StemmerOverrideFilter$StemmerOverrideMap(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_get(t_StemmerOverrideFilter$StemmerOverrideMap *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::util::fst::FST$Arc a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::util::fst::FST$BytesReader a3((jobject) NULL);
            PyTypeObject **p3;
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "[CIKK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a3, &p3, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.get(a0, a1, a2, a3));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "get", args);
            return NULL;
          }

          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_getBytesReader(t_StemmerOverrideFilter$StemmerOverrideMap *self)
          {
            ::org::apache::lucene::util::fst::FST$BytesReader result((jobject) NULL);
            OBJ_CALL(result = self->object.getBytesReader());
            return ::org::apache::lucene::util::fst::t_FST$BytesReader::wrap_Object(result);
          }

          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_get__bytesReader(t_StemmerOverrideFilter$StemmerOverrideMap *self, void *data)
          {
            ::org::apache::lucene::util::fst::FST$BytesReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getBytesReader());
            return ::org::apache::lucene::util::fst::t_FST$BytesReader::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/collation/CollationAttributeFactory.h"
#include "java/text/Collator.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/collation/tokenattributes/CollatedTermAttributeImpl.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {

        ::java::lang::Class *CollationAttributeFactory::class$ = NULL;
        jmethodID *CollationAttributeFactory::mids$ = NULL;
        bool CollationAttributeFactory::live$ = false;

        jclass CollationAttributeFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/collation/CollationAttributeFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c5e10a9c] = env->getMethodID(cls, "<init>", "(Ljava/text/Collator;)V");
            mids$[mid_init$_f8cad218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/text/Collator;)V");
            mids$[mid_createInstance_4f834723] = env->getMethodID(cls, "createInstance", "()Lorg/apache/lucene/collation/tokenattributes/CollatedTermAttributeImpl;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CollationAttributeFactory::CollationAttributeFactory(const ::java::text::Collator & a0) : ::org::apache::lucene::util::AttributeFactory$StaticImplementationAttributeFactory(env->newObject(initializeClass, &mids$, mid_init$_c5e10a9c, a0.this$)) {}

        CollationAttributeFactory::CollationAttributeFactory(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::text::Collator & a1) : ::org::apache::lucene::util::AttributeFactory$StaticImplementationAttributeFactory(env->newObject(initializeClass, &mids$, mid_init$_f8cad218, a0.this$, a1.this$)) {}

        ::org::apache::lucene::collation::tokenattributes::CollatedTermAttributeImpl CollationAttributeFactory::createInstance() const
        {
          return ::org::apache::lucene::collation::tokenattributes::CollatedTermAttributeImpl(env->callObjectMethod(this$, mids$[mid_createInstance_4f834723]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {
        static PyObject *t_CollationAttributeFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollationAttributeFactory_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollationAttributeFactory_of_(t_CollationAttributeFactory *self, PyObject *args);
        static int t_CollationAttributeFactory_init_(t_CollationAttributeFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CollationAttributeFactory_createInstance(t_CollationAttributeFactory *self);
        static PyObject *t_CollationAttributeFactory_get__parameters_(t_CollationAttributeFactory *self, void *data);
        static PyGetSetDef t_CollationAttributeFactory__fields_[] = {
          DECLARE_GET_FIELD(t_CollationAttributeFactory, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CollationAttributeFactory__methods_[] = {
          DECLARE_METHOD(t_CollationAttributeFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollationAttributeFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollationAttributeFactory, of_, METH_VARARGS),
          DECLARE_METHOD(t_CollationAttributeFactory, createInstance, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CollationAttributeFactory, t_CollationAttributeFactory, ::org::apache::lucene::util::AttributeFactory$StaticImplementationAttributeFactory, CollationAttributeFactory, t_CollationAttributeFactory_init_, 0, 0, t_CollationAttributeFactory__fields_, 0, 0);
        PyObject *t_CollationAttributeFactory::wrap_Object(const CollationAttributeFactory& object, PyTypeObject *p0)
        {
          PyObject *obj = t_CollationAttributeFactory::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_CollationAttributeFactory *self = (t_CollationAttributeFactory *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_CollationAttributeFactory::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_CollationAttributeFactory::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_CollationAttributeFactory *self = (t_CollationAttributeFactory *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_CollationAttributeFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(CollationAttributeFactory), module, "CollationAttributeFactory", 0);
        }

        void t_CollationAttributeFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CollationAttributeFactory).tp_dict, "class_", make_descriptor(CollationAttributeFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CollationAttributeFactory).tp_dict, "wrapfn_", make_descriptor(t_CollationAttributeFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CollationAttributeFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollationAttributeFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollationAttributeFactory::initializeClass, 1)))
            return NULL;
          return t_CollationAttributeFactory::wrap_Object(CollationAttributeFactory(((t_CollationAttributeFactory *) arg)->object.this$));
        }
        static PyObject *t_CollationAttributeFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollationAttributeFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CollationAttributeFactory_of_(t_CollationAttributeFactory *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_CollationAttributeFactory_init_(t_CollationAttributeFactory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::text::Collator a0((jobject) NULL);
              CollationAttributeFactory object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::text::Collator::initializeClass, &a0))
              {
                INT_CALL(object = CollationAttributeFactory(a0));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::collation::tokenattributes::PY_TYPE(CollatedTermAttributeImpl);
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
              ::java::text::Collator a1((jobject) NULL);
              CollationAttributeFactory object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::text::Collator::initializeClass, &a0, &a1))
              {
                INT_CALL(object = CollationAttributeFactory(a0, a1));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::collation::tokenattributes::PY_TYPE(CollatedTermAttributeImpl);
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CollationAttributeFactory_createInstance(t_CollationAttributeFactory *self)
        {
          ::org::apache::lucene::collation::tokenattributes::CollatedTermAttributeImpl result((jobject) NULL);
          OBJ_CALL(result = self->object.createInstance());
          return ::org::apache::lucene::collation::tokenattributes::t_CollatedTermAttributeImpl::wrap_Object(result);
        }
        static PyObject *t_CollationAttributeFactory_get__parameters_(t_CollationAttributeFactory *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/BytesRefHash.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *SynonymMap::class$ = NULL;
          jmethodID *SynonymMap::mids$ = NULL;
          jfieldID *SynonymMap::fids$ = NULL;
          bool SynonymMap::live$ = false;
          jchar SynonymMap::WORD_SEPARATOR = (jchar) 0;

          jclass SynonymMap::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/SynonymMap");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4abf6d88] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;Lorg/apache/lucene/util/BytesRefHash;I)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_fst] = env->getFieldID(cls, "fst", "Lorg/apache/lucene/util/fst/FST;");
              fids$[fid_maxHorizontalContext] = env->getFieldID(cls, "maxHorizontalContext", "I");
              fids$[fid_words] = env->getFieldID(cls, "words", "Lorg/apache/lucene/util/BytesRefHash;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              WORD_SEPARATOR = env->getStaticCharField(cls, "WORD_SEPARATOR");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SynonymMap::SynonymMap(const ::org::apache::lucene::util::fst::FST & a0, const ::org::apache::lucene::util::BytesRefHash & a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4abf6d88, a0.this$, a1.this$, a2)) {}

          ::org::apache::lucene::util::fst::FST SynonymMap::_get_fst() const
          {
            return ::org::apache::lucene::util::fst::FST(env->getObjectField(this$, fids$[fid_fst]));
          }

          jint SynonymMap::_get_maxHorizontalContext() const
          {
            return env->getIntField(this$, fids$[fid_maxHorizontalContext]);
          }

          ::org::apache::lucene::util::BytesRefHash SynonymMap::_get_words() const
          {
            return ::org::apache::lucene::util::BytesRefHash(env->getObjectField(this$, fids$[fid_words]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap$Parser.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap$Builder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_SynonymMap_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SynonymMap_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SynonymMap_init_(t_SynonymMap *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SynonymMap_get__fst(t_SynonymMap *self, void *data);
          static PyObject *t_SynonymMap_get__maxHorizontalContext(t_SynonymMap *self, void *data);
          static PyObject *t_SynonymMap_get__words(t_SynonymMap *self, void *data);

          static PyGetSetDef t_SynonymMap__fields_[] = {
            DECLARE_GET_FIELD(t_SynonymMap, fst),
            DECLARE_GET_FIELD(t_SynonymMap, maxHorizontalContext),
            DECLARE_GET_FIELD(t_SynonymMap, words),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SynonymMap__methods_[] = {
            DECLARE_METHOD(t_SynonymMap, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymMap, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SynonymMap, t_SynonymMap, ::java::lang::Object, SynonymMap, t_SynonymMap_init_, 0, 0, t_SynonymMap__fields_, 0, 0);

          void t_SynonymMap::install(PyObject *module)
          {
            installType(&PY_TYPE(SynonymMap), module, "SynonymMap", 0);
            PyDict_SetItemString(PY_TYPE(SynonymMap).tp_dict, "Parser", make_descriptor(&PY_TYPE(SynonymMap$Parser)));
            PyDict_SetItemString(PY_TYPE(SynonymMap).tp_dict, "Builder", make_descriptor(&PY_TYPE(SynonymMap$Builder)));
          }

          void t_SynonymMap::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SynonymMap).tp_dict, "class_", make_descriptor(SynonymMap::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SynonymMap).tp_dict, "wrapfn_", make_descriptor(t_SynonymMap::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SynonymMap).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SynonymMap::initializeClass);
            PyDict_SetItemString(PY_TYPE(SynonymMap).tp_dict, "WORD_SEPARATOR", make_descriptor(SynonymMap::WORD_SEPARATOR));
          }

          static PyObject *t_SynonymMap_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SynonymMap::initializeClass, 1)))
              return NULL;
            return t_SynonymMap::wrap_Object(SynonymMap(((t_SynonymMap *) arg)->object.this$));
          }
          static PyObject *t_SynonymMap_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SynonymMap::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SynonymMap_init_(t_SynonymMap *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::BytesRefHash a1((jobject) NULL);
            jint a2;
            SynonymMap object((jobject) NULL);

            if (!parseArgs(args, "KkI", ::org::apache::lucene::util::fst::FST::initializeClass, ::org::apache::lucene::util::BytesRefHash::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1, &a2))
            {
              INT_CALL(object = SynonymMap(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SynonymMap_get__fst(t_SynonymMap *self, void *data)
          {
            ::org::apache::lucene::util::fst::FST value((jobject) NULL);
            OBJ_CALL(value = self->object._get_fst());
            return ::org::apache::lucene::util::fst::t_FST::wrap_Object(value);
          }

          static PyObject *t_SynonymMap_get__maxHorizontalContext(t_SynonymMap *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_maxHorizontalContext());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_SynonymMap_get__words(t_SynonymMap *self, void *data)
          {
            ::org::apache::lucene::util::BytesRefHash value((jobject) NULL);
            OBJ_CALL(value = self->object._get_words());
            return ::org::apache::lucene::util::t_BytesRefHash::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/MergeInfo.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *MergeInfo::class$ = NULL;
        jmethodID *MergeInfo::mids$ = NULL;
        jfieldID *MergeInfo::fids$ = NULL;
        bool MergeInfo::live$ = false;

        jclass MergeInfo::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/MergeInfo");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_1629c044] = env->getMethodID(cls, "<init>", "(IJZI)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_estimatedMergeBytes] = env->getFieldID(cls, "estimatedMergeBytes", "J");
            fids$[fid_isExternal] = env->getFieldID(cls, "isExternal", "Z");
            fids$[fid_mergeMaxNumSegments] = env->getFieldID(cls, "mergeMaxNumSegments", "I");
            fids$[fid_totalDocCount] = env->getFieldID(cls, "totalDocCount", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergeInfo::MergeInfo(jint a0, jlong a1, jboolean a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1629c044, a0, a1, a2, a3)) {}

        jboolean MergeInfo::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint MergeInfo::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String MergeInfo::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jlong MergeInfo::_get_estimatedMergeBytes() const
        {
          return env->getLongField(this$, fids$[fid_estimatedMergeBytes]);
        }

        jboolean MergeInfo::_get_isExternal() const
        {
          return env->getBooleanField(this$, fids$[fid_isExternal]);
        }

        jint MergeInfo::_get_mergeMaxNumSegments() const
        {
          return env->getIntField(this$, fids$[fid_mergeMaxNumSegments]);
        }

        jint MergeInfo::_get_totalDocCount() const
        {
          return env->getIntField(this$, fids$[fid_totalDocCount]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_MergeInfo_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeInfo_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergeInfo_init_(t_MergeInfo *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergeInfo_equals(t_MergeInfo *self, PyObject *args);
        static PyObject *t_MergeInfo_hashCode(t_MergeInfo *self, PyObject *args);
        static PyObject *t_MergeInfo_toString(t_MergeInfo *self, PyObject *args);
        static PyObject *t_MergeInfo_get__estimatedMergeBytes(t_MergeInfo *self, void *data);
        static PyObject *t_MergeInfo_get__isExternal(t_MergeInfo *self, void *data);
        static PyObject *t_MergeInfo_get__mergeMaxNumSegments(t_MergeInfo *self, void *data);
        static PyObject *t_MergeInfo_get__totalDocCount(t_MergeInfo *self, void *data);

        static PyGetSetDef t_MergeInfo__fields_[] = {
          DECLARE_GET_FIELD(t_MergeInfo, estimatedMergeBytes),
          DECLARE_GET_FIELD(t_MergeInfo, isExternal),
          DECLARE_GET_FIELD(t_MergeInfo, mergeMaxNumSegments),
          DECLARE_GET_FIELD(t_MergeInfo, totalDocCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergeInfo__methods_[] = {
          DECLARE_METHOD(t_MergeInfo, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeInfo, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeInfo, equals, METH_VARARGS),
          DECLARE_METHOD(t_MergeInfo, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_MergeInfo, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergeInfo, t_MergeInfo, ::java::lang::Object, MergeInfo, t_MergeInfo_init_, 0, 0, t_MergeInfo__fields_, 0, 0);

        void t_MergeInfo::install(PyObject *module)
        {
          installType(&PY_TYPE(MergeInfo), module, "MergeInfo", 0);
        }

        void t_MergeInfo::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergeInfo).tp_dict, "class_", make_descriptor(MergeInfo::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergeInfo).tp_dict, "wrapfn_", make_descriptor(t_MergeInfo::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergeInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergeInfo_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergeInfo::initializeClass, 1)))
            return NULL;
          return t_MergeInfo::wrap_Object(MergeInfo(((t_MergeInfo *) arg)->object.this$));
        }
        static PyObject *t_MergeInfo_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergeInfo::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergeInfo_init_(t_MergeInfo *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          jlong a1;
          jboolean a2;
          jint a3;
          MergeInfo object((jobject) NULL);

          if (!parseArgs(args, "IJZI", &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = MergeInfo(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MergeInfo_equals(t_MergeInfo *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MergeInfo), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_MergeInfo_hashCode(t_MergeInfo *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MergeInfo), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_MergeInfo_toString(t_MergeInfo *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MergeInfo), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MergeInfo_get__estimatedMergeBytes(t_MergeInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_estimatedMergeBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_MergeInfo_get__isExternal(t_MergeInfo *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_isExternal());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_MergeInfo_get__mergeMaxNumSegments(t_MergeInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_mergeMaxNumSegments());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_MergeInfo_get__totalDocCount(t_MergeInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_totalDocCount());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/SuggestWordFrequencyComparator.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *SuggestWordFrequencyComparator::class$ = NULL;
          jmethodID *SuggestWordFrequencyComparator::mids$ = NULL;
          bool SuggestWordFrequencyComparator::live$ = false;

          jclass SuggestWordFrequencyComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/SuggestWordFrequencyComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compare_2e903bf1] = env->getMethodID(cls, "compare", "(Lorg/apache/lucene/search/spell/SuggestWord;Lorg/apache/lucene/search/spell/SuggestWord;)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SuggestWordFrequencyComparator::SuggestWordFrequencyComparator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint SuggestWordFrequencyComparator::compare(const ::org::apache::lucene::search::spell::SuggestWord & a0, const ::org::apache::lucene::search::spell::SuggestWord & a1) const
          {
            return env->callIntMethod(this$, mids$[mid_compare_2e903bf1], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_SuggestWordFrequencyComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestWordFrequencyComparator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SuggestWordFrequencyComparator_init_(t_SuggestWordFrequencyComparator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SuggestWordFrequencyComparator_compare(t_SuggestWordFrequencyComparator *self, PyObject *args);

          static PyMethodDef t_SuggestWordFrequencyComparator__methods_[] = {
            DECLARE_METHOD(t_SuggestWordFrequencyComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWordFrequencyComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWordFrequencyComparator, compare, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SuggestWordFrequencyComparator, t_SuggestWordFrequencyComparator, ::java::lang::Object, SuggestWordFrequencyComparator, t_SuggestWordFrequencyComparator_init_, 0, 0, 0, 0, 0);

          void t_SuggestWordFrequencyComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(SuggestWordFrequencyComparator), module, "SuggestWordFrequencyComparator", 0);
          }

          void t_SuggestWordFrequencyComparator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SuggestWordFrequencyComparator).tp_dict, "class_", make_descriptor(SuggestWordFrequencyComparator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SuggestWordFrequencyComparator).tp_dict, "wrapfn_", make_descriptor(t_SuggestWordFrequencyComparator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SuggestWordFrequencyComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SuggestWordFrequencyComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SuggestWordFrequencyComparator::initializeClass, 1)))
              return NULL;
            return t_SuggestWordFrequencyComparator::wrap_Object(SuggestWordFrequencyComparator(((t_SuggestWordFrequencyComparator *) arg)->object.this$));
          }
          static PyObject *t_SuggestWordFrequencyComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SuggestWordFrequencyComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SuggestWordFrequencyComparator_init_(t_SuggestWordFrequencyComparator *self, PyObject *args, PyObject *kwds)
          {
            SuggestWordFrequencyComparator object((jobject) NULL);

            INT_CALL(object = SuggestWordFrequencyComparator());
            self->object = object;

            return 0;
          }

          static PyObject *t_SuggestWordFrequencyComparator_compare(t_SuggestWordFrequencyComparator *self, PyObject *args)
          {
            ::org::apache::lucene::search::spell::SuggestWord a0((jobject) NULL);
            ::org::apache::lucene::search::spell::SuggestWord a1((jobject) NULL);
            jint result;

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::spell::SuggestWord::initializeClass, ::org::apache::lucene::search::spell::SuggestWord::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.compare(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compare", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/GroupQueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *GroupQueryNodeProcessor::class$ = NULL;
              jmethodID *GroupQueryNodeProcessor::mids$ = NULL;
              bool GroupQueryNodeProcessor::live$ = false;

              jclass GroupQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/GroupQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_getQueryConfigHandler_3636d8c3] = env->getMethodID(cls, "getQueryConfigHandler", "()Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setQueryConfigHandler_0b1f7132] = env->getMethodID(cls, "setQueryConfigHandler", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              GroupQueryNodeProcessor::GroupQueryNodeProcessor() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler GroupQueryNodeProcessor::getQueryConfigHandler() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->callObjectMethod(this$, mids$[mid_getQueryConfigHandler_3636d8c3]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode GroupQueryNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }

              void GroupQueryNodeProcessor::setQueryConfigHandler(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setQueryConfigHandler_0b1f7132], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_GroupQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_GroupQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_GroupQueryNodeProcessor_init_(t_GroupQueryNodeProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_GroupQueryNodeProcessor_getQueryConfigHandler(t_GroupQueryNodeProcessor *self);
              static PyObject *t_GroupQueryNodeProcessor_process(t_GroupQueryNodeProcessor *self, PyObject *arg);
              static PyObject *t_GroupQueryNodeProcessor_setQueryConfigHandler(t_GroupQueryNodeProcessor *self, PyObject *arg);
              static PyObject *t_GroupQueryNodeProcessor_get__queryConfigHandler(t_GroupQueryNodeProcessor *self, void *data);
              static int t_GroupQueryNodeProcessor_set__queryConfigHandler(t_GroupQueryNodeProcessor *self, PyObject *arg, void *data);
              static PyGetSetDef t_GroupQueryNodeProcessor__fields_[] = {
                DECLARE_GETSET_FIELD(t_GroupQueryNodeProcessor, queryConfigHandler),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_GroupQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_GroupQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_GroupQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_GroupQueryNodeProcessor, getQueryConfigHandler, METH_NOARGS),
                DECLARE_METHOD(t_GroupQueryNodeProcessor, process, METH_O),
                DECLARE_METHOD(t_GroupQueryNodeProcessor, setQueryConfigHandler, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(GroupQueryNodeProcessor, t_GroupQueryNodeProcessor, ::java::lang::Object, GroupQueryNodeProcessor, t_GroupQueryNodeProcessor_init_, 0, 0, t_GroupQueryNodeProcessor__fields_, 0, 0);

              void t_GroupQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(GroupQueryNodeProcessor), module, "GroupQueryNodeProcessor", 0);
              }

              void t_GroupQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(GroupQueryNodeProcessor).tp_dict, "class_", make_descriptor(GroupQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(GroupQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_GroupQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(GroupQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_GroupQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, GroupQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_GroupQueryNodeProcessor::wrap_Object(GroupQueryNodeProcessor(((t_GroupQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_GroupQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, GroupQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_GroupQueryNodeProcessor_init_(t_GroupQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                GroupQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = GroupQueryNodeProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_GroupQueryNodeProcessor_getQueryConfigHandler(t_GroupQueryNodeProcessor *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler result((jobject) NULL);
                OBJ_CALL(result = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(result);
              }

              static PyObject *t_GroupQueryNodeProcessor_process(t_GroupQueryNodeProcessor *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "process", arg);
                return NULL;
              }

              static PyObject *t_GroupQueryNodeProcessor_setQueryConfigHandler(t_GroupQueryNodeProcessor *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setQueryConfigHandler(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setQueryConfigHandler", arg);
                return NULL;
              }

              static PyObject *t_GroupQueryNodeProcessor_get__queryConfigHandler(t_GroupQueryNodeProcessor *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                OBJ_CALL(value = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(value);
              }
              static int t_GroupQueryNodeProcessor_set__queryConfigHandler(t_GroupQueryNodeProcessor *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &value))
                  {
                    INT_CALL(self->object.setQueryConfigHandler(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "queryConfigHandler", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/WFSTCompletionLookup.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/util/Set.h"
#include "java/util/List.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *WFSTCompletionLookup::class$ = NULL;
            jmethodID *WFSTCompletionLookup::mids$ = NULL;
            bool WFSTCompletionLookup::live$ = false;

            jclass WFSTCompletionLookup::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/WFSTCompletionLookup");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
                mids$[mid_build_1754a234] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_get_a739ccff] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getCount_54c6a17a] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_f5d6a55d] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_store_27875f5b] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            WFSTCompletionLookup::WFSTCompletionLookup() : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            WFSTCompletionLookup::WFSTCompletionLookup(jboolean a0) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

            void WFSTCompletionLookup::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_1754a234], a0.this$);
            }

            ::java::lang::Object WFSTCompletionLookup::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a739ccff], a0.this$));
            }

            jlong WFSTCompletionLookup::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_54c6a17a]);
            }

            jboolean WFSTCompletionLookup::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_f5d6a55d], a0.this$);
            }

            ::java::util::List WFSTCompletionLookup::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
            }

            jlong WFSTCompletionLookup::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
            }

            jboolean WFSTCompletionLookup::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_27875f5b], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_WFSTCompletionLookup_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_WFSTCompletionLookup_instance_(PyTypeObject *type, PyObject *arg);
            static int t_WFSTCompletionLookup_init_(t_WFSTCompletionLookup *self, PyObject *args, PyObject *kwds);
            static PyObject *t_WFSTCompletionLookup_build(t_WFSTCompletionLookup *self, PyObject *args);
            static PyObject *t_WFSTCompletionLookup_get(t_WFSTCompletionLookup *self, PyObject *arg);
            static PyObject *t_WFSTCompletionLookup_getCount(t_WFSTCompletionLookup *self, PyObject *args);
            static PyObject *t_WFSTCompletionLookup_load(t_WFSTCompletionLookup *self, PyObject *args);
            static PyObject *t_WFSTCompletionLookup_lookup(t_WFSTCompletionLookup *self, PyObject *args);
            static PyObject *t_WFSTCompletionLookup_ramBytesUsed(t_WFSTCompletionLookup *self, PyObject *args);
            static PyObject *t_WFSTCompletionLookup_store(t_WFSTCompletionLookup *self, PyObject *args);
            static PyObject *t_WFSTCompletionLookup_get__count(t_WFSTCompletionLookup *self, void *data);
            static PyGetSetDef t_WFSTCompletionLookup__fields_[] = {
              DECLARE_GET_FIELD(t_WFSTCompletionLookup, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_WFSTCompletionLookup__methods_[] = {
              DECLARE_METHOD(t_WFSTCompletionLookup, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_WFSTCompletionLookup, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_WFSTCompletionLookup, build, METH_VARARGS),
              DECLARE_METHOD(t_WFSTCompletionLookup, get, METH_O),
              DECLARE_METHOD(t_WFSTCompletionLookup, getCount, METH_VARARGS),
              DECLARE_METHOD(t_WFSTCompletionLookup, load, METH_VARARGS),
              DECLARE_METHOD(t_WFSTCompletionLookup, lookup, METH_VARARGS),
              DECLARE_METHOD(t_WFSTCompletionLookup, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_WFSTCompletionLookup, store, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(WFSTCompletionLookup, t_WFSTCompletionLookup, ::org::apache::lucene::search::suggest::Lookup, WFSTCompletionLookup, t_WFSTCompletionLookup_init_, 0, 0, t_WFSTCompletionLookup__fields_, 0, 0);

            void t_WFSTCompletionLookup::install(PyObject *module)
            {
              installType(&PY_TYPE(WFSTCompletionLookup), module, "WFSTCompletionLookup", 0);
            }

            void t_WFSTCompletionLookup::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(WFSTCompletionLookup).tp_dict, "class_", make_descriptor(WFSTCompletionLookup::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(WFSTCompletionLookup).tp_dict, "wrapfn_", make_descriptor(t_WFSTCompletionLookup::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(WFSTCompletionLookup).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_WFSTCompletionLookup_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, WFSTCompletionLookup::initializeClass, 1)))
                return NULL;
              return t_WFSTCompletionLookup::wrap_Object(WFSTCompletionLookup(((t_WFSTCompletionLookup *) arg)->object.this$));
            }
            static PyObject *t_WFSTCompletionLookup_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, WFSTCompletionLookup::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_WFSTCompletionLookup_init_(t_WFSTCompletionLookup *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  WFSTCompletionLookup object((jobject) NULL);

                  INT_CALL(object = WFSTCompletionLookup());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  jboolean a0;
                  WFSTCompletionLookup object((jobject) NULL);

                  if (!parseArgs(args, "Z", &a0))
                  {
                    INT_CALL(object = WFSTCompletionLookup(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_WFSTCompletionLookup_build(t_WFSTCompletionLookup *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.build(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(WFSTCompletionLookup), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_WFSTCompletionLookup_get(t_WFSTCompletionLookup *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_WFSTCompletionLookup_getCount(t_WFSTCompletionLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(WFSTCompletionLookup), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_WFSTCompletionLookup_load(t_WFSTCompletionLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(WFSTCompletionLookup), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_WFSTCompletionLookup_lookup(t_WFSTCompletionLookup *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              jint a3;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
              }

              return callSuper(&PY_TYPE(WFSTCompletionLookup), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_WFSTCompletionLookup_ramBytesUsed(t_WFSTCompletionLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(WFSTCompletionLookup), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_WFSTCompletionLookup_store(t_WFSTCompletionLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(WFSTCompletionLookup), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_WFSTCompletionLookup_get__count(t_WFSTCompletionLookup *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/SimpleBindings.h"
#include "org/apache/lucene/expressions/Expression.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/SortField.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {

        ::java::lang::Class *SimpleBindings::class$ = NULL;
        jmethodID *SimpleBindings::mids$ = NULL;
        bool SimpleBindings::live$ = false;

        jclass SimpleBindings::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/SimpleBindings");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_3578f7bf] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/SortField;)V");
            mids$[mid_add_484638a4] = env->getMethodID(cls, "add", "(Ljava/lang/String;Lorg/apache/lucene/queries/function/ValueSource;)V");
            mids$[mid_add_bca05986] = env->getMethodID(cls, "add", "(Ljava/lang/String;Lorg/apache/lucene/expressions/Expression;)V");
            mids$[mid_getValueSource_3afe260d] = env->getMethodID(cls, "getValueSource", "(Ljava/lang/String;)Lorg/apache/lucene/queries/function/ValueSource;");
            mids$[mid_validate_54c6a166] = env->getMethodID(cls, "validate", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SimpleBindings::SimpleBindings() : ::org::apache::lucene::expressions::Bindings(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void SimpleBindings::add(const ::org::apache::lucene::search::SortField & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_3578f7bf], a0.this$);
        }

        void SimpleBindings::add(const ::java::lang::String & a0, const ::org::apache::lucene::queries::function::ValueSource & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_484638a4], a0.this$, a1.this$);
        }

        void SimpleBindings::add(const ::java::lang::String & a0, const ::org::apache::lucene::expressions::Expression & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_bca05986], a0.this$, a1.this$);
        }

        ::org::apache::lucene::queries::function::ValueSource SimpleBindings::getValueSource(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::queries::function::ValueSource(env->callObjectMethod(this$, mids$[mid_getValueSource_3afe260d], a0.this$));
        }

        void SimpleBindings::validate() const
        {
          env->callVoidMethod(this$, mids$[mid_validate_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        static PyObject *t_SimpleBindings_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SimpleBindings_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SimpleBindings_init_(t_SimpleBindings *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SimpleBindings_add(t_SimpleBindings *self, PyObject *args);
        static PyObject *t_SimpleBindings_getValueSource(t_SimpleBindings *self, PyObject *args);
        static PyObject *t_SimpleBindings_validate(t_SimpleBindings *self);

        static PyMethodDef t_SimpleBindings__methods_[] = {
          DECLARE_METHOD(t_SimpleBindings, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleBindings, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleBindings, add, METH_VARARGS),
          DECLARE_METHOD(t_SimpleBindings, getValueSource, METH_VARARGS),
          DECLARE_METHOD(t_SimpleBindings, validate, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SimpleBindings, t_SimpleBindings, ::org::apache::lucene::expressions::Bindings, SimpleBindings, t_SimpleBindings_init_, 0, 0, 0, 0, 0);

        void t_SimpleBindings::install(PyObject *module)
        {
          installType(&PY_TYPE(SimpleBindings), module, "SimpleBindings", 0);
        }

        void t_SimpleBindings::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SimpleBindings).tp_dict, "class_", make_descriptor(SimpleBindings::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SimpleBindings).tp_dict, "wrapfn_", make_descriptor(t_SimpleBindings::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SimpleBindings).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SimpleBindings_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SimpleBindings::initializeClass, 1)))
            return NULL;
          return t_SimpleBindings::wrap_Object(SimpleBindings(((t_SimpleBindings *) arg)->object.this$));
        }
        static PyObject *t_SimpleBindings_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SimpleBindings::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SimpleBindings_init_(t_SimpleBindings *self, PyObject *args, PyObject *kwds)
        {
          SimpleBindings object((jobject) NULL);

          INT_CALL(object = SimpleBindings());
          self->object = object;

          return 0;
        }

        static PyObject *t_SimpleBindings_add(t_SimpleBindings *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::SortField a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::SortField::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::expressions::Expression a1((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::expressions::Expression::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_SimpleBindings_getValueSource(t_SimpleBindings *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::queries::function::ValueSource result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getValueSource(a0));
            return ::org::apache::lucene::queries::function::t_ValueSource::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SimpleBindings), (PyObject *) self, "getValueSource", args, 2);
        }

        static PyObject *t_SimpleBindings_validate(t_SimpleBindings *self)
        {
          OBJ_CALL(self->object.validate());
          Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder$ScoreComparator.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *ScoreOrderFragmentsBuilder$ScoreComparator::class$ = NULL;
          jmethodID *ScoreOrderFragmentsBuilder$ScoreComparator::mids$ = NULL;
          bool ScoreOrderFragmentsBuilder$ScoreComparator::live$ = false;

          jclass ScoreOrderFragmentsBuilder$ScoreComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder$ScoreComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compare_79a08e77] = env->getMethodID(cls, "compare", "(Lorg/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo;Lorg/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo;)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScoreOrderFragmentsBuilder$ScoreComparator::ScoreOrderFragmentsBuilder$ScoreComparator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint ScoreOrderFragmentsBuilder$ScoreComparator::compare(const ::org::apache::lucene::search::vectorhighlight::FieldFragList$WeightedFragInfo & a0, const ::org::apache::lucene::search::vectorhighlight::FieldFragList$WeightedFragInfo & a1) const
          {
            return env->callIntMethod(this$, mids$[mid_compare_79a08e77], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_ScoreOrderFragmentsBuilder$ScoreComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScoreOrderFragmentsBuilder$ScoreComparator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ScoreOrderFragmentsBuilder$ScoreComparator_init_(t_ScoreOrderFragmentsBuilder$ScoreComparator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ScoreOrderFragmentsBuilder$ScoreComparator_compare(t_ScoreOrderFragmentsBuilder$ScoreComparator *self, PyObject *args);

          static PyMethodDef t_ScoreOrderFragmentsBuilder$ScoreComparator__methods_[] = {
            DECLARE_METHOD(t_ScoreOrderFragmentsBuilder$ScoreComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScoreOrderFragmentsBuilder$ScoreComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScoreOrderFragmentsBuilder$ScoreComparator, compare, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ScoreOrderFragmentsBuilder$ScoreComparator, t_ScoreOrderFragmentsBuilder$ScoreComparator, ::java::lang::Object, ScoreOrderFragmentsBuilder$ScoreComparator, t_ScoreOrderFragmentsBuilder$ScoreComparator_init_, 0, 0, 0, 0, 0);

          void t_ScoreOrderFragmentsBuilder$ScoreComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(ScoreOrderFragmentsBuilder$ScoreComparator), module, "ScoreOrderFragmentsBuilder$ScoreComparator", 0);
          }

          void t_ScoreOrderFragmentsBuilder$ScoreComparator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ScoreOrderFragmentsBuilder$ScoreComparator).tp_dict, "class_", make_descriptor(ScoreOrderFragmentsBuilder$ScoreComparator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ScoreOrderFragmentsBuilder$ScoreComparator).tp_dict, "wrapfn_", make_descriptor(t_ScoreOrderFragmentsBuilder$ScoreComparator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ScoreOrderFragmentsBuilder$ScoreComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ScoreOrderFragmentsBuilder$ScoreComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScoreOrderFragmentsBuilder$ScoreComparator::initializeClass, 1)))
              return NULL;
            return t_ScoreOrderFragmentsBuilder$ScoreComparator::wrap_Object(ScoreOrderFragmentsBuilder$ScoreComparator(((t_ScoreOrderFragmentsBuilder$ScoreComparator *) arg)->object.this$));
          }
          static PyObject *t_ScoreOrderFragmentsBuilder$ScoreComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScoreOrderFragmentsBuilder$ScoreComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ScoreOrderFragmentsBuilder$ScoreComparator_init_(t_ScoreOrderFragmentsBuilder$ScoreComparator *self, PyObject *args, PyObject *kwds)
          {
            ScoreOrderFragmentsBuilder$ScoreComparator object((jobject) NULL);

            INT_CALL(object = ScoreOrderFragmentsBuilder$ScoreComparator());
            self->object = object;

            return 0;
          }

          static PyObject *t_ScoreOrderFragmentsBuilder$ScoreComparator_compare(t_ScoreOrderFragmentsBuilder$ScoreComparator *self, PyObject *args)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldFragList$WeightedFragInfo a0((jobject) NULL);
            ::org::apache::lucene::search::vectorhighlight::FieldFragList$WeightedFragInfo a1((jobject) NULL);
            jint result;

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::vectorhighlight::FieldFragList$WeightedFragInfo::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList$WeightedFragInfo::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.compare(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compare", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/IntFieldSource.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/search/FieldCache$IntParser.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *IntFieldSource::class$ = NULL;
            jmethodID *IntFieldSource::mids$ = NULL;
            bool IntFieldSource::live$ = false;

            jclass IntFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/IntFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_6da5ba0c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$IntParser;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            IntFieldSource::IntFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            IntFieldSource::IntFieldSource(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$IntParser & a1) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_6da5ba0c, a0.this$, a1.this$)) {}

            ::java::lang::String IntFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean IntFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues IntFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint IntFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_IntFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_IntFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_IntFieldSource_init_(t_IntFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_IntFieldSource_description(t_IntFieldSource *self, PyObject *args);
            static PyObject *t_IntFieldSource_equals(t_IntFieldSource *self, PyObject *args);
            static PyObject *t_IntFieldSource_getValues(t_IntFieldSource *self, PyObject *args);
            static PyObject *t_IntFieldSource_hashCode(t_IntFieldSource *self, PyObject *args);

            static PyMethodDef t_IntFieldSource__methods_[] = {
              DECLARE_METHOD(t_IntFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IntFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IntFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_IntFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_IntFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_IntFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(IntFieldSource, t_IntFieldSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, IntFieldSource, t_IntFieldSource_init_, 0, 0, 0, 0, 0);

            void t_IntFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(IntFieldSource), module, "IntFieldSource", 0);
            }

            void t_IntFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(IntFieldSource).tp_dict, "class_", make_descriptor(IntFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(IntFieldSource).tp_dict, "wrapfn_", make_descriptor(t_IntFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(IntFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_IntFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, IntFieldSource::initializeClass, 1)))
                return NULL;
              return t_IntFieldSource::wrap_Object(IntFieldSource(((t_IntFieldSource *) arg)->object.this$));
            }
            static PyObject *t_IntFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, IntFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_IntFieldSource_init_(t_IntFieldSource *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  IntFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = IntFieldSource(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::search::FieldCache$IntParser a1((jobject) NULL);
                  IntFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "sk", ::org::apache::lucene::search::FieldCache$IntParser::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = IntFieldSource(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_IntFieldSource_description(t_IntFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(IntFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_IntFieldSource_equals(t_IntFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(IntFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_IntFieldSource_getValues(t_IntFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(IntFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_IntFieldSource_hashCode(t_IntFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(IntFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *WordDelimiterFilterFactory::class$ = NULL;
          jmethodID *WordDelimiterFilterFactory::mids$ = NULL;
          bool WordDelimiterFilterFactory::live$ = false;
          ::java::lang::String *WordDelimiterFilterFactory::PROTECTED_TOKENS = NULL;
          ::java::lang::String *WordDelimiterFilterFactory::TYPES = NULL;

          jclass WordDelimiterFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_2969f76d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              PROTECTED_TOKENS = new ::java::lang::String(env->getStaticObjectField(cls, "PROTECTED_TOKENS", "Ljava/lang/String;"));
              TYPES = new ::java::lang::String(env->getStaticObjectField(cls, "TYPES", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WordDelimiterFilterFactory::WordDelimiterFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter WordDelimiterFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_2969f76d], a0.this$));
          }

          void WordDelimiterFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_WordDelimiterFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordDelimiterFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WordDelimiterFilterFactory_init_(t_WordDelimiterFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WordDelimiterFilterFactory_create(t_WordDelimiterFilterFactory *self, PyObject *args);
          static PyObject *t_WordDelimiterFilterFactory_inform(t_WordDelimiterFilterFactory *self, PyObject *arg);

          static PyMethodDef t_WordDelimiterFilterFactory__methods_[] = {
            DECLARE_METHOD(t_WordDelimiterFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_WordDelimiterFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WordDelimiterFilterFactory, t_WordDelimiterFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, WordDelimiterFilterFactory, t_WordDelimiterFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_WordDelimiterFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(WordDelimiterFilterFactory), module, "WordDelimiterFilterFactory", 0);
          }

          void t_WordDelimiterFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilterFactory).tp_dict, "class_", make_descriptor(WordDelimiterFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_WordDelimiterFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(WordDelimiterFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilterFactory).tp_dict, "PROTECTED_TOKENS", make_descriptor(j2p(*WordDelimiterFilterFactory::PROTECTED_TOKENS)));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilterFactory).tp_dict, "TYPES", make_descriptor(j2p(*WordDelimiterFilterFactory::TYPES)));
          }

          static PyObject *t_WordDelimiterFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordDelimiterFilterFactory::initializeClass, 1)))
              return NULL;
            return t_WordDelimiterFilterFactory::wrap_Object(WordDelimiterFilterFactory(((t_WordDelimiterFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_WordDelimiterFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordDelimiterFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WordDelimiterFilterFactory_init_(t_WordDelimiterFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            WordDelimiterFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = WordDelimiterFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WordDelimiterFilterFactory_create(t_WordDelimiterFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(WordDelimiterFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_WordDelimiterFilterFactory_inform(t_WordDelimiterFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PForDeltaDocIdSet$Builder.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/PForDeltaDocIdSet.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PForDeltaDocIdSet$Builder::class$ = NULL;
        jmethodID *PForDeltaDocIdSet$Builder::mids$ = NULL;
        bool PForDeltaDocIdSet$Builder::live$ = false;

        jclass PForDeltaDocIdSet$Builder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PForDeltaDocIdSet$Builder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_5450130c] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/DocIdSetIterator;)Lorg/apache/lucene/util/PForDeltaDocIdSet$Builder;");
            mids$[mid_add_c0d9d1e3] = env->getMethodID(cls, "add", "(I)Lorg/apache/lucene/util/PForDeltaDocIdSet$Builder;");
            mids$[mid_build_44738ac2] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/util/PForDeltaDocIdSet;");
            mids$[mid_setIndexInterval_c0d9d1e3] = env->getMethodID(cls, "setIndexInterval", "(I)Lorg/apache/lucene/util/PForDeltaDocIdSet$Builder;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PForDeltaDocIdSet$Builder::PForDeltaDocIdSet$Builder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        PForDeltaDocIdSet$Builder PForDeltaDocIdSet$Builder::add(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          return PForDeltaDocIdSet$Builder(env->callObjectMethod(this$, mids$[mid_add_5450130c], a0.this$));
        }

        PForDeltaDocIdSet$Builder PForDeltaDocIdSet$Builder::add(jint a0) const
        {
          return PForDeltaDocIdSet$Builder(env->callObjectMethod(this$, mids$[mid_add_c0d9d1e3], a0));
        }

        ::org::apache::lucene::util::PForDeltaDocIdSet PForDeltaDocIdSet$Builder::build() const
        {
          return ::org::apache::lucene::util::PForDeltaDocIdSet(env->callObjectMethod(this$, mids$[mid_build_44738ac2]));
        }

        PForDeltaDocIdSet$Builder PForDeltaDocIdSet$Builder::setIndexInterval(jint a0) const
        {
          return PForDeltaDocIdSet$Builder(env->callObjectMethod(this$, mids$[mid_setIndexInterval_c0d9d1e3], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PForDeltaDocIdSet$Builder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PForDeltaDocIdSet$Builder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PForDeltaDocIdSet$Builder_init_(t_PForDeltaDocIdSet$Builder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PForDeltaDocIdSet$Builder_add(t_PForDeltaDocIdSet$Builder *self, PyObject *args);
        static PyObject *t_PForDeltaDocIdSet$Builder_build(t_PForDeltaDocIdSet$Builder *self);
        static PyObject *t_PForDeltaDocIdSet$Builder_setIndexInterval(t_PForDeltaDocIdSet$Builder *self, PyObject *arg);
        static int t_PForDeltaDocIdSet$Builder_set__indexInterval(t_PForDeltaDocIdSet$Builder *self, PyObject *arg, void *data);
        static PyGetSetDef t_PForDeltaDocIdSet$Builder__fields_[] = {
          DECLARE_SET_FIELD(t_PForDeltaDocIdSet$Builder, indexInterval),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PForDeltaDocIdSet$Builder__methods_[] = {
          DECLARE_METHOD(t_PForDeltaDocIdSet$Builder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PForDeltaDocIdSet$Builder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PForDeltaDocIdSet$Builder, add, METH_VARARGS),
          DECLARE_METHOD(t_PForDeltaDocIdSet$Builder, build, METH_NOARGS),
          DECLARE_METHOD(t_PForDeltaDocIdSet$Builder, setIndexInterval, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PForDeltaDocIdSet$Builder, t_PForDeltaDocIdSet$Builder, ::java::lang::Object, PForDeltaDocIdSet$Builder, t_PForDeltaDocIdSet$Builder_init_, 0, 0, t_PForDeltaDocIdSet$Builder__fields_, 0, 0);

        void t_PForDeltaDocIdSet$Builder::install(PyObject *module)
        {
          installType(&PY_TYPE(PForDeltaDocIdSet$Builder), module, "PForDeltaDocIdSet$Builder", 0);
        }

        void t_PForDeltaDocIdSet$Builder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PForDeltaDocIdSet$Builder).tp_dict, "class_", make_descriptor(PForDeltaDocIdSet$Builder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PForDeltaDocIdSet$Builder).tp_dict, "wrapfn_", make_descriptor(t_PForDeltaDocIdSet$Builder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PForDeltaDocIdSet$Builder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PForDeltaDocIdSet$Builder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PForDeltaDocIdSet$Builder::initializeClass, 1)))
            return NULL;
          return t_PForDeltaDocIdSet$Builder::wrap_Object(PForDeltaDocIdSet$Builder(((t_PForDeltaDocIdSet$Builder *) arg)->object.this$));
        }
        static PyObject *t_PForDeltaDocIdSet$Builder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PForDeltaDocIdSet$Builder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PForDeltaDocIdSet$Builder_init_(t_PForDeltaDocIdSet$Builder *self, PyObject *args, PyObject *kwds)
        {
          PForDeltaDocIdSet$Builder object((jobject) NULL);

          INT_CALL(object = PForDeltaDocIdSet$Builder());
          self->object = object;

          return 0;
        }

        static PyObject *t_PForDeltaDocIdSet$Builder_add(t_PForDeltaDocIdSet$Builder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);
              PForDeltaDocIdSet$Builder result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.add(a0));
                return t_PForDeltaDocIdSet$Builder::wrap_Object(result);
              }
            }
            {
              jint a0;
              PForDeltaDocIdSet$Builder result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.add(a0));
                return t_PForDeltaDocIdSet$Builder::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_PForDeltaDocIdSet$Builder_build(t_PForDeltaDocIdSet$Builder *self)
        {
          ::org::apache::lucene::util::PForDeltaDocIdSet result((jobject) NULL);
          OBJ_CALL(result = self->object.build());
          return ::org::apache::lucene::util::t_PForDeltaDocIdSet::wrap_Object(result);
        }

        static PyObject *t_PForDeltaDocIdSet$Builder_setIndexInterval(t_PForDeltaDocIdSet$Builder *self, PyObject *arg)
        {
          jint a0;
          PForDeltaDocIdSet$Builder result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setIndexInterval(a0));
            return t_PForDeltaDocIdSet$Builder::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexInterval", arg);
          return NULL;
        }

        static int t_PForDeltaDocIdSet$Builder_set__indexInterval(t_PForDeltaDocIdSet$Builder *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setIndexInterval(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "indexInterval", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/CachedOrdinalsReader$CachedOrds.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *CachedOrdinalsReader$CachedOrds::class$ = NULL;
          jmethodID *CachedOrdinalsReader$CachedOrds::mids$ = NULL;
          jfieldID *CachedOrdinalsReader$CachedOrds::fids$ = NULL;
          bool CachedOrdinalsReader$CachedOrds::live$ = false;

          jclass CachedOrdinalsReader$CachedOrds::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/CachedOrdinalsReader$CachedOrds");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_76cf77a0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader;I)V");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              fids$ = new jfieldID[max_fid];
              fids$[fid_offsets] = env->getFieldID(cls, "offsets", "[I");
              fids$[fid_ordinals] = env->getFieldID(cls, "ordinals", "[I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CachedOrdinalsReader$CachedOrds::CachedOrdinalsReader$CachedOrds(const ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_76cf77a0, a0.this$, a1)) {}

          jlong CachedOrdinalsReader$CachedOrds::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          JArray< jint > CachedOrdinalsReader$CachedOrds::_get_offsets() const
          {
            return JArray< jint >(env->getObjectField(this$, fids$[fid_offsets]));
          }

          JArray< jint > CachedOrdinalsReader$CachedOrds::_get_ordinals() const
          {
            return JArray< jint >(env->getObjectField(this$, fids$[fid_ordinals]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_CachedOrdinalsReader$CachedOrds_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CachedOrdinalsReader$CachedOrds_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CachedOrdinalsReader$CachedOrds_init_(t_CachedOrdinalsReader$CachedOrds *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CachedOrdinalsReader$CachedOrds_ramBytesUsed(t_CachedOrdinalsReader$CachedOrds *self);
          static PyObject *t_CachedOrdinalsReader$CachedOrds_get__offsets(t_CachedOrdinalsReader$CachedOrds *self, void *data);
          static PyObject *t_CachedOrdinalsReader$CachedOrds_get__ordinals(t_CachedOrdinalsReader$CachedOrds *self, void *data);

          static PyGetSetDef t_CachedOrdinalsReader$CachedOrds__fields_[] = {
            DECLARE_GET_FIELD(t_CachedOrdinalsReader$CachedOrds, offsets),
            DECLARE_GET_FIELD(t_CachedOrdinalsReader$CachedOrds, ordinals),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CachedOrdinalsReader$CachedOrds__methods_[] = {
            DECLARE_METHOD(t_CachedOrdinalsReader$CachedOrds, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CachedOrdinalsReader$CachedOrds, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CachedOrdinalsReader$CachedOrds, ramBytesUsed, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CachedOrdinalsReader$CachedOrds, t_CachedOrdinalsReader$CachedOrds, ::java::lang::Object, CachedOrdinalsReader$CachedOrds, t_CachedOrdinalsReader$CachedOrds_init_, 0, 0, t_CachedOrdinalsReader$CachedOrds__fields_, 0, 0);

          void t_CachedOrdinalsReader$CachedOrds::install(PyObject *module)
          {
            installType(&PY_TYPE(CachedOrdinalsReader$CachedOrds), module, "CachedOrdinalsReader$CachedOrds", 0);
          }

          void t_CachedOrdinalsReader$CachedOrds::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CachedOrdinalsReader$CachedOrds).tp_dict, "class_", make_descriptor(CachedOrdinalsReader$CachedOrds::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CachedOrdinalsReader$CachedOrds).tp_dict, "wrapfn_", make_descriptor(t_CachedOrdinalsReader$CachedOrds::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CachedOrdinalsReader$CachedOrds).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CachedOrdinalsReader$CachedOrds_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CachedOrdinalsReader$CachedOrds::initializeClass, 1)))
              return NULL;
            return t_CachedOrdinalsReader$CachedOrds::wrap_Object(CachedOrdinalsReader$CachedOrds(((t_CachedOrdinalsReader$CachedOrds *) arg)->object.this$));
          }
          static PyObject *t_CachedOrdinalsReader$CachedOrds_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CachedOrdinalsReader$CachedOrds::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CachedOrdinalsReader$CachedOrds_init_(t_CachedOrdinalsReader$CachedOrds *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader a0((jobject) NULL);
            jint a1;
            CachedOrdinalsReader$CachedOrds object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader::initializeClass, &a0, &a1))
            {
              INT_CALL(object = CachedOrdinalsReader$CachedOrds(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CachedOrdinalsReader$CachedOrds_ramBytesUsed(t_CachedOrdinalsReader$CachedOrds *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_CachedOrdinalsReader$CachedOrds_get__offsets(t_CachedOrdinalsReader$CachedOrds *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_offsets());
            return value.wrap();
          }

          static PyObject *t_CachedOrdinalsReader$CachedOrds_get__ordinals(t_CachedOrdinalsReader$CachedOrds *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_ordinals());
            return value.wrap();
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/AfterEffectL.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *AfterEffectL::class$ = NULL;
          jmethodID *AfterEffectL::mids$ = NULL;
          bool AfterEffectL::live$ = false;

          jclass AfterEffectL::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/AfterEffectL");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_05d4946a] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;F)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AfterEffectL::AfterEffectL() : ::org::apache::lucene::search::similarities::AfterEffect(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation AfterEffectL::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_05d4946a], a0.this$, a1));
          }

          jfloat AfterEffectL::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String AfterEffectL::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_AfterEffectL_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AfterEffectL_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AfterEffectL_init_(t_AfterEffectL *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AfterEffectL_explain(t_AfterEffectL *self, PyObject *args);
          static PyObject *t_AfterEffectL_score(t_AfterEffectL *self, PyObject *args);
          static PyObject *t_AfterEffectL_toString(t_AfterEffectL *self, PyObject *args);

          static PyMethodDef t_AfterEffectL__methods_[] = {
            DECLARE_METHOD(t_AfterEffectL, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffectL, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffectL, explain, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffectL, score, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffectL, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AfterEffectL, t_AfterEffectL, ::org::apache::lucene::search::similarities::AfterEffect, AfterEffectL, t_AfterEffectL_init_, 0, 0, 0, 0, 0);

          void t_AfterEffectL::install(PyObject *module)
          {
            installType(&PY_TYPE(AfterEffectL), module, "AfterEffectL", 0);
          }

          void t_AfterEffectL::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AfterEffectL).tp_dict, "class_", make_descriptor(AfterEffectL::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AfterEffectL).tp_dict, "wrapfn_", make_descriptor(t_AfterEffectL::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AfterEffectL).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AfterEffectL_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AfterEffectL::initializeClass, 1)))
              return NULL;
            return t_AfterEffectL::wrap_Object(AfterEffectL(((t_AfterEffectL *) arg)->object.this$));
          }
          static PyObject *t_AfterEffectL_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AfterEffectL::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AfterEffectL_init_(t_AfterEffectL *self, PyObject *args, PyObject *kwds)
          {
            AfterEffectL object((jobject) NULL);

            INT_CALL(object = AfterEffectL());
            self->object = object;

            return 0;
          }

          static PyObject *t_AfterEffectL_explain(t_AfterEffectL *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(AfterEffectL), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_AfterEffectL_score(t_AfterEffectL *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(AfterEffectL), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_AfterEffectL_toString(t_AfterEffectL *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(AfterEffectL), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fi/FinnishLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {

          ::java::lang::Class *FinnishLightStemmer::class$ = NULL;
          jmethodID *FinnishLightStemmer::mids$ = NULL;
          bool FinnishLightStemmer::live$ = false;

          jclass FinnishLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fi/FinnishLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FinnishLightStemmer::FinnishLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint FinnishLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {
          static PyObject *t_FinnishLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FinnishLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FinnishLightStemmer_init_(t_FinnishLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FinnishLightStemmer_stem(t_FinnishLightStemmer *self, PyObject *args);

          static PyMethodDef t_FinnishLightStemmer__methods_[] = {
            DECLARE_METHOD(t_FinnishLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FinnishLightStemmer, t_FinnishLightStemmer, ::java::lang::Object, FinnishLightStemmer, t_FinnishLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_FinnishLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(FinnishLightStemmer), module, "FinnishLightStemmer", 0);
          }

          void t_FinnishLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FinnishLightStemmer).tp_dict, "class_", make_descriptor(FinnishLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FinnishLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_FinnishLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FinnishLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FinnishLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FinnishLightStemmer::initializeClass, 1)))
              return NULL;
            return t_FinnishLightStemmer::wrap_Object(FinnishLightStemmer(((t_FinnishLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_FinnishLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FinnishLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FinnishLightStemmer_init_(t_FinnishLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            FinnishLightStemmer object((jobject) NULL);

            INT_CALL(object = FinnishLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_FinnishLightStemmer_stem(t_FinnishLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/TokenGroup.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/Token.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *TokenGroup::class$ = NULL;
          jmethodID *TokenGroup::mids$ = NULL;
          bool TokenGroup::live$ = false;

          jclass TokenGroup::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/TokenGroup");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_getEndOffset_54c6a179] = env->getMethodID(cls, "getEndOffset", "()I");
              mids$[mid_getNumTokens_54c6a179] = env->getMethodID(cls, "getNumTokens", "()I");
              mids$[mid_getScore_39c7bd2c] = env->getMethodID(cls, "getScore", "(I)F");
              mids$[mid_getStartOffset_54c6a179] = env->getMethodID(cls, "getStartOffset", "()I");
              mids$[mid_getToken_2e456a21] = env->getMethodID(cls, "getToken", "(I)Lorg/apache/lucene/analysis/Token;");
              mids$[mid_getTotalScore_54c6a176] = env->getMethodID(cls, "getTotalScore", "()F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenGroup::TokenGroup(const ::org::apache::lucene::analysis::TokenStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jint TokenGroup::getEndOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndOffset_54c6a179]);
          }

          jint TokenGroup::getNumTokens() const
          {
            return env->callIntMethod(this$, mids$[mid_getNumTokens_54c6a179]);
          }

          jfloat TokenGroup::getScore(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_getScore_39c7bd2c], a0);
          }

          jint TokenGroup::getStartOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getStartOffset_54c6a179]);
          }

          ::org::apache::lucene::analysis::Token TokenGroup::getToken(jint a0) const
          {
            return ::org::apache::lucene::analysis::Token(env->callObjectMethod(this$, mids$[mid_getToken_2e456a21], a0));
          }

          jfloat TokenGroup::getTotalScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getTotalScore_54c6a176]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_TokenGroup_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenGroup_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenGroup_init_(t_TokenGroup *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenGroup_getEndOffset(t_TokenGroup *self);
          static PyObject *t_TokenGroup_getNumTokens(t_TokenGroup *self);
          static PyObject *t_TokenGroup_getScore(t_TokenGroup *self, PyObject *arg);
          static PyObject *t_TokenGroup_getStartOffset(t_TokenGroup *self);
          static PyObject *t_TokenGroup_getToken(t_TokenGroup *self, PyObject *arg);
          static PyObject *t_TokenGroup_getTotalScore(t_TokenGroup *self);
          static PyObject *t_TokenGroup_get__endOffset(t_TokenGroup *self, void *data);
          static PyObject *t_TokenGroup_get__numTokens(t_TokenGroup *self, void *data);
          static PyObject *t_TokenGroup_get__startOffset(t_TokenGroup *self, void *data);
          static PyObject *t_TokenGroup_get__totalScore(t_TokenGroup *self, void *data);
          static PyGetSetDef t_TokenGroup__fields_[] = {
            DECLARE_GET_FIELD(t_TokenGroup, endOffset),
            DECLARE_GET_FIELD(t_TokenGroup, numTokens),
            DECLARE_GET_FIELD(t_TokenGroup, startOffset),
            DECLARE_GET_FIELD(t_TokenGroup, totalScore),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TokenGroup__methods_[] = {
            DECLARE_METHOD(t_TokenGroup, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenGroup, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenGroup, getEndOffset, METH_NOARGS),
            DECLARE_METHOD(t_TokenGroup, getNumTokens, METH_NOARGS),
            DECLARE_METHOD(t_TokenGroup, getScore, METH_O),
            DECLARE_METHOD(t_TokenGroup, getStartOffset, METH_NOARGS),
            DECLARE_METHOD(t_TokenGroup, getToken, METH_O),
            DECLARE_METHOD(t_TokenGroup, getTotalScore, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenGroup, t_TokenGroup, ::java::lang::Object, TokenGroup, t_TokenGroup_init_, 0, 0, t_TokenGroup__fields_, 0, 0);

          void t_TokenGroup::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenGroup), module, "TokenGroup", 0);
          }

          void t_TokenGroup::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenGroup).tp_dict, "class_", make_descriptor(TokenGroup::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenGroup).tp_dict, "wrapfn_", make_descriptor(t_TokenGroup::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenGroup).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenGroup_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenGroup::initializeClass, 1)))
              return NULL;
            return t_TokenGroup::wrap_Object(TokenGroup(((t_TokenGroup *) arg)->object.this$));
          }
          static PyObject *t_TokenGroup_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenGroup::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenGroup_init_(t_TokenGroup *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            TokenGroup object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = TokenGroup(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenGroup_getEndOffset(t_TokenGroup *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_TokenGroup_getNumTokens(t_TokenGroup *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNumTokens());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_TokenGroup_getScore(t_TokenGroup *self, PyObject *arg)
          {
            jint a0;
            jfloat result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getScore(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getScore", arg);
            return NULL;
          }

          static PyObject *t_TokenGroup_getStartOffset(t_TokenGroup *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStartOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_TokenGroup_getToken(t_TokenGroup *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::analysis::Token result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getToken(a0));
              return ::org::apache::lucene::analysis::t_Token::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getToken", arg);
            return NULL;
          }

          static PyObject *t_TokenGroup_getTotalScore(t_TokenGroup *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getTotalScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_TokenGroup_get__endOffset(t_TokenGroup *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_TokenGroup_get__numTokens(t_TokenGroup *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNumTokens());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_TokenGroup_get__startOffset(t_TokenGroup *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStartOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_TokenGroup_get__totalScore(t_TokenGroup *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getTotalScore());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/builders/QueryTreeBuilder.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/builders/QueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace builders {

              ::java::lang::Class *QueryTreeBuilder::class$ = NULL;
              jmethodID *QueryTreeBuilder::mids$ = NULL;
              bool QueryTreeBuilder::live$ = false;
              ::java::lang::String *QueryTreeBuilder::QUERY_TREE_BUILDER_TAGID = NULL;

              jclass QueryTreeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/builders/QueryTreeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_30efaf9c] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Ljava/lang/Object;");
                  mids$[mid_setBuilder_868de661] = env->getMethodID(cls, "setBuilder", "(Ljava/lang/CharSequence;Lorg/apache/lucene/queryparser/flexible/core/builders/QueryBuilder;)V");
                  mids$[mid_setBuilder_ba566e4f] = env->getMethodID(cls, "setBuilder", "(Ljava/lang/Class;Lorg/apache/lucene/queryparser/flexible/core/builders/QueryBuilder;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  QUERY_TREE_BUILDER_TAGID = new ::java::lang::String(env->getStaticObjectField(cls, "QUERY_TREE_BUILDER_TAGID", "Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              QueryTreeBuilder::QueryTreeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::java::lang::Object QueryTreeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_build_30efaf9c], a0.this$));
              }

              void QueryTreeBuilder::setBuilder(const ::java::lang::CharSequence & a0, const ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder & a1) const
              {
                env->callVoidMethod(this$, mids$[mid_setBuilder_868de661], a0.this$, a1.this$);
              }

              void QueryTreeBuilder::setBuilder(const ::java::lang::Class & a0, const ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder & a1) const
              {
                env->callVoidMethod(this$, mids$[mid_setBuilder_ba566e4f], a0.this$, a1.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace builders {
              static PyObject *t_QueryTreeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryTreeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_QueryTreeBuilder_init_(t_QueryTreeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_QueryTreeBuilder_build(t_QueryTreeBuilder *self, PyObject *arg);
              static PyObject *t_QueryTreeBuilder_setBuilder(t_QueryTreeBuilder *self, PyObject *args);

              static PyMethodDef t_QueryTreeBuilder__methods_[] = {
                DECLARE_METHOD(t_QueryTreeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryTreeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryTreeBuilder, build, METH_O),
                DECLARE_METHOD(t_QueryTreeBuilder, setBuilder, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryTreeBuilder, t_QueryTreeBuilder, ::java::lang::Object, QueryTreeBuilder, t_QueryTreeBuilder_init_, 0, 0, 0, 0, 0);

              void t_QueryTreeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryTreeBuilder), module, "QueryTreeBuilder", 0);
              }

              void t_QueryTreeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryTreeBuilder).tp_dict, "class_", make_descriptor(QueryTreeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryTreeBuilder).tp_dict, "wrapfn_", make_descriptor(t_QueryTreeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryTreeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(QueryTreeBuilder::initializeClass);
                PyDict_SetItemString(PY_TYPE(QueryTreeBuilder).tp_dict, "QUERY_TREE_BUILDER_TAGID", make_descriptor(j2p(*QueryTreeBuilder::QUERY_TREE_BUILDER_TAGID)));
              }

              static PyObject *t_QueryTreeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryTreeBuilder::initializeClass, 1)))
                  return NULL;
                return t_QueryTreeBuilder::wrap_Object(QueryTreeBuilder(((t_QueryTreeBuilder *) arg)->object.this$));
              }
              static PyObject *t_QueryTreeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryTreeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_QueryTreeBuilder_init_(t_QueryTreeBuilder *self, PyObject *args, PyObject *kwds)
              {
                QueryTreeBuilder object((jobject) NULL);

                INT_CALL(object = QueryTreeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_QueryTreeBuilder_build(t_QueryTreeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::java::lang::t_Object::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }

              static PyObject *t_QueryTreeBuilder_setBuilder(t_QueryTreeBuilder *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 2:
                  {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder a1((jobject) NULL);

                    if (!parseArgs(args, "Ok", &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder::initializeClass, &a0, &a1))
                    {
                      OBJ_CALL(self->object.setBuilder(a0, a1));
                      Py_RETURN_NONE;
                    }
                  }
                  {
                    ::java::lang::Class a0((jobject) NULL);
                    PyTypeObject **p0;
                    ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder a1((jobject) NULL);

                    if (!parseArgs(args, "Kk", ::java::lang::Class::initializeClass, ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
                    {
                      OBJ_CALL(self->object.setBuilder(a0, a1));
                      Py_RETURN_NONE;
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "setBuilder", args);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/Format.h"
#include "java/lang/Class.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/Cloneable.h"
#include "java/io/Serializable.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *Format::class$ = NULL;
    jmethodID *Format::mids$ = NULL;
    bool Format::live$ = false;

    jclass Format::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/Format");

        mids$ = new jmethodID[max_mid];
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_format_c9db4eed] = env->getMethodID(cls, "format", "(Ljava/lang/Object;)Ljava/lang/String;");
        mids$[mid_parseObject_2a1c4d09] = env->getMethodID(cls, "parseObject", "(Ljava/lang/String;)Ljava/lang/Object;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    ::java::lang::Object Format::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    ::java::lang::String Format::format(const ::java::lang::Object & a0) const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_format_c9db4eed], a0.this$));
    }

    ::java::lang::Object Format::parseObject(const ::java::lang::String & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_parseObject_2a1c4d09], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_Format_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Format_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Format_clone(t_Format *self);
    static PyObject *t_Format_format(t_Format *self, PyObject *arg);
    static PyObject *t_Format_parseObject(t_Format *self, PyObject *arg);

    static PyMethodDef t_Format__methods_[] = {
      DECLARE_METHOD(t_Format, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Format, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Format, clone, METH_NOARGS),
      DECLARE_METHOD(t_Format, format, METH_O),
      DECLARE_METHOD(t_Format, parseObject, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Format, t_Format, ::java::lang::Object, Format, abstract_init, 0, 0, 0, 0, 0);

    void t_Format::install(PyObject *module)
    {
      installType(&PY_TYPE(Format), module, "Format", 0);
    }

    void t_Format::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Format).tp_dict, "class_", make_descriptor(Format::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Format).tp_dict, "wrapfn_", make_descriptor(t_Format::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Format).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Format_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Format::initializeClass, 1)))
        return NULL;
      return t_Format::wrap_Object(Format(((t_Format *) arg)->object.this$));
    }
    static PyObject *t_Format_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Format::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Format_clone(t_Format *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.clone());
      return ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_Format_format(t_Format *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.format(a0));
        return j2p(result);
      }

      PyErr_SetArgsError((PyObject *) self, "format", arg);
      return NULL;
    }

    static PyObject *t_Format_parseObject(t_Format *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.parseObject(a0));
        return ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "parseObject", arg);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/SortedSetSortField.h"
#include "org/apache/lucene/sandbox/queries/SortedSetSortField$Selector.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *SortedSetSortField::class$ = NULL;
          jmethodID *SortedSetSortField::mids$ = NULL;
          bool SortedSetSortField::live$ = false;

          jclass SortedSetSortField::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/SortedSetSortField");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f3691645] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Z)V");
              mids$[mid_init$_95ba0b53] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ZLorg/apache/lucene/sandbox/queries/SortedSetSortField$Selector;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getComparator_f38637f4] = env->getMethodID(cls, "getComparator", "(II)Lorg/apache/lucene/search/FieldComparator;");
              mids$[mid_getSelector_01e98d5f] = env->getMethodID(cls, "getSelector", "()Lorg/apache/lucene/sandbox/queries/SortedSetSortField$Selector;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setMissingValue_290588ee] = env->getMethodID(cls, "setMissingValue", "(Ljava/lang/Object;)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedSetSortField::SortedSetSortField(const ::java::lang::String & a0, jboolean a1) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_f3691645, a0.this$, a1)) {}

          SortedSetSortField::SortedSetSortField(const ::java::lang::String & a0, jboolean a1, const ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector & a2) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_95ba0b53, a0.this$, a1, a2.this$)) {}

          jboolean SortedSetSortField::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::search::FieldComparator SortedSetSortField::getComparator(jint a0, jint a1) const
          {
            return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_getComparator_f38637f4], a0, a1));
          }

          ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector SortedSetSortField::getSelector() const
          {
            return ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector(env->callObjectMethod(this$, mids$[mid_getSelector_01e98d5f]));
          }

          jint SortedSetSortField::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void SortedSetSortField::setMissingValue(const ::java::lang::Object & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMissingValue_290588ee], a0.this$);
          }

          ::java::lang::String SortedSetSortField::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_SortedSetSortField_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetSortField_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SortedSetSortField_init_(t_SortedSetSortField *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SortedSetSortField_equals(t_SortedSetSortField *self, PyObject *args);
          static PyObject *t_SortedSetSortField_getComparator(t_SortedSetSortField *self, PyObject *args);
          static PyObject *t_SortedSetSortField_getSelector(t_SortedSetSortField *self);
          static PyObject *t_SortedSetSortField_hashCode(t_SortedSetSortField *self, PyObject *args);
          static PyObject *t_SortedSetSortField_setMissingValue(t_SortedSetSortField *self, PyObject *args);
          static PyObject *t_SortedSetSortField_toString(t_SortedSetSortField *self, PyObject *args);
          static int t_SortedSetSortField_set__missingValue(t_SortedSetSortField *self, PyObject *arg, void *data);
          static PyObject *t_SortedSetSortField_get__selector(t_SortedSetSortField *self, void *data);
          static PyGetSetDef t_SortedSetSortField__fields_[] = {
            DECLARE_SET_FIELD(t_SortedSetSortField, missingValue),
            DECLARE_GET_FIELD(t_SortedSetSortField, selector),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SortedSetSortField__methods_[] = {
            DECLARE_METHOD(t_SortedSetSortField, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetSortField, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetSortField, equals, METH_VARARGS),
            DECLARE_METHOD(t_SortedSetSortField, getComparator, METH_VARARGS),
            DECLARE_METHOD(t_SortedSetSortField, getSelector, METH_NOARGS),
            DECLARE_METHOD(t_SortedSetSortField, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SortedSetSortField, setMissingValue, METH_VARARGS),
            DECLARE_METHOD(t_SortedSetSortField, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedSetSortField, t_SortedSetSortField, ::org::apache::lucene::search::SortField, SortedSetSortField, t_SortedSetSortField_init_, 0, 0, t_SortedSetSortField__fields_, 0, 0);

          void t_SortedSetSortField::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedSetSortField), module, "SortedSetSortField", 0);
            PyDict_SetItemString(PY_TYPE(SortedSetSortField).tp_dict, "Selector", make_descriptor(&PY_TYPE(SortedSetSortField$Selector)));
          }

          void t_SortedSetSortField::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedSetSortField).tp_dict, "class_", make_descriptor(SortedSetSortField::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedSetSortField).tp_dict, "wrapfn_", make_descriptor(t_SortedSetSortField::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedSetSortField).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SortedSetSortField_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedSetSortField::initializeClass, 1)))
              return NULL;
            return t_SortedSetSortField::wrap_Object(SortedSetSortField(((t_SortedSetSortField *) arg)->object.this$));
          }
          static PyObject *t_SortedSetSortField_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedSetSortField::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SortedSetSortField_init_(t_SortedSetSortField *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean a1;
                SortedSetSortField object((jobject) NULL);

                if (!parseArgs(args, "sZ", &a0, &a1))
                {
                  INT_CALL(object = SortedSetSortField(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean a1;
                ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector a2((jobject) NULL);
                PyTypeObject **p2;
                SortedSetSortField object((jobject) NULL);

                if (!parseArgs(args, "sZK", ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::sandbox::queries::t_SortedSetSortField$Selector::parameters_))
                {
                  INT_CALL(object = SortedSetSortField(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SortedSetSortField_equals(t_SortedSetSortField *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SortedSetSortField), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SortedSetSortField_getComparator(t_SortedSetSortField *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getComparator(a0, a1));
              return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SortedSetSortField), (PyObject *) self, "getComparator", args, 2);
          }

          static PyObject *t_SortedSetSortField_getSelector(t_SortedSetSortField *self)
          {
            ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector result((jobject) NULL);
            OBJ_CALL(result = self->object.getSelector());
            return ::org::apache::lucene::sandbox::queries::t_SortedSetSortField$Selector::wrap_Object(result);
          }

          static PyObject *t_SortedSetSortField_hashCode(t_SortedSetSortField *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SortedSetSortField), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SortedSetSortField_setMissingValue(t_SortedSetSortField *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(self->object.setMissingValue(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SortedSetSortField), (PyObject *) self, "setMissingValue", args, 2);
          }

          static PyObject *t_SortedSetSortField_toString(t_SortedSetSortField *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SortedSetSortField), (PyObject *) self, "toString", args, 2);
          }

          static int t_SortedSetSortField_set__missingValue(t_SortedSetSortField *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::Object value((jobject) NULL);
              if (!parseArg(arg, "o", &value))
              {
                INT_CALL(self->object.setMissingValue(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "missingValue", arg);
            return -1;
          }

          static PyObject *t_SortedSetSortField_get__selector(t_SortedSetSortField *self, void *data)
          {
            ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector value((jobject) NULL);
            OBJ_CALL(value = self->object.getSelector());
            return ::org::apache::lucene::sandbox::queries::t_SortedSetSortField$Selector::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/Cl2oTaxonomyWriterCache.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *Cl2oTaxonomyWriterCache::class$ = NULL;
            jmethodID *Cl2oTaxonomyWriterCache::mids$ = NULL;
            bool Cl2oTaxonomyWriterCache::live$ = false;

            jclass Cl2oTaxonomyWriterCache::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/Cl2oTaxonomyWriterCache");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_776c6331] = env->getMethodID(cls, "<init>", "(IFI)V");
                mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_get_283f83f5] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
                mids$[mid_getMemoryUsage_54c6a179] = env->getMethodID(cls, "getMemoryUsage", "()I");
                mids$[mid_isFull_54c6a16a] = env->getMethodID(cls, "isFull", "()Z");
                mids$[mid_put_7ba580a4] = env->getMethodID(cls, "put", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;I)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            Cl2oTaxonomyWriterCache::Cl2oTaxonomyWriterCache(jint a0, jfloat a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_776c6331, a0, a1, a2)) {}

            void Cl2oTaxonomyWriterCache::clear() const
            {
              env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
            }

            void Cl2oTaxonomyWriterCache::close() const
            {
              env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
            }

            jint Cl2oTaxonomyWriterCache::get(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_get_283f83f5], a0.this$);
            }

            jint Cl2oTaxonomyWriterCache::getMemoryUsage() const
            {
              return env->callIntMethod(this$, mids$[mid_getMemoryUsage_54c6a179]);
            }

            jboolean Cl2oTaxonomyWriterCache::isFull() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isFull_54c6a16a]);
            }

            jboolean Cl2oTaxonomyWriterCache::put(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0, jint a1) const
            {
              return env->callBooleanMethod(this$, mids$[mid_put_7ba580a4], a0.this$, a1);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_Cl2oTaxonomyWriterCache_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Cl2oTaxonomyWriterCache_instance_(PyTypeObject *type, PyObject *arg);
            static int t_Cl2oTaxonomyWriterCache_init_(t_Cl2oTaxonomyWriterCache *self, PyObject *args, PyObject *kwds);
            static PyObject *t_Cl2oTaxonomyWriterCache_clear(t_Cl2oTaxonomyWriterCache *self);
            static PyObject *t_Cl2oTaxonomyWriterCache_close(t_Cl2oTaxonomyWriterCache *self);
            static PyObject *t_Cl2oTaxonomyWriterCache_get(t_Cl2oTaxonomyWriterCache *self, PyObject *arg);
            static PyObject *t_Cl2oTaxonomyWriterCache_getMemoryUsage(t_Cl2oTaxonomyWriterCache *self);
            static PyObject *t_Cl2oTaxonomyWriterCache_isFull(t_Cl2oTaxonomyWriterCache *self);
            static PyObject *t_Cl2oTaxonomyWriterCache_put(t_Cl2oTaxonomyWriterCache *self, PyObject *args);
            static PyObject *t_Cl2oTaxonomyWriterCache_get__full(t_Cl2oTaxonomyWriterCache *self, void *data);
            static PyObject *t_Cl2oTaxonomyWriterCache_get__memoryUsage(t_Cl2oTaxonomyWriterCache *self, void *data);
            static PyGetSetDef t_Cl2oTaxonomyWriterCache__fields_[] = {
              DECLARE_GET_FIELD(t_Cl2oTaxonomyWriterCache, full),
              DECLARE_GET_FIELD(t_Cl2oTaxonomyWriterCache, memoryUsage),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_Cl2oTaxonomyWriterCache__methods_[] = {
              DECLARE_METHOD(t_Cl2oTaxonomyWriterCache, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Cl2oTaxonomyWriterCache, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Cl2oTaxonomyWriterCache, clear, METH_NOARGS),
              DECLARE_METHOD(t_Cl2oTaxonomyWriterCache, close, METH_NOARGS),
              DECLARE_METHOD(t_Cl2oTaxonomyWriterCache, get, METH_O),
              DECLARE_METHOD(t_Cl2oTaxonomyWriterCache, getMemoryUsage, METH_NOARGS),
              DECLARE_METHOD(t_Cl2oTaxonomyWriterCache, isFull, METH_NOARGS),
              DECLARE_METHOD(t_Cl2oTaxonomyWriterCache, put, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(Cl2oTaxonomyWriterCache, t_Cl2oTaxonomyWriterCache, ::java::lang::Object, Cl2oTaxonomyWriterCache, t_Cl2oTaxonomyWriterCache_init_, 0, 0, t_Cl2oTaxonomyWriterCache__fields_, 0, 0);

            void t_Cl2oTaxonomyWriterCache::install(PyObject *module)
            {
              installType(&PY_TYPE(Cl2oTaxonomyWriterCache), module, "Cl2oTaxonomyWriterCache", 0);
            }

            void t_Cl2oTaxonomyWriterCache::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(Cl2oTaxonomyWriterCache).tp_dict, "class_", make_descriptor(Cl2oTaxonomyWriterCache::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(Cl2oTaxonomyWriterCache).tp_dict, "wrapfn_", make_descriptor(t_Cl2oTaxonomyWriterCache::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(Cl2oTaxonomyWriterCache).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, Cl2oTaxonomyWriterCache::initializeClass, 1)))
                return NULL;
              return t_Cl2oTaxonomyWriterCache::wrap_Object(Cl2oTaxonomyWriterCache(((t_Cl2oTaxonomyWriterCache *) arg)->object.this$));
            }
            static PyObject *t_Cl2oTaxonomyWriterCache_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, Cl2oTaxonomyWriterCache::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_Cl2oTaxonomyWriterCache_init_(t_Cl2oTaxonomyWriterCache *self, PyObject *args, PyObject *kwds)
            {
              jint a0;
              jfloat a1;
              jint a2;
              Cl2oTaxonomyWriterCache object((jobject) NULL);

              if (!parseArgs(args, "IFI", &a0, &a1, &a2))
              {
                INT_CALL(object = Cl2oTaxonomyWriterCache(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_clear(t_Cl2oTaxonomyWriterCache *self)
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_close(t_Cl2oTaxonomyWriterCache *self)
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_get(t_Cl2oTaxonomyWriterCache *self, PyObject *arg)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_getMemoryUsage(t_Cl2oTaxonomyWriterCache *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getMemoryUsage());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_isFull(t_Cl2oTaxonomyWriterCache *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.isFull());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_put(t_Cl2oTaxonomyWriterCache *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint a1;
              jboolean result;

              if (!parseArgs(args, "kI", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.put(a0, a1));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "put", args);
              return NULL;
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_get__full(t_Cl2oTaxonomyWriterCache *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isFull());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_get__memoryUsage(t_Cl2oTaxonomyWriterCache *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getMemoryUsage());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/FieldInfosWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *FieldInfosWriter::class$ = NULL;
        jmethodID *FieldInfosWriter::mids$ = NULL;
        bool FieldInfosWriter::live$ = false;

        jclass FieldInfosWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/FieldInfosWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_write_e0613aa0] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void FieldInfosWriter::write(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::index::FieldInfos & a3, const ::org::apache::lucene::store::IOContext & a4) const
        {
          env->callVoidMethod(this$, mids$[mid_write_e0613aa0], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_FieldInfosWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfosWriter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfosWriter_write(t_FieldInfosWriter *self, PyObject *args);

        static PyMethodDef t_FieldInfosWriter__methods_[] = {
          DECLARE_METHOD(t_FieldInfosWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfosWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfosWriter, write, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldInfosWriter, t_FieldInfosWriter, ::java::lang::Object, FieldInfosWriter, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldInfosWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInfosWriter), module, "FieldInfosWriter", 0);
        }

        void t_FieldInfosWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldInfosWriter).tp_dict, "class_", make_descriptor(FieldInfosWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldInfosWriter).tp_dict, "wrapfn_", make_descriptor(t_FieldInfosWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldInfosWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldInfosWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInfosWriter::initializeClass, 1)))
            return NULL;
          return t_FieldInfosWriter::wrap_Object(FieldInfosWriter(((t_FieldInfosWriter *) arg)->object.this$));
        }
        static PyObject *t_FieldInfosWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInfosWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldInfosWriter_write(t_FieldInfosWriter *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::org::apache::lucene::index::FieldInfos a3((jobject) NULL);
          ::org::apache::lucene::store::IOContext a4((jobject) NULL);

          if (!parseArgs(args, "ksskk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(self->object.write(a0, a1, a2, a3, a4));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "write", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedDataInput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedDataInput::class$ = NULL;
          jmethodID *PackedDataInput::mids$ = NULL;
          bool PackedDataInput::live$ = false;

          jclass PackedDataInput::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedDataInput");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f5d6a551] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_readLong_39c7bd20] = env->getMethodID(cls, "readLong", "(I)J");
              mids$[mid_skipToNextByte_54c6a166] = env->getMethodID(cls, "skipToNextByte", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedDataInput::PackedDataInput(const ::org::apache::lucene::store::DataInput & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f5d6a551, a0.this$)) {}

          jlong PackedDataInput::readLong(jint a0) const
          {
            return env->callLongMethod(this$, mids$[mid_readLong_39c7bd20], a0);
          }

          void PackedDataInput::skipToNextByte() const
          {
            env->callVoidMethod(this$, mids$[mid_skipToNextByte_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedDataInput_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedDataInput_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedDataInput_init_(t_PackedDataInput *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedDataInput_readLong(t_PackedDataInput *self, PyObject *arg);
          static PyObject *t_PackedDataInput_skipToNextByte(t_PackedDataInput *self);

          static PyMethodDef t_PackedDataInput__methods_[] = {
            DECLARE_METHOD(t_PackedDataInput, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedDataInput, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedDataInput, readLong, METH_O),
            DECLARE_METHOD(t_PackedDataInput, skipToNextByte, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedDataInput, t_PackedDataInput, ::java::lang::Object, PackedDataInput, t_PackedDataInput_init_, 0, 0, 0, 0, 0);

          void t_PackedDataInput::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedDataInput), module, "PackedDataInput", 0);
          }

          void t_PackedDataInput::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedDataInput).tp_dict, "class_", make_descriptor(PackedDataInput::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedDataInput).tp_dict, "wrapfn_", make_descriptor(t_PackedDataInput::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedDataInput).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedDataInput_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedDataInput::initializeClass, 1)))
              return NULL;
            return t_PackedDataInput::wrap_Object(PackedDataInput(((t_PackedDataInput *) arg)->object.this$));
          }
          static PyObject *t_PackedDataInput_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedDataInput::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedDataInput_init_(t_PackedDataInput *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            PackedDataInput object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              INT_CALL(object = PackedDataInput(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PackedDataInput_readLong(t_PackedDataInput *self, PyObject *arg)
          {
            jint a0;
            jlong result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.readLong(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "readLong", arg);
            return NULL;
          }

          static PyObject *t_PackedDataInput_skipToNextByte(t_PackedDataInput *self)
          {
            OBJ_CALL(self->object.skipToNextByte());
            Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/LowercaseExpandedTermsQueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *LowercaseExpandedTermsQueryNodeProcessor::class$ = NULL;
              jmethodID *LowercaseExpandedTermsQueryNodeProcessor::mids$ = NULL;
              bool LowercaseExpandedTermsQueryNodeProcessor::live$ = false;

              jclass LowercaseExpandedTermsQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/LowercaseExpandedTermsQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              LowercaseExpandedTermsQueryNodeProcessor::LowercaseExpandedTermsQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode LowercaseExpandedTermsQueryNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_LowercaseExpandedTermsQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_LowercaseExpandedTermsQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_LowercaseExpandedTermsQueryNodeProcessor_init_(t_LowercaseExpandedTermsQueryNodeProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_LowercaseExpandedTermsQueryNodeProcessor_process(t_LowercaseExpandedTermsQueryNodeProcessor *self, PyObject *args);

              static PyMethodDef t_LowercaseExpandedTermsQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_LowercaseExpandedTermsQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_LowercaseExpandedTermsQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_LowercaseExpandedTermsQueryNodeProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(LowercaseExpandedTermsQueryNodeProcessor, t_LowercaseExpandedTermsQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, LowercaseExpandedTermsQueryNodeProcessor, t_LowercaseExpandedTermsQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_LowercaseExpandedTermsQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(LowercaseExpandedTermsQueryNodeProcessor), module, "LowercaseExpandedTermsQueryNodeProcessor", 0);
              }

              void t_LowercaseExpandedTermsQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(LowercaseExpandedTermsQueryNodeProcessor).tp_dict, "class_", make_descriptor(LowercaseExpandedTermsQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(LowercaseExpandedTermsQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_LowercaseExpandedTermsQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(LowercaseExpandedTermsQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_LowercaseExpandedTermsQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, LowercaseExpandedTermsQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_LowercaseExpandedTermsQueryNodeProcessor::wrap_Object(LowercaseExpandedTermsQueryNodeProcessor(((t_LowercaseExpandedTermsQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_LowercaseExpandedTermsQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, LowercaseExpandedTermsQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_LowercaseExpandedTermsQueryNodeProcessor_init_(t_LowercaseExpandedTermsQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                LowercaseExpandedTermsQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = LowercaseExpandedTermsQueryNodeProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_LowercaseExpandedTermsQueryNodeProcessor_process(t_LowercaseExpandedTermsQueryNodeProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(LowercaseExpandedTermsQueryNodeProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/LongsRef.h"
#include "java/lang/Class.h"
#include "java/lang/Comparable.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *LongsRef::class$ = NULL;
        jmethodID *LongsRef::mids$ = NULL;
        jfieldID *LongsRef::fids$ = NULL;
        bool LongsRef::live$ = false;
        JArray< jlong > *LongsRef::EMPTY_LONGS = NULL;

        jclass LongsRef::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/LongsRef");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_6ae021e7] = env->getMethodID(cls, "<init>", "([JII)V");
            mids$[mid_clone_3dcbb725] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/LongsRef;");
            mids$[mid_compareTo_ec8421f7] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/util/LongsRef;)I");
            mids$[mid_deepCopyOf_2075e53f] = env->getStaticMethodID(cls, "deepCopyOf", "(Lorg/apache/lucene/util/LongsRef;)Lorg/apache/lucene/util/LongsRef;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isValid_54c6a16a] = env->getMethodID(cls, "isValid", "()Z");
            mids$[mid_longsEquals_ec8421e4] = env->getMethodID(cls, "longsEquals", "(Lorg/apache/lucene/util/LongsRef;)Z");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_length] = env->getFieldID(cls, "length", "I");
            fids$[fid_longs] = env->getFieldID(cls, "longs", "[J");
            fids$[fid_offset] = env->getFieldID(cls, "offset", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY_LONGS = new JArray< jlong >(env->getStaticObjectField(cls, "EMPTY_LONGS", "[J"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LongsRef::LongsRef() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        LongsRef::LongsRef(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        LongsRef::LongsRef(const JArray< jlong > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6ae021e7, a0.this$, a1, a2)) {}

        LongsRef LongsRef::clone() const
        {
          return LongsRef(env->callObjectMethod(this$, mids$[mid_clone_3dcbb725]));
        }

        jint LongsRef::compareTo(const LongsRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTo_ec8421f7], a0.this$);
        }

        LongsRef LongsRef::deepCopyOf(const LongsRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return LongsRef(env->callStaticObjectMethod(cls, mids$[mid_deepCopyOf_2075e53f], a0.this$));
        }

        jboolean LongsRef::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint LongsRef::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean LongsRef::isValid() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isValid_54c6a16a]);
        }

        jboolean LongsRef::longsEquals(const LongsRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_longsEquals_ec8421e4], a0.this$);
        }

        ::java::lang::String LongsRef::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jint LongsRef::_get_length() const
        {
          return env->getIntField(this$, fids$[fid_length]);
        }

        void LongsRef::_set_length(jint a0) const
        {
          env->setIntField(this$, fids$[fid_length], a0);
        }

        JArray< jlong > LongsRef::_get_longs() const
        {
          return JArray< jlong >(env->getObjectField(this$, fids$[fid_longs]));
        }

        void LongsRef::_set_longs(const JArray< jlong > & a0) const
        {
          env->setObjectField(this$, fids$[fid_longs], a0.this$);
        }

        jint LongsRef::_get_offset() const
        {
          return env->getIntField(this$, fids$[fid_offset]);
        }

        void LongsRef::_set_offset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_offset], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_LongsRef_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongsRef_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LongsRef_init_(t_LongsRef *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LongsRef_clone(t_LongsRef *self);
        static PyObject *t_LongsRef_compareTo(t_LongsRef *self, PyObject *arg);
        static PyObject *t_LongsRef_deepCopyOf(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongsRef_equals(t_LongsRef *self, PyObject *args);
        static PyObject *t_LongsRef_hashCode(t_LongsRef *self, PyObject *args);
        static PyObject *t_LongsRef_isValid(t_LongsRef *self);
        static PyObject *t_LongsRef_longsEquals(t_LongsRef *self, PyObject *arg);
        static PyObject *t_LongsRef_toString(t_LongsRef *self, PyObject *args);
        static PyObject *t_LongsRef_get__length(t_LongsRef *self, void *data);
        static int t_LongsRef_set__length(t_LongsRef *self, PyObject *arg, void *data);
        static PyObject *t_LongsRef_get__longs(t_LongsRef *self, void *data);
        static int t_LongsRef_set__longs(t_LongsRef *self, PyObject *arg, void *data);
        static PyObject *t_LongsRef_get__offset(t_LongsRef *self, void *data);
        static int t_LongsRef_set__offset(t_LongsRef *self, PyObject *arg, void *data);

        static PyObject *t_LongsRef_get__valid(t_LongsRef *self, void *data);
        static PyGetSetDef t_LongsRef__fields_[] = {
          DECLARE_GETSET_FIELD(t_LongsRef, length),
          DECLARE_GETSET_FIELD(t_LongsRef, longs),
          DECLARE_GETSET_FIELD(t_LongsRef, offset),
          DECLARE_GET_FIELD(t_LongsRef, valid),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LongsRef__methods_[] = {
          DECLARE_METHOD(t_LongsRef, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongsRef, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongsRef, clone, METH_NOARGS),
          DECLARE_METHOD(t_LongsRef, compareTo, METH_O),
          DECLARE_METHOD(t_LongsRef, deepCopyOf, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongsRef, equals, METH_VARARGS),
          DECLARE_METHOD(t_LongsRef, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_LongsRef, isValid, METH_NOARGS),
          DECLARE_METHOD(t_LongsRef, longsEquals, METH_O),
          DECLARE_METHOD(t_LongsRef, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LongsRef, t_LongsRef, ::java::lang::Object, LongsRef, t_LongsRef_init_, 0, 0, t_LongsRef__fields_, 0, 0);

        void t_LongsRef::install(PyObject *module)
        {
          installType(&PY_TYPE(LongsRef), module, "LongsRef", 0);
        }

        void t_LongsRef::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LongsRef).tp_dict, "class_", make_descriptor(LongsRef::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LongsRef).tp_dict, "wrapfn_", make_descriptor(t_LongsRef::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LongsRef).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(LongsRef::initializeClass);
          PyDict_SetItemString(PY_TYPE(LongsRef).tp_dict, "EMPTY_LONGS", make_descriptor(LongsRef::EMPTY_LONGS->wrap()));
        }

        static PyObject *t_LongsRef_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LongsRef::initializeClass, 1)))
            return NULL;
          return t_LongsRef::wrap_Object(LongsRef(((t_LongsRef *) arg)->object.this$));
        }
        static PyObject *t_LongsRef_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LongsRef::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LongsRef_init_(t_LongsRef *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              LongsRef object((jobject) NULL);

              INT_CALL(object = LongsRef());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              jint a0;
              LongsRef object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = LongsRef(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              jint a2;
              LongsRef object((jobject) NULL);

              if (!parseArgs(args, "[JII", &a0, &a1, &a2))
              {
                INT_CALL(object = LongsRef(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LongsRef_clone(t_LongsRef *self)
        {
          LongsRef result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_LongsRef::wrap_Object(result);
        }

        static PyObject *t_LongsRef_compareTo(t_LongsRef *self, PyObject *arg)
        {
          LongsRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", LongsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.compareTo(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
          return NULL;
        }

        static PyObject *t_LongsRef_deepCopyOf(PyTypeObject *type, PyObject *arg)
        {
          LongsRef a0((jobject) NULL);
          LongsRef result((jobject) NULL);

          if (!parseArg(arg, "k", LongsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::LongsRef::deepCopyOf(a0));
            return t_LongsRef::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "deepCopyOf", arg);
          return NULL;
        }

        static PyObject *t_LongsRef_equals(t_LongsRef *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(LongsRef), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_LongsRef_hashCode(t_LongsRef *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(LongsRef), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_LongsRef_isValid(t_LongsRef *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isValid());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_LongsRef_longsEquals(t_LongsRef *self, PyObject *arg)
        {
          LongsRef a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", LongsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.longsEquals(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "longsEquals", arg);
          return NULL;
        }

        static PyObject *t_LongsRef_toString(t_LongsRef *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(LongsRef), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_LongsRef_get__length(t_LongsRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_length());
          return PyInt_FromLong((long) value);
        }
        static int t_LongsRef_set__length(t_LongsRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_length(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "length", arg);
          return -1;
        }

        static PyObject *t_LongsRef_get__longs(t_LongsRef *self, void *data)
        {
          JArray< jlong > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_longs());
          return value.wrap();
        }
        static int t_LongsRef_set__longs(t_LongsRef *self, PyObject *arg, void *data)
        {
          JArray< jlong > value((jobject) NULL);
          if (!parseArg(arg, "[J", &value))
          {
            INT_CALL(self->object._set_longs(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "longs", arg);
          return -1;
        }

        static PyObject *t_LongsRef_get__offset(t_LongsRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_offset());
          return PyInt_FromLong((long) value);
        }
        static int t_LongsRef_set__offset(t_LongsRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_offset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "offset", arg);
          return -1;
        }

        static PyObject *t_LongsRef_get__valid(t_LongsRef *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isValid());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/std31/UAX29URLEmailTokenizerImpl31.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std31 {

            ::java::lang::Class *UAX29URLEmailTokenizerImpl31::class$ = NULL;
            jmethodID *UAX29URLEmailTokenizerImpl31::mids$ = NULL;
            bool UAX29URLEmailTokenizerImpl31::live$ = false;
            jint UAX29URLEmailTokenizerImpl31::EMAIL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::HANGUL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::HIRAGANA_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::IDEOGRAPHIC_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::KATAKANA_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::NUMERIC_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::URL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::WORD_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::YYEOF = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::YYINITIAL = (jint) 0;

            jclass UAX29URLEmailTokenizerImpl31::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/std31/UAX29URLEmailTokenizerImpl31");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
                mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
                mids$[mid_setBufferSize_39c7bd3c] = env->getMethodID(cls, "setBufferSize", "(I)V");
                mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
                mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                EMAIL_TYPE = env->getStaticIntField(cls, "EMAIL_TYPE");
                HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
                HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
                IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
                KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
                NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
                SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
                URL_TYPE = env->getStaticIntField(cls, "URL_TYPE");
                WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
                YYEOF = env->getStaticIntField(cls, "YYEOF");
                YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            UAX29URLEmailTokenizerImpl31::UAX29URLEmailTokenizerImpl31(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

            jint UAX29URLEmailTokenizerImpl31::getNextToken() const
            {
              return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
            }

            void UAX29URLEmailTokenizerImpl31::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
            }

            void UAX29URLEmailTokenizerImpl31::setBufferSize(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setBufferSize_39c7bd3c], a0);
            }

            void UAX29URLEmailTokenizerImpl31::yybegin(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
            }

            jint UAX29URLEmailTokenizerImpl31::yychar() const
            {
              return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
            }

            jchar UAX29URLEmailTokenizerImpl31::yycharat(jint a0) const
            {
              return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
            }

            void UAX29URLEmailTokenizerImpl31::yyclose() const
            {
              env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
            }

            jint UAX29URLEmailTokenizerImpl31::yylength() const
            {
              return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
            }

            void UAX29URLEmailTokenizerImpl31::yypushback(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
            }

            void UAX29URLEmailTokenizerImpl31::yyreset(const ::java::io::Reader & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
            }

            jint UAX29URLEmailTokenizerImpl31::yystate() const
            {
              return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
            }

            ::java::lang::String UAX29URLEmailTokenizerImpl31::yytext() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std31 {
            static PyObject *t_UAX29URLEmailTokenizerImpl31_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_instance_(PyTypeObject *type, PyObject *arg);
            static int t_UAX29URLEmailTokenizerImpl31_init_(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *args, PyObject *kwds);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_getNextToken(t_UAX29URLEmailTokenizerImpl31 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_getText(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_setBufferSize(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yybegin(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yychar(t_UAX29URLEmailTokenizerImpl31 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yycharat(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yyclose(t_UAX29URLEmailTokenizerImpl31 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yylength(t_UAX29URLEmailTokenizerImpl31 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yypushback(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yyreset(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yystate(t_UAX29URLEmailTokenizerImpl31 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yytext(t_UAX29URLEmailTokenizerImpl31 *self);
            static int t_UAX29URLEmailTokenizerImpl31_set__bufferSize(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg, void *data);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_get__nextToken(t_UAX29URLEmailTokenizerImpl31 *self, void *data);
            static PyGetSetDef t_UAX29URLEmailTokenizerImpl31__fields_[] = {
              DECLARE_SET_FIELD(t_UAX29URLEmailTokenizerImpl31, bufferSize),
              DECLARE_GET_FIELD(t_UAX29URLEmailTokenizerImpl31, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_UAX29URLEmailTokenizerImpl31__methods_[] = {
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, getText, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, setBufferSize, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yybegin, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yychar, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yycharat, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yyclose, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yylength, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yypushback, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yyreset, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yystate, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yytext, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(UAX29URLEmailTokenizerImpl31, t_UAX29URLEmailTokenizerImpl31, ::java::lang::Object, UAX29URLEmailTokenizerImpl31, t_UAX29URLEmailTokenizerImpl31_init_, 0, 0, t_UAX29URLEmailTokenizerImpl31__fields_, 0, 0);

            void t_UAX29URLEmailTokenizerImpl31::install(PyObject *module)
            {
              installType(&PY_TYPE(UAX29URLEmailTokenizerImpl31), module, "UAX29URLEmailTokenizerImpl31", 0);
            }

            void t_UAX29URLEmailTokenizerImpl31::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "class_", make_descriptor(UAX29URLEmailTokenizerImpl31::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "wrapfn_", make_descriptor(t_UAX29URLEmailTokenizerImpl31::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(UAX29URLEmailTokenizerImpl31::initializeClass);
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "EMAIL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::EMAIL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "HANGUL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::HANGUL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "HIRAGANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::HIRAGANA_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::IDEOGRAPHIC_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "KATAKANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::KATAKANA_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "NUMERIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::NUMERIC_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::SOUTH_EAST_ASIAN_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "URL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::URL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "WORD_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::WORD_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "YYEOF", make_descriptor(UAX29URLEmailTokenizerImpl31::YYEOF));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "YYINITIAL", make_descriptor(UAX29URLEmailTokenizerImpl31::YYINITIAL));
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, UAX29URLEmailTokenizerImpl31::initializeClass, 1)))
                return NULL;
              return t_UAX29URLEmailTokenizerImpl31::wrap_Object(UAX29URLEmailTokenizerImpl31(((t_UAX29URLEmailTokenizerImpl31 *) arg)->object.this$));
            }
            static PyObject *t_UAX29URLEmailTokenizerImpl31_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, UAX29URLEmailTokenizerImpl31::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_UAX29URLEmailTokenizerImpl31_init_(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::Reader a0((jobject) NULL);
              UAX29URLEmailTokenizerImpl31 object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                INT_CALL(object = UAX29URLEmailTokenizerImpl31(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_getNextToken(t_UAX29URLEmailTokenizerImpl31 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNextToken());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_getText(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
              {
                OBJ_CALL(self->object.getText(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "getText", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_setBufferSize(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setBufferSize(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setBufferSize", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yybegin(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yybegin(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yychar(t_UAX29URLEmailTokenizerImpl31 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yychar());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yycharat(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg)
            {
              jint a0;
              jchar result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.yycharat(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yyclose(t_UAX29URLEmailTokenizerImpl31 *self)
            {
              OBJ_CALL(self->object.yyclose());
              Py_RETURN_NONE;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yylength(t_UAX29URLEmailTokenizerImpl31 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yylength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yypushback(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yypushback(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yyreset(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg)
            {
              ::java::io::Reader a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
              {
                OBJ_CALL(self->object.yyreset(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yystate(t_UAX29URLEmailTokenizerImpl31 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yystate());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yytext(t_UAX29URLEmailTokenizerImpl31 *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.yytext());
              return j2p(result);
            }

            static int t_UAX29URLEmailTokenizerImpl31_set__bufferSize(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setBufferSize(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "bufferSize", arg);
              return -1;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_get__nextToken(t_UAX29URLEmailTokenizerImpl31 *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNextToken());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/LockStressTest.h"
#include "java/lang/Exception.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *LockStressTest::class$ = NULL;
        jmethodID *LockStressTest::mids$ = NULL;
        bool LockStressTest::live$ = false;

        jclass LockStressTest::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/LockStressTest");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LockStressTest::LockStressTest() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void LockStressTest::main(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_LockStressTest_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LockStressTest_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LockStressTest_init_(t_LockStressTest *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LockStressTest_main(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_LockStressTest__methods_[] = {
          DECLARE_METHOD(t_LockStressTest, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockStressTest, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockStressTest, main, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LockStressTest, t_LockStressTest, ::java::lang::Object, LockStressTest, t_LockStressTest_init_, 0, 0, 0, 0, 0);

        void t_LockStressTest::install(PyObject *module)
        {
          installType(&PY_TYPE(LockStressTest), module, "LockStressTest", 0);
        }

        void t_LockStressTest::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LockStressTest).tp_dict, "class_", make_descriptor(LockStressTest::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LockStressTest).tp_dict, "wrapfn_", make_descriptor(t_LockStressTest::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LockStressTest).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LockStressTest_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LockStressTest::initializeClass, 1)))
            return NULL;
          return t_LockStressTest::wrap_Object(LockStressTest(((t_LockStressTest *) arg)->object.this$));
        }
        static PyObject *t_LockStressTest_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LockStressTest::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LockStressTest_init_(t_LockStressTest *self, PyObject *args, PyObject *kwds)
        {
          LockStressTest object((jobject) NULL);

          INT_CALL(object = LockStressTest());
          self->object = object;

          return 0;
        }

        static PyObject *t_LockStressTest_main(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::java::lang::String > a0((jobject) NULL);

          if (!parseArg(arg, "[s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::store::LockStressTest::main(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "main", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Optimizer2.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Optimizer2::class$ = NULL;
      jmethodID *Optimizer2::mids$ = NULL;
      bool Optimizer2::live$ = false;

      jclass Optimizer2::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Optimizer2");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Optimizer2::Optimizer2() : ::org::egothor::stemmer::Optimizer(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Optimizer2_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Optimizer2_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Optimizer2_init_(t_Optimizer2 *self, PyObject *args, PyObject *kwds);

      static PyMethodDef t_Optimizer2__methods_[] = {
        DECLARE_METHOD(t_Optimizer2, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Optimizer2, instance_, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Optimizer2, t_Optimizer2, ::org::egothor::stemmer::Optimizer, Optimizer2, t_Optimizer2_init_, 0, 0, 0, 0, 0);

      void t_Optimizer2::install(PyObject *module)
      {
        installType(&PY_TYPE(Optimizer2), module, "Optimizer2", 0);
      }

      void t_Optimizer2::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Optimizer2).tp_dict, "class_", make_descriptor(Optimizer2::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Optimizer2).tp_dict, "wrapfn_", make_descriptor(t_Optimizer2::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Optimizer2).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Optimizer2_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Optimizer2::initializeClass, 1)))
          return NULL;
        return t_Optimizer2::wrap_Object(Optimizer2(((t_Optimizer2 *) arg)->object.this$));
      }
      static PyObject *t_Optimizer2_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Optimizer2::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Optimizer2_init_(t_Optimizer2 *self, PyObject *args, PyObject *kwds)
      {
        Optimizer2 object((jobject) NULL);

        INT_CALL(object = Optimizer2());
        self->object = object;

        return 0;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/MergedIterator.h"
#include "java/util/Iterator.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *MergedIterator::class$ = NULL;
        jmethodID *MergedIterator::mids$ = NULL;
        bool MergedIterator::live$ = false;

        jclass MergedIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/MergedIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_1b3aeeed] = env->getMethodID(cls, "<init>", "([Ljava/util/Iterator;)V");
            mids$[mid_init$_287ab92a] = env->getMethodID(cls, "<init>", "(Z[Ljava/util/Iterator;)V");
            mids$[mid_hasNext_54c6a16a] = env->getMethodID(cls, "hasNext", "()Z");
            mids$[mid_next_c6fd33d8] = env->getMethodID(cls, "next", "()Ljava/lang/Comparable;");
            mids$[mid_remove_54c6a166] = env->getMethodID(cls, "remove", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergedIterator::MergedIterator(const JArray< ::java::util::Iterator > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1b3aeeed, a0.this$)) {}

        MergedIterator::MergedIterator(jboolean a0, const JArray< ::java::util::Iterator > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_287ab92a, a0, a1.this$)) {}

        jboolean MergedIterator::hasNext() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasNext_54c6a16a]);
        }

        ::java::lang::Comparable MergedIterator::next() const
        {
          return ::java::lang::Comparable(env->callObjectMethod(this$, mids$[mid_next_c6fd33d8]));
        }

        void MergedIterator::remove() const
        {
          env->callVoidMethod(this$, mids$[mid_remove_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_MergedIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergedIterator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergedIterator_of_(t_MergedIterator *self, PyObject *args);
        static int t_MergedIterator_init_(t_MergedIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergedIterator_hasNext(t_MergedIterator *self);
        static PyObject *t_MergedIterator_next(t_MergedIterator *self);
        static PyObject *t_MergedIterator_remove(t_MergedIterator *self);
        static PyObject *t_MergedIterator_get__parameters_(t_MergedIterator *self, void *data);
        static PyGetSetDef t_MergedIterator__fields_[] = {
          DECLARE_GET_FIELD(t_MergedIterator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergedIterator__methods_[] = {
          DECLARE_METHOD(t_MergedIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergedIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergedIterator, of_, METH_VARARGS),
          DECLARE_METHOD(t_MergedIterator, hasNext, METH_NOARGS),
          DECLARE_METHOD(t_MergedIterator, next, METH_NOARGS),
          DECLARE_METHOD(t_MergedIterator, remove, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergedIterator, t_MergedIterator, ::java::lang::Object, MergedIterator, t_MergedIterator_init_, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Iterator *)) get_generic_iterator_next< ::java::util::t_Iterator,::java::lang::t_Comparable >), t_MergedIterator__fields_, 0, 0);
        PyObject *t_MergedIterator::wrap_Object(const MergedIterator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MergedIterator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MergedIterator *self = (t_MergedIterator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MergedIterator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MergedIterator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MergedIterator *self = (t_MergedIterator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MergedIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(MergedIterator), module, "MergedIterator", 0);
        }

        void t_MergedIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergedIterator).tp_dict, "class_", make_descriptor(MergedIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergedIterator).tp_dict, "wrapfn_", make_descriptor(t_MergedIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergedIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergedIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergedIterator::initializeClass, 1)))
            return NULL;
          return t_MergedIterator::wrap_Object(MergedIterator(((t_MergedIterator *) arg)->object.this$));
        }
        static PyObject *t_MergedIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergedIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MergedIterator_of_(t_MergedIterator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_MergedIterator_init_(t_MergedIterator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::util::Iterator > a0((jobject) NULL);
              PyTypeObject **p0;
              MergedIterator object((jobject) NULL);

              if (!parseArgs(args, "[K", ::java::util::Iterator::initializeClass, &a0, &p0, ::java::util::t_Iterator::parameters_))
              {
                INT_CALL(object = MergedIterator(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jboolean a0;
              JArray< ::java::util::Iterator > a1((jobject) NULL);
              PyTypeObject **p1;
              MergedIterator object((jobject) NULL);

              if (!parseArgs(args, "Z[K", ::java::util::Iterator::initializeClass, &a0, &a1, &p1, ::java::util::t_Iterator::parameters_))
              {
                INT_CALL(object = MergedIterator(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MergedIterator_hasNext(t_MergedIterator *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasNext());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_MergedIterator_next(t_MergedIterator *self)
        {
          ::java::lang::Comparable result((jobject) NULL);
          OBJ_CALL(result = self->object.next());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Comparable::wrap_Object(result);
        }

        static PyObject *t_MergedIterator_remove(t_MergedIterator *self)
        {
          OBJ_CALL(self->object.remove());
          Py_RETURN_NONE;
        }
        static PyObject *t_MergedIterator_get__parameters_(t_MergedIterator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "java/util/Set.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/NamedSPILoader$NamedSPI.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *DocValuesFormat::class$ = NULL;
        jmethodID *DocValuesFormat::mids$ = NULL;
        bool DocValuesFormat::live$ = false;

        jclass DocValuesFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/DocValuesFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_availableDocValuesFormats_03e99967] = env->getStaticMethodID(cls, "availableDocValuesFormats", "()Ljava/util/Set;");
            mids$[mid_fieldsConsumer_025deb44] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
            mids$[mid_fieldsProducer_9b0d4e4a] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");
            mids$[mid_forName_36ef78ba] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/DocValuesFormat;");
            mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
            mids$[mid_reloadDocValuesFormats_9110048d] = env->getStaticMethodID(cls, "reloadDocValuesFormats", "(Ljava/lang/ClassLoader;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Set DocValuesFormat::availableDocValuesFormats()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_availableDocValuesFormats_03e99967]));
        }

        ::org::apache::lucene::codecs::DocValuesConsumer DocValuesFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
        {
          return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_025deb44], a0.this$));
        }

        ::org::apache::lucene::codecs::DocValuesProducer DocValuesFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
        {
          return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_9b0d4e4a], a0.this$));
        }

        DocValuesFormat DocValuesFormat::forName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DocValuesFormat(env->callStaticObjectMethod(cls, mids$[mid_forName_36ef78ba], a0.this$));
        }

        ::java::lang::String DocValuesFormat::getName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
        }

        void DocValuesFormat::reloadDocValuesFormats(const ::java::lang::ClassLoader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_reloadDocValuesFormats_9110048d], a0.this$);
        }

        ::java::lang::String DocValuesFormat::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesFormat_availableDocValuesFormats(PyTypeObject *type);
        static PyObject *t_DocValuesFormat_fieldsConsumer(t_DocValuesFormat *self, PyObject *arg);
        static PyObject *t_DocValuesFormat_fieldsProducer(t_DocValuesFormat *self, PyObject *arg);
        static PyObject *t_DocValuesFormat_forName(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesFormat_getName(t_DocValuesFormat *self);
        static PyObject *t_DocValuesFormat_reloadDocValuesFormats(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesFormat_toString(t_DocValuesFormat *self, PyObject *args);
        static PyObject *t_DocValuesFormat_get__name(t_DocValuesFormat *self, void *data);
        static PyGetSetDef t_DocValuesFormat__fields_[] = {
          DECLARE_GET_FIELD(t_DocValuesFormat, name),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocValuesFormat__methods_[] = {
          DECLARE_METHOD(t_DocValuesFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesFormat, availableDocValuesFormats, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValuesFormat, fieldsConsumer, METH_O),
          DECLARE_METHOD(t_DocValuesFormat, fieldsProducer, METH_O),
          DECLARE_METHOD(t_DocValuesFormat, forName, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesFormat, getName, METH_NOARGS),
          DECLARE_METHOD(t_DocValuesFormat, reloadDocValuesFormats, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesFormat, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocValuesFormat, t_DocValuesFormat, ::java::lang::Object, DocValuesFormat, abstract_init, 0, 0, t_DocValuesFormat__fields_, 0, 0);

        void t_DocValuesFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValuesFormat), module, "DocValuesFormat", 0);
        }

        void t_DocValuesFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocValuesFormat).tp_dict, "class_", make_descriptor(DocValuesFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocValuesFormat).tp_dict, "wrapfn_", make_descriptor(t_DocValuesFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocValuesFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValuesFormat::initializeClass, 1)))
            return NULL;
          return t_DocValuesFormat::wrap_Object(DocValuesFormat(((t_DocValuesFormat *) arg)->object.this$));
        }
        static PyObject *t_DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValuesFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocValuesFormat_availableDocValuesFormats(PyTypeObject *type)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::codecs::DocValuesFormat::availableDocValuesFormats());
          return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_DocValuesFormat_fieldsConsumer(t_DocValuesFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
          ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.fieldsConsumer(a0));
            return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fieldsConsumer", arg);
          return NULL;
        }

        static PyObject *t_DocValuesFormat_fieldsProducer(t_DocValuesFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
          ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.fieldsProducer(a0));
            return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fieldsProducer", arg);
          return NULL;
        }

        static PyObject *t_DocValuesFormat_forName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          DocValuesFormat result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::DocValuesFormat::forName(a0));
            return t_DocValuesFormat::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "forName", arg);
          return NULL;
        }

        static PyObject *t_DocValuesFormat_getName(t_DocValuesFormat *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getName());
          return j2p(result);
        }

        static PyObject *t_DocValuesFormat_reloadDocValuesFormats(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::ClassLoader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::codecs::DocValuesFormat::reloadDocValuesFormats(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "reloadDocValuesFormats", arg);
          return NULL;
        }

        static PyObject *t_DocValuesFormat_toString(t_DocValuesFormat *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(DocValuesFormat), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_DocValuesFormat_get__name(t_DocValuesFormat *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getName());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexReader$ReaderClosedListener.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexReader$ReaderClosedListener::class$ = NULL;
        jmethodID *IndexReader$ReaderClosedListener::mids$ = NULL;
        bool IndexReader$ReaderClosedListener::live$ = false;

        jclass IndexReader$ReaderClosedListener::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexReader$ReaderClosedListener");

            mids$ = new jmethodID[max_mid];
            mids$[mid_onClose_7d7eaea9] = env->getMethodID(cls, "onClose", "(Lorg/apache/lucene/index/IndexReader;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void IndexReader$ReaderClosedListener::onClose(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onClose_7d7eaea9], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexReader$ReaderClosedListener_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexReader$ReaderClosedListener_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexReader$ReaderClosedListener_onClose(t_IndexReader$ReaderClosedListener *self, PyObject *arg);

        static PyMethodDef t_IndexReader$ReaderClosedListener__methods_[] = {
          DECLARE_METHOD(t_IndexReader$ReaderClosedListener, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexReader$ReaderClosedListener, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexReader$ReaderClosedListener, onClose, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexReader$ReaderClosedListener, t_IndexReader$ReaderClosedListener, ::java::lang::Object, IndexReader$ReaderClosedListener, abstract_init, 0, 0, 0, 0, 0);

        void t_IndexReader$ReaderClosedListener::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexReader$ReaderClosedListener), module, "IndexReader$ReaderClosedListener", 0);
        }

        void t_IndexReader$ReaderClosedListener::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexReader$ReaderClosedListener).tp_dict, "class_", make_descriptor(IndexReader$ReaderClosedListener::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexReader$ReaderClosedListener).tp_dict, "wrapfn_", make_descriptor(t_IndexReader$ReaderClosedListener::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexReader$ReaderClosedListener).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexReader$ReaderClosedListener_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexReader$ReaderClosedListener::initializeClass, 1)))
            return NULL;
          return t_IndexReader$ReaderClosedListener::wrap_Object(IndexReader$ReaderClosedListener(((t_IndexReader$ReaderClosedListener *) arg)->object.this$));
        }
        static PyObject *t_IndexReader$ReaderClosedListener_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexReader$ReaderClosedListener::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexReader$ReaderClosedListener_onClose(t_IndexReader$ReaderClosedListener *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.onClose(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "onClose", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/ext/ExtendableQueryParser.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/ext/Extensions.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {

          ::java::lang::Class *ExtendableQueryParser::class$ = NULL;
          jmethodID *ExtendableQueryParser::mids$ = NULL;
          bool ExtendableQueryParser::live$ = false;

          jclass ExtendableQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/ext/ExtendableQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d77cc89a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_init$_b899157c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/queryparser/ext/Extensions;)V");
              mids$[mid_init$_504c192d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_init$_5a825d0f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/queryparser/ext/Extensions;)V");
              mids$[mid_getExtensionFieldDelimiter_54c6a173] = env->getMethodID(cls, "getExtensionFieldDelimiter", "()C");
              mids$[mid_getFieldQuery_bd696f55] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ExtendableQueryParser::ExtendableQueryParser(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_d77cc89a, a0.this$, a1.this$)) {}

          ExtendableQueryParser::ExtendableQueryParser(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::Analyzer & a1, const ::org::apache::lucene::queryparser::ext::Extensions & a2) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_b899157c, a0.this$, a1.this$, a2.this$)) {}

          ExtendableQueryParser::ExtendableQueryParser(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_504c192d, a0.this$, a1.this$, a2.this$)) {}

          ExtendableQueryParser::ExtendableQueryParser(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2, const ::org::apache::lucene::queryparser::ext::Extensions & a3) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_5a825d0f, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          jchar ExtendableQueryParser::getExtensionFieldDelimiter() const
          {
            return env->callCharMethod(this$, mids$[mid_getExtensionFieldDelimiter_54c6a173]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {
          static PyObject *t_ExtendableQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ExtendableQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ExtendableQueryParser_init_(t_ExtendableQueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ExtendableQueryParser_getExtensionFieldDelimiter(t_ExtendableQueryParser *self);
          static PyObject *t_ExtendableQueryParser_get__extensionFieldDelimiter(t_ExtendableQueryParser *self, void *data);
          static PyGetSetDef t_ExtendableQueryParser__fields_[] = {
            DECLARE_GET_FIELD(t_ExtendableQueryParser, extensionFieldDelimiter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ExtendableQueryParser__methods_[] = {
            DECLARE_METHOD(t_ExtendableQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ExtendableQueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ExtendableQueryParser, getExtensionFieldDelimiter, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ExtendableQueryParser, t_ExtendableQueryParser, ::org::apache::lucene::queryparser::classic::QueryParser, ExtendableQueryParser, t_ExtendableQueryParser_init_, 0, 0, t_ExtendableQueryParser__fields_, 0, 0);

          void t_ExtendableQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(ExtendableQueryParser), module, "ExtendableQueryParser", 0);
          }

          void t_ExtendableQueryParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ExtendableQueryParser).tp_dict, "class_", make_descriptor(ExtendableQueryParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ExtendableQueryParser).tp_dict, "wrapfn_", make_descriptor(t_ExtendableQueryParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ExtendableQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ExtendableQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ExtendableQueryParser::initializeClass, 1)))
              return NULL;
            return t_ExtendableQueryParser::wrap_Object(ExtendableQueryParser(((t_ExtendableQueryParser *) arg)->object.this$));
          }
          static PyObject *t_ExtendableQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ExtendableQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ExtendableQueryParser_init_(t_ExtendableQueryParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                ExtendableQueryParser object((jobject) NULL);

                if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ExtendableQueryParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                ::org::apache::lucene::queryparser::ext::Extensions a2((jobject) NULL);
                ExtendableQueryParser object((jobject) NULL);

                if (!parseArgs(args, "skk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::queryparser::ext::Extensions::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ExtendableQueryParser(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                ExtendableQueryParser object((jobject) NULL);

                if (!parseArgs(args, "ksk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ExtendableQueryParser(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                ::org::apache::lucene::queryparser::ext::Extensions a3((jobject) NULL);
                ExtendableQueryParser object((jobject) NULL);

                if (!parseArgs(args, "kskk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::queryparser::ext::Extensions::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = ExtendableQueryParser(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ExtendableQueryParser_getExtensionFieldDelimiter(t_ExtendableQueryParser *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.getExtensionFieldDelimiter());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_ExtendableQueryParser_get__extensionFieldDelimiter(t_ExtendableQueryParser *self, void *data)
          {
            jchar value;
            OBJ_CALL(value = self->object.getExtensionFieldDelimiter());
            return PyUnicode_FromUnicode((Py_UNICODE *) &value, 1);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$DiskOrdinalMap.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/IOException.h"
#include "java/io/File.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {

            ::java::lang::Class *DirectoryTaxonomyWriter$DiskOrdinalMap::class$ = NULL;
            jmethodID *DirectoryTaxonomyWriter$DiskOrdinalMap::mids$ = NULL;
            bool DirectoryTaxonomyWriter$DiskOrdinalMap::live$ = false;

            jclass DirectoryTaxonomyWriter$DiskOrdinalMap::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$DiskOrdinalMap");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
                mids$[mid_addDone_54c6a166] = env->getMethodID(cls, "addDone", "()V");
                mids$[mid_addMapping_d8d154a6] = env->getMethodID(cls, "addMapping", "(II)V");
                mids$[mid_getMap_dab10e75] = env->getMethodID(cls, "getMap", "()[I");
                mids$[mid_setSize_39c7bd3c] = env->getMethodID(cls, "setSize", "(I)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DirectoryTaxonomyWriter$DiskOrdinalMap::DirectoryTaxonomyWriter$DiskOrdinalMap(const ::java::io::File & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

            void DirectoryTaxonomyWriter$DiskOrdinalMap::addDone() const
            {
              env->callVoidMethod(this$, mids$[mid_addDone_54c6a166]);
            }

            void DirectoryTaxonomyWriter$DiskOrdinalMap::addMapping(jint a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addMapping_d8d154a6], a0, a1);
            }

            JArray< jint > DirectoryTaxonomyWriter$DiskOrdinalMap::getMap() const
            {
              return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getMap_dab10e75]));
            }

            void DirectoryTaxonomyWriter$DiskOrdinalMap::setSize(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setSize_39c7bd3c], a0);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DirectoryTaxonomyWriter$DiskOrdinalMap_init_(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_addDone(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self);
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_addMapping(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_getMap(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self);
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_setSize(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_get__map(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, void *data);
            static int t_DirectoryTaxonomyWriter$DiskOrdinalMap_set__size(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *arg, void *data);
            static PyGetSetDef t_DirectoryTaxonomyWriter$DiskOrdinalMap__fields_[] = {
              DECLARE_GET_FIELD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, map),
              DECLARE_SET_FIELD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, size),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DirectoryTaxonomyWriter$DiskOrdinalMap__methods_[] = {
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, addDone, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, addMapping, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, getMap, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, setSize, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DirectoryTaxonomyWriter$DiskOrdinalMap, t_DirectoryTaxonomyWriter$DiskOrdinalMap, ::java::lang::Object, DirectoryTaxonomyWriter$DiskOrdinalMap, t_DirectoryTaxonomyWriter$DiskOrdinalMap_init_, 0, 0, t_DirectoryTaxonomyWriter$DiskOrdinalMap__fields_, 0, 0);

            void t_DirectoryTaxonomyWriter$DiskOrdinalMap::install(PyObject *module)
            {
              installType(&PY_TYPE(DirectoryTaxonomyWriter$DiskOrdinalMap), module, "DirectoryTaxonomyWriter$DiskOrdinalMap", 0);
            }

            void t_DirectoryTaxonomyWriter$DiskOrdinalMap::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$DiskOrdinalMap).tp_dict, "class_", make_descriptor(DirectoryTaxonomyWriter$DiskOrdinalMap::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$DiskOrdinalMap).tp_dict, "wrapfn_", make_descriptor(t_DirectoryTaxonomyWriter$DiskOrdinalMap::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$DiskOrdinalMap).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DirectoryTaxonomyWriter$DiskOrdinalMap::initializeClass, 1)))
                return NULL;
              return t_DirectoryTaxonomyWriter$DiskOrdinalMap::wrap_Object(DirectoryTaxonomyWriter$DiskOrdinalMap(((t_DirectoryTaxonomyWriter$DiskOrdinalMap *) arg)->object.this$));
            }
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DirectoryTaxonomyWriter$DiskOrdinalMap::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DirectoryTaxonomyWriter$DiskOrdinalMap_init_(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::File a0((jobject) NULL);
              DirectoryTaxonomyWriter$DiskOrdinalMap object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                INT_CALL(object = DirectoryTaxonomyWriter$DiskOrdinalMap(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_addDone(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self)
            {
              OBJ_CALL(self->object.addDone());
              Py_RETURN_NONE;
            }

            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_addMapping(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *args)
            {
              jint a0;
              jint a1;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(self->object.addMapping(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addMapping", args);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_getMap(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self)
            {
              JArray< jint > result((jobject) NULL);
              OBJ_CALL(result = self->object.getMap());
              return result.wrap();
            }

            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_setSize(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setSize(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setSize", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_get__map(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, void *data)
            {
              JArray< jint > value((jobject) NULL);
              OBJ_CALL(value = self->object.getMap());
              return value.wrap();
            }

            static int t_DirectoryTaxonomyWriter$DiskOrdinalMap_set__size(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setSize(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "size", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sv/SwedishAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {

          ::java::lang::Class *SwedishAnalyzer::class$ = NULL;
          jmethodID *SwedishAnalyzer::mids$ = NULL;
          bool SwedishAnalyzer::live$ = false;
          ::java::lang::String *SwedishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass SwedishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sv/SwedishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_3ea629c6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SwedishAnalyzer::SwedishAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          SwedishAnalyzer::SwedishAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          SwedishAnalyzer::SwedishAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          SwedishAnalyzer::SwedishAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_3ea629c6, a0.this$, a1.this$)) {}

          SwedishAnalyzer::SwedishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          SwedishAnalyzer::SwedishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet SwedishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {
          static PyObject *t_SwedishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SwedishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SwedishAnalyzer_init_(t_SwedishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SwedishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_SwedishAnalyzer_get__defaultStopSet(t_SwedishAnalyzer *self, void *data);
          static PyGetSetDef t_SwedishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_SwedishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SwedishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_SwedishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SwedishAnalyzer, t_SwedishAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, SwedishAnalyzer, t_SwedishAnalyzer_init_, 0, 0, t_SwedishAnalyzer__fields_, 0, 0);

          void t_SwedishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(SwedishAnalyzer), module, "SwedishAnalyzer", 0);
          }

          void t_SwedishAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SwedishAnalyzer).tp_dict, "class_", make_descriptor(SwedishAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SwedishAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_SwedishAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SwedishAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SwedishAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(SwedishAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*SwedishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_SwedishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SwedishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_SwedishAnalyzer::wrap_Object(SwedishAnalyzer(((t_SwedishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_SwedishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SwedishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SwedishAnalyzer_init_(t_SwedishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                SwedishAnalyzer object((jobject) NULL);

                INT_CALL(object = SwedishAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                SwedishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SwedishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                SwedishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = SwedishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                SwedishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SwedishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                SwedishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SwedishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                SwedishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SwedishAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SwedishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::sv::SwedishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_SwedishAnalyzer_get__defaultStopSet(t_SwedishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/DOMUtils.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *DOMUtils::class$ = NULL;
          jmethodID *DOMUtils::mids$ = NULL;
          bool DOMUtils::live$ = false;

          jclass DOMUtils::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/DOMUtils");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DOMUtils::DOMUtils() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_DOMUtils_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DOMUtils_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DOMUtils_init_(t_DOMUtils *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_DOMUtils__methods_[] = {
            DECLARE_METHOD(t_DOMUtils, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DOMUtils, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DOMUtils, t_DOMUtils, ::java::lang::Object, DOMUtils, t_DOMUtils_init_, 0, 0, 0, 0, 0);

          void t_DOMUtils::install(PyObject *module)
          {
            installType(&PY_TYPE(DOMUtils), module, "DOMUtils", 0);
          }

          void t_DOMUtils::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DOMUtils).tp_dict, "class_", make_descriptor(DOMUtils::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DOMUtils).tp_dict, "wrapfn_", make_descriptor(t_DOMUtils::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DOMUtils).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DOMUtils_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DOMUtils::initializeClass, 1)))
              return NULL;
            return t_DOMUtils::wrap_Object(DOMUtils(((t_DOMUtils *) arg)->object.this$));
          }
          static PyObject *t_DOMUtils_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DOMUtils::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DOMUtils_init_(t_DOMUtils *self, PyObject *args, PyObject *kwds)
          {
            DOMUtils object((jobject) NULL);

            INT_CALL(object = DOMUtils());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/KeywordMarkerFilter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *KeywordMarkerFilter::class$ = NULL;
          jmethodID *KeywordMarkerFilter::mids$ = NULL;
          bool KeywordMarkerFilter::live$ = false;

          jclass KeywordMarkerFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/KeywordMarkerFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_isKeyword_54c6a16a] = env->getMethodID(cls, "isKeyword", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean KeywordMarkerFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_KeywordMarkerFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordMarkerFilter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordMarkerFilter_incrementToken(t_KeywordMarkerFilter *self, PyObject *args);

          static PyMethodDef t_KeywordMarkerFilter__methods_[] = {
            DECLARE_METHOD(t_KeywordMarkerFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordMarkerFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordMarkerFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordMarkerFilter, t_KeywordMarkerFilter, ::org::apache::lucene::analysis::TokenFilter, KeywordMarkerFilter, abstract_init, 0, 0, 0, 0, 0);

          void t_KeywordMarkerFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordMarkerFilter), module, "KeywordMarkerFilter", 0);
          }

          void t_KeywordMarkerFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordMarkerFilter).tp_dict, "class_", make_descriptor(KeywordMarkerFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordMarkerFilter).tp_dict, "wrapfn_", make_descriptor(t_KeywordMarkerFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordMarkerFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeywordMarkerFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordMarkerFilter::initializeClass, 1)))
              return NULL;
            return t_KeywordMarkerFilter::wrap_Object(KeywordMarkerFilter(((t_KeywordMarkerFilter *) arg)->object.this$));
          }
          static PyObject *t_KeywordMarkerFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordMarkerFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_KeywordMarkerFilter_incrementToken(t_KeywordMarkerFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(KeywordMarkerFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/PhraseQueryNodeBuilder.h"
#include "org/apache/lucene/search/PhraseQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *PhraseQueryNodeBuilder::class$ = NULL;
              jmethodID *PhraseQueryNodeBuilder::mids$ = NULL;
              bool PhraseQueryNodeBuilder::live$ = false;

              jclass PhraseQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/PhraseQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_20a87818] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/PhraseQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PhraseQueryNodeBuilder::PhraseQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::PhraseQuery PhraseQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::PhraseQuery(env->callObjectMethod(this$, mids$[mid_build_20a87818], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_PhraseQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PhraseQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PhraseQueryNodeBuilder_init_(t_PhraseQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PhraseQueryNodeBuilder_build(t_PhraseQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_PhraseQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_PhraseQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PhraseQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PhraseQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(PhraseQueryNodeBuilder, t_PhraseQueryNodeBuilder, ::java::lang::Object, PhraseQueryNodeBuilder, t_PhraseQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_PhraseQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(PhraseQueryNodeBuilder), module, "PhraseQueryNodeBuilder", 0);
              }

              void t_PhraseQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(PhraseQueryNodeBuilder).tp_dict, "class_", make_descriptor(PhraseQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(PhraseQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_PhraseQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(PhraseQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PhraseQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PhraseQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_PhraseQueryNodeBuilder::wrap_Object(PhraseQueryNodeBuilder(((t_PhraseQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_PhraseQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PhraseQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PhraseQueryNodeBuilder_init_(t_PhraseQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                PhraseQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = PhraseQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_PhraseQueryNodeBuilder_build(t_PhraseQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::PhraseQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_PhraseQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/PayloadNearQuery$PayloadNearSpanScorer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *PayloadNearQuery$PayloadNearSpanScorer::class$ = NULL;
          jmethodID *PayloadNearQuery$PayloadNearSpanScorer::mids$ = NULL;
          bool PayloadNearQuery$PayloadNearSpanScorer::live$ = false;

          jclass PayloadNearQuery$PayloadNearSpanScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/PayloadNearQuery$PayloadNearSpanScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getPayloads_a306eb3e] = env->getMethodID(cls, "getPayloads", "([Lorg/apache/lucene/search/spans/Spans;)V");
              mids$[mid_score_54c6a176] = env->getMethodID(cls, "score", "()F");
              mids$[mid_setFreqCurrentDoc_54c6a16a] = env->getMethodID(cls, "setFreqCurrentDoc", "()Z");
              mids$[mid_processPayloads_c09a1e75] = env->getMethodID(cls, "processPayloads", "(Ljava/util/Collection;II)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void PayloadNearQuery$PayloadNearSpanScorer::getPayloads(const JArray< ::org::apache::lucene::search::spans::Spans > & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_getPayloads_a306eb3e], a0.this$);
          }

          jfloat PayloadNearQuery$PayloadNearSpanScorer::score() const
          {
            return env->callFloatMethod(this$, mids$[mid_score_54c6a176]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_PayloadNearQuery$PayloadNearSpanScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadNearQuery$PayloadNearSpanScorer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadNearQuery$PayloadNearSpanScorer_getPayloads(t_PayloadNearQuery$PayloadNearSpanScorer *self, PyObject *arg);
          static PyObject *t_PayloadNearQuery$PayloadNearSpanScorer_score(t_PayloadNearQuery$PayloadNearSpanScorer *self, PyObject *args);

          static PyMethodDef t_PayloadNearQuery$PayloadNearSpanScorer__methods_[] = {
            DECLARE_METHOD(t_PayloadNearQuery$PayloadNearSpanScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadNearQuery$PayloadNearSpanScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadNearQuery$PayloadNearSpanScorer, getPayloads, METH_O),
            DECLARE_METHOD(t_PayloadNearQuery$PayloadNearSpanScorer, score, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadNearQuery$PayloadNearSpanScorer, t_PayloadNearQuery$PayloadNearSpanScorer, ::org::apache::lucene::search::spans::SpanScorer, PayloadNearQuery$PayloadNearSpanScorer, abstract_init, 0, 0, 0, 0, 0);

          void t_PayloadNearQuery$PayloadNearSpanScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadNearQuery$PayloadNearSpanScorer), module, "PayloadNearQuery$PayloadNearSpanScorer", 0);
          }

          void t_PayloadNearQuery$PayloadNearSpanScorer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery$PayloadNearSpanScorer).tp_dict, "class_", make_descriptor(PayloadNearQuery$PayloadNearSpanScorer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery$PayloadNearSpanScorer).tp_dict, "wrapfn_", make_descriptor(t_PayloadNearQuery$PayloadNearSpanScorer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery$PayloadNearSpanScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadNearQuery$PayloadNearSpanScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadNearQuery$PayloadNearSpanScorer::initializeClass, 1)))
              return NULL;
            return t_PayloadNearQuery$PayloadNearSpanScorer::wrap_Object(PayloadNearQuery$PayloadNearSpanScorer(((t_PayloadNearQuery$PayloadNearSpanScorer *) arg)->object.this$));
          }
          static PyObject *t_PayloadNearQuery$PayloadNearSpanScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadNearQuery$PayloadNearSpanScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PayloadNearQuery$PayloadNearSpanScorer_getPayloads(t_PayloadNearQuery$PayloadNearSpanScorer *self, PyObject *arg)
          {
            JArray< ::org::apache::lucene::search::spans::Spans > a0((jobject) NULL);

            if (!parseArg(arg, "[k", ::org::apache::lucene::search::spans::Spans::initializeClass, &a0))
            {
              OBJ_CALL(self->object.getPayloads(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "getPayloads", arg);
            return NULL;
          }

          static PyObject *t_PayloadNearQuery$PayloadNearSpanScorer_score(t_PayloadNearQuery$PayloadNearSpanScorer *self, PyObject *args)
          {
            jfloat result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.score());
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(PayloadNearQuery$PayloadNearSpanScorer), (PyObject *) self, "score", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/ModifierQueryNodeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *ModifierQueryNodeBuilder::class$ = NULL;
              jmethodID *ModifierQueryNodeBuilder::mids$ = NULL;
              bool ModifierQueryNodeBuilder::live$ = false;

              jclass ModifierQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/ModifierQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_7f6ce179] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/Query;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ModifierQueryNodeBuilder::ModifierQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::Query ModifierQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_build_7f6ce179], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_ModifierQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ModifierQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_ModifierQueryNodeBuilder_init_(t_ModifierQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_ModifierQueryNodeBuilder_build(t_ModifierQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_ModifierQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_ModifierQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ModifierQueryNodeBuilder, t_ModifierQueryNodeBuilder, ::java::lang::Object, ModifierQueryNodeBuilder, t_ModifierQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_ModifierQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(ModifierQueryNodeBuilder), module, "ModifierQueryNodeBuilder", 0);
              }

              void t_ModifierQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ModifierQueryNodeBuilder).tp_dict, "class_", make_descriptor(ModifierQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ModifierQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_ModifierQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ModifierQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ModifierQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ModifierQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_ModifierQueryNodeBuilder::wrap_Object(ModifierQueryNodeBuilder(((t_ModifierQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_ModifierQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ModifierQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_ModifierQueryNodeBuilder_init_(t_ModifierQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                ModifierQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = ModifierQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_ModifierQueryNodeBuilder_build(t_ModifierQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SearcherLifetimeManager$Pruner.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SearcherLifetimeManager$Pruner::class$ = NULL;
        jmethodID *SearcherLifetimeManager$Pruner::mids$ = NULL;
        bool SearcherLifetimeManager$Pruner::live$ = false;

        jclass SearcherLifetimeManager$Pruner::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SearcherLifetimeManager$Pruner");

            mids$ = new jmethodID[max_mid];
            mids$[mid_doPrune_362c747b] = env->getMethodID(cls, "doPrune", "(DLorg/apache/lucene/search/IndexSearcher;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean SearcherLifetimeManager$Pruner::doPrune(jdouble a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
        {
          return env->callBooleanMethod(this$, mids$[mid_doPrune_362c747b], a0, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SearcherLifetimeManager$Pruner_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager$Pruner_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager$Pruner_doPrune(t_SearcherLifetimeManager$Pruner *self, PyObject *args);

        static PyMethodDef t_SearcherLifetimeManager$Pruner__methods_[] = {
          DECLARE_METHOD(t_SearcherLifetimeManager$Pruner, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherLifetimeManager$Pruner, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherLifetimeManager$Pruner, doPrune, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SearcherLifetimeManager$Pruner, t_SearcherLifetimeManager$Pruner, ::java::lang::Object, SearcherLifetimeManager$Pruner, abstract_init, 0, 0, 0, 0, 0);

        void t_SearcherLifetimeManager$Pruner::install(PyObject *module)
        {
          installType(&PY_TYPE(SearcherLifetimeManager$Pruner), module, "SearcherLifetimeManager$Pruner", 0);
        }

        void t_SearcherLifetimeManager$Pruner::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager$Pruner).tp_dict, "class_", make_descriptor(SearcherLifetimeManager$Pruner::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager$Pruner).tp_dict, "wrapfn_", make_descriptor(t_SearcherLifetimeManager$Pruner::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager$Pruner).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SearcherLifetimeManager$Pruner_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SearcherLifetimeManager$Pruner::initializeClass, 1)))
            return NULL;
          return t_SearcherLifetimeManager$Pruner::wrap_Object(SearcherLifetimeManager$Pruner(((t_SearcherLifetimeManager$Pruner *) arg)->object.this$));
        }
        static PyObject *t_SearcherLifetimeManager$Pruner_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SearcherLifetimeManager$Pruner::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SearcherLifetimeManager$Pruner_doPrune(t_SearcherLifetimeManager$Pruner *self, PyObject *args)
        {
          jdouble a0;
          ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "Dk", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.doPrune(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "doPrune", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefArray.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/util/Counter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefArray::class$ = NULL;
        jmethodID *BytesRefArray::mids$ = NULL;
        bool BytesRefArray::live$ = false;

        jclass BytesRefArray::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefArray");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4ae88947] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Counter;)V");
            mids$[mid_append_7bc03ddb] = env->getMethodID(cls, "append", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_get_7b543325] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/util/BytesRefBuilder;I)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_iterator_534dea83] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/util/BytesRefIterator;");
            mids$[mid_iterator_8d21877c] = env->getMethodID(cls, "iterator", "(Ljava/util/Comparator;)Lorg/apache/lucene/util/BytesRefIterator;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BytesRefArray::BytesRefArray(const ::org::apache::lucene::util::Counter & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4ae88947, a0.this$)) {}

        jint BytesRefArray::append(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_append_7bc03ddb], a0.this$);
        }

        void BytesRefArray::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        ::org::apache::lucene::util::BytesRef BytesRefArray::get(const ::org::apache::lucene::util::BytesRefBuilder & a0, jint a1) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_get_7b543325], a0.this$, a1));
        }

        ::org::apache::lucene::util::BytesRefIterator BytesRefArray::iterator() const
        {
          return ::org::apache::lucene::util::BytesRefIterator(env->callObjectMethod(this$, mids$[mid_iterator_534dea83]));
        }

        ::org::apache::lucene::util::BytesRefIterator BytesRefArray::iterator(const ::java::util::Comparator & a0) const
        {
          return ::org::apache::lucene::util::BytesRefIterator(env->callObjectMethod(this$, mids$[mid_iterator_8d21877c], a0.this$));
        }

        jint BytesRefArray::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefArray_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefArray_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BytesRefArray_init_(t_BytesRefArray *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BytesRefArray_append(t_BytesRefArray *self, PyObject *arg);
        static PyObject *t_BytesRefArray_clear(t_BytesRefArray *self);
        static PyObject *t_BytesRefArray_get(t_BytesRefArray *self, PyObject *args);
        static PyObject *t_BytesRefArray_iterator(t_BytesRefArray *self, PyObject *args);
        static PyObject *t_BytesRefArray_size(t_BytesRefArray *self);

        static PyMethodDef t_BytesRefArray__methods_[] = {
          DECLARE_METHOD(t_BytesRefArray, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefArray, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefArray, append, METH_O),
          DECLARE_METHOD(t_BytesRefArray, clear, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefArray, get, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefArray, iterator, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefArray, size, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BytesRefArray, t_BytesRefArray, ::java::lang::Object, BytesRefArray, t_BytesRefArray_init_, 0, 0, 0, 0, 0);

        void t_BytesRefArray::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefArray), module, "BytesRefArray", 0);
        }

        void t_BytesRefArray::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BytesRefArray).tp_dict, "class_", make_descriptor(BytesRefArray::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BytesRefArray).tp_dict, "wrapfn_", make_descriptor(t_BytesRefArray::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BytesRefArray).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BytesRefArray_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefArray::initializeClass, 1)))
            return NULL;
          return t_BytesRefArray::wrap_Object(BytesRefArray(((t_BytesRefArray *) arg)->object.this$));
        }
        static PyObject *t_BytesRefArray_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefArray::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BytesRefArray_init_(t_BytesRefArray *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::Counter a0((jobject) NULL);
          BytesRefArray object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::Counter::initializeClass, &a0))
          {
            INT_CALL(object = BytesRefArray(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BytesRefArray_append(t_BytesRefArray *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "append", arg);
          return NULL;
        }

        static PyObject *t_BytesRefArray_clear(t_BytesRefArray *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_BytesRefArray_get(t_BytesRefArray *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRefBuilder a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRefBuilder::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.get(a0, a1));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", args);
          return NULL;
        }

        static PyObject *t_BytesRefArray_iterator(t_BytesRefArray *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::org::apache::lucene::util::BytesRefIterator result((jobject) NULL);
              OBJ_CALL(result = self->object.iterator());
              return ::org::apache::lucene::util::t_BytesRefIterator::wrap_Object(result);
            }
            break;
           case 1:
            {
              ::java::util::Comparator a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::util::BytesRefIterator result((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(result = self->object.iterator(a0));
                return ::org::apache::lucene::util::t_BytesRefIterator::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "iterator", args);
          return NULL;
        }

        static PyObject *t_BytesRefArray_size(t_BytesRefArray *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::class$ = NULL;
          jmethodID *SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::mids$ = NULL;
          bool SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::live$ = false;

          jclass SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_63657170] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/spans/SpanQuery;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite(jint a0) : ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          jboolean SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::getSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
          }

          jint SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::spans::SpanQuery SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
          {
            return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_rewrite_63657170], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_of_(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args);
          static int t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_init_(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_equals(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_getSize(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_hashCode(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_rewrite(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_get__size(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, void *data);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_get__parameters_(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, void *data);
          static PyGetSetDef t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite__fields_[] = {
            DECLARE_GET_FIELD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, size),
            DECLARE_GET_FIELD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite__methods_[] = {
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, of_, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, getSize, METH_NOARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, rewrite, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod, SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_init_, 0, 0, t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite__fields_, 0, 0);
          PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::wrap_Object(const SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self = (t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self = (t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite), module, "SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite", 0);
          }

          void t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite).tp_dict, "class_", make_descriptor(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite).tp_dict, "wrapfn_", make_descriptor(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::initializeClass, 1)))
              return NULL;
            return t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::wrap_Object(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite(((t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *) arg)->object.this$));
          }
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_of_(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_init_(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_equals(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_getSize(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_hashCode(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_rewrite(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.rewrite(a0, a1));
              return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite), (PyObject *) self, "rewrite", args, 2);
          }
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_get__parameters_(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_get__size(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSize());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Normalization.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Normalization::class$ = NULL;
          jmethodID *Normalization::mids$ = NULL;
          bool Normalization::live$ = false;

          jclass Normalization::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Normalization");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_aa9c2b5b] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_tfn_63482206] = env->getMethodID(cls, "tfn", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Normalization::Normalization() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation Normalization::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_aa9c2b5b], a0.this$, a1, a2));
          }

          jfloat Normalization::tfn(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_tfn_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String Normalization::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/similarities/Normalization$NoNormalization.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Normalization_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Normalization_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Normalization_init_(t_Normalization *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Normalization_explain(t_Normalization *self, PyObject *args);
          static PyObject *t_Normalization_tfn(t_Normalization *self, PyObject *args);
          static PyObject *t_Normalization_toString(t_Normalization *self, PyObject *args);

          static PyMethodDef t_Normalization__methods_[] = {
            DECLARE_METHOD(t_Normalization, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Normalization, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Normalization, explain, METH_VARARGS),
            DECLARE_METHOD(t_Normalization, tfn, METH_VARARGS),
            DECLARE_METHOD(t_Normalization, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Normalization, t_Normalization, ::java::lang::Object, Normalization, t_Normalization_init_, 0, 0, 0, 0, 0);

          void t_Normalization::install(PyObject *module)
          {
            installType(&PY_TYPE(Normalization), module, "Normalization", 0);
            PyDict_SetItemString(PY_TYPE(Normalization).tp_dict, "NoNormalization", make_descriptor(&PY_TYPE(Normalization$NoNormalization)));
          }

          void t_Normalization::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Normalization).tp_dict, "class_", make_descriptor(Normalization::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Normalization).tp_dict, "wrapfn_", make_descriptor(t_Normalization::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Normalization).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Normalization_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Normalization::initializeClass, 1)))
              return NULL;
            return t_Normalization::wrap_Object(Normalization(((t_Normalization *) arg)->object.this$));
          }
          static PyObject *t_Normalization_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Normalization::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Normalization_init_(t_Normalization *self, PyObject *args, PyObject *kwds)
          {
            Normalization object((jobject) NULL);

            INT_CALL(object = Normalization());
            self->object = object;

            return 0;
          }

          static PyObject *t_Normalization_explain(t_Normalization *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.explain(a0, a1, a2));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", args);
            return NULL;
          }

          static PyObject *t_Normalization_tfn(t_Normalization *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.tfn(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "tfn", args);
            return NULL;
          }

          static PyObject *t_Normalization_toString(t_Normalization *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Normalization), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/UpgradeIndexMergePolicy.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/lang/Boolean.h"
#include "org/apache/lucene/index/MergePolicy$MergeSpecification.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *UpgradeIndexMergePolicy::class$ = NULL;
        jmethodID *UpgradeIndexMergePolicy::mids$ = NULL;
        bool UpgradeIndexMergePolicy::live$ = false;

        jclass UpgradeIndexMergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/UpgradeIndexMergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6034dd24] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/MergePolicy;)V");
            mids$[mid_findForcedDeletesMerges_581dbc49] = env->getMethodID(cls, "findForcedDeletesMerges", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findForcedMerges_4fe4a5b5] = env->getMethodID(cls, "findForcedMerges", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findMerges_cada0df0] = env->getMethodID(cls, "findMerges", "(Lorg/apache/lucene/index/MergeTrigger;Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_useCompoundFile_70dc8488] = env->getMethodID(cls, "useCompoundFile", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)Z");
            mids$[mid_shouldUpgradeSegment_6649cdf8] = env->getMethodID(cls, "shouldUpgradeSegment", "(Lorg/apache/lucene/index/SegmentCommitInfo;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        UpgradeIndexMergePolicy::UpgradeIndexMergePolicy(const ::org::apache::lucene::index::MergePolicy & a0) : ::org::apache::lucene::index::MergePolicy(env->newObject(initializeClass, &mids$, mid_init$_6034dd24, a0.this$)) {}

        ::org::apache::lucene::index::MergePolicy$MergeSpecification UpgradeIndexMergePolicy::findForcedDeletesMerges(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::IndexWriter & a1) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedDeletesMerges_581dbc49], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification UpgradeIndexMergePolicy::findForcedMerges(const ::org::apache::lucene::index::SegmentInfos & a0, jint a1, const ::java::util::Map & a2, const ::org::apache::lucene::index::IndexWriter & a3) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedMerges_4fe4a5b5], a0.this$, a1, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification UpgradeIndexMergePolicy::findMerges(const ::org::apache::lucene::index::MergeTrigger & a0, const ::org::apache::lucene::index::SegmentInfos & a1, const ::org::apache::lucene::index::IndexWriter & a2) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findMerges_cada0df0], a0.this$, a1.this$, a2.this$));
        }

        ::java::lang::String UpgradeIndexMergePolicy::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jboolean UpgradeIndexMergePolicy::useCompoundFile(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::SegmentCommitInfo & a1, const ::org::apache::lucene::index::IndexWriter & a2) const
        {
          return env->callBooleanMethod(this$, mids$[mid_useCompoundFile_70dc8488], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_UpgradeIndexMergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_UpgradeIndexMergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_UpgradeIndexMergePolicy_init_(t_UpgradeIndexMergePolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_UpgradeIndexMergePolicy_findForcedDeletesMerges(t_UpgradeIndexMergePolicy *self, PyObject *args);
        static PyObject *t_UpgradeIndexMergePolicy_findForcedMerges(t_UpgradeIndexMergePolicy *self, PyObject *args);
        static PyObject *t_UpgradeIndexMergePolicy_findMerges(t_UpgradeIndexMergePolicy *self, PyObject *args);
        static PyObject *t_UpgradeIndexMergePolicy_toString(t_UpgradeIndexMergePolicy *self, PyObject *args);
        static PyObject *t_UpgradeIndexMergePolicy_useCompoundFile(t_UpgradeIndexMergePolicy *self, PyObject *args);

        static PyMethodDef t_UpgradeIndexMergePolicy__methods_[] = {
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, findForcedDeletesMerges, METH_VARARGS),
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, findForcedMerges, METH_VARARGS),
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, findMerges, METH_VARARGS),
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, toString, METH_VARARGS),
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, useCompoundFile, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(UpgradeIndexMergePolicy, t_UpgradeIndexMergePolicy, ::org::apache::lucene::index::MergePolicy, UpgradeIndexMergePolicy, t_UpgradeIndexMergePolicy_init_, 0, 0, 0, 0, 0);

        void t_UpgradeIndexMergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(UpgradeIndexMergePolicy), module, "UpgradeIndexMergePolicy", 0);
        }

        void t_UpgradeIndexMergePolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(UpgradeIndexMergePolicy).tp_dict, "class_", make_descriptor(UpgradeIndexMergePolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(UpgradeIndexMergePolicy).tp_dict, "wrapfn_", make_descriptor(t_UpgradeIndexMergePolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(UpgradeIndexMergePolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_UpgradeIndexMergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, UpgradeIndexMergePolicy::initializeClass, 1)))
            return NULL;
          return t_UpgradeIndexMergePolicy::wrap_Object(UpgradeIndexMergePolicy(((t_UpgradeIndexMergePolicy *) arg)->object.this$));
        }
        static PyObject *t_UpgradeIndexMergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, UpgradeIndexMergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_UpgradeIndexMergePolicy_init_(t_UpgradeIndexMergePolicy *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::MergePolicy a0((jobject) NULL);
          UpgradeIndexMergePolicy object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::MergePolicy::initializeClass, &a0))
          {
            INT_CALL(object = UpgradeIndexMergePolicy(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_UpgradeIndexMergePolicy_findForcedDeletesMerges(t_UpgradeIndexMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.findForcedDeletesMerges(a0, a1));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(UpgradeIndexMergePolicy), (PyObject *) self, "findForcedDeletesMerges", args, 2);
        }

        static PyObject *t_UpgradeIndexMergePolicy_findForcedMerges(t_UpgradeIndexMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          jint a1;
          ::java::util::Map a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::index::IndexWriter a3((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kIKk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3))
          {
            OBJ_CALL(result = self->object.findForcedMerges(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(UpgradeIndexMergePolicy), (PyObject *) self, "findForcedMerges", args, 2);
        }

        static PyObject *t_UpgradeIndexMergePolicy_findMerges(t_UpgradeIndexMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeTrigger a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::SegmentInfos a1((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a2((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "Kkk", ::org::apache::lucene::index::MergeTrigger::initializeClass, ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a1, &a2))
          {
            OBJ_CALL(result = self->object.findMerges(a0, a1, a2));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(UpgradeIndexMergePolicy), (PyObject *) self, "findMerges", args, 2);
        }

        static PyObject *t_UpgradeIndexMergePolicy_toString(t_UpgradeIndexMergePolicy *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(UpgradeIndexMergePolicy), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_UpgradeIndexMergePolicy_useCompoundFile(t_UpgradeIndexMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentCommitInfo a1((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a2((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "kkk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.useCompoundFile(a0, a1, a2));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(UpgradeIndexMergePolicy), (PyObject *) self, "useCompoundFile", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/ByteRunAutomaton.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *ByteRunAutomaton::class$ = NULL;
          jmethodID *ByteRunAutomaton::mids$ = NULL;
          bool ByteRunAutomaton::live$ = false;

          jclass ByteRunAutomaton::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/ByteRunAutomaton");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fc7cf394] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;)V");
              mids$[mid_init$_465e1031] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;Z)V");
              mids$[mid_run_86f44353] = env->getMethodID(cls, "run", "([BII)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ByteRunAutomaton::ByteRunAutomaton(const ::org::apache::lucene::util::automaton::Automaton & a0) : ::org::apache::lucene::util::automaton::RunAutomaton(env->newObject(initializeClass, &mids$, mid_init$_fc7cf394, a0.this$)) {}

          ByteRunAutomaton::ByteRunAutomaton(const ::org::apache::lucene::util::automaton::Automaton & a0, jboolean a1) : ::org::apache::lucene::util::automaton::RunAutomaton(env->newObject(initializeClass, &mids$, mid_init$_465e1031, a0.this$, a1)) {}

          jboolean ByteRunAutomaton::run(const JArray< jbyte > & a0, jint a1, jint a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_run_86f44353], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_ByteRunAutomaton_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ByteRunAutomaton_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ByteRunAutomaton_init_(t_ByteRunAutomaton *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ByteRunAutomaton_run(t_ByteRunAutomaton *self, PyObject *args);

          static PyMethodDef t_ByteRunAutomaton__methods_[] = {
            DECLARE_METHOD(t_ByteRunAutomaton, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ByteRunAutomaton, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ByteRunAutomaton, run, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ByteRunAutomaton, t_ByteRunAutomaton, ::org::apache::lucene::util::automaton::RunAutomaton, ByteRunAutomaton, t_ByteRunAutomaton_init_, 0, 0, 0, 0, 0);

          void t_ByteRunAutomaton::install(PyObject *module)
          {
            installType(&PY_TYPE(ByteRunAutomaton), module, "ByteRunAutomaton", 0);
          }

          void t_ByteRunAutomaton::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ByteRunAutomaton).tp_dict, "class_", make_descriptor(ByteRunAutomaton::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ByteRunAutomaton).tp_dict, "wrapfn_", make_descriptor(t_ByteRunAutomaton::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ByteRunAutomaton).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ByteRunAutomaton_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ByteRunAutomaton::initializeClass, 1)))
              return NULL;
            return t_ByteRunAutomaton::wrap_Object(ByteRunAutomaton(((t_ByteRunAutomaton *) arg)->object.this$));
          }
          static PyObject *t_ByteRunAutomaton_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ByteRunAutomaton::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ByteRunAutomaton_init_(t_ByteRunAutomaton *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                ByteRunAutomaton object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
                {
                  INT_CALL(object = ByteRunAutomaton(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                jboolean a1;
                ByteRunAutomaton object((jobject) NULL);

                if (!parseArgs(args, "kZ", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ByteRunAutomaton(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ByteRunAutomaton_run(t_ByteRunAutomaton *self, PyObject *args)
          {
            JArray< jbyte > a0((jobject) NULL);
            jint a1;
            jint a2;
            jboolean result;

            if (!parseArgs(args, "[BII", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.run(a0, a1, a2));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "run", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RateLimiter$SimpleRateLimiter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RateLimiter$SimpleRateLimiter::class$ = NULL;
        jmethodID *RateLimiter$SimpleRateLimiter::mids$ = NULL;
        bool RateLimiter$SimpleRateLimiter::live$ = false;

        jclass RateLimiter$SimpleRateLimiter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RateLimiter$SimpleRateLimiter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5d1c7645] = env->getMethodID(cls, "<init>", "(D)V");
            mids$[mid_getMbPerSec_54c6a174] = env->getMethodID(cls, "getMbPerSec", "()D");
            mids$[mid_getMinPauseCheckBytes_54c6a17a] = env->getMethodID(cls, "getMinPauseCheckBytes", "()J");
            mids$[mid_pause_0ee6df33] = env->getMethodID(cls, "pause", "(J)J");
            mids$[mid_setMbPerSec_5d1c7645] = env->getMethodID(cls, "setMbPerSec", "(D)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RateLimiter$SimpleRateLimiter::RateLimiter$SimpleRateLimiter(jdouble a0) : ::org::apache::lucene::store::RateLimiter(env->newObject(initializeClass, &mids$, mid_init$_5d1c7645, a0)) {}

        jdouble RateLimiter$SimpleRateLimiter::getMbPerSec() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMbPerSec_54c6a174]);
        }

        jlong RateLimiter$SimpleRateLimiter::getMinPauseCheckBytes() const
        {
          return env->callLongMethod(this$, mids$[mid_getMinPauseCheckBytes_54c6a17a]);
        }

        jlong RateLimiter$SimpleRateLimiter::pause(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_pause_0ee6df33], a0);
        }

        void RateLimiter$SimpleRateLimiter::setMbPerSec(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMbPerSec_5d1c7645], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RateLimiter$SimpleRateLimiter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RateLimiter$SimpleRateLimiter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RateLimiter$SimpleRateLimiter_init_(t_RateLimiter$SimpleRateLimiter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RateLimiter$SimpleRateLimiter_getMbPerSec(t_RateLimiter$SimpleRateLimiter *self, PyObject *args);
        static PyObject *t_RateLimiter$SimpleRateLimiter_getMinPauseCheckBytes(t_RateLimiter$SimpleRateLimiter *self, PyObject *args);
        static PyObject *t_RateLimiter$SimpleRateLimiter_pause(t_RateLimiter$SimpleRateLimiter *self, PyObject *args);
        static PyObject *t_RateLimiter$SimpleRateLimiter_setMbPerSec(t_RateLimiter$SimpleRateLimiter *self, PyObject *args);
        static PyObject *t_RateLimiter$SimpleRateLimiter_get__mbPerSec(t_RateLimiter$SimpleRateLimiter *self, void *data);
        static int t_RateLimiter$SimpleRateLimiter_set__mbPerSec(t_RateLimiter$SimpleRateLimiter *self, PyObject *arg, void *data);
        static PyObject *t_RateLimiter$SimpleRateLimiter_get__minPauseCheckBytes(t_RateLimiter$SimpleRateLimiter *self, void *data);
        static PyGetSetDef t_RateLimiter$SimpleRateLimiter__fields_[] = {
          DECLARE_GETSET_FIELD(t_RateLimiter$SimpleRateLimiter, mbPerSec),
          DECLARE_GET_FIELD(t_RateLimiter$SimpleRateLimiter, minPauseCheckBytes),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RateLimiter$SimpleRateLimiter__methods_[] = {
          DECLARE_METHOD(t_RateLimiter$SimpleRateLimiter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RateLimiter$SimpleRateLimiter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RateLimiter$SimpleRateLimiter, getMbPerSec, METH_VARARGS),
          DECLARE_METHOD(t_RateLimiter$SimpleRateLimiter, getMinPauseCheckBytes, METH_VARARGS),
          DECLARE_METHOD(t_RateLimiter$SimpleRateLimiter, pause, METH_VARARGS),
          DECLARE_METHOD(t_RateLimiter$SimpleRateLimiter, setMbPerSec, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RateLimiter$SimpleRateLimiter, t_RateLimiter$SimpleRateLimiter, ::org::apache::lucene::store::RateLimiter, RateLimiter$SimpleRateLimiter, t_RateLimiter$SimpleRateLimiter_init_, 0, 0, t_RateLimiter$SimpleRateLimiter__fields_, 0, 0);

        void t_RateLimiter$SimpleRateLimiter::install(PyObject *module)
        {
          installType(&PY_TYPE(RateLimiter$SimpleRateLimiter), module, "RateLimiter$SimpleRateLimiter", 0);
        }

        void t_RateLimiter$SimpleRateLimiter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RateLimiter$SimpleRateLimiter).tp_dict, "class_", make_descriptor(RateLimiter$SimpleRateLimiter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RateLimiter$SimpleRateLimiter).tp_dict, "wrapfn_", make_descriptor(t_RateLimiter$SimpleRateLimiter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RateLimiter$SimpleRateLimiter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RateLimiter$SimpleRateLimiter::initializeClass, 1)))
            return NULL;
          return t_RateLimiter$SimpleRateLimiter::wrap_Object(RateLimiter$SimpleRateLimiter(((t_RateLimiter$SimpleRateLimiter *) arg)->object.this$));
        }
        static PyObject *t_RateLimiter$SimpleRateLimiter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RateLimiter$SimpleRateLimiter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RateLimiter$SimpleRateLimiter_init_(t_RateLimiter$SimpleRateLimiter *self, PyObject *args, PyObject *kwds)
        {
          jdouble a0;
          RateLimiter$SimpleRateLimiter object((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            INT_CALL(object = RateLimiter$SimpleRateLimiter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_getMbPerSec(t_RateLimiter$SimpleRateLimiter *self, PyObject *args)
        {
          jdouble result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMbPerSec());
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(&PY_TYPE(RateLimiter$SimpleRateLimiter), (PyObject *) self, "getMbPerSec", args, 2);
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_getMinPauseCheckBytes(t_RateLimiter$SimpleRateLimiter *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMinPauseCheckBytes());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(RateLimiter$SimpleRateLimiter), (PyObject *) self, "getMinPauseCheckBytes", args, 2);
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_pause(t_RateLimiter$SimpleRateLimiter *self, PyObject *args)
        {
          jlong a0;
          jlong result;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = self->object.pause(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(RateLimiter$SimpleRateLimiter), (PyObject *) self, "pause", args, 2);
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_setMbPerSec(t_RateLimiter$SimpleRateLimiter *self, PyObject *args)
        {
          jdouble a0;

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(self->object.setMbPerSec(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RateLimiter$SimpleRateLimiter), (PyObject *) self, "setMbPerSec", args, 2);
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_get__mbPerSec(t_RateLimiter$SimpleRateLimiter *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMbPerSec());
          return PyFloat_FromDouble((double) value);
        }
        static int t_RateLimiter$SimpleRateLimiter_set__mbPerSec(t_RateLimiter$SimpleRateLimiter *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMbPerSec(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mbPerSec", arg);
          return -1;
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_get__minPauseCheckBytes(t_RateLimiter$SimpleRateLimiter *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getMinPauseCheckBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/DrillDownQuery.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *DrillDownQuery::class$ = NULL;
        jmethodID *DrillDownQuery::mids$ = NULL;
        bool DrillDownQuery::live$ = false;

        jclass DrillDownQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/DrillDownQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_46ac0e90] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/FacetsConfig;)V");
            mids$[mid_init$_82818c2d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/search/Query;)V");
            mids$[mid_add_ee8b16d8] = env->getMethodID(cls, "add", "(Ljava/lang/String;Lorg/apache/lucene/search/Filter;)V");
            mids$[mid_add_ba45d66a] = env->getMethodID(cls, "add", "(Ljava/lang/String;[Ljava/lang/String;)V");
            mids$[mid_add_5b69597d] = env->getMethodID(cls, "add", "(Ljava/lang/String;Lorg/apache/lucene/search/Query;)V");
            mids$[mid_clone_477b643a] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/facet/DrillDownQuery;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_term_48584f7a] = env->getStaticMethodID(cls, "term", "(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/index/Term;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DrillDownQuery::DrillDownQuery(const ::org::apache::lucene::facet::FacetsConfig & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_46ac0e90, a0.this$)) {}

        DrillDownQuery::DrillDownQuery(const ::org::apache::lucene::facet::FacetsConfig & a0, const ::org::apache::lucene::search::Query & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_82818c2d, a0.this$, a1.this$)) {}

        void DrillDownQuery::add(const ::java::lang::String & a0, const ::org::apache::lucene::search::Filter & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_ee8b16d8], a0.this$, a1.this$);
        }

        void DrillDownQuery::add(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_ba45d66a], a0.this$, a1.this$);
        }

        void DrillDownQuery::add(const ::java::lang::String & a0, const ::org::apache::lucene::search::Query & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_5b69597d], a0.this$, a1.this$);
        }

        DrillDownQuery DrillDownQuery::clone() const
        {
          return DrillDownQuery(env->callObjectMethod(this$, mids$[mid_clone_477b643a]));
        }

        jboolean DrillDownQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint DrillDownQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query DrillDownQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        ::org::apache::lucene::index::Term DrillDownQuery::term(const ::java::lang::String & a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::Term(env->callStaticObjectMethod(cls, mids$[mid_term_48584f7a], a0.this$, a1.this$, a2.this$));
        }

        ::java::lang::String DrillDownQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_DrillDownQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DrillDownQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DrillDownQuery_init_(t_DrillDownQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DrillDownQuery_add(t_DrillDownQuery *self, PyObject *args);
        static PyObject *t_DrillDownQuery_clone(t_DrillDownQuery *self, PyObject *args);
        static PyObject *t_DrillDownQuery_equals(t_DrillDownQuery *self, PyObject *args);
        static PyObject *t_DrillDownQuery_hashCode(t_DrillDownQuery *self, PyObject *args);
        static PyObject *t_DrillDownQuery_rewrite(t_DrillDownQuery *self, PyObject *args);
        static PyObject *t_DrillDownQuery_term(PyTypeObject *type, PyObject *args);
        static PyObject *t_DrillDownQuery_toString(t_DrillDownQuery *self, PyObject *args);

        static PyMethodDef t_DrillDownQuery__methods_[] = {
          DECLARE_METHOD(t_DrillDownQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DrillDownQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DrillDownQuery, add, METH_VARARGS),
          DECLARE_METHOD(t_DrillDownQuery, clone, METH_VARARGS),
          DECLARE_METHOD(t_DrillDownQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_DrillDownQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_DrillDownQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_DrillDownQuery, term, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DrillDownQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DrillDownQuery, t_DrillDownQuery, ::org::apache::lucene::search::Query, DrillDownQuery, t_DrillDownQuery_init_, 0, 0, 0, 0, 0);

        void t_DrillDownQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(DrillDownQuery), module, "DrillDownQuery", 0);
        }

        void t_DrillDownQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DrillDownQuery).tp_dict, "class_", make_descriptor(DrillDownQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DrillDownQuery).tp_dict, "wrapfn_", make_descriptor(t_DrillDownQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DrillDownQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DrillDownQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DrillDownQuery::initializeClass, 1)))
            return NULL;
          return t_DrillDownQuery::wrap_Object(DrillDownQuery(((t_DrillDownQuery *) arg)->object.this$));
        }
        static PyObject *t_DrillDownQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DrillDownQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DrillDownQuery_init_(t_DrillDownQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::facet::FacetsConfig a0((jobject) NULL);
              DrillDownQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::facet::FacetsConfig::initializeClass, &a0))
              {
                INT_CALL(object = DrillDownQuery(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::facet::FacetsConfig a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              DrillDownQuery object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
              {
                INT_CALL(object = DrillDownQuery(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DrillDownQuery_add(t_DrillDownQuery *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::Filter a1((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::java::lang::String > a1((jobject) NULL);

              if (!parseArgs(args, "s[s", &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_DrillDownQuery_clone(t_DrillDownQuery *self, PyObject *args)
        {
          DrillDownQuery result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_DrillDownQuery::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DrillDownQuery), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_DrillDownQuery_equals(t_DrillDownQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DrillDownQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_DrillDownQuery_hashCode(t_DrillDownQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(DrillDownQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_DrillDownQuery_rewrite(t_DrillDownQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DrillDownQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_DrillDownQuery_term(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          JArray< ::java::lang::String > a2((jobject) NULL);
          ::org::apache::lucene::index::Term result((jobject) NULL);

          if (!parseArgs(args, "ss[s", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::facet::DrillDownQuery::term(a0, a1, a2));
            return ::org::apache::lucene::index::t_Term::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "term", args);
          return NULL;
        }

        static PyObject *t_DrillDownQuery_toString(t_DrillDownQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(DrillDownQuery), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/EliasFanoDecoder.h"
#include "org/apache/lucene/util/packed/EliasFanoEncoder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *EliasFanoDecoder::class$ = NULL;
          jmethodID *EliasFanoDecoder::mids$ = NULL;
          bool EliasFanoDecoder::live$ = false;
          jlong EliasFanoDecoder::NO_MORE_VALUES = (jlong) 0;

          jclass EliasFanoDecoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/EliasFanoDecoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_dd0d7538] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/packed/EliasFanoEncoder;)V");
              mids$[mid_advanceToIndex_0ee6df23] = env->getMethodID(cls, "advanceToIndex", "(J)Z");
              mids$[mid_advanceToValue_0ee6df33] = env->getMethodID(cls, "advanceToValue", "(J)J");
              mids$[mid_backToValue_0ee6df33] = env->getMethodID(cls, "backToValue", "(J)J");
              mids$[mid_currentIndex_54c6a17a] = env->getMethodID(cls, "currentIndex", "()J");
              mids$[mid_currentValue_54c6a17a] = env->getMethodID(cls, "currentValue", "()J");
              mids$[mid_getEliasFanoEncoder_803fc555] = env->getMethodID(cls, "getEliasFanoEncoder", "()Lorg/apache/lucene/util/packed/EliasFanoEncoder;");
              mids$[mid_nextValue_54c6a17a] = env->getMethodID(cls, "nextValue", "()J");
              mids$[mid_numEncoded_54c6a17a] = env->getMethodID(cls, "numEncoded", "()J");
              mids$[mid_previousValue_54c6a17a] = env->getMethodID(cls, "previousValue", "()J");
              mids$[mid_toAfterSequence_54c6a166] = env->getMethodID(cls, "toAfterSequence", "()V");
              mids$[mid_toBeforeSequence_54c6a166] = env->getMethodID(cls, "toBeforeSequence", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              NO_MORE_VALUES = env->getStaticLongField(cls, "NO_MORE_VALUES");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EliasFanoDecoder::EliasFanoDecoder(const ::org::apache::lucene::util::packed::EliasFanoEncoder & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_dd0d7538, a0.this$)) {}

          jboolean EliasFanoDecoder::advanceToIndex(jlong a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_advanceToIndex_0ee6df23], a0);
          }

          jlong EliasFanoDecoder::advanceToValue(jlong a0) const
          {
            return env->callLongMethod(this$, mids$[mid_advanceToValue_0ee6df33], a0);
          }

          jlong EliasFanoDecoder::backToValue(jlong a0) const
          {
            return env->callLongMethod(this$, mids$[mid_backToValue_0ee6df33], a0);
          }

          jlong EliasFanoDecoder::currentIndex() const
          {
            return env->callLongMethod(this$, mids$[mid_currentIndex_54c6a17a]);
          }

          jlong EliasFanoDecoder::currentValue() const
          {
            return env->callLongMethod(this$, mids$[mid_currentValue_54c6a17a]);
          }

          ::org::apache::lucene::util::packed::EliasFanoEncoder EliasFanoDecoder::getEliasFanoEncoder() const
          {
            return ::org::apache::lucene::util::packed::EliasFanoEncoder(env->callObjectMethod(this$, mids$[mid_getEliasFanoEncoder_803fc555]));
          }

          jlong EliasFanoDecoder::nextValue() const
          {
            return env->callLongMethod(this$, mids$[mid_nextValue_54c6a17a]);
          }

          jlong EliasFanoDecoder::numEncoded() const
          {
            return env->callLongMethod(this$, mids$[mid_numEncoded_54c6a17a]);
          }

          jlong EliasFanoDecoder::previousValue() const
          {
            return env->callLongMethod(this$, mids$[mid_previousValue_54c6a17a]);
          }

          void EliasFanoDecoder::toAfterSequence() const
          {
            env->callVoidMethod(this$, mids$[mid_toAfterSequence_54c6a166]);
          }

          void EliasFanoDecoder::toBeforeSequence() const
          {
            env->callVoidMethod(this$, mids$[mid_toBeforeSequence_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_EliasFanoDecoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EliasFanoDecoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EliasFanoDecoder_init_(t_EliasFanoDecoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EliasFanoDecoder_advanceToIndex(t_EliasFanoDecoder *self, PyObject *arg);
          static PyObject *t_EliasFanoDecoder_advanceToValue(t_EliasFanoDecoder *self, PyObject *arg);
          static PyObject *t_EliasFanoDecoder_backToValue(t_EliasFanoDecoder *self, PyObject *arg);
          static PyObject *t_EliasFanoDecoder_currentIndex(t_EliasFanoDecoder *self);
          static PyObject *t_EliasFanoDecoder_currentValue(t_EliasFanoDecoder *self);
          static PyObject *t_EliasFanoDecoder_getEliasFanoEncoder(t_EliasFanoDecoder *self);
          static PyObject *t_EliasFanoDecoder_nextValue(t_EliasFanoDecoder *self);
          static PyObject *t_EliasFanoDecoder_numEncoded(t_EliasFanoDecoder *self);
          static PyObject *t_EliasFanoDecoder_previousValue(t_EliasFanoDecoder *self);
          static PyObject *t_EliasFanoDecoder_toAfterSequence(t_EliasFanoDecoder *self);
          static PyObject *t_EliasFanoDecoder_toBeforeSequence(t_EliasFanoDecoder *self);
          static PyObject *t_EliasFanoDecoder_get__eliasFanoEncoder(t_EliasFanoDecoder *self, void *data);
          static PyGetSetDef t_EliasFanoDecoder__fields_[] = {
            DECLARE_GET_FIELD(t_EliasFanoDecoder, eliasFanoEncoder),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_EliasFanoDecoder__methods_[] = {
            DECLARE_METHOD(t_EliasFanoDecoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EliasFanoDecoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EliasFanoDecoder, advanceToIndex, METH_O),
            DECLARE_METHOD(t_EliasFanoDecoder, advanceToValue, METH_O),
            DECLARE_METHOD(t_EliasFanoDecoder, backToValue, METH_O),
            DECLARE_METHOD(t_EliasFanoDecoder, currentIndex, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoDecoder, currentValue, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoDecoder, getEliasFanoEncoder, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoDecoder, nextValue, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoDecoder, numEncoded, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoDecoder, previousValue, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoDecoder, toAfterSequence, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoDecoder, toBeforeSequence, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EliasFanoDecoder, t_EliasFanoDecoder, ::java::lang::Object, EliasFanoDecoder, t_EliasFanoDecoder_init_, 0, 0, t_EliasFanoDecoder__fields_, 0, 0);

          void t_EliasFanoDecoder::install(PyObject *module)
          {
            installType(&PY_TYPE(EliasFanoDecoder), module, "EliasFanoDecoder", 0);
          }

          void t_EliasFanoDecoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EliasFanoDecoder).tp_dict, "class_", make_descriptor(EliasFanoDecoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EliasFanoDecoder).tp_dict, "wrapfn_", make_descriptor(t_EliasFanoDecoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EliasFanoDecoder).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(EliasFanoDecoder::initializeClass);
            PyDict_SetItemString(PY_TYPE(EliasFanoDecoder).tp_dict, "NO_MORE_VALUES", make_descriptor(EliasFanoDecoder::NO_MORE_VALUES));
          }

          static PyObject *t_EliasFanoDecoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EliasFanoDecoder::initializeClass, 1)))
              return NULL;
            return t_EliasFanoDecoder::wrap_Object(EliasFanoDecoder(((t_EliasFanoDecoder *) arg)->object.this$));
          }
          static PyObject *t_EliasFanoDecoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EliasFanoDecoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EliasFanoDecoder_init_(t_EliasFanoDecoder *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::packed::EliasFanoEncoder a0((jobject) NULL);
            EliasFanoDecoder object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::packed::EliasFanoEncoder::initializeClass, &a0))
            {
              INT_CALL(object = EliasFanoDecoder(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EliasFanoDecoder_advanceToIndex(t_EliasFanoDecoder *self, PyObject *arg)
          {
            jlong a0;
            jboolean result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = self->object.advanceToIndex(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "advanceToIndex", arg);
            return NULL;
          }

          static PyObject *t_EliasFanoDecoder_advanceToValue(t_EliasFanoDecoder *self, PyObject *arg)
          {
            jlong a0;
            jlong result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = self->object.advanceToValue(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "advanceToValue", arg);
            return NULL;
          }

          static PyObject *t_EliasFanoDecoder_backToValue(t_EliasFanoDecoder *self, PyObject *arg)
          {
            jlong a0;
            jlong result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = self->object.backToValue(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "backToValue", arg);
            return NULL;
          }

          static PyObject *t_EliasFanoDecoder_currentIndex(t_EliasFanoDecoder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.currentIndex());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_EliasFanoDecoder_currentValue(t_EliasFanoDecoder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.currentValue());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_EliasFanoDecoder_getEliasFanoEncoder(t_EliasFanoDecoder *self)
          {
            ::org::apache::lucene::util::packed::EliasFanoEncoder result((jobject) NULL);
            OBJ_CALL(result = self->object.getEliasFanoEncoder());
            return ::org::apache::lucene::util::packed::t_EliasFanoEncoder::wrap_Object(result);
          }

          static PyObject *t_EliasFanoDecoder_nextValue(t_EliasFanoDecoder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.nextValue());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_EliasFanoDecoder_numEncoded(t_EliasFanoDecoder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.numEncoded());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_EliasFanoDecoder_previousValue(t_EliasFanoDecoder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.previousValue());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_EliasFanoDecoder_toAfterSequence(t_EliasFanoDecoder *self)
          {
            OBJ_CALL(self->object.toAfterSequence());
            Py_RETURN_NONE;
          }

          static PyObject *t_EliasFanoDecoder_toBeforeSequence(t_EliasFanoDecoder *self)
          {
            OBJ_CALL(self->object.toBeforeSequence());
            Py_RETURN_NONE;
          }

          static PyObject *t_EliasFanoDecoder_get__eliasFanoEncoder(t_EliasFanoDecoder *self, void *data)
          {
            ::org::apache::lucene::util::packed::EliasFanoEncoder value((jobject) NULL);
            OBJ_CALL(value = self->object.getEliasFanoEncoder());
            return ::org::apache::lucene::util::packed::t_EliasFanoEncoder::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/KStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *KStemmer::class$ = NULL;
          jmethodID *KStemmer::mids$ = NULL;
          bool KStemmer::live$ = false;

          jclass KStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/KStemmer");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_KStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KStemmer_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_KStemmer__methods_[] = {
            DECLARE_METHOD(t_KStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KStemmer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KStemmer, t_KStemmer, ::java::lang::Object, KStemmer, abstract_init, 0, 0, 0, 0, 0);

          void t_KStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(KStemmer), module, "KStemmer", 0);
          }

          void t_KStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KStemmer).tp_dict, "class_", make_descriptor(KStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KStemmer).tp_dict, "wrapfn_", make_descriptor(t_KStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KStemmer::initializeClass, 1)))
              return NULL;
            return t_KStemmer::wrap_Object(KStemmer(((t_KStemmer *) arg)->object.this$));
          }
          static PyObject *t_KStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ScoringRewrite.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ScoringRewrite::class$ = NULL;
        jmethodID *ScoringRewrite::mids$ = NULL;
        bool ScoringRewrite::live$ = false;
        ::org::apache::lucene::search::MultiTermQuery$RewriteMethod *ScoringRewrite::CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE = NULL;
        ScoringRewrite *ScoringRewrite::SCORING_BOOLEAN_QUERY_REWRITE = NULL;

        jclass ScoringRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ScoringRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_rewrite_925c5bbc] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/Query;");
            mids$[mid_checkMaxClauseCount_39c7bd3c] = env->getMethodID(cls, "checkMaxClauseCount", "(I)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE = new ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->getStaticObjectField(cls, "CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE", "Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;"));
            SCORING_BOOLEAN_QUERY_REWRITE = new ScoringRewrite(env->getStaticObjectField(cls, "SCORING_BOOLEAN_QUERY_REWRITE", "Lorg/apache/lucene/search/ScoringRewrite;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ScoringRewrite::ScoringRewrite() : ::org::apache::lucene::search::TermCollectingRewrite(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::Query ScoringRewrite::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_925c5bbc], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ScoringRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ScoringRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ScoringRewrite_of_(t_ScoringRewrite *self, PyObject *args);
        static int t_ScoringRewrite_init_(t_ScoringRewrite *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ScoringRewrite_rewrite(t_ScoringRewrite *self, PyObject *args);
        static PyObject *t_ScoringRewrite_get__parameters_(t_ScoringRewrite *self, void *data);
        static PyGetSetDef t_ScoringRewrite__fields_[] = {
          DECLARE_GET_FIELD(t_ScoringRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ScoringRewrite__methods_[] = {
          DECLARE_METHOD(t_ScoringRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScoringRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScoringRewrite, of_, METH_VARARGS),
          DECLARE_METHOD(t_ScoringRewrite, rewrite, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ScoringRewrite, t_ScoringRewrite, ::org::apache::lucene::search::TermCollectingRewrite, ScoringRewrite, t_ScoringRewrite_init_, 0, 0, t_ScoringRewrite__fields_, 0, 0);
        PyObject *t_ScoringRewrite::wrap_Object(const ScoringRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ScoringRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ScoringRewrite *self = (t_ScoringRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ScoringRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ScoringRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ScoringRewrite *self = (t_ScoringRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ScoringRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(ScoringRewrite), module, "ScoringRewrite", 0);
        }

        void t_ScoringRewrite::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ScoringRewrite).tp_dict, "class_", make_descriptor(ScoringRewrite::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ScoringRewrite).tp_dict, "wrapfn_", make_descriptor(t_ScoringRewrite::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ScoringRewrite).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(ScoringRewrite::initializeClass);
          PyDict_SetItemString(PY_TYPE(ScoringRewrite).tp_dict, "CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE", make_descriptor(::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(*ScoringRewrite::CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE)));
          PyDict_SetItemString(PY_TYPE(ScoringRewrite).tp_dict, "SCORING_BOOLEAN_QUERY_REWRITE", make_descriptor(t_ScoringRewrite::wrap_Object(*ScoringRewrite::SCORING_BOOLEAN_QUERY_REWRITE)));
        }

        static PyObject *t_ScoringRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ScoringRewrite::initializeClass, 1)))
            return NULL;
          return t_ScoringRewrite::wrap_Object(ScoringRewrite(((t_ScoringRewrite *) arg)->object.this$));
        }
        static PyObject *t_ScoringRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ScoringRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ScoringRewrite_of_(t_ScoringRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_ScoringRewrite_init_(t_ScoringRewrite *self, PyObject *args, PyObject *kwds)
        {
          ScoringRewrite object((jobject) NULL);

          INT_CALL(object = ScoringRewrite());
          self->object = object;

          return 0;
        }

        static PyObject *t_ScoringRewrite_rewrite(t_ScoringRewrite *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.rewrite(a0, a1));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ScoringRewrite), (PyObject *) self, "rewrite", args, 2);
        }
        static PyObject *t_ScoringRewrite_get__parameters_(t_ScoringRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$CollectionModel.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LMSimilarity$CollectionModel::class$ = NULL;
          jmethodID *LMSimilarity$CollectionModel::mids$ = NULL;
          bool LMSimilarity$CollectionModel::live$ = false;

          jclass LMSimilarity$CollectionModel::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LMSimilarity$CollectionModel");

              mids$ = new jmethodID[max_mid];
              mids$[mid_computeProbability_cb225ea0] = env->getMethodID(cls, "computeProbability", "(Lorg/apache/lucene/search/similarities/BasicStats;)F");
              mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jfloat LMSimilarity$CollectionModel::computeProbability(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_computeProbability_cb225ea0], a0.this$);
          }

          ::java::lang::String LMSimilarity$CollectionModel::getName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LMSimilarity$CollectionModel_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMSimilarity$CollectionModel_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMSimilarity$CollectionModel_computeProbability(t_LMSimilarity$CollectionModel *self, PyObject *arg);
          static PyObject *t_LMSimilarity$CollectionModel_getName(t_LMSimilarity$CollectionModel *self);
          static PyObject *t_LMSimilarity$CollectionModel_get__name(t_LMSimilarity$CollectionModel *self, void *data);
          static PyGetSetDef t_LMSimilarity$CollectionModel__fields_[] = {
            DECLARE_GET_FIELD(t_LMSimilarity$CollectionModel, name),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LMSimilarity$CollectionModel__methods_[] = {
            DECLARE_METHOD(t_LMSimilarity$CollectionModel, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity$CollectionModel, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity$CollectionModel, computeProbability, METH_O),
            DECLARE_METHOD(t_LMSimilarity$CollectionModel, getName, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LMSimilarity$CollectionModel, t_LMSimilarity$CollectionModel, ::java::lang::Object, LMSimilarity$CollectionModel, abstract_init, 0, 0, t_LMSimilarity$CollectionModel__fields_, 0, 0);

          void t_LMSimilarity$CollectionModel::install(PyObject *module)
          {
            installType(&PY_TYPE(LMSimilarity$CollectionModel), module, "LMSimilarity$CollectionModel", 0);
          }

          void t_LMSimilarity$CollectionModel::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LMSimilarity$CollectionModel).tp_dict, "class_", make_descriptor(LMSimilarity$CollectionModel::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LMSimilarity$CollectionModel).tp_dict, "wrapfn_", make_descriptor(t_LMSimilarity$CollectionModel::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LMSimilarity$CollectionModel).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LMSimilarity$CollectionModel_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LMSimilarity$CollectionModel::initializeClass, 1)))
              return NULL;
            return t_LMSimilarity$CollectionModel::wrap_Object(LMSimilarity$CollectionModel(((t_LMSimilarity$CollectionModel *) arg)->object.this$));
          }
          static PyObject *t_LMSimilarity$CollectionModel_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LMSimilarity$CollectionModel::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_LMSimilarity$CollectionModel_computeProbability(t_LMSimilarity$CollectionModel *self, PyObject *arg)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat result;

            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeProbability(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "computeProbability", arg);
            return NULL;
          }

          static PyObject *t_LMSimilarity$CollectionModel_getName(t_LMSimilarity$CollectionModel *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getName());
            return j2p(result);
          }

          static PyObject *t_LMSimilarity$CollectionModel_get__name(t_LMSimilarity$CollectionModel *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseLightStemmer::class$ = NULL;
          jmethodID *PortugueseLightStemmer::mids$ = NULL;
          bool PortugueseLightStemmer::live$ = false;

          jclass PortugueseLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseLightStemmer::PortugueseLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint PortugueseLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseLightStemmer_init_(t_PortugueseLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseLightStemmer_stem(t_PortugueseLightStemmer *self, PyObject *args);

          static PyMethodDef t_PortugueseLightStemmer__methods_[] = {
            DECLARE_METHOD(t_PortugueseLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseLightStemmer, t_PortugueseLightStemmer, ::java::lang::Object, PortugueseLightStemmer, t_PortugueseLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_PortugueseLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseLightStemmer), module, "PortugueseLightStemmer", 0);
          }

          void t_PortugueseLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemmer).tp_dict, "class_", make_descriptor(PortugueseLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_PortugueseLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseLightStemmer::initializeClass, 1)))
              return NULL;
            return t_PortugueseLightStemmer::wrap_Object(PortugueseLightStemmer(((t_PortugueseLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_PortugueseLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseLightStemmer_init_(t_PortugueseLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            PortugueseLightStemmer object((jobject) NULL);

            INT_CALL(object = PortugueseLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_PortugueseLightStemmer_stem(t_PortugueseLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/LinearFloatFunction.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *LinearFloatFunction::class$ = NULL;
            jmethodID *LinearFloatFunction::mids$ = NULL;
            bool LinearFloatFunction::live$ = false;

            jclass LinearFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/LinearFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_bdda54b0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;FF)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LinearFloatFunction::LinearFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, jfloat a1, jfloat a2) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_bdda54b0, a0.this$, a1, a2)) {}

            void LinearFloatFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String LinearFloatFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean LinearFloatFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues LinearFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint LinearFloatFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_LinearFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LinearFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LinearFloatFunction_init_(t_LinearFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_LinearFloatFunction_createWeight(t_LinearFloatFunction *self, PyObject *args);
            static PyObject *t_LinearFloatFunction_description(t_LinearFloatFunction *self, PyObject *args);
            static PyObject *t_LinearFloatFunction_equals(t_LinearFloatFunction *self, PyObject *args);
            static PyObject *t_LinearFloatFunction_getValues(t_LinearFloatFunction *self, PyObject *args);
            static PyObject *t_LinearFloatFunction_hashCode(t_LinearFloatFunction *self, PyObject *args);

            static PyMethodDef t_LinearFloatFunction__methods_[] = {
              DECLARE_METHOD(t_LinearFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LinearFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LinearFloatFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_LinearFloatFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_LinearFloatFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_LinearFloatFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_LinearFloatFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(LinearFloatFunction, t_LinearFloatFunction, ::org::apache::lucene::queries::function::ValueSource, LinearFloatFunction, t_LinearFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_LinearFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(LinearFloatFunction), module, "LinearFloatFunction", 0);
            }

            void t_LinearFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(LinearFloatFunction).tp_dict, "class_", make_descriptor(LinearFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(LinearFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_LinearFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(LinearFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_LinearFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LinearFloatFunction::initializeClass, 1)))
                return NULL;
              return t_LinearFloatFunction::wrap_Object(LinearFloatFunction(((t_LinearFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_LinearFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LinearFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LinearFloatFunction_init_(t_LinearFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              jfloat a1;
              jfloat a2;
              LinearFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "kFF", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = LinearFloatFunction(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_LinearFloatFunction_createWeight(t_LinearFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(LinearFloatFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_LinearFloatFunction_description(t_LinearFloatFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(LinearFloatFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_LinearFloatFunction_equals(t_LinearFloatFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(LinearFloatFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_LinearFloatFunction_getValues(t_LinearFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(LinearFloatFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_LinearFloatFunction_hashCode(t_LinearFloatFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(LinearFloatFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/id/IndonesianStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {

          ::java::lang::Class *IndonesianStemFilter::class$ = NULL;
          jmethodID *IndonesianStemFilter::mids$ = NULL;
          bool IndonesianStemFilter::live$ = false;

          jclass IndonesianStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/id/IndonesianStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_a19d9eb9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Z)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndonesianStemFilter::IndonesianStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          IndonesianStemFilter::IndonesianStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jboolean a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_a19d9eb9, a0.this$, a1)) {}

          jboolean IndonesianStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {
          static PyObject *t_IndonesianStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndonesianStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndonesianStemFilter_init_(t_IndonesianStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndonesianStemFilter_incrementToken(t_IndonesianStemFilter *self, PyObject *args);

          static PyMethodDef t_IndonesianStemFilter__methods_[] = {
            DECLARE_METHOD(t_IndonesianStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IndonesianStemFilter, t_IndonesianStemFilter, ::org::apache::lucene::analysis::TokenFilter, IndonesianStemFilter, t_IndonesianStemFilter_init_, 0, 0, 0, 0, 0);

          void t_IndonesianStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(IndonesianStemFilter), module, "IndonesianStemFilter", 0);
          }

          void t_IndonesianStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IndonesianStemFilter).tp_dict, "class_", make_descriptor(IndonesianStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IndonesianStemFilter).tp_dict, "wrapfn_", make_descriptor(t_IndonesianStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IndonesianStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndonesianStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndonesianStemFilter::initializeClass, 1)))
              return NULL;
            return t_IndonesianStemFilter::wrap_Object(IndonesianStemFilter(((t_IndonesianStemFilter *) arg)->object.this$));
          }
          static PyObject *t_IndonesianStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndonesianStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndonesianStemFilter_init_(t_IndonesianStemFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                IndonesianStemFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = IndonesianStemFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jboolean a1;
                IndonesianStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = IndonesianStemFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IndonesianStemFilter_incrementToken(t_IndonesianStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(IndonesianStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/BooleanQueryNode.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *BooleanQueryNode::class$ = NULL;
              jmethodID *BooleanQueryNode::mids$ = NULL;
              bool BooleanQueryNode::live$ = false;

              jclass BooleanQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/BooleanQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BooleanQueryNode::BooleanQueryNode(const ::java::util::List & a0) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode BooleanQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::java::lang::CharSequence BooleanQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String BooleanQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_BooleanQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BooleanQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BooleanQueryNode_init_(t_BooleanQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_BooleanQueryNode_cloneTree(t_BooleanQueryNode *self, PyObject *args);
              static PyObject *t_BooleanQueryNode_toQueryString(t_BooleanQueryNode *self, PyObject *args);
              static PyObject *t_BooleanQueryNode_toString(t_BooleanQueryNode *self, PyObject *args);

              static PyMethodDef t_BooleanQueryNode__methods_[] = {
                DECLARE_METHOD(t_BooleanQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_BooleanQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_BooleanQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BooleanQueryNode, t_BooleanQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, BooleanQueryNode, t_BooleanQueryNode_init_, 0, 0, 0, 0, 0);

              void t_BooleanQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(BooleanQueryNode), module, "BooleanQueryNode", 0);
              }

              void t_BooleanQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BooleanQueryNode).tp_dict, "class_", make_descriptor(BooleanQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BooleanQueryNode).tp_dict, "wrapfn_", make_descriptor(t_BooleanQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BooleanQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BooleanQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BooleanQueryNode::initializeClass, 1)))
                  return NULL;
                return t_BooleanQueryNode::wrap_Object(BooleanQueryNode(((t_BooleanQueryNode *) arg)->object.this$));
              }
              static PyObject *t_BooleanQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BooleanQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BooleanQueryNode_init_(t_BooleanQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                BooleanQueryNode object((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  INT_CALL(object = BooleanQueryNode(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_BooleanQueryNode_cloneTree(t_BooleanQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(BooleanQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_BooleanQueryNode_toQueryString(t_BooleanQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(BooleanQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_BooleanQueryNode_toString(t_BooleanQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(BooleanQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/NormalizationZ.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *NormalizationZ::class$ = NULL;
          jmethodID *NormalizationZ::mids$ = NULL;
          bool NormalizationZ::live$ = false;

          jclass NormalizationZ::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/NormalizationZ");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_getZ_54c6a176] = env->getMethodID(cls, "getZ", "()F");
              mids$[mid_tfn_63482206] = env->getMethodID(cls, "tfn", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NormalizationZ::NormalizationZ() : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          NormalizationZ::NormalizationZ(jfloat a0) : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          jfloat NormalizationZ::getZ() const
          {
            return env->callFloatMethod(this$, mids$[mid_getZ_54c6a176]);
          }

          jfloat NormalizationZ::tfn(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_tfn_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String NormalizationZ::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_NormalizationZ_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NormalizationZ_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NormalizationZ_init_(t_NormalizationZ *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NormalizationZ_getZ(t_NormalizationZ *self);
          static PyObject *t_NormalizationZ_tfn(t_NormalizationZ *self, PyObject *args);
          static PyObject *t_NormalizationZ_toString(t_NormalizationZ *self, PyObject *args);
          static PyObject *t_NormalizationZ_get__z(t_NormalizationZ *self, void *data);
          static PyGetSetDef t_NormalizationZ__fields_[] = {
            DECLARE_GET_FIELD(t_NormalizationZ, z),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NormalizationZ__methods_[] = {
            DECLARE_METHOD(t_NormalizationZ, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationZ, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationZ, getZ, METH_NOARGS),
            DECLARE_METHOD(t_NormalizationZ, tfn, METH_VARARGS),
            DECLARE_METHOD(t_NormalizationZ, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NormalizationZ, t_NormalizationZ, ::org::apache::lucene::search::similarities::Normalization, NormalizationZ, t_NormalizationZ_init_, 0, 0, t_NormalizationZ__fields_, 0, 0);

          void t_NormalizationZ::install(PyObject *module)
          {
            installType(&PY_TYPE(NormalizationZ), module, "NormalizationZ", 0);
          }

          void t_NormalizationZ::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NormalizationZ).tp_dict, "class_", make_descriptor(NormalizationZ::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NormalizationZ).tp_dict, "wrapfn_", make_descriptor(t_NormalizationZ::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NormalizationZ).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NormalizationZ_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NormalizationZ::initializeClass, 1)))
              return NULL;
            return t_NormalizationZ::wrap_Object(NormalizationZ(((t_NormalizationZ *) arg)->object.this$));
          }
          static PyObject *t_NormalizationZ_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NormalizationZ::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NormalizationZ_init_(t_NormalizationZ *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                NormalizationZ object((jobject) NULL);

                INT_CALL(object = NormalizationZ());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jfloat a0;
                NormalizationZ object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = NormalizationZ(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NormalizationZ_getZ(t_NormalizationZ *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getZ());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_NormalizationZ_tfn(t_NormalizationZ *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.tfn(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(NormalizationZ), (PyObject *) self, "tfn", args, 2);
          }

          static PyObject *t_NormalizationZ_toString(t_NormalizationZ *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(NormalizationZ), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_NormalizationZ_get__z(t_NormalizationZ *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getZ());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector$GroupHead.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {

            ::java::lang::Class *FunctionAllGroupHeadsCollector$GroupHead::class$ = NULL;
            jmethodID *FunctionAllGroupHeadsCollector$GroupHead::mids$ = NULL;
            bool FunctionAllGroupHeadsCollector$GroupHead::live$ = false;

            jclass FunctionAllGroupHeadsCollector$GroupHead::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector$GroupHead");

                mids$ = new jmethodID[max_mid];
                mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
                mids$[mid_updateDocHead_39c7bd3c] = env->getMethodID(cls, "updateDocHead", "(I)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jint FunctionAllGroupHeadsCollector$GroupHead::compare(jint a0, jint a1) const
            {
              return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
            }

            void FunctionAllGroupHeadsCollector$GroupHead::updateDocHead(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_updateDocHead_39c7bd3c], a0);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {
            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_of_(t_FunctionAllGroupHeadsCollector$GroupHead *self, PyObject *args);
            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_compare(t_FunctionAllGroupHeadsCollector$GroupHead *self, PyObject *args);
            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_updateDocHead(t_FunctionAllGroupHeadsCollector$GroupHead *self, PyObject *arg);
            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_get__parameters_(t_FunctionAllGroupHeadsCollector$GroupHead *self, void *data);
            static PyGetSetDef t_FunctionAllGroupHeadsCollector$GroupHead__fields_[] = {
              DECLARE_GET_FIELD(t_FunctionAllGroupHeadsCollector$GroupHead, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FunctionAllGroupHeadsCollector$GroupHead__methods_[] = {
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector$GroupHead, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector$GroupHead, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector$GroupHead, of_, METH_VARARGS),
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector$GroupHead, compare, METH_VARARGS),
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector$GroupHead, updateDocHead, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FunctionAllGroupHeadsCollector$GroupHead, t_FunctionAllGroupHeadsCollector$GroupHead, ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector$GroupHead, FunctionAllGroupHeadsCollector$GroupHead, abstract_init, 0, 0, t_FunctionAllGroupHeadsCollector$GroupHead__fields_, 0, 0);
            PyObject *t_FunctionAllGroupHeadsCollector$GroupHead::wrap_Object(const FunctionAllGroupHeadsCollector$GroupHead& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionAllGroupHeadsCollector$GroupHead::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionAllGroupHeadsCollector$GroupHead *self = (t_FunctionAllGroupHeadsCollector$GroupHead *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_FunctionAllGroupHeadsCollector$GroupHead::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionAllGroupHeadsCollector$GroupHead::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionAllGroupHeadsCollector$GroupHead *self = (t_FunctionAllGroupHeadsCollector$GroupHead *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_FunctionAllGroupHeadsCollector$GroupHead::install(PyObject *module)
            {
              installType(&PY_TYPE(FunctionAllGroupHeadsCollector$GroupHead), module, "FunctionAllGroupHeadsCollector$GroupHead", 0);
            }

            void t_FunctionAllGroupHeadsCollector$GroupHead::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupHeadsCollector$GroupHead).tp_dict, "class_", make_descriptor(FunctionAllGroupHeadsCollector$GroupHead::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupHeadsCollector$GroupHead).tp_dict, "wrapfn_", make_descriptor(t_FunctionAllGroupHeadsCollector$GroupHead::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupHeadsCollector$GroupHead).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FunctionAllGroupHeadsCollector$GroupHead::initializeClass, 1)))
                return NULL;
              return t_FunctionAllGroupHeadsCollector$GroupHead::wrap_Object(FunctionAllGroupHeadsCollector$GroupHead(((t_FunctionAllGroupHeadsCollector$GroupHead *) arg)->object.this$));
            }
            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FunctionAllGroupHeadsCollector$GroupHead::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_of_(t_FunctionAllGroupHeadsCollector$GroupHead *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_compare(t_FunctionAllGroupHeadsCollector$GroupHead *self, PyObject *args)
            {
              jint a0;
              jint a1;
              jint result;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(result = self->object.compare(a0, a1));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "compare", args);
              return NULL;
            }

            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_updateDocHead(t_FunctionAllGroupHeadsCollector$GroupHead *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.updateDocHead(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "updateDocHead", arg);
              return NULL;
            }
            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_get__parameters_(t_FunctionAllGroupHeadsCollector$GroupHead *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/StopAnalyzer.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/File.h"
#include "org/apache/lucene/util/Version.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *StopAnalyzer::class$ = NULL;
          jmethodID *StopAnalyzer::mids$ = NULL;
          bool StopAnalyzer::live$ = false;
          ::org::apache::lucene::analysis::util::CharArraySet *StopAnalyzer::ENGLISH_STOP_WORDS_SET = NULL;

          jclass StopAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/StopAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_f88c7fb6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/File;)V");
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ENGLISH_STOP_WORDS_SET = new ::org::apache::lucene::analysis::util::CharArraySet(env->getStaticObjectField(cls, "ENGLISH_STOP_WORDS_SET", "Lorg/apache/lucene/analysis/util/CharArraySet;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StopAnalyzer::StopAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          StopAnalyzer::StopAnalyzer(const ::java::io::File & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

          StopAnalyzer::StopAnalyzer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          StopAnalyzer::StopAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          StopAnalyzer::StopAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          StopAnalyzer::StopAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::io::File & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f88c7fb6, a0.this$, a1.this$)) {}

          StopAnalyzer::StopAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          StopAnalyzer::StopAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_StopAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StopAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StopAnalyzer_init_(t_StopAnalyzer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_StopAnalyzer__methods_[] = {
            DECLARE_METHOD(t_StopAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StopAnalyzer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StopAnalyzer, t_StopAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, StopAnalyzer, t_StopAnalyzer_init_, 0, 0, 0, 0, 0);

          void t_StopAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(StopAnalyzer), module, "StopAnalyzer", 0);
          }

          void t_StopAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StopAnalyzer).tp_dict, "class_", make_descriptor(StopAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StopAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_StopAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StopAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(StopAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(StopAnalyzer).tp_dict, "ENGLISH_STOP_WORDS_SET", make_descriptor(::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(*StopAnalyzer::ENGLISH_STOP_WORDS_SET)));
          }

          static PyObject *t_StopAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StopAnalyzer::initializeClass, 1)))
              return NULL;
            return t_StopAnalyzer::wrap_Object(StopAnalyzer(((t_StopAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_StopAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StopAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StopAnalyzer_init_(t_StopAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                StopAnalyzer object((jobject) NULL);

                INT_CALL(object = StopAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::io::File a0((jobject) NULL);
                StopAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
                {
                  INT_CALL(object = StopAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                StopAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = StopAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                StopAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = StopAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                StopAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = StopAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::io::File a1((jobject) NULL);
                StopAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::File::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = StopAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                StopAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = StopAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                StopAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = StopAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/Range.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *Range::class$ = NULL;
          jmethodID *Range::mids$ = NULL;
          jfieldID *Range::fids$ = NULL;
          bool Range::live$ = false;

          jclass Range::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/Range");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getFilter_f7e0d95b] = env->getMethodID(cls, "getFilter", "(Lorg/apache/lucene/queries/function/ValueSource;)Lorg/apache/lucene/search/Filter;");
              mids$[mid_getFilter_fc904367] = env->getMethodID(cls, "getFilter", "(Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/queries/function/ValueSource;)Lorg/apache/lucene/search/Filter;");
              mids$[mid_failNoMatch_54c6a166] = env->getMethodID(cls, "failNoMatch", "()V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_label] = env->getFieldID(cls, "label", "Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::search::Filter Range::getFilter(const ::org::apache::lucene::queries::function::ValueSource & a0) const
          {
            return ::org::apache::lucene::search::Filter(env->callObjectMethod(this$, mids$[mid_getFilter_f7e0d95b], a0.this$));
          }

          ::org::apache::lucene::search::Filter Range::getFilter(const ::org::apache::lucene::search::Filter & a0, const ::org::apache::lucene::queries::function::ValueSource & a1) const
          {
            return ::org::apache::lucene::search::Filter(env->callObjectMethod(this$, mids$[mid_getFilter_fc904367], a0.this$, a1.this$));
          }

          ::java::lang::String Range::_get_label() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_label]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_Range_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Range_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Range_getFilter(t_Range *self, PyObject *args);
          static PyObject *t_Range_get__label(t_Range *self, void *data);

          static PyGetSetDef t_Range__fields_[] = {
            DECLARE_GET_FIELD(t_Range, label),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Range__methods_[] = {
            DECLARE_METHOD(t_Range, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Range, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Range, getFilter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Range, t_Range, ::java::lang::Object, Range, abstract_init, 0, 0, t_Range__fields_, 0, 0);

          void t_Range::install(PyObject *module)
          {
            installType(&PY_TYPE(Range), module, "Range", 0);
          }

          void t_Range::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Range).tp_dict, "class_", make_descriptor(Range::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Range).tp_dict, "wrapfn_", make_descriptor(t_Range::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Range).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Range_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Range::initializeClass, 1)))
              return NULL;
            return t_Range::wrap_Object(Range(((t_Range *) arg)->object.this$));
          }
          static PyObject *t_Range_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Range::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Range_getFilter(t_Range *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
                ::org::apache::lucene::search::Filter result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.getFilter(a0));
                  return ::org::apache::lucene::search::t_Filter::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::search::Filter a0((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
                ::org::apache::lucene::search::Filter result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.getFilter(a0, a1));
                  return ::org::apache::lucene::search::t_Filter::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getFilter", args);
            return NULL;
          }

          static PyObject *t_Range_get__label(t_Range *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_label());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/store/PythonDirectory.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {

        ::java::lang::Class *PythonDirectory::class$ = NULL;
        jmethodID *PythonDirectory::mids$ = NULL;
        bool PythonDirectory::live$ = false;

        jclass PythonDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/store/PythonDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileExists_5fdc3f44] = env->getMethodID(cls, "fileExists", "(Ljava/lang/String;)Z");
            mids$[mid_fileLength_5fdc3f54] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_fileModified_5fdc3f54] = env->getMethodID(cls, "fileModified", "(Ljava/lang/String;)J");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_getLockFactory_e4e9c36d] = env->getMethodID(cls, "getLockFactory", "()Lorg/apache/lucene/store/LockFactory;");
            mids$[mid_listAll_2e6d5245] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_setLockFactory_9892eb8c] = env->getMethodID(cls, "setLockFactory", "(Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_sync_5fdc3f48] = env->getMethodID(cls, "sync", "(Ljava/lang/String;)V");
            mids$[mid_sync_9bfb370d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_touchFile_5fdc3f48] = env->getMethodID(cls, "touchFile", "(Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonDirectory::PythonDirectory() : ::org::apache::lucene::store::Directory(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonDirectory::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonDirectory::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonDirectory::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }

        void PythonDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_9bfb370d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {
        static PyObject *t_PythonDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonDirectory_init_(t_PythonDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonDirectory_finalize(t_PythonDirectory *self);
        static PyObject *t_PythonDirectory_pythonExtension(t_PythonDirectory *self, PyObject *args);
        static PyObject *t_PythonDirectory_sync(t_PythonDirectory *self, PyObject *args);
        static void JNICALL t_PythonDirectory_clearLock0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonDirectory_close1(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonDirectory_createOutput2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
        static void JNICALL t_PythonDirectory_deleteFile3(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonDirectory_fileExists4(JNIEnv *jenv, jobject jobj, jobject a0);
        static jlong JNICALL t_PythonDirectory_fileLength5(JNIEnv *jenv, jobject jobj, jobject a0);
        static jlong JNICALL t_PythonDirectory_fileModified6(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonDirectory_getLockFactory7(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonDirectory_listAll8(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonDirectory_makeLock9(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonDirectory_openInput10(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
        static void JNICALL t_PythonDirectory_pythonDecRef11(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonDirectory_setLockFactory12(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonDirectory_sync13(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonDirectory_touchFile14(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonDirectory_get__self(t_PythonDirectory *self, void *data);
        static PyGetSetDef t_PythonDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_PythonDirectory, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonDirectory__methods_[] = {
          DECLARE_METHOD(t_PythonDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonDirectory, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonDirectory, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonDirectory, sync, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonDirectory, t_PythonDirectory, ::org::apache::lucene::store::Directory, PythonDirectory, t_PythonDirectory_init_, 0, 0, t_PythonDirectory__fields_, 0, 0);

        void t_PythonDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonDirectory), module, "PythonDirectory", 1);
        }

        void t_PythonDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonDirectory).tp_dict, "class_", make_descriptor(PythonDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonDirectory).tp_dict, "wrapfn_", make_descriptor(t_PythonDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonDirectory::initializeClass);
          JNINativeMethod methods[] = {
            { "clearLock", "(Ljava/lang/String;)V", (void *) t_PythonDirectory_clearLock0 },
            { "close", "()V", (void *) t_PythonDirectory_close1 },
            { "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;", (void *) t_PythonDirectory_createOutput2 },
            { "deleteFile", "(Ljava/lang/String;)V", (void *) t_PythonDirectory_deleteFile3 },
            { "fileExists", "(Ljava/lang/String;)Z", (void *) t_PythonDirectory_fileExists4 },
            { "fileLength", "(Ljava/lang/String;)J", (void *) t_PythonDirectory_fileLength5 },
            { "fileModified", "(Ljava/lang/String;)J", (void *) t_PythonDirectory_fileModified6 },
            { "getLockFactory", "()Lorg/apache/lucene/store/LockFactory;", (void *) t_PythonDirectory_getLockFactory7 },
            { "listAll", "()[Ljava/lang/String;", (void *) t_PythonDirectory_listAll8 },
            { "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;", (void *) t_PythonDirectory_makeLock9 },
            { "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;", (void *) t_PythonDirectory_openInput10 },
            { "pythonDecRef", "()V", (void *) t_PythonDirectory_pythonDecRef11 },
            { "setLockFactory", "(Lorg/apache/lucene/store/LockFactory;)V", (void *) t_PythonDirectory_setLockFactory12 },
            { "sync", "(Ljava/lang/String;)V", (void *) t_PythonDirectory_sync13 },
            { "touchFile", "(Ljava/lang/String;)V", (void *) t_PythonDirectory_touchFile14 },
          };
          env->registerNatives(cls, methods, 15);
        }

        static PyObject *t_PythonDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonDirectory::initializeClass, 1)))
            return NULL;
          return t_PythonDirectory::wrap_Object(PythonDirectory(((t_PythonDirectory *) arg)->object.this$));
        }
        static PyObject *t_PythonDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonDirectory_init_(t_PythonDirectory *self, PyObject *args, PyObject *kwds)
        {
          PythonDirectory object((jobject) NULL);

          INT_CALL(object = PythonDirectory());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonDirectory_finalize(t_PythonDirectory *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonDirectory_pythonExtension(t_PythonDirectory *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonDirectory_sync(t_PythonDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonDirectory), (PyObject *) self, "sync", args, 2);
        }

        static void JNICALL t_PythonDirectory_clearLock0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "clearLock", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonDirectory_close1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "close", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jobject JNICALL t_PythonDirectory_createOutput2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::store::IndexOutput value((jobject) NULL);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *o1 = ::org::apache::lucene::store::t_IOContext::wrap_Object(::org::apache::lucene::store::IOContext(a1));
          PyObject *result = PyObject_CallMethod(obj, "createOutput", "OO", o0, o1);
          Py_DECREF(o0);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::store::IndexOutput::initializeClass, &value))
          {
            throwTypeError("createOutput", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonDirectory_deleteFile3(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "deleteFile", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jboolean JNICALL t_PythonDirectory_fileExists4(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "fileExists", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("fileExists", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jlong JNICALL t_PythonDirectory_fileLength5(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jlong value;
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "fileLength", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "J", &value))
          {
            throwTypeError("fileLength", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jlong) 0;
        }

        static jlong JNICALL t_PythonDirectory_fileModified6(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jlong value;
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "fileModified", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "J", &value))
          {
            throwTypeError("fileModified", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jlong) 0;
        }

        static jobject JNICALL t_PythonDirectory_getLockFactory7(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::store::LockFactory value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "getLockFactory", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &value))
          {
            throwTypeError("getLockFactory", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static jobject JNICALL t_PythonDirectory_listAll8(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          JArray< ::java::lang::String > value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "listAll", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "[s", &value))
          {
            throwTypeError("listAll", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static jobject JNICALL t_PythonDirectory_makeLock9(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::store::Lock value((jobject) NULL);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "makeLock", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::store::Lock::initializeClass, &value))
          {
            throwTypeError("makeLock", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static jobject JNICALL t_PythonDirectory_openInput10(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::store::IndexInput value((jobject) NULL);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *o1 = ::org::apache::lucene::store::t_IOContext::wrap_Object(::org::apache::lucene::store::IOContext(a1));
          PyObject *result = PyObject_CallMethod(obj, "openInput", "OO", o0, o1);
          Py_DECREF(o0);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &value))
          {
            throwTypeError("openInput", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonDirectory_pythonDecRef11(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static void JNICALL t_PythonDirectory_setLockFactory12(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = ::org::apache::lucene::store::t_LockFactory::wrap_Object(::org::apache::lucene::store::LockFactory(a0));
          PyObject *result = PyObject_CallMethod(obj, "setLockFactory", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonDirectory_sync13(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "sync", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonDirectory_touchFile14(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "touchFile", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static PyObject *t_PythonDirectory_get__self(t_PythonDirectory *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/Lucene43HyphenationCompoundWordTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/compound/hyphenation/HyphenationTree.h"
#include "java/io/IOException.h"
#include "java/io/File.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {

          ::java::lang::Class *Lucene43HyphenationCompoundWordTokenFilter::class$ = NULL;
          jmethodID *Lucene43HyphenationCompoundWordTokenFilter::mids$ = NULL;
          bool Lucene43HyphenationCompoundWordTokenFilter::live$ = false;

          jclass Lucene43HyphenationCompoundWordTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/Lucene43HyphenationCompoundWordTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9fc9df59] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;)V");
              mids$[mid_init$_928921fa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_b555ce7d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;III)V");
              mids$[mid_init$_d8bc9319] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;Lorg/apache/lucene/analysis/util/CharArraySet;IIIZ)V");
              mids$[mid_getHyphenationTree_5c26e2ec] = env->getStaticMethodID(cls, "getHyphenationTree", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;");
              mids$[mid_getHyphenationTree_70e8a373] = env->getStaticMethodID(cls, "getHyphenationTree", "(Ljava/io/File;)Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;");
              mids$[mid_decompose_54c6a166] = env->getMethodID(cls, "decompose", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene43HyphenationCompoundWordTokenFilter::Lucene43HyphenationCompoundWordTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree & a1) : ::org::apache::lucene::analysis::compound::Lucene43CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_9fc9df59, a0.this$, a1.this$)) {}

          Lucene43HyphenationCompoundWordTokenFilter::Lucene43HyphenationCompoundWordTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::compound::Lucene43CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_928921fa, a0.this$, a1.this$, a2.this$)) {}

          Lucene43HyphenationCompoundWordTokenFilter::Lucene43HyphenationCompoundWordTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree & a1, jint a2, jint a3, jint a4) : ::org::apache::lucene::analysis::compound::Lucene43CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_b555ce7d, a0.this$, a1.this$, a2, a3, a4)) {}

          Lucene43HyphenationCompoundWordTokenFilter::Lucene43HyphenationCompoundWordTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2, jint a3, jint a4, jint a5, jboolean a6) : ::org::apache::lucene::analysis::compound::Lucene43CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_d8bc9319, a0.this$, a1.this$, a2.this$, a3, a4, a5, a6)) {}

          ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree Lucene43HyphenationCompoundWordTokenFilter::getHyphenationTree(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree(env->callStaticObjectMethod(cls, mids$[mid_getHyphenationTree_5c26e2ec], a0.this$));
          }

          ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree Lucene43HyphenationCompoundWordTokenFilter::getHyphenationTree(const ::java::io::File & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree(env->callStaticObjectMethod(cls, mids$[mid_getHyphenationTree_70e8a373], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          static PyObject *t_Lucene43HyphenationCompoundWordTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene43HyphenationCompoundWordTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene43HyphenationCompoundWordTokenFilter_init_(t_Lucene43HyphenationCompoundWordTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene43HyphenationCompoundWordTokenFilter_getHyphenationTree(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_Lucene43HyphenationCompoundWordTokenFilter__methods_[] = {
            DECLARE_METHOD(t_Lucene43HyphenationCompoundWordTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43HyphenationCompoundWordTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43HyphenationCompoundWordTokenFilter, getHyphenationTree, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene43HyphenationCompoundWordTokenFilter, t_Lucene43HyphenationCompoundWordTokenFilter, ::org::apache::lucene::analysis::compound::Lucene43CompoundWordTokenFilterBase, Lucene43HyphenationCompoundWordTokenFilter, t_Lucene43HyphenationCompoundWordTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_Lucene43HyphenationCompoundWordTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene43HyphenationCompoundWordTokenFilter), module, "Lucene43HyphenationCompoundWordTokenFilter", 0);
          }

          void t_Lucene43HyphenationCompoundWordTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene43HyphenationCompoundWordTokenFilter).tp_dict, "class_", make_descriptor(Lucene43HyphenationCompoundWordTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene43HyphenationCompoundWordTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_Lucene43HyphenationCompoundWordTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene43HyphenationCompoundWordTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene43HyphenationCompoundWordTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene43HyphenationCompoundWordTokenFilter::initializeClass, 1)))
              return NULL;
            return t_Lucene43HyphenationCompoundWordTokenFilter::wrap_Object(Lucene43HyphenationCompoundWordTokenFilter(((t_Lucene43HyphenationCompoundWordTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_Lucene43HyphenationCompoundWordTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene43HyphenationCompoundWordTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene43HyphenationCompoundWordTokenFilter_init_(t_Lucene43HyphenationCompoundWordTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree a1((jobject) NULL);
                Lucene43HyphenationCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = Lucene43HyphenationCompoundWordTokenFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree a1((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                Lucene43HyphenationCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kkK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = Lucene43HyphenationCompoundWordTokenFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree a1((jobject) NULL);
                jint a2;
                jint a3;
                jint a4;
                Lucene43HyphenationCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kkIII", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = Lucene43HyphenationCompoundWordTokenFilter(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 7:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree a1((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                jint a3;
                jint a4;
                jint a5;
                jboolean a6;
                Lucene43HyphenationCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kkKIIIZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a3, &a4, &a5, &a6))
                {
                  INT_CALL(object = Lucene43HyphenationCompoundWordTokenFilter(a0, a1, a2, a3, a4, a5, a6));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene43HyphenationCompoundWordTokenFilter_getHyphenationTree(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::compound::Lucene43HyphenationCompoundWordTokenFilter::getHyphenationTree(a0));
                  return ::org::apache::lucene::analysis::compound::hyphenation::t_HyphenationTree::wrap_Object(result);
                }
              }
              {
                ::java::io::File a0((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree result((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::compound::Lucene43HyphenationCompoundWordTokenFilter::getHyphenationTree(a0));
                  return ::org::apache::lucene::analysis::compound::hyphenation::t_HyphenationTree::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getHyphenationTree", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/WeightedFragListBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *WeightedFragListBuilder::class$ = NULL;
          jmethodID *WeightedFragListBuilder::mids$ = NULL;
          bool WeightedFragListBuilder::live$ = false;

          jclass WeightedFragListBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/WeightedFragListBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_createFieldFragList_f54fd6ce] = env->getMethodID(cls, "createFieldFragList", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList;I)Lorg/apache/lucene/search/vectorhighlight/FieldFragList;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WeightedFragListBuilder::WeightedFragListBuilder() : ::org::apache::lucene::search::vectorhighlight::BaseFragListBuilder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          WeightedFragListBuilder::WeightedFragListBuilder(jint a0) : ::org::apache::lucene::search::vectorhighlight::BaseFragListBuilder(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          ::org::apache::lucene::search::vectorhighlight::FieldFragList WeightedFragListBuilder::createFieldFragList(const ::org::apache::lucene::search::vectorhighlight::FieldPhraseList & a0, jint a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldFragList(env->callObjectMethod(this$, mids$[mid_createFieldFragList_f54fd6ce], a0.this$, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_WeightedFragListBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WeightedFragListBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WeightedFragListBuilder_init_(t_WeightedFragListBuilder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WeightedFragListBuilder_createFieldFragList(t_WeightedFragListBuilder *self, PyObject *args);

          static PyMethodDef t_WeightedFragListBuilder__methods_[] = {
            DECLARE_METHOD(t_WeightedFragListBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedFragListBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedFragListBuilder, createFieldFragList, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WeightedFragListBuilder, t_WeightedFragListBuilder, ::org::apache::lucene::search::vectorhighlight::BaseFragListBuilder, WeightedFragListBuilder, t_WeightedFragListBuilder_init_, 0, 0, 0, 0, 0);

          void t_WeightedFragListBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(WeightedFragListBuilder), module, "WeightedFragListBuilder", 0);
          }

          void t_WeightedFragListBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WeightedFragListBuilder).tp_dict, "class_", make_descriptor(WeightedFragListBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WeightedFragListBuilder).tp_dict, "wrapfn_", make_descriptor(t_WeightedFragListBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WeightedFragListBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WeightedFragListBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WeightedFragListBuilder::initializeClass, 1)))
              return NULL;
            return t_WeightedFragListBuilder::wrap_Object(WeightedFragListBuilder(((t_WeightedFragListBuilder *) arg)->object.this$));
          }
          static PyObject *t_WeightedFragListBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WeightedFragListBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WeightedFragListBuilder_init_(t_WeightedFragListBuilder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                WeightedFragListBuilder object((jobject) NULL);

                INT_CALL(object = WeightedFragListBuilder());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jint a0;
                WeightedFragListBuilder object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = WeightedFragListBuilder(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WeightedFragListBuilder_createFieldFragList(t_WeightedFragListBuilder *self, PyObject *args)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldPhraseList a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::search::vectorhighlight::FieldFragList result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::search::vectorhighlight::FieldPhraseList::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.createFieldFragList(a0, a1));
              return ::org::apache::lucene::search::vectorhighlight::t_FieldFragList::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(WeightedFragListBuilder), (PyObject *) self, "createFieldFragList", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/reverse/ReverseStringFilterFactory.h"
#include "org/apache/lucene/analysis/reverse/ReverseStringFilter.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace reverse {

          ::java::lang::Class *ReverseStringFilterFactory::class$ = NULL;
          jmethodID *ReverseStringFilterFactory::mids$ = NULL;
          bool ReverseStringFilterFactory::live$ = false;

          jclass ReverseStringFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/reverse/ReverseStringFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_b57d0b9a] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/reverse/ReverseStringFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ReverseStringFilterFactory::ReverseStringFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::reverse::ReverseStringFilter ReverseStringFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::reverse::ReverseStringFilter(env->callObjectMethod(this$, mids$[mid_create_b57d0b9a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace reverse {
          static PyObject *t_ReverseStringFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ReverseStringFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ReverseStringFilterFactory_init_(t_ReverseStringFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ReverseStringFilterFactory_create(t_ReverseStringFilterFactory *self, PyObject *args);

          static PyMethodDef t_ReverseStringFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ReverseStringFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ReverseStringFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ReverseStringFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ReverseStringFilterFactory, t_ReverseStringFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ReverseStringFilterFactory, t_ReverseStringFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ReverseStringFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ReverseStringFilterFactory), module, "ReverseStringFilterFactory", 0);
          }

          void t_ReverseStringFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ReverseStringFilterFactory).tp_dict, "class_", make_descriptor(ReverseStringFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ReverseStringFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ReverseStringFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ReverseStringFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ReverseStringFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ReverseStringFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ReverseStringFilterFactory::wrap_Object(ReverseStringFilterFactory(((t_ReverseStringFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ReverseStringFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ReverseStringFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ReverseStringFilterFactory_init_(t_ReverseStringFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ReverseStringFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ReverseStringFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ReverseStringFilterFactory_create(t_ReverseStringFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::reverse::ReverseStringFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::reverse::t_ReverseStringFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ReverseStringFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonFilter.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonFilter::class$ = NULL;
        jmethodID *PythonFilter::mids$ = NULL;
        bool PythonFilter::live$ = false;

        jclass PythonFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonFilter::PythonFilter() : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonFilter::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonFilter::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonFilter::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonFilter_init_(t_PythonFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonFilter_finalize(t_PythonFilter *self);
        static PyObject *t_PythonFilter_pythonExtension(t_PythonFilter *self, PyObject *args);
        static jobject JNICALL t_PythonFilter_getDocIdSet0(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
        static void JNICALL t_PythonFilter_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonFilter_get__self(t_PythonFilter *self, void *data);
        static PyGetSetDef t_PythonFilter__fields_[] = {
          DECLARE_GET_FIELD(t_PythonFilter, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonFilter__methods_[] = {
          DECLARE_METHOD(t_PythonFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFilter, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonFilter, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonFilter, t_PythonFilter, ::org::apache::lucene::search::Filter, PythonFilter, t_PythonFilter_init_, 0, 0, t_PythonFilter__fields_, 0, 0);

        void t_PythonFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonFilter), module, "PythonFilter", 1);
        }

        void t_PythonFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonFilter).tp_dict, "class_", make_descriptor(PythonFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonFilter).tp_dict, "wrapfn_", make_descriptor(t_PythonFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonFilter::initializeClass);
          JNINativeMethod methods[] = {
            { "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;", (void *) t_PythonFilter_getDocIdSet0 },
            { "pythonDecRef", "()V", (void *) t_PythonFilter_pythonDecRef1 },
          };
          env->registerNatives(cls, methods, 2);
        }

        static PyObject *t_PythonFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonFilter::initializeClass, 1)))
            return NULL;
          return t_PythonFilter::wrap_Object(PythonFilter(((t_PythonFilter *) arg)->object.this$));
        }
        static PyObject *t_PythonFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonFilter_init_(t_PythonFilter *self, PyObject *args, PyObject *kwds)
        {
          PythonFilter object((jobject) NULL);

          INT_CALL(object = PythonFilter());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonFilter_finalize(t_PythonFilter *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonFilter_pythonExtension(t_PythonFilter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jobject JNICALL t_PythonFilter_getDocIdSet0(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFilter::mids$[PythonFilter::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::search::DocIdSet value((jobject) NULL);
          PyObject *o0 = ::org::apache::lucene::index::t_AtomicReaderContext::wrap_Object(::org::apache::lucene::index::AtomicReaderContext(a0));
          PyObject *o1 = ::org::apache::lucene::util::t_Bits::wrap_Object(::org::apache::lucene::util::Bits(a1));
          PyObject *result = PyObject_CallMethod(obj, "getDocIdSet", "OO", o0, o1);
          Py_DECREF(o0);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::search::DocIdSet::initializeClass, &value))
          {
            throwTypeError("getDocIdSet", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonFilter_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFilter::mids$[PythonFilter::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonFilter::mids$[PythonFilter::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonFilter_get__self(t_PythonFilter *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl.h"
#include "java/lang/Class.h"
#include "java/lang/Cloneable.h"
#include "java/util/List.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *QueryNodeImpl::class$ = NULL;
              jmethodID *QueryNodeImpl::mids$ = NULL;
              bool QueryNodeImpl::live$ = false;
              ::java::lang::String *QueryNodeImpl::PLAINTEXT_FIELD_NAME = NULL;

              jclass QueryNodeImpl::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_add_cc04aeef] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_add_1fde8fc3] = env->getMethodID(cls, "add", "(Ljava/util/List;)V");
                  mids$[mid_clone_b387c5e6] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_containsTag_5fdc3f44] = env->getMethodID(cls, "containsTag", "(Ljava/lang/String;)Z");
                  mids$[mid_getChildren_87851566] = env->getMethodID(cls, "getChildren", "()Ljava/util/List;");
                  mids$[mid_getParent_b387c5e6] = env->getMethodID(cls, "getParent", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getTag_2a1c4d09] = env->getMethodID(cls, "getTag", "(Ljava/lang/String;)Ljava/lang/Object;");
                  mids$[mid_getTagMap_db60befd] = env->getMethodID(cls, "getTagMap", "()Ljava/util/Map;");
                  mids$[mid_isLeaf_54c6a16a] = env->getMethodID(cls, "isLeaf", "()Z");
                  mids$[mid_removeFromParent_54c6a166] = env->getMethodID(cls, "removeFromParent", "()V");
                  mids$[mid_set_1fde8fc3] = env->getMethodID(cls, "set", "(Ljava/util/List;)V");
                  mids$[mid_setTag_2da4da24] = env->getMethodID(cls, "setTag", "(Ljava/lang/String;Ljava/lang/Object;)V");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                  mids$[mid_unsetTag_5fdc3f48] = env->getMethodID(cls, "unsetTag", "(Ljava/lang/String;)V");
                  mids$[mid_allocate_54c6a166] = env->getMethodID(cls, "allocate", "()V");
                  mids$[mid_isRoot_54c6a16a] = env->getMethodID(cls, "isRoot", "()Z");
                  mids$[mid_setLeaf_bb0c767f] = env->getMethodID(cls, "setLeaf", "(Z)V");
                  mids$[mid_isDefaultField_a8afc646] = env->getMethodID(cls, "isDefaultField", "(Ljava/lang/CharSequence;)Z");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  PLAINTEXT_FIELD_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "PLAINTEXT_FIELD_NAME", "Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              QueryNodeImpl::QueryNodeImpl() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              void QueryNodeImpl::add(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_add_cc04aeef], a0.this$);
              }

              void QueryNodeImpl::add(const ::java::util::List & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_add_1fde8fc3], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeImpl::clone() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_clone_b387c5e6]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeImpl::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              jboolean QueryNodeImpl::containsTag(const ::java::lang::String & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_containsTag_5fdc3f44], a0.this$);
              }

              ::java::util::List QueryNodeImpl::getChildren() const
              {
                return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getChildren_87851566]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeImpl::getParent() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_getParent_b387c5e6]));
              }

              ::java::lang::Object QueryNodeImpl::getTag(const ::java::lang::String & a0) const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getTag_2a1c4d09], a0.this$));
              }

              ::java::util::Map QueryNodeImpl::getTagMap() const
              {
                return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getTagMap_db60befd]));
              }

              jboolean QueryNodeImpl::isLeaf() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isLeaf_54c6a16a]);
              }

              void QueryNodeImpl::removeFromParent() const
              {
                env->callVoidMethod(this$, mids$[mid_removeFromParent_54c6a166]);
              }

              void QueryNodeImpl::set(const ::java::util::List & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_set_1fde8fc3], a0.this$);
              }

              void QueryNodeImpl::setTag(const ::java::lang::String & a0, const ::java::lang::Object & a1) const
              {
                env->callVoidMethod(this$, mids$[mid_setTag_2da4da24], a0.this$, a1.this$);
              }

              ::java::lang::String QueryNodeImpl::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }

              void QueryNodeImpl::unsetTag(const ::java::lang::String & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_unsetTag_5fdc3f48], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_QueryNodeImpl_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeImpl_instance_(PyTypeObject *type, PyObject *arg);
              static int t_QueryNodeImpl_init_(t_QueryNodeImpl *self, PyObject *args, PyObject *kwds);
              static PyObject *t_QueryNodeImpl_add(t_QueryNodeImpl *self, PyObject *args);
              static PyObject *t_QueryNodeImpl_clone(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_cloneTree(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_containsTag(t_QueryNodeImpl *self, PyObject *arg);
              static PyObject *t_QueryNodeImpl_getChildren(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_getParent(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_getTag(t_QueryNodeImpl *self, PyObject *arg);
              static PyObject *t_QueryNodeImpl_getTagMap(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_isLeaf(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_removeFromParent(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_set(t_QueryNodeImpl *self, PyObject *arg);
              static PyObject *t_QueryNodeImpl_setTag(t_QueryNodeImpl *self, PyObject *args);
              static PyObject *t_QueryNodeImpl_toString(t_QueryNodeImpl *self, PyObject *args);
              static PyObject *t_QueryNodeImpl_unsetTag(t_QueryNodeImpl *self, PyObject *arg);
              static PyObject *t_QueryNodeImpl_get__children(t_QueryNodeImpl *self, void *data);
              static PyObject *t_QueryNodeImpl_get__leaf(t_QueryNodeImpl *self, void *data);
              static PyObject *t_QueryNodeImpl_get__parent(t_QueryNodeImpl *self, void *data);
              static PyObject *t_QueryNodeImpl_get__tagMap(t_QueryNodeImpl *self, void *data);
              static PyGetSetDef t_QueryNodeImpl__fields_[] = {
                DECLARE_GET_FIELD(t_QueryNodeImpl, children),
                DECLARE_GET_FIELD(t_QueryNodeImpl, leaf),
                DECLARE_GET_FIELD(t_QueryNodeImpl, parent),
                DECLARE_GET_FIELD(t_QueryNodeImpl, tagMap),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_QueryNodeImpl__methods_[] = {
                DECLARE_METHOD(t_QueryNodeImpl, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeImpl, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeImpl, add, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeImpl, clone, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, cloneTree, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, containsTag, METH_O),
                DECLARE_METHOD(t_QueryNodeImpl, getChildren, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, getParent, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, getTag, METH_O),
                DECLARE_METHOD(t_QueryNodeImpl, getTagMap, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, isLeaf, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, removeFromParent, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, set, METH_O),
                DECLARE_METHOD(t_QueryNodeImpl, setTag, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeImpl, toString, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeImpl, unsetTag, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryNodeImpl, t_QueryNodeImpl, ::java::lang::Object, QueryNodeImpl, t_QueryNodeImpl_init_, 0, 0, t_QueryNodeImpl__fields_, 0, 0);

              void t_QueryNodeImpl::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryNodeImpl), module, "QueryNodeImpl", 0);
              }

              void t_QueryNodeImpl::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryNodeImpl).tp_dict, "class_", make_descriptor(QueryNodeImpl::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryNodeImpl).tp_dict, "wrapfn_", make_descriptor(t_QueryNodeImpl::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryNodeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(QueryNodeImpl::initializeClass);
                PyDict_SetItemString(PY_TYPE(QueryNodeImpl).tp_dict, "PLAINTEXT_FIELD_NAME", make_descriptor(j2p(*QueryNodeImpl::PLAINTEXT_FIELD_NAME)));
              }

              static PyObject *t_QueryNodeImpl_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryNodeImpl::initializeClass, 1)))
                  return NULL;
                return t_QueryNodeImpl::wrap_Object(QueryNodeImpl(((t_QueryNodeImpl *) arg)->object.this$));
              }
              static PyObject *t_QueryNodeImpl_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryNodeImpl::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_QueryNodeImpl_init_(t_QueryNodeImpl *self, PyObject *args, PyObject *kwds)
              {
                QueryNodeImpl object((jobject) NULL);

                INT_CALL(object = QueryNodeImpl());
                self->object = object;

                return 0;
              }

              static PyObject *t_QueryNodeImpl_add(t_QueryNodeImpl *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                    {
                      OBJ_CALL(self->object.add(a0));
                      Py_RETURN_NONE;
                    }
                  }
                  {
                    ::java::util::List a0((jobject) NULL);
                    PyTypeObject **p0;

                    if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                    {
                      OBJ_CALL(self->object.add(a0));
                      Py_RETURN_NONE;
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "add", args);
                return NULL;
              }

              static PyObject *t_QueryNodeImpl_clone(t_QueryNodeImpl *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.clone());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_QueryNodeImpl_cloneTree(t_QueryNodeImpl *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.cloneTree());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_QueryNodeImpl_containsTag(t_QueryNodeImpl *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean result;

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(result = self->object.containsTag(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "containsTag", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeImpl_getChildren(t_QueryNodeImpl *self)
              {
                ::java::util::List result((jobject) NULL);
                OBJ_CALL(result = self->object.getChildren());
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::queryparser::flexible::core::nodes::PY_TYPE(QueryNode));
              }

              static PyObject *t_QueryNodeImpl_getParent(t_QueryNodeImpl *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getParent());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_QueryNodeImpl_getTag(t_QueryNodeImpl *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(result = self->object.getTag(a0));
                  return ::java::lang::t_Object::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "getTag", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeImpl_getTagMap(t_QueryNodeImpl *self)
              {
                ::java::util::Map result((jobject) NULL);
                OBJ_CALL(result = self->object.getTagMap());
                return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(Object));
              }

              static PyObject *t_QueryNodeImpl_isLeaf(t_QueryNodeImpl *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isLeaf());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_QueryNodeImpl_removeFromParent(t_QueryNodeImpl *self)
              {
                OBJ_CALL(self->object.removeFromParent());
                Py_RETURN_NONE;
              }

              static PyObject *t_QueryNodeImpl_set(t_QueryNodeImpl *self, PyObject *arg)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;

                if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(self->object.set(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "set", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeImpl_setTag(t_QueryNodeImpl *self, PyObject *args)
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);

                if (!parseArgs(args, "so", &a0, &a1))
                {
                  OBJ_CALL(self->object.setTag(a0, a1));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setTag", args);
                return NULL;
              }

              static PyObject *t_QueryNodeImpl_toString(t_QueryNodeImpl *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(QueryNodeImpl), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_QueryNodeImpl_unsetTag(t_QueryNodeImpl *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(self->object.unsetTag(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "unsetTag", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeImpl_get__children(t_QueryNodeImpl *self, void *data)
              {
                ::java::util::List value((jobject) NULL);
                OBJ_CALL(value = self->object.getChildren());
                return ::java::util::t_List::wrap_Object(value);
              }

              static PyObject *t_QueryNodeImpl_get__leaf(t_QueryNodeImpl *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isLeaf());
                Py_RETURN_BOOL(value);
              }

              static PyObject *t_QueryNodeImpl_get__parent(t_QueryNodeImpl *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getParent());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(value);
              }

              static PyObject *t_QueryNodeImpl_get__tagMap(t_QueryNodeImpl *self, void *data)
              {
                ::java::util::Map value((jobject) NULL);
                OBJ_CALL(value = self->object.getTagMap());
                return ::java::util::t_Map::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FilteredDocIdSet.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FilteredDocIdSet::class$ = NULL;
        jmethodID *FilteredDocIdSet::mids$ = NULL;
        bool FilteredDocIdSet::live$ = false;

        jclass FilteredDocIdSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FilteredDocIdSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_52bc98cb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/DocIdSet;)V");
            mids$[mid_bits_03c2457d] = env->getMethodID(cls, "bits", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
            mids$[mid_iterator_dc23660c] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_match_39c7bd30] = env->getMethodID(cls, "match", "(I)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilteredDocIdSet::FilteredDocIdSet(const ::org::apache::lucene::search::DocIdSet & a0) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_52bc98cb, a0.this$)) {}

        ::org::apache::lucene::util::Bits FilteredDocIdSet::bits() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_bits_03c2457d]));
        }

        jboolean FilteredDocIdSet::isCacheable() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
        }

        ::org::apache::lucene::search::DocIdSetIterator FilteredDocIdSet::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_dc23660c]));
        }

        jlong FilteredDocIdSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FilteredDocIdSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilteredDocIdSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilteredDocIdSet_init_(t_FilteredDocIdSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilteredDocIdSet_bits(t_FilteredDocIdSet *self, PyObject *args);
        static PyObject *t_FilteredDocIdSet_isCacheable(t_FilteredDocIdSet *self, PyObject *args);
        static PyObject *t_FilteredDocIdSet_iterator(t_FilteredDocIdSet *self, PyObject *args);
        static PyObject *t_FilteredDocIdSet_ramBytesUsed(t_FilteredDocIdSet *self, PyObject *args);
        static PyObject *t_FilteredDocIdSet_get__cacheable(t_FilteredDocIdSet *self, void *data);
        static PyGetSetDef t_FilteredDocIdSet__fields_[] = {
          DECLARE_GET_FIELD(t_FilteredDocIdSet, cacheable),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilteredDocIdSet__methods_[] = {
          DECLARE_METHOD(t_FilteredDocIdSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredDocIdSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredDocIdSet, bits, METH_VARARGS),
          DECLARE_METHOD(t_FilteredDocIdSet, isCacheable, METH_VARARGS),
          DECLARE_METHOD(t_FilteredDocIdSet, iterator, METH_VARARGS),
          DECLARE_METHOD(t_FilteredDocIdSet, ramBytesUsed, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilteredDocIdSet, t_FilteredDocIdSet, ::org::apache::lucene::search::DocIdSet, FilteredDocIdSet, t_FilteredDocIdSet_init_, 0, 0, t_FilteredDocIdSet__fields_, 0, 0);

        void t_FilteredDocIdSet::install(PyObject *module)
        {
          installType(&PY_TYPE(FilteredDocIdSet), module, "FilteredDocIdSet", 0);
        }

        void t_FilteredDocIdSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilteredDocIdSet).tp_dict, "class_", make_descriptor(FilteredDocIdSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilteredDocIdSet).tp_dict, "wrapfn_", make_descriptor(t_FilteredDocIdSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilteredDocIdSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilteredDocIdSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilteredDocIdSet::initializeClass, 1)))
            return NULL;
          return t_FilteredDocIdSet::wrap_Object(FilteredDocIdSet(((t_FilteredDocIdSet *) arg)->object.this$));
        }
        static PyObject *t_FilteredDocIdSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilteredDocIdSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilteredDocIdSet_init_(t_FilteredDocIdSet *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::DocIdSet a0((jobject) NULL);
          FilteredDocIdSet object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSet::initializeClass, &a0))
          {
            INT_CALL(object = FilteredDocIdSet(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilteredDocIdSet_bits(t_FilteredDocIdSet *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.bits());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredDocIdSet), (PyObject *) self, "bits", args, 2);
        }

        static PyObject *t_FilteredDocIdSet_isCacheable(t_FilteredDocIdSet *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isCacheable());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilteredDocIdSet), (PyObject *) self, "isCacheable", args, 2);
        }

        static PyObject *t_FilteredDocIdSet_iterator(t_FilteredDocIdSet *self, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredDocIdSet), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_FilteredDocIdSet_ramBytesUsed(t_FilteredDocIdSet *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilteredDocIdSet), (PyObject *) self, "ramBytesUsed", args, 2);
        }

        static PyObject *t_FilteredDocIdSet_get__cacheable(t_FilteredDocIdSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCacheable());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/SloppyMath.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *SloppyMath::class$ = NULL;
        jmethodID *SloppyMath::mids$ = NULL;
        bool SloppyMath::live$ = false;

        jclass SloppyMath::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/SloppyMath");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_asin_5d1c7657] = env->getStaticMethodID(cls, "asin", "(D)D");
            mids$[mid_cos_5d1c7657] = env->getStaticMethodID(cls, "cos", "(D)D");
            mids$[mid_earthDiameter_5d1c7657] = env->getStaticMethodID(cls, "earthDiameter", "(D)D");
            mids$[mid_haversin_143b6dc0] = env->getStaticMethodID(cls, "haversin", "(DDDD)D");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SloppyMath::SloppyMath() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jdouble SloppyMath::asin(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_asin_5d1c7657], a0);
        }

        jdouble SloppyMath::cos(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_cos_5d1c7657], a0);
        }

        jdouble SloppyMath::earthDiameter(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_earthDiameter_5d1c7657], a0);
        }

        jdouble SloppyMath::haversin(jdouble a0, jdouble a1, jdouble a2, jdouble a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_haversin_143b6dc0], a0, a1, a2, a3);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_SloppyMath_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SloppyMath_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SloppyMath_init_(t_SloppyMath *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SloppyMath_asin(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SloppyMath_cos(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SloppyMath_earthDiameter(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SloppyMath_haversin(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_SloppyMath__methods_[] = {
          DECLARE_METHOD(t_SloppyMath, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SloppyMath, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SloppyMath, asin, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SloppyMath, cos, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SloppyMath, earthDiameter, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SloppyMath, haversin, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SloppyMath, t_SloppyMath, ::java::lang::Object, SloppyMath, t_SloppyMath_init_, 0, 0, 0, 0, 0);

        void t_SloppyMath::install(PyObject *module)
        {
          installType(&PY_TYPE(SloppyMath), module, "SloppyMath", 0);
        }

        void t_SloppyMath::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SloppyMath).tp_dict, "class_", make_descriptor(SloppyMath::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SloppyMath).tp_dict, "wrapfn_", make_descriptor(t_SloppyMath::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SloppyMath).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SloppyMath_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SloppyMath::initializeClass, 1)))
            return NULL;
          return t_SloppyMath::wrap_Object(SloppyMath(((t_SloppyMath *) arg)->object.this$));
        }
        static PyObject *t_SloppyMath_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SloppyMath::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SloppyMath_init_(t_SloppyMath *self, PyObject *args, PyObject *kwds)
        {
          SloppyMath object((jobject) NULL);

          INT_CALL(object = SloppyMath());
          self->object = object;

          return 0;
        }

        static PyObject *t_SloppyMath_asin(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SloppyMath::asin(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "asin", arg);
          return NULL;
        }

        static PyObject *t_SloppyMath_cos(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SloppyMath::cos(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "cos", arg);
          return NULL;
        }

        static PyObject *t_SloppyMath_earthDiameter(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SloppyMath::earthDiameter(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "earthDiameter", arg);
          return NULL;
        }

        static PyObject *t_SloppyMath_haversin(PyTypeObject *type, PyObject *args)
        {
          jdouble a0;
          jdouble a1;
          jdouble a2;
          jdouble a3;
          jdouble result;

          if (!parseArgs(args, "DDDD", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SloppyMath::haversin(a0, a1, a2, a3));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "haversin", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/sortedset/DefaultSortedSetDocValuesReaderState.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState$OrdRange.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {

          ::java::lang::Class *DefaultSortedSetDocValuesReaderState::class$ = NULL;
          jmethodID *DefaultSortedSetDocValuesReaderState::mids$ = NULL;
          jfieldID *DefaultSortedSetDocValuesReaderState::fids$ = NULL;
          bool DefaultSortedSetDocValuesReaderState::live$ = false;

          jclass DefaultSortedSetDocValuesReaderState::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/sortedset/DefaultSortedSetDocValuesReaderState");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7d7eaea9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;)V");
              mids$[mid_init$_215fea03] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)V");
              mids$[mid_getDocValues_4bead171] = env->getMethodID(cls, "getDocValues", "()Lorg/apache/lucene/index/SortedSetDocValues;");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getOrdRange_73e2ee38] = env->getMethodID(cls, "getOrdRange", "(Ljava/lang/String;)Lorg/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState$OrdRange;");
              mids$[mid_getOrigReader_94bbd010] = env->getMethodID(cls, "getOrigReader", "()Lorg/apache/lucene/index/IndexReader;");
              mids$[mid_getPrefixToOrdRange_db60befd] = env->getMethodID(cls, "getPrefixToOrdRange", "()Ljava/util/Map;");
              mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");

              fids$ = new jfieldID[max_fid];
              fids$[fid_origReader] = env->getFieldID(cls, "origReader", "Lorg/apache/lucene/index/IndexReader;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DefaultSortedSetDocValuesReaderState::DefaultSortedSetDocValuesReaderState(const ::org::apache::lucene::index::IndexReader & a0) : ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState(env->newObject(initializeClass, &mids$, mid_init$_7d7eaea9, a0.this$)) {}

          DefaultSortedSetDocValuesReaderState::DefaultSortedSetDocValuesReaderState(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1) : ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState(env->newObject(initializeClass, &mids$, mid_init$_215fea03, a0.this$, a1.this$)) {}

          ::org::apache::lucene::index::SortedSetDocValues DefaultSortedSetDocValuesReaderState::getDocValues() const
          {
            return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getDocValues_4bead171]));
          }

          ::java::lang::String DefaultSortedSetDocValuesReaderState::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState$OrdRange DefaultSortedSetDocValuesReaderState::getOrdRange(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState$OrdRange(env->callObjectMethod(this$, mids$[mid_getOrdRange_73e2ee38], a0.this$));
          }

          ::org::apache::lucene::index::IndexReader DefaultSortedSetDocValuesReaderState::getOrigReader() const
          {
            return ::org::apache::lucene::index::IndexReader(env->callObjectMethod(this$, mids$[mid_getOrigReader_94bbd010]));
          }

          ::java::util::Map DefaultSortedSetDocValuesReaderState::getPrefixToOrdRange() const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getPrefixToOrdRange_db60befd]));
          }

          jint DefaultSortedSetDocValuesReaderState::getSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
          }

          ::org::apache::lucene::index::IndexReader DefaultSortedSetDocValuesReaderState::_get_origReader() const
          {
            return ::org::apache::lucene::index::IndexReader(env->getObjectField(this$, fids$[fid_origReader]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {
          static PyObject *t_DefaultSortedSetDocValuesReaderState_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DefaultSortedSetDocValuesReaderState_init_(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_getDocValues(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_getField(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_getOrdRange(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_getOrigReader(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_getPrefixToOrdRange(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_getSize(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args);

          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__docValues(t_DefaultSortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__field(t_DefaultSortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__origReader(t_DefaultSortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__prefixToOrdRange(t_DefaultSortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__size(t_DefaultSortedSetDocValuesReaderState *self, void *data);
          static PyGetSetDef t_DefaultSortedSetDocValuesReaderState__fields_[] = {
            DECLARE_GET_FIELD(t_DefaultSortedSetDocValuesReaderState, docValues),
            DECLARE_GET_FIELD(t_DefaultSortedSetDocValuesReaderState, field),
            DECLARE_GET_FIELD(t_DefaultSortedSetDocValuesReaderState, origReader),
            DECLARE_GET_FIELD(t_DefaultSortedSetDocValuesReaderState, prefixToOrdRange),
            DECLARE_GET_FIELD(t_DefaultSortedSetDocValuesReaderState, size),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DefaultSortedSetDocValuesReaderState__methods_[] = {
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, getDocValues, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, getField, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, getOrdRange, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, getOrigReader, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, getPrefixToOrdRange, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, getSize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DefaultSortedSetDocValuesReaderState, t_DefaultSortedSetDocValuesReaderState, ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState, DefaultSortedSetDocValuesReaderState, t_DefaultSortedSetDocValuesReaderState_init_, 0, 0, t_DefaultSortedSetDocValuesReaderState__fields_, 0, 0);

          void t_DefaultSortedSetDocValuesReaderState::install(PyObject *module)
          {
            installType(&PY_TYPE(DefaultSortedSetDocValuesReaderState), module, "DefaultSortedSetDocValuesReaderState", 0);
          }

          void t_DefaultSortedSetDocValuesReaderState::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DefaultSortedSetDocValuesReaderState).tp_dict, "class_", make_descriptor(DefaultSortedSetDocValuesReaderState::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DefaultSortedSetDocValuesReaderState).tp_dict, "wrapfn_", make_descriptor(t_DefaultSortedSetDocValuesReaderState::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DefaultSortedSetDocValuesReaderState).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DefaultSortedSetDocValuesReaderState::initializeClass, 1)))
              return NULL;
            return t_DefaultSortedSetDocValuesReaderState::wrap_Object(DefaultSortedSetDocValuesReaderState(((t_DefaultSortedSetDocValuesReaderState *) arg)->object.this$));
          }
          static PyObject *t_DefaultSortedSetDocValuesReaderState_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DefaultSortedSetDocValuesReaderState::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DefaultSortedSetDocValuesReaderState_init_(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                DefaultSortedSetDocValuesReaderState object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
                {
                  INT_CALL(object = DefaultSortedSetDocValuesReaderState(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                DefaultSortedSetDocValuesReaderState object((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = DefaultSortedSetDocValuesReaderState(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_getDocValues(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args)
          {
            ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getDocValues());
              return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DefaultSortedSetDocValuesReaderState), (PyObject *) self, "getDocValues", args, 2);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_getField(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(DefaultSortedSetDocValuesReaderState), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_getOrdRange(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState$OrdRange result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.getOrdRange(a0));
              return ::org::apache::lucene::facet::sortedset::t_SortedSetDocValuesReaderState$OrdRange::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DefaultSortedSetDocValuesReaderState), (PyObject *) self, "getOrdRange", args, 2);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_getOrigReader(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getOrigReader());
              return ::org::apache::lucene::index::t_IndexReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DefaultSortedSetDocValuesReaderState), (PyObject *) self, "getOrigReader", args, 2);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_getPrefixToOrdRange(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args)
          {
            ::java::util::Map result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getPrefixToOrdRange());
              return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::org::apache::lucene::facet::sortedset::PY_TYPE(SortedSetDocValuesReaderState$OrdRange));
            }

            return callSuper(&PY_TYPE(DefaultSortedSetDocValuesReaderState), (PyObject *) self, "getPrefixToOrdRange", args, 2);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_getSize(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSize());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(DefaultSortedSetDocValuesReaderState), (PyObject *) self, "getSize", args, 2);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__docValues(t_DefaultSortedSetDocValuesReaderState *self, void *data)
          {
            ::org::apache::lucene::index::SortedSetDocValues value((jobject) NULL);
            OBJ_CALL(value = self->object.getDocValues());
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(value);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__field(t_DefaultSortedSetDocValuesReaderState *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__origReader(t_DefaultSortedSetDocValuesReaderState *self, void *data)
          {
            ::org::apache::lucene::index::IndexReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getOrigReader());
            return ::org::apache::lucene::index::t_IndexReader::wrap_Object(value);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__prefixToOrdRange(t_DefaultSortedSetDocValuesReaderState *self, void *data)
          {
            ::java::util::Map value((jobject) NULL);
            OBJ_CALL(value = self->object.getPrefixToOrdRange());
            return ::java::util::t_Map::wrap_Object(value);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__size(t_DefaultSortedSetDocValuesReaderState *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSize());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractAllGroupsCollector.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractAllGroupsCollector::class$ = NULL;
          jmethodID *AbstractAllGroupsCollector::mids$ = NULL;
          bool AbstractAllGroupsCollector::live$ = false;

          jclass AbstractAllGroupsCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractAllGroupsCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
              mids$[mid_getGroupCount_54c6a179] = env->getMethodID(cls, "getGroupCount", "()I");
              mids$[mid_getGroups_2d2d7de4] = env->getMethodID(cls, "getGroups", "()Ljava/util/Collection;");
              mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractAllGroupsCollector::AbstractAllGroupsCollector() : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean AbstractAllGroupsCollector::acceptsDocsOutOfOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
          }

          jint AbstractAllGroupsCollector::getGroupCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getGroupCount_54c6a179]);
          }

          ::java::util::Collection AbstractAllGroupsCollector::getGroups() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getGroups_2d2d7de4]));
          }

          void AbstractAllGroupsCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractAllGroupsCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAllGroupsCollector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAllGroupsCollector_of_(t_AbstractAllGroupsCollector *self, PyObject *args);
          static int t_AbstractAllGroupsCollector_init_(t_AbstractAllGroupsCollector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractAllGroupsCollector_acceptsDocsOutOfOrder(t_AbstractAllGroupsCollector *self, PyObject *args);
          static PyObject *t_AbstractAllGroupsCollector_getGroupCount(t_AbstractAllGroupsCollector *self);
          static PyObject *t_AbstractAllGroupsCollector_getGroups(t_AbstractAllGroupsCollector *self);
          static PyObject *t_AbstractAllGroupsCollector_setScorer(t_AbstractAllGroupsCollector *self, PyObject *args);
          static PyObject *t_AbstractAllGroupsCollector_get__groupCount(t_AbstractAllGroupsCollector *self, void *data);
          static PyObject *t_AbstractAllGroupsCollector_get__groups(t_AbstractAllGroupsCollector *self, void *data);
          static int t_AbstractAllGroupsCollector_set__scorer(t_AbstractAllGroupsCollector *self, PyObject *arg, void *data);
          static PyObject *t_AbstractAllGroupsCollector_get__parameters_(t_AbstractAllGroupsCollector *self, void *data);
          static PyGetSetDef t_AbstractAllGroupsCollector__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractAllGroupsCollector, groupCount),
            DECLARE_GET_FIELD(t_AbstractAllGroupsCollector, groups),
            DECLARE_SET_FIELD(t_AbstractAllGroupsCollector, scorer),
            DECLARE_GET_FIELD(t_AbstractAllGroupsCollector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractAllGroupsCollector__methods_[] = {
            DECLARE_METHOD(t_AbstractAllGroupsCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAllGroupsCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAllGroupsCollector, of_, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAllGroupsCollector, acceptsDocsOutOfOrder, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAllGroupsCollector, getGroupCount, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAllGroupsCollector, getGroups, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAllGroupsCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractAllGroupsCollector, t_AbstractAllGroupsCollector, ::org::apache::lucene::search::Collector, AbstractAllGroupsCollector, t_AbstractAllGroupsCollector_init_, 0, 0, t_AbstractAllGroupsCollector__fields_, 0, 0);
          PyObject *t_AbstractAllGroupsCollector::wrap_Object(const AbstractAllGroupsCollector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractAllGroupsCollector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractAllGroupsCollector *self = (t_AbstractAllGroupsCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractAllGroupsCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractAllGroupsCollector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractAllGroupsCollector *self = (t_AbstractAllGroupsCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractAllGroupsCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractAllGroupsCollector), module, "AbstractAllGroupsCollector", 0);
          }

          void t_AbstractAllGroupsCollector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupsCollector).tp_dict, "class_", make_descriptor(AbstractAllGroupsCollector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupsCollector).tp_dict, "wrapfn_", make_descriptor(t_AbstractAllGroupsCollector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractAllGroupsCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractAllGroupsCollector::initializeClass, 1)))
              return NULL;
            return t_AbstractAllGroupsCollector::wrap_Object(AbstractAllGroupsCollector(((t_AbstractAllGroupsCollector *) arg)->object.this$));
          }
          static PyObject *t_AbstractAllGroupsCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractAllGroupsCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractAllGroupsCollector_of_(t_AbstractAllGroupsCollector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_AbstractAllGroupsCollector_init_(t_AbstractAllGroupsCollector *self, PyObject *args, PyObject *kwds)
          {
            AbstractAllGroupsCollector object((jobject) NULL);

            INT_CALL(object = AbstractAllGroupsCollector());
            self->object = object;

            return 0;
          }

          static PyObject *t_AbstractAllGroupsCollector_acceptsDocsOutOfOrder(t_AbstractAllGroupsCollector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractAllGroupsCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
          }

          static PyObject *t_AbstractAllGroupsCollector_getGroupCount(t_AbstractAllGroupsCollector *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getGroupCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_AbstractAllGroupsCollector_getGroups(t_AbstractAllGroupsCollector *self)
          {
            ::java::util::Collection result((jobject) NULL);
            OBJ_CALL(result = self->object.getGroups());
            return ::java::util::t_Collection::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_AbstractAllGroupsCollector_setScorer(t_AbstractAllGroupsCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorer a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractAllGroupsCollector), (PyObject *) self, "setScorer", args, 2);
          }
          static PyObject *t_AbstractAllGroupsCollector_get__parameters_(t_AbstractAllGroupsCollector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_AbstractAllGroupsCollector_get__groupCount(t_AbstractAllGroupsCollector *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getGroupCount());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_AbstractAllGroupsCollector_get__groups(t_AbstractAllGroupsCollector *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getGroups());
            return ::java::util::t_Collection::wrap_Object(value);
          }

          static int t_AbstractAllGroupsCollector_set__scorer(t_AbstractAllGroupsCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseMinimalStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseMinimalStemmer::class$ = NULL;
          jmethodID *PortugueseMinimalStemmer::mids$ = NULL;
          bool PortugueseMinimalStemmer::live$ = false;

          jclass PortugueseMinimalStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseMinimalStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseMinimalStemmer::PortugueseMinimalStemmer() : ::org::apache::lucene::analysis::pt::RSLPStemmerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint PortugueseMinimalStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseMinimalStemmer_init_(t_PortugueseMinimalStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseMinimalStemmer_stem(t_PortugueseMinimalStemmer *self, PyObject *args);

          static PyMethodDef t_PortugueseMinimalStemmer__methods_[] = {
            DECLARE_METHOD(t_PortugueseMinimalStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseMinimalStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseMinimalStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseMinimalStemmer, t_PortugueseMinimalStemmer, ::org::apache::lucene::analysis::pt::RSLPStemmerBase, PortugueseMinimalStemmer, t_PortugueseMinimalStemmer_init_, 0, 0, 0, 0, 0);

          void t_PortugueseMinimalStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseMinimalStemmer), module, "PortugueseMinimalStemmer", 0);
          }

          void t_PortugueseMinimalStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemmer).tp_dict, "class_", make_descriptor(PortugueseMinimalStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemmer).tp_dict, "wrapfn_", make_descriptor(t_PortugueseMinimalStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseMinimalStemmer::initializeClass, 1)))
              return NULL;
            return t_PortugueseMinimalStemmer::wrap_Object(PortugueseMinimalStemmer(((t_PortugueseMinimalStemmer *) arg)->object.this$));
          }
          static PyObject *t_PortugueseMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseMinimalStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseMinimalStemmer_init_(t_PortugueseMinimalStemmer *self, PyObject *args, PyObject *kwds)
          {
            PortugueseMinimalStemmer object((jobject) NULL);

            INT_CALL(object = PortugueseMinimalStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_PortugueseMinimalStemmer_stem(t_PortugueseMinimalStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletion.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletion$Completion.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *FSTCompletion::class$ = NULL;
            jmethodID *FSTCompletion::mids$ = NULL;
            bool FSTCompletion::live$ = false;
            jint FSTCompletion::DEFAULT_BUCKETS = (jint) 0;

            jclass FSTCompletion::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/FSTCompletion");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d454d65c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;)V");
                mids$[mid_init$_a36157b6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;ZZ)V");
                mids$[mid_getBucket_a8afc655] = env->getMethodID(cls, "getBucket", "(Ljava/lang/CharSequence;)I");
                mids$[mid_getBucketCount_54c6a179] = env->getMethodID(cls, "getBucketCount", "()I");
                mids$[mid_getFST_917b3659] = env->getMethodID(cls, "getFST", "()Lorg/apache/lucene/util/fst/FST;");
                mids$[mid_lookup_560b361c] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;I)Ljava/util/List;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                DEFAULT_BUCKETS = env->getStaticIntField(cls, "DEFAULT_BUCKETS");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FSTCompletion::FSTCompletion(const ::org::apache::lucene::util::fst::FST & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d454d65c, a0.this$)) {}

            FSTCompletion::FSTCompletion(const ::org::apache::lucene::util::fst::FST & a0, jboolean a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a36157b6, a0.this$, a1, a2)) {}

            jint FSTCompletion::getBucket(const ::java::lang::CharSequence & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getBucket_a8afc655], a0.this$);
            }

            jint FSTCompletion::getBucketCount() const
            {
              return env->callIntMethod(this$, mids$[mid_getBucketCount_54c6a179]);
            }

            ::org::apache::lucene::util::fst::FST FSTCompletion::getFST() const
            {
              return ::org::apache::lucene::util::fst::FST(env->callObjectMethod(this$, mids$[mid_getFST_917b3659]));
            }

            ::java::util::List FSTCompletion::lookup(const ::java::lang::CharSequence & a0, jint a1) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_560b361c], a0.this$, a1));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_FSTCompletion_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTCompletion_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FSTCompletion_init_(t_FSTCompletion *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FSTCompletion_getBucket(t_FSTCompletion *self, PyObject *arg);
            static PyObject *t_FSTCompletion_getBucketCount(t_FSTCompletion *self);
            static PyObject *t_FSTCompletion_getFST(t_FSTCompletion *self);
            static PyObject *t_FSTCompletion_lookup(t_FSTCompletion *self, PyObject *args);
            static PyObject *t_FSTCompletion_get__bucketCount(t_FSTCompletion *self, void *data);
            static PyObject *t_FSTCompletion_get__fST(t_FSTCompletion *self, void *data);
            static PyGetSetDef t_FSTCompletion__fields_[] = {
              DECLARE_GET_FIELD(t_FSTCompletion, bucketCount),
              DECLARE_GET_FIELD(t_FSTCompletion, fST),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FSTCompletion__methods_[] = {
              DECLARE_METHOD(t_FSTCompletion, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletion, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletion, getBucket, METH_O),
              DECLARE_METHOD(t_FSTCompletion, getBucketCount, METH_NOARGS),
              DECLARE_METHOD(t_FSTCompletion, getFST, METH_NOARGS),
              DECLARE_METHOD(t_FSTCompletion, lookup, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FSTCompletion, t_FSTCompletion, ::java::lang::Object, FSTCompletion, t_FSTCompletion_init_, 0, 0, t_FSTCompletion__fields_, 0, 0);

            void t_FSTCompletion::install(PyObject *module)
            {
              installType(&PY_TYPE(FSTCompletion), module, "FSTCompletion", 0);
              PyDict_SetItemString(PY_TYPE(FSTCompletion).tp_dict, "Completion", make_descriptor(&PY_TYPE(FSTCompletion$Completion)));
            }

            void t_FSTCompletion::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FSTCompletion).tp_dict, "class_", make_descriptor(FSTCompletion::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FSTCompletion).tp_dict, "wrapfn_", make_descriptor(t_FSTCompletion::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FSTCompletion).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(FSTCompletion::initializeClass);
              PyDict_SetItemString(PY_TYPE(FSTCompletion).tp_dict, "DEFAULT_BUCKETS", make_descriptor(FSTCompletion::DEFAULT_BUCKETS));
            }

            static PyObject *t_FSTCompletion_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FSTCompletion::initializeClass, 1)))
                return NULL;
              return t_FSTCompletion::wrap_Object(FSTCompletion(((t_FSTCompletion *) arg)->object.this$));
            }
            static PyObject *t_FSTCompletion_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FSTCompletion::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FSTCompletion_init_(t_FSTCompletion *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
                  PyTypeObject **p0;
                  FSTCompletion object((jobject) NULL);

                  if (!parseArgs(args, "K", ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_))
                  {
                    INT_CALL(object = FSTCompletion(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 3:
                {
                  ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
                  PyTypeObject **p0;
                  jboolean a1;
                  jboolean a2;
                  FSTCompletion object((jobject) NULL);

                  if (!parseArgs(args, "KZZ", ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1, &a2))
                  {
                    INT_CALL(object = FSTCompletion(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FSTCompletion_getBucket(t_FSTCompletion *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.getBucket(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getBucket", arg);
              return NULL;
            }

            static PyObject *t_FSTCompletion_getBucketCount(t_FSTCompletion *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBucketCount());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_FSTCompletion_getFST(t_FSTCompletion *self)
            {
              ::org::apache::lucene::util::fst::FST result((jobject) NULL);
              OBJ_CALL(result = self->object.getFST());
              return ::org::apache::lucene::util::fst::t_FST::wrap_Object(result, &::java::lang::PY_TYPE(Object));
            }

            static PyObject *t_FSTCompletion_lookup(t_FSTCompletion *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              jint a1;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
              {
                OBJ_CALL(result = self->object.lookup(a0, a1));
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::fst::PY_TYPE(FSTCompletion$Completion));
              }

              PyErr_SetArgsError((PyObject *) self, "lookup", args);
              return NULL;
            }

            static PyObject *t_FSTCompletion_get__bucketCount(t_FSTCompletion *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBucketCount());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_FSTCompletion_get__fST(t_FSTCompletion *self, void *data)
            {
              ::org::apache::lucene::util::fst::FST value((jobject) NULL);
              OBJ_CALL(value = self->object.getFST());
              return ::org::apache::lucene::util::fst::t_FST::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/store/PythonIndexOutput.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {

        ::java::lang::Class *PythonIndexOutput::class$ = NULL;
        jmethodID *PythonIndexOutput::mids$ = NULL;
        bool PythonIndexOutput::live$ = false;

        jclass PythonIndexOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/store/PythonIndexOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
            mids$[mid_getChecksum_54c6a17a] = env->getMethodID(cls, "getChecksum", "()J");
            mids$[mid_getFilePointer_54c6a17a] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_writeByte_b2271687] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_49b4f12b] = env->getMethodID(cls, "writeBytes", "([B)V");
            mids$[mid_writeBytes_86f4435f] = env->getMethodID(cls, "writeBytes", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonIndexOutput::PythonIndexOutput() : ::org::apache::lucene::store::IndexOutput(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonIndexOutput::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        void PythonIndexOutput::flush() const
        {
          env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
        }

        jlong PythonIndexOutput::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonIndexOutput::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }

        void PythonIndexOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_86f4435f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {
        static PyObject *t_PythonIndexOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonIndexOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonIndexOutput_init_(t_PythonIndexOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonIndexOutput_finalize(t_PythonIndexOutput *self);
        static PyObject *t_PythonIndexOutput_flush(t_PythonIndexOutput *self, PyObject *args);
        static PyObject *t_PythonIndexOutput_pythonExtension(t_PythonIndexOutput *self, PyObject *args);
        static PyObject *t_PythonIndexOutput_writeBytes(t_PythonIndexOutput *self, PyObject *args);
        static void JNICALL t_PythonIndexOutput_close0(JNIEnv *jenv, jobject jobj);
        static jlong JNICALL t_PythonIndexOutput_getChecksum1(JNIEnv *jenv, jobject jobj);
        static jlong JNICALL t_PythonIndexOutput_getFilePointer2(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonIndexOutput_pythonDecRef3(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonIndexOutput_writeByte4(JNIEnv *jenv, jobject jobj, jbyte a0);
        static void JNICALL t_PythonIndexOutput_writeBytes5(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonIndexOutput_get__self(t_PythonIndexOutput *self, void *data);
        static PyGetSetDef t_PythonIndexOutput__fields_[] = {
          DECLARE_GET_FIELD(t_PythonIndexOutput, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonIndexOutput__methods_[] = {
          DECLARE_METHOD(t_PythonIndexOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIndexOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIndexOutput, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonIndexOutput, flush, METH_VARARGS),
          DECLARE_METHOD(t_PythonIndexOutput, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonIndexOutput, writeBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonIndexOutput, t_PythonIndexOutput, ::org::apache::lucene::store::IndexOutput, PythonIndexOutput, t_PythonIndexOutput_init_, 0, 0, t_PythonIndexOutput__fields_, 0, 0);

        void t_PythonIndexOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonIndexOutput), module, "PythonIndexOutput", 1);
        }

        void t_PythonIndexOutput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonIndexOutput).tp_dict, "class_", make_descriptor(PythonIndexOutput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonIndexOutput).tp_dict, "wrapfn_", make_descriptor(t_PythonIndexOutput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonIndexOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonIndexOutput::initializeClass);
          JNINativeMethod methods[] = {
            { "close", "()V", (void *) t_PythonIndexOutput_close0 },
            { "getChecksum", "()J", (void *) t_PythonIndexOutput_getChecksum1 },
            { "getFilePointer", "()J", (void *) t_PythonIndexOutput_getFilePointer2 },
            { "pythonDecRef", "()V", (void *) t_PythonIndexOutput_pythonDecRef3 },
            { "writeByte", "(B)V", (void *) t_PythonIndexOutput_writeByte4 },
            { "writeBytes", "([B)V", (void *) t_PythonIndexOutput_writeBytes5 },
          };
          env->registerNatives(cls, methods, 6);
        }

        static PyObject *t_PythonIndexOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonIndexOutput::initializeClass, 1)))
            return NULL;
          return t_PythonIndexOutput::wrap_Object(PythonIndexOutput(((t_PythonIndexOutput *) arg)->object.this$));
        }
        static PyObject *t_PythonIndexOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonIndexOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonIndexOutput_init_(t_PythonIndexOutput *self, PyObject *args, PyObject *kwds)
        {
          PythonIndexOutput object((jobject) NULL);

          INT_CALL(object = PythonIndexOutput());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonIndexOutput_finalize(t_PythonIndexOutput *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonIndexOutput_flush(t_PythonIndexOutput *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.flush());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonIndexOutput), (PyObject *) self, "flush", args, 2);
        }

        static PyObject *t_PythonIndexOutput_pythonExtension(t_PythonIndexOutput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonIndexOutput_writeBytes(t_PythonIndexOutput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonIndexOutput), (PyObject *) self, "writeBytes", args, 2);
        }

        static void JNICALL t_PythonIndexOutput_close0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "close", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jlong JNICALL t_PythonIndexOutput_getChecksum1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jlong value;
          PyObject *result = PyObject_CallMethod(obj, "getChecksum", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "J", &value))
          {
            throwTypeError("getChecksum", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jlong) 0;
        }

        static jlong JNICALL t_PythonIndexOutput_getFilePointer2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jlong value;
          PyObject *result = PyObject_CallMethod(obj, "getFilePointer", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "J", &value))
          {
            throwTypeError("getFilePointer", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jlong) 0;
        }

        static void JNICALL t_PythonIndexOutput_pythonDecRef3(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static void JNICALL t_PythonIndexOutput_writeByte4(JNIEnv *jenv, jobject jobj, jbyte a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = PyInt_FromLong(a0);
          PyObject *result = PyObject_CallMethod(obj, "writeByte", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonIndexOutput_writeBytes5(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = JArray<jbyte>(a0).wrap();
          PyObject *result = PyObject_CallMethod(obj, "writeBytes", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static PyObject *t_PythonIndexOutput_get__self(t_PythonIndexOutput *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/lang/String.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValue::class$ = NULL;
          jmethodID *MutableValue::mids$ = NULL;
          jfieldID *MutableValue::fids$ = NULL;
          bool MutableValue::live$ = false;

          jclass MutableValue::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValue");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_290588f1] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_compareTo_d590ce63] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/util/mutable/MutableValue;)I");
              mids$[mid_copy_d590ce7c] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_15ab3811] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_equalsSameType_290588e2] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_exists_54c6a16a] = env->getMethodID(cls, "exists", "()Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_846352c3] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_exists] = env->getFieldID(cls, "exists", "Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValue::MutableValue() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint MutableValue::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_290588f1], a0.this$);
          }

          jint MutableValue::compareTo(const MutableValue & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_d590ce63], a0.this$);
          }

          void MutableValue::copy(const MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d590ce7c], a0.this$);
          }

          MutableValue MutableValue::duplicate() const
          {
            return MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_15ab3811]));
          }

          jboolean MutableValue::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jboolean MutableValue::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_290588e2], a0.this$);
          }

          jboolean MutableValue::exists() const
          {
            return env->callBooleanMethod(this$, mids$[mid_exists_54c6a16a]);
          }

          jint MutableValue::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::Object MutableValue::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_846352c3]));
          }

          ::java::lang::String MutableValue::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          jboolean MutableValue::_get_exists() const
          {
            return env->getBooleanField(this$, fids$[fid_exists]);
          }

          void MutableValue::_set_exists(jboolean a0) const
          {
            env->setBooleanField(this$, fids$[fid_exists], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValue_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValue_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValue_init_(t_MutableValue *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValue_compareSameType(t_MutableValue *self, PyObject *arg);
          static PyObject *t_MutableValue_compareTo(t_MutableValue *self, PyObject *arg);
          static PyObject *t_MutableValue_copy(t_MutableValue *self, PyObject *arg);
          static PyObject *t_MutableValue_duplicate(t_MutableValue *self);
          static PyObject *t_MutableValue_equals(t_MutableValue *self, PyObject *args);
          static PyObject *t_MutableValue_equalsSameType(t_MutableValue *self, PyObject *arg);
          static PyObject *t_MutableValue_exists(t_MutableValue *self);
          static PyObject *t_MutableValue_hashCode(t_MutableValue *self, PyObject *args);
          static PyObject *t_MutableValue_toObject(t_MutableValue *self);
          static PyObject *t_MutableValue_toString(t_MutableValue *self, PyObject *args);
          static PyObject *t_MutableValue_get__exists(t_MutableValue *self, void *data);
          static int t_MutableValue_set__exists(t_MutableValue *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValue__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValue, exists),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValue__methods_[] = {
            DECLARE_METHOD(t_MutableValue, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValue, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValue, compareSameType, METH_O),
            DECLARE_METHOD(t_MutableValue, compareTo, METH_O),
            DECLARE_METHOD(t_MutableValue, copy, METH_O),
            DECLARE_METHOD(t_MutableValue, duplicate, METH_NOARGS),
            DECLARE_METHOD(t_MutableValue, equals, METH_VARARGS),
            DECLARE_METHOD(t_MutableValue, equalsSameType, METH_O),
            DECLARE_METHOD(t_MutableValue, exists, METH_NOARGS),
            DECLARE_METHOD(t_MutableValue, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValue, toObject, METH_NOARGS),
            DECLARE_METHOD(t_MutableValue, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MutableValue, t_MutableValue, ::java::lang::Object, MutableValue, t_MutableValue_init_, 0, 0, t_MutableValue__fields_, 0, 0);

          void t_MutableValue::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValue), module, "MutableValue", 0);
          }

          void t_MutableValue::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MutableValue).tp_dict, "class_", make_descriptor(MutableValue::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MutableValue).tp_dict, "wrapfn_", make_descriptor(t_MutableValue::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MutableValue).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValue_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValue::initializeClass, 1)))
              return NULL;
            return t_MutableValue::wrap_Object(MutableValue(((t_MutableValue *) arg)->object.this$));
          }
          static PyObject *t_MutableValue_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValue::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValue_init_(t_MutableValue *self, PyObject *args, PyObject *kwds)
          {
            MutableValue object((jobject) NULL);

            INT_CALL(object = MutableValue());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValue_compareSameType(t_MutableValue *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareSameType", arg);
            return NULL;
          }

          static PyObject *t_MutableValue_compareTo(t_MutableValue *self, PyObject *arg)
          {
            MutableValue a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_MutableValue_copy(t_MutableValue *self, PyObject *arg)
          {
            MutableValue a0((jobject) NULL);

            if (!parseArg(arg, "k", MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "copy", arg);
            return NULL;
          }

          static PyObject *t_MutableValue_duplicate(t_MutableValue *self)
          {
            MutableValue result((jobject) NULL);
            OBJ_CALL(result = self->object.duplicate());
            return t_MutableValue::wrap_Object(result);
          }

          static PyObject *t_MutableValue_equals(t_MutableValue *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MutableValue), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_MutableValue_equalsSameType(t_MutableValue *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "equalsSameType", arg);
            return NULL;
          }

          static PyObject *t_MutableValue_exists(t_MutableValue *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.exists());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_MutableValue_hashCode(t_MutableValue *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValue), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValue_toObject(t_MutableValue *self)
          {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.toObject());
            return ::java::lang::t_Object::wrap_Object(result);
          }

          static PyObject *t_MutableValue_toString(t_MutableValue *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(MutableValue), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_MutableValue_get__exists(t_MutableValue *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_exists());
            Py_RETURN_BOOL(value);
          }
          static int t_MutableValue_set__exists(t_MutableValue *self, PyObject *arg, void *data)
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object._set_exists(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "exists", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/CommandLineUtil.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/io/File.h"
#include "org/apache/lucene/store/FSDirectory.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/String.h"
#include "java/lang/IllegalAccessException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *CommandLineUtil::class$ = NULL;
        jmethodID *CommandLineUtil::mids$ = NULL;
        bool CommandLineUtil::live$ = false;

        jclass CommandLineUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/CommandLineUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_loadDirectoryClass_7d663d97] = env->getStaticMethodID(cls, "loadDirectoryClass", "(Ljava/lang/String;)Ljava/lang/Class;");
            mids$[mid_loadFSDirectoryClass_7d663d97] = env->getStaticMethodID(cls, "loadFSDirectoryClass", "(Ljava/lang/String;)Ljava/lang/Class;");
            mids$[mid_newFSDirectory_96268b7b] = env->getStaticMethodID(cls, "newFSDirectory", "(Ljava/lang/Class;Ljava/io/File;)Lorg/apache/lucene/store/FSDirectory;");
            mids$[mid_newFSDirectory_75db4bef] = env->getStaticMethodID(cls, "newFSDirectory", "(Ljava/lang/String;Ljava/io/File;)Lorg/apache/lucene/store/FSDirectory;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::Class CommandLineUtil::loadDirectoryClass(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::Class(env->callStaticObjectMethod(cls, mids$[mid_loadDirectoryClass_7d663d97], a0.this$));
        }

        ::java::lang::Class CommandLineUtil::loadFSDirectoryClass(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::Class(env->callStaticObjectMethod(cls, mids$[mid_loadFSDirectoryClass_7d663d97], a0.this$));
        }

        ::org::apache::lucene::store::FSDirectory CommandLineUtil::newFSDirectory(const ::java::lang::Class & a0, const ::java::io::File & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::store::FSDirectory(env->callStaticObjectMethod(cls, mids$[mid_newFSDirectory_96268b7b], a0.this$, a1.this$));
        }

        ::org::apache::lucene::store::FSDirectory CommandLineUtil::newFSDirectory(const ::java::lang::String & a0, const ::java::io::File & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::store::FSDirectory(env->callStaticObjectMethod(cls, mids$[mid_newFSDirectory_75db4bef], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_CommandLineUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CommandLineUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CommandLineUtil_loadDirectoryClass(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CommandLineUtil_loadFSDirectoryClass(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CommandLineUtil_newFSDirectory(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_CommandLineUtil__methods_[] = {
          DECLARE_METHOD(t_CommandLineUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CommandLineUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CommandLineUtil, loadDirectoryClass, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CommandLineUtil, loadFSDirectoryClass, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CommandLineUtil, newFSDirectory, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CommandLineUtil, t_CommandLineUtil, ::java::lang::Object, CommandLineUtil, abstract_init, 0, 0, 0, 0, 0);

        void t_CommandLineUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(CommandLineUtil), module, "CommandLineUtil", 0);
        }

        void t_CommandLineUtil::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CommandLineUtil).tp_dict, "class_", make_descriptor(CommandLineUtil::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CommandLineUtil).tp_dict, "wrapfn_", make_descriptor(t_CommandLineUtil::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CommandLineUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CommandLineUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CommandLineUtil::initializeClass, 1)))
            return NULL;
          return t_CommandLineUtil::wrap_Object(CommandLineUtil(((t_CommandLineUtil *) arg)->object.this$));
        }
        static PyObject *t_CommandLineUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CommandLineUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CommandLineUtil_loadDirectoryClass(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Class result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::CommandLineUtil::loadDirectoryClass(a0));
            return ::java::lang::t_Class::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "loadDirectoryClass", arg);
          return NULL;
        }

        static PyObject *t_CommandLineUtil_loadFSDirectoryClass(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Class result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::CommandLineUtil::loadFSDirectoryClass(a0));
            return ::java::lang::t_Class::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "loadFSDirectoryClass", arg);
          return NULL;
        }

        static PyObject *t_CommandLineUtil_newFSDirectory(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::Class a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::io::File a1((jobject) NULL);
              ::org::apache::lucene::store::FSDirectory result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::lang::Class::initializeClass, ::java::io::File::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::CommandLineUtil::newFSDirectory(a0, a1));
                return ::org::apache::lucene::store::t_FSDirectory::wrap_Object(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::io::File a1((jobject) NULL);
              ::org::apache::lucene::store::FSDirectory result((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::io::File::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::CommandLineUtil::newFSDirectory(a0, a1));
                return ::org::apache::lucene::store::t_FSDirectory::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "newFSDirectory", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/FieldInfosReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *FieldInfosReader::class$ = NULL;
        jmethodID *FieldInfosReader::mids$ = NULL;
        bool FieldInfosReader::live$ = false;

        jclass FieldInfosReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/FieldInfosReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_read_d7fc5981] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/index/FieldInfos;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::FieldInfos FieldInfosReader::read(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_read_d7fc5981], a0.this$, a1.this$, a2.this$, a3.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_FieldInfosReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfosReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfosReader_read(t_FieldInfosReader *self, PyObject *args);

        static PyMethodDef t_FieldInfosReader__methods_[] = {
          DECLARE_METHOD(t_FieldInfosReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfosReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfosReader, read, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldInfosReader, t_FieldInfosReader, ::java::lang::Object, FieldInfosReader, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldInfosReader::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInfosReader), module, "FieldInfosReader", 0);
        }

        void t_FieldInfosReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldInfosReader).tp_dict, "class_", make_descriptor(FieldInfosReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldInfosReader).tp_dict, "wrapfn_", make_descriptor(t_FieldInfosReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldInfosReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldInfosReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInfosReader::initializeClass, 1)))
            return NULL;
          return t_FieldInfosReader::wrap_Object(FieldInfosReader(((t_FieldInfosReader *) arg)->object.this$));
        }
        static PyObject *t_FieldInfosReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInfosReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldInfosReader_read(t_FieldInfosReader *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);

          if (!parseArgs(args, "kssk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "read", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModelP.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModelP::class$ = NULL;
          jmethodID *BasicModelP::mids$ = NULL;
          bool BasicModelP::live$ = false;

          jclass BasicModelP::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModelP");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModelP::BasicModelP() : ::org::apache::lucene::search::similarities::BasicModel(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat BasicModelP::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String BasicModelP::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModelP_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModelP_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModelP_init_(t_BasicModelP *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModelP_score(t_BasicModelP *self, PyObject *args);
          static PyObject *t_BasicModelP_toString(t_BasicModelP *self, PyObject *args);

          static PyMethodDef t_BasicModelP__methods_[] = {
            DECLARE_METHOD(t_BasicModelP, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelP, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelP, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelP, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicModelP, t_BasicModelP, ::org::apache::lucene::search::similarities::BasicModel, BasicModelP, t_BasicModelP_init_, 0, 0, 0, 0, 0);

          void t_BasicModelP::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModelP), module, "BasicModelP", 0);
          }

          void t_BasicModelP::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicModelP).tp_dict, "class_", make_descriptor(BasicModelP::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicModelP).tp_dict, "wrapfn_", make_descriptor(t_BasicModelP::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicModelP).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModelP_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModelP::initializeClass, 1)))
              return NULL;
            return t_BasicModelP::wrap_Object(BasicModelP(((t_BasicModelP *) arg)->object.this$));
          }
          static PyObject *t_BasicModelP_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModelP::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModelP_init_(t_BasicModelP *self, PyObject *args, PyObject *kwds)
          {
            BasicModelP object((jobject) NULL);

            INT_CALL(object = BasicModelP());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModelP_score(t_BasicModelP *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(BasicModelP), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_BasicModelP_toString(t_BasicModelP *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BasicModelP), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FragListBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FragListBuilder::class$ = NULL;
          jmethodID *FragListBuilder::mids$ = NULL;
          bool FragListBuilder::live$ = false;

          jclass FragListBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FragListBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_createFieldFragList_f54fd6ce] = env->getMethodID(cls, "createFieldFragList", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList;I)Lorg/apache/lucene/search/vectorhighlight/FieldFragList;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::search::vectorhighlight::FieldFragList FragListBuilder::createFieldFragList(const ::org::apache::lucene::search::vectorhighlight::FieldPhraseList & a0, jint a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldFragList(env->callObjectMethod(this$, mids$[mid_createFieldFragList_f54fd6ce], a0.this$, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FragListBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FragListBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FragListBuilder_createFieldFragList(t_FragListBuilder *self, PyObject *args);

          static PyMethodDef t_FragListBuilder__methods_[] = {
            DECLARE_METHOD(t_FragListBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FragListBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FragListBuilder, createFieldFragList, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FragListBuilder, t_FragListBuilder, ::java::lang::Object, FragListBuilder, abstract_init, 0, 0, 0, 0, 0);

          void t_FragListBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(FragListBuilder), module, "FragListBuilder", 0);
          }

          void t_FragListBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FragListBuilder).tp_dict, "class_", make_descriptor(FragListBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FragListBuilder).tp_dict, "wrapfn_", make_descriptor(t_FragListBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FragListBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FragListBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FragListBuilder::initializeClass, 1)))
              return NULL;
            return t_FragListBuilder::wrap_Object(FragListBuilder(((t_FragListBuilder *) arg)->object.this$));
          }
          static PyObject *t_FragListBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FragListBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FragListBuilder_createFieldFragList(t_FragListBuilder *self, PyObject *args)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldPhraseList a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::search::vectorhighlight::FieldFragList result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::search::vectorhighlight::FieldPhraseList::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.createFieldFragList(a0, a1));
              return ::org::apache::lucene::search::vectorhighlight::t_FieldFragList::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "createFieldFragList", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/CharStream.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *CharStream::class$ = NULL;
              jmethodID *CharStream::mids$ = NULL;
              bool CharStream::live$ = false;

              jclass CharStream::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/CharStream");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_BeginToken_54c6a173] = env->getMethodID(cls, "BeginToken", "()C");
                  mids$[mid_Done_54c6a166] = env->getMethodID(cls, "Done", "()V");
                  mids$[mid_GetImage_14c7b5c5] = env->getMethodID(cls, "GetImage", "()Ljava/lang/String;");
                  mids$[mid_GetSuffix_b4292e99] = env->getMethodID(cls, "GetSuffix", "(I)[C");
                  mids$[mid_backup_39c7bd3c] = env->getMethodID(cls, "backup", "(I)V");
                  mids$[mid_getBeginColumn_54c6a179] = env->getMethodID(cls, "getBeginColumn", "()I");
                  mids$[mid_getBeginLine_54c6a179] = env->getMethodID(cls, "getBeginLine", "()I");
                  mids$[mid_getColumn_54c6a179] = env->getMethodID(cls, "getColumn", "()I");
                  mids$[mid_getEndColumn_54c6a179] = env->getMethodID(cls, "getEndColumn", "()I");
                  mids$[mid_getEndLine_54c6a179] = env->getMethodID(cls, "getEndLine", "()I");
                  mids$[mid_getLine_54c6a179] = env->getMethodID(cls, "getLine", "()I");
                  mids$[mid_readChar_54c6a173] = env->getMethodID(cls, "readChar", "()C");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              jchar CharStream::BeginToken() const
              {
                return env->callCharMethod(this$, mids$[mid_BeginToken_54c6a173]);
              }

              void CharStream::Done() const
              {
                env->callVoidMethod(this$, mids$[mid_Done_54c6a166]);
              }

              ::java::lang::String CharStream::GetImage() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_GetImage_14c7b5c5]));
              }

              JArray< jchar > CharStream::GetSuffix(jint a0) const
              {
                return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_GetSuffix_b4292e99], a0));
              }

              void CharStream::backup(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_backup_39c7bd3c], a0);
              }

              jint CharStream::getBeginColumn() const
              {
                return env->callIntMethod(this$, mids$[mid_getBeginColumn_54c6a179]);
              }

              jint CharStream::getBeginLine() const
              {
                return env->callIntMethod(this$, mids$[mid_getBeginLine_54c6a179]);
              }

              jint CharStream::getColumn() const
              {
                return env->callIntMethod(this$, mids$[mid_getColumn_54c6a179]);
              }

              jint CharStream::getEndColumn() const
              {
                return env->callIntMethod(this$, mids$[mid_getEndColumn_54c6a179]);
              }

              jint CharStream::getEndLine() const
              {
                return env->callIntMethod(this$, mids$[mid_getEndLine_54c6a179]);
              }

              jint CharStream::getLine() const
              {
                return env->callIntMethod(this$, mids$[mid_getLine_54c6a179]);
              }

              jchar CharStream::readChar() const
              {
                return env->callCharMethod(this$, mids$[mid_readChar_54c6a173]);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_CharStream_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_CharStream_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_CharStream_BeginToken(t_CharStream *self);
              static PyObject *t_CharStream_Done(t_CharStream *self);
              static PyObject *t_CharStream_GetImage(t_CharStream *self);
              static PyObject *t_CharStream_GetSuffix(t_CharStream *self, PyObject *arg);
              static PyObject *t_CharStream_backup(t_CharStream *self, PyObject *arg);
              static PyObject *t_CharStream_getBeginColumn(t_CharStream *self);
              static PyObject *t_CharStream_getBeginLine(t_CharStream *self);
              static PyObject *t_CharStream_getColumn(t_CharStream *self);
              static PyObject *t_CharStream_getEndColumn(t_CharStream *self);
              static PyObject *t_CharStream_getEndLine(t_CharStream *self);
              static PyObject *t_CharStream_getLine(t_CharStream *self);
              static PyObject *t_CharStream_readChar(t_CharStream *self);
              static PyObject *t_CharStream_get__beginColumn(t_CharStream *self, void *data);
              static PyObject *t_CharStream_get__beginLine(t_CharStream *self, void *data);
              static PyObject *t_CharStream_get__column(t_CharStream *self, void *data);
              static PyObject *t_CharStream_get__endColumn(t_CharStream *self, void *data);
              static PyObject *t_CharStream_get__endLine(t_CharStream *self, void *data);
              static PyObject *t_CharStream_get__line(t_CharStream *self, void *data);
              static PyGetSetDef t_CharStream__fields_[] = {
                DECLARE_GET_FIELD(t_CharStream, beginColumn),
                DECLARE_GET_FIELD(t_CharStream, beginLine),
                DECLARE_GET_FIELD(t_CharStream, column),
                DECLARE_GET_FIELD(t_CharStream, endColumn),
                DECLARE_GET_FIELD(t_CharStream, endLine),
                DECLARE_GET_FIELD(t_CharStream, line),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_CharStream__methods_[] = {
                DECLARE_METHOD(t_CharStream, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_CharStream, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_CharStream, BeginToken, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, Done, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, GetImage, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, GetSuffix, METH_O),
                DECLARE_METHOD(t_CharStream, backup, METH_O),
                DECLARE_METHOD(t_CharStream, getBeginColumn, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, getBeginLine, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, getColumn, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, getEndColumn, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, getEndLine, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, getLine, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, readChar, METH_NOARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(CharStream, t_CharStream, ::java::lang::Object, CharStream, abstract_init, 0, 0, t_CharStream__fields_, 0, 0);

              void t_CharStream::install(PyObject *module)
              {
                installType(&PY_TYPE(CharStream), module, "CharStream", 0);
              }

              void t_CharStream::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "class_", make_descriptor(CharStream::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "wrapfn_", make_descriptor(t_CharStream::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_CharStream_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, CharStream::initializeClass, 1)))
                  return NULL;
                return t_CharStream::wrap_Object(CharStream(((t_CharStream *) arg)->object.this$));
              }
              static PyObject *t_CharStream_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, CharStream::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_CharStream_BeginToken(t_CharStream *self)
              {
                jchar result;
                OBJ_CALL(result = self->object.BeginToken());
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              static PyObject *t_CharStream_Done(t_CharStream *self)
              {
                OBJ_CALL(self->object.Done());
                Py_RETURN_NONE;
              }

              static PyObject *t_CharStream_GetImage(t_CharStream *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.GetImage());
                return j2p(result);
              }

              static PyObject *t_CharStream_GetSuffix(t_CharStream *self, PyObject *arg)
              {
                jint a0;
                JArray< jchar > result((jobject) NULL);

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.GetSuffix(a0));
                  return result.wrap();
                }

                PyErr_SetArgsError((PyObject *) self, "GetSuffix", arg);
                return NULL;
              }

              static PyObject *t_CharStream_backup(t_CharStream *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.backup(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "backup", arg);
                return NULL;
              }

              static PyObject *t_CharStream_getBeginColumn(t_CharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getBeginColumn());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_CharStream_getBeginLine(t_CharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getBeginLine());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_CharStream_getColumn(t_CharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getColumn());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_CharStream_getEndColumn(t_CharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getEndColumn());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_CharStream_getEndLine(t_CharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getEndLine());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_CharStream_getLine(t_CharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getLine());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_CharStream_readChar(t_CharStream *self)
              {
                jchar result;
                OBJ_CALL(result = self->object.readChar());
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              static PyObject *t_CharStream_get__beginColumn(t_CharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getBeginColumn());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_CharStream_get__beginLine(t_CharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getBeginLine());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_CharStream_get__column(t_CharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getColumn());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_CharStream_get__endColumn(t_CharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getEndColumn());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_CharStream_get__endLine(t_CharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getEndLine());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_CharStream_get__line(t_CharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getLine());
                return PyInt_FromLong((long) value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DocIdSetIterator::class$ = NULL;
        jmethodID *DocIdSetIterator::mids$ = NULL;
        bool DocIdSetIterator::live$ = false;
        jint DocIdSetIterator::NO_MORE_DOCS = (jint) 0;

        jclass DocIdSetIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DocIdSetIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_empty_dc23660c] = env->getStaticMethodID(cls, "empty", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_slowAdvance_39c7bd23] = env->getMethodID(cls, "slowAdvance", "(I)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            NO_MORE_DOCS = env->getStaticIntField(cls, "NO_MORE_DOCS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocIdSetIterator::DocIdSetIterator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jint DocIdSetIterator::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        jlong DocIdSetIterator::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint DocIdSetIterator::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        DocIdSetIterator DocIdSetIterator::empty()
        {
          jclass cls = env->getClass(initializeClass);
          return DocIdSetIterator(env->callStaticObjectMethod(cls, mids$[mid_empty_dc23660c]));
        }

        jint DocIdSetIterator::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DocIdSetIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocIdSetIterator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocIdSetIterator_init_(t_DocIdSetIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocIdSetIterator_advance(t_DocIdSetIterator *self, PyObject *arg);
        static PyObject *t_DocIdSetIterator_cost(t_DocIdSetIterator *self);
        static PyObject *t_DocIdSetIterator_docID(t_DocIdSetIterator *self);
        static PyObject *t_DocIdSetIterator_empty(PyTypeObject *type);
        static PyObject *t_DocIdSetIterator_nextDoc(t_DocIdSetIterator *self);

        static PyMethodDef t_DocIdSetIterator__methods_[] = {
          DECLARE_METHOD(t_DocIdSetIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIdSetIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIdSetIterator, advance, METH_O),
          DECLARE_METHOD(t_DocIdSetIterator, cost, METH_NOARGS),
          DECLARE_METHOD(t_DocIdSetIterator, docID, METH_NOARGS),
          DECLARE_METHOD(t_DocIdSetIterator, empty, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocIdSetIterator, nextDoc, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocIdSetIterator, t_DocIdSetIterator, ::java::lang::Object, DocIdSetIterator, t_DocIdSetIterator_init_, 0, 0, 0, 0, 0);

        void t_DocIdSetIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(DocIdSetIterator), module, "DocIdSetIterator", 0);
        }

        void t_DocIdSetIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocIdSetIterator).tp_dict, "class_", make_descriptor(DocIdSetIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocIdSetIterator).tp_dict, "wrapfn_", make_descriptor(t_DocIdSetIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocIdSetIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DocIdSetIterator::initializeClass);
          PyDict_SetItemString(PY_TYPE(DocIdSetIterator).tp_dict, "NO_MORE_DOCS", make_descriptor(DocIdSetIterator::NO_MORE_DOCS));
        }

        static PyObject *t_DocIdSetIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocIdSetIterator::initializeClass, 1)))
            return NULL;
          return t_DocIdSetIterator::wrap_Object(DocIdSetIterator(((t_DocIdSetIterator *) arg)->object.this$));
        }
        static PyObject *t_DocIdSetIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocIdSetIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocIdSetIterator_init_(t_DocIdSetIterator *self, PyObject *args, PyObject *kwds)
        {
          DocIdSetIterator object((jobject) NULL);

          INT_CALL(object = DocIdSetIterator());
          self->object = object;

          return 0;
        }

        static PyObject *t_DocIdSetIterator_advance(t_DocIdSetIterator *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "advance", arg);
          return NULL;
        }

        static PyObject *t_DocIdSetIterator_cost(t_DocIdSetIterator *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.cost());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_DocIdSetIterator_docID(t_DocIdSetIterator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.docID());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DocIdSetIterator_empty(PyTypeObject *type)
        {
          DocIdSetIterator result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::DocIdSetIterator::empty());
          return t_DocIdSetIterator::wrap_Object(result);
        }

        static PyObject *t_DocIdSetIterator_nextDoc(t_DocIdSetIterator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.nextDoc());
          return PyInt_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::class$ = NULL;
        jmethodID *MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::mids$ = NULL;
        bool MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::live$ = false;

        jclass MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_getTopLevelQuery_6f9339e7] = env->getMethodID(cls, "getTopLevelQuery", "()Lorg/apache/lucene/search/BooleanQuery;");
            mids$[mid_addClause_82a56efb] = env->getMethodID(cls, "addClause", "(Lorg/apache/lucene/search/BooleanQuery;Lorg/apache/lucene/index/Term;IFLorg/apache/lucene/index/TermContext;)V");
            mids$[mid_getMaxSize_54c6a179] = env->getMethodID(cls, "getMaxSize", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite(jint a0) : ::org::apache::lucene::search::TopTermsRewrite(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_of_(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self, PyObject *args);
        static int t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_init_(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_get__parameters_(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self, void *data);
        static PyGetSetDef t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite__methods_[] = {
          DECLARE_METHOD(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, ::org::apache::lucene::search::TopTermsRewrite, MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_init_, 0, 0, t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite__fields_, 0, 0);
        PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::wrap_Object(const MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self = (t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self = (t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite), module, "MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite", 0);
        }

        void t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite).tp_dict, "class_", make_descriptor(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite).tp_dict, "wrapfn_", make_descriptor(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::initializeClass, 1)))
            return NULL;
          return t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::wrap_Object(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite(((t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *) arg)->object.this$));
        }
        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_of_(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_init_(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite(a0));
            self->object = object;
            self->parameters[0] = &::org::apache::lucene::search::PY_TYPE(BooleanQuery);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_get__parameters_(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/QueryParserUtil.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {

            ::java::lang::Class *QueryParserUtil::class$ = NULL;
            jmethodID *QueryParserUtil::mids$ = NULL;
            bool QueryParserUtil::live$ = false;

            jclass QueryParserUtil::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/QueryParserUtil");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_escape_97a5258f] = env->getStaticMethodID(cls, "escape", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_parse_79a3f5c4] = env->getStaticMethodID(cls, "parse", "([Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/search/Query;");
                mids$[mid_parse_084a531a] = env->getStaticMethodID(cls, "parse", "([Ljava/lang/String;[Ljava/lang/String;[Lorg/apache/lucene/search/BooleanClause$Occur;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/search/Query;");
                mids$[mid_parse_046ef74e] = env->getStaticMethodID(cls, "parse", "(Ljava/lang/String;[Ljava/lang/String;[Lorg/apache/lucene/search/BooleanClause$Occur;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/search/Query;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryParserUtil::QueryParserUtil() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            ::java::lang::String QueryParserUtil::escape(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_escape_97a5258f], a0.this$));
            }

            ::org::apache::lucene::search::Query QueryParserUtil::parse(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::analysis::Analyzer & a2)
            {
              jclass cls = env->getClass(initializeClass);
              return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_parse_79a3f5c4], a0.this$, a1.this$, a2.this$));
            }

            ::org::apache::lucene::search::Query QueryParserUtil::parse(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1, const JArray< ::org::apache::lucene::search::BooleanClause$Occur > & a2, const ::org::apache::lucene::analysis::Analyzer & a3)
            {
              jclass cls = env->getClass(initializeClass);
              return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_parse_084a531a], a0.this$, a1.this$, a2.this$, a3.this$));
            }

            ::org::apache::lucene::search::Query QueryParserUtil::parse(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1, const JArray< ::org::apache::lucene::search::BooleanClause$Occur > & a2, const ::org::apache::lucene::analysis::Analyzer & a3)
            {
              jclass cls = env->getClass(initializeClass);
              return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_parse_046ef74e], a0.this$, a1.this$, a2.this$, a3.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            static PyObject *t_QueryParserUtil_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParserUtil_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryParserUtil_init_(t_QueryParserUtil *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryParserUtil_escape(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParserUtil_parse(PyTypeObject *type, PyObject *args);

            static PyMethodDef t_QueryParserUtil__methods_[] = {
              DECLARE_METHOD(t_QueryParserUtil, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserUtil, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserUtil, escape, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserUtil, parse, METH_VARARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryParserUtil, t_QueryParserUtil, ::java::lang::Object, QueryParserUtil, t_QueryParserUtil_init_, 0, 0, 0, 0, 0);

            void t_QueryParserUtil::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryParserUtil), module, "QueryParserUtil", 0);
            }

            void t_QueryParserUtil::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryParserUtil).tp_dict, "class_", make_descriptor(QueryParserUtil::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryParserUtil).tp_dict, "wrapfn_", make_descriptor(t_QueryParserUtil::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryParserUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryParserUtil_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryParserUtil::initializeClass, 1)))
                return NULL;
              return t_QueryParserUtil::wrap_Object(QueryParserUtil(((t_QueryParserUtil *) arg)->object.this$));
            }
            static PyObject *t_QueryParserUtil_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryParserUtil::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryParserUtil_init_(t_QueryParserUtil *self, PyObject *args, PyObject *kwds)
            {
              QueryParserUtil object((jobject) NULL);

              INT_CALL(object = QueryParserUtil());
              self->object = object;

              return 0;
            }

            static PyObject *t_QueryParserUtil_escape(PyTypeObject *type, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::QueryParserUtil::escape(a0));
                return j2p(result);
              }

              PyErr_SetArgsError(type, "escape", arg);
              return NULL;
            }

            static PyObject *t_QueryParserUtil_parse(PyTypeObject *type, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 3:
                {
                  JArray< ::java::lang::String > a0((jobject) NULL);
                  JArray< ::java::lang::String > a1((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                  ::org::apache::lucene::search::Query result((jobject) NULL);

                  if (!parseArgs(args, "[s[sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::QueryParserUtil::parse(a0, a1, a2));
                    return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                  }
                }
                break;
               case 4:
                {
                  JArray< ::java::lang::String > a0((jobject) NULL);
                  JArray< ::java::lang::String > a1((jobject) NULL);
                  JArray< ::org::apache::lucene::search::BooleanClause$Occur > a2((jobject) NULL);
                  PyTypeObject **p2;
                  ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                  ::org::apache::lucene::search::Query result((jobject) NULL);

                  if (!parseArgs(args, "[s[s[Kk", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a3))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::QueryParserUtil::parse(a0, a1, a2, a3));
                    return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                  }
                }
                {
                  ::java::lang::String a0((jobject) NULL);
                  JArray< ::java::lang::String > a1((jobject) NULL);
                  JArray< ::org::apache::lucene::search::BooleanClause$Occur > a2((jobject) NULL);
                  PyTypeObject **p2;
                  ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                  ::org::apache::lucene::search::Query result((jobject) NULL);

                  if (!parseArgs(args, "s[s[Kk", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a3))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::QueryParserUtil::parse(a0, a1, a2, a3));
                    return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                  }
                }
              }

              PyErr_SetArgsError(type, "parse", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/QueryParserBase.h"
#include "org/apache/lucene/queryparser/classic/QueryParser$Operator.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/document/DateTools$Resolution.h"
#include "org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "java/util/Locale.h"
#include "org/apache/lucene/queryparser/classic/CharStream.h"
#include "java/util/TimeZone.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *QueryParserBase::class$ = NULL;
          jmethodID *QueryParserBase::mids$ = NULL;
          bool QueryParserBase::live$ = false;
          ::org::apache::lucene::queryparser::classic::QueryParser$Operator *QueryParserBase::AND_OPERATOR = NULL;
          ::org::apache::lucene::queryparser::classic::QueryParser$Operator *QueryParserBase::OR_OPERATOR = NULL;

          jclass QueryParserBase::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/QueryParserBase");

              mids$ = new jmethodID[max_mid];
              mids$[mid_ReInit_24bde9d3] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/classic/CharStream;)V");
              mids$[mid_TopLevelQuery_fbed2634] = env->getMethodID(cls, "TopLevelQuery", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_escape_97a5258f] = env->getStaticMethodID(cls, "escape", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_getAllowLeadingWildcard_54c6a16a] = env->getMethodID(cls, "getAllowLeadingWildcard", "()Z");
              mids$[mid_getAnalyzeRangeTerms_54c6a16a] = env->getMethodID(cls, "getAnalyzeRangeTerms", "()Z");
              mids$[mid_getAutoGeneratePhraseQueries_54c6a16a] = env->getMethodID(cls, "getAutoGeneratePhraseQueries", "()Z");
              mids$[mid_getDateResolution_65edc44f] = env->getMethodID(cls, "getDateResolution", "(Ljava/lang/String;)Lorg/apache/lucene/document/DateTools$Resolution;");
              mids$[mid_getDefaultOperator_cb1232dd] = env->getMethodID(cls, "getDefaultOperator", "()Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getFuzzyMinSim_54c6a176] = env->getMethodID(cls, "getFuzzyMinSim", "()F");
              mids$[mid_getFuzzyPrefixLength_54c6a179] = env->getMethodID(cls, "getFuzzyPrefixLength", "()I");
              mids$[mid_getLocale_8bb22876] = env->getMethodID(cls, "getLocale", "()Ljava/util/Locale;");
              mids$[mid_getLowercaseExpandedTerms_54c6a16a] = env->getMethodID(cls, "getLowercaseExpandedTerms", "()Z");
              mids$[mid_getMultiTermRewriteMethod_8919154b] = env->getMethodID(cls, "getMultiTermRewriteMethod", "()Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;");
              mids$[mid_getPhraseSlop_54c6a179] = env->getMethodID(cls, "getPhraseSlop", "()I");
              mids$[mid_getTimeZone_6cce40e5] = env->getMethodID(cls, "getTimeZone", "()Ljava/util/TimeZone;");
              mids$[mid_init_d77cc89a] = env->getMethodID(cls, "init", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_init_504c192d] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_parse_fbed2634] = env->getMethodID(cls, "parse", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_setAllowLeadingWildcard_bb0c767f] = env->getMethodID(cls, "setAllowLeadingWildcard", "(Z)V");
              mids$[mid_setAnalyzeRangeTerms_bb0c767f] = env->getMethodID(cls, "setAnalyzeRangeTerms", "(Z)V");
              mids$[mid_setAutoGeneratePhraseQueries_bb0c767f] = env->getMethodID(cls, "setAutoGeneratePhraseQueries", "(Z)V");
              mids$[mid_setDateResolution_285c1498] = env->getMethodID(cls, "setDateResolution", "(Lorg/apache/lucene/document/DateTools$Resolution;)V");
              mids$[mid_setDateResolution_04dea022] = env->getMethodID(cls, "setDateResolution", "(Ljava/lang/String;Lorg/apache/lucene/document/DateTools$Resolution;)V");
              mids$[mid_setDefaultOperator_67ef4614] = env->getMethodID(cls, "setDefaultOperator", "(Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;)V");
              mids$[mid_setFuzzyMinSim_06298cab] = env->getMethodID(cls, "setFuzzyMinSim", "(F)V");
              mids$[mid_setFuzzyPrefixLength_39c7bd3c] = env->getMethodID(cls, "setFuzzyPrefixLength", "(I)V");
              mids$[mid_setLocale_56b0e4b3] = env->getMethodID(cls, "setLocale", "(Ljava/util/Locale;)V");
              mids$[mid_setLowercaseExpandedTerms_bb0c767f] = env->getMethodID(cls, "setLowercaseExpandedTerms", "(Z)V");
              mids$[mid_setMultiTermRewriteMethod_c3c3909e] = env->getMethodID(cls, "setMultiTermRewriteMethod", "(Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;)V");
              mids$[mid_setPhraseSlop_39c7bd3c] = env->getMethodID(cls, "setPhraseSlop", "(I)V");
              mids$[mid_setTimeZone_f7b32d20] = env->getMethodID(cls, "setTimeZone", "(Ljava/util/TimeZone;)V");
              mids$[mid_getFieldQuery_bd696f55] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getWildcardQuery_38d6e77e] = env->getMethodID(cls, "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRangeQuery_75fd45b6] = env->getMethodID(cls, "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_newRangeQuery_75fd45b6] = env->getMethodID(cls, "newRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFuzzyQuery_45995161] = env->getMethodID(cls, "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
              mids$[mid_addClause_fea8e09e] = env->getMethodID(cls, "addClause", "(Ljava/util/List;IILorg/apache/lucene/search/Query;)V");
              mids$[mid_getBooleanQuery_3d190f1c] = env->getMethodID(cls, "getBooleanQuery", "(Ljava/util/List;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getBooleanQuery_bdd36d85] = env->getMethodID(cls, "getBooleanQuery", "(Ljava/util/List;)Lorg/apache/lucene/search/Query;");
              mids$[mid_newFieldQuery_1840ef4b] = env->getMethodID(cls, "newFieldQuery", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_newBooleanClause_e4ef4efe] = env->getMethodID(cls, "newBooleanClause", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/BooleanClause$Occur;)Lorg/apache/lucene/search/BooleanClause;");
              mids$[mid_newPrefixQuery_c8bbbdc7] = env->getMethodID(cls, "newPrefixQuery", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/Query;");
              mids$[mid_newRegexpQuery_c8bbbdc7] = env->getMethodID(cls, "newRegexpQuery", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/Query;");
              mids$[mid_newFuzzyQuery_6ce03264] = env->getMethodID(cls, "newFuzzyQuery", "(Lorg/apache/lucene/index/Term;FI)Lorg/apache/lucene/search/Query;");
              mids$[mid_analyzeMultitermTerm_e6160577] = env->getMethodID(cls, "analyzeMultitermTerm", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_newMatchAllDocsQuery_97e3851a] = env->getMethodID(cls, "newMatchAllDocsQuery", "()Lorg/apache/lucene/search/Query;");
              mids$[mid_newWildcardQuery_c8bbbdc7] = env->getMethodID(cls, "newWildcardQuery", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRegexpQuery_38d6e77e] = env->getMethodID(cls, "getRegexpQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getPrefixQuery_38d6e77e] = env->getMethodID(cls, "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              AND_OPERATOR = new ::org::apache::lucene::queryparser::classic::QueryParser$Operator(env->getStaticObjectField(cls, "AND_OPERATOR", "Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;"));
              OR_OPERATOR = new ::org::apache::lucene::queryparser::classic::QueryParser$Operator(env->getStaticObjectField(cls, "OR_OPERATOR", "Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void QueryParserBase::ReInit(const ::org::apache::lucene::queryparser::classic::CharStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_ReInit_24bde9d3], a0.this$);
          }

          ::org::apache::lucene::search::Query QueryParserBase::TopLevelQuery(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_TopLevelQuery_fbed2634], a0.this$));
          }

          ::java::lang::String QueryParserBase::escape(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_escape_97a5258f], a0.this$));
          }

          jboolean QueryParserBase::getAllowLeadingWildcard() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getAllowLeadingWildcard_54c6a16a]);
          }

          jboolean QueryParserBase::getAnalyzeRangeTerms() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getAnalyzeRangeTerms_54c6a16a]);
          }

          jboolean QueryParserBase::getAutoGeneratePhraseQueries() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getAutoGeneratePhraseQueries_54c6a16a]);
          }

          ::org::apache::lucene::document::DateTools$Resolution QueryParserBase::getDateResolution(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::document::DateTools$Resolution(env->callObjectMethod(this$, mids$[mid_getDateResolution_65edc44f], a0.this$));
          }

          ::org::apache::lucene::queryparser::classic::QueryParser$Operator QueryParserBase::getDefaultOperator() const
          {
            return ::org::apache::lucene::queryparser::classic::QueryParser$Operator(env->callObjectMethod(this$, mids$[mid_getDefaultOperator_cb1232dd]));
          }

          ::java::lang::String QueryParserBase::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          jfloat QueryParserBase::getFuzzyMinSim() const
          {
            return env->callFloatMethod(this$, mids$[mid_getFuzzyMinSim_54c6a176]);
          }

          jint QueryParserBase::getFuzzyPrefixLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getFuzzyPrefixLength_54c6a179]);
          }

          ::java::util::Locale QueryParserBase::getLocale() const
          {
            return ::java::util::Locale(env->callObjectMethod(this$, mids$[mid_getLocale_8bb22876]));
          }

          jboolean QueryParserBase::getLowercaseExpandedTerms() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getLowercaseExpandedTerms_54c6a16a]);
          }

          ::org::apache::lucene::search::MultiTermQuery$RewriteMethod QueryParserBase::getMultiTermRewriteMethod() const
          {
            return ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->callObjectMethod(this$, mids$[mid_getMultiTermRewriteMethod_8919154b]));
          }

          jint QueryParserBase::getPhraseSlop() const
          {
            return env->callIntMethod(this$, mids$[mid_getPhraseSlop_54c6a179]);
          }

          ::java::util::TimeZone QueryParserBase::getTimeZone() const
          {
            return ::java::util::TimeZone(env->callObjectMethod(this$, mids$[mid_getTimeZone_6cce40e5]));
          }

          void QueryParserBase::init(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::Analyzer & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_init_d77cc89a], a0.this$, a1.this$);
          }

          void QueryParserBase::init(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_init_504c192d], a0.this$, a1.this$, a2.this$);
          }

          ::org::apache::lucene::search::Query QueryParserBase::parse(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_parse_fbed2634], a0.this$));
          }

          void QueryParserBase::setAllowLeadingWildcard(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAllowLeadingWildcard_bb0c767f], a0);
          }

          void QueryParserBase::setAnalyzeRangeTerms(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAnalyzeRangeTerms_bb0c767f], a0);
          }

          void QueryParserBase::setAutoGeneratePhraseQueries(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAutoGeneratePhraseQueries_bb0c767f], a0);
          }

          void QueryParserBase::setDateResolution(const ::org::apache::lucene::document::DateTools$Resolution & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDateResolution_285c1498], a0.this$);
          }

          void QueryParserBase::setDateResolution(const ::java::lang::String & a0, const ::org::apache::lucene::document::DateTools$Resolution & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setDateResolution_04dea022], a0.this$, a1.this$);
          }

          void QueryParserBase::setDefaultOperator(const ::org::apache::lucene::queryparser::classic::QueryParser$Operator & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDefaultOperator_67ef4614], a0.this$);
          }

          void QueryParserBase::setFuzzyMinSim(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFuzzyMinSim_06298cab], a0);
          }

          void QueryParserBase::setFuzzyPrefixLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFuzzyPrefixLength_39c7bd3c], a0);
          }

          void QueryParserBase::setLocale(const ::java::util::Locale & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setLocale_56b0e4b3], a0.this$);
          }

          void QueryParserBase::setLowercaseExpandedTerms(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setLowercaseExpandedTerms_bb0c767f], a0);
          }

          void QueryParserBase::setMultiTermRewriteMethod(const ::org::apache::lucene::search::MultiTermQuery$RewriteMethod & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMultiTermRewriteMethod_c3c3909e], a0.this$);
          }

          void QueryParserBase::setPhraseSlop(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPhraseSlop_39c7bd3c], a0);
          }

          void QueryParserBase::setTimeZone(const ::java::util::TimeZone & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTimeZone_f7b32d20], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/queryparser/classic/QueryParserBase$MethodRemovedUseAnother.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_QueryParserBase_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParserBase_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParserBase_ReInit(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_TopLevelQuery(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_escape(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParserBase_getAllowLeadingWildcard(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getAnalyzeRangeTerms(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getAutoGeneratePhraseQueries(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getDateResolution(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_getDefaultOperator(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getField(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getFuzzyMinSim(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getFuzzyPrefixLength(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getLocale(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getLowercaseExpandedTerms(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getMultiTermRewriteMethod(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getPhraseSlop(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getTimeZone(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_init(t_QueryParserBase *self, PyObject *args);
          static PyObject *t_QueryParserBase_parse(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setAllowLeadingWildcard(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setAnalyzeRangeTerms(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setAutoGeneratePhraseQueries(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setDateResolution(t_QueryParserBase *self, PyObject *args);
          static PyObject *t_QueryParserBase_setDefaultOperator(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setFuzzyMinSim(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setFuzzyPrefixLength(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setLocale(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setLowercaseExpandedTerms(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setMultiTermRewriteMethod(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setPhraseSlop(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setTimeZone(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_get__allowLeadingWildcard(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__allowLeadingWildcard(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__analyzeRangeTerms(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__analyzeRangeTerms(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__autoGeneratePhraseQueries(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__autoGeneratePhraseQueries(t_QueryParserBase *self, PyObject *arg, void *data);
          static int t_QueryParserBase_set__dateResolution(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__defaultOperator(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__defaultOperator(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__field(t_QueryParserBase *self, void *data);
          static PyObject *t_QueryParserBase_get__fuzzyMinSim(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__fuzzyMinSim(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__fuzzyPrefixLength(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__fuzzyPrefixLength(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__locale(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__locale(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__lowercaseExpandedTerms(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__lowercaseExpandedTerms(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__multiTermRewriteMethod(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__multiTermRewriteMethod(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__phraseSlop(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__phraseSlop(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__timeZone(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__timeZone(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyGetSetDef t_QueryParserBase__fields_[] = {
            DECLARE_GETSET_FIELD(t_QueryParserBase, allowLeadingWildcard),
            DECLARE_GETSET_FIELD(t_QueryParserBase, analyzeRangeTerms),
            DECLARE_GETSET_FIELD(t_QueryParserBase, autoGeneratePhraseQueries),
            DECLARE_SET_FIELD(t_QueryParserBase, dateResolution),
            DECLARE_GETSET_FIELD(t_QueryParserBase, defaultOperator),
            DECLARE_GET_FIELD(t_QueryParserBase, field),
            DECLARE_GETSET_FIELD(t_QueryParserBase, fuzzyMinSim),
            DECLARE_GETSET_FIELD(t_QueryParserBase, fuzzyPrefixLength),
            DECLARE_GETSET_FIELD(t_QueryParserBase, locale),
            DECLARE_GETSET_FIELD(t_QueryParserBase, lowercaseExpandedTerms),
            DECLARE_GETSET_FIELD(t_QueryParserBase, multiTermRewriteMethod),
            DECLARE_GETSET_FIELD(t_QueryParserBase, phraseSlop),
            DECLARE_GETSET_FIELD(t_QueryParserBase, timeZone),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryParserBase__methods_[] = {
            DECLARE_METHOD(t_QueryParserBase, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserBase, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserBase, ReInit, METH_O),
            DECLARE_METHOD(t_QueryParserBase, TopLevelQuery, METH_O),
            DECLARE_METHOD(t_QueryParserBase, escape, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserBase, getAllowLeadingWildcard, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getAnalyzeRangeTerms, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getAutoGeneratePhraseQueries, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getDateResolution, METH_O),
            DECLARE_METHOD(t_QueryParserBase, getDefaultOperator, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getField, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getFuzzyMinSim, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getFuzzyPrefixLength, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getLocale, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getLowercaseExpandedTerms, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getMultiTermRewriteMethod, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getPhraseSlop, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getTimeZone, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, init, METH_VARARGS),
            DECLARE_METHOD(t_QueryParserBase, parse, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setAllowLeadingWildcard, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setAnalyzeRangeTerms, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setAutoGeneratePhraseQueries, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setDateResolution, METH_VARARGS),
            DECLARE_METHOD(t_QueryParserBase, setDefaultOperator, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setFuzzyMinSim, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setFuzzyPrefixLength, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setLocale, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setLowercaseExpandedTerms, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setMultiTermRewriteMethod, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setPhraseSlop, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setTimeZone, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryParserBase, t_QueryParserBase, ::org::apache::lucene::util::QueryBuilder, QueryParserBase, abstract_init, 0, 0, t_QueryParserBase__fields_, 0, 0);

          void t_QueryParserBase::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryParserBase), module, "QueryParserBase", 0);
            PyDict_SetItemString(PY_TYPE(QueryParserBase).tp_dict, "MethodRemovedUseAnother", make_descriptor(&PY_TYPE(QueryParserBase$MethodRemovedUseAnother)));
          }

          void t_QueryParserBase::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryParserBase).tp_dict, "class_", make_descriptor(QueryParserBase::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryParserBase).tp_dict, "wrapfn_", make_descriptor(t_QueryParserBase::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryParserBase).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(QueryParserBase::initializeClass);
            PyDict_SetItemString(PY_TYPE(QueryParserBase).tp_dict, "AND_OPERATOR", make_descriptor(::org::apache::lucene::queryparser::classic::t_QueryParser$Operator::wrap_Object(*QueryParserBase::AND_OPERATOR)));
            PyDict_SetItemString(PY_TYPE(QueryParserBase).tp_dict, "OR_OPERATOR", make_descriptor(::org::apache::lucene::queryparser::classic::t_QueryParser$Operator::wrap_Object(*QueryParserBase::OR_OPERATOR)));
          }

          static PyObject *t_QueryParserBase_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryParserBase::initializeClass, 1)))
              return NULL;
            return t_QueryParserBase::wrap_Object(QueryParserBase(((t_QueryParserBase *) arg)->object.this$));
          }
          static PyObject *t_QueryParserBase_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryParserBase::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_QueryParserBase_ReInit(t_QueryParserBase *self, PyObject *arg)
          {
            ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0))
            {
              OBJ_CALL(self->object.ReInit(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "ReInit", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_TopLevelQuery(t_QueryParserBase *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.TopLevelQuery(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "TopLevelQuery", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_escape(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::QueryParserBase::escape(a0));
              return j2p(result);
            }

            PyErr_SetArgsError(type, "escape", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_getAllowLeadingWildcard(t_QueryParserBase *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getAllowLeadingWildcard());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_QueryParserBase_getAnalyzeRangeTerms(t_QueryParserBase *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getAnalyzeRangeTerms());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_QueryParserBase_getAutoGeneratePhraseQueries(t_QueryParserBase *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getAutoGeneratePhraseQueries());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_QueryParserBase_getDateResolution(t_QueryParserBase *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::document::DateTools$Resolution result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getDateResolution(a0));
              return ::org::apache::lucene::document::t_DateTools$Resolution::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDateResolution", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_getDefaultOperator(t_QueryParserBase *self)
          {
            ::org::apache::lucene::queryparser::classic::QueryParser$Operator result((jobject) NULL);
            OBJ_CALL(result = self->object.getDefaultOperator());
            return ::org::apache::lucene::queryparser::classic::t_QueryParser$Operator::wrap_Object(result);
          }

          static PyObject *t_QueryParserBase_getField(t_QueryParserBase *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getField());
            return j2p(result);
          }

          static PyObject *t_QueryParserBase_getFuzzyMinSim(t_QueryParserBase *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getFuzzyMinSim());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryParserBase_getFuzzyPrefixLength(t_QueryParserBase *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getFuzzyPrefixLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_QueryParserBase_getLocale(t_QueryParserBase *self)
          {
            ::java::util::Locale result((jobject) NULL);
            OBJ_CALL(result = self->object.getLocale());
            return ::java::util::t_Locale::wrap_Object(result);
          }

          static PyObject *t_QueryParserBase_getLowercaseExpandedTerms(t_QueryParserBase *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getLowercaseExpandedTerms());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_QueryParserBase_getMultiTermRewriteMethod(t_QueryParserBase *self)
          {
            ::org::apache::lucene::search::MultiTermQuery$RewriteMethod result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermRewriteMethod());
            return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(result);
          }

          static PyObject *t_QueryParserBase_getPhraseSlop(t_QueryParserBase *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPhraseSlop());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_QueryParserBase_getTimeZone(t_QueryParserBase *self)
          {
            ::java::util::TimeZone result((jobject) NULL);
            OBJ_CALL(result = self->object.getTimeZone());
            return ::java::util::t_TimeZone::wrap_Object(result);
          }

          static PyObject *t_QueryParserBase_init(t_QueryParserBase *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);

                if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(self->object.init(a0, a1));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);

                if (!parseArgs(args, "ksk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(self->object.init(a0, a1, a2));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "init", args);
            return NULL;
          }

          static PyObject *t_QueryParserBase_parse(t_QueryParserBase *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.parse(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "parse", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setAllowLeadingWildcard(t_QueryParserBase *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setAllowLeadingWildcard(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAllowLeadingWildcard", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setAnalyzeRangeTerms(t_QueryParserBase *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setAnalyzeRangeTerms(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAnalyzeRangeTerms", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setAutoGeneratePhraseQueries(t_QueryParserBase *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setAutoGeneratePhraseQueries(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAutoGeneratePhraseQueries", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setDateResolution(t_QueryParserBase *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::document::DateTools$Resolution a0((jobject) NULL);
                PyTypeObject **p0;

                if (!parseArgs(args, "K", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &p0, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
                {
                  OBJ_CALL(self->object.setDateResolution(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::document::DateTools$Resolution a1((jobject) NULL);
                PyTypeObject **p1;

                if (!parseArgs(args, "sK", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
                {
                  OBJ_CALL(self->object.setDateResolution(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "setDateResolution", args);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setDefaultOperator(t_QueryParserBase *self, PyObject *arg)
          {
            ::org::apache::lucene::queryparser::classic::QueryParser$Operator a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::org::apache::lucene::queryparser::classic::QueryParser$Operator::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::classic::t_QueryParser$Operator::parameters_))
            {
              OBJ_CALL(self->object.setDefaultOperator(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDefaultOperator", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setFuzzyMinSim(t_QueryParserBase *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setFuzzyMinSim(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFuzzyMinSim", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setFuzzyPrefixLength(t_QueryParserBase *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setFuzzyPrefixLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFuzzyPrefixLength", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setLocale(t_QueryParserBase *self, PyObject *arg)
          {
            ::java::util::Locale a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::util::Locale::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setLocale(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setLocale", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setLowercaseExpandedTerms(t_QueryParserBase *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setLowercaseExpandedTerms(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setLowercaseExpandedTerms", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setMultiTermRewriteMethod(t_QueryParserBase *self, PyObject *arg)
          {
            ::org::apache::lucene::search::MultiTermQuery$RewriteMethod a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setMultiTermRewriteMethod(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMultiTermRewriteMethod", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setPhraseSlop(t_QueryParserBase *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPhraseSlop(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPhraseSlop", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setTimeZone(t_QueryParserBase *self, PyObject *arg)
          {
            ::java::util::TimeZone a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setTimeZone(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTimeZone", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_get__allowLeadingWildcard(t_QueryParserBase *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getAllowLeadingWildcard());
            Py_RETURN_BOOL(value);
          }
          static int t_QueryParserBase_set__allowLeadingWildcard(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAllowLeadingWildcard(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "allowLeadingWildcard", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__analyzeRangeTerms(t_QueryParserBase *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getAnalyzeRangeTerms());
            Py_RETURN_BOOL(value);
          }
          static int t_QueryParserBase_set__analyzeRangeTerms(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAnalyzeRangeTerms(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "analyzeRangeTerms", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__autoGeneratePhraseQueries(t_QueryParserBase *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getAutoGeneratePhraseQueries());
            Py_RETURN_BOOL(value);
          }
          static int t_QueryParserBase_set__autoGeneratePhraseQueries(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAutoGeneratePhraseQueries(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "autoGeneratePhraseQueries", arg);
            return -1;
          }

          static int t_QueryParserBase_set__dateResolution(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::document::DateTools$Resolution value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &value))
              {
                INT_CALL(self->object.setDateResolution(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "dateResolution", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__defaultOperator(t_QueryParserBase *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::QueryParser$Operator value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultOperator());
            return ::org::apache::lucene::queryparser::classic::t_QueryParser$Operator::wrap_Object(value);
          }
          static int t_QueryParserBase_set__defaultOperator(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::queryparser::classic::QueryParser$Operator value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::classic::QueryParser$Operator::initializeClass, &value))
              {
                INT_CALL(self->object.setDefaultOperator(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "defaultOperator", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__field(t_QueryParserBase *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_QueryParserBase_get__fuzzyMinSim(t_QueryParserBase *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getFuzzyMinSim());
            return PyFloat_FromDouble((double) value);
          }
          static int t_QueryParserBase_set__fuzzyMinSim(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setFuzzyMinSim(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fuzzyMinSim", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__fuzzyPrefixLength(t_QueryParserBase *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getFuzzyPrefixLength());
            return PyInt_FromLong((long) value);
          }
          static int t_QueryParserBase_set__fuzzyPrefixLength(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setFuzzyPrefixLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fuzzyPrefixLength", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__locale(t_QueryParserBase *self, void *data)
          {
            ::java::util::Locale value((jobject) NULL);
            OBJ_CALL(value = self->object.getLocale());
            return ::java::util::t_Locale::wrap_Object(value);
          }
          static int t_QueryParserBase_set__locale(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Locale value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Locale::initializeClass, &value))
              {
                INT_CALL(self->object.setLocale(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "locale", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__lowercaseExpandedTerms(t_QueryParserBase *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getLowercaseExpandedTerms());
            Py_RETURN_BOOL(value);
          }
          static int t_QueryParserBase_set__lowercaseExpandedTerms(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setLowercaseExpandedTerms(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "lowercaseExpandedTerms", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__multiTermRewriteMethod(t_QueryParserBase *self, void *data)
          {
            ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermRewriteMethod());
            return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(value);
          }
          static int t_QueryParserBase_set__multiTermRewriteMethod(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &value))
              {
                INT_CALL(self->object.setMultiTermRewriteMethod(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "multiTermRewriteMethod", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__phraseSlop(t_QueryParserBase *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPhraseSlop());
            return PyInt_FromLong((long) value);
          }
          static int t_QueryParserBase_set__phraseSlop(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPhraseSlop(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "phraseSlop", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__timeZone(t_QueryParserBase *self, void *data)
          {
            ::java::util::TimeZone value((jobject) NULL);
            OBJ_CALL(value = self->object.getTimeZone());
            return ::java::util::t_TimeZone::wrap_Object(value);
          }
          static int t_QueryParserBase_set__timeZone(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              ::java::util::TimeZone value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &value))
              {
                INT_CALL(self->object.setTimeZone(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "timeZone", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *Encoder::class$ = NULL;
          jmethodID *Encoder::mids$ = NULL;
          bool Encoder::live$ = false;

          jclass Encoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/Encoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_encodeText_97a5258f] = env->getMethodID(cls, "encodeText", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String Encoder::encodeText(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_encodeText_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_Encoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Encoder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Encoder_encodeText(t_Encoder *self, PyObject *arg);

          static PyMethodDef t_Encoder__methods_[] = {
            DECLARE_METHOD(t_Encoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Encoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Encoder, encodeText, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Encoder, t_Encoder, ::java::lang::Object, Encoder, abstract_init, 0, 0, 0, 0, 0);

          void t_Encoder::install(PyObject *module)
          {
            installType(&PY_TYPE(Encoder), module, "Encoder", 0);
          }

          void t_Encoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Encoder).tp_dict, "class_", make_descriptor(Encoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Encoder).tp_dict, "wrapfn_", make_descriptor(t_Encoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Encoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Encoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Encoder::initializeClass, 1)))
              return NULL;
            return t_Encoder::wrap_Object(Encoder(((t_Encoder *) arg)->object.this$));
          }
          static PyObject *t_Encoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Encoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Encoder_encodeText(t_Encoder *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.encodeText(a0));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "encodeText", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$DefaultCollectionModel.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$CollectionModel.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LMSimilarity$DefaultCollectionModel::class$ = NULL;
          jmethodID *LMSimilarity$DefaultCollectionModel::mids$ = NULL;
          bool LMSimilarity$DefaultCollectionModel::live$ = false;

          jclass LMSimilarity$DefaultCollectionModel::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LMSimilarity$DefaultCollectionModel");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computeProbability_cb225ea0] = env->getMethodID(cls, "computeProbability", "(Lorg/apache/lucene/search/similarities/BasicStats;)F");
              mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LMSimilarity$DefaultCollectionModel::LMSimilarity$DefaultCollectionModel() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat LMSimilarity$DefaultCollectionModel::computeProbability(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_computeProbability_cb225ea0], a0.this$);
          }

          ::java::lang::String LMSimilarity$DefaultCollectionModel::getName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LMSimilarity$DefaultCollectionModel_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMSimilarity$DefaultCollectionModel_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LMSimilarity$DefaultCollectionModel_init_(t_LMSimilarity$DefaultCollectionModel *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LMSimilarity$DefaultCollectionModel_computeProbability(t_LMSimilarity$DefaultCollectionModel *self, PyObject *arg);
          static PyObject *t_LMSimilarity$DefaultCollectionModel_getName(t_LMSimilarity$DefaultCollectionModel *self);
          static PyObject *t_LMSimilarity$DefaultCollectionModel_get__name(t_LMSimilarity$DefaultCollectionModel *self, void *data);
          static PyGetSetDef t_LMSimilarity$DefaultCollectionModel__fields_[] = {
            DECLARE_GET_FIELD(t_LMSimilarity$DefaultCollectionModel, name),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LMSimilarity$DefaultCollectionModel__methods_[] = {
            DECLARE_METHOD(t_LMSimilarity$DefaultCollectionModel, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity$DefaultCollectionModel, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity$DefaultCollectionModel, computeProbability, METH_O),
            DECLARE_METHOD(t_LMSimilarity$DefaultCollectionModel, getName, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LMSimilarity$DefaultCollectionModel, t_LMSimilarity$DefaultCollectionModel, ::java::lang::Object, LMSimilarity$DefaultCollectionModel, t_LMSimilarity$DefaultCollectionModel_init_, 0, 0, t_LMSimilarity$DefaultCollectionModel__fields_, 0, 0);

          void t_LMSimilarity$DefaultCollectionModel::install(PyObject *module)
          {
            installType(&PY_TYPE(LMSimilarity$DefaultCollectionModel), module, "LMSimilarity$DefaultCollectionModel", 0);
          }

          void t_LMSimilarity$DefaultCollectionModel::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LMSimilarity$DefaultCollectionModel).tp_dict, "class_", make_descriptor(LMSimilarity$DefaultCollectionModel::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LMSimilarity$DefaultCollectionModel).tp_dict, "wrapfn_", make_descriptor(t_LMSimilarity$DefaultCollectionModel::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LMSimilarity$DefaultCollectionModel).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LMSimilarity$DefaultCollectionModel_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LMSimilarity$DefaultCollectionModel::initializeClass, 1)))
              return NULL;
            return t_LMSimilarity$DefaultCollectionModel::wrap_Object(LMSimilarity$DefaultCollectionModel(((t_LMSimilarity$DefaultCollectionModel *) arg)->object.this$));
          }
          static PyObject *t_LMSimilarity$DefaultCollectionModel_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LMSimilarity$DefaultCollectionModel::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LMSimilarity$DefaultCollectionModel_init_(t_LMSimilarity$DefaultCollectionModel *self, PyObject *args, PyObject *kwds)
          {
            LMSimilarity$DefaultCollectionModel object((jobject) NULL);

            INT_CALL(object = LMSimilarity$DefaultCollectionModel());
            self->object = object;

            return 0;
          }

          static PyObject *t_LMSimilarity$DefaultCollectionModel_computeProbability(t_LMSimilarity$DefaultCollectionModel *self, PyObject *arg)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat result;

            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeProbability(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "computeProbability", arg);
            return NULL;
          }

          static PyObject *t_LMSimilarity$DefaultCollectionModel_getName(t_LMSimilarity$DefaultCollectionModel *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getName());
            return j2p(result);
          }

          static PyObject *t_LMSimilarity$DefaultCollectionModel_get__name(t_LMSimilarity$DefaultCollectionModel *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/SortField.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Sort::class$ = NULL;
        jmethodID *Sort::mids$ = NULL;
        bool Sort::live$ = false;
        Sort *Sort::INDEXORDER = NULL;
        Sort *Sort::RELEVANCE = NULL;

        jclass Sort::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Sort");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_4176baab] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/SortField;)V");
            mids$[mid_init$_3578f7bf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/SortField;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getSort_4fd90036] = env->getMethodID(cls, "getSort", "()[Lorg/apache/lucene/search/SortField;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_needsScores_54c6a16a] = env->getMethodID(cls, "needsScores", "()Z");
            mids$[mid_rewrite_11e86a55] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Sort;");
            mids$[mid_setSort_3578f7bf] = env->getMethodID(cls, "setSort", "(Lorg/apache/lucene/search/SortField;)V");
            mids$[mid_setSort_4176baab] = env->getMethodID(cls, "setSort", "([Lorg/apache/lucene/search/SortField;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            INDEXORDER = new Sort(env->getStaticObjectField(cls, "INDEXORDER", "Lorg/apache/lucene/search/Sort;"));
            RELEVANCE = new Sort(env->getStaticObjectField(cls, "RELEVANCE", "Lorg/apache/lucene/search/Sort;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Sort::Sort() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        Sort::Sort(const JArray< ::org::apache::lucene::search::SortField > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4176baab, a0.this$)) {}

        Sort::Sort(const ::org::apache::lucene::search::SortField & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3578f7bf, a0.this$)) {}

        jboolean Sort::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        JArray< ::org::apache::lucene::search::SortField > Sort::getSort() const
        {
          return JArray< ::org::apache::lucene::search::SortField >(env->callObjectMethod(this$, mids$[mid_getSort_4fd90036]));
        }

        jint Sort::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean Sort::needsScores() const
        {
          return env->callBooleanMethod(this$, mids$[mid_needsScores_54c6a16a]);
        }

        Sort Sort::rewrite(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return Sort(env->callObjectMethod(this$, mids$[mid_rewrite_11e86a55], a0.this$));
        }

        void Sort::setSort(const ::org::apache::lucene::search::SortField & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setSort_3578f7bf], a0.this$);
        }

        void Sort::setSort(const JArray< ::org::apache::lucene::search::SortField > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setSort_4176baab], a0.this$);
        }

        ::java::lang::String Sort::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Sort_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Sort_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Sort_init_(t_Sort *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Sort_equals(t_Sort *self, PyObject *args);
        static PyObject *t_Sort_getSort(t_Sort *self);
        static PyObject *t_Sort_hashCode(t_Sort *self, PyObject *args);
        static PyObject *t_Sort_needsScores(t_Sort *self);
        static PyObject *t_Sort_rewrite(t_Sort *self, PyObject *arg);
        static PyObject *t_Sort_setSort(t_Sort *self, PyObject *args);
        static PyObject *t_Sort_toString(t_Sort *self, PyObject *args);
        static PyObject *t_Sort_get__sort(t_Sort *self, void *data);
        static int t_Sort_set__sort(t_Sort *self, PyObject *arg, void *data);
        static PyGetSetDef t_Sort__fields_[] = {
          DECLARE_GETSET_FIELD(t_Sort, sort),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Sort__methods_[] = {
          DECLARE_METHOD(t_Sort, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Sort, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Sort, equals, METH_VARARGS),
          DECLARE_METHOD(t_Sort, getSort, METH_NOARGS),
          DECLARE_METHOD(t_Sort, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_Sort, needsScores, METH_NOARGS),
          DECLARE_METHOD(t_Sort, rewrite, METH_O),
          DECLARE_METHOD(t_Sort, setSort, METH_VARARGS),
          DECLARE_METHOD(t_Sort, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Sort, t_Sort, ::java::lang::Object, Sort, t_Sort_init_, 0, 0, t_Sort__fields_, 0, 0);

        void t_Sort::install(PyObject *module)
        {
          installType(&PY_TYPE(Sort), module, "Sort", 0);
        }

        void t_Sort::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Sort).tp_dict, "class_", make_descriptor(Sort::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Sort).tp_dict, "wrapfn_", make_descriptor(t_Sort::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Sort).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Sort::initializeClass);
          PyDict_SetItemString(PY_TYPE(Sort).tp_dict, "INDEXORDER", make_descriptor(t_Sort::wrap_Object(*Sort::INDEXORDER)));
          PyDict_SetItemString(PY_TYPE(Sort).tp_dict, "RELEVANCE", make_descriptor(t_Sort::wrap_Object(*Sort::RELEVANCE)));
        }

        static PyObject *t_Sort_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Sort::initializeClass, 1)))
            return NULL;
          return t_Sort::wrap_Object(Sort(((t_Sort *) arg)->object.this$));
        }
        static PyObject *t_Sort_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Sort::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Sort_init_(t_Sort *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              Sort object((jobject) NULL);

              INT_CALL(object = Sort());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              JArray< ::org::apache::lucene::search::SortField > a0((jobject) NULL);
              Sort object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::search::SortField::initializeClass, &a0))
              {
                INT_CALL(object = Sort(a0));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::search::SortField a0((jobject) NULL);
              Sort object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::SortField::initializeClass, &a0))
              {
                INT_CALL(object = Sort(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Sort_equals(t_Sort *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(Sort), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Sort_getSort(t_Sort *self)
        {
          JArray< ::org::apache::lucene::search::SortField > result((jobject) NULL);
          OBJ_CALL(result = self->object.getSort());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::t_SortField::wrap_jobject);
        }

        static PyObject *t_Sort_hashCode(t_Sort *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(Sort), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Sort_needsScores(t_Sort *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.needsScores());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Sort_rewrite(t_Sort *self, PyObject *arg)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          Sort result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return t_Sort::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "rewrite", arg);
          return NULL;
        }

        static PyObject *t_Sort_setSort(t_Sort *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::SortField a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::SortField::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setSort(a0));
                Py_RETURN_NONE;
              }
            }
            {
              JArray< ::org::apache::lucene::search::SortField > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::search::SortField::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setSort(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "setSort", args);
          return NULL;
        }

        static PyObject *t_Sort_toString(t_Sort *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(Sort), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Sort_get__sort(t_Sort *self, void *data)
        {
          JArray< ::org::apache::lucene::search::SortField > value((jobject) NULL);
          OBJ_CALL(value = self->object.getSort());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_SortField::wrap_jobject);
        }
        static int t_Sort_set__sort(t_Sort *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::SortField value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::SortField::initializeClass, &value))
            {
              INT_CALL(self->object.setSort(value));
              return 0;
            }
          }
          {
            JArray< ::org::apache::lucene::search::SortField > value((jobject) NULL);
            if (!parseArg(arg, "[k", ::org::apache::lucene::search::SortField::initializeClass, &value))
            {
              INT_CALL(self->object.setSort(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "sort", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/SumFloatFunction.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *SumFloatFunction::class$ = NULL;
            jmethodID *SumFloatFunction::mids$ = NULL;
            bool SumFloatFunction::live$ = false;

            jclass SumFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/SumFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ee9922ca] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_d2e34bb9] = env->getMethodID(cls, "func", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SumFloatFunction::SumFloatFunction(const JArray< ::org::apache::lucene::queries::function::ValueSource > & a0) : ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction(env->newObject(initializeClass, &mids$, mid_init$_ee9922ca, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_SumFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SumFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SumFloatFunction_init_(t_SumFloatFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SumFloatFunction__methods_[] = {
              DECLARE_METHOD(t_SumFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SumFloatFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SumFloatFunction, t_SumFloatFunction, ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction, SumFloatFunction, t_SumFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_SumFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(SumFloatFunction), module, "SumFloatFunction", 0);
            }

            void t_SumFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SumFloatFunction).tp_dict, "class_", make_descriptor(SumFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SumFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_SumFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SumFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SumFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SumFloatFunction::initializeClass, 1)))
                return NULL;
              return t_SumFloatFunction::wrap_Object(SumFloatFunction(((t_SumFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_SumFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SumFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SumFloatFunction_init_(t_SumFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              JArray< ::org::apache::lucene::queries::function::ValueSource > a0((jobject) NULL);
              SumFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = SumFloatFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/CoreParser.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/xml/ParserException.h"
#include "java/lang/String.h"
#include "java/io/InputStream.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/queryparser/classic/QueryParser.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *CoreParser::class$ = NULL;
          jmethodID *CoreParser::mids$ = NULL;
          bool CoreParser::live$ = false;
          jint CoreParser::maxNumCachedFilters = (jint) 0;

          jclass CoreParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/CoreParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d77cc89a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_init$_64322899] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/queryparser/classic/QueryParser;)V");
              mids$[mid_addFilterBuilder_a961e918] = env->getMethodID(cls, "addFilterBuilder", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/xml/FilterBuilder;)V");
              mids$[mid_addQueryBuilder_155f2547] = env->getMethodID(cls, "addQueryBuilder", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/xml/QueryBuilder;)V");
              mids$[mid_parse_2700f308] = env->getMethodID(cls, "parse", "(Ljava/io/InputStream;)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              maxNumCachedFilters = env->getStaticIntField(cls, "maxNumCachedFilters");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CoreParser::CoreParser(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d77cc89a, a0.this$, a1.this$)) {}

          CoreParser::CoreParser(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::queryparser::classic::QueryParser & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_64322899, a0.this$, a1.this$)) {}

          void CoreParser::addFilterBuilder(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::xml::FilterBuilder & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addFilterBuilder_a961e918], a0.this$, a1.this$);
          }

          void CoreParser::addQueryBuilder(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::xml::QueryBuilder & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addQueryBuilder_155f2547], a0.this$, a1.this$);
          }

          ::org::apache::lucene::search::Query CoreParser::parse(const ::java::io::InputStream & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_parse_2700f308], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_CoreParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CoreParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CoreParser_init_(t_CoreParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CoreParser_addFilterBuilder(t_CoreParser *self, PyObject *args);
          static PyObject *t_CoreParser_addQueryBuilder(t_CoreParser *self, PyObject *args);
          static PyObject *t_CoreParser_parse(t_CoreParser *self, PyObject *arg);

          static PyMethodDef t_CoreParser__methods_[] = {
            DECLARE_METHOD(t_CoreParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CoreParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CoreParser, addFilterBuilder, METH_VARARGS),
            DECLARE_METHOD(t_CoreParser, addQueryBuilder, METH_VARARGS),
            DECLARE_METHOD(t_CoreParser, parse, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CoreParser, t_CoreParser, ::java::lang::Object, CoreParser, t_CoreParser_init_, 0, 0, 0, 0, 0);

          void t_CoreParser::install(PyObject *module)
          {
            installType(&PY_TYPE(CoreParser), module, "CoreParser", 0);
          }

          void t_CoreParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CoreParser).tp_dict, "class_", make_descriptor(CoreParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CoreParser).tp_dict, "wrapfn_", make_descriptor(t_CoreParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CoreParser).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CoreParser::initializeClass);
            PyDict_SetItemString(PY_TYPE(CoreParser).tp_dict, "maxNumCachedFilters", make_descriptor(CoreParser::maxNumCachedFilters));
          }

          static PyObject *t_CoreParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CoreParser::initializeClass, 1)))
              return NULL;
            return t_CoreParser::wrap_Object(CoreParser(((t_CoreParser *) arg)->object.this$));
          }
          static PyObject *t_CoreParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CoreParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CoreParser_init_(t_CoreParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                CoreParser object((jobject) NULL);

                if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CoreParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::org::apache::lucene::queryparser::classic::QueryParser a1((jobject) NULL);
                CoreParser object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::queryparser::classic::QueryParser::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CoreParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CoreParser_addFilterBuilder(t_CoreParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::xml::FilterBuilder a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::xml::FilterBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.addFilterBuilder(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addFilterBuilder", args);
            return NULL;
          }

          static PyObject *t_CoreParser_addQueryBuilder(t_CoreParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::xml::QueryBuilder a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::xml::QueryBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.addQueryBuilder(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addQueryBuilder", args);
            return NULL;
          }

          static PyObject *t_CoreParser_parse(t_CoreParser *self, PyObject *arg)
          {
            ::java::io::InputStream a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.parse(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "parse", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueStr.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueStr::class$ = NULL;
          jmethodID *MutableValueStr::mids$ = NULL;
          jfieldID *MutableValueStr::fids$ = NULL;
          bool MutableValueStr::live$ = false;

          jclass MutableValueStr::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueStr");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_290588f1] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_copy_d590ce7c] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_15ab3811] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equalsSameType_290588e2] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_846352c3] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_value] = env->getFieldID(cls, "value", "Lorg/apache/lucene/util/BytesRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueStr::MutableValueStr() : ::org::apache::lucene::util::mutable$::MutableValue(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint MutableValueStr::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_290588f1], a0.this$);
          }

          void MutableValueStr::copy(const ::org::apache::lucene::util::mutable$::MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d590ce7c], a0.this$);
          }

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueStr::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_15ab3811]));
          }

          jboolean MutableValueStr::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_290588e2], a0.this$);
          }

          jint MutableValueStr::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::Object MutableValueStr::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_846352c3]));
          }

          ::org::apache::lucene::util::BytesRef MutableValueStr::_get_value() const
          {
            return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_value]));
          }

          void MutableValueStr::_set_value(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            env->setObjectField(this$, fids$[fid_value], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueStr_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueStr_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueStr_init_(t_MutableValueStr *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueStr_compareSameType(t_MutableValueStr *self, PyObject *args);
          static PyObject *t_MutableValueStr_copy(t_MutableValueStr *self, PyObject *args);
          static PyObject *t_MutableValueStr_duplicate(t_MutableValueStr *self, PyObject *args);
          static PyObject *t_MutableValueStr_equalsSameType(t_MutableValueStr *self, PyObject *args);
          static PyObject *t_MutableValueStr_hashCode(t_MutableValueStr *self, PyObject *args);
          static PyObject *t_MutableValueStr_toObject(t_MutableValueStr *self, PyObject *args);
          static PyObject *t_MutableValueStr_get__value(t_MutableValueStr *self, void *data);
          static int t_MutableValueStr_set__value(t_MutableValueStr *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValueStr__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValueStr, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValueStr__methods_[] = {
            DECLARE_METHOD(t_MutableValueStr, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueStr, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueStr, compareSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueStr, copy, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueStr, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueStr, equalsSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueStr, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueStr, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MutableValueStr, t_MutableValueStr, ::org::apache::lucene::util::mutable$::MutableValue, MutableValueStr, t_MutableValueStr_init_, 0, 0, t_MutableValueStr__fields_, 0, 0);

          void t_MutableValueStr::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueStr), module, "MutableValueStr", 0);
          }

          void t_MutableValueStr::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MutableValueStr).tp_dict, "class_", make_descriptor(MutableValueStr::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MutableValueStr).tp_dict, "wrapfn_", make_descriptor(t_MutableValueStr::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MutableValueStr).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueStr_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueStr::initializeClass, 1)))
              return NULL;
            return t_MutableValueStr::wrap_Object(MutableValueStr(((t_MutableValueStr *) arg)->object.this$));
          }
          static PyObject *t_MutableValueStr_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueStr::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueStr_init_(t_MutableValueStr *self, PyObject *args, PyObject *kwds)
          {
            MutableValueStr object((jobject) NULL);

            INT_CALL(object = MutableValueStr());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueStr_compareSameType(t_MutableValueStr *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueStr), (PyObject *) self, "compareSameType", args, 2);
          }

          static PyObject *t_MutableValueStr_copy(t_MutableValueStr *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::mutable$::MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(MutableValueStr), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_MutableValueStr_duplicate(t_MutableValueStr *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueStr), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueStr_equalsSameType(t_MutableValueStr *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MutableValueStr), (PyObject *) self, "equalsSameType", args, 2);
          }

          static PyObject *t_MutableValueStr_hashCode(t_MutableValueStr *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueStr), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValueStr_toObject(t_MutableValueStr *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueStr), (PyObject *) self, "toObject", args, 2);
          }

          static PyObject *t_MutableValueStr_get__value(t_MutableValueStr *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_value());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
          static int t_MutableValueStr_set__value(t_MutableValueStr *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object._set_value(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/StandardQueryParser.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/NumericConfig.h"
#include "java/util/TimeZone.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator.h"
#include "java/util/Map.h"
#include "java/lang/Float.h"
#include "java/util/Locale.h"
#include "org/apache/lucene/document/DateTools$Resolution.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {

            ::java::lang::Class *StandardQueryParser::class$ = NULL;
            jmethodID *StandardQueryParser::mids$ = NULL;
            bool StandardQueryParser::live$ = false;

            jclass StandardQueryParser::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/StandardQueryParser");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_getAllowLeadingWildcard_54c6a16a] = env->getMethodID(cls, "getAllowLeadingWildcard", "()Z");
                mids$[mid_getAnalyzer_347f60a9] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
                mids$[mid_getDateResolution_e0474751] = env->getMethodID(cls, "getDateResolution", "()Lorg/apache/lucene/document/DateTools$Resolution;");
                mids$[mid_getDateResolutionMap_db60befd] = env->getMethodID(cls, "getDateResolutionMap", "()Ljava/util/Map;");
                mids$[mid_getDefaultOperator_61148a0b] = env->getMethodID(cls, "getDefaultOperator", "()Lorg/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator;");
                mids$[mid_getEnablePositionIncrements_54c6a16a] = env->getMethodID(cls, "getEnablePositionIncrements", "()Z");
                mids$[mid_getFieldsBoost_db60befd] = env->getMethodID(cls, "getFieldsBoost", "()Ljava/util/Map;");
                mids$[mid_getFuzzyMinSim_54c6a176] = env->getMethodID(cls, "getFuzzyMinSim", "()F");
                mids$[mid_getFuzzyPrefixLength_54c6a179] = env->getMethodID(cls, "getFuzzyPrefixLength", "()I");
                mids$[mid_getLocale_8bb22876] = env->getMethodID(cls, "getLocale", "()Ljava/util/Locale;");
                mids$[mid_getLowercaseExpandedTerms_54c6a16a] = env->getMethodID(cls, "getLowercaseExpandedTerms", "()Z");
                mids$[mid_getMultiFields_2c0596de] = env->getMethodID(cls, "getMultiFields", "([Ljava/lang/CharSequence;)V");
                mids$[mid_getMultiTermRewriteMethod_8919154b] = env->getMethodID(cls, "getMultiTermRewriteMethod", "()Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;");
                mids$[mid_getNumericConfigMap_db60befd] = env->getMethodID(cls, "getNumericConfigMap", "()Ljava/util/Map;");
                mids$[mid_getPhraseSlop_54c6a179] = env->getMethodID(cls, "getPhraseSlop", "()I");
                mids$[mid_getTimeZone_6cce40e5] = env->getMethodID(cls, "getTimeZone", "()Ljava/util/TimeZone;");
                mids$[mid_parse_38d6e77e] = env->getMethodID(cls, "parse", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
                mids$[mid_setAllowLeadingWildcard_bb0c767f] = env->getMethodID(cls, "setAllowLeadingWildcard", "(Z)V");
                mids$[mid_setAnalyzer_31619410] = env->getMethodID(cls, "setAnalyzer", "(Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_setDateResolution_285c1498] = env->getMethodID(cls, "setDateResolution", "(Lorg/apache/lucene/document/DateTools$Resolution;)V");
                mids$[mid_setDateResolution_4c9e2b1c] = env->getMethodID(cls, "setDateResolution", "(Ljava/util/Map;)V");
                mids$[mid_setDateResolutionMap_4c9e2b1c] = env->getMethodID(cls, "setDateResolutionMap", "(Ljava/util/Map;)V");
                mids$[mid_setDefaultOperator_3de2d36e] = env->getMethodID(cls, "setDefaultOperator", "(Lorg/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator;)V");
                mids$[mid_setDefaultPhraseSlop_39c7bd3c] = env->getMethodID(cls, "setDefaultPhraseSlop", "(I)V");
                mids$[mid_setEnablePositionIncrements_bb0c767f] = env->getMethodID(cls, "setEnablePositionIncrements", "(Z)V");
                mids$[mid_setFieldsBoost_4c9e2b1c] = env->getMethodID(cls, "setFieldsBoost", "(Ljava/util/Map;)V");
                mids$[mid_setFuzzyMinSim_06298cab] = env->getMethodID(cls, "setFuzzyMinSim", "(F)V");
                mids$[mid_setFuzzyPrefixLength_39c7bd3c] = env->getMethodID(cls, "setFuzzyPrefixLength", "(I)V");
                mids$[mid_setLocale_56b0e4b3] = env->getMethodID(cls, "setLocale", "(Ljava/util/Locale;)V");
                mids$[mid_setLowercaseExpandedTerms_bb0c767f] = env->getMethodID(cls, "setLowercaseExpandedTerms", "(Z)V");
                mids$[mid_setMultiFields_2c0596de] = env->getMethodID(cls, "setMultiFields", "([Ljava/lang/CharSequence;)V");
                mids$[mid_setMultiTermRewriteMethod_c3c3909e] = env->getMethodID(cls, "setMultiTermRewriteMethod", "(Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;)V");
                mids$[mid_setNumericConfigMap_4c9e2b1c] = env->getMethodID(cls, "setNumericConfigMap", "(Ljava/util/Map;)V");
                mids$[mid_setPhraseSlop_39c7bd3c] = env->getMethodID(cls, "setPhraseSlop", "(I)V");
                mids$[mid_setTimeZone_f7b32d20] = env->getMethodID(cls, "setTimeZone", "(Ljava/util/TimeZone;)V");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            StandardQueryParser::StandardQueryParser() : ::org::apache::lucene::queryparser::flexible::core::QueryParserHelper(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            StandardQueryParser::StandardQueryParser(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::queryparser::flexible::core::QueryParserHelper(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}

            jboolean StandardQueryParser::getAllowLeadingWildcard() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getAllowLeadingWildcard_54c6a16a]);
            }

            ::org::apache::lucene::analysis::Analyzer StandardQueryParser::getAnalyzer() const
            {
              return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_347f60a9]));
            }

            ::org::apache::lucene::document::DateTools$Resolution StandardQueryParser::getDateResolution() const
            {
              return ::org::apache::lucene::document::DateTools$Resolution(env->callObjectMethod(this$, mids$[mid_getDateResolution_e0474751]));
            }

            ::java::util::Map StandardQueryParser::getDateResolutionMap() const
            {
              return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getDateResolutionMap_db60befd]));
            }

            ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator StandardQueryParser::getDefaultOperator() const
            {
              return ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator(env->callObjectMethod(this$, mids$[mid_getDefaultOperator_61148a0b]));
            }

            jboolean StandardQueryParser::getEnablePositionIncrements() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getEnablePositionIncrements_54c6a16a]);
            }

            ::java::util::Map StandardQueryParser::getFieldsBoost() const
            {
              return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getFieldsBoost_db60befd]));
            }

            jfloat StandardQueryParser::getFuzzyMinSim() const
            {
              return env->callFloatMethod(this$, mids$[mid_getFuzzyMinSim_54c6a176]);
            }

            jint StandardQueryParser::getFuzzyPrefixLength() const
            {
              return env->callIntMethod(this$, mids$[mid_getFuzzyPrefixLength_54c6a179]);
            }

            ::java::util::Locale StandardQueryParser::getLocale() const
            {
              return ::java::util::Locale(env->callObjectMethod(this$, mids$[mid_getLocale_8bb22876]));
            }

            jboolean StandardQueryParser::getLowercaseExpandedTerms() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getLowercaseExpandedTerms_54c6a16a]);
            }

            void StandardQueryParser::getMultiFields(const JArray< ::java::lang::CharSequence > & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_getMultiFields_2c0596de], a0.this$);
            }

            ::org::apache::lucene::search::MultiTermQuery$RewriteMethod StandardQueryParser::getMultiTermRewriteMethod() const
            {
              return ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->callObjectMethod(this$, mids$[mid_getMultiTermRewriteMethod_8919154b]));
            }

            ::java::util::Map StandardQueryParser::getNumericConfigMap() const
            {
              return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getNumericConfigMap_db60befd]));
            }

            jint StandardQueryParser::getPhraseSlop() const
            {
              return env->callIntMethod(this$, mids$[mid_getPhraseSlop_54c6a179]);
            }

            ::java::util::TimeZone StandardQueryParser::getTimeZone() const
            {
              return ::java::util::TimeZone(env->callObjectMethod(this$, mids$[mid_getTimeZone_6cce40e5]));
            }

            ::org::apache::lucene::search::Query StandardQueryParser::parse(const ::java::lang::String & a0, const ::java::lang::String & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_parse_38d6e77e], a0.this$, a1.this$));
            }

            void StandardQueryParser::setAllowLeadingWildcard(jboolean a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setAllowLeadingWildcard_bb0c767f], a0);
            }

            void StandardQueryParser::setAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setAnalyzer_31619410], a0.this$);
            }

            void StandardQueryParser::setDateResolution(const ::org::apache::lucene::document::DateTools$Resolution & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setDateResolution_285c1498], a0.this$);
            }

            void StandardQueryParser::setDateResolution(const ::java::util::Map & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setDateResolution_4c9e2b1c], a0.this$);
            }

            void StandardQueryParser::setDateResolutionMap(const ::java::util::Map & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setDateResolutionMap_4c9e2b1c], a0.this$);
            }

            void StandardQueryParser::setDefaultOperator(const ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setDefaultOperator_3de2d36e], a0.this$);
            }

            void StandardQueryParser::setDefaultPhraseSlop(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setDefaultPhraseSlop_39c7bd3c], a0);
            }

            void StandardQueryParser::setEnablePositionIncrements(jboolean a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setEnablePositionIncrements_bb0c767f], a0);
            }

            void StandardQueryParser::setFieldsBoost(const ::java::util::Map & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setFieldsBoost_4c9e2b1c], a0.this$);
            }

            void StandardQueryParser::setFuzzyMinSim(jfloat a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setFuzzyMinSim_06298cab], a0);
            }

            void StandardQueryParser::setFuzzyPrefixLength(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setFuzzyPrefixLength_39c7bd3c], a0);
            }

            void StandardQueryParser::setLocale(const ::java::util::Locale & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setLocale_56b0e4b3], a0.this$);
            }

            void StandardQueryParser::setLowercaseExpandedTerms(jboolean a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setLowercaseExpandedTerms_bb0c767f], a0);
            }

            void StandardQueryParser::setMultiFields(const JArray< ::java::lang::CharSequence > & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setMultiFields_2c0596de], a0.this$);
            }

            void StandardQueryParser::setMultiTermRewriteMethod(const ::org::apache::lucene::search::MultiTermQuery$RewriteMethod & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setMultiTermRewriteMethod_c3c3909e], a0.this$);
            }

            void StandardQueryParser::setNumericConfigMap(const ::java::util::Map & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNumericConfigMap_4c9e2b1c], a0.this$);
            }

            void StandardQueryParser::setPhraseSlop(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setPhraseSlop_39c7bd3c], a0);
            }

            void StandardQueryParser::setTimeZone(const ::java::util::TimeZone & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setTimeZone_f7b32d20], a0.this$);
            }

            ::java::lang::String StandardQueryParser::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            static PyObject *t_StandardQueryParser_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_StandardQueryParser_instance_(PyTypeObject *type, PyObject *arg);
            static int t_StandardQueryParser_init_(t_StandardQueryParser *self, PyObject *args, PyObject *kwds);
            static PyObject *t_StandardQueryParser_getAllowLeadingWildcard(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getAnalyzer(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getDateResolution(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getDateResolutionMap(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getDefaultOperator(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getEnablePositionIncrements(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getFieldsBoost(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getFuzzyMinSim(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getFuzzyPrefixLength(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getLocale(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getLowercaseExpandedTerms(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getMultiFields(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_getMultiTermRewriteMethod(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getNumericConfigMap(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getPhraseSlop(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getTimeZone(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_parse(t_StandardQueryParser *self, PyObject *args);
            static PyObject *t_StandardQueryParser_setAllowLeadingWildcard(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setAnalyzer(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setDateResolution(t_StandardQueryParser *self, PyObject *args);
            static PyObject *t_StandardQueryParser_setDateResolutionMap(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setDefaultOperator(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setDefaultPhraseSlop(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setEnablePositionIncrements(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setFieldsBoost(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setFuzzyMinSim(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setFuzzyPrefixLength(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setLocale(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setLowercaseExpandedTerms(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setMultiFields(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setMultiTermRewriteMethod(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setNumericConfigMap(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setPhraseSlop(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setTimeZone(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_toString(t_StandardQueryParser *self, PyObject *args);
            static PyObject *t_StandardQueryParser_get__allowLeadingWildcard(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__allowLeadingWildcard(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__analyzer(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__analyzer(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__dateResolution(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__dateResolution(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__dateResolutionMap(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__dateResolutionMap(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__defaultOperator(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__defaultOperator(t_StandardQueryParser *self, PyObject *arg, void *data);
            static int t_StandardQueryParser_set__defaultPhraseSlop(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__enablePositionIncrements(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__enablePositionIncrements(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__fieldsBoost(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__fieldsBoost(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__fuzzyMinSim(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__fuzzyMinSim(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__fuzzyPrefixLength(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__fuzzyPrefixLength(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__locale(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__locale(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__lowercaseExpandedTerms(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__lowercaseExpandedTerms(t_StandardQueryParser *self, PyObject *arg, void *data);
            static int t_StandardQueryParser_set__multiFields(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__multiTermRewriteMethod(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__multiTermRewriteMethod(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__numericConfigMap(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__numericConfigMap(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__phraseSlop(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__phraseSlop(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__timeZone(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__timeZone(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyGetSetDef t_StandardQueryParser__fields_[] = {
              DECLARE_GETSET_FIELD(t_StandardQueryParser, allowLeadingWildcard),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, analyzer),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, dateResolution),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, dateResolutionMap),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, defaultOperator),
              DECLARE_SET_FIELD(t_StandardQueryParser, defaultPhraseSlop),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, enablePositionIncrements),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, fieldsBoost),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, fuzzyMinSim),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, fuzzyPrefixLength),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, locale),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, lowercaseExpandedTerms),
              DECLARE_SET_FIELD(t_StandardQueryParser, multiFields),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, multiTermRewriteMethod),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, numericConfigMap),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, phraseSlop),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, timeZone),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_StandardQueryParser__methods_[] = {
              DECLARE_METHOD(t_StandardQueryParser, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardQueryParser, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardQueryParser, getAllowLeadingWildcard, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getAnalyzer, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getDateResolution, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getDateResolutionMap, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getDefaultOperator, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getEnablePositionIncrements, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getFieldsBoost, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getFuzzyMinSim, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getFuzzyPrefixLength, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getLocale, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getLowercaseExpandedTerms, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getMultiFields, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, getMultiTermRewriteMethod, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getNumericConfigMap, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getPhraseSlop, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getTimeZone, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, parse, METH_VARARGS),
              DECLARE_METHOD(t_StandardQueryParser, setAllowLeadingWildcard, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setAnalyzer, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setDateResolution, METH_VARARGS),
              DECLARE_METHOD(t_StandardQueryParser, setDateResolutionMap, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setDefaultOperator, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setDefaultPhraseSlop, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setEnablePositionIncrements, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setFieldsBoost, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setFuzzyMinSim, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setFuzzyPrefixLength, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setLocale, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setLowercaseExpandedTerms, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setMultiFields, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setMultiTermRewriteMethod, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setNumericConfigMap, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setPhraseSlop, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setTimeZone, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(StandardQueryParser, t_StandardQueryParser, ::org::apache::lucene::queryparser::flexible::core::QueryParserHelper, StandardQueryParser, t_StandardQueryParser_init_, 0, 0, t_StandardQueryParser__fields_, 0, 0);

            void t_StandardQueryParser::install(PyObject *module)
            {
              installType(&PY_TYPE(StandardQueryParser), module, "StandardQueryParser", 0);
            }

            void t_StandardQueryParser::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(StandardQueryParser).tp_dict, "class_", make_descriptor(StandardQueryParser::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(StandardQueryParser).tp_dict, "wrapfn_", make_descriptor(t_StandardQueryParser::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(StandardQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_StandardQueryParser_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, StandardQueryParser::initializeClass, 1)))
                return NULL;
              return t_StandardQueryParser::wrap_Object(StandardQueryParser(((t_StandardQueryParser *) arg)->object.this$));
            }
            static PyObject *t_StandardQueryParser_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, StandardQueryParser::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_StandardQueryParser_init_(t_StandardQueryParser *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  StandardQueryParser object((jobject) NULL);

                  INT_CALL(object = StandardQueryParser());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  StandardQueryParser object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                  {
                    INT_CALL(object = StandardQueryParser(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_StandardQueryParser_getAllowLeadingWildcard(t_StandardQueryParser *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.getAllowLeadingWildcard());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_StandardQueryParser_getAnalyzer(t_StandardQueryParser *self)
            {
              ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
              OBJ_CALL(result = self->object.getAnalyzer());
              return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
            }

            static PyObject *t_StandardQueryParser_getDateResolution(t_StandardQueryParser *self)
            {
              ::org::apache::lucene::document::DateTools$Resolution result((jobject) NULL);
              OBJ_CALL(result = self->object.getDateResolution());
              return ::org::apache::lucene::document::t_DateTools$Resolution::wrap_Object(result);
            }

            static PyObject *t_StandardQueryParser_getDateResolutionMap(t_StandardQueryParser *self)
            {
              ::java::util::Map result((jobject) NULL);
              OBJ_CALL(result = self->object.getDateResolutionMap());
              return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(CharSequence), &::org::apache::lucene::document::PY_TYPE(DateTools$Resolution));
            }

            static PyObject *t_StandardQueryParser_getDefaultOperator(t_StandardQueryParser *self)
            {
              ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator result((jobject) NULL);
              OBJ_CALL(result = self->object.getDefaultOperator());
              return ::org::apache::lucene::queryparser::flexible::standard::config::t_StandardQueryConfigHandler$Operator::wrap_Object(result);
            }

            static PyObject *t_StandardQueryParser_getEnablePositionIncrements(t_StandardQueryParser *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.getEnablePositionIncrements());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_StandardQueryParser_getFieldsBoost(t_StandardQueryParser *self)
            {
              ::java::util::Map result((jobject) NULL);
              OBJ_CALL(result = self->object.getFieldsBoost());
              return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(Float));
            }

            static PyObject *t_StandardQueryParser_getFuzzyMinSim(t_StandardQueryParser *self)
            {
              jfloat result;
              OBJ_CALL(result = self->object.getFuzzyMinSim());
              return PyFloat_FromDouble((double) result);
            }

            static PyObject *t_StandardQueryParser_getFuzzyPrefixLength(t_StandardQueryParser *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getFuzzyPrefixLength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardQueryParser_getLocale(t_StandardQueryParser *self)
            {
              ::java::util::Locale result((jobject) NULL);
              OBJ_CALL(result = self->object.getLocale());
              return ::java::util::t_Locale::wrap_Object(result);
            }

            static PyObject *t_StandardQueryParser_getLowercaseExpandedTerms(t_StandardQueryParser *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.getLowercaseExpandedTerms());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_StandardQueryParser_getMultiFields(t_StandardQueryParser *self, PyObject *arg)
            {
              JArray< ::java::lang::CharSequence > a0((jobject) NULL);

              if (!parseArg(arg, "[O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(self->object.getMultiFields(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "getMultiFields", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_getMultiTermRewriteMethod(t_StandardQueryParser *self)
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod result((jobject) NULL);
              OBJ_CALL(result = self->object.getMultiTermRewriteMethod());
              return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(result);
            }

            static PyObject *t_StandardQueryParser_getNumericConfigMap(t_StandardQueryParser *self)
            {
              ::java::util::Map result((jobject) NULL);
              OBJ_CALL(result = self->object.getNumericConfigMap());
              return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::org::apache::lucene::queryparser::flexible::standard::config::PY_TYPE(NumericConfig));
            }

            static PyObject *t_StandardQueryParser_getPhraseSlop(t_StandardQueryParser *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getPhraseSlop());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardQueryParser_getTimeZone(t_StandardQueryParser *self)
            {
              ::java::util::TimeZone result((jobject) NULL);
              OBJ_CALL(result = self->object.getTimeZone());
              return ::java::util::t_TimeZone::wrap_Object(result);
            }

            static PyObject *t_StandardQueryParser_parse(t_StandardQueryParser *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(result = self->object.parse(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(StandardQueryParser), (PyObject *) self, "parse", args, 2);
            }

            static PyObject *t_StandardQueryParser_setAllowLeadingWildcard(t_StandardQueryParser *self, PyObject *arg)
            {
              jboolean a0;

              if (!parseArg(arg, "Z", &a0))
              {
                OBJ_CALL(self->object.setAllowLeadingWildcard(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setAllowLeadingWildcard", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setAnalyzer(t_StandardQueryParser *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setAnalyzer(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setAnalyzer", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setDateResolution(t_StandardQueryParser *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::document::DateTools$Resolution a0((jobject) NULL);
                  PyTypeObject **p0;

                  if (!parseArgs(args, "K", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &p0, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
                  {
                    OBJ_CALL(self->object.setDateResolution(a0));
                    Py_RETURN_NONE;
                  }
                }
                {
                  ::java::util::Map a0((jobject) NULL);
                  PyTypeObject **p0;

                  if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
                  {
                    OBJ_CALL(self->object.setDateResolution(a0));
                    Py_RETURN_NONE;
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "setDateResolution", args);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setDateResolutionMap(t_StandardQueryParser *self, PyObject *arg)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
              {
                OBJ_CALL(self->object.setDateResolutionMap(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setDateResolutionMap", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setDefaultOperator(t_StandardQueryParser *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArg(arg, "K", ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::standard::config::t_StandardQueryConfigHandler$Operator::parameters_))
              {
                OBJ_CALL(self->object.setDefaultOperator(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setDefaultOperator", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setDefaultPhraseSlop(t_StandardQueryParser *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setDefaultPhraseSlop(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setDefaultPhraseSlop", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setEnablePositionIncrements(t_StandardQueryParser *self, PyObject *arg)
            {
              jboolean a0;

              if (!parseArg(arg, "Z", &a0))
              {
                OBJ_CALL(self->object.setEnablePositionIncrements(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setEnablePositionIncrements", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setFieldsBoost(t_StandardQueryParser *self, PyObject *arg)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
              {
                OBJ_CALL(self->object.setFieldsBoost(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setFieldsBoost", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setFuzzyMinSim(t_StandardQueryParser *self, PyObject *arg)
            {
              jfloat a0;

              if (!parseArg(arg, "F", &a0))
              {
                OBJ_CALL(self->object.setFuzzyMinSim(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setFuzzyMinSim", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setFuzzyPrefixLength(t_StandardQueryParser *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setFuzzyPrefixLength(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setFuzzyPrefixLength", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setLocale(t_StandardQueryParser *self, PyObject *arg)
            {
              ::java::util::Locale a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::util::Locale::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setLocale(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setLocale", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setLowercaseExpandedTerms(t_StandardQueryParser *self, PyObject *arg)
            {
              jboolean a0;

              if (!parseArg(arg, "Z", &a0))
              {
                OBJ_CALL(self->object.setLowercaseExpandedTerms(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setLowercaseExpandedTerms", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setMultiFields(t_StandardQueryParser *self, PyObject *arg)
            {
              JArray< ::java::lang::CharSequence > a0((jobject) NULL);

              if (!parseArg(arg, "[O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(self->object.setMultiFields(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setMultiFields", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setMultiTermRewriteMethod(t_StandardQueryParser *self, PyObject *arg)
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setMultiTermRewriteMethod(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setMultiTermRewriteMethod", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setNumericConfigMap(t_StandardQueryParser *self, PyObject *arg)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
              {
                OBJ_CALL(self->object.setNumericConfigMap(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setNumericConfigMap", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setPhraseSlop(t_StandardQueryParser *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setPhraseSlop(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setPhraseSlop", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setTimeZone(t_StandardQueryParser *self, PyObject *arg)
            {
              ::java::util::TimeZone a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setTimeZone(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setTimeZone", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_toString(t_StandardQueryParser *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(StandardQueryParser), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_StandardQueryParser_get__allowLeadingWildcard(t_StandardQueryParser *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getAllowLeadingWildcard());
              Py_RETURN_BOOL(value);
            }
            static int t_StandardQueryParser_set__allowLeadingWildcard(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                  INT_CALL(self->object.setAllowLeadingWildcard(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "allowLeadingWildcard", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__analyzer(t_StandardQueryParser *self, void *data)
            {
              ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
              OBJ_CALL(value = self->object.getAnalyzer());
              return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__analyzer(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &value))
                {
                  INT_CALL(self->object.setAnalyzer(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "analyzer", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__dateResolution(t_StandardQueryParser *self, void *data)
            {
              ::org::apache::lucene::document::DateTools$Resolution value((jobject) NULL);
              OBJ_CALL(value = self->object.getDateResolution());
              return ::org::apache::lucene::document::t_DateTools$Resolution::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__dateResolution(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::document::DateTools$Resolution value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &value))
                {
                  INT_CALL(self->object.setDateResolution(value));
                  return 0;
                }
              }
              {
                ::java::util::Map value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
                {
                  INT_CALL(self->object.setDateResolution(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "dateResolution", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__dateResolutionMap(t_StandardQueryParser *self, void *data)
            {
              ::java::util::Map value((jobject) NULL);
              OBJ_CALL(value = self->object.getDateResolutionMap());
              return ::java::util::t_Map::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__dateResolutionMap(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::java::util::Map value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
                {
                  INT_CALL(self->object.setDateResolutionMap(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "dateResolutionMap", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__defaultOperator(t_StandardQueryParser *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator value((jobject) NULL);
              OBJ_CALL(value = self->object.getDefaultOperator());
              return ::org::apache::lucene::queryparser::flexible::standard::config::t_StandardQueryConfigHandler$Operator::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__defaultOperator(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator::initializeClass, &value))
                {
                  INT_CALL(self->object.setDefaultOperator(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "defaultOperator", arg);
              return -1;
            }

            static int t_StandardQueryParser_set__defaultPhraseSlop(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setDefaultPhraseSlop(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "defaultPhraseSlop", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__enablePositionIncrements(t_StandardQueryParser *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getEnablePositionIncrements());
              Py_RETURN_BOOL(value);
            }
            static int t_StandardQueryParser_set__enablePositionIncrements(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                  INT_CALL(self->object.setEnablePositionIncrements(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "enablePositionIncrements", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__fieldsBoost(t_StandardQueryParser *self, void *data)
            {
              ::java::util::Map value((jobject) NULL);
              OBJ_CALL(value = self->object.getFieldsBoost());
              return ::java::util::t_Map::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__fieldsBoost(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::java::util::Map value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
                {
                  INT_CALL(self->object.setFieldsBoost(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "fieldsBoost", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__fuzzyMinSim(t_StandardQueryParser *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getFuzzyMinSim());
              return PyFloat_FromDouble((double) value);
            }
            static int t_StandardQueryParser_set__fuzzyMinSim(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                jfloat value;
                if (!parseArg(arg, "F", &value))
                {
                  INT_CALL(self->object.setFuzzyMinSim(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "fuzzyMinSim", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__fuzzyPrefixLength(t_StandardQueryParser *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getFuzzyPrefixLength());
              return PyInt_FromLong((long) value);
            }
            static int t_StandardQueryParser_set__fuzzyPrefixLength(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setFuzzyPrefixLength(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "fuzzyPrefixLength", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__locale(t_StandardQueryParser *self, void *data)
            {
              ::java::util::Locale value((jobject) NULL);
              OBJ_CALL(value = self->object.getLocale());
              return ::java::util::t_Locale::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__locale(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::java::util::Locale value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::Locale::initializeClass, &value))
                {
                  INT_CALL(self->object.setLocale(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "locale", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__lowercaseExpandedTerms(t_StandardQueryParser *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getLowercaseExpandedTerms());
              Py_RETURN_BOOL(value);
            }
            static int t_StandardQueryParser_set__lowercaseExpandedTerms(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                  INT_CALL(self->object.setLowercaseExpandedTerms(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "lowercaseExpandedTerms", arg);
              return -1;
            }

            static int t_StandardQueryParser_set__multiFields(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                JArray< ::java::lang::CharSequence > value((jobject) NULL);
                if (!parseArg(arg, "[O", &::java::lang::PY_TYPE(CharSequence), &value))
                {
                  INT_CALL(self->object.setMultiFields(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "multiFields", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__multiTermRewriteMethod(t_StandardQueryParser *self, void *data)
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
              OBJ_CALL(value = self->object.getMultiTermRewriteMethod());
              return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__multiTermRewriteMethod(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &value))
                {
                  INT_CALL(self->object.setMultiTermRewriteMethod(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "multiTermRewriteMethod", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__numericConfigMap(t_StandardQueryParser *self, void *data)
            {
              ::java::util::Map value((jobject) NULL);
              OBJ_CALL(value = self->object.getNumericConfigMap());
              return ::java::util::t_Map::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__numericConfigMap(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::java::util::Map value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
                {
                  INT_CALL(self->object.setNumericConfigMap(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "numericConfigMap", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__phraseSlop(t_StandardQueryParser *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getPhraseSlop());
              return PyInt_FromLong((long) value);
            }
            static int t_StandardQueryParser_set__phraseSlop(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setPhraseSlop(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "phraseSlop", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__timeZone(t_StandardQueryParser *self, void *data)
            {
              ::java::util::TimeZone value((jobject) NULL);
              OBJ_CALL(value = self->object.getTimeZone());
              return ::java::util::t_TimeZone::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__timeZone(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::java::util::TimeZone value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &value))
                {
                  INT_CALL(self->object.setTimeZone(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "timeZone", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fa/PersianNormalizationFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "org/apache/lucene/analysis/fa/PersianNormalizationFilter.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {

          ::java::lang::Class *PersianNormalizationFilterFactory::class$ = NULL;
          jmethodID *PersianNormalizationFilterFactory::mids$ = NULL;
          bool PersianNormalizationFilterFactory::live$ = false;

          jclass PersianNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fa/PersianNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6e538871] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/fa/PersianNormalizationFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PersianNormalizationFilterFactory::PersianNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::fa::PersianNormalizationFilter PersianNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::fa::PersianNormalizationFilter(env->callObjectMethod(this$, mids$[mid_create_6e538871], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory PersianNormalizationFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {
          static PyObject *t_PersianNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PersianNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PersianNormalizationFilterFactory_init_(t_PersianNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PersianNormalizationFilterFactory_create(t_PersianNormalizationFilterFactory *self, PyObject *args);
          static PyObject *t_PersianNormalizationFilterFactory_getMultiTermComponent(t_PersianNormalizationFilterFactory *self);
          static PyObject *t_PersianNormalizationFilterFactory_get__multiTermComponent(t_PersianNormalizationFilterFactory *self, void *data);
          static PyGetSetDef t_PersianNormalizationFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_PersianNormalizationFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PersianNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PersianNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianNormalizationFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_PersianNormalizationFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PersianNormalizationFilterFactory, t_PersianNormalizationFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, PersianNormalizationFilterFactory, t_PersianNormalizationFilterFactory_init_, 0, 0, t_PersianNormalizationFilterFactory__fields_, 0, 0);

          void t_PersianNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PersianNormalizationFilterFactory), module, "PersianNormalizationFilterFactory", 0);
          }

          void t_PersianNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PersianNormalizationFilterFactory).tp_dict, "class_", make_descriptor(PersianNormalizationFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PersianNormalizationFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PersianNormalizationFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PersianNormalizationFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PersianNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PersianNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PersianNormalizationFilterFactory::wrap_Object(PersianNormalizationFilterFactory(((t_PersianNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PersianNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PersianNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PersianNormalizationFilterFactory_init_(t_PersianNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PersianNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PersianNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PersianNormalizationFilterFactory_create(t_PersianNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::fa::PersianNormalizationFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::fa::t_PersianNormalizationFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PersianNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_PersianNormalizationFilterFactory_getMultiTermComponent(t_PersianNormalizationFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_PersianNormalizationFilterFactory_get__multiTermComponent(t_PersianNormalizationFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/EliasFanoDocIdSet.h"
#include "java/io/IOException.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *EliasFanoDocIdSet::class$ = NULL;
          jmethodID *EliasFanoDocIdSet::mids$ = NULL;
          bool EliasFanoDocIdSet::live$ = false;

          jclass EliasFanoDocIdSet::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/EliasFanoDocIdSet");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_encodeFromDisi_c2b5607d] = env->getMethodID(cls, "encodeFromDisi", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
              mids$[mid_iterator_dc23660c] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_sufficientlySmallerThanBitSet_a7e12ca8] = env->getStaticMethodID(cls, "sufficientlySmallerThanBitSet", "(JJ)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EliasFanoDocIdSet::EliasFanoDocIdSet(jint a0, jint a1) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

          void EliasFanoDocIdSet::encodeFromDisi(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_encodeFromDisi_c2b5607d], a0.this$);
          }

          jboolean EliasFanoDocIdSet::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint EliasFanoDocIdSet::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jboolean EliasFanoDocIdSet::isCacheable() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
          }

          ::org::apache::lucene::search::DocIdSetIterator EliasFanoDocIdSet::iterator() const
          {
            return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_dc23660c]));
          }

          jlong EliasFanoDocIdSet::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          jboolean EliasFanoDocIdSet::sufficientlySmallerThanBitSet(jlong a0, jlong a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_sufficientlySmallerThanBitSet_a7e12ca8], a0, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_EliasFanoDocIdSet_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EliasFanoDocIdSet_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EliasFanoDocIdSet_init_(t_EliasFanoDocIdSet *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EliasFanoDocIdSet_encodeFromDisi(t_EliasFanoDocIdSet *self, PyObject *arg);
          static PyObject *t_EliasFanoDocIdSet_equals(t_EliasFanoDocIdSet *self, PyObject *args);
          static PyObject *t_EliasFanoDocIdSet_hashCode(t_EliasFanoDocIdSet *self, PyObject *args);
          static PyObject *t_EliasFanoDocIdSet_isCacheable(t_EliasFanoDocIdSet *self, PyObject *args);
          static PyObject *t_EliasFanoDocIdSet_iterator(t_EliasFanoDocIdSet *self, PyObject *args);
          static PyObject *t_EliasFanoDocIdSet_ramBytesUsed(t_EliasFanoDocIdSet *self, PyObject *args);
          static PyObject *t_EliasFanoDocIdSet_sufficientlySmallerThanBitSet(PyTypeObject *type, PyObject *args);
          static PyObject *t_EliasFanoDocIdSet_get__cacheable(t_EliasFanoDocIdSet *self, void *data);
          static PyGetSetDef t_EliasFanoDocIdSet__fields_[] = {
            DECLARE_GET_FIELD(t_EliasFanoDocIdSet, cacheable),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_EliasFanoDocIdSet__methods_[] = {
            DECLARE_METHOD(t_EliasFanoDocIdSet, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EliasFanoDocIdSet, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EliasFanoDocIdSet, encodeFromDisi, METH_O),
            DECLARE_METHOD(t_EliasFanoDocIdSet, equals, METH_VARARGS),
            DECLARE_METHOD(t_EliasFanoDocIdSet, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_EliasFanoDocIdSet, isCacheable, METH_VARARGS),
            DECLARE_METHOD(t_EliasFanoDocIdSet, iterator, METH_VARARGS),
            DECLARE_METHOD(t_EliasFanoDocIdSet, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_EliasFanoDocIdSet, sufficientlySmallerThanBitSet, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EliasFanoDocIdSet, t_EliasFanoDocIdSet, ::org::apache::lucene::search::DocIdSet, EliasFanoDocIdSet, t_EliasFanoDocIdSet_init_, 0, 0, t_EliasFanoDocIdSet__fields_, 0, 0);

          void t_EliasFanoDocIdSet::install(PyObject *module)
          {
            installType(&PY_TYPE(EliasFanoDocIdSet), module, "EliasFanoDocIdSet", 0);
          }

          void t_EliasFanoDocIdSet::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EliasFanoDocIdSet).tp_dict, "class_", make_descriptor(EliasFanoDocIdSet::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EliasFanoDocIdSet).tp_dict, "wrapfn_", make_descriptor(t_EliasFanoDocIdSet::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EliasFanoDocIdSet).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EliasFanoDocIdSet_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EliasFanoDocIdSet::initializeClass, 1)))
              return NULL;
            return t_EliasFanoDocIdSet::wrap_Object(EliasFanoDocIdSet(((t_EliasFanoDocIdSet *) arg)->object.this$));
          }
          static PyObject *t_EliasFanoDocIdSet_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EliasFanoDocIdSet::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EliasFanoDocIdSet_init_(t_EliasFanoDocIdSet *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            EliasFanoDocIdSet object((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              INT_CALL(object = EliasFanoDocIdSet(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EliasFanoDocIdSet_encodeFromDisi(t_EliasFanoDocIdSet *self, PyObject *arg)
          {
            ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
            {
              OBJ_CALL(self->object.encodeFromDisi(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "encodeFromDisi", arg);
            return NULL;
          }

          static PyObject *t_EliasFanoDocIdSet_equals(t_EliasFanoDocIdSet *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(EliasFanoDocIdSet), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_EliasFanoDocIdSet_hashCode(t_EliasFanoDocIdSet *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(EliasFanoDocIdSet), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_EliasFanoDocIdSet_isCacheable(t_EliasFanoDocIdSet *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.isCacheable());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(EliasFanoDocIdSet), (PyObject *) self, "isCacheable", args, 2);
          }

          static PyObject *t_EliasFanoDocIdSet_iterator(t_EliasFanoDocIdSet *self, PyObject *args)
          {
            ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.iterator());
              return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(EliasFanoDocIdSet), (PyObject *) self, "iterator", args, 2);
          }

          static PyObject *t_EliasFanoDocIdSet_ramBytesUsed(t_EliasFanoDocIdSet *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(EliasFanoDocIdSet), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_EliasFanoDocIdSet_sufficientlySmallerThanBitSet(PyTypeObject *type, PyObject *args)
          {
            jlong a0;
            jlong a1;
            jboolean result;

            if (!parseArgs(args, "JJ", &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::EliasFanoDocIdSet::sufficientlySmallerThanBitSet(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "sufficientlySmallerThanBitSet", args);
            return NULL;
          }

          static PyObject *t_EliasFanoDocIdSet_get__cacheable(t_EliasFanoDocIdSet *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isCacheable());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40TermVectorsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/TermVectorsReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/codecs/TermVectorsWriter.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40TermVectorsFormat::class$ = NULL;
          jmethodID *Lucene40TermVectorsFormat::mids$ = NULL;
          bool Lucene40TermVectorsFormat::live$ = false;

          jclass Lucene40TermVectorsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40TermVectorsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_vectorsReader_9c23221f] = env->getMethodID(cls, "vectorsReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/TermVectorsReader;");
              mids$[mid_vectorsWriter_0c8458c9] = env->getMethodID(cls, "vectorsWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/TermVectorsWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40TermVectorsFormat::Lucene40TermVectorsFormat() : ::org::apache::lucene::codecs::TermVectorsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::TermVectorsReader Lucene40TermVectorsFormat::vectorsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            return ::org::apache::lucene::codecs::TermVectorsReader(env->callObjectMethod(this$, mids$[mid_vectorsReader_9c23221f], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::codecs::TermVectorsWriter Lucene40TermVectorsFormat::vectorsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::codecs::TermVectorsWriter(env->callObjectMethod(this$, mids$[mid_vectorsWriter_0c8458c9], a0.this$, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40TermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40TermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40TermVectorsFormat_init_(t_Lucene40TermVectorsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40TermVectorsFormat_vectorsReader(t_Lucene40TermVectorsFormat *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsFormat_vectorsWriter(t_Lucene40TermVectorsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene40TermVectorsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40TermVectorsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40TermVectorsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40TermVectorsFormat, vectorsReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsFormat, vectorsWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40TermVectorsFormat, t_Lucene40TermVectorsFormat, ::org::apache::lucene::codecs::TermVectorsFormat, Lucene40TermVectorsFormat, t_Lucene40TermVectorsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene40TermVectorsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40TermVectorsFormat), module, "Lucene40TermVectorsFormat", 0);
          }

          void t_Lucene40TermVectorsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsFormat).tp_dict, "class_", make_descriptor(Lucene40TermVectorsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40TermVectorsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40TermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40TermVectorsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40TermVectorsFormat::wrap_Object(Lucene40TermVectorsFormat(((t_Lucene40TermVectorsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40TermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40TermVectorsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40TermVectorsFormat_init_(t_Lucene40TermVectorsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40TermVectorsFormat object((jobject) NULL);

            INT_CALL(object = Lucene40TermVectorsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40TermVectorsFormat_vectorsReader(t_Lucene40TermVectorsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::org::apache::lucene::codecs::TermVectorsReader result((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.vectorsReader(a0, a1, a2, a3));
              return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsFormat), (PyObject *) self, "vectorsReader", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsFormat_vectorsWriter(t_Lucene40TermVectorsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::codecs::TermVectorsWriter result((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.vectorsWriter(a0, a1, a2));
              return ::org::apache::lucene::codecs::t_TermVectorsWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsFormat), (PyObject *) self, "vectorsWriter", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *CompiledAutomaton$AUTOMATON_TYPE::class$ = NULL;
          jmethodID *CompiledAutomaton$AUTOMATON_TYPE::mids$ = NULL;
          bool CompiledAutomaton$AUTOMATON_TYPE::live$ = false;
          CompiledAutomaton$AUTOMATON_TYPE *CompiledAutomaton$AUTOMATON_TYPE::ALL = NULL;
          CompiledAutomaton$AUTOMATON_TYPE *CompiledAutomaton$AUTOMATON_TYPE::NONE = NULL;
          CompiledAutomaton$AUTOMATON_TYPE *CompiledAutomaton$AUTOMATON_TYPE::NORMAL = NULL;
          CompiledAutomaton$AUTOMATON_TYPE *CompiledAutomaton$AUTOMATON_TYPE::PREFIX$ = NULL;
          CompiledAutomaton$AUTOMATON_TYPE *CompiledAutomaton$AUTOMATON_TYPE::SINGLE = NULL;

          jclass CompiledAutomaton$AUTOMATON_TYPE::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_9a95b48c] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;");
              mids$[mid_values_9a1b8d3a] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ALL = new CompiledAutomaton$AUTOMATON_TYPE(env->getStaticObjectField(cls, "ALL", "Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;"));
              NONE = new CompiledAutomaton$AUTOMATON_TYPE(env->getStaticObjectField(cls, "NONE", "Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;"));
              NORMAL = new CompiledAutomaton$AUTOMATON_TYPE(env->getStaticObjectField(cls, "NORMAL", "Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;"));
              PREFIX$ = new CompiledAutomaton$AUTOMATON_TYPE(env->getStaticObjectField(cls, "PREFIX", "Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;"));
              SINGLE = new CompiledAutomaton$AUTOMATON_TYPE(env->getStaticObjectField(cls, "SINGLE", "Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompiledAutomaton$AUTOMATON_TYPE CompiledAutomaton$AUTOMATON_TYPE::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return CompiledAutomaton$AUTOMATON_TYPE(env->callStaticObjectMethod(cls, mids$[mid_valueOf_9a95b48c], a0.this$));
          }

          JArray< CompiledAutomaton$AUTOMATON_TYPE > CompiledAutomaton$AUTOMATON_TYPE::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< CompiledAutomaton$AUTOMATON_TYPE >(env->callStaticObjectMethod(cls, mids$[mid_values_9a1b8d3a]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_of_(t_CompiledAutomaton$AUTOMATON_TYPE *self, PyObject *args);
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_values(PyTypeObject *type);
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_get__parameters_(t_CompiledAutomaton$AUTOMATON_TYPE *self, void *data);
          static PyGetSetDef t_CompiledAutomaton$AUTOMATON_TYPE__fields_[] = {
            DECLARE_GET_FIELD(t_CompiledAutomaton$AUTOMATON_TYPE, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CompiledAutomaton$AUTOMATON_TYPE__methods_[] = {
            DECLARE_METHOD(t_CompiledAutomaton$AUTOMATON_TYPE, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompiledAutomaton$AUTOMATON_TYPE, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompiledAutomaton$AUTOMATON_TYPE, of_, METH_VARARGS),
            DECLARE_METHOD(t_CompiledAutomaton$AUTOMATON_TYPE, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_CompiledAutomaton$AUTOMATON_TYPE, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompiledAutomaton$AUTOMATON_TYPE, t_CompiledAutomaton$AUTOMATON_TYPE, ::java::lang::Enum, CompiledAutomaton$AUTOMATON_TYPE, abstract_init, 0, 0, t_CompiledAutomaton$AUTOMATON_TYPE__fields_, 0, 0);
          PyObject *t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(const CompiledAutomaton$AUTOMATON_TYPE& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CompiledAutomaton$AUTOMATON_TYPE *self = (t_CompiledAutomaton$AUTOMATON_TYPE *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_CompiledAutomaton$AUTOMATON_TYPE::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CompiledAutomaton$AUTOMATON_TYPE::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CompiledAutomaton$AUTOMATON_TYPE *self = (t_CompiledAutomaton$AUTOMATON_TYPE *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_CompiledAutomaton$AUTOMATON_TYPE::install(PyObject *module)
          {
            installType(&PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE), module, "CompiledAutomaton$AUTOMATON_TYPE", 0);
          }

          void t_CompiledAutomaton$AUTOMATON_TYPE::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE).tp_dict, "class_", make_descriptor(CompiledAutomaton$AUTOMATON_TYPE::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE).tp_dict, "wrapfn_", make_descriptor(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CompiledAutomaton$AUTOMATON_TYPE::initializeClass);
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE).tp_dict, "ALL", make_descriptor(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(*CompiledAutomaton$AUTOMATON_TYPE::ALL)));
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE).tp_dict, "NONE", make_descriptor(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(*CompiledAutomaton$AUTOMATON_TYPE::NONE)));
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE).tp_dict, "NORMAL", make_descriptor(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(*CompiledAutomaton$AUTOMATON_TYPE::NORMAL)));
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE).tp_dict, "PREFIX", make_descriptor(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(*CompiledAutomaton$AUTOMATON_TYPE::PREFIX$)));
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE).tp_dict, "SINGLE", make_descriptor(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(*CompiledAutomaton$AUTOMATON_TYPE::SINGLE)));
          }

          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompiledAutomaton$AUTOMATON_TYPE::initializeClass, 1)))
              return NULL;
            return t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(CompiledAutomaton$AUTOMATON_TYPE(((t_CompiledAutomaton$AUTOMATON_TYPE *) arg)->object.this$));
          }
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompiledAutomaton$AUTOMATON_TYPE::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_of_(t_CompiledAutomaton$AUTOMATON_TYPE *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            CompiledAutomaton$AUTOMATON_TYPE result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::CompiledAutomaton$AUTOMATON_TYPE::valueOf(a0));
              return t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_values(PyTypeObject *type)
          {
            JArray< CompiledAutomaton$AUTOMATON_TYPE > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::automaton::CompiledAutomaton$AUTOMATON_TYPE::values());
            return JArray<jobject>(result.this$).wrap(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_jobject);
          }
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_get__parameters_(t_CompiledAutomaton$AUTOMATON_TYPE *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Util.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "org/apache/lucene/util/fst/Util$TopResults.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "java/io/IOException.h"
#include "java/io/Writer.h"
#include "org/apache/lucene/util/IntsRefBuilder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/util/fst/FST$BytesReader.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "java/lang/Long.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Util::class$ = NULL;
          jmethodID *Util::mids$ = NULL;
          bool Util::live$ = false;

          jclass Util::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Util");

              mids$ = new jmethodID[max_mid];
              mids$[mid_get_4f30bf3f] = env->getStaticMethodID(cls, "get", "(Lorg/apache/lucene/util/fst/FST;Lorg/apache/lucene/util/IntsRef;)Ljava/lang/Object;");
              mids$[mid_get_6697be43] = env->getStaticMethodID(cls, "get", "(Lorg/apache/lucene/util/fst/FST;Lorg/apache/lucene/util/BytesRef;)Ljava/lang/Object;");
              mids$[mid_getByOutput_40734dd8] = env->getStaticMethodID(cls, "getByOutput", "(Lorg/apache/lucene/util/fst/FST;J)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_getByOutput_eabec8f2] = env->getStaticMethodID(cls, "getByOutput", "(Lorg/apache/lucene/util/fst/FST;JLorg/apache/lucene/util/fst/FST$BytesReader;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/IntsRefBuilder;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_readCeilArc_3a8e72bb] = env->getStaticMethodID(cls, "readCeilArc", "(ILorg/apache/lucene/util/fst/FST;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_shortestPaths_7b374667] = env->getStaticMethodID(cls, "shortestPaths", "(Lorg/apache/lucene/util/fst/FST;Lorg/apache/lucene/util/fst/FST$Arc;Ljava/lang/Object;Ljava/util/Comparator;IZ)Lorg/apache/lucene/util/fst/Util$TopResults;");
              mids$[mid_toBytesRef_e6e28f75] = env->getStaticMethodID(cls, "toBytesRef", "(Lorg/apache/lucene/util/IntsRef;Lorg/apache/lucene/util/BytesRefBuilder;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_toDot_53893198] = env->getStaticMethodID(cls, "toDot", "(Lorg/apache/lucene/util/fst/FST;Ljava/io/Writer;ZZ)V");
              mids$[mid_toIntsRef_521a15b5] = env->getStaticMethodID(cls, "toIntsRef", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/IntsRefBuilder;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_toUTF16_d41ae47b] = env->getStaticMethodID(cls, "toUTF16", "(Ljava/lang/CharSequence;Lorg/apache/lucene/util/IntsRefBuilder;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_toUTF32_d41ae47b] = env->getStaticMethodID(cls, "toUTF32", "(Ljava/lang/CharSequence;Lorg/apache/lucene/util/IntsRefBuilder;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_toUTF32_e4984957] = env->getStaticMethodID(cls, "toUTF32", "([CIILorg/apache/lucene/util/IntsRefBuilder;)Lorg/apache/lucene/util/IntsRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Object Util::get(const ::org::apache::lucene::util::fst::FST & a0, const ::org::apache::lucene::util::IntsRef & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::Object(env->callStaticObjectMethod(cls, mids$[mid_get_4f30bf3f], a0.this$, a1.this$));
          }

          ::java::lang::Object Util::get(const ::org::apache::lucene::util::fst::FST & a0, const ::org::apache::lucene::util::BytesRef & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::Object(env->callStaticObjectMethod(cls, mids$[mid_get_6697be43], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::IntsRef Util::getByOutput(const ::org::apache::lucene::util::fst::FST & a0, jlong a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::IntsRef(env->callStaticObjectMethod(cls, mids$[mid_getByOutput_40734dd8], a0.this$, a1));
          }

          ::org::apache::lucene::util::IntsRef Util::getByOutput(const ::org::apache::lucene::util::fst::FST & a0, jlong a1, const ::org::apache::lucene::util::fst::FST$BytesReader & a2, const ::org::apache::lucene::util::fst::FST$Arc & a3, const ::org::apache::lucene::util::fst::FST$Arc & a4, const ::org::apache::lucene::util::IntsRefBuilder & a5)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::IntsRef(env->callStaticObjectMethod(cls, mids$[mid_getByOutput_eabec8f2], a0.this$, a1, a2.this$, a3.this$, a4.this$, a5.this$));
          }

          ::org::apache::lucene::util::fst::FST$Arc Util::readCeilArc(jint a0, const ::org::apache::lucene::util::fst::FST & a1, const ::org::apache::lucene::util::fst::FST$Arc & a2, const ::org::apache::lucene::util::fst::FST$Arc & a3, const ::org::apache::lucene::util::fst::FST$BytesReader & a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::fst::FST$Arc(env->callStaticObjectMethod(cls, mids$[mid_readCeilArc_3a8e72bb], a0, a1.this$, a2.this$, a3.this$, a4.this$));
          }

          ::org::apache::lucene::util::fst::Util$TopResults Util::shortestPaths(const ::org::apache::lucene::util::fst::FST & a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::java::lang::Object & a2, const ::java::util::Comparator & a3, jint a4, jboolean a5)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::fst::Util$TopResults(env->callStaticObjectMethod(cls, mids$[mid_shortestPaths_7b374667], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
          }

          ::org::apache::lucene::util::BytesRef Util::toBytesRef(const ::org::apache::lucene::util::IntsRef & a0, const ::org::apache::lucene::util::BytesRefBuilder & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::BytesRef(env->callStaticObjectMethod(cls, mids$[mid_toBytesRef_e6e28f75], a0.this$, a1.this$));
          }

          void Util::toDot(const ::org::apache::lucene::util::fst::FST & a0, const ::java::io::Writer & a1, jboolean a2, jboolean a3)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_toDot_53893198], a0.this$, a1.this$, a2, a3);
          }

          ::org::apache::lucene::util::IntsRef Util::toIntsRef(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::IntsRefBuilder & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::IntsRef(env->callStaticObjectMethod(cls, mids$[mid_toIntsRef_521a15b5], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::IntsRef Util::toUTF16(const ::java::lang::CharSequence & a0, const ::org::apache::lucene::util::IntsRefBuilder & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::IntsRef(env->callStaticObjectMethod(cls, mids$[mid_toUTF16_d41ae47b], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::IntsRef Util::toUTF32(const ::java::lang::CharSequence & a0, const ::org::apache::lucene::util::IntsRefBuilder & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::IntsRef(env->callStaticObjectMethod(cls, mids$[mid_toUTF32_d41ae47b], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::IntsRef Util::toUTF32(const JArray< jchar > & a0, jint a1, jint a2, const ::org::apache::lucene::util::IntsRefBuilder & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::IntsRef(env->callStaticObjectMethod(cls, mids$[mid_toUTF32_e4984957], a0.this$, a1, a2, a3.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/fst/Util$Result.h"
#include "org/apache/lucene/util/fst/Util$TopNSearcher.h"
#include "org/apache/lucene/util/fst/Util$FSTPath.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Util_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util_get(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_getByOutput(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_readCeilArc(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_shortestPaths(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_toBytesRef(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_toDot(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_toIntsRef(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_toUTF16(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_toUTF32(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_Util__methods_[] = {
            DECLARE_METHOD(t_Util, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util, get, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, getByOutput, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, readCeilArc, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, shortestPaths, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, toBytesRef, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, toDot, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, toIntsRef, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, toUTF16, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, toUTF32, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Util, t_Util, ::java::lang::Object, Util, abstract_init, 0, 0, 0, 0, 0);

          void t_Util::install(PyObject *module)
          {
            installType(&PY_TYPE(Util), module, "Util", 0);
            PyDict_SetItemString(PY_TYPE(Util).tp_dict, "TopResults", make_descriptor(&PY_TYPE(Util$TopResults)));
            PyDict_SetItemString(PY_TYPE(Util).tp_dict, "Result", make_descriptor(&PY_TYPE(Util$Result)));
            PyDict_SetItemString(PY_TYPE(Util).tp_dict, "TopNSearcher", make_descriptor(&PY_TYPE(Util$TopNSearcher)));
            PyDict_SetItemString(PY_TYPE(Util).tp_dict, "FSTPath", make_descriptor(&PY_TYPE(Util$FSTPath)));
          }

          void t_Util::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Util).tp_dict, "class_", make_descriptor(Util::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Util).tp_dict, "wrapfn_", make_descriptor(t_Util::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Util).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Util_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Util::initializeClass, 1)))
              return NULL;
            return t_Util::wrap_Object(Util(((t_Util *) arg)->object.this$));
          }
          static PyObject *t_Util_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Util::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Util_get(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::IntsRef a1((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::fst::FST::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::get(a0, a1));
                  return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::fst::FST::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::get(a0, a1));
                  return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "get", args);
            return NULL;
          }

          static PyObject *t_Util_getByOutput(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
                PyTypeObject **p0;
                jlong a1;
                ::org::apache::lucene::util::IntsRef result((jobject) NULL);

                if (!parseArgs(args, "KJ", ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::getByOutput(a0, a1));
                  return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
                }
              }
              break;
             case 6:
              {
                ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
                PyTypeObject **p0;
                jlong a1;
                ::org::apache::lucene::util::fst::FST$BytesReader a2((jobject) NULL);
                PyTypeObject **p2;
                ::org::apache::lucene::util::fst::FST$Arc a3((jobject) NULL);
                PyTypeObject **p3;
                ::org::apache::lucene::util::fst::FST$Arc a4((jobject) NULL);
                PyTypeObject **p4;
                ::org::apache::lucene::util::IntsRefBuilder a5((jobject) NULL);
                ::org::apache::lucene::util::IntsRef result((jobject) NULL);

                if (!parseArgs(args, "KJKKKk", ::org::apache::lucene::util::fst::FST::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::IntsRefBuilder::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_, &a3, &p3, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a4, &p4, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a5))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::getByOutput(a0, a1, a2, a3, a4, a5));
                  return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getByOutput", args);
            return NULL;
          }

          static PyObject *t_Util_readCeilArc(PyTypeObject *type, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::util::fst::FST a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$Arc a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::util::fst::FST$Arc a3((jobject) NULL);
            PyTypeObject **p3;
            ::org::apache::lucene::util::fst::FST$BytesReader a4((jobject) NULL);
            PyTypeObject **p4;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "IKKKK", ::org::apache::lucene::util::fst::FST::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_FST::parameters_, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a3, &p3, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a4, &p4, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::readCeilArc(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "readCeilArc", args);
            return NULL;
          }

          static PyObject *t_Util_shortestPaths(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Object a2((jobject) NULL);
            ::java::util::Comparator a3((jobject) NULL);
            PyTypeObject **p3;
            jint a4;
            jboolean a5;
            ::org::apache::lucene::util::fst::Util$TopResults result((jobject) NULL);

            if (!parseArgs(args, "KKoKIZ", ::org::apache::lucene::util::fst::FST::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2, &a3, &p3, ::java::util::t_Comparator::parameters_, &a4, &a5))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::shortestPaths(a0, a1, a2, a3, a4, a5));
              return ::org::apache::lucene::util::fst::t_Util$TopResults::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "shortestPaths", args);
            return NULL;
          }

          static PyObject *t_Util_toBytesRef(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRefBuilder a1((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::IntsRef::initializeClass, ::org::apache::lucene::util::BytesRefBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::toBytesRef(a0, a1));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "toBytesRef", args);
            return NULL;
          }

          static PyObject *t_Util_toDot(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::io::Writer a1((jobject) NULL);
            jboolean a2;
            jboolean a3;

            if (!parseArgs(args, "KkZZ", ::org::apache::lucene::util::fst::FST::initializeClass, ::java::io::Writer::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1, &a2, &a3))
            {
              OBJ_CALL(::org::apache::lucene::util::fst::Util::toDot(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "toDot", args);
            return NULL;
          }

          static PyObject *t_Util_toIntsRef(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::IntsRefBuilder a1((jobject) NULL);
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::IntsRefBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::toIntsRef(a0, a1));
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "toIntsRef", args);
            return NULL;
          }

          static PyObject *t_Util_toUTF16(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::CharSequence a0((jobject) NULL);
            ::org::apache::lucene::util::IntsRefBuilder a1((jobject) NULL);
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, "Ok", &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::IntsRefBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::toUTF16(a0, a1));
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "toUTF16", args);
            return NULL;
          }

          static PyObject *t_Util_toUTF32(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::util::IntsRefBuilder a1((jobject) NULL);
                ::org::apache::lucene::util::IntsRef result((jobject) NULL);

                if (!parseArgs(args, "Ok", &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::IntsRefBuilder::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::toUTF32(a0, a1));
                  return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
                }
              }
              break;
             case 4:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                ::org::apache::lucene::util::IntsRefBuilder a3((jobject) NULL);
                ::org::apache::lucene::util::IntsRef result((jobject) NULL);

                if (!parseArgs(args, "[CIIk", ::org::apache::lucene::util::IntsRefBuilder::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::toUTF32(a0, a1, a2, a3));
                  return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "toUTF32", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharArrayMap$EntrySet.h"
#include "org/apache/lucene/analysis/util/CharArrayMap$EntryIterator.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharArrayMap$EntrySet::class$ = NULL;
          jmethodID *CharArrayMap$EntrySet::mids$ = NULL;
          bool CharArrayMap$EntrySet::live$ = false;

          jclass CharArrayMap$EntrySet::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharArrayMap$EntrySet");

              mids$ = new jmethodID[max_mid];
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
              mids$[mid_iterator_6e80333a] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/analysis/util/CharArrayMap$EntryIterator;");
              mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void CharArrayMap$EntrySet::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          jboolean CharArrayMap$EntrySet::contains(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
          }

          ::org::apache::lucene::analysis::util::CharArrayMap$EntryIterator CharArrayMap$EntrySet::iterator() const
          {
            return ::org::apache::lucene::analysis::util::CharArrayMap$EntryIterator(env->callObjectMethod(this$, mids$[mid_iterator_6e80333a]));
          }

          jboolean CharArrayMap$EntrySet::remove(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_remove_290588e2], a0.this$);
          }

          jint CharArrayMap$EntrySet::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharArrayMap$EntrySet_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayMap$EntrySet_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayMap$EntrySet_of_(t_CharArrayMap$EntrySet *self, PyObject *args);
          static PyObject *t_CharArrayMap$EntrySet_clear(t_CharArrayMap$EntrySet *self, PyObject *args);
          static PyObject *t_CharArrayMap$EntrySet_contains(t_CharArrayMap$EntrySet *self, PyObject *args);
          static PyObject *t_CharArrayMap$EntrySet_iterator(t_CharArrayMap$EntrySet *self, PyObject *args);
          static PyObject *t_CharArrayMap$EntrySet_remove(t_CharArrayMap$EntrySet *self, PyObject *args);
          static PyObject *t_CharArrayMap$EntrySet_size(t_CharArrayMap$EntrySet *self, PyObject *args);
          static PyObject *t_CharArrayMap$EntrySet_get__parameters_(t_CharArrayMap$EntrySet *self, void *data);
          static PyGetSetDef t_CharArrayMap$EntrySet__fields_[] = {
            DECLARE_GET_FIELD(t_CharArrayMap$EntrySet, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharArrayMap$EntrySet__methods_[] = {
            DECLARE_METHOD(t_CharArrayMap$EntrySet, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMap$EntrySet, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMap$EntrySet, of_, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap$EntrySet, clear, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap$EntrySet, contains, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap$EntrySet, iterator, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap$EntrySet, remove, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap$EntrySet, size, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharArrayMap$EntrySet, t_CharArrayMap$EntrySet, ::java::util::AbstractSet, CharArrayMap$EntrySet, abstract_init, ((PyObject *(*)(t_CharArrayMap$EntrySet *)) get_generic_iterator< t_CharArrayMap$EntrySet >), 0, t_CharArrayMap$EntrySet__fields_, 0, 0);
          PyObject *t_CharArrayMap$EntrySet::wrap_Object(const CharArrayMap$EntrySet& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharArrayMap$EntrySet::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharArrayMap$EntrySet *self = (t_CharArrayMap$EntrySet *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_CharArrayMap$EntrySet::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharArrayMap$EntrySet::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharArrayMap$EntrySet *self = (t_CharArrayMap$EntrySet *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_CharArrayMap$EntrySet::install(PyObject *module)
          {
            installType(&PY_TYPE(CharArrayMap$EntrySet), module, "CharArrayMap$EntrySet", 0);
          }

          void t_CharArrayMap$EntrySet::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharArrayMap$EntrySet).tp_dict, "class_", make_descriptor(CharArrayMap$EntrySet::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharArrayMap$EntrySet).tp_dict, "wrapfn_", make_descriptor(t_CharArrayMap$EntrySet::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharArrayMap$EntrySet).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharArrayMap$EntrySet_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharArrayMap$EntrySet::initializeClass, 1)))
              return NULL;
            return t_CharArrayMap$EntrySet::wrap_Object(CharArrayMap$EntrySet(((t_CharArrayMap$EntrySet *) arg)->object.this$));
          }
          static PyObject *t_CharArrayMap$EntrySet_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharArrayMap$EntrySet::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharArrayMap$EntrySet_of_(t_CharArrayMap$EntrySet *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_CharArrayMap$EntrySet_clear(t_CharArrayMap$EntrySet *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharArrayMap$EntrySet), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_CharArrayMap$EntrySet_contains(t_CharArrayMap$EntrySet *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.contains(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CharArrayMap$EntrySet), (PyObject *) self, "contains", args, 2);
          }

          static PyObject *t_CharArrayMap$EntrySet_iterator(t_CharArrayMap$EntrySet *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::util::CharArrayMap$EntryIterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.iterator());
              return ::org::apache::lucene::analysis::util::t_CharArrayMap$EntryIterator::wrap_Object(result, self->parameters[0]);
            }

            return callSuper(&PY_TYPE(CharArrayMap$EntrySet), (PyObject *) self, "iterator", args, 2);
          }

          static PyObject *t_CharArrayMap$EntrySet_remove(t_CharArrayMap$EntrySet *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.remove(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CharArrayMap$EntrySet), (PyObject *) self, "remove", args, 2);
          }

          static PyObject *t_CharArrayMap$EntrySet_size(t_CharArrayMap$EntrySet *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(CharArrayMap$EntrySet), (PyObject *) self, "size", args, 2);
          }
          static PyObject *t_CharArrayMap$EntrySet_get__parameters_(t_CharArrayMap$EntrySet *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/CharStream.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *CharStream::class$ = NULL;
          jmethodID *CharStream::mids$ = NULL;
          bool CharStream::live$ = false;

          jclass CharStream::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/CharStream");

              mids$ = new jmethodID[max_mid];
              mids$[mid_BeginToken_54c6a173] = env->getMethodID(cls, "BeginToken", "()C");
              mids$[mid_Done_54c6a166] = env->getMethodID(cls, "Done", "()V");
              mids$[mid_GetImage_14c7b5c5] = env->getMethodID(cls, "GetImage", "()Ljava/lang/String;");
              mids$[mid_GetSuffix_b4292e99] = env->getMethodID(cls, "GetSuffix", "(I)[C");
              mids$[mid_backup_39c7bd3c] = env->getMethodID(cls, "backup", "(I)V");
              mids$[mid_getBeginColumn_54c6a179] = env->getMethodID(cls, "getBeginColumn", "()I");
              mids$[mid_getBeginLine_54c6a179] = env->getMethodID(cls, "getBeginLine", "()I");
              mids$[mid_getColumn_54c6a179] = env->getMethodID(cls, "getColumn", "()I");
              mids$[mid_getEndColumn_54c6a179] = env->getMethodID(cls, "getEndColumn", "()I");
              mids$[mid_getEndLine_54c6a179] = env->getMethodID(cls, "getEndLine", "()I");
              mids$[mid_getLine_54c6a179] = env->getMethodID(cls, "getLine", "()I");
              mids$[mid_readChar_54c6a173] = env->getMethodID(cls, "readChar", "()C");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jchar CharStream::BeginToken() const
          {
            return env->callCharMethod(this$, mids$[mid_BeginToken_54c6a173]);
          }

          void CharStream::Done() const
          {
            env->callVoidMethod(this$, mids$[mid_Done_54c6a166]);
          }

          ::java::lang::String CharStream::GetImage() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_GetImage_14c7b5c5]));
          }

          JArray< jchar > CharStream::GetSuffix(jint a0) const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_GetSuffix_b4292e99], a0));
          }

          void CharStream::backup(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_backup_39c7bd3c], a0);
          }

          jint CharStream::getBeginColumn() const
          {
            return env->callIntMethod(this$, mids$[mid_getBeginColumn_54c6a179]);
          }

          jint CharStream::getBeginLine() const
          {
            return env->callIntMethod(this$, mids$[mid_getBeginLine_54c6a179]);
          }

          jint CharStream::getColumn() const
          {
            return env->callIntMethod(this$, mids$[mid_getColumn_54c6a179]);
          }

          jint CharStream::getEndColumn() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndColumn_54c6a179]);
          }

          jint CharStream::getEndLine() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndLine_54c6a179]);
          }

          jint CharStream::getLine() const
          {
            return env->callIntMethod(this$, mids$[mid_getLine_54c6a179]);
          }

          jchar CharStream::readChar() const
          {
            return env->callCharMethod(this$, mids$[mid_readChar_54c6a173]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_CharStream_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharStream_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharStream_BeginToken(t_CharStream *self);
          static PyObject *t_CharStream_Done(t_CharStream *self);
          static PyObject *t_CharStream_GetImage(t_CharStream *self);
          static PyObject *t_CharStream_GetSuffix(t_CharStream *self, PyObject *arg);
          static PyObject *t_CharStream_backup(t_CharStream *self, PyObject *arg);
          static PyObject *t_CharStream_getBeginColumn(t_CharStream *self);
          static PyObject *t_CharStream_getBeginLine(t_CharStream *self);
          static PyObject *t_CharStream_getColumn(t_CharStream *self);
          static PyObject *t_CharStream_getEndColumn(t_CharStream *self);
          static PyObject *t_CharStream_getEndLine(t_CharStream *self);
          static PyObject *t_CharStream_getLine(t_CharStream *self);
          static PyObject *t_CharStream_readChar(t_CharStream *self);
          static PyObject *t_CharStream_get__beginColumn(t_CharStream *self, void *data);
          static PyObject *t_CharStream_get__beginLine(t_CharStream *self, void *data);
          static PyObject *t_CharStream_get__column(t_CharStream *self, void *data);
          static PyObject *t_CharStream_get__endColumn(t_CharStream *self, void *data);
          static PyObject *t_CharStream_get__endLine(t_CharStream *self, void *data);
          static PyObject *t_CharStream_get__line(t_CharStream *self, void *data);
          static PyGetSetDef t_CharStream__fields_[] = {
            DECLARE_GET_FIELD(t_CharStream, beginColumn),
            DECLARE_GET_FIELD(t_CharStream, beginLine),
            DECLARE_GET_FIELD(t_CharStream, column),
            DECLARE_GET_FIELD(t_CharStream, endColumn),
            DECLARE_GET_FIELD(t_CharStream, endLine),
            DECLARE_GET_FIELD(t_CharStream, line),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharStream__methods_[] = {
            DECLARE_METHOD(t_CharStream, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharStream, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharStream, BeginToken, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, Done, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, GetImage, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, GetSuffix, METH_O),
            DECLARE_METHOD(t_CharStream, backup, METH_O),
            DECLARE_METHOD(t_CharStream, getBeginColumn, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, getBeginLine, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, getColumn, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, getEndColumn, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, getEndLine, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, getLine, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, readChar, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharStream, t_CharStream, ::java::lang::Object, CharStream, abstract_init, 0, 0, t_CharStream__fields_, 0, 0);

          void t_CharStream::install(PyObject *module)
          {
            installType(&PY_TYPE(CharStream), module, "CharStream", 0);
          }

          void t_CharStream::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "class_", make_descriptor(CharStream::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "wrapfn_", make_descriptor(t_CharStream::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharStream_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharStream::initializeClass, 1)))
              return NULL;
            return t_CharStream::wrap_Object(CharStream(((t_CharStream *) arg)->object.this$));
          }
          static PyObject *t_CharStream_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharStream::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharStream_BeginToken(t_CharStream *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.BeginToken());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_CharStream_Done(t_CharStream *self)
          {
            OBJ_CALL(self->object.Done());
            Py_RETURN_NONE;
          }

          static PyObject *t_CharStream_GetImage(t_CharStream *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.GetImage());
            return j2p(result);
          }

          static PyObject *t_CharStream_GetSuffix(t_CharStream *self, PyObject *arg)
          {
            jint a0;
            JArray< jchar > result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.GetSuffix(a0));
              return result.wrap();
            }

            PyErr_SetArgsError((PyObject *) self, "GetSuffix", arg);
            return NULL;
          }

          static PyObject *t_CharStream_backup(t_CharStream *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.backup(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "backup", arg);
            return NULL;
          }

          static PyObject *t_CharStream_getBeginColumn(t_CharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBeginColumn());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharStream_getBeginLine(t_CharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBeginLine());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharStream_getColumn(t_CharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getColumn());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharStream_getEndColumn(t_CharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndColumn());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharStream_getEndLine(t_CharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndLine());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharStream_getLine(t_CharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getLine());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharStream_readChar(t_CharStream *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.readChar());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_CharStream_get__beginColumn(t_CharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBeginColumn());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharStream_get__beginLine(t_CharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBeginLine());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharStream_get__column(t_CharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getColumn());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharStream_get__endColumn(t_CharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndColumn());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharStream_get__endLine(t_CharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndLine());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharStream_get__line(t_CharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getLine());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Similarity$SimScorer::class$ = NULL;
          jmethodID *Similarity$SimScorer::mids$ = NULL;
          bool Similarity$SimScorer::live$ = false;

          jclass Similarity$SimScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Similarity$SimScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computePayloadFactor_ffd34a82] = env->getMethodID(cls, "computePayloadFactor", "(IIILorg/apache/lucene/util/BytesRef;)F");
              mids$[mid_computeSlopFactor_39c7bd2c] = env->getMethodID(cls, "computeSlopFactor", "(I)F");
              mids$[mid_explain_d1ebfb75] = env->getMethodID(cls, "explain", "(ILorg/apache/lucene/search/Explanation;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_abdf2c41] = env->getMethodID(cls, "score", "(IF)F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Similarity$SimScorer::Similarity$SimScorer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat Similarity$SimScorer::computePayloadFactor(jint a0, jint a1, jint a2, const ::org::apache::lucene::util::BytesRef & a3) const
          {
            return env->callFloatMethod(this$, mids$[mid_computePayloadFactor_ffd34a82], a0, a1, a2, a3.this$);
          }

          jfloat Similarity$SimScorer::computeSlopFactor(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_computeSlopFactor_39c7bd2c], a0);
          }

          ::org::apache::lucene::search::Explanation Similarity$SimScorer::explain(jint a0, const ::org::apache::lucene::search::Explanation & a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_d1ebfb75], a0, a1.this$));
          }

          jfloat Similarity$SimScorer::score(jint a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_abdf2c41], a0, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Similarity$SimScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Similarity$SimScorer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Similarity$SimScorer_init_(t_Similarity$SimScorer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Similarity$SimScorer_computePayloadFactor(t_Similarity$SimScorer *self, PyObject *args);
          static PyObject *t_Similarity$SimScorer_computeSlopFactor(t_Similarity$SimScorer *self, PyObject *arg);
          static PyObject *t_Similarity$SimScorer_explain(t_Similarity$SimScorer *self, PyObject *args);
          static PyObject *t_Similarity$SimScorer_score(t_Similarity$SimScorer *self, PyObject *args);

          static PyMethodDef t_Similarity$SimScorer__methods_[] = {
            DECLARE_METHOD(t_Similarity$SimScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Similarity$SimScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Similarity$SimScorer, computePayloadFactor, METH_VARARGS),
            DECLARE_METHOD(t_Similarity$SimScorer, computeSlopFactor, METH_O),
            DECLARE_METHOD(t_Similarity$SimScorer, explain, METH_VARARGS),
            DECLARE_METHOD(t_Similarity$SimScorer, score, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Similarity$SimScorer, t_Similarity$SimScorer, ::java::lang::Object, Similarity$SimScorer, t_Similarity$SimScorer_init_, 0, 0, 0, 0, 0);

          void t_Similarity$SimScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(Similarity$SimScorer), module, "Similarity$SimScorer", 0);
          }

          void t_Similarity$SimScorer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Similarity$SimScorer).tp_dict, "class_", make_descriptor(Similarity$SimScorer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Similarity$SimScorer).tp_dict, "wrapfn_", make_descriptor(t_Similarity$SimScorer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Similarity$SimScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Similarity$SimScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Similarity$SimScorer::initializeClass, 1)))
              return NULL;
            return t_Similarity$SimScorer::wrap_Object(Similarity$SimScorer(((t_Similarity$SimScorer *) arg)->object.this$));
          }
          static PyObject *t_Similarity$SimScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Similarity$SimScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Similarity$SimScorer_init_(t_Similarity$SimScorer *self, PyObject *args, PyObject *kwds)
          {
            Similarity$SimScorer object((jobject) NULL);

            INT_CALL(object = Similarity$SimScorer());
            self->object = object;

            return 0;
          }

          static PyObject *t_Similarity$SimScorer_computePayloadFactor(t_Similarity$SimScorer *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "IIIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.computePayloadFactor(a0, a1, a2, a3));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "computePayloadFactor", args);
            return NULL;
          }

          static PyObject *t_Similarity$SimScorer_computeSlopFactor(t_Similarity$SimScorer *self, PyObject *arg)
          {
            jint a0;
            jfloat result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.computeSlopFactor(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "computeSlopFactor", arg);
            return NULL;
          }

          static PyObject *t_Similarity$SimScorer_explain(t_Similarity$SimScorer *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::search::Explanation a1((jobject) NULL);
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "Ik", ::org::apache::lucene::search::Explanation::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", args);
            return NULL;
          }

          static PyObject *t_Similarity$SimScorer_score(t_Similarity$SimScorer *self, PyObject *args)
          {
            jint a0;
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "IF", &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "score", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/FacetField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *FacetField::class$ = NULL;
        jmethodID *FacetField::mids$ = NULL;
        jfieldID *FacetField::fids$ = NULL;
        bool FacetField::live$ = false;

        jclass FacetField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/FacetField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_ba45d66a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Ljava/lang/String;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_verifyLabel_5fdc3f48] = env->getStaticMethodID(cls, "verifyLabel", "(Ljava/lang/String;)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_dim] = env->getFieldID(cls, "dim", "Ljava/lang/String;");
            fids$[fid_path] = env->getFieldID(cls, "path", "[Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FacetField::FacetField(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_ba45d66a, a0.this$, a1.this$)) {}

        ::java::lang::String FacetField::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        void FacetField::verifyLabel(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_verifyLabel_5fdc3f48], a0.this$);
        }

        ::java::lang::String FacetField::_get_dim() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_dim]));
        }

        JArray< ::java::lang::String > FacetField::_get_path() const
        {
          return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_path]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_FacetField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FacetField_init_(t_FacetField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FacetField_toString(t_FacetField *self, PyObject *args);
        static PyObject *t_FacetField_verifyLabel(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetField_get__dim(t_FacetField *self, void *data);
        static PyObject *t_FacetField_get__path(t_FacetField *self, void *data);

        static PyGetSetDef t_FacetField__fields_[] = {
          DECLARE_GET_FIELD(t_FacetField, dim),
          DECLARE_GET_FIELD(t_FacetField, path),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FacetField__methods_[] = {
          DECLARE_METHOD(t_FacetField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetField, toString, METH_VARARGS),
          DECLARE_METHOD(t_FacetField, verifyLabel, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FacetField, t_FacetField, ::org::apache::lucene::document::Field, FacetField, t_FacetField_init_, 0, 0, t_FacetField__fields_, 0, 0);

        void t_FacetField::install(PyObject *module)
        {
          installType(&PY_TYPE(FacetField), module, "FacetField", 0);
        }

        void t_FacetField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FacetField).tp_dict, "class_", make_descriptor(FacetField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FacetField).tp_dict, "wrapfn_", make_descriptor(t_FacetField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FacetField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FacetField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FacetField::initializeClass, 1)))
            return NULL;
          return t_FacetField::wrap_Object(FacetField(((t_FacetField *) arg)->object.this$));
        }
        static PyObject *t_FacetField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FacetField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FacetField_init_(t_FacetField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          FacetField object((jobject) NULL);

          if (!parseArgs(args, "s[s", &a0, &a1))
          {
            INT_CALL(object = FacetField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FacetField_toString(t_FacetField *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FacetField), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FacetField_verifyLabel(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::facet::FacetField::verifyLabel(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "verifyLabel", arg);
          return NULL;
        }

        static PyObject *t_FacetField_get__dim(t_FacetField *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_dim());
          return j2p(value);
        }

        static PyObject *t_FacetField_get__path(t_FacetField *self, void *data)
        {
          JArray< ::java::lang::String > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_path());
          return JArray<jstring>(value.this$).wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "java/util/Iterator.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharArraySet::class$ = NULL;
          jmethodID *CharArraySet::mids$ = NULL;
          bool CharArraySet::live$ = false;
          CharArraySet *CharArraySet::EMPTY_SET = NULL;

          jclass CharArraySet::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharArraySet");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8c9b7a9e] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;Z)V");
              mids$[mid_init$_b3a85a05] = env->getMethodID(cls, "<init>", "(IZ)V");
              mids$[mid_init$_e4d1113d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/util/Collection;Z)V");
              mids$[mid_init$_b3a872e4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;IZ)V");
              mids$[mid_add_5fdc3f44] = env->getMethodID(cls, "add", "(Ljava/lang/String;)Z");
              mids$[mid_add_700e23da] = env->getMethodID(cls, "add", "([C)Z");
              mids$[mid_add_a8afc646] = env->getMethodID(cls, "add", "(Ljava/lang/CharSequence;)Z");
              mids$[mid_add_290588e2] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
              mids$[mid_contains_a8afc646] = env->getMethodID(cls, "contains", "(Ljava/lang/CharSequence;)Z");
              mids$[mid_contains_6f0bb35a] = env->getMethodID(cls, "contains", "([CII)Z");
              mids$[mid_copy_9de0d5d0] = env->getStaticMethodID(cls, "copy", "(Ljava/util/Set;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_copy_8d0d7f61] = env->getStaticMethodID(cls, "copy", "(Lorg/apache/lucene/util/Version;Ljava/util/Set;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_unmodifiableSet_ea04d04d] = env->getStaticMethodID(cls, "unmodifiableSet", "(Lorg/apache/lucene/analysis/util/CharArraySet;)Lorg/apache/lucene/analysis/util/CharArraySet;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              EMPTY_SET = new CharArraySet(env->getStaticObjectField(cls, "EMPTY_SET", "Lorg/apache/lucene/analysis/util/CharArraySet;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharArraySet::CharArraySet(const ::java::util::Collection & a0, jboolean a1) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_8c9b7a9e, a0.this$, a1)) {}

          CharArraySet::CharArraySet(jint a0, jboolean a1) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_b3a85a05, a0, a1)) {}

          CharArraySet::CharArraySet(const ::org::apache::lucene::util::Version & a0, const ::java::util::Collection & a1, jboolean a2) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_e4d1113d, a0.this$, a1.this$, a2)) {}

          CharArraySet::CharArraySet(const ::org::apache::lucene::util::Version & a0, jint a1, jboolean a2) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_b3a872e4, a0.this$, a1, a2)) {}

          jboolean CharArraySet::add(const ::java::lang::String & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_add_5fdc3f44], a0.this$);
          }

          jboolean CharArraySet::add(const JArray< jchar > & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_add_700e23da], a0.this$);
          }

          jboolean CharArraySet::add(const ::java::lang::CharSequence & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_add_a8afc646], a0.this$);
          }

          jboolean CharArraySet::add(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_add_290588e2], a0.this$);
          }

          void CharArraySet::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          jboolean CharArraySet::contains(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
          }

          jboolean CharArraySet::contains(const ::java::lang::CharSequence & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_contains_a8afc646], a0.this$);
          }

          jboolean CharArraySet::contains(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_contains_6f0bb35a], a0.this$, a1, a2);
          }

          CharArraySet CharArraySet::copy(const ::java::util::Set & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_copy_9de0d5d0], a0.this$));
          }

          CharArraySet CharArraySet::copy(const ::org::apache::lucene::util::Version & a0, const ::java::util::Set & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_copy_8d0d7f61], a0.this$, a1.this$));
          }

          ::java::util::Iterator CharArraySet::iterator() const
          {
            return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
          }

          jint CharArraySet::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }

          ::java::lang::String CharArraySet::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          CharArraySet CharArraySet::unmodifiableSet(const CharArraySet & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableSet_ea04d04d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharArraySet_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArraySet_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArraySet_of_(t_CharArraySet *self, PyObject *args);
          static int t_CharArraySet_init_(t_CharArraySet *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CharArraySet_add(t_CharArraySet *self, PyObject *args);
          static PyObject *t_CharArraySet_clear(t_CharArraySet *self, PyObject *args);
          static PyObject *t_CharArraySet_contains(t_CharArraySet *self, PyObject *args);
          static PyObject *t_CharArraySet_copy(PyTypeObject *type, PyObject *args);
          static PyObject *t_CharArraySet_iterator(t_CharArraySet *self, PyObject *args);
          static PyObject *t_CharArraySet_size(t_CharArraySet *self, PyObject *args);
          static PyObject *t_CharArraySet_toString(t_CharArraySet *self, PyObject *args);
          static PyObject *t_CharArraySet_unmodifiableSet(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArraySet_get__parameters_(t_CharArraySet *self, void *data);
          static PyGetSetDef t_CharArraySet__fields_[] = {
            DECLARE_GET_FIELD(t_CharArraySet, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharArraySet__methods_[] = {
            DECLARE_METHOD(t_CharArraySet, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArraySet, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArraySet, of_, METH_VARARGS),
            DECLARE_METHOD(t_CharArraySet, add, METH_VARARGS),
            DECLARE_METHOD(t_CharArraySet, clear, METH_VARARGS),
            DECLARE_METHOD(t_CharArraySet, contains, METH_VARARGS),
            DECLARE_METHOD(t_CharArraySet, copy, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_CharArraySet, iterator, METH_VARARGS),
            DECLARE_METHOD(t_CharArraySet, size, METH_VARARGS),
            DECLARE_METHOD(t_CharArraySet, toString, METH_VARARGS),
            DECLARE_METHOD(t_CharArraySet, unmodifiableSet, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharArraySet, t_CharArraySet, ::java::util::AbstractSet, CharArraySet, t_CharArraySet_init_, ((PyObject *(*)(t_CharArraySet *)) get_generic_iterator< t_CharArraySet >), 0, t_CharArraySet__fields_, 0, 0);
          PyObject *t_CharArraySet::wrap_Object(const CharArraySet& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharArraySet::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharArraySet *self = (t_CharArraySet *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_CharArraySet::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharArraySet::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharArraySet *self = (t_CharArraySet *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_CharArraySet::install(PyObject *module)
          {
            installType(&PY_TYPE(CharArraySet), module, "CharArraySet", 0);
          }

          void t_CharArraySet::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharArraySet).tp_dict, "class_", make_descriptor(CharArraySet::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharArraySet).tp_dict, "wrapfn_", make_descriptor(t_CharArraySet::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharArraySet).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CharArraySet::initializeClass);
            PyDict_SetItemString(PY_TYPE(CharArraySet).tp_dict, "EMPTY_SET", make_descriptor(t_CharArraySet::wrap_Object(*CharArraySet::EMPTY_SET)));
          }

          static PyObject *t_CharArraySet_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharArraySet::initializeClass, 1)))
              return NULL;
            return t_CharArraySet::wrap_Object(CharArraySet(((t_CharArraySet *) arg)->object.this$));
          }
          static PyObject *t_CharArraySet_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharArraySet::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharArraySet_of_(t_CharArraySet *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_CharArraySet_init_(t_CharArraySet *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::util::Collection a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean a1;
                CharArraySet object((jobject) NULL);

                if (!parseArgs(args, "KZ", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1))
                {
                  INT_CALL(object = CharArraySet(a0, a1));
                  self->object = object;
                  self->parameters[0] = &::java::lang::PY_TYPE(Object);
                  break;
                }
              }
              {
                jint a0;
                jboolean a1;
                CharArraySet object((jobject) NULL);

                if (!parseArgs(args, "IZ", &a0, &a1))
                {
                  INT_CALL(object = CharArraySet(a0, a1));
                  self->object = object;
                  self->parameters[0] = &::java::lang::PY_TYPE(Object);
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::util::Collection a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                CharArraySet object((jobject) NULL);

                if (!parseArgs(args, "kKZ", ::org::apache::lucene::util::Version::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_, &a2))
                {
                  INT_CALL(object = CharArraySet(a0, a1, a2));
                  self->object = object;
                  self->parameters[0] = &::java::lang::PY_TYPE(Object);
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                jint a1;
                jboolean a2;
                CharArraySet object((jobject) NULL);

                if (!parseArgs(args, "kIZ", ::org::apache::lucene::util::Version::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = CharArraySet(a0, a1, a2));
                  self->object = object;
                  self->parameters[0] = &::java::lang::PY_TYPE(Object);
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CharArraySet_add(t_CharArraySet *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.add(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                JArray< jchar > a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "[C", &a0))
                {
                  OBJ_CALL(result = self->object.add(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.add(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                ::java::lang::Object a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "o", &a0))
                {
                  OBJ_CALL(result = self->object.add(a0));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            return callSuper(&PY_TYPE(CharArraySet), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_CharArraySet_clear(t_CharArraySet *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharArraySet), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_CharArraySet_contains(t_CharArraySet *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::Object a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "o", &a0))
                {
                  OBJ_CALL(result = self->object.contains(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.contains(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jboolean result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.contains(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            return callSuper(&PY_TYPE(CharArraySet), (PyObject *) self, "contains", args, 2);
          }

          static PyObject *t_CharArraySet_copy(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::util::Set a0((jobject) NULL);
                PyTypeObject **p0;
                CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharArraySet::copy(a0));
                  return t_CharArraySet::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::util::Set a1((jobject) NULL);
                PyTypeObject **p1;
                CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharArraySet::copy(a0, a1));
                  return t_CharArraySet::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "copy", args);
            return NULL;
          }

          static PyObject *t_CharArraySet_iterator(t_CharArraySet *self, PyObject *args)
          {
            ::java::util::Iterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.iterator());
              return ::java::util::t_Iterator::wrap_Object(result, &::java::lang::PY_TYPE(Object));
            }

            return callSuper(&PY_TYPE(CharArraySet), (PyObject *) self, "iterator", args, 2);
          }

          static PyObject *t_CharArraySet_size(t_CharArraySet *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(CharArraySet), (PyObject *) self, "size", args, 2);
          }

          static PyObject *t_CharArraySet_toString(t_CharArraySet *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(CharArraySet), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_CharArraySet_unmodifiableSet(PyTypeObject *type, PyObject *arg)
          {
            CharArraySet a0((jobject) NULL);
            PyTypeObject **p0;
            CharArraySet result((jobject) NULL);

            if (!parseArg(arg, "K", CharArraySet::initializeClass, &a0, &p0, t_CharArraySet::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharArraySet::unmodifiableSet(a0));
              return t_CharArraySet::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "unmodifiableSet", arg);
            return NULL;
          }
          static PyObject *t_CharArraySet_get__parameters_(t_CharArraySet *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/NameIntCacheLRU.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *NameIntCacheLRU::class$ = NULL;
            jmethodID *NameIntCacheLRU::mids$ = NULL;
            bool NameIntCacheLRU::live$ = false;

            jclass NameIntCacheLRU::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/NameIntCacheLRU");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getMaxSize_54c6a179] = env->getMethodID(cls, "getMaxSize", "()I");
                mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jint NameIntCacheLRU::getMaxSize() const
            {
              return env->callIntMethod(this$, mids$[mid_getMaxSize_54c6a179]);
            }

            jint NameIntCacheLRU::getSize() const
            {
              return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_NameIntCacheLRU_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NameIntCacheLRU_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NameIntCacheLRU_getMaxSize(t_NameIntCacheLRU *self);
            static PyObject *t_NameIntCacheLRU_getSize(t_NameIntCacheLRU *self);
            static PyObject *t_NameIntCacheLRU_get__maxSize(t_NameIntCacheLRU *self, void *data);
            static PyObject *t_NameIntCacheLRU_get__size(t_NameIntCacheLRU *self, void *data);
            static PyGetSetDef t_NameIntCacheLRU__fields_[] = {
              DECLARE_GET_FIELD(t_NameIntCacheLRU, maxSize),
              DECLARE_GET_FIELD(t_NameIntCacheLRU, size),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_NameIntCacheLRU__methods_[] = {
              DECLARE_METHOD(t_NameIntCacheLRU, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NameIntCacheLRU, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NameIntCacheLRU, getMaxSize, METH_NOARGS),
              DECLARE_METHOD(t_NameIntCacheLRU, getSize, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NameIntCacheLRU, t_NameIntCacheLRU, ::java::lang::Object, NameIntCacheLRU, abstract_init, 0, 0, t_NameIntCacheLRU__fields_, 0, 0);

            void t_NameIntCacheLRU::install(PyObject *module)
            {
              installType(&PY_TYPE(NameIntCacheLRU), module, "NameIntCacheLRU", 0);
            }

            void t_NameIntCacheLRU::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NameIntCacheLRU).tp_dict, "class_", make_descriptor(NameIntCacheLRU::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NameIntCacheLRU).tp_dict, "wrapfn_", make_descriptor(t_NameIntCacheLRU::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NameIntCacheLRU).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NameIntCacheLRU_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NameIntCacheLRU::initializeClass, 1)))
                return NULL;
              return t_NameIntCacheLRU::wrap_Object(NameIntCacheLRU(((t_NameIntCacheLRU *) arg)->object.this$));
            }
            static PyObject *t_NameIntCacheLRU_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NameIntCacheLRU::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_NameIntCacheLRU_getMaxSize(t_NameIntCacheLRU *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getMaxSize());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_NameIntCacheLRU_getSize(t_NameIntCacheLRU *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getSize());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_NameIntCacheLRU_get__maxSize(t_NameIntCacheLRU *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getMaxSize());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_NameIntCacheLRU_get__size(t_NameIntCacheLRU *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getSize());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/DirectWriter.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *DirectWriter::class$ = NULL;
          jmethodID *DirectWriter::mids$ = NULL;
          bool DirectWriter::live$ = false;

          jclass DirectWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/DirectWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_0ee6df2f] = env->getMethodID(cls, "add", "(J)V");
              mids$[mid_bitsRequired_0ee6df30] = env->getStaticMethodID(cls, "bitsRequired", "(J)I");
              mids$[mid_finish_54c6a166] = env->getMethodID(cls, "finish", "()V");
              mids$[mid_getInstance_3b8d11ee] = env->getStaticMethodID(cls, "getInstance", "(Lorg/apache/lucene/store/IndexOutput;JI)Lorg/apache/lucene/util/packed/DirectWriter;");
              mids$[mid_unsignedBitsRequired_0ee6df30] = env->getStaticMethodID(cls, "unsignedBitsRequired", "(J)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void DirectWriter::add(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_add_0ee6df2f], a0);
          }

          jint DirectWriter::bitsRequired(jlong a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_bitsRequired_0ee6df30], a0);
          }

          void DirectWriter::finish() const
          {
            env->callVoidMethod(this$, mids$[mid_finish_54c6a166]);
          }

          DirectWriter DirectWriter::getInstance(const ::org::apache::lucene::store::IndexOutput & a0, jlong a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return DirectWriter(env->callStaticObjectMethod(cls, mids$[mid_getInstance_3b8d11ee], a0.this$, a1, a2));
          }

          jint DirectWriter::unsignedBitsRequired(jlong a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_unsignedBitsRequired_0ee6df30], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_DirectWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DirectWriter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DirectWriter_add(t_DirectWriter *self, PyObject *arg);
          static PyObject *t_DirectWriter_bitsRequired(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DirectWriter_finish(t_DirectWriter *self);
          static PyObject *t_DirectWriter_getInstance(PyTypeObject *type, PyObject *args);
          static PyObject *t_DirectWriter_unsignedBitsRequired(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_DirectWriter__methods_[] = {
            DECLARE_METHOD(t_DirectWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectWriter, add, METH_O),
            DECLARE_METHOD(t_DirectWriter, bitsRequired, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectWriter, finish, METH_NOARGS),
            DECLARE_METHOD(t_DirectWriter, getInstance, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_DirectWriter, unsignedBitsRequired, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DirectWriter, t_DirectWriter, ::java::lang::Object, DirectWriter, abstract_init, 0, 0, 0, 0, 0);

          void t_DirectWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(DirectWriter), module, "DirectWriter", 0);
          }

          void t_DirectWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DirectWriter).tp_dict, "class_", make_descriptor(DirectWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DirectWriter).tp_dict, "wrapfn_", make_descriptor(t_DirectWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DirectWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DirectWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DirectWriter::initializeClass, 1)))
              return NULL;
            return t_DirectWriter::wrap_Object(DirectWriter(((t_DirectWriter *) arg)->object.this$));
          }
          static PyObject *t_DirectWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DirectWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_DirectWriter_add(t_DirectWriter *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.add(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", arg);
            return NULL;
          }

          static PyObject *t_DirectWriter_bitsRequired(PyTypeObject *type, PyObject *arg)
          {
            jlong a0;
            jint result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::DirectWriter::bitsRequired(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "bitsRequired", arg);
            return NULL;
          }

          static PyObject *t_DirectWriter_finish(t_DirectWriter *self)
          {
            OBJ_CALL(self->object.finish());
            Py_RETURN_NONE;
          }

          static PyObject *t_DirectWriter_getInstance(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::IndexOutput a0((jobject) NULL);
            jlong a1;
            jint a2;
            DirectWriter result((jobject) NULL);

            if (!parseArgs(args, "kJI", ::org::apache::lucene::store::IndexOutput::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::DirectWriter::getInstance(a0, a1, a2));
              return t_DirectWriter::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getInstance", args);
            return NULL;
          }

          static PyObject *t_DirectWriter_unsignedBitsRequired(PyTypeObject *type, PyObject *arg)
          {
            jlong a0;
            jint result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::DirectWriter::unsignedBitsRequired(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "unsignedBitsRequired", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator::class$ = NULL;
        jmethodID *FieldComparator::mids$ = NULL;
        bool FieldComparator::live$ = false;

        jclass FieldComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_compareValues_466982ed] = env->getMethodID(cls, "compareValues", "(Ljava/lang/Object;Ljava/lang/Object;)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
            mids$[mid_setTopValue_290588ee] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Object;)V");
            mids$[mid_value_29be6a55] = env->getMethodID(cls, "value", "(I)Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparator::FieldComparator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jint FieldComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        jint FieldComparator::compareValues(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compareValues_466982ed], a0.this$, a1.this$);
        }

        void FieldComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        FieldComparator FieldComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }

        void FieldComparator::setTopValue(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_290588ee], a0.this$);
        }

        ::java::lang::Object FieldComparator::value(jint a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_value_29be6a55], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/FieldComparator$TermValComparator.h"
#include "org/apache/lucene/search/FieldComparator$TermOrdValComparator.h"
#include "org/apache/lucene/search/FieldComparator$DocComparator.h"
#include "org/apache/lucene/search/FieldComparator$RelevanceComparator.h"
#include "org/apache/lucene/search/FieldComparator$LongComparator.h"
#include "org/apache/lucene/search/FieldComparator$IntComparator.h"
#include "org/apache/lucene/search/FieldComparator$ShortComparator.h"
#include "org/apache/lucene/search/FieldComparator$FloatComparator.h"
#include "org/apache/lucene/search/FieldComparator$DoubleComparator.h"
#include "org/apache/lucene/search/FieldComparator$ByteComparator.h"
#include "org/apache/lucene/search/FieldComparator$NumericComparator.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator_of_(t_FieldComparator *self, PyObject *args);
        static int t_FieldComparator_init_(t_FieldComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparator_compare(t_FieldComparator *self, PyObject *args);
        static PyObject *t_FieldComparator_compareBottom(t_FieldComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator_compareTop(t_FieldComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator_compareValues(t_FieldComparator *self, PyObject *args);
        static PyObject *t_FieldComparator_copy(t_FieldComparator *self, PyObject *args);
        static PyObject *t_FieldComparator_setBottom(t_FieldComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator_setNextReader(t_FieldComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator_setScorer(t_FieldComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator_setTopValue(t_FieldComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator_value(t_FieldComparator *self, PyObject *arg);
        static int t_FieldComparator_set__bottom(t_FieldComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator_set__nextReader(t_FieldComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator_set__scorer(t_FieldComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator_set__topValue(t_FieldComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator_get__parameters_(t_FieldComparator *self, void *data);
        static PyGetSetDef t_FieldComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator, scorer),
          DECLARE_SET_FIELD(t_FieldComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator, compareBottom, METH_O),
          DECLARE_METHOD(t_FieldComparator, compareTop, METH_O),
          DECLARE_METHOD(t_FieldComparator, compareValues, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator, setBottom, METH_O),
          DECLARE_METHOD(t_FieldComparator, setNextReader, METH_O),
          DECLARE_METHOD(t_FieldComparator, setScorer, METH_O),
          DECLARE_METHOD(t_FieldComparator, setTopValue, METH_O),
          DECLARE_METHOD(t_FieldComparator, value, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator, t_FieldComparator, ::java::lang::Object, FieldComparator, t_FieldComparator_init_, 0, 0, t_FieldComparator__fields_, 0, 0);
        PyObject *t_FieldComparator::wrap_Object(const FieldComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator *self = (t_FieldComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator *self = (t_FieldComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator), module, "FieldComparator", 0);
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "TermValComparator", make_descriptor(&PY_TYPE(FieldComparator$TermValComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "TermOrdValComparator", make_descriptor(&PY_TYPE(FieldComparator$TermOrdValComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "DocComparator", make_descriptor(&PY_TYPE(FieldComparator$DocComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "RelevanceComparator", make_descriptor(&PY_TYPE(FieldComparator$RelevanceComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "LongComparator", make_descriptor(&PY_TYPE(FieldComparator$LongComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "IntComparator", make_descriptor(&PY_TYPE(FieldComparator$IntComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "ShortComparator", make_descriptor(&PY_TYPE(FieldComparator$ShortComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "FloatComparator", make_descriptor(&PY_TYPE(FieldComparator$FloatComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "DoubleComparator", make_descriptor(&PY_TYPE(FieldComparator$DoubleComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "ByteComparator", make_descriptor(&PY_TYPE(FieldComparator$ByteComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "NumericComparator", make_descriptor(&PY_TYPE(FieldComparator$NumericComparator)));
        }

        void t_FieldComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "class_", make_descriptor(FieldComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator::wrap_Object(FieldComparator(((t_FieldComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator_of_(t_FieldComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldComparator_init_(t_FieldComparator *self, PyObject *args, PyObject *kwds)
        {
          FieldComparator object((jobject) NULL);

          INT_CALL(object = FieldComparator());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldComparator_compare(t_FieldComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compare", args);
          return NULL;
        }

        static PyObject *t_FieldComparator_compareBottom(t_FieldComparator *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareBottom", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator_compareTop(t_FieldComparator *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTop", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator_compareValues(t_FieldComparator *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "OO", self->parameters[0], self->parameters[0], &a0, &a1))
          {
            OBJ_CALL(result = self->object.compareValues(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareValues", args);
          return NULL;
        }

        static PyObject *t_FieldComparator_copy(t_FieldComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copy", args);
          return NULL;
        }

        static PyObject *t_FieldComparator_setBottom(t_FieldComparator *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBottom", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator_setNextReader(t_FieldComparator *self, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          FieldComparator result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return t_FieldComparator::wrap_Object(result, self->parameters[0]);
          }

          PyErr_SetArgsError((PyObject *) self, "setNextReader", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator_setScorer(t_FieldComparator *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setScorer", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator_setTopValue(t_FieldComparator *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setTopValue", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator_value(t_FieldComparator *self, PyObject *arg)
        {
          jint a0;
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "value", arg);
          return NULL;
        }
        static PyObject *t_FieldComparator_get__parameters_(t_FieldComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator_set__bottom(t_FieldComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator_set__nextReader(t_FieldComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator_set__scorer(t_FieldComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }

        static int t_FieldComparator_set__topValue(t_FieldComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/QueryValueSource.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Object.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *QueryValueSource::class$ = NULL;
            jmethodID *QueryValueSource::mids$ = NULL;
            bool QueryValueSource::live$ = false;

            jclass QueryValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/QueryValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_05a7d758] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;F)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getDefaultValue_54c6a176] = env->getMethodID(cls, "getDefaultValue", "()F");
                mids$[mid_getQuery_97e3851a] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryValueSource::QueryValueSource(const ::org::apache::lucene::search::Query & a0, jfloat a1) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_05a7d758, a0.this$, a1)) {}

            void QueryValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String QueryValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean QueryValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jfloat QueryValueSource::getDefaultValue() const
            {
              return env->callFloatMethod(this$, mids$[mid_getDefaultValue_54c6a176]);
            }

            ::org::apache::lucene::search::Query QueryValueSource::getQuery() const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_97e3851a]));
            }

            ::org::apache::lucene::queries::function::FunctionValues QueryValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint QueryValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_QueryValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryValueSource_init_(t_QueryValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryValueSource_createWeight(t_QueryValueSource *self, PyObject *args);
            static PyObject *t_QueryValueSource_description(t_QueryValueSource *self, PyObject *args);
            static PyObject *t_QueryValueSource_equals(t_QueryValueSource *self, PyObject *args);
            static PyObject *t_QueryValueSource_getDefaultValue(t_QueryValueSource *self);
            static PyObject *t_QueryValueSource_getQuery(t_QueryValueSource *self);
            static PyObject *t_QueryValueSource_getValues(t_QueryValueSource *self, PyObject *args);
            static PyObject *t_QueryValueSource_hashCode(t_QueryValueSource *self, PyObject *args);
            static PyObject *t_QueryValueSource_get__defaultValue(t_QueryValueSource *self, void *data);
            static PyObject *t_QueryValueSource_get__query(t_QueryValueSource *self, void *data);
            static PyGetSetDef t_QueryValueSource__fields_[] = {
              DECLARE_GET_FIELD(t_QueryValueSource, defaultValue),
              DECLARE_GET_FIELD(t_QueryValueSource, query),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryValueSource__methods_[] = {
              DECLARE_METHOD(t_QueryValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_QueryValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_QueryValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_QueryValueSource, getDefaultValue, METH_NOARGS),
              DECLARE_METHOD(t_QueryValueSource, getQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_QueryValueSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryValueSource, t_QueryValueSource, ::org::apache::lucene::queries::function::ValueSource, QueryValueSource, t_QueryValueSource_init_, 0, 0, t_QueryValueSource__fields_, 0, 0);

            void t_QueryValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryValueSource), module, "QueryValueSource", 0);
            }

            void t_QueryValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryValueSource).tp_dict, "class_", make_descriptor(QueryValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryValueSource).tp_dict, "wrapfn_", make_descriptor(t_QueryValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryValueSource::initializeClass, 1)))
                return NULL;
              return t_QueryValueSource::wrap_Object(QueryValueSource(((t_QueryValueSource *) arg)->object.this$));
            }
            static PyObject *t_QueryValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryValueSource_init_(t_QueryValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              jfloat a1;
              QueryValueSource object((jobject) NULL);

              if (!parseArgs(args, "kF", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
              {
                INT_CALL(object = QueryValueSource(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryValueSource_createWeight(t_QueryValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(QueryValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_QueryValueSource_description(t_QueryValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(QueryValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_QueryValueSource_equals(t_QueryValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(QueryValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_QueryValueSource_getDefaultValue(t_QueryValueSource *self)
            {
              jfloat result;
              OBJ_CALL(result = self->object.getDefaultValue());
              return PyFloat_FromDouble((double) result);
            }

            static PyObject *t_QueryValueSource_getQuery(t_QueryValueSource *self)
            {
              ::org::apache::lucene::search::Query result((jobject) NULL);
              OBJ_CALL(result = self->object.getQuery());
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            static PyObject *t_QueryValueSource_getValues(t_QueryValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(QueryValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_QueryValueSource_hashCode(t_QueryValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(QueryValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_QueryValueSource_get__defaultValue(t_QueryValueSource *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getDefaultValue());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_QueryValueSource_get__query(t_QueryValueSource *self, void *data)
            {
              ::org::apache::lucene::search::Query value((jobject) NULL);
              OBJ_CALL(value = self->object.getQuery());
              return ::org::apache::lucene::search::t_Query::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/CatalanStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *CatalanStemmer::class$ = NULL;
        jmethodID *CatalanStemmer::mids$ = NULL;
        bool CatalanStemmer::live$ = false;

        jclass CatalanStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/CatalanStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CatalanStemmer::CatalanStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean CatalanStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint CatalanStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean CatalanStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_CatalanStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CatalanStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CatalanStemmer_init_(t_CatalanStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CatalanStemmer_equals(t_CatalanStemmer *self, PyObject *args);
        static PyObject *t_CatalanStemmer_hashCode(t_CatalanStemmer *self, PyObject *args);
        static PyObject *t_CatalanStemmer_stem(t_CatalanStemmer *self, PyObject *args);

        static PyMethodDef t_CatalanStemmer__methods_[] = {
          DECLARE_METHOD(t_CatalanStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CatalanStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CatalanStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_CatalanStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_CatalanStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CatalanStemmer, t_CatalanStemmer, ::org::tartarus::snowball::SnowballProgram, CatalanStemmer, t_CatalanStemmer_init_, 0, 0, 0, 0, 0);

        void t_CatalanStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(CatalanStemmer), module, "CatalanStemmer", 0);
        }

        void t_CatalanStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CatalanStemmer).tp_dict, "class_", make_descriptor(CatalanStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CatalanStemmer).tp_dict, "wrapfn_", make_descriptor(t_CatalanStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CatalanStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CatalanStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CatalanStemmer::initializeClass, 1)))
            return NULL;
          return t_CatalanStemmer::wrap_Object(CatalanStemmer(((t_CatalanStemmer *) arg)->object.this$));
        }
        static PyObject *t_CatalanStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CatalanStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CatalanStemmer_init_(t_CatalanStemmer *self, PyObject *args, PyObject *kwds)
        {
          CatalanStemmer object((jobject) NULL);

          INT_CALL(object = CatalanStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_CatalanStemmer_equals(t_CatalanStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CatalanStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_CatalanStemmer_hashCode(t_CatalanStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(CatalanStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_CatalanStemmer_stem(t_CatalanStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CatalanStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseMinimalStemFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseMinimalStemFilterFactory::class$ = NULL;
          jmethodID *PortugueseMinimalStemFilterFactory::mids$ = NULL;
          bool PortugueseMinimalStemFilterFactory::live$ = false;

          jclass PortugueseMinimalStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseMinimalStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseMinimalStemFilterFactory::PortugueseMinimalStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream PortugueseMinimalStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseMinimalStemFilterFactory_init_(t_PortugueseMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseMinimalStemFilterFactory_create(t_PortugueseMinimalStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_PortugueseMinimalStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PortugueseMinimalStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseMinimalStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseMinimalStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseMinimalStemFilterFactory, t_PortugueseMinimalStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, PortugueseMinimalStemFilterFactory, t_PortugueseMinimalStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_PortugueseMinimalStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseMinimalStemFilterFactory), module, "PortugueseMinimalStemFilterFactory", 0);
          }

          void t_PortugueseMinimalStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemFilterFactory).tp_dict, "class_", make_descriptor(PortugueseMinimalStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PortugueseMinimalStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseMinimalStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PortugueseMinimalStemFilterFactory::wrap_Object(PortugueseMinimalStemFilterFactory(((t_PortugueseMinimalStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PortugueseMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseMinimalStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseMinimalStemFilterFactory_init_(t_PortugueseMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PortugueseMinimalStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PortugueseMinimalStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseMinimalStemFilterFactory_create(t_PortugueseMinimalStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PortugueseMinimalStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/collation/CollationKeyAnalyzer.h"
#include "java/text/Collator.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {

        ::java::lang::Class *CollationKeyAnalyzer::class$ = NULL;
        jmethodID *CollationKeyAnalyzer::mids$ = NULL;
        bool CollationKeyAnalyzer::live$ = false;

        jclass CollationKeyAnalyzer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/collation/CollationKeyAnalyzer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c5e10a9c] = env->getMethodID(cls, "<init>", "(Ljava/text/Collator;)V");
            mids$[mid_init$_09eedbb5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/text/Collator;)V");
            mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CollationKeyAnalyzer::CollationKeyAnalyzer(const ::java::text::Collator & a0) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_c5e10a9c, a0.this$)) {}

        CollationKeyAnalyzer::CollationKeyAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::text::Collator & a1) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_09eedbb5, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {
        static PyObject *t_CollationKeyAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollationKeyAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CollationKeyAnalyzer_init_(t_CollationKeyAnalyzer *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_CollationKeyAnalyzer__methods_[] = {
          DECLARE_METHOD(t_CollationKeyAnalyzer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollationKeyAnalyzer, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CollationKeyAnalyzer, t_CollationKeyAnalyzer, ::org::apache::lucene::analysis::Analyzer, CollationKeyAnalyzer, t_CollationKeyAnalyzer_init_, 0, 0, 0, 0, 0);

        void t_CollationKeyAnalyzer::install(PyObject *module)
        {
          installType(&PY_TYPE(CollationKeyAnalyzer), module, "CollationKeyAnalyzer", 0);
        }

        void t_CollationKeyAnalyzer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CollationKeyAnalyzer).tp_dict, "class_", make_descriptor(CollationKeyAnalyzer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CollationKeyAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_CollationKeyAnalyzer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CollationKeyAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollationKeyAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollationKeyAnalyzer::initializeClass, 1)))
            return NULL;
          return t_CollationKeyAnalyzer::wrap_Object(CollationKeyAnalyzer(((t_CollationKeyAnalyzer *) arg)->object.this$));
        }
        static PyObject *t_CollationKeyAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollationKeyAnalyzer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CollationKeyAnalyzer_init_(t_CollationKeyAnalyzer *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::text::Collator a0((jobject) NULL);
              CollationKeyAnalyzer object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::text::Collator::initializeClass, &a0))
              {
                INT_CALL(object = CollationKeyAnalyzer(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::util::Version a0((jobject) NULL);
              ::java::text::Collator a1((jobject) NULL);
              CollationKeyAnalyzer object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::Version::initializeClass, ::java::text::Collator::initializeClass, &a0, &a1))
              {
                INT_CALL(object = CollationKeyAnalyzer(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/el/GreekStemFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {

          ::java::lang::Class *GreekStemFilterFactory::class$ = NULL;
          jmethodID *GreekStemFilterFactory::mids$ = NULL;
          bool GreekStemFilterFactory::live$ = false;

          jclass GreekStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/el/GreekStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GreekStemFilterFactory::GreekStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream GreekStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {
          static PyObject *t_GreekStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GreekStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GreekStemFilterFactory_init_(t_GreekStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GreekStemFilterFactory_create(t_GreekStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_GreekStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GreekStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GreekStemFilterFactory, t_GreekStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, GreekStemFilterFactory, t_GreekStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_GreekStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GreekStemFilterFactory), module, "GreekStemFilterFactory", 0);
          }

          void t_GreekStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GreekStemFilterFactory).tp_dict, "class_", make_descriptor(GreekStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GreekStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_GreekStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GreekStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GreekStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GreekStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GreekStemFilterFactory::wrap_Object(GreekStemFilterFactory(((t_GreekStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GreekStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GreekStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GreekStemFilterFactory_init_(t_GreekStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GreekStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GreekStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GreekStemFilterFactory_create(t_GreekStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(GreekStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/SortedDocValuesField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *SortedDocValuesField::class$ = NULL;
        jmethodID *SortedDocValuesField::mids$ = NULL;
        bool SortedDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *SortedDocValuesField::TYPE = NULL;

        jclass SortedDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/SortedDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_43cce44e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedDocValuesField::SortedDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_43cce44e, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_SortedDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortedDocValuesField_init_(t_SortedDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_SortedDocValuesField__methods_[] = {
          DECLARE_METHOD(t_SortedDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedDocValuesField, t_SortedDocValuesField, ::org::apache::lucene::document::Field, SortedDocValuesField, t_SortedDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_SortedDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedDocValuesField), module, "SortedDocValuesField", 0);
        }

        void t_SortedDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedDocValuesField).tp_dict, "class_", make_descriptor(SortedDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_SortedDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SortedDocValuesField::initializeClass);
          PyDict_SetItemString(PY_TYPE(SortedDocValuesField).tp_dict, "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*SortedDocValuesField::TYPE)));
        }

        static PyObject *t_SortedDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedDocValuesField::initializeClass, 1)))
            return NULL;
          return t_SortedDocValuesField::wrap_Object(SortedDocValuesField(((t_SortedDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_SortedDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortedDocValuesField_init_(t_SortedDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          SortedDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            INT_CALL(object = SortedDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/mlt/MoreLikeThisQuery.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace mlt {

          ::java::lang::Class *MoreLikeThisQuery::class$ = NULL;
          jmethodID *MoreLikeThisQuery::mids$ = NULL;
          bool MoreLikeThisQuery::live$ = false;

          jclass MoreLikeThisQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/mlt/MoreLikeThisQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e36f88de] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getAnalyzer_347f60a9] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
              mids$[mid_getLikeText_14c7b5c5] = env->getMethodID(cls, "getLikeText", "()Ljava/lang/String;");
              mids$[mid_getMaxQueryTerms_54c6a179] = env->getMethodID(cls, "getMaxQueryTerms", "()I");
              mids$[mid_getMinDocFreq_54c6a179] = env->getMethodID(cls, "getMinDocFreq", "()I");
              mids$[mid_getMinTermFrequency_54c6a179] = env->getMethodID(cls, "getMinTermFrequency", "()I");
              mids$[mid_getMoreLikeFields_2e6d5245] = env->getMethodID(cls, "getMoreLikeFields", "()[Ljava/lang/String;");
              mids$[mid_getPercentTermsToMatch_54c6a176] = env->getMethodID(cls, "getPercentTermsToMatch", "()F");
              mids$[mid_getStopWords_03e99967] = env->getMethodID(cls, "getStopWords", "()Ljava/util/Set;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_setAnalyzer_31619410] = env->getMethodID(cls, "setAnalyzer", "(Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_setLikeText_5fdc3f48] = env->getMethodID(cls, "setLikeText", "(Ljava/lang/String;)V");
              mids$[mid_setMaxQueryTerms_39c7bd3c] = env->getMethodID(cls, "setMaxQueryTerms", "(I)V");
              mids$[mid_setMinDocFreq_39c7bd3c] = env->getMethodID(cls, "setMinDocFreq", "(I)V");
              mids$[mid_setMinTermFrequency_39c7bd3c] = env->getMethodID(cls, "setMinTermFrequency", "(I)V");
              mids$[mid_setMoreLikeFields_4dd4540c] = env->getMethodID(cls, "setMoreLikeFields", "([Ljava/lang/String;)V");
              mids$[mid_setPercentTermsToMatch_06298cab] = env->getMethodID(cls, "setPercentTermsToMatch", "(F)V");
              mids$[mid_setStopWords_fb4f2b26] = env->getMethodID(cls, "setStopWords", "(Ljava/util/Set;)V");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MoreLikeThisQuery::MoreLikeThisQuery(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::analysis::Analyzer & a2, const ::java::lang::String & a3) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_e36f88de, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          jboolean MoreLikeThisQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::analysis::Analyzer MoreLikeThisQuery::getAnalyzer() const
          {
            return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_347f60a9]));
          }

          ::java::lang::String MoreLikeThisQuery::getLikeText() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLikeText_14c7b5c5]));
          }

          jint MoreLikeThisQuery::getMaxQueryTerms() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxQueryTerms_54c6a179]);
          }

          jint MoreLikeThisQuery::getMinDocFreq() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinDocFreq_54c6a179]);
          }

          jint MoreLikeThisQuery::getMinTermFrequency() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinTermFrequency_54c6a179]);
          }

          JArray< ::java::lang::String > MoreLikeThisQuery::getMoreLikeFields() const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getMoreLikeFields_2e6d5245]));
          }

          jfloat MoreLikeThisQuery::getPercentTermsToMatch() const
          {
            return env->callFloatMethod(this$, mids$[mid_getPercentTermsToMatch_54c6a176]);
          }

          ::java::util::Set MoreLikeThisQuery::getStopWords() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getStopWords_03e99967]));
          }

          jint MoreLikeThisQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query MoreLikeThisQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          void MoreLikeThisQuery::setAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAnalyzer_31619410], a0.this$);
          }

          void MoreLikeThisQuery::setLikeText(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setLikeText_5fdc3f48], a0.this$);
          }

          void MoreLikeThisQuery::setMaxQueryTerms(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxQueryTerms_39c7bd3c], a0);
          }

          void MoreLikeThisQuery::setMinDocFreq(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinDocFreq_39c7bd3c], a0);
          }

          void MoreLikeThisQuery::setMinTermFrequency(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinTermFrequency_39c7bd3c], a0);
          }

          void MoreLikeThisQuery::setMoreLikeFields(const JArray< ::java::lang::String > & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMoreLikeFields_4dd4540c], a0.this$);
          }

          void MoreLikeThisQuery::setPercentTermsToMatch(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPercentTermsToMatch_06298cab], a0);
          }

          void MoreLikeThisQuery::setStopWords(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setStopWords_fb4f2b26], a0.this$);
          }

          ::java::lang::String MoreLikeThisQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace mlt {
          static PyObject *t_MoreLikeThisQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MoreLikeThisQuery_init_(t_MoreLikeThisQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MoreLikeThisQuery_equals(t_MoreLikeThisQuery *self, PyObject *args);
          static PyObject *t_MoreLikeThisQuery_getAnalyzer(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getLikeText(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getMaxQueryTerms(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getMinDocFreq(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getMinTermFrequency(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getMoreLikeFields(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getPercentTermsToMatch(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getStopWords(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_hashCode(t_MoreLikeThisQuery *self, PyObject *args);
          static PyObject *t_MoreLikeThisQuery_rewrite(t_MoreLikeThisQuery *self, PyObject *args);
          static PyObject *t_MoreLikeThisQuery_setAnalyzer(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setLikeText(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setMaxQueryTerms(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setMinDocFreq(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setMinTermFrequency(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setMoreLikeFields(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setPercentTermsToMatch(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setStopWords(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_toString(t_MoreLikeThisQuery *self, PyObject *args);
          static PyObject *t_MoreLikeThisQuery_get__analyzer(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__analyzer(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__likeText(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__likeText(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__maxQueryTerms(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__maxQueryTerms(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__minDocFreq(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__minDocFreq(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__minTermFrequency(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__minTermFrequency(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__moreLikeFields(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__moreLikeFields(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__percentTermsToMatch(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__percentTermsToMatch(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__stopWords(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__stopWords(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyGetSetDef t_MoreLikeThisQuery__fields_[] = {
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, analyzer),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, likeText),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, maxQueryTerms),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, minDocFreq),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, minTermFrequency),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, moreLikeFields),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, percentTermsToMatch),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, stopWords),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MoreLikeThisQuery__methods_[] = {
            DECLARE_METHOD(t_MoreLikeThisQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MoreLikeThisQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MoreLikeThisQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getAnalyzer, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getLikeText, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getMaxQueryTerms, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getMinDocFreq, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getMinTermFrequency, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getMoreLikeFields, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getPercentTermsToMatch, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getStopWords, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, setAnalyzer, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setLikeText, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setMaxQueryTerms, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setMinDocFreq, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setMinTermFrequency, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setMoreLikeFields, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setPercentTermsToMatch, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setStopWords, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MoreLikeThisQuery, t_MoreLikeThisQuery, ::org::apache::lucene::search::Query, MoreLikeThisQuery, t_MoreLikeThisQuery_init_, 0, 0, t_MoreLikeThisQuery__fields_, 0, 0);

          void t_MoreLikeThisQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(MoreLikeThisQuery), module, "MoreLikeThisQuery", 0);
          }

          void t_MoreLikeThisQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MoreLikeThisQuery).tp_dict, "class_", make_descriptor(MoreLikeThisQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MoreLikeThisQuery).tp_dict, "wrapfn_", make_descriptor(t_MoreLikeThisQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MoreLikeThisQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MoreLikeThisQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MoreLikeThisQuery::initializeClass, 1)))
              return NULL;
            return t_MoreLikeThisQuery::wrap_Object(MoreLikeThisQuery(((t_MoreLikeThisQuery *) arg)->object.this$));
          }
          static PyObject *t_MoreLikeThisQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MoreLikeThisQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MoreLikeThisQuery_init_(t_MoreLikeThisQuery *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            JArray< ::java::lang::String > a1((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
            ::java::lang::String a3((jobject) NULL);
            MoreLikeThisQuery object((jobject) NULL);

            if (!parseArgs(args, "s[sks", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = MoreLikeThisQuery(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MoreLikeThisQuery_equals(t_MoreLikeThisQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MoreLikeThisQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_MoreLikeThisQuery_getAnalyzer(t_MoreLikeThisQuery *self)
          {
            ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
            OBJ_CALL(result = self->object.getAnalyzer());
            return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
          }

          static PyObject *t_MoreLikeThisQuery_getLikeText(t_MoreLikeThisQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getLikeText());
            return j2p(result);
          }

          static PyObject *t_MoreLikeThisQuery_getMaxQueryTerms(t_MoreLikeThisQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxQueryTerms());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThisQuery_getMinDocFreq(t_MoreLikeThisQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinDocFreq());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThisQuery_getMinTermFrequency(t_MoreLikeThisQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinTermFrequency());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThisQuery_getMoreLikeFields(t_MoreLikeThisQuery *self)
          {
            JArray< ::java::lang::String > result((jobject) NULL);
            OBJ_CALL(result = self->object.getMoreLikeFields());
            return JArray<jstring>(result.this$).wrap();
          }

          static PyObject *t_MoreLikeThisQuery_getPercentTermsToMatch(t_MoreLikeThisQuery *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getPercentTermsToMatch());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_MoreLikeThisQuery_getStopWords(t_MoreLikeThisQuery *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.getStopWords());
            return ::java::util::t_Set::wrap_Object(result);
          }

          static PyObject *t_MoreLikeThisQuery_hashCode(t_MoreLikeThisQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MoreLikeThisQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MoreLikeThisQuery_rewrite(t_MoreLikeThisQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MoreLikeThisQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_MoreLikeThisQuery_setAnalyzer(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setAnalyzer(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAnalyzer", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setLikeText(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setLikeText(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setLikeText", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setMaxQueryTerms(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxQueryTerms(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxQueryTerms", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setMinDocFreq(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinDocFreq(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinDocFreq", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setMinTermFrequency(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinTermFrequency(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinTermFrequency", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setMoreLikeFields(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            JArray< ::java::lang::String > a0((jobject) NULL);

            if (!parseArg(arg, "[s", &a0))
            {
              OBJ_CALL(self->object.setMoreLikeFields(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMoreLikeFields", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setPercentTermsToMatch(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setPercentTermsToMatch(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPercentTermsToMatch", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setStopWords(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.setStopWords(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStopWords", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_toString(t_MoreLikeThisQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(MoreLikeThisQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_MoreLikeThisQuery_get__analyzer(t_MoreLikeThisQuery *self, void *data)
          {
            ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
            OBJ_CALL(value = self->object.getAnalyzer());
            return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
          }
          static int t_MoreLikeThisQuery_set__analyzer(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &value))
              {
                INT_CALL(self->object.setAnalyzer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "analyzer", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__likeText(t_MoreLikeThisQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getLikeText());
            return j2p(value);
          }
          static int t_MoreLikeThisQuery_set__likeText(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setLikeText(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "likeText", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__maxQueryTerms(t_MoreLikeThisQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxQueryTerms());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThisQuery_set__maxQueryTerms(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxQueryTerms(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxQueryTerms", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__minDocFreq(t_MoreLikeThisQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinDocFreq());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThisQuery_set__minDocFreq(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinDocFreq(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minDocFreq", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__minTermFrequency(t_MoreLikeThisQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinTermFrequency());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThisQuery_set__minTermFrequency(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinTermFrequency(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minTermFrequency", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__moreLikeFields(t_MoreLikeThisQuery *self, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            OBJ_CALL(value = self->object.getMoreLikeFields());
            return JArray<jstring>(value.this$).wrap();
          }
          static int t_MoreLikeThisQuery_set__moreLikeFields(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              JArray< ::java::lang::String > value((jobject) NULL);
              if (!parseArg(arg, "[s", &value))
              {
                INT_CALL(self->object.setMoreLikeFields(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "moreLikeFields", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__percentTermsToMatch(t_MoreLikeThisQuery *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getPercentTermsToMatch());
            return PyFloat_FromDouble((double) value);
          }
          static int t_MoreLikeThisQuery_set__percentTermsToMatch(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setPercentTermsToMatch(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "percentTermsToMatch", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__stopWords(t_MoreLikeThisQuery *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object.getStopWords());
            return ::java::util::t_Set::wrap_Object(value);
          }
          static int t_MoreLikeThisQuery_set__stopWords(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Set value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Set::initializeClass, &value))
              {
                INT_CALL(self->object.setStopWords(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "stopWords", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKWidthFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKWidthFilterFactory::class$ = NULL;
          jmethodID *CJKWidthFilterFactory::mids$ = NULL;
          bool CJKWidthFilterFactory::live$ = false;

          jclass CJKWidthFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKWidthFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKWidthFilterFactory::CJKWidthFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream CJKWidthFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory CJKWidthFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKWidthFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKWidthFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKWidthFilterFactory_init_(t_CJKWidthFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKWidthFilterFactory_create(t_CJKWidthFilterFactory *self, PyObject *args);
          static PyObject *t_CJKWidthFilterFactory_getMultiTermComponent(t_CJKWidthFilterFactory *self);
          static PyObject *t_CJKWidthFilterFactory_get__multiTermComponent(t_CJKWidthFilterFactory *self, void *data);
          static PyGetSetDef t_CJKWidthFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_CJKWidthFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CJKWidthFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CJKWidthFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKWidthFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKWidthFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_CJKWidthFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CJKWidthFilterFactory, t_CJKWidthFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, CJKWidthFilterFactory, t_CJKWidthFilterFactory_init_, 0, 0, t_CJKWidthFilterFactory__fields_, 0, 0);

          void t_CJKWidthFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKWidthFilterFactory), module, "CJKWidthFilterFactory", 0);
          }

          void t_CJKWidthFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CJKWidthFilterFactory).tp_dict, "class_", make_descriptor(CJKWidthFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CJKWidthFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CJKWidthFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CJKWidthFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CJKWidthFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKWidthFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CJKWidthFilterFactory::wrap_Object(CJKWidthFilterFactory(((t_CJKWidthFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CJKWidthFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKWidthFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKWidthFilterFactory_init_(t_CJKWidthFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CJKWidthFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CJKWidthFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKWidthFilterFactory_create(t_CJKWidthFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CJKWidthFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_CJKWidthFilterFactory_getMultiTermComponent(t_CJKWidthFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_CJKWidthFilterFactory_get__multiTermComponent(t_CJKWidthFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/MonotonicBlockPackedWriter.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *MonotonicBlockPackedWriter::class$ = NULL;
          jmethodID *MonotonicBlockPackedWriter::mids$ = NULL;
          bool MonotonicBlockPackedWriter::live$ = false;

          jclass MonotonicBlockPackedWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/MonotonicBlockPackedWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f4663c33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataOutput;I)V");
              mids$[mid_add_0ee6df2f] = env->getMethodID(cls, "add", "(J)V");
              mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MonotonicBlockPackedWriter::MonotonicBlockPackedWriter(const ::org::apache::lucene::store::DataOutput & a0, jint a1) : ::org::apache::lucene::util::packed::AbstractBlockPackedWriter(env->newObject(initializeClass, &mids$, mid_init$_f4663c33, a0.this$, a1)) {}

          void MonotonicBlockPackedWriter::add(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_add_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_MonotonicBlockPackedWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MonotonicBlockPackedWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MonotonicBlockPackedWriter_init_(t_MonotonicBlockPackedWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MonotonicBlockPackedWriter_add(t_MonotonicBlockPackedWriter *self, PyObject *args);

          static PyMethodDef t_MonotonicBlockPackedWriter__methods_[] = {
            DECLARE_METHOD(t_MonotonicBlockPackedWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MonotonicBlockPackedWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MonotonicBlockPackedWriter, add, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MonotonicBlockPackedWriter, t_MonotonicBlockPackedWriter, ::org::apache::lucene::util::packed::AbstractBlockPackedWriter, MonotonicBlockPackedWriter, t_MonotonicBlockPackedWriter_init_, 0, 0, 0, 0, 0);

          void t_MonotonicBlockPackedWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(MonotonicBlockPackedWriter), module, "MonotonicBlockPackedWriter", 0);
          }

          void t_MonotonicBlockPackedWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MonotonicBlockPackedWriter).tp_dict, "class_", make_descriptor(MonotonicBlockPackedWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MonotonicBlockPackedWriter).tp_dict, "wrapfn_", make_descriptor(t_MonotonicBlockPackedWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MonotonicBlockPackedWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MonotonicBlockPackedWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MonotonicBlockPackedWriter::initializeClass, 1)))
              return NULL;
            return t_MonotonicBlockPackedWriter::wrap_Object(MonotonicBlockPackedWriter(((t_MonotonicBlockPackedWriter *) arg)->object.this$));
          }
          static PyObject *t_MonotonicBlockPackedWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MonotonicBlockPackedWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MonotonicBlockPackedWriter_init_(t_MonotonicBlockPackedWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            jint a1;
            MonotonicBlockPackedWriter object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              INT_CALL(object = MonotonicBlockPackedWriter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MonotonicBlockPackedWriter_add(t_MonotonicBlockPackedWriter *self, PyObject *args)
          {
            jlong a0;

            if (!parseArgs(args, "J", &a0))
            {
              OBJ_CALL(self->object.add(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(MonotonicBlockPackedWriter), (PyObject *) self, "add", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/DerefBytesDocValuesField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *DerefBytesDocValuesField::class$ = NULL;
        jmethodID *DerefBytesDocValuesField::mids$ = NULL;
        bool DerefBytesDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *DerefBytesDocValuesField::TYPE_FIXED_LEN = NULL;
        ::org::apache::lucene::document::FieldType *DerefBytesDocValuesField::TYPE_VAR_LEN = NULL;

        jclass DerefBytesDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/DerefBytesDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_43cce44e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_init$_6c8dc377] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Z)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_FIXED_LEN = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_FIXED_LEN", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_VAR_LEN = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_VAR_LEN", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DerefBytesDocValuesField::DerefBytesDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::document::BinaryDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_43cce44e, a0.this$, a1.this$)) {}

        DerefBytesDocValuesField::DerefBytesDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, jboolean a2) : ::org::apache::lucene::document::BinaryDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_6c8dc377, a0.this$, a1.this$, a2)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_DerefBytesDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DerefBytesDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DerefBytesDocValuesField_init_(t_DerefBytesDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_DerefBytesDocValuesField__methods_[] = {
          DECLARE_METHOD(t_DerefBytesDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DerefBytesDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DerefBytesDocValuesField, t_DerefBytesDocValuesField, ::org::apache::lucene::document::BinaryDocValuesField, DerefBytesDocValuesField, t_DerefBytesDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_DerefBytesDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(DerefBytesDocValuesField), module, "DerefBytesDocValuesField", 0);
        }

        void t_DerefBytesDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DerefBytesDocValuesField).tp_dict, "class_", make_descriptor(DerefBytesDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DerefBytesDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_DerefBytesDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DerefBytesDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DerefBytesDocValuesField::initializeClass);
          PyDict_SetItemString(PY_TYPE(DerefBytesDocValuesField).tp_dict, "TYPE_FIXED_LEN", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*DerefBytesDocValuesField::TYPE_FIXED_LEN)));
          PyDict_SetItemString(PY_TYPE(DerefBytesDocValuesField).tp_dict, "TYPE_VAR_LEN", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*DerefBytesDocValuesField::TYPE_VAR_LEN)));
        }

        static PyObject *t_DerefBytesDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DerefBytesDocValuesField::initializeClass, 1)))
            return NULL;
          return t_DerefBytesDocValuesField::wrap_Object(DerefBytesDocValuesField(((t_DerefBytesDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_DerefBytesDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DerefBytesDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DerefBytesDocValuesField_init_(t_DerefBytesDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              DerefBytesDocValuesField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                INT_CALL(object = DerefBytesDocValuesField(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              jboolean a2;
              DerefBytesDocValuesField object((jobject) NULL);

              if (!parseArgs(args, "skZ", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = DerefBytesDocValuesField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/Collator.h"
#include "java/lang/Class.h"
#include "java/lang/Cloneable.h"
#include "java/util/Locale.h"
#include "java/util/Comparator.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *Collator::class$ = NULL;
    jmethodID *Collator::mids$ = NULL;
    bool Collator::live$ = false;
    jint Collator::CANONICAL_DECOMPOSITION = (jint) 0;
    jint Collator::FULL_DECOMPOSITION = (jint) 0;
    jint Collator::IDENTICAL = (jint) 0;
    jint Collator::NO_DECOMPOSITION = (jint) 0;
    jint Collator::PRIMARY = (jint) 0;
    jint Collator::SECONDARY = (jint) 0;
    jint Collator::TERTIARY = (jint) 0;

    jclass Collator::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/Collator");

        mids$ = new jmethodID[max_mid];
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_compare_466982ed] = env->getMethodID(cls, "compare", "(Ljava/lang/Object;Ljava/lang/Object;)I");
        mids$[mid_compare_4a26475d] = env->getMethodID(cls, "compare", "(Ljava/lang/String;Ljava/lang/String;)I");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_equals_4a26474e] = env->getMethodID(cls, "equals", "(Ljava/lang/String;Ljava/lang/String;)Z");
        mids$[mid_getAvailableLocales_59cb5b46] = env->getStaticMethodID(cls, "getAvailableLocales", "()[Ljava/util/Locale;");
        mids$[mid_getDecomposition_54c6a179] = env->getMethodID(cls, "getDecomposition", "()I");
        mids$[mid_getInstance_44b7fa29] = env->getStaticMethodID(cls, "getInstance", "()Ljava/text/Collator;");
        mids$[mid_getInstance_e12c63f2] = env->getStaticMethodID(cls, "getInstance", "(Ljava/util/Locale;)Ljava/text/Collator;");
        mids$[mid_getStrength_54c6a179] = env->getMethodID(cls, "getStrength", "()I");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_setDecomposition_39c7bd3c] = env->getMethodID(cls, "setDecomposition", "(I)V");
        mids$[mid_setStrength_39c7bd3c] = env->getMethodID(cls, "setStrength", "(I)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        CANONICAL_DECOMPOSITION = env->getStaticIntField(cls, "CANONICAL_DECOMPOSITION");
        FULL_DECOMPOSITION = env->getStaticIntField(cls, "FULL_DECOMPOSITION");
        IDENTICAL = env->getStaticIntField(cls, "IDENTICAL");
        NO_DECOMPOSITION = env->getStaticIntField(cls, "NO_DECOMPOSITION");
        PRIMARY = env->getStaticIntField(cls, "PRIMARY");
        SECONDARY = env->getStaticIntField(cls, "SECONDARY");
        TERTIARY = env->getStaticIntField(cls, "TERTIARY");
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    ::java::lang::Object Collator::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    jint Collator::compare(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return env->callIntMethod(this$, mids$[mid_compare_466982ed], a0.this$, a1.this$);
    }

    jint Collator::compare(const ::java::lang::String & a0, const ::java::lang::String & a1) const
    {
      return env->callIntMethod(this$, mids$[mid_compare_4a26475d], a0.this$, a1.this$);
    }

    jboolean Collator::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jboolean Collator::equals(const ::java::lang::String & a0, const ::java::lang::String & a1) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_4a26474e], a0.this$, a1.this$);
    }

    JArray< ::java::util::Locale > Collator::getAvailableLocales()
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::util::Locale >(env->callStaticObjectMethod(cls, mids$[mid_getAvailableLocales_59cb5b46]));
    }

    jint Collator::getDecomposition() const
    {
      return env->callIntMethod(this$, mids$[mid_getDecomposition_54c6a179]);
    }

    Collator Collator::getInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return Collator(env->callStaticObjectMethod(cls, mids$[mid_getInstance_44b7fa29]));
    }

    Collator Collator::getInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Collator(env->callStaticObjectMethod(cls, mids$[mid_getInstance_e12c63f2], a0.this$));
    }

    jint Collator::getStrength() const
    {
      return env->callIntMethod(this$, mids$[mid_getStrength_54c6a179]);
    }

    jint Collator::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    void Collator::setDecomposition(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setDecomposition_39c7bd3c], a0);
    }

    void Collator::setStrength(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setStrength_39c7bd3c], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_Collator_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collator_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collator_clone(t_Collator *self);
    static PyObject *t_Collator_compare(t_Collator *self, PyObject *args);
    static PyObject *t_Collator_equals(t_Collator *self, PyObject *args);
    static PyObject *t_Collator_getAvailableLocales(PyTypeObject *type);
    static PyObject *t_Collator_getDecomposition(t_Collator *self);
    static PyObject *t_Collator_getInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collator_getStrength(t_Collator *self);
    static PyObject *t_Collator_hashCode(t_Collator *self, PyObject *args);
    static PyObject *t_Collator_setDecomposition(t_Collator *self, PyObject *arg);
    static PyObject *t_Collator_setStrength(t_Collator *self, PyObject *arg);
    static PyObject *t_Collator_get__availableLocales(t_Collator *self, void *data);
    static PyObject *t_Collator_get__decomposition(t_Collator *self, void *data);
    static int t_Collator_set__decomposition(t_Collator *self, PyObject *arg, void *data);
    static PyObject *t_Collator_get__instance(t_Collator *self, void *data);
    static PyObject *t_Collator_get__strength(t_Collator *self, void *data);
    static int t_Collator_set__strength(t_Collator *self, PyObject *arg, void *data);
    static PyGetSetDef t_Collator__fields_[] = {
      DECLARE_GET_FIELD(t_Collator, availableLocales),
      DECLARE_GETSET_FIELD(t_Collator, decomposition),
      DECLARE_GET_FIELD(t_Collator, instance),
      DECLARE_GETSET_FIELD(t_Collator, strength),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Collator__methods_[] = {
      DECLARE_METHOD(t_Collator, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collator, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collator, clone, METH_NOARGS),
      DECLARE_METHOD(t_Collator, compare, METH_VARARGS),
      DECLARE_METHOD(t_Collator, equals, METH_VARARGS),
      DECLARE_METHOD(t_Collator, getAvailableLocales, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collator, getDecomposition, METH_NOARGS),
      DECLARE_METHOD(t_Collator, getInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collator, getStrength, METH_NOARGS),
      DECLARE_METHOD(t_Collator, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Collator, setDecomposition, METH_O),
      DECLARE_METHOD(t_Collator, setStrength, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Collator, t_Collator, ::java::lang::Object, Collator, abstract_init, 0, 0, t_Collator__fields_, 0, 0);

    void t_Collator::install(PyObject *module)
    {
      installType(&PY_TYPE(Collator), module, "Collator", 0);
    }

    void t_Collator::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "class_", make_descriptor(Collator::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "wrapfn_", make_descriptor(t_Collator::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "boxfn_", make_descriptor(boxObject));
      env->getClass(Collator::initializeClass);
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "CANONICAL_DECOMPOSITION", make_descriptor(Collator::CANONICAL_DECOMPOSITION));
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "FULL_DECOMPOSITION", make_descriptor(Collator::FULL_DECOMPOSITION));
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "IDENTICAL", make_descriptor(Collator::IDENTICAL));
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "NO_DECOMPOSITION", make_descriptor(Collator::NO_DECOMPOSITION));
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "PRIMARY", make_descriptor(Collator::PRIMARY));
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "SECONDARY", make_descriptor(Collator::SECONDARY));
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "TERTIARY", make_descriptor(Collator::TERTIARY));
    }

    static PyObject *t_Collator_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Collator::initializeClass, 1)))
        return NULL;
      return t_Collator::wrap_Object(Collator(((t_Collator *) arg)->object.this$));
    }
    static PyObject *t_Collator_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Collator::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Collator_clone(t_Collator *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.clone());
      return ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_Collator_compare(t_Collator *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "oo", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "compare", args);
      return NULL;
    }

    static PyObject *t_Collator_equals(t_Collator *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = self->object.equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
      }

      return callSuper(&PY_TYPE(Collator), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Collator_getAvailableLocales(PyTypeObject *type)
    {
      JArray< ::java::util::Locale > result((jobject) NULL);
      OBJ_CALL(result = ::java::text::Collator::getAvailableLocales());
      return JArray<jobject>(result.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_Collator_getDecomposition(t_Collator *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getDecomposition());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Collator_getInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          Collator result((jobject) NULL);
          OBJ_CALL(result = ::java::text::Collator::getInstance());
          return t_Collator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          Collator result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::Collator::getInstance(a0));
            return t_Collator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getInstance", args);
      return NULL;
    }

    static PyObject *t_Collator_getStrength(t_Collator *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getStrength());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Collator_hashCode(t_Collator *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Collator), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Collator_setDecomposition(t_Collator *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setDecomposition(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setDecomposition", arg);
      return NULL;
    }

    static PyObject *t_Collator_setStrength(t_Collator *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setStrength(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setStrength", arg);
      return NULL;
    }

    static PyObject *t_Collator_get__availableLocales(t_Collator *self, void *data)
    {
      JArray< ::java::util::Locale > value((jobject) NULL);
      OBJ_CALL(value = self->object.getAvailableLocales());
      return JArray<jobject>(value.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_Collator_get__decomposition(t_Collator *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getDecomposition());
      return PyInt_FromLong((long) value);
    }
    static int t_Collator_set__decomposition(t_Collator *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setDecomposition(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "decomposition", arg);
      return -1;
    }

    static PyObject *t_Collator_get__instance(t_Collator *self, void *data)
    {
      Collator value((jobject) NULL);
      OBJ_CALL(value = self->object.getInstance());
      return t_Collator::wrap_Object(value);
    }

    static PyObject *t_Collator_get__strength(t_Collator *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getStrength());
      return PyInt_FromLong((long) value);
    }
    static int t_Collator_set__strength(t_Collator *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setStrength(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "strength", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/StemmerUtil.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *StemmerUtil::class$ = NULL;
          jmethodID *StemmerUtil::mids$ = NULL;
          bool StemmerUtil::live$ = false;

          jclass StemmerUtil::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/StemmerUtil");

              mids$ = new jmethodID[max_mid];
              mids$[mid_delete_6f0bb349] = env->getStaticMethodID(cls, "delete", "([CII)I");
              mids$[mid_deleteN_afe81cab] = env->getStaticMethodID(cls, "deleteN", "([CIII)I");
              mids$[mid_endsWith_510fc742] = env->getStaticMethodID(cls, "endsWith", "([CILjava/lang/String;)Z");
              mids$[mid_endsWith_cf61b894] = env->getStaticMethodID(cls, "endsWith", "([CI[C)Z");
              mids$[mid_startsWith_510fc742] = env->getStaticMethodID(cls, "startsWith", "([CILjava/lang/String;)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint StemmerUtil::delete$(const JArray< jchar > & a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_delete_6f0bb349], a0.this$, a1, a2);
          }

          jint StemmerUtil::deleteN(const JArray< jchar > & a0, jint a1, jint a2, jint a3)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_deleteN_afe81cab], a0.this$, a1, a2, a3);
          }

          jboolean StemmerUtil::endsWith(const JArray< jchar > & a0, jint a1, const ::java::lang::String & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_endsWith_510fc742], a0.this$, a1, a2.this$);
          }

          jboolean StemmerUtil::endsWith(const JArray< jchar > & a0, jint a1, const JArray< jchar > & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_endsWith_cf61b894], a0.this$, a1, a2.this$);
          }

          jboolean StemmerUtil::startsWith(const JArray< jchar > & a0, jint a1, const ::java::lang::String & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_startsWith_510fc742], a0.this$, a1, a2.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_StemmerUtil_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StemmerUtil_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StemmerUtil_delete(PyTypeObject *type, PyObject *args);
          static PyObject *t_StemmerUtil_deleteN(PyTypeObject *type, PyObject *args);
          static PyObject *t_StemmerUtil_endsWith(PyTypeObject *type, PyObject *args);
          static PyObject *t_StemmerUtil_startsWith(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_StemmerUtil__methods_[] = {
            DECLARE_METHOD(t_StemmerUtil, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerUtil, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerUtil, delete, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_StemmerUtil, deleteN, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_StemmerUtil, endsWith, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_StemmerUtil, startsWith, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StemmerUtil, t_StemmerUtil, ::java::lang::Object, StemmerUtil, abstract_init, 0, 0, 0, 0, 0);

          void t_StemmerUtil::install(PyObject *module)
          {
            installType(&PY_TYPE(StemmerUtil), module, "StemmerUtil", 0);
          }

          void t_StemmerUtil::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StemmerUtil).tp_dict, "class_", make_descriptor(StemmerUtil::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StemmerUtil).tp_dict, "wrapfn_", make_descriptor(t_StemmerUtil::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StemmerUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StemmerUtil_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StemmerUtil::initializeClass, 1)))
              return NULL;
            return t_StemmerUtil::wrap_Object(StemmerUtil(((t_StemmerUtil *) arg)->object.this$));
          }
          static PyObject *t_StemmerUtil_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StemmerUtil::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_StemmerUtil_delete(PyTypeObject *type, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            jint result;

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::StemmerUtil::delete$(a0, a1, a2));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "delete", args);
            return NULL;
          }

          static PyObject *t_StemmerUtil_deleteN(PyTypeObject *type, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            jint a3;
            jint result;

            if (!parseArgs(args, "[CIII", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::StemmerUtil::deleteN(a0, a1, a2, a3));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "deleteN", args);
            return NULL;
          }

          static PyObject *t_StemmerUtil_endsWith(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "[CIs", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::StemmerUtil::endsWith(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                JArray< jchar > a2((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "[CI[C", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::StemmerUtil::endsWith(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError(type, "endsWith", args);
            return NULL;
          }

          static PyObject *t_StemmerUtil_startsWith(PyTypeObject *type, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            ::java::lang::String a2((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "[CIs", &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::StemmerUtil::startsWith(a0, a1, a2));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "startsWith", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/SPIClassIterator.h"
#include "java/util/Iterator.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *SPIClassIterator::class$ = NULL;
        jmethodID *SPIClassIterator::mids$ = NULL;
        bool SPIClassIterator::live$ = false;

        jclass SPIClassIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/SPIClassIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_get_d529caef] = env->getStaticMethodID(cls, "get", "(Ljava/lang/Class;)Lorg/apache/lucene/util/SPIClassIterator;");
            mids$[mid_get_9dc4dbcc] = env->getStaticMethodID(cls, "get", "(Ljava/lang/Class;Ljava/lang/ClassLoader;)Lorg/apache/lucene/util/SPIClassIterator;");
            mids$[mid_hasNext_54c6a16a] = env->getMethodID(cls, "hasNext", "()Z");
            mids$[mid_isParentClassLoader_7f5616f8] = env->getStaticMethodID(cls, "isParentClassLoader", "(Ljava/lang/ClassLoader;Ljava/lang/ClassLoader;)Z");
            mids$[mid_next_44a5f2c9] = env->getMethodID(cls, "next", "()Ljava/lang/Class;");
            mids$[mid_remove_54c6a166] = env->getMethodID(cls, "remove", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SPIClassIterator SPIClassIterator::get(const ::java::lang::Class & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return SPIClassIterator(env->callStaticObjectMethod(cls, mids$[mid_get_d529caef], a0.this$));
        }

        SPIClassIterator SPIClassIterator::get(const ::java::lang::Class & a0, const ::java::lang::ClassLoader & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return SPIClassIterator(env->callStaticObjectMethod(cls, mids$[mid_get_9dc4dbcc], a0.this$, a1.this$));
        }

        jboolean SPIClassIterator::hasNext() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasNext_54c6a16a]);
        }

        jboolean SPIClassIterator::isParentClassLoader(const ::java::lang::ClassLoader & a0, const ::java::lang::ClassLoader & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_isParentClassLoader_7f5616f8], a0.this$, a1.this$);
        }

        ::java::lang::Class SPIClassIterator::next() const
        {
          return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_next_44a5f2c9]));
        }

        void SPIClassIterator::remove() const
        {
          env->callVoidMethod(this$, mids$[mid_remove_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_SPIClassIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SPIClassIterator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SPIClassIterator_of_(t_SPIClassIterator *self, PyObject *args);
        static PyObject *t_SPIClassIterator_get(PyTypeObject *type, PyObject *args);
        static PyObject *t_SPIClassIterator_hasNext(t_SPIClassIterator *self);
        static PyObject *t_SPIClassIterator_isParentClassLoader(PyTypeObject *type, PyObject *args);
        static PyObject *t_SPIClassIterator_next(t_SPIClassIterator *self);
        static PyObject *t_SPIClassIterator_remove(t_SPIClassIterator *self);
        static PyObject *t_SPIClassIterator_get__parameters_(t_SPIClassIterator *self, void *data);
        static PyGetSetDef t_SPIClassIterator__fields_[] = {
          DECLARE_GET_FIELD(t_SPIClassIterator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SPIClassIterator__methods_[] = {
          DECLARE_METHOD(t_SPIClassIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SPIClassIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SPIClassIterator, of_, METH_VARARGS),
          DECLARE_METHOD(t_SPIClassIterator, get, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SPIClassIterator, hasNext, METH_NOARGS),
          DECLARE_METHOD(t_SPIClassIterator, isParentClassLoader, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SPIClassIterator, next, METH_NOARGS),
          DECLARE_METHOD(t_SPIClassIterator, remove, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SPIClassIterator, t_SPIClassIterator, ::java::lang::Object, SPIClassIterator, abstract_init, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Iterator *)) get_generic_iterator_next< ::java::util::t_Iterator,::java::lang::t_Class >), t_SPIClassIterator__fields_, 0, 0);
        PyObject *t_SPIClassIterator::wrap_Object(const SPIClassIterator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SPIClassIterator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SPIClassIterator *self = (t_SPIClassIterator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SPIClassIterator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SPIClassIterator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SPIClassIterator *self = (t_SPIClassIterator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SPIClassIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(SPIClassIterator), module, "SPIClassIterator", 0);
        }

        void t_SPIClassIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SPIClassIterator).tp_dict, "class_", make_descriptor(SPIClassIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SPIClassIterator).tp_dict, "wrapfn_", make_descriptor(t_SPIClassIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SPIClassIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SPIClassIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SPIClassIterator::initializeClass, 1)))
            return NULL;
          return t_SPIClassIterator::wrap_Object(SPIClassIterator(((t_SPIClassIterator *) arg)->object.this$));
        }
        static PyObject *t_SPIClassIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SPIClassIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SPIClassIterator_of_(t_SPIClassIterator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_SPIClassIterator_get(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Class a0((jobject) NULL);
              PyTypeObject **p0;
              SPIClassIterator result((jobject) NULL);

              if (!parseArgs(args, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::SPIClassIterator::get(a0));
                return t_SPIClassIterator::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::java::lang::Class a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::ClassLoader a1((jobject) NULL);
              SPIClassIterator result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::lang::Class::initializeClass, ::java::lang::ClassLoader::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::SPIClassIterator::get(a0, a1));
                return t_SPIClassIterator::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "get", args);
          return NULL;
        }

        static PyObject *t_SPIClassIterator_hasNext(t_SPIClassIterator *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasNext());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_SPIClassIterator_isParentClassLoader(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::ClassLoader a0((jobject) NULL);
          ::java::lang::ClassLoader a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "kk", ::java::lang::ClassLoader::initializeClass, ::java::lang::ClassLoader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SPIClassIterator::isParentClassLoader(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "isParentClassLoader", args);
          return NULL;
        }

        static PyObject *t_SPIClassIterator_next(t_SPIClassIterator *self)
        {
          ::java::lang::Class result((jobject) NULL);
          OBJ_CALL(result = self->object.next());
          return ::java::lang::t_Class::wrap_Object(result);
        }

        static PyObject *t_SPIClassIterator_remove(t_SPIClassIterator *self)
        {
          OBJ_CALL(self->object.remove());
          Py_RETURN_NONE;
        }
        static PyObject *t_SPIClassIterator_get__parameters_(t_SPIClassIterator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Class.h"
#include "java/lang/Package.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/SecurityException.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/io/InputStream.h"
#include "java/io/Serializable.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/String.h"
#include "java/lang/IllegalAccessException.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Class::class$ = NULL;
    jmethodID *Class::mids$ = NULL;
    bool Class::live$ = false;

    jclass Class::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Class");

        mids$ = new jmethodID[max_mid];
        mids$[mid_asSubclass_ecb22eb3] = env->getMethodID(cls, "asSubclass", "(Ljava/lang/Class;)Ljava/lang/Class;");
        mids$[mid_cast_a932a95f] = env->getMethodID(cls, "cast", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_desiredAssertionStatus_54c6a16a] = env->getMethodID(cls, "desiredAssertionStatus", "()Z");
        mids$[mid_forName_7d663d97] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;)Ljava/lang/Class;");
        mids$[mid_forName_4c5c10fb] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;");
        mids$[mid_getCanonicalName_14c7b5c5] = env->getMethodID(cls, "getCanonicalName", "()Ljava/lang/String;");
        mids$[mid_getClassLoader_8d2f11fc] = env->getMethodID(cls, "getClassLoader", "()Ljava/lang/ClassLoader;");
        mids$[mid_getClasses_ffb25e7d] = env->getMethodID(cls, "getClasses", "()[Ljava/lang/Class;");
        mids$[mid_getComponentType_44a5f2c9] = env->getMethodID(cls, "getComponentType", "()Ljava/lang/Class;");
        mids$[mid_getDeclaredClasses_ffb25e7d] = env->getMethodID(cls, "getDeclaredClasses", "()[Ljava/lang/Class;");
        mids$[mid_getDeclaringClass_44a5f2c9] = env->getMethodID(cls, "getDeclaringClass", "()Ljava/lang/Class;");
        mids$[mid_getEnclosingClass_44a5f2c9] = env->getMethodID(cls, "getEnclosingClass", "()Ljava/lang/Class;");
        mids$[mid_getEnumConstants_94e49c77] = env->getMethodID(cls, "getEnumConstants", "()[Ljava/lang/Object;");
        mids$[mid_getInterfaces_ffb25e7d] = env->getMethodID(cls, "getInterfaces", "()[Ljava/lang/Class;");
        mids$[mid_getModifiers_54c6a179] = env->getMethodID(cls, "getModifiers", "()I");
        mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
        mids$[mid_getPackage_b0f2f7bb] = env->getMethodID(cls, "getPackage", "()Ljava/lang/Package;");
        mids$[mid_getResourceAsStream_222e59eb] = env->getMethodID(cls, "getResourceAsStream", "(Ljava/lang/String;)Ljava/io/InputStream;");
        mids$[mid_getSigners_94e49c77] = env->getMethodID(cls, "getSigners", "()[Ljava/lang/Object;");
        mids$[mid_getSimpleName_14c7b5c5] = env->getMethodID(cls, "getSimpleName", "()Ljava/lang/String;");
        mids$[mid_getSuperclass_44a5f2c9] = env->getMethodID(cls, "getSuperclass", "()Ljava/lang/Class;");
        mids$[mid_getTypeName_14c7b5c5] = env->getMethodID(cls, "getTypeName", "()Ljava/lang/String;");
        mids$[mid_isAnnotation_54c6a16a] = env->getMethodID(cls, "isAnnotation", "()Z");
        mids$[mid_isAnonymousClass_54c6a16a] = env->getMethodID(cls, "isAnonymousClass", "()Z");
        mids$[mid_isArray_54c6a16a] = env->getMethodID(cls, "isArray", "()Z");
        mids$[mid_isAssignableFrom_a5deaff8] = env->getMethodID(cls, "isAssignableFrom", "(Ljava/lang/Class;)Z");
        mids$[mid_isEnum_54c6a16a] = env->getMethodID(cls, "isEnum", "()Z");
        mids$[mid_isInstance_290588e2] = env->getMethodID(cls, "isInstance", "(Ljava/lang/Object;)Z");
        mids$[mid_isInterface_54c6a16a] = env->getMethodID(cls, "isInterface", "()Z");
        mids$[mid_isLocalClass_54c6a16a] = env->getMethodID(cls, "isLocalClass", "()Z");
        mids$[mid_isMemberClass_54c6a16a] = env->getMethodID(cls, "isMemberClass", "()Z");
        mids$[mid_isPrimitive_54c6a16a] = env->getMethodID(cls, "isPrimitive", "()Z");
        mids$[mid_isSynthetic_54c6a16a] = env->getMethodID(cls, "isSynthetic", "()Z");
        mids$[mid_newInstance_846352c3] = env->getMethodID(cls, "newInstance", "()Ljava/lang/Object;");
        mids$[mid_toGenericString_14c7b5c5] = env->getMethodID(cls, "toGenericString", "()Ljava/lang/String;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Class Class::asSubclass(const Class & a0) const
    {
      return Class(env->callObjectMethod(this$, mids$[mid_asSubclass_ecb22eb3], a0.this$));
    }

    ::java::lang::Object Class::cast(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_cast_a932a95f], a0.this$));
    }

    jboolean Class::desiredAssertionStatus() const
    {
      return env->callBooleanMethod(this$, mids$[mid_desiredAssertionStatus_54c6a16a]);
    }

    Class Class::forName(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Class(env->callStaticObjectMethod(cls, mids$[mid_forName_7d663d97], a0.this$));
    }

    Class Class::forName(const ::java::lang::String & a0, jboolean a1, const ::java::lang::ClassLoader & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return Class(env->callStaticObjectMethod(cls, mids$[mid_forName_4c5c10fb], a0.this$, a1, a2.this$));
    }

    ::java::lang::String Class::getCanonicalName() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getCanonicalName_14c7b5c5]));
    }

    ::java::lang::ClassLoader Class::getClassLoader() const
    {
      return ::java::lang::ClassLoader(env->callObjectMethod(this$, mids$[mid_getClassLoader_8d2f11fc]));
    }

    JArray< Class > Class::getClasses() const
    {
      return JArray< Class >(env->callObjectMethod(this$, mids$[mid_getClasses_ffb25e7d]));
    }

    Class Class::getComponentType() const
    {
      return Class(env->callObjectMethod(this$, mids$[mid_getComponentType_44a5f2c9]));
    }

    JArray< Class > Class::getDeclaredClasses() const
    {
      return JArray< Class >(env->callObjectMethod(this$, mids$[mid_getDeclaredClasses_ffb25e7d]));
    }

    Class Class::getDeclaringClass() const
    {
      return Class(env->callObjectMethod(this$, mids$[mid_getDeclaringClass_44a5f2c9]));
    }

    Class Class::getEnclosingClass() const
    {
      return Class(env->callObjectMethod(this$, mids$[mid_getEnclosingClass_44a5f2c9]));
    }

    JArray< ::java::lang::Object > Class::getEnumConstants() const
    {
      return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_getEnumConstants_94e49c77]));
    }

    JArray< Class > Class::getInterfaces() const
    {
      return JArray< Class >(env->callObjectMethod(this$, mids$[mid_getInterfaces_ffb25e7d]));
    }

    jint Class::getModifiers() const
    {
      return env->callIntMethod(this$, mids$[mid_getModifiers_54c6a179]);
    }

    ::java::lang::String Class::getName() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
    }

    ::java::lang::Package Class::getPackage() const
    {
      return ::java::lang::Package(env->callObjectMethod(this$, mids$[mid_getPackage_b0f2f7bb]));
    }

    ::java::io::InputStream Class::getResourceAsStream(const ::java::lang::String & a0) const
    {
      return ::java::io::InputStream(env->callObjectMethod(this$, mids$[mid_getResourceAsStream_222e59eb], a0.this$));
    }

    JArray< ::java::lang::Object > Class::getSigners() const
    {
      return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_getSigners_94e49c77]));
    }

    ::java::lang::String Class::getSimpleName() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getSimpleName_14c7b5c5]));
    }

    Class Class::getSuperclass() const
    {
      return Class(env->callObjectMethod(this$, mids$[mid_getSuperclass_44a5f2c9]));
    }

    ::java::lang::String Class::getTypeName() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTypeName_14c7b5c5]));
    }

    jboolean Class::isAnnotation() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isAnnotation_54c6a16a]);
    }

    jboolean Class::isAnonymousClass() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isAnonymousClass_54c6a16a]);
    }

    jboolean Class::isArray() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isArray_54c6a16a]);
    }

    jboolean Class::isAssignableFrom(const Class & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_isAssignableFrom_a5deaff8], a0.this$);
    }

    jboolean Class::isEnum() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEnum_54c6a16a]);
    }

    jboolean Class::isInstance(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_isInstance_290588e2], a0.this$);
    }

    jboolean Class::isInterface() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isInterface_54c6a16a]);
    }

    jboolean Class::isLocalClass() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isLocalClass_54c6a16a]);
    }

    jboolean Class::isMemberClass() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isMemberClass_54c6a16a]);
    }

    jboolean Class::isPrimitive() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isPrimitive_54c6a16a]);
    }

    jboolean Class::isSynthetic() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isSynthetic_54c6a16a]);
    }

    ::java::lang::Object Class::newInstance() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_newInstance_846352c3]));
    }

    ::java::lang::String Class::toGenericString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toGenericString_14c7b5c5]));
    }

    ::java::lang::String Class::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Class_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Class_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Class_of_(t_Class *self, PyObject *args);
    static PyObject *t_Class_asSubclass(t_Class *self, PyObject *arg);
    static PyObject *t_Class_cast(t_Class *self, PyObject *arg);
    static PyObject *t_Class_desiredAssertionStatus(t_Class *self);
    static PyObject *t_Class_forName(PyTypeObject *type, PyObject *args);
    static PyObject *t_Class_getCanonicalName(t_Class *self);
    static PyObject *t_Class_getClassLoader(t_Class *self);
    static PyObject *t_Class_getClasses(t_Class *self);
    static PyObject *t_Class_getComponentType(t_Class *self);
    static PyObject *t_Class_getDeclaredClasses(t_Class *self);
    static PyObject *t_Class_getDeclaringClass(t_Class *self);
    static PyObject *t_Class_getEnclosingClass(t_Class *self);
    static PyObject *t_Class_getEnumConstants(t_Class *self);
    static PyObject *t_Class_getInterfaces(t_Class *self);
    static PyObject *t_Class_getModifiers(t_Class *self);
    static PyObject *t_Class_getName(t_Class *self);
    static PyObject *t_Class_getPackage(t_Class *self);
    static PyObject *t_Class_getResourceAsStream(t_Class *self, PyObject *arg);
    static PyObject *t_Class_getSigners(t_Class *self);
    static PyObject *t_Class_getSimpleName(t_Class *self);
    static PyObject *t_Class_getSuperclass(t_Class *self);
    static PyObject *t_Class_getTypeName(t_Class *self);
    static PyObject *t_Class_isAnnotation(t_Class *self);
    static PyObject *t_Class_isAnonymousClass(t_Class *self);
    static PyObject *t_Class_isArray(t_Class *self);
    static PyObject *t_Class_isAssignableFrom(t_Class *self, PyObject *arg);
    static PyObject *t_Class_isEnum(t_Class *self);
    static PyObject *t_Class_isInstance(t_Class *self, PyObject *arg);
    static PyObject *t_Class_isInterface(t_Class *self);
    static PyObject *t_Class_isLocalClass(t_Class *self);
    static PyObject *t_Class_isMemberClass(t_Class *self);
    static PyObject *t_Class_isPrimitive(t_Class *self);
    static PyObject *t_Class_isSynthetic(t_Class *self);
    static PyObject *t_Class_newInstance(t_Class *self);
    static PyObject *t_Class_toGenericString(t_Class *self);
    static PyObject *t_Class_toString(t_Class *self, PyObject *args);
    static PyObject *t_Class_get__annotation(t_Class *self, void *data);
    static PyObject *t_Class_get__anonymousClass(t_Class *self, void *data);
    static PyObject *t_Class_get__array(t_Class *self, void *data);
    static PyObject *t_Class_get__canonicalName(t_Class *self, void *data);
    static PyObject *t_Class_get__classLoader(t_Class *self, void *data);
    static PyObject *t_Class_get__classes(t_Class *self, void *data);
    static PyObject *t_Class_get__componentType(t_Class *self, void *data);
    static PyObject *t_Class_get__declaredClasses(t_Class *self, void *data);
    static PyObject *t_Class_get__declaringClass(t_Class *self, void *data);
    static PyObject *t_Class_get__enclosingClass(t_Class *self, void *data);
    static PyObject *t_Class_get__enum(t_Class *self, void *data);
    static PyObject *t_Class_get__enumConstants(t_Class *self, void *data);
    static PyObject *t_Class_get__interface(t_Class *self, void *data);
    static PyObject *t_Class_get__interfaces(t_Class *self, void *data);
    static PyObject *t_Class_get__localClass(t_Class *self, void *data);
    static PyObject *t_Class_get__memberClass(t_Class *self, void *data);
    static PyObject *t_Class_get__modifiers(t_Class *self, void *data);
    static PyObject *t_Class_get__name(t_Class *self, void *data);
    static PyObject *t_Class_get__package(t_Class *self, void *data);
    static PyObject *t_Class_get__primitive(t_Class *self, void *data);
    static PyObject *t_Class_get__signers(t_Class *self, void *data);
    static PyObject *t_Class_get__simpleName(t_Class *self, void *data);
    static PyObject *t_Class_get__superclass(t_Class *self, void *data);
    static PyObject *t_Class_get__synthetic(t_Class *self, void *data);
    static PyObject *t_Class_get__typeName(t_Class *self, void *data);
    static PyObject *t_Class_get__parameters_(t_Class *self, void *data);
    static PyGetSetDef t_Class__fields_[] = {
      DECLARE_GET_FIELD(t_Class, annotation),
      DECLARE_GET_FIELD(t_Class, anonymousClass),
      DECLARE_GET_FIELD(t_Class, array),
      DECLARE_GET_FIELD(t_Class, canonicalName),
      DECLARE_GET_FIELD(t_Class, classLoader),
      DECLARE_GET_FIELD(t_Class, classes),
      DECLARE_GET_FIELD(t_Class, componentType),
      DECLARE_GET_FIELD(t_Class, declaredClasses),
      DECLARE_GET_FIELD(t_Class, declaringClass),
      DECLARE_GET_FIELD(t_Class, enclosingClass),
      DECLARE_GET_FIELD(t_Class, enum),
      DECLARE_GET_FIELD(t_Class, enumConstants),
      DECLARE_GET_FIELD(t_Class, interface),
      DECLARE_GET_FIELD(t_Class, interfaces),
      DECLARE_GET_FIELD(t_Class, localClass),
      DECLARE_GET_FIELD(t_Class, memberClass),
      DECLARE_GET_FIELD(t_Class, modifiers),
      DECLARE_GET_FIELD(t_Class, name),
      DECLARE_GET_FIELD(t_Class, package),
      DECLARE_GET_FIELD(t_Class, primitive),
      DECLARE_GET_FIELD(t_Class, signers),
      DECLARE_GET_FIELD(t_Class, simpleName),
      DECLARE_GET_FIELD(t_Class, superclass),
      DECLARE_GET_FIELD(t_Class, synthetic),
      DECLARE_GET_FIELD(t_Class, typeName),
      DECLARE_GET_FIELD(t_Class, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Class__methods_[] = {
      DECLARE_METHOD(t_Class, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Class, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Class, of_, METH_VARARGS),
      DECLARE_METHOD(t_Class, asSubclass, METH_O),
      DECLARE_METHOD(t_Class, cast, METH_O),
      DECLARE_METHOD(t_Class, desiredAssertionStatus, METH_NOARGS),
      DECLARE_METHOD(t_Class, forName, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Class, getCanonicalName, METH_NOARGS),
      DECLARE_METHOD(t_Class, getClassLoader, METH_NOARGS),
      DECLARE_METHOD(t_Class, getClasses, METH_NOARGS),
      DECLARE_METHOD(t_Class, getComponentType, METH_NOARGS),
      DECLARE_METHOD(t_Class, getDeclaredClasses, METH_NOARGS),
      DECLARE_METHOD(t_Class, getDeclaringClass, METH_NOARGS),
      DECLARE_METHOD(t_Class, getEnclosingClass, METH_NOARGS),
      DECLARE_METHOD(t_Class, getEnumConstants, METH_NOARGS),
      DECLARE_METHOD(t_Class, getInterfaces, METH_NOARGS),
      DECLARE_METHOD(t_Class, getModifiers, METH_NOARGS),
      DECLARE_METHOD(t_Class, getName, METH_NOARGS),
      DECLARE_METHOD(t_Class, getPackage, METH_NOARGS),
      DECLARE_METHOD(t_Class, getResourceAsStream, METH_O),
      DECLARE_METHOD(t_Class, getSigners, METH_NOARGS),
      DECLARE_METHOD(t_Class, getSimpleName, METH_NOARGS),
      DECLARE_METHOD(t_Class, getSuperclass, METH_NOARGS),
      DECLARE_METHOD(t_Class, getTypeName, METH_NOARGS),
      DECLARE_METHOD(t_Class, isAnnotation, METH_NOARGS),
      DECLARE_METHOD(t_Class, isAnonymousClass, METH_NOARGS),
      DECLARE_METHOD(t_Class, isArray, METH_NOARGS),
      DECLARE_METHOD(t_Class, isAssignableFrom, METH_O),
      DECLARE_METHOD(t_Class, isEnum, METH_NOARGS),
      DECLARE_METHOD(t_Class, isInstance, METH_O),
      DECLARE_METHOD(t_Class, isInterface, METH_NOARGS),
      DECLARE_METHOD(t_Class, isLocalClass, METH_NOARGS),
      DECLARE_METHOD(t_Class, isMemberClass, METH_NOARGS),
      DECLARE_METHOD(t_Class, isPrimitive, METH_NOARGS),
      DECLARE_METHOD(t_Class, isSynthetic, METH_NOARGS),
      DECLARE_METHOD(t_Class, newInstance, METH_NOARGS),
      DECLARE_METHOD(t_Class, toGenericString, METH_NOARGS),
      DECLARE_METHOD(t_Class, toString, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Class, t_Class, ::java::lang::Object, Class, abstract_init, 0, 0, t_Class__fields_, 0, 0);
    PyObject *t_Class::wrap_Object(const Class& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Class::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Class *self = (t_Class *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_Class::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Class::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Class *self = (t_Class *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_Class::install(PyObject *module)
    {
      installType(&PY_TYPE(Class), module, "Class", 0);
    }

    void t_Class::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Class).tp_dict, "class_", make_descriptor(Class::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Class).tp_dict, "wrapfn_", make_descriptor(t_Class::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Class).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Class_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Class::initializeClass, 1)))
        return NULL;
      return t_Class::wrap_Object(Class(((t_Class *) arg)->object.this$));
    }
    static PyObject *t_Class_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Class::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Class_of_(t_Class *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_Class_asSubclass(t_Class *self, PyObject *arg)
    {
      Class a0((jobject) NULL);
      PyTypeObject **p0;
      Class result((jobject) NULL);

      if (!parseArg(arg, "K", Class::initializeClass, &a0, &p0, t_Class::parameters_))
      {
        OBJ_CALL(result = self->object.asSubclass(a0));
        return t_Class::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "asSubclass", arg);
      return NULL;
    }

    static PyObject *t_Class_cast(t_Class *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.cast(a0));
        return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "cast", arg);
      return NULL;
    }

    static PyObject *t_Class_desiredAssertionStatus(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.desiredAssertionStatus());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_forName(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Class result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Class::forName(a0));
            return t_Class::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean a1;
          ::java::lang::ClassLoader a2((jobject) NULL);
          Class result((jobject) NULL);

          if (!parseArgs(args, "sZk", ::java::lang::ClassLoader::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Class::forName(a0, a1, a2));
            return t_Class::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "forName", args);
      return NULL;
    }

    static PyObject *t_Class_getCanonicalName(t_Class *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getCanonicalName());
      return j2p(result);
    }

    static PyObject *t_Class_getClassLoader(t_Class *self)
    {
      ::java::lang::ClassLoader result((jobject) NULL);
      OBJ_CALL(result = self->object.getClassLoader());
      return ::java::lang::t_ClassLoader::wrap_Object(result);
    }

    static PyObject *t_Class_getClasses(t_Class *self)
    {
      JArray< Class > result((jobject) NULL);
      OBJ_CALL(result = self->object.getClasses());
      return JArray<jobject>(result.this$).wrap(t_Class::wrap_jobject);
    }

    static PyObject *t_Class_getComponentType(t_Class *self)
    {
      Class result((jobject) NULL);
      OBJ_CALL(result = self->object.getComponentType());
      return t_Class::wrap_Object(result);
    }

    static PyObject *t_Class_getDeclaredClasses(t_Class *self)
    {
      JArray< Class > result((jobject) NULL);
      OBJ_CALL(result = self->object.getDeclaredClasses());
      return JArray<jobject>(result.this$).wrap(t_Class::wrap_jobject);
    }

    static PyObject *t_Class_getDeclaringClass(t_Class *self)
    {
      Class result((jobject) NULL);
      OBJ_CALL(result = self->object.getDeclaringClass());
      return t_Class::wrap_Object(result);
    }

    static PyObject *t_Class_getEnclosingClass(t_Class *self)
    {
      Class result((jobject) NULL);
      OBJ_CALL(result = self->object.getEnclosingClass());
      return t_Class::wrap_Object(result);
    }

    static PyObject *t_Class_getEnumConstants(t_Class *self)
    {
      JArray< ::java::lang::Object > result((jobject) NULL);
      OBJ_CALL(result = self->object.getEnumConstants());
      return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
    }

    static PyObject *t_Class_getInterfaces(t_Class *self)
    {
      JArray< Class > result((jobject) NULL);
      OBJ_CALL(result = self->object.getInterfaces());
      return JArray<jobject>(result.this$).wrap(t_Class::wrap_jobject);
    }

    static PyObject *t_Class_getModifiers(t_Class *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getModifiers());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Class_getName(t_Class *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getName());
      return j2p(result);
    }

    static PyObject *t_Class_getPackage(t_Class *self)
    {
      ::java::lang::Package result((jobject) NULL);
      OBJ_CALL(result = self->object.getPackage());
      return ::java::lang::t_Package::wrap_Object(result);
    }

    static PyObject *t_Class_getResourceAsStream(t_Class *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::io::InputStream result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.getResourceAsStream(a0));
        return ::java::io::t_InputStream::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "getResourceAsStream", arg);
      return NULL;
    }

    static PyObject *t_Class_getSigners(t_Class *self)
    {
      JArray< ::java::lang::Object > result((jobject) NULL);
      OBJ_CALL(result = self->object.getSigners());
      return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
    }

    static PyObject *t_Class_getSimpleName(t_Class *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getSimpleName());
      return j2p(result);
    }

    static PyObject *t_Class_getSuperclass(t_Class *self)
    {
      Class result((jobject) NULL);
      OBJ_CALL(result = self->object.getSuperclass());
      return t_Class::wrap_Object(result);
    }

    static PyObject *t_Class_getTypeName(t_Class *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getTypeName());
      return j2p(result);
    }

    static PyObject *t_Class_isAnnotation(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isAnnotation());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isAnonymousClass(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isAnonymousClass());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isArray(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isArray());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isAssignableFrom(t_Class *self, PyObject *arg)
    {
      Class a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArg(arg, "K", Class::initializeClass, &a0, &p0, t_Class::parameters_))
      {
        OBJ_CALL(result = self->object.isAssignableFrom(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "isAssignableFrom", arg);
      return NULL;
    }

    static PyObject *t_Class_isEnum(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isEnum());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isInstance(t_Class *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.isInstance(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "isInstance", arg);
      return NULL;
    }

    static PyObject *t_Class_isInterface(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isInterface());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isLocalClass(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isLocalClass());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isMemberClass(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isMemberClass());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isPrimitive(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isPrimitive());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isSynthetic(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isSynthetic());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_newInstance(t_Class *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.newInstance());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_Class_toGenericString(t_Class *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.toGenericString());
      return j2p(result);
    }

    static PyObject *t_Class_toString(t_Class *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Class), (PyObject *) self, "toString", args, 2);
    }
    static PyObject *t_Class_get__parameters_(t_Class *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_Class_get__annotation(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isAnnotation());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__anonymousClass(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isAnonymousClass());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__array(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isArray());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__canonicalName(t_Class *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getCanonicalName());
      return j2p(value);
    }

    static PyObject *t_Class_get__classLoader(t_Class *self, void *data)
    {
      ::java::lang::ClassLoader value((jobject) NULL);
      OBJ_CALL(value = self->object.getClassLoader());
      return ::java::lang::t_ClassLoader::wrap_Object(value);
    }

    static PyObject *t_Class_get__classes(t_Class *self, void *data)
    {
      JArray< Class > value((jobject) NULL);
      OBJ_CALL(value = self->object.getClasses());
      return JArray<jobject>(value.this$).wrap(t_Class::wrap_jobject);
    }

    static PyObject *t_Class_get__componentType(t_Class *self, void *data)
    {
      Class value((jobject) NULL);
      OBJ_CALL(value = self->object.getComponentType());
      return t_Class::wrap_Object(value);
    }

    static PyObject *t_Class_get__declaredClasses(t_Class *self, void *data)
    {
      JArray< Class > value((jobject) NULL);
      OBJ_CALL(value = self->object.getDeclaredClasses());
      return JArray<jobject>(value.this$).wrap(t_Class::wrap_jobject);
    }

    static PyObject *t_Class_get__declaringClass(t_Class *self, void *data)
    {
      Class value((jobject) NULL);
      OBJ_CALL(value = self->object.getDeclaringClass());
      return t_Class::wrap_Object(value);
    }

    static PyObject *t_Class_get__enclosingClass(t_Class *self, void *data)
    {
      Class value((jobject) NULL);
      OBJ_CALL(value = self->object.getEnclosingClass());
      return t_Class::wrap_Object(value);
    }

    static PyObject *t_Class_get__enum(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEnum());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__enumConstants(t_Class *self, void *data)
    {
      JArray< ::java::lang::Object > value((jobject) NULL);
      OBJ_CALL(value = self->object.getEnumConstants());
      return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
    }

    static PyObject *t_Class_get__interface(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isInterface());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__interfaces(t_Class *self, void *data)
    {
      JArray< Class > value((jobject) NULL);
      OBJ_CALL(value = self->object.getInterfaces());
      return JArray<jobject>(value.this$).wrap(t_Class::wrap_jobject);
    }

    static PyObject *t_Class_get__localClass(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isLocalClass());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__memberClass(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isMemberClass());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__modifiers(t_Class *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getModifiers());
      return PyInt_FromLong((long) value);
    }

    static PyObject *t_Class_get__name(t_Class *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getName());
      return j2p(value);
    }

    static PyObject *t_Class_get__package(t_Class *self, void *data)
    {
      ::java::lang::Package value((jobject) NULL);
      OBJ_CALL(value = self->object.getPackage());
      return ::java::lang::t_Package::wrap_Object(value);
    }

    static PyObject *t_Class_get__primitive(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isPrimitive());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__signers(t_Class *self, void *data)
    {
      JArray< ::java::lang::Object > value((jobject) NULL);
      OBJ_CALL(value = self->object.getSigners());
      return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
    }

    static PyObject *t_Class_get__simpleName(t_Class *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getSimpleName());
      return j2p(value);
    }

    static PyObject *t_Class_get__superclass(t_Class *self, void *data)
    {
      Class value((jobject) NULL);
      OBJ_CALL(value = self->object.getSuperclass());
      return t_Class::wrap_Object(value);
    }

    static PyObject *t_Class_get__synthetic(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isSynthetic());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__typeName(t_Class *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getTypeName());
      return j2p(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniStemmer::class$ = NULL;
          jmethodID *SoraniStemmer::mids$ = NULL;
          bool SoraniStemmer::live$ = false;

          jclass SoraniStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniStemmer::SoraniStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint SoraniStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniStemmer_init_(t_SoraniStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniStemmer_stem(t_SoraniStemmer *self, PyObject *args);

          static PyMethodDef t_SoraniStemmer__methods_[] = {
            DECLARE_METHOD(t_SoraniStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SoraniStemmer, t_SoraniStemmer, ::java::lang::Object, SoraniStemmer, t_SoraniStemmer_init_, 0, 0, 0, 0, 0);

          void t_SoraniStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniStemmer), module, "SoraniStemmer", 0);
          }

          void t_SoraniStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SoraniStemmer).tp_dict, "class_", make_descriptor(SoraniStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SoraniStemmer).tp_dict, "wrapfn_", make_descriptor(t_SoraniStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SoraniStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SoraniStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniStemmer::initializeClass, 1)))
              return NULL;
            return t_SoraniStemmer::wrap_Object(SoraniStemmer(((t_SoraniStemmer *) arg)->object.this$));
          }
          static PyObject *t_SoraniStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniStemmer_init_(t_SoraniStemmer *self, PyObject *args, PyObject *kwds)
          {
            SoraniStemmer object((jobject) NULL);

            INT_CALL(object = SoraniStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_SoraniStemmer_stem(t_SoraniStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/LowerCaseFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/core/LowerCaseFilter.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *LowerCaseFilterFactory::class$ = NULL;
          jmethodID *LowerCaseFilterFactory::mids$ = NULL;
          bool LowerCaseFilterFactory::live$ = false;

          jclass LowerCaseFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/LowerCaseFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_40083866] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/core/LowerCaseFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LowerCaseFilterFactory::LowerCaseFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::core::LowerCaseFilter LowerCaseFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::core::LowerCaseFilter(env->callObjectMethod(this$, mids$[mid_create_40083866], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory LowerCaseFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_LowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LowerCaseFilterFactory_init_(t_LowerCaseFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LowerCaseFilterFactory_create(t_LowerCaseFilterFactory *self, PyObject *args);
          static PyObject *t_LowerCaseFilterFactory_getMultiTermComponent(t_LowerCaseFilterFactory *self);
          static PyObject *t_LowerCaseFilterFactory_get__multiTermComponent(t_LowerCaseFilterFactory *self, void *data);
          static PyGetSetDef t_LowerCaseFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_LowerCaseFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LowerCaseFilterFactory__methods_[] = {
            DECLARE_METHOD(t_LowerCaseFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LowerCaseFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LowerCaseFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_LowerCaseFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LowerCaseFilterFactory, t_LowerCaseFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, LowerCaseFilterFactory, t_LowerCaseFilterFactory_init_, 0, 0, t_LowerCaseFilterFactory__fields_, 0, 0);

          void t_LowerCaseFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LowerCaseFilterFactory), module, "LowerCaseFilterFactory", 0);
          }

          void t_LowerCaseFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LowerCaseFilterFactory).tp_dict, "class_", make_descriptor(LowerCaseFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LowerCaseFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_LowerCaseFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LowerCaseFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LowerCaseFilterFactory::initializeClass, 1)))
              return NULL;
            return t_LowerCaseFilterFactory::wrap_Object(LowerCaseFilterFactory(((t_LowerCaseFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_LowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LowerCaseFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LowerCaseFilterFactory_init_(t_LowerCaseFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LowerCaseFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LowerCaseFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LowerCaseFilterFactory_create(t_LowerCaseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::core::LowerCaseFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::core::t_LowerCaseFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LowerCaseFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_LowerCaseFilterFactory_getMultiTermComponent(t_LowerCaseFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_LowerCaseFilterFactory_get__multiTermComponent(t_LowerCaseFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexCapabilities.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexCapabilities$RegexMatcher.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {

            ::java::lang::Class *RegexCapabilities::class$ = NULL;
            jmethodID *RegexCapabilities::mids$ = NULL;
            bool RegexCapabilities::live$ = false;

            jclass RegexCapabilities::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/regex/RegexCapabilities");

                mids$ = new jmethodID[max_mid];
                mids$[mid_compile_3b00aa76] = env->getMethodID(cls, "compile", "(Ljava/lang/String;)Lorg/apache/lucene/sandbox/queries/regex/RegexCapabilities$RegexMatcher;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities$RegexMatcher RegexCapabilities::compile(const ::java::lang::String & a0) const
            {
              return ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities$RegexMatcher(env->callObjectMethod(this$, mids$[mid_compile_3b00aa76], a0.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {
            static PyObject *t_RegexCapabilities_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RegexCapabilities_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RegexCapabilities_compile(t_RegexCapabilities *self, PyObject *arg);

            static PyMethodDef t_RegexCapabilities__methods_[] = {
              DECLARE_METHOD(t_RegexCapabilities, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexCapabilities, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexCapabilities, compile, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(RegexCapabilities, t_RegexCapabilities, ::java::lang::Object, RegexCapabilities, abstract_init, 0, 0, 0, 0, 0);

            void t_RegexCapabilities::install(PyObject *module)
            {
              installType(&PY_TYPE(RegexCapabilities), module, "RegexCapabilities", 0);
              PyDict_SetItemString(PY_TYPE(RegexCapabilities).tp_dict, "RegexMatcher", make_descriptor(&PY_TYPE(RegexCapabilities$RegexMatcher)));
            }

            void t_RegexCapabilities::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(RegexCapabilities).tp_dict, "class_", make_descriptor(RegexCapabilities::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(RegexCapabilities).tp_dict, "wrapfn_", make_descriptor(t_RegexCapabilities::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(RegexCapabilities).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_RegexCapabilities_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, RegexCapabilities::initializeClass, 1)))
                return NULL;
              return t_RegexCapabilities::wrap_Object(RegexCapabilities(((t_RegexCapabilities *) arg)->object.this$));
            }
            static PyObject *t_RegexCapabilities_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, RegexCapabilities::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_RegexCapabilities_compile(t_RegexCapabilities *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities$RegexMatcher result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.compile(a0));
                return ::org::apache::lucene::sandbox::queries::regex::t_RegexCapabilities$RegexMatcher::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "compile", arg);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/ByteSequenceOutputs.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *ByteSequenceOutputs::class$ = NULL;
          jmethodID *ByteSequenceOutputs::mids$ = NULL;
          bool ByteSequenceOutputs::live$ = false;

          jclass ByteSequenceOutputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/ByteSequenceOutputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_0991fadd] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_common_0991fadd] = env->getMethodID(cls, "common", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getNoOutput_4ae19461] = env->getMethodID(cls, "getNoOutput", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getSingleton_f61c4f3f] = env->getStaticMethodID(cls, "getSingleton", "()Lorg/apache/lucene/util/fst/ByteSequenceOutputs;");
              mids$[mid_outputToString_edfda73b] = env->getMethodID(cls, "outputToString", "(Lorg/apache/lucene/util/BytesRef;)Ljava/lang/String;");
              mids$[mid_ramBytesUsed_7bc03dd8] = env->getMethodID(cls, "ramBytesUsed", "(Lorg/apache/lucene/util/BytesRef;)J");
              mids$[mid_read_78c77a42] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_skipOutput_f5d6a551] = env->getMethodID(cls, "skipOutput", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_subtract_0991fadd] = env->getMethodID(cls, "subtract", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_write_178211b1] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::BytesRef ByteSequenceOutputs::add(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_add_0991fadd], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::BytesRef ByteSequenceOutputs::common(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_common_0991fadd], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::BytesRef ByteSequenceOutputs::getNoOutput() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getNoOutput_4ae19461]));
          }

          ByteSequenceOutputs ByteSequenceOutputs::getSingleton()
          {
            jclass cls = env->getClass(initializeClass);
            return ByteSequenceOutputs(env->callStaticObjectMethod(cls, mids$[mid_getSingleton_f61c4f3f]));
          }

          ::java::lang::String ByteSequenceOutputs::outputToString(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_edfda73b], a0.this$));
          }

          jlong ByteSequenceOutputs::ramBytesUsed(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_7bc03dd8], a0.this$);
          }

          ::org::apache::lucene::util::BytesRef ByteSequenceOutputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_read_78c77a42], a0.this$));
          }

          void ByteSequenceOutputs::skipOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skipOutput_f5d6a551], a0.this$);
          }

          ::org::apache::lucene::util::BytesRef ByteSequenceOutputs::subtract(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_subtract_0991fadd], a0.this$, a1.this$));
          }

          void ByteSequenceOutputs::write(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_178211b1], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_ByteSequenceOutputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ByteSequenceOutputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ByteSequenceOutputs_of_(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_add(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_common(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_getNoOutput(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_getSingleton(PyTypeObject *type);
          static PyObject *t_ByteSequenceOutputs_outputToString(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_ramBytesUsed(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_read(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_skipOutput(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_subtract(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_write(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_get__noOutput(t_ByteSequenceOutputs *self, void *data);
          static PyObject *t_ByteSequenceOutputs_get__singleton(t_ByteSequenceOutputs *self, void *data);
          static PyObject *t_ByteSequenceOutputs_get__parameters_(t_ByteSequenceOutputs *self, void *data);
          static PyGetSetDef t_ByteSequenceOutputs__fields_[] = {
            DECLARE_GET_FIELD(t_ByteSequenceOutputs, noOutput),
            DECLARE_GET_FIELD(t_ByteSequenceOutputs, singleton),
            DECLARE_GET_FIELD(t_ByteSequenceOutputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ByteSequenceOutputs__methods_[] = {
            DECLARE_METHOD(t_ByteSequenceOutputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ByteSequenceOutputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ByteSequenceOutputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, add, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, common, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, getNoOutput, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, getSingleton, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_ByteSequenceOutputs, outputToString, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, read, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, skipOutput, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ByteSequenceOutputs, t_ByteSequenceOutputs, ::org::apache::lucene::util::fst::Outputs, ByteSequenceOutputs, abstract_init, 0, 0, t_ByteSequenceOutputs__fields_, 0, 0);
          PyObject *t_ByteSequenceOutputs::wrap_Object(const ByteSequenceOutputs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ByteSequenceOutputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ByteSequenceOutputs *self = (t_ByteSequenceOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_ByteSequenceOutputs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ByteSequenceOutputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ByteSequenceOutputs *self = (t_ByteSequenceOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_ByteSequenceOutputs::install(PyObject *module)
          {
            installType(&PY_TYPE(ByteSequenceOutputs), module, "ByteSequenceOutputs", 0);
          }

          void t_ByteSequenceOutputs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ByteSequenceOutputs).tp_dict, "class_", make_descriptor(ByteSequenceOutputs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ByteSequenceOutputs).tp_dict, "wrapfn_", make_descriptor(t_ByteSequenceOutputs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ByteSequenceOutputs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ByteSequenceOutputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ByteSequenceOutputs::initializeClass, 1)))
              return NULL;
            return t_ByteSequenceOutputs::wrap_Object(ByteSequenceOutputs(((t_ByteSequenceOutputs *) arg)->object.this$));
          }
          static PyObject *t_ByteSequenceOutputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ByteSequenceOutputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ByteSequenceOutputs_of_(t_ByteSequenceOutputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_ByteSequenceOutputs_add(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_common(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "common", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_getNoOutput(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNoOutput());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "getNoOutput", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_getSingleton(PyTypeObject *type)
          {
            ByteSequenceOutputs result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::fst::ByteSequenceOutputs::getSingleton());
            return t_ByteSequenceOutputs::wrap_Object(result);
          }

          static PyObject *t_ByteSequenceOutputs_outputToString(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "outputToString", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_ramBytesUsed(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.ramBytesUsed(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_read(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_skipOutput(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.skipOutput(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "skipOutput", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_subtract(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "subtract", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_write(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "write", args, 2);
          }
          static PyObject *t_ByteSequenceOutputs_get__parameters_(t_ByteSequenceOutputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_ByteSequenceOutputs_get__noOutput(t_ByteSequenceOutputs *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_ByteSequenceOutputs_get__singleton(t_ByteSequenceOutputs *self, void *data)
          {
            ByteSequenceOutputs value((jobject) NULL);
            OBJ_CALL(value = self->object.getSingleton());
            return t_ByteSequenceOutputs::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Scorer$ChildScorer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Scorer$ChildScorer::class$ = NULL;
        jmethodID *Scorer$ChildScorer::mids$ = NULL;
        jfieldID *Scorer$ChildScorer::fids$ = NULL;
        bool Scorer$ChildScorer::live$ = false;

        jclass Scorer$ChildScorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Scorer$ChildScorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9c8e8bbe] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Scorer;Ljava/lang/String;)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_child] = env->getFieldID(cls, "child", "Lorg/apache/lucene/search/Scorer;");
            fids$[fid_relationship] = env->getFieldID(cls, "relationship", "Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Scorer$ChildScorer::Scorer$ChildScorer(const ::org::apache::lucene::search::Scorer & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9c8e8bbe, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::Scorer Scorer$ChildScorer::_get_child() const
        {
          return ::org::apache::lucene::search::Scorer(env->getObjectField(this$, fids$[fid_child]));
        }

        ::java::lang::String Scorer$ChildScorer::_get_relationship() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_relationship]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Scorer$ChildScorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Scorer$ChildScorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Scorer$ChildScorer_init_(t_Scorer$ChildScorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Scorer$ChildScorer_get__child(t_Scorer$ChildScorer *self, void *data);
        static PyObject *t_Scorer$ChildScorer_get__relationship(t_Scorer$ChildScorer *self, void *data);

        static PyGetSetDef t_Scorer$ChildScorer__fields_[] = {
          DECLARE_GET_FIELD(t_Scorer$ChildScorer, child),
          DECLARE_GET_FIELD(t_Scorer$ChildScorer, relationship),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Scorer$ChildScorer__methods_[] = {
          DECLARE_METHOD(t_Scorer$ChildScorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Scorer$ChildScorer, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Scorer$ChildScorer, t_Scorer$ChildScorer, ::java::lang::Object, Scorer$ChildScorer, t_Scorer$ChildScorer_init_, 0, 0, t_Scorer$ChildScorer__fields_, 0, 0);

        void t_Scorer$ChildScorer::install(PyObject *module)
        {
          installType(&PY_TYPE(Scorer$ChildScorer), module, "Scorer$ChildScorer", 0);
        }

        void t_Scorer$ChildScorer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Scorer$ChildScorer).tp_dict, "class_", make_descriptor(Scorer$ChildScorer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Scorer$ChildScorer).tp_dict, "wrapfn_", make_descriptor(t_Scorer$ChildScorer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Scorer$ChildScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Scorer$ChildScorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Scorer$ChildScorer::initializeClass, 1)))
            return NULL;
          return t_Scorer$ChildScorer::wrap_Object(Scorer$ChildScorer(((t_Scorer$ChildScorer *) arg)->object.this$));
        }
        static PyObject *t_Scorer$ChildScorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Scorer$ChildScorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Scorer$ChildScorer_init_(t_Scorer$ChildScorer *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          Scorer$ChildScorer object((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::search::Scorer::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Scorer$ChildScorer(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Scorer$ChildScorer_get__child(t_Scorer$ChildScorer *self, void *data)
        {
          ::org::apache::lucene::search::Scorer value((jobject) NULL);
          OBJ_CALL(value = self->object._get_child());
          return ::org::apache::lucene::search::t_Scorer::wrap_Object(value);
        }

        static PyObject *t_Scorer$ChildScorer_get__relationship(t_Scorer$ChildScorer *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_relationship());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntBlockPool.h"
#include "org/apache/lucene/util/IntBlockPool$Allocator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntBlockPool::class$ = NULL;
        jmethodID *IntBlockPool::mids$ = NULL;
        jfieldID *IntBlockPool::fids$ = NULL;
        bool IntBlockPool::live$ = false;
        jint IntBlockPool::INT_BLOCK_MASK = (jint) 0;
        jint IntBlockPool::INT_BLOCK_SHIFT = (jint) 0;
        jint IntBlockPool::INT_BLOCK_SIZE = (jint) 0;

        jclass IntBlockPool::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntBlockPool");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_112445b3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/IntBlockPool$Allocator;)V");
            mids$[mid_nextBuffer_54c6a166] = env->getMethodID(cls, "nextBuffer", "()V");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_reset_46f2e2c4] = env->getMethodID(cls, "reset", "(ZZ)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_buffer] = env->getFieldID(cls, "buffer", "[I");
            fids$[fid_buffers] = env->getFieldID(cls, "buffers", "[[I");
            fids$[fid_intOffset] = env->getFieldID(cls, "intOffset", "I");
            fids$[fid_intUpto] = env->getFieldID(cls, "intUpto", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            INT_BLOCK_MASK = env->getStaticIntField(cls, "INT_BLOCK_MASK");
            INT_BLOCK_SHIFT = env->getStaticIntField(cls, "INT_BLOCK_SHIFT");
            INT_BLOCK_SIZE = env->getStaticIntField(cls, "INT_BLOCK_SIZE");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntBlockPool::IntBlockPool() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        IntBlockPool::IntBlockPool(const ::org::apache::lucene::util::IntBlockPool$Allocator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_112445b3, a0.this$)) {}

        void IntBlockPool::nextBuffer() const
        {
          env->callVoidMethod(this$, mids$[mid_nextBuffer_54c6a166]);
        }

        void IntBlockPool::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }

        void IntBlockPool::reset(jboolean a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_46f2e2c4], a0, a1);
        }

        JArray< jint > IntBlockPool::_get_buffer() const
        {
          return JArray< jint >(env->getObjectField(this$, fids$[fid_buffer]));
        }

        void IntBlockPool::_set_buffer(const JArray< jint > & a0) const
        {
          env->setObjectField(this$, fids$[fid_buffer], a0.this$);
        }

        JArray< JArray< jint > > IntBlockPool::_get_buffers() const
        {
          return JArray< JArray< jint > >(env->getObjectField(this$, fids$[fid_buffers]));
        }

        void IntBlockPool::_set_buffers(const JArray< JArray< jint > > & a0) const
        {
          env->setObjectField(this$, fids$[fid_buffers], a0.this$);
        }

        jint IntBlockPool::_get_intOffset() const
        {
          return env->getIntField(this$, fids$[fid_intOffset]);
        }

        void IntBlockPool::_set_intOffset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_intOffset], a0);
        }

        jint IntBlockPool::_get_intUpto() const
        {
          return env->getIntField(this$, fids$[fid_intUpto]);
        }

        void IntBlockPool::_set_intUpto(jint a0) const
        {
          env->setIntField(this$, fids$[fid_intUpto], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/IntBlockPool$SliceReader.h"
#include "org/apache/lucene/util/IntBlockPool$SliceWriter.h"
#include "org/apache/lucene/util/IntBlockPool$DirectAllocator.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntBlockPool_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntBlockPool_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntBlockPool_init_(t_IntBlockPool *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntBlockPool_nextBuffer(t_IntBlockPool *self);
        static PyObject *t_IntBlockPool_reset(t_IntBlockPool *self, PyObject *args);
        static PyObject *t_IntBlockPool_get__buffer(t_IntBlockPool *self, void *data);
        static int t_IntBlockPool_set__buffer(t_IntBlockPool *self, PyObject *arg, void *data);
        static PyObject *t_IntBlockPool_get__buffers(t_IntBlockPool *self, void *data);
        static int t_IntBlockPool_set__buffers(t_IntBlockPool *self, PyObject *arg, void *data);
        static PyObject *t_IntBlockPool_get__intOffset(t_IntBlockPool *self, void *data);
        static int t_IntBlockPool_set__intOffset(t_IntBlockPool *self, PyObject *arg, void *data);
        static PyObject *t_IntBlockPool_get__intUpto(t_IntBlockPool *self, void *data);
        static int t_IntBlockPool_set__intUpto(t_IntBlockPool *self, PyObject *arg, void *data);

        static PyGetSetDef t_IntBlockPool__fields_[] = {
          DECLARE_GETSET_FIELD(t_IntBlockPool, buffer),
          DECLARE_GETSET_FIELD(t_IntBlockPool, buffers),
          DECLARE_GETSET_FIELD(t_IntBlockPool, intOffset),
          DECLARE_GETSET_FIELD(t_IntBlockPool, intUpto),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IntBlockPool__methods_[] = {
          DECLARE_METHOD(t_IntBlockPool, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool, nextBuffer, METH_NOARGS),
          DECLARE_METHOD(t_IntBlockPool, reset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntBlockPool, t_IntBlockPool, ::java::lang::Object, IntBlockPool, t_IntBlockPool_init_, 0, 0, t_IntBlockPool__fields_, 0, 0);

        void t_IntBlockPool::install(PyObject *module)
        {
          installType(&PY_TYPE(IntBlockPool), module, "IntBlockPool", 0);
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "SliceReader", make_descriptor(&PY_TYPE(IntBlockPool$SliceReader)));
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "SliceWriter", make_descriptor(&PY_TYPE(IntBlockPool$SliceWriter)));
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "DirectAllocator", make_descriptor(&PY_TYPE(IntBlockPool$DirectAllocator)));
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "Allocator", make_descriptor(&PY_TYPE(IntBlockPool$Allocator)));
        }

        void t_IntBlockPool::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "class_", make_descriptor(IntBlockPool::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "wrapfn_", make_descriptor(t_IntBlockPool::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IntBlockPool::initializeClass);
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "INT_BLOCK_MASK", make_descriptor(IntBlockPool::INT_BLOCK_MASK));
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "INT_BLOCK_SHIFT", make_descriptor(IntBlockPool::INT_BLOCK_SHIFT));
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "INT_BLOCK_SIZE", make_descriptor(IntBlockPool::INT_BLOCK_SIZE));
        }

        static PyObject *t_IntBlockPool_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntBlockPool::initializeClass, 1)))
            return NULL;
          return t_IntBlockPool::wrap_Object(IntBlockPool(((t_IntBlockPool *) arg)->object.this$));
        }
        static PyObject *t_IntBlockPool_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntBlockPool::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntBlockPool_init_(t_IntBlockPool *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              IntBlockPool object((jobject) NULL);

              INT_CALL(object = IntBlockPool());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::org::apache::lucene::util::IntBlockPool$Allocator a0((jobject) NULL);
              IntBlockPool object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::IntBlockPool$Allocator::initializeClass, &a0))
              {
                INT_CALL(object = IntBlockPool(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IntBlockPool_nextBuffer(t_IntBlockPool *self)
        {
          OBJ_CALL(self->object.nextBuffer());
          Py_RETURN_NONE;
        }

        static PyObject *t_IntBlockPool_reset(t_IntBlockPool *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }
            break;
           case 2:
            {
              jboolean a0;
              jboolean a1;

              if (!parseArgs(args, "ZZ", &a0, &a1))
              {
                OBJ_CALL(self->object.reset(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "reset", args);
          return NULL;
        }

        static PyObject *t_IntBlockPool_get__buffer(t_IntBlockPool *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_buffer());
          return value.wrap();
        }
        static int t_IntBlockPool_set__buffer(t_IntBlockPool *self, PyObject *arg, void *data)
        {
          JArray< jint > value((jobject) NULL);
          if (!parseArg(arg, "[I", &value))
          {
            INT_CALL(self->object._set_buffer(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "buffer", arg);
          return -1;
        }

        static PyObject *t_IntBlockPool_get__buffers(t_IntBlockPool *self, void *data)
        {
          JArray< JArray< jint > > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_buffers());
          return JArray<jobject>(value.this$).wrap(NULL);
        }
        static int t_IntBlockPool_set__buffers(t_IntBlockPool *self, PyObject *arg, void *data)
        {
          JArray< JArray< jint > > value((jobject) NULL);
          if (!parseArg(arg, "[[I", &value))
          {
            INT_CALL(self->object._set_buffers(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "buffers", arg);
          return -1;
        }

        static PyObject *t_IntBlockPool_get__intOffset(t_IntBlockPool *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_intOffset());
          return PyInt_FromLong((long) value);
        }
        static int t_IntBlockPool_set__intOffset(t_IntBlockPool *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_intOffset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "intOffset", arg);
          return -1;
        }

        static PyObject *t_IntBlockPool_get__intUpto(t_IntBlockPool *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_intUpto());
          return PyInt_FromLong((long) value);
        }
        static int t_IntBlockPool_set__intUpto(t_IntBlockPool *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_intUpto(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "intUpto", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonAttributeImpl.h"
#include "java/lang/Object.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonAttributeImpl::class$ = NULL;
        jmethodID *PythonAttributeImpl::mids$ = NULL;
        bool PythonAttributeImpl::live$ = false;

        jclass PythonAttributeImpl::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonAttributeImpl");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonAttributeImpl::PythonAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean PythonAttributeImpl::equals(const ::java::lang::Object & a0) const
        {
          return env->callNonvirtualBooleanMethod(this$, (jclass) ::org::apache::lucene::util::AttributeImpl::class$->this$, ::java::lang::Object::mids$[::java::lang::Object::mid_equals_290588e2], a0.this$);
        }

        void PythonAttributeImpl::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jint PythonAttributeImpl::hashCode() const
        {
          return env->callNonvirtualIntMethod(this$, (jclass) ::org::apache::lucene::util::AttributeImpl::class$->this$, ::java::lang::Object::mids$[::java::lang::Object::mid_hashCode_54c6a179]);
        }

        jlong PythonAttributeImpl::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonAttributeImpl::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonAttributeImpl_init_(t_PythonAttributeImpl *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonAttributeImpl_equals(t_PythonAttributeImpl *self, PyObject *args);
        static PyObject *t_PythonAttributeImpl_finalize(t_PythonAttributeImpl *self);
        static PyObject *t_PythonAttributeImpl_hashCode(t_PythonAttributeImpl *self, PyObject *args);
        static PyObject *t_PythonAttributeImpl_pythonExtension(t_PythonAttributeImpl *self, PyObject *args);
        static void JNICALL t_PythonAttributeImpl_clear0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonAttributeImpl_copyTo1(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonAttributeImpl_equals2(JNIEnv *jenv, jobject jobj, jobject a0);
        static jint JNICALL t_PythonAttributeImpl_hashCode3(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonAttributeImpl_pythonDecRef4(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonAttributeImpl_get__self(t_PythonAttributeImpl *self, void *data);
        static PyGetSetDef t_PythonAttributeImpl__fields_[] = {
          DECLARE_GET_FIELD(t_PythonAttributeImpl, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonAttributeImpl__methods_[] = {
          DECLARE_METHOD(t_PythonAttributeImpl, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonAttributeImpl, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonAttributeImpl, equals, METH_VARARGS),
          DECLARE_METHOD(t_PythonAttributeImpl, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonAttributeImpl, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_PythonAttributeImpl, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonAttributeImpl, t_PythonAttributeImpl, ::org::apache::lucene::util::AttributeImpl, PythonAttributeImpl, t_PythonAttributeImpl_init_, 0, 0, t_PythonAttributeImpl__fields_, 0, 0);

        void t_PythonAttributeImpl::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonAttributeImpl), module, "PythonAttributeImpl", 1);
        }

        void t_PythonAttributeImpl::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonAttributeImpl).tp_dict, "class_", make_descriptor(PythonAttributeImpl::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_PythonAttributeImpl::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonAttributeImpl::initializeClass);
          JNINativeMethod methods[] = {
            { "clear", "()V", (void *) t_PythonAttributeImpl_clear0 },
            { "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V", (void *) t_PythonAttributeImpl_copyTo1 },
            { "equals", "(Ljava/lang/Object;)Z", (void *) t_PythonAttributeImpl_equals2 },
            { "hashCode", "()I", (void *) t_PythonAttributeImpl_hashCode3 },
            { "pythonDecRef", "()V", (void *) t_PythonAttributeImpl_pythonDecRef4 },
          };
          env->registerNatives(cls, methods, 5);
        }

        static PyObject *t_PythonAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonAttributeImpl::initializeClass, 1)))
            return NULL;
          return t_PythonAttributeImpl::wrap_Object(PythonAttributeImpl(((t_PythonAttributeImpl *) arg)->object.this$));
        }
        static PyObject *t_PythonAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonAttributeImpl::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonAttributeImpl_init_(t_PythonAttributeImpl *self, PyObject *args, PyObject *kwds)
        {
          PythonAttributeImpl object((jobject) NULL);

          INT_CALL(object = PythonAttributeImpl());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonAttributeImpl_equals(t_PythonAttributeImpl *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PythonAttributeImpl), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PythonAttributeImpl_finalize(t_PythonAttributeImpl *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonAttributeImpl_hashCode(t_PythonAttributeImpl *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(PythonAttributeImpl), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_PythonAttributeImpl_pythonExtension(t_PythonAttributeImpl *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static void JNICALL t_PythonAttributeImpl_clear0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAttributeImpl::mids$[PythonAttributeImpl::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "clear", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonAttributeImpl_copyTo1(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAttributeImpl::mids$[PythonAttributeImpl::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = ::org::apache::lucene::util::t_AttributeImpl::wrap_Object(::org::apache::lucene::util::AttributeImpl(a0));
          PyObject *result = PyObject_CallMethod(obj, "copyTo", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jboolean JNICALL t_PythonAttributeImpl_equals2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAttributeImpl::mids$[PythonAttributeImpl::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "equals", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("equals", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jint JNICALL t_PythonAttributeImpl_hashCode3(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAttributeImpl::mids$[PythonAttributeImpl::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *result = PyObject_CallMethod(obj, "hashCode", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("hashCode", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static void JNICALL t_PythonAttributeImpl_pythonDecRef4(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAttributeImpl::mids$[PythonAttributeImpl::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonAttributeImpl::mids$[PythonAttributeImpl::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonAttributeImpl_get__self(t_PythonAttributeImpl *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/PayloadHelper.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *PayloadHelper::class$ = NULL;
          jmethodID *PayloadHelper::mids$ = NULL;
          bool PayloadHelper::live$ = false;

          jclass PayloadHelper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/PayloadHelper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_decodeFloat_49b4f13b] = env->getStaticMethodID(cls, "decodeFloat", "([B)F");
              mids$[mid_decodeFloat_b8354c53] = env->getStaticMethodID(cls, "decodeFloat", "([BI)F");
              mids$[mid_decodeInt_b8354c5c] = env->getStaticMethodID(cls, "decodeInt", "([BI)I");
              mids$[mid_encodeFloat_909f9221] = env->getStaticMethodID(cls, "encodeFloat", "(F)[B");
              mids$[mid_encodeFloat_a555a4d0] = env->getStaticMethodID(cls, "encodeFloat", "(F[BI)[B");
              mids$[mid_encodeInt_b4292e98] = env->getStaticMethodID(cls, "encodeInt", "(I)[B");
              mids$[mid_encodeInt_1bd14047] = env->getStaticMethodID(cls, "encodeInt", "(I[BI)[B");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PayloadHelper::PayloadHelper() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat PayloadHelper::decodeFloat(const JArray< jbyte > & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticFloatMethod(cls, mids$[mid_decodeFloat_49b4f13b], a0.this$);
          }

          jfloat PayloadHelper::decodeFloat(const JArray< jbyte > & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticFloatMethod(cls, mids$[mid_decodeFloat_b8354c53], a0.this$, a1);
          }

          jint PayloadHelper::decodeInt(const JArray< jbyte > & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_decodeInt_b8354c5c], a0.this$, a1);
          }

          JArray< jbyte > PayloadHelper::encodeFloat(jfloat a0)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_encodeFloat_909f9221], a0));
          }

          JArray< jbyte > PayloadHelper::encodeFloat(jfloat a0, const JArray< jbyte > & a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_encodeFloat_a555a4d0], a0, a1.this$, a2));
          }

          JArray< jbyte > PayloadHelper::encodeInt(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_encodeInt_b4292e98], a0));
          }

          JArray< jbyte > PayloadHelper::encodeInt(jint a0, const JArray< jbyte > & a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_encodeInt_1bd14047], a0, a1.this$, a2));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_PayloadHelper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadHelper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PayloadHelper_init_(t_PayloadHelper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PayloadHelper_decodeFloat(PyTypeObject *type, PyObject *args);
          static PyObject *t_PayloadHelper_decodeInt(PyTypeObject *type, PyObject *args);
          static PyObject *t_PayloadHelper_encodeFloat(PyTypeObject *type, PyObject *args);
          static PyObject *t_PayloadHelper_encodeInt(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_PayloadHelper__methods_[] = {
            DECLARE_METHOD(t_PayloadHelper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadHelper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadHelper, decodeFloat, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PayloadHelper, decodeInt, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PayloadHelper, encodeFloat, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PayloadHelper, encodeInt, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadHelper, t_PayloadHelper, ::java::lang::Object, PayloadHelper, t_PayloadHelper_init_, 0, 0, 0, 0, 0);

          void t_PayloadHelper::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadHelper), module, "PayloadHelper", 0);
          }

          void t_PayloadHelper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadHelper).tp_dict, "class_", make_descriptor(PayloadHelper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadHelper).tp_dict, "wrapfn_", make_descriptor(t_PayloadHelper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadHelper).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadHelper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadHelper::initializeClass, 1)))
              return NULL;
            return t_PayloadHelper::wrap_Object(PayloadHelper(((t_PayloadHelper *) arg)->object.this$));
          }
          static PyObject *t_PayloadHelper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadHelper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PayloadHelper_init_(t_PayloadHelper *self, PyObject *args, PyObject *kwds)
          {
            PayloadHelper object((jobject) NULL);

            INT_CALL(object = PayloadHelper());
            self->object = object;

            return 0;
          }

          static PyObject *t_PayloadHelper_decodeFloat(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< jbyte > a0((jobject) NULL);
                jfloat result;

                if (!parseArgs(args, "[B", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::decodeFloat(a0));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 2:
              {
                JArray< jbyte > a0((jobject) NULL);
                jint a1;
                jfloat result;

                if (!parseArgs(args, "[BI", &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::decodeFloat(a0, a1));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            PyErr_SetArgsError(type, "decodeFloat", args);
            return NULL;
          }

          static PyObject *t_PayloadHelper_decodeInt(PyTypeObject *type, PyObject *args)
          {
            JArray< jbyte > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[BI", &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::decodeInt(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "decodeInt", args);
            return NULL;
          }

          static PyObject *t_PayloadHelper_encodeFloat(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jfloat a0;
                JArray< jbyte > result((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::encodeFloat(a0));
                  return result.wrap();
                }
              }
              break;
             case 3:
              {
                jfloat a0;
                JArray< jbyte > a1((jobject) NULL);
                jint a2;
                JArray< jbyte > result((jobject) NULL);

                if (!parseArgs(args, "F[BI", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::encodeFloat(a0, a1, a2));
                  return result.wrap();
                }
              }
            }

            PyErr_SetArgsError(type, "encodeFloat", args);
            return NULL;
          }

          static PyObject *t_PayloadHelper_encodeInt(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                JArray< jbyte > result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::encodeInt(a0));
                  return result.wrap();
                }
              }
              break;
             case 3:
              {
                jint a0;
                JArray< jbyte > a1((jobject) NULL);
                jint a2;
                JArray< jbyte > result((jobject) NULL);

                if (!parseArgs(args, "I[BI", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::encodeInt(a0, a1, a2));
                  return result.wrap();
                }
              }
            }

            PyErr_SetArgsError(type, "encodeInt", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fi/FinnishLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {

          ::java::lang::Class *FinnishLightStemFilter::class$ = NULL;
          jmethodID *FinnishLightStemFilter::mids$ = NULL;
          bool FinnishLightStemFilter::live$ = false;

          jclass FinnishLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fi/FinnishLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FinnishLightStemFilter::FinnishLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean FinnishLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {
          static PyObject *t_FinnishLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FinnishLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FinnishLightStemFilter_init_(t_FinnishLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FinnishLightStemFilter_incrementToken(t_FinnishLightStemFilter *self, PyObject *args);

          static PyMethodDef t_FinnishLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_FinnishLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FinnishLightStemFilter, t_FinnishLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, FinnishLightStemFilter, t_FinnishLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_FinnishLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(FinnishLightStemFilter), module, "FinnishLightStemFilter", 0);
          }

          void t_FinnishLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FinnishLightStemFilter).tp_dict, "class_", make_descriptor(FinnishLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FinnishLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_FinnishLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FinnishLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FinnishLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FinnishLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_FinnishLightStemFilter::wrap_Object(FinnishLightStemFilter(((t_FinnishLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_FinnishLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FinnishLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FinnishLightStemFilter_init_(t_FinnishLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            FinnishLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = FinnishLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FinnishLightStemFilter_incrementToken(t_FinnishLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FinnishLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Reader.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Reader::class$ = NULL;
          jmethodID *PackedInts$Reader::mids$ = NULL;
          bool PackedInts$Reader::live$ = false;

          jclass PackedInts$Reader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Reader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_get_d80d4c9e] = env->getMethodID(cls, "get", "(I[JII)I");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts$Reader::PackedInts$Reader() : ::org::apache::lucene::index::NumericDocValues(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint PackedInts$Reader::get(jint a0, const JArray< jlong > & a1, jint a2, jint a3) const
          {
            return env->callIntMethod(this$, mids$[mid_get_d80d4c9e], a0, a1.this$, a2, a3);
          }

          jint PackedInts$Reader::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Reader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Reader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedInts$Reader_init_(t_PackedInts$Reader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedInts$Reader_get(t_PackedInts$Reader *self, PyObject *args);
          static PyObject *t_PackedInts$Reader_size(t_PackedInts$Reader *self);

          static PyMethodDef t_PackedInts$Reader__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Reader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Reader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Reader, get, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Reader, size, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$Reader, t_PackedInts$Reader, ::org::apache::lucene::index::NumericDocValues, PackedInts$Reader, t_PackedInts$Reader_init_, 0, 0, 0, 0, 0);

          void t_PackedInts$Reader::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Reader), module, "PackedInts$Reader", 0);
          }

          void t_PackedInts$Reader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$Reader).tp_dict, "class_", make_descriptor(PackedInts$Reader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$Reader).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$Reader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$Reader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$Reader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Reader::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Reader::wrap_Object(PackedInts$Reader(((t_PackedInts$Reader *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Reader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Reader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedInts$Reader_init_(t_PackedInts$Reader *self, PyObject *args, PyObject *kwds)
          {
            PackedInts$Reader object((jobject) NULL);

            INT_CALL(object = PackedInts$Reader());
            self->object = object;

            return 0;
          }

          static PyObject *t_PackedInts$Reader_get(t_PackedInts$Reader *self, PyObject *args)
          {
            jint a0;
            JArray< jlong > a1((jobject) NULL);
            jint a2;
            jint a3;
            jint result;

            if (!parseArgs(args, "I[JII", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.get(a0, a1, a2, a3));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PackedInts$Reader), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_PackedInts$Reader_size(t_PackedInts$Reader *self)
          {
            jint result;
            OBJ_CALL(result = self->object.size());
            return PyInt_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/BooleanFilterBuilder.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *BooleanFilterBuilder::class$ = NULL;
            jmethodID *BooleanFilterBuilder::mids$ = NULL;
            bool BooleanFilterBuilder::live$ = false;

            jclass BooleanFilterBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/BooleanFilterBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_26bb3a92] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/FilterBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BooleanFilterBuilder::BooleanFilterBuilder(const ::org::apache::lucene::queryparser::xml::FilterBuilder & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_26bb3a92, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_BooleanFilterBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BooleanFilterBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BooleanFilterBuilder_init_(t_BooleanFilterBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_BooleanFilterBuilder__methods_[] = {
              DECLARE_METHOD(t_BooleanFilterBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BooleanFilterBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BooleanFilterBuilder, t_BooleanFilterBuilder, ::java::lang::Object, BooleanFilterBuilder, t_BooleanFilterBuilder_init_, 0, 0, 0, 0, 0);

            void t_BooleanFilterBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(BooleanFilterBuilder), module, "BooleanFilterBuilder", 0);
            }

            void t_BooleanFilterBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BooleanFilterBuilder).tp_dict, "class_", make_descriptor(BooleanFilterBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BooleanFilterBuilder).tp_dict, "wrapfn_", make_descriptor(t_BooleanFilterBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BooleanFilterBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BooleanFilterBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BooleanFilterBuilder::initializeClass, 1)))
                return NULL;
              return t_BooleanFilterBuilder::wrap_Object(BooleanFilterBuilder(((t_BooleanFilterBuilder *) arg)->object.this$));
            }
            static PyObject *t_BooleanFilterBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BooleanFilterBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BooleanFilterBuilder_init_(t_BooleanFilterBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::FilterBuilder a0((jobject) NULL);
              BooleanFilterBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::FilterBuilder::initializeClass, &a0))
              {
                INT_CALL(object = BooleanFilterBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OpenBitSet.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Cloneable.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OpenBitSet::class$ = NULL;
        jmethodID *OpenBitSet::mids$ = NULL;
        bool OpenBitSet::live$ = false;

        jclass OpenBitSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OpenBitSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_0ee6df2f] = env->getMethodID(cls, "<init>", "(J)V");
            mids$[mid_init$_ce93dbcb] = env->getMethodID(cls, "<init>", "([JI)V");
            mids$[mid_and_c2540e4f] = env->getMethodID(cls, "and", "(Lorg/apache/lucene/util/OpenBitSet;)V");
            mids$[mid_andNot_c2540e4f] = env->getMethodID(cls, "andNot", "(Lorg/apache/lucene/util/OpenBitSet;)V");
            mids$[mid_andNotCount_52061930] = env->getStaticMethodID(cls, "andNotCount", "(Lorg/apache/lucene/util/OpenBitSet;Lorg/apache/lucene/util/OpenBitSet;)J");
            mids$[mid_bits_03c2457d] = env->getMethodID(cls, "bits", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_bits2words_0ee6df30] = env->getStaticMethodID(cls, "bits2words", "(J)I");
            mids$[mid_capacity_54c6a17a] = env->getMethodID(cls, "capacity", "()J");
            mids$[mid_cardinality_54c6a17a] = env->getMethodID(cls, "cardinality", "()J");
            mids$[mid_clear_0ee6df2f] = env->getMethodID(cls, "clear", "(J)V");
            mids$[mid_clear_a7e12ca4] = env->getMethodID(cls, "clear", "(JJ)V");
            mids$[mid_clear_d8d154a6] = env->getMethodID(cls, "clear", "(II)V");
            mids$[mid_clone_23f9e142] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/OpenBitSet;");
            mids$[mid_ensureCapacity_0ee6df2f] = env->getMethodID(cls, "ensureCapacity", "(J)V");
            mids$[mid_ensureCapacityWords_39c7bd3c] = env->getMethodID(cls, "ensureCapacityWords", "(I)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_fastClear_39c7bd3c] = env->getMethodID(cls, "fastClear", "(I)V");
            mids$[mid_fastClear_0ee6df2f] = env->getMethodID(cls, "fastClear", "(J)V");
            mids$[mid_fastFlip_0ee6df2f] = env->getMethodID(cls, "fastFlip", "(J)V");
            mids$[mid_fastFlip_39c7bd3c] = env->getMethodID(cls, "fastFlip", "(I)V");
            mids$[mid_fastGet_39c7bd30] = env->getMethodID(cls, "fastGet", "(I)Z");
            mids$[mid_fastGet_0ee6df23] = env->getMethodID(cls, "fastGet", "(J)Z");
            mids$[mid_fastSet_39c7bd3c] = env->getMethodID(cls, "fastSet", "(I)V");
            mids$[mid_fastSet_0ee6df2f] = env->getMethodID(cls, "fastSet", "(J)V");
            mids$[mid_flip_0ee6df2f] = env->getMethodID(cls, "flip", "(J)V");
            mids$[mid_flip_a7e12ca4] = env->getMethodID(cls, "flip", "(JJ)V");
            mids$[mid_flipAndGet_0ee6df23] = env->getMethodID(cls, "flipAndGet", "(J)Z");
            mids$[mid_flipAndGet_39c7bd30] = env->getMethodID(cls, "flipAndGet", "(I)Z");
            mids$[mid_get_0ee6df23] = env->getMethodID(cls, "get", "(J)Z");
            mids$[mid_get_39c7bd30] = env->getMethodID(cls, "get", "(I)Z");
            mids$[mid_getAndSet_0ee6df23] = env->getMethodID(cls, "getAndSet", "(J)Z");
            mids$[mid_getAndSet_39c7bd30] = env->getMethodID(cls, "getAndSet", "(I)Z");
            mids$[mid_getBit_39c7bd23] = env->getMethodID(cls, "getBit", "(I)I");
            mids$[mid_getBits_dab10e76] = env->getMethodID(cls, "getBits", "()[J");
            mids$[mid_getNumWords_54c6a179] = env->getMethodID(cls, "getNumWords", "()I");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_intersect_c2540e4f] = env->getMethodID(cls, "intersect", "(Lorg/apache/lucene/util/OpenBitSet;)V");
            mids$[mid_intersectionCount_52061930] = env->getStaticMethodID(cls, "intersectionCount", "(Lorg/apache/lucene/util/OpenBitSet;Lorg/apache/lucene/util/OpenBitSet;)J");
            mids$[mid_intersects_c2540e43] = env->getMethodID(cls, "intersects", "(Lorg/apache/lucene/util/OpenBitSet;)Z");
            mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
            mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
            mids$[mid_iterator_dc23660c] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
            mids$[mid_nextSetBit_39c7bd23] = env->getMethodID(cls, "nextSetBit", "(I)I");
            mids$[mid_nextSetBit_0ee6df33] = env->getMethodID(cls, "nextSetBit", "(J)J");
            mids$[mid_or_c2540e4f] = env->getMethodID(cls, "or", "(Lorg/apache/lucene/util/OpenBitSet;)V");
            mids$[mid_prevSetBit_0ee6df33] = env->getMethodID(cls, "prevSetBit", "(J)J");
            mids$[mid_prevSetBit_39c7bd23] = env->getMethodID(cls, "prevSetBit", "(I)I");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_remove_c2540e4f] = env->getMethodID(cls, "remove", "(Lorg/apache/lucene/util/OpenBitSet;)V");
            mids$[mid_set_0ee6df2f] = env->getMethodID(cls, "set", "(J)V");
            mids$[mid_set_a7e12ca4] = env->getMethodID(cls, "set", "(JJ)V");
            mids$[mid_size_54c6a17a] = env->getMethodID(cls, "size", "()J");
            mids$[mid_trimTrailingZeros_54c6a166] = env->getMethodID(cls, "trimTrailingZeros", "()V");
            mids$[mid_union_c2540e4f] = env->getMethodID(cls, "union", "(Lorg/apache/lucene/util/OpenBitSet;)V");
            mids$[mid_unionCount_52061930] = env->getStaticMethodID(cls, "unionCount", "(Lorg/apache/lucene/util/OpenBitSet;Lorg/apache/lucene/util/OpenBitSet;)J");
            mids$[mid_xor_c2540e4f] = env->getMethodID(cls, "xor", "(Lorg/apache/lucene/util/OpenBitSet;)V");
            mids$[mid_xorCount_52061930] = env->getStaticMethodID(cls, "xorCount", "(Lorg/apache/lucene/util/OpenBitSet;Lorg/apache/lucene/util/OpenBitSet;)J");
            mids$[mid_expandingWordNum_0ee6df30] = env->getMethodID(cls, "expandingWordNum", "(J)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OpenBitSet::OpenBitSet() : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        OpenBitSet::OpenBitSet(jlong a0) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_0ee6df2f, a0)) {}

        OpenBitSet::OpenBitSet(const JArray< jlong > & a0, jint a1) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_ce93dbcb, a0.this$, a1)) {}

        void OpenBitSet::and$(const OpenBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_and_c2540e4f], a0.this$);
        }

        void OpenBitSet::andNot(const OpenBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_andNot_c2540e4f], a0.this$);
        }

        jlong OpenBitSet::andNotCount(const OpenBitSet & a0, const OpenBitSet & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_andNotCount_52061930], a0.this$, a1.this$);
        }

        ::org::apache::lucene::util::Bits OpenBitSet::bits() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_bits_03c2457d]));
        }

        jint OpenBitSet::bits2words(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_bits2words_0ee6df30], a0);
        }

        jlong OpenBitSet::capacity() const
        {
          return env->callLongMethod(this$, mids$[mid_capacity_54c6a17a]);
        }

        jlong OpenBitSet::cardinality() const
        {
          return env->callLongMethod(this$, mids$[mid_cardinality_54c6a17a]);
        }

        void OpenBitSet::clear(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_0ee6df2f], a0);
        }

        void OpenBitSet::clear(jlong a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_a7e12ca4], a0, a1);
        }

        void OpenBitSet::clear(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_d8d154a6], a0, a1);
        }

        OpenBitSet OpenBitSet::clone() const
        {
          return OpenBitSet(env->callObjectMethod(this$, mids$[mid_clone_23f9e142]));
        }

        void OpenBitSet::ensureCapacity(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_ensureCapacity_0ee6df2f], a0);
        }

        void OpenBitSet::ensureCapacityWords(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_ensureCapacityWords_39c7bd3c], a0);
        }

        jboolean OpenBitSet::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void OpenBitSet::fastClear(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_fastClear_39c7bd3c], a0);
        }

        void OpenBitSet::fastClear(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_fastClear_0ee6df2f], a0);
        }

        void OpenBitSet::fastFlip(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_fastFlip_0ee6df2f], a0);
        }

        void OpenBitSet::fastFlip(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_fastFlip_39c7bd3c], a0);
        }

        jboolean OpenBitSet::fastGet(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fastGet_39c7bd30], a0);
        }

        jboolean OpenBitSet::fastGet(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fastGet_0ee6df23], a0);
        }

        void OpenBitSet::fastSet(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_fastSet_39c7bd3c], a0);
        }

        void OpenBitSet::fastSet(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_fastSet_0ee6df2f], a0);
        }

        void OpenBitSet::flip(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_flip_0ee6df2f], a0);
        }

        void OpenBitSet::flip(jlong a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_flip_a7e12ca4], a0, a1);
        }

        jboolean OpenBitSet::flipAndGet(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_flipAndGet_0ee6df23], a0);
        }

        jboolean OpenBitSet::flipAndGet(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_flipAndGet_39c7bd30], a0);
        }

        jboolean OpenBitSet::get(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_0ee6df23], a0);
        }

        jboolean OpenBitSet::get(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_39c7bd30], a0);
        }

        jboolean OpenBitSet::getAndSet(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_getAndSet_0ee6df23], a0);
        }

        jboolean OpenBitSet::getAndSet(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_getAndSet_39c7bd30], a0);
        }

        jint OpenBitSet::getBit(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getBit_39c7bd23], a0);
        }

        JArray< jlong > OpenBitSet::getBits() const
        {
          return JArray< jlong >(env->callObjectMethod(this$, mids$[mid_getBits_dab10e76]));
        }

        jint OpenBitSet::getNumWords() const
        {
          return env->callIntMethod(this$, mids$[mid_getNumWords_54c6a179]);
        }

        jint OpenBitSet::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        void OpenBitSet::intersect(const OpenBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_intersect_c2540e4f], a0.this$);
        }

        jlong OpenBitSet::intersectionCount(const OpenBitSet & a0, const OpenBitSet & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_intersectionCount_52061930], a0.this$, a1.this$);
        }

        jboolean OpenBitSet::intersects(const OpenBitSet & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_intersects_c2540e43], a0.this$);
        }

        jboolean OpenBitSet::isCacheable() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
        }

        jboolean OpenBitSet::isEmpty() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
        }

        ::org::apache::lucene::search::DocIdSetIterator OpenBitSet::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_dc23660c]));
        }

        jint OpenBitSet::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }

        jint OpenBitSet::nextSetBit(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_nextSetBit_39c7bd23], a0);
        }

        jlong OpenBitSet::nextSetBit(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_nextSetBit_0ee6df33], a0);
        }

        void OpenBitSet::or$(const OpenBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_or_c2540e4f], a0.this$);
        }

        jlong OpenBitSet::prevSetBit(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_prevSetBit_0ee6df33], a0);
        }

        jint OpenBitSet::prevSetBit(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_prevSetBit_39c7bd23], a0);
        }

        jlong OpenBitSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        void OpenBitSet::remove(const OpenBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_remove_c2540e4f], a0.this$);
        }

        void OpenBitSet::set(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_set_0ee6df2f], a0);
        }

        void OpenBitSet::set(jlong a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_set_a7e12ca4], a0, a1);
        }

        jlong OpenBitSet::size() const
        {
          return env->callLongMethod(this$, mids$[mid_size_54c6a17a]);
        }

        void OpenBitSet::trimTrailingZeros() const
        {
          env->callVoidMethod(this$, mids$[mid_trimTrailingZeros_54c6a166]);
        }

        void OpenBitSet::union$(const OpenBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_union_c2540e4f], a0.this$);
        }

        jlong OpenBitSet::unionCount(const OpenBitSet & a0, const OpenBitSet & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_unionCount_52061930], a0.this$, a1.this$);
        }

        void OpenBitSet::xor$(const OpenBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_xor_c2540e4f], a0.this$);
        }

        jlong OpenBitSet::xorCount(const OpenBitSet & a0, const OpenBitSet & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_xorCount_52061930], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OpenBitSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OpenBitSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OpenBitSet_init_(t_OpenBitSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OpenBitSet_and(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_andNot(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_andNotCount(PyTypeObject *type, PyObject *args);
        static PyObject *t_OpenBitSet_bits(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_bits2words(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OpenBitSet_capacity(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_cardinality(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_clear(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_clone(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_ensureCapacity(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_ensureCapacityWords(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_equals(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_fastClear(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_fastFlip(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_fastGet(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_fastSet(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_flip(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_flipAndGet(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_get(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_getAndSet(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_getBit(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_getBits(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_getNumWords(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_hashCode(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_intersect(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_intersectionCount(PyTypeObject *type, PyObject *args);
        static PyObject *t_OpenBitSet_intersects(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_isCacheable(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_isEmpty(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_iterator(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_length(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_nextSetBit(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_or(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_prevSetBit(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_ramBytesUsed(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_remove(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_set(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_size(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_trimTrailingZeros(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_union(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_unionCount(PyTypeObject *type, PyObject *args);
        static PyObject *t_OpenBitSet_xor(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_xorCount(PyTypeObject *type, PyObject *args);
        static PyObject *t_OpenBitSet_get__cacheable(t_OpenBitSet *self, void *data);
        static PyObject *t_OpenBitSet_get__empty(t_OpenBitSet *self, void *data);
        static PyObject *t_OpenBitSet_get__numWords(t_OpenBitSet *self, void *data);
        static PyGetSetDef t_OpenBitSet__fields_[] = {
          DECLARE_GET_FIELD(t_OpenBitSet, cacheable),
          DECLARE_GET_FIELD(t_OpenBitSet, empty),
          DECLARE_GET_FIELD(t_OpenBitSet, numWords),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_OpenBitSet__methods_[] = {
          DECLARE_METHOD(t_OpenBitSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSet, and, METH_O),
          DECLARE_METHOD(t_OpenBitSet, andNot, METH_O),
          DECLARE_METHOD(t_OpenBitSet, andNotCount, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSet, bits, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, bits2words, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSet, capacity, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, cardinality, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, clear, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, clone, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, ensureCapacity, METH_O),
          DECLARE_METHOD(t_OpenBitSet, ensureCapacityWords, METH_O),
          DECLARE_METHOD(t_OpenBitSet, equals, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, fastClear, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, fastFlip, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, fastGet, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, fastSet, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, flip, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, flipAndGet, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, get, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, getAndSet, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, getBit, METH_O),
          DECLARE_METHOD(t_OpenBitSet, getBits, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, getNumWords, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, intersect, METH_O),
          DECLARE_METHOD(t_OpenBitSet, intersectionCount, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSet, intersects, METH_O),
          DECLARE_METHOD(t_OpenBitSet, isCacheable, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, isEmpty, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, iterator, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, length, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, nextSetBit, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, or, METH_O),
          DECLARE_METHOD(t_OpenBitSet, prevSetBit, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, ramBytesUsed, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, remove, METH_O),
          DECLARE_METHOD(t_OpenBitSet, set, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, size, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, trimTrailingZeros, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, union, METH_O),
          DECLARE_METHOD(t_OpenBitSet, unionCount, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSet, xor, METH_O),
          DECLARE_METHOD(t_OpenBitSet, xorCount, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OpenBitSet, t_OpenBitSet, ::org::apache::lucene::search::DocIdSet, OpenBitSet, t_OpenBitSet_init_, 0, 0, t_OpenBitSet__fields_, 0, 0);

        void t_OpenBitSet::install(PyObject *module)
        {
          installType(&PY_TYPE(OpenBitSet), module, "OpenBitSet", 0);
        }

        void t_OpenBitSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OpenBitSet).tp_dict, "class_", make_descriptor(OpenBitSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OpenBitSet).tp_dict, "wrapfn_", make_descriptor(t_OpenBitSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OpenBitSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OpenBitSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OpenBitSet::initializeClass, 1)))
            return NULL;
          return t_OpenBitSet::wrap_Object(OpenBitSet(((t_OpenBitSet *) arg)->object.this$));
        }
        static PyObject *t_OpenBitSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OpenBitSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OpenBitSet_init_(t_OpenBitSet *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OpenBitSet object((jobject) NULL);

              INT_CALL(object = OpenBitSet());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              jlong a0;
              OpenBitSet object((jobject) NULL);

              if (!parseArgs(args, "J", &a0))
              {
                INT_CALL(object = OpenBitSet(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              OpenBitSet object((jobject) NULL);

              if (!parseArgs(args, "[JI", &a0, &a1))
              {
                INT_CALL(object = OpenBitSet(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OpenBitSet_and(t_OpenBitSet *self, PyObject *arg)
        {
          OpenBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", OpenBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.and$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "and", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_andNot(t_OpenBitSet *self, PyObject *arg)
        {
          OpenBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", OpenBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.andNot(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "andNot", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_andNotCount(PyTypeObject *type, PyObject *args)
        {
          OpenBitSet a0((jobject) NULL);
          OpenBitSet a1((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kk", OpenBitSet::initializeClass, OpenBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::OpenBitSet::andNotCount(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "andNotCount", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_bits(t_OpenBitSet *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.bits());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(OpenBitSet), (PyObject *) self, "bits", args, 2);
        }

        static PyObject *t_OpenBitSet_bits2words(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          jint result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::OpenBitSet::bits2words(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "bits2words", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_capacity(t_OpenBitSet *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.capacity());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_OpenBitSet_cardinality(t_OpenBitSet *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.cardinality());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_OpenBitSet_clear(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.clear(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jlong a0;
              jlong a1;

              if (!parseArgs(args, "JJ", &a0, &a1))
              {
                OBJ_CALL(self->object.clear(a0, a1));
                Py_RETURN_NONE;
              }
            }
            {
              jint a0;
              jint a1;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(self->object.clear(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "clear", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_clone(t_OpenBitSet *self)
        {
          OpenBitSet result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_OpenBitSet::wrap_Object(result);
        }

        static PyObject *t_OpenBitSet_ensureCapacity(t_OpenBitSet *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.ensureCapacity(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "ensureCapacity", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_ensureCapacityWords(t_OpenBitSet *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.ensureCapacityWords(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "ensureCapacityWords", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_equals(t_OpenBitSet *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(OpenBitSet), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_OpenBitSet_fastClear(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.fastClear(a0));
                Py_RETURN_NONE;
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.fastClear(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "fastClear", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_fastFlip(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.fastFlip(a0));
                Py_RETURN_NONE;
              }
            }
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.fastFlip(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "fastFlip", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_fastGet(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.fastGet(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jlong a0;
              jboolean result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.fastGet(a0));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "fastGet", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_fastSet(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.fastSet(a0));
                Py_RETURN_NONE;
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.fastSet(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "fastSet", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_flip(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.flip(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jlong a0;
              jlong a1;

              if (!parseArgs(args, "JJ", &a0, &a1))
              {
                OBJ_CALL(self->object.flip(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "flip", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_flipAndGet(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              jboolean result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.flipAndGet(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.flipAndGet(a0));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "flipAndGet", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_get(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              jboolean result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "get", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_getAndSet(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              jboolean result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.getAndSet(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.getAndSet(a0));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getAndSet", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_getBit(t_OpenBitSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getBit(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getBit", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_getBits(t_OpenBitSet *self)
        {
          JArray< jlong > result((jobject) NULL);
          OBJ_CALL(result = self->object.getBits());
          return result.wrap();
        }

        static PyObject *t_OpenBitSet_getNumWords(t_OpenBitSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getNumWords());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_OpenBitSet_hashCode(t_OpenBitSet *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(OpenBitSet), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_OpenBitSet_intersect(t_OpenBitSet *self, PyObject *arg)
        {
          OpenBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", OpenBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.intersect(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "intersect", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_intersectionCount(PyTypeObject *type, PyObject *args)
        {
          OpenBitSet a0((jobject) NULL);
          OpenBitSet a1((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kk", OpenBitSet::initializeClass, OpenBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::OpenBitSet::intersectionCount(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "intersectionCount", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_intersects(t_OpenBitSet *self, PyObject *arg)
        {
          OpenBitSet a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", OpenBitSet::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.intersects(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "intersects", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_isCacheable(t_OpenBitSet *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isCacheable());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(OpenBitSet), (PyObject *) self, "isCacheable", args, 2);
        }

        static PyObject *t_OpenBitSet_isEmpty(t_OpenBitSet *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isEmpty());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_OpenBitSet_iterator(t_OpenBitSet *self, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(OpenBitSet), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_OpenBitSet_length(t_OpenBitSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_OpenBitSet_nextSetBit(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.nextSetBit(a0));
                return PyInt_FromLong((long) result);
              }
            }
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.nextSetBit(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "nextSetBit", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_or(t_OpenBitSet *self, PyObject *arg)
        {
          OpenBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", OpenBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.or$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "or", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_prevSetBit(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.prevSetBit(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.prevSetBit(a0));
                return PyInt_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "prevSetBit", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_ramBytesUsed(t_OpenBitSet *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(OpenBitSet), (PyObject *) self, "ramBytesUsed", args, 2);
        }

        static PyObject *t_OpenBitSet_remove(t_OpenBitSet *self, PyObject *arg)
        {
          OpenBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", OpenBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.remove(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "remove", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_set(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.set(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jlong a0;
              jlong a1;

              if (!parseArgs(args, "JJ", &a0, &a1))
              {
                OBJ_CALL(self->object.set(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "set", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_size(t_OpenBitSet *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.size());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_OpenBitSet_trimTrailingZeros(t_OpenBitSet *self)
        {
          OBJ_CALL(self->object.trimTrailingZeros());
          Py_RETURN_NONE;
        }

        static PyObject *t_OpenBitSet_union(t_OpenBitSet *self, PyObject *arg)
        {
          OpenBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", OpenBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.union$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "union", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_unionCount(PyTypeObject *type, PyObject *args)
        {
          OpenBitSet a0((jobject) NULL);
          OpenBitSet a1((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kk", OpenBitSet::initializeClass, OpenBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::OpenBitSet::unionCount(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "unionCount", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_xor(t_OpenBitSet *self, PyObject *arg)
        {
          OpenBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", OpenBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.xor$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "xor", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_xorCount(PyTypeObject *type, PyObject *args)
        {
          OpenBitSet a0((jobject) NULL);
          OpenBitSet a1((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kk", OpenBitSet::initializeClass, OpenBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::OpenBitSet::xorCount(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "xorCount", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_get__cacheable(t_OpenBitSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCacheable());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_OpenBitSet_get__empty(t_OpenBitSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isEmpty());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_OpenBitSet_get__numWords(t_OpenBitSet *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getNumWords());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/NoTokenFoundQueryNode.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *NoTokenFoundQueryNode::class$ = NULL;
              jmethodID *NoTokenFoundQueryNode::mids$ = NULL;
              bool NoTokenFoundQueryNode::live$ = false;

              jclass NoTokenFoundQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/NoTokenFoundQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NoTokenFoundQueryNode::NoTokenFoundQueryNode() : ::org::apache::lucene::queryparser::flexible::core::nodes::DeletedQueryNode(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode NoTokenFoundQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::java::lang::CharSequence NoTokenFoundQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String NoTokenFoundQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_NoTokenFoundQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NoTokenFoundQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NoTokenFoundQueryNode_init_(t_NoTokenFoundQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_NoTokenFoundQueryNode_cloneTree(t_NoTokenFoundQueryNode *self, PyObject *args);
              static PyObject *t_NoTokenFoundQueryNode_toQueryString(t_NoTokenFoundQueryNode *self, PyObject *args);
              static PyObject *t_NoTokenFoundQueryNode_toString(t_NoTokenFoundQueryNode *self, PyObject *args);

              static PyMethodDef t_NoTokenFoundQueryNode__methods_[] = {
                DECLARE_METHOD(t_NoTokenFoundQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NoTokenFoundQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NoTokenFoundQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_NoTokenFoundQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_NoTokenFoundQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NoTokenFoundQueryNode, t_NoTokenFoundQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::DeletedQueryNode, NoTokenFoundQueryNode, t_NoTokenFoundQueryNode_init_, 0, 0, 0, 0, 0);

              void t_NoTokenFoundQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(NoTokenFoundQueryNode), module, "NoTokenFoundQueryNode", 0);
              }

              void t_NoTokenFoundQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NoTokenFoundQueryNode).tp_dict, "class_", make_descriptor(NoTokenFoundQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NoTokenFoundQueryNode).tp_dict, "wrapfn_", make_descriptor(t_NoTokenFoundQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NoTokenFoundQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NoTokenFoundQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NoTokenFoundQueryNode::initializeClass, 1)))
                  return NULL;
                return t_NoTokenFoundQueryNode::wrap_Object(NoTokenFoundQueryNode(((t_NoTokenFoundQueryNode *) arg)->object.this$));
              }
              static PyObject *t_NoTokenFoundQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NoTokenFoundQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NoTokenFoundQueryNode_init_(t_NoTokenFoundQueryNode *self, PyObject *args, PyObject *kwds)
              {
                NoTokenFoundQueryNode object((jobject) NULL);

                INT_CALL(object = NoTokenFoundQueryNode());
                self->object = object;

                return 0;
              }

              static PyObject *t_NoTokenFoundQueryNode_cloneTree(t_NoTokenFoundQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(NoTokenFoundQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_NoTokenFoundQueryNode_toQueryString(t_NoTokenFoundQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(NoTokenFoundQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_NoTokenFoundQueryNode_toString(t_NoTokenFoundQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(NoTokenFoundQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Explanation::class$ = NULL;
        jmethodID *Explanation::mids$ = NULL;
        bool Explanation::live$ = false;

        jclass Explanation::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Explanation");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_f3ab5075] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;)V");
            mids$[mid_addDetail_398cd45a] = env->getMethodID(cls, "addDetail", "(Lorg/apache/lucene/search/Explanation;)V");
            mids$[mid_getDescription_14c7b5c5] = env->getMethodID(cls, "getDescription", "()Ljava/lang/String;");
            mids$[mid_getDetails_1ee90723] = env->getMethodID(cls, "getDetails", "()[Lorg/apache/lucene/search/Explanation;");
            mids$[mid_getValue_54c6a176] = env->getMethodID(cls, "getValue", "()F");
            mids$[mid_isMatch_54c6a16a] = env->getMethodID(cls, "isMatch", "()Z");
            mids$[mid_setDescription_5fdc3f48] = env->getMethodID(cls, "setDescription", "(Ljava/lang/String;)V");
            mids$[mid_setValue_06298cab] = env->getMethodID(cls, "setValue", "(F)V");
            mids$[mid_toHtml_14c7b5c5] = env->getMethodID(cls, "toHtml", "()Ljava/lang/String;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");
            mids$[mid_getSummary_14c7b5c5] = env->getMethodID(cls, "getSummary", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Explanation::Explanation() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        Explanation::Explanation(jfloat a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f3ab5075, a0, a1.this$)) {}

        void Explanation::addDetail(const Explanation & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addDetail_398cd45a], a0.this$);
        }

        ::java::lang::String Explanation::getDescription() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getDescription_14c7b5c5]));
        }

        JArray< Explanation > Explanation::getDetails() const
        {
          return JArray< Explanation >(env->callObjectMethod(this$, mids$[mid_getDetails_1ee90723]));
        }

        jfloat Explanation::getValue() const
        {
          return env->callFloatMethod(this$, mids$[mid_getValue_54c6a176]);
        }

        jboolean Explanation::isMatch() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isMatch_54c6a16a]);
        }

        void Explanation::setDescription(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDescription_5fdc3f48], a0.this$);
        }

        void Explanation::setValue(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setValue_06298cab], a0);
        }

        ::java::lang::String Explanation::toHtml() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toHtml_14c7b5c5]));
        }

        ::java::lang::String Explanation::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Explanation_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Explanation_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Explanation_init_(t_Explanation *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Explanation_addDetail(t_Explanation *self, PyObject *arg);
        static PyObject *t_Explanation_getDescription(t_Explanation *self);
        static PyObject *t_Explanation_getDetails(t_Explanation *self);
        static PyObject *t_Explanation_getValue(t_Explanation *self);
        static PyObject *t_Explanation_isMatch(t_Explanation *self);
        static PyObject *t_Explanation_setDescription(t_Explanation *self, PyObject *arg);
        static PyObject *t_Explanation_setValue(t_Explanation *self, PyObject *arg);
        static PyObject *t_Explanation_toHtml(t_Explanation *self);
        static PyObject *t_Explanation_toString(t_Explanation *self, PyObject *args);
        static PyObject *t_Explanation_get__description(t_Explanation *self, void *data);
        static int t_Explanation_set__description(t_Explanation *self, PyObject *arg, void *data);
        static PyObject *t_Explanation_get__details(t_Explanation *self, void *data);
        static PyObject *t_Explanation_get__match(t_Explanation *self, void *data);
        static PyObject *t_Explanation_get__value(t_Explanation *self, void *data);
        static int t_Explanation_set__value(t_Explanation *self, PyObject *arg, void *data);
        static PyGetSetDef t_Explanation__fields_[] = {
          DECLARE_GETSET_FIELD(t_Explanation, description),
          DECLARE_GET_FIELD(t_Explanation, details),
          DECLARE_GET_FIELD(t_Explanation, match),
          DECLARE_GETSET_FIELD(t_Explanation, value),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Explanation__methods_[] = {
          DECLARE_METHOD(t_Explanation, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Explanation, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Explanation, addDetail, METH_O),
          DECLARE_METHOD(t_Explanation, getDescription, METH_NOARGS),
          DECLARE_METHOD(t_Explanation, getDetails, METH_NOARGS),
          DECLARE_METHOD(t_Explanation, getValue, METH_NOARGS),
          DECLARE_METHOD(t_Explanation, isMatch, METH_NOARGS),
          DECLARE_METHOD(t_Explanation, setDescription, METH_O),
          DECLARE_METHOD(t_Explanation, setValue, METH_O),
          DECLARE_METHOD(t_Explanation, toHtml, METH_NOARGS),
          DECLARE_METHOD(t_Explanation, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Explanation, t_Explanation, ::java::lang::Object, Explanation, t_Explanation_init_, 0, 0, t_Explanation__fields_, 0, 0);

        void t_Explanation::install(PyObject *module)
        {
          installType(&PY_TYPE(Explanation), module, "Explanation", 0);
        }

        void t_Explanation::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Explanation).tp_dict, "class_", make_descriptor(Explanation::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Explanation).tp_dict, "wrapfn_", make_descriptor(t_Explanation::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Explanation).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Explanation_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Explanation::initializeClass, 1)))
            return NULL;
          return t_Explanation::wrap_Object(Explanation(((t_Explanation *) arg)->object.this$));
        }
        static PyObject *t_Explanation_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Explanation::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Explanation_init_(t_Explanation *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              Explanation object((jobject) NULL);

              INT_CALL(object = Explanation());
              self->object = object;
              break;
            }
            goto err;
           case 2:
            {
              jfloat a0;
              ::java::lang::String a1((jobject) NULL);
              Explanation object((jobject) NULL);

              if (!parseArgs(args, "Fs", &a0, &a1))
              {
                INT_CALL(object = Explanation(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Explanation_addDetail(t_Explanation *self, PyObject *arg)
        {
          Explanation a0((jobject) NULL);

          if (!parseArg(arg, "k", Explanation::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addDetail(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addDetail", arg);
          return NULL;
        }

        static PyObject *t_Explanation_getDescription(t_Explanation *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getDescription());
          return j2p(result);
        }

        static PyObject *t_Explanation_getDetails(t_Explanation *self)
        {
          JArray< Explanation > result((jobject) NULL);
          OBJ_CALL(result = self->object.getDetails());
          return JArray<jobject>(result.this$).wrap(t_Explanation::wrap_jobject);
        }

        static PyObject *t_Explanation_getValue(t_Explanation *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getValue());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_Explanation_isMatch(t_Explanation *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isMatch());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Explanation_setDescription(t_Explanation *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.setDescription(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDescription", arg);
          return NULL;
        }

        static PyObject *t_Explanation_setValue(t_Explanation *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setValue", arg);
          return NULL;
        }

        static PyObject *t_Explanation_toHtml(t_Explanation *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.toHtml());
          return j2p(result);
        }

        static PyObject *t_Explanation_toString(t_Explanation *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(Explanation), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Explanation_get__description(t_Explanation *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getDescription());
          return j2p(value);
        }
        static int t_Explanation_set__description(t_Explanation *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::String value((jobject) NULL);
            if (!parseArg(arg, "s", &value))
            {
              INT_CALL(self->object.setDescription(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "description", arg);
          return -1;
        }

        static PyObject *t_Explanation_get__details(t_Explanation *self, void *data)
        {
          JArray< Explanation > value((jobject) NULL);
          OBJ_CALL(value = self->object.getDetails());
          return JArray<jobject>(value.this$).wrap(t_Explanation::wrap_jobject);
        }

        static PyObject *t_Explanation_get__match(t_Explanation *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isMatch());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_Explanation_get__value(t_Explanation *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getValue());
          return PyFloat_FromDouble((double) value);
        }
        static int t_Explanation_set__value(t_Explanation *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "value", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/BytesRefSorter.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalStateException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *BytesRefSorter::class$ = NULL;
            jmethodID *BytesRefSorter::mids$ = NULL;
            bool BytesRefSorter::live$ = false;

            jclass BytesRefSorter::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/BytesRefSorter");

                mids$ = new jmethodID[max_mid];
                mids$[mid_add_7bc03dc4] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
                mids$[mid_iterator_534dea83] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/util/BytesRefIterator;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void BytesRefSorter::add(const ::org::apache::lucene::util::BytesRef & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_add_7bc03dc4], a0.this$);
            }

            ::java::util::Comparator BytesRefSorter::getComparator() const
            {
              return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
            }

            ::org::apache::lucene::util::BytesRefIterator BytesRefSorter::iterator() const
            {
              return ::org::apache::lucene::util::BytesRefIterator(env->callObjectMethod(this$, mids$[mid_iterator_534dea83]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_BytesRefSorter_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BytesRefSorter_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BytesRefSorter_add(t_BytesRefSorter *self, PyObject *arg);
            static PyObject *t_BytesRefSorter_getComparator(t_BytesRefSorter *self);
            static PyObject *t_BytesRefSorter_iterator(t_BytesRefSorter *self);
            static PyObject *t_BytesRefSorter_get__comparator(t_BytesRefSorter *self, void *data);
            static PyGetSetDef t_BytesRefSorter__fields_[] = {
              DECLARE_GET_FIELD(t_BytesRefSorter, comparator),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_BytesRefSorter__methods_[] = {
              DECLARE_METHOD(t_BytesRefSorter, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BytesRefSorter, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BytesRefSorter, add, METH_O),
              DECLARE_METHOD(t_BytesRefSorter, getComparator, METH_NOARGS),
              DECLARE_METHOD(t_BytesRefSorter, iterator, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BytesRefSorter, t_BytesRefSorter, ::java::lang::Object, BytesRefSorter, abstract_init, 0, 0, t_BytesRefSorter__fields_, 0, 0);

            void t_BytesRefSorter::install(PyObject *module)
            {
              installType(&PY_TYPE(BytesRefSorter), module, "BytesRefSorter", 0);
            }

            void t_BytesRefSorter::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BytesRefSorter).tp_dict, "class_", make_descriptor(BytesRefSorter::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BytesRefSorter).tp_dict, "wrapfn_", make_descriptor(t_BytesRefSorter::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BytesRefSorter).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BytesRefSorter_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BytesRefSorter::initializeClass, 1)))
                return NULL;
              return t_BytesRefSorter::wrap_Object(BytesRefSorter(((t_BytesRefSorter *) arg)->object.this$));
            }
            static PyObject *t_BytesRefSorter_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BytesRefSorter::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_BytesRefSorter_add(t_BytesRefSorter *self, PyObject *arg)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "add", arg);
              return NULL;
            }

            static PyObject *t_BytesRefSorter_getComparator(t_BytesRefSorter *self)
            {
              ::java::util::Comparator result((jobject) NULL);
              OBJ_CALL(result = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
            }

            static PyObject *t_BytesRefSorter_iterator(t_BytesRefSorter *self)
            {
              ::org::apache::lucene::util::BytesRefIterator result((jobject) NULL);
              OBJ_CALL(result = self->object.iterator());
              return ::org::apache::lucene::util::t_BytesRefIterator::wrap_Object(result);
            }

            static PyObject *t_BytesRefSorter_get__comparator(t_BytesRefSorter *self, void *data)
            {
              ::java::util::Comparator value((jobject) NULL);
              OBJ_CALL(value = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Collector.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Collector::class$ = NULL;
        jmethodID *Collector::mids$ = NULL;
        bool Collector::live$ = false;

        jclass Collector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Collector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Collector::Collector() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean Collector::acceptsDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
        }

        void Collector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
        }

        void Collector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
        }

        void Collector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Collector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Collector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Collector_init_(t_Collector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Collector_acceptsDocsOutOfOrder(t_Collector *self);
        static PyObject *t_Collector_collect(t_Collector *self, PyObject *arg);
        static PyObject *t_Collector_setNextReader(t_Collector *self, PyObject *arg);
        static PyObject *t_Collector_setScorer(t_Collector *self, PyObject *arg);
        static int t_Collector_set__nextReader(t_Collector *self, PyObject *arg, void *data);
        static int t_Collector_set__scorer(t_Collector *self, PyObject *arg, void *data);
        static PyGetSetDef t_Collector__fields_[] = {
          DECLARE_SET_FIELD(t_Collector, nextReader),
          DECLARE_SET_FIELD(t_Collector, scorer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Collector__methods_[] = {
          DECLARE_METHOD(t_Collector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Collector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Collector, acceptsDocsOutOfOrder, METH_NOARGS),
          DECLARE_METHOD(t_Collector, collect, METH_O),
          DECLARE_METHOD(t_Collector, setNextReader, METH_O),
          DECLARE_METHOD(t_Collector, setScorer, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Collector, t_Collector, ::java::lang::Object, Collector, t_Collector_init_, 0, 0, t_Collector__fields_, 0, 0);

        void t_Collector::install(PyObject *module)
        {
          installType(&PY_TYPE(Collector), module, "Collector", 0);
        }

        void t_Collector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Collector).tp_dict, "class_", make_descriptor(Collector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Collector).tp_dict, "wrapfn_", make_descriptor(t_Collector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Collector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Collector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Collector::initializeClass, 1)))
            return NULL;
          return t_Collector::wrap_Object(Collector(((t_Collector *) arg)->object.this$));
        }
        static PyObject *t_Collector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Collector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Collector_init_(t_Collector *self, PyObject *args, PyObject *kwds)
        {
          Collector object((jobject) NULL);

          INT_CALL(object = Collector());
          self->object = object;

          return 0;
        }

        static PyObject *t_Collector_acceptsDocsOutOfOrder(t_Collector *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Collector_collect(t_Collector *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "collect", arg);
          return NULL;
        }

        static PyObject *t_Collector_setNextReader(t_Collector *self, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setNextReader(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setNextReader", arg);
          return NULL;
        }

        static PyObject *t_Collector_setScorer(t_Collector *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setScorer", arg);
          return NULL;
        }

        static int t_Collector_set__nextReader(t_Collector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_Collector_set__scorer(t_Collector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/ClassicAnalyzer.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *ClassicAnalyzer::class$ = NULL;
          jmethodID *ClassicAnalyzer::mids$ = NULL;
          bool ClassicAnalyzer::live$ = false;
          jint ClassicAnalyzer::DEFAULT_MAX_TOKEN_LENGTH = (jint) 0;
          ::org::apache::lucene::analysis::util::CharArraySet *ClassicAnalyzer::STOP_WORDS_SET = NULL;

          jclass ClassicAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/ClassicAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getMaxTokenLength_54c6a179] = env->getMethodID(cls, "getMaxTokenLength", "()I");
              mids$[mid_setMaxTokenLength_39c7bd3c] = env->getMethodID(cls, "setMaxTokenLength", "(I)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_TOKEN_LENGTH = env->getStaticIntField(cls, "DEFAULT_MAX_TOKEN_LENGTH");
              STOP_WORDS_SET = new ::org::apache::lucene::analysis::util::CharArraySet(env->getStaticObjectField(cls, "STOP_WORDS_SET", "Lorg/apache/lucene/analysis/util/CharArraySet;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ClassicAnalyzer::ClassicAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ClassicAnalyzer::ClassicAnalyzer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          ClassicAnalyzer::ClassicAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          ClassicAnalyzer::ClassicAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          ClassicAnalyzer::ClassicAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          ClassicAnalyzer::ClassicAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          jint ClassicAnalyzer::getMaxTokenLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxTokenLength_54c6a179]);
          }

          void ClassicAnalyzer::setMaxTokenLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxTokenLength_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_ClassicAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ClassicAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ClassicAnalyzer_init_(t_ClassicAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ClassicAnalyzer_getMaxTokenLength(t_ClassicAnalyzer *self);
          static PyObject *t_ClassicAnalyzer_setMaxTokenLength(t_ClassicAnalyzer *self, PyObject *arg);
          static PyObject *t_ClassicAnalyzer_get__maxTokenLength(t_ClassicAnalyzer *self, void *data);
          static int t_ClassicAnalyzer_set__maxTokenLength(t_ClassicAnalyzer *self, PyObject *arg, void *data);
          static PyGetSetDef t_ClassicAnalyzer__fields_[] = {
            DECLARE_GETSET_FIELD(t_ClassicAnalyzer, maxTokenLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ClassicAnalyzer__methods_[] = {
            DECLARE_METHOD(t_ClassicAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicAnalyzer, getMaxTokenLength, METH_NOARGS),
            DECLARE_METHOD(t_ClassicAnalyzer, setMaxTokenLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ClassicAnalyzer, t_ClassicAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, ClassicAnalyzer, t_ClassicAnalyzer_init_, 0, 0, t_ClassicAnalyzer__fields_, 0, 0);

          void t_ClassicAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(ClassicAnalyzer), module, "ClassicAnalyzer", 0);
          }

          void t_ClassicAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ClassicAnalyzer).tp_dict, "class_", make_descriptor(ClassicAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ClassicAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_ClassicAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ClassicAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ClassicAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ClassicAnalyzer).tp_dict, "DEFAULT_MAX_TOKEN_LENGTH", make_descriptor(ClassicAnalyzer::DEFAULT_MAX_TOKEN_LENGTH));
            PyDict_SetItemString(PY_TYPE(ClassicAnalyzer).tp_dict, "STOP_WORDS_SET", make_descriptor(::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(*ClassicAnalyzer::STOP_WORDS_SET)));
          }

          static PyObject *t_ClassicAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ClassicAnalyzer::initializeClass, 1)))
              return NULL;
            return t_ClassicAnalyzer::wrap_Object(ClassicAnalyzer(((t_ClassicAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_ClassicAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ClassicAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ClassicAnalyzer_init_(t_ClassicAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ClassicAnalyzer object((jobject) NULL);

                INT_CALL(object = ClassicAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                ClassicAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = ClassicAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ClassicAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = ClassicAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ClassicAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ClassicAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ClassicAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ClassicAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ClassicAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ClassicAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ClassicAnalyzer_getMaxTokenLength(t_ClassicAnalyzer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_ClassicAnalyzer_setMaxTokenLength(t_ClassicAnalyzer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxTokenLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxTokenLength", arg);
            return NULL;
          }

          static PyObject *t_ClassicAnalyzer_get__maxTokenLength(t_ClassicAnalyzer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) value);
          }
          static int t_ClassicAnalyzer_set__maxTokenLength(t_ClassicAnalyzer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxTokenLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxTokenLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Mutable.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Mutable::class$ = NULL;
          jmethodID *PackedInts$Mutable::mids$ = NULL;
          bool PackedInts$Mutable::live$ = false;

          jclass PackedInts$Mutable::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Mutable");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_fill_534bf2ff] = env->getMethodID(cls, "fill", "(IIJ)V");
              mids$[mid_getBitsPerValue_54c6a179] = env->getMethodID(cls, "getBitsPerValue", "()I");
              mids$[mid_save_27875f57] = env->getMethodID(cls, "save", "(Lorg/apache/lucene/store/DataOutput;)V");
              mids$[mid_set_03b232b5] = env->getMethodID(cls, "set", "(IJ)V");
              mids$[mid_set_d80d4c9e] = env->getMethodID(cls, "set", "(I[JII)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts$Mutable::PackedInts$Mutable() : ::org::apache::lucene::util::packed::PackedInts$Reader(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void PackedInts$Mutable::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          void PackedInts$Mutable::fill(jint a0, jint a1, jlong a2) const
          {
            env->callVoidMethod(this$, mids$[mid_fill_534bf2ff], a0, a1, a2);
          }

          jint PackedInts$Mutable::getBitsPerValue() const
          {
            return env->callIntMethod(this$, mids$[mid_getBitsPerValue_54c6a179]);
          }

          void PackedInts$Mutable::save(const ::org::apache::lucene::store::DataOutput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_save_27875f57], a0.this$);
          }

          void PackedInts$Mutable::set(jint a0, jlong a1) const
          {
            env->callVoidMethod(this$, mids$[mid_set_03b232b5], a0, a1);
          }

          jint PackedInts$Mutable::set(jint a0, const JArray< jlong > & a1, jint a2, jint a3) const
          {
            return env->callIntMethod(this$, mids$[mid_set_d80d4c9e], a0, a1.this$, a2, a3);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Mutable_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Mutable_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedInts$Mutable_init_(t_PackedInts$Mutable *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedInts$Mutable_clear(t_PackedInts$Mutable *self);
          static PyObject *t_PackedInts$Mutable_fill(t_PackedInts$Mutable *self, PyObject *args);
          static PyObject *t_PackedInts$Mutable_getBitsPerValue(t_PackedInts$Mutable *self);
          static PyObject *t_PackedInts$Mutable_save(t_PackedInts$Mutable *self, PyObject *arg);
          static PyObject *t_PackedInts$Mutable_set(t_PackedInts$Mutable *self, PyObject *args);
          static PyObject *t_PackedInts$Mutable_get__bitsPerValue(t_PackedInts$Mutable *self, void *data);
          static PyGetSetDef t_PackedInts$Mutable__fields_[] = {
            DECLARE_GET_FIELD(t_PackedInts$Mutable, bitsPerValue),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PackedInts$Mutable__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Mutable, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Mutable, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Mutable, clear, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Mutable, fill, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Mutable, getBitsPerValue, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Mutable, save, METH_O),
            DECLARE_METHOD(t_PackedInts$Mutable, set, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$Mutable, t_PackedInts$Mutable, ::org::apache::lucene::util::packed::PackedInts$Reader, PackedInts$Mutable, t_PackedInts$Mutable_init_, 0, 0, t_PackedInts$Mutable__fields_, 0, 0);

          void t_PackedInts$Mutable::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Mutable), module, "PackedInts$Mutable", 0);
          }

          void t_PackedInts$Mutable::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$Mutable).tp_dict, "class_", make_descriptor(PackedInts$Mutable::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$Mutable).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$Mutable::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$Mutable).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$Mutable_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Mutable::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Mutable::wrap_Object(PackedInts$Mutable(((t_PackedInts$Mutable *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Mutable_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Mutable::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedInts$Mutable_init_(t_PackedInts$Mutable *self, PyObject *args, PyObject *kwds)
          {
            PackedInts$Mutable object((jobject) NULL);

            INT_CALL(object = PackedInts$Mutable());
            self->object = object;

            return 0;
          }

          static PyObject *t_PackedInts$Mutable_clear(t_PackedInts$Mutable *self)
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          static PyObject *t_PackedInts$Mutable_fill(t_PackedInts$Mutable *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jlong a2;

            if (!parseArgs(args, "IIJ", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.fill(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "fill", args);
            return NULL;
          }

          static PyObject *t_PackedInts$Mutable_getBitsPerValue(t_PackedInts$Mutable *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBitsPerValue());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Mutable_save(t_PackedInts$Mutable *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.save(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "save", arg);
            return NULL;
          }

          static PyObject *t_PackedInts$Mutable_set(t_PackedInts$Mutable *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                jint a0;
                jlong a1;

                if (!parseArgs(args, "IJ", &a0, &a1))
                {
                  OBJ_CALL(self->object.set(a0, a1));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 4:
              {
                jint a0;
                JArray< jlong > a1((jobject) NULL);
                jint a2;
                jint a3;
                jint result;

                if (!parseArgs(args, "I[JII", &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.set(a0, a1, a2, a3));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "set", args);
            return NULL;
          }

          static PyObject *t_PackedInts$Mutable_get__bitsPerValue(t_PackedInts$Mutable *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBitsPerValue());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/VectorValueSource.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/List.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *VectorValueSource::class$ = NULL;
            jmethodID *VectorValueSource::mids$ = NULL;
            bool VectorValueSource::live$ = false;

            jclass VectorValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/VectorValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_dimension_54c6a179] = env->getMethodID(cls, "dimension", "()I");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getSources_87851566] = env->getMethodID(cls, "getSources", "()Ljava/util/List;");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            VectorValueSource::VectorValueSource(const ::java::util::List & a0) : ::org::apache::lucene::queries::function::valuesource::MultiValueSource(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

            void VectorValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String VectorValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jint VectorValueSource::dimension() const
            {
              return env->callIntMethod(this$, mids$[mid_dimension_54c6a179]);
            }

            jboolean VectorValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::java::util::List VectorValueSource::getSources() const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getSources_87851566]));
            }

            ::org::apache::lucene::queries::function::FunctionValues VectorValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint VectorValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String VectorValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_VectorValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_VectorValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_VectorValueSource_init_(t_VectorValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_VectorValueSource_createWeight(t_VectorValueSource *self, PyObject *args);
            static PyObject *t_VectorValueSource_description(t_VectorValueSource *self, PyObject *args);
            static PyObject *t_VectorValueSource_dimension(t_VectorValueSource *self, PyObject *args);
            static PyObject *t_VectorValueSource_equals(t_VectorValueSource *self, PyObject *args);
            static PyObject *t_VectorValueSource_getSources(t_VectorValueSource *self);
            static PyObject *t_VectorValueSource_getValues(t_VectorValueSource *self, PyObject *args);
            static PyObject *t_VectorValueSource_hashCode(t_VectorValueSource *self, PyObject *args);
            static PyObject *t_VectorValueSource_name(t_VectorValueSource *self);
            static PyObject *t_VectorValueSource_get__sources(t_VectorValueSource *self, void *data);
            static PyGetSetDef t_VectorValueSource__fields_[] = {
              DECLARE_GET_FIELD(t_VectorValueSource, sources),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_VectorValueSource__methods_[] = {
              DECLARE_METHOD(t_VectorValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_VectorValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_VectorValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_VectorValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_VectorValueSource, dimension, METH_VARARGS),
              DECLARE_METHOD(t_VectorValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_VectorValueSource, getSources, METH_NOARGS),
              DECLARE_METHOD(t_VectorValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_VectorValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_VectorValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(VectorValueSource, t_VectorValueSource, ::org::apache::lucene::queries::function::valuesource::MultiValueSource, VectorValueSource, t_VectorValueSource_init_, 0, 0, t_VectorValueSource__fields_, 0, 0);

            void t_VectorValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(VectorValueSource), module, "VectorValueSource", 0);
            }

            void t_VectorValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(VectorValueSource).tp_dict, "class_", make_descriptor(VectorValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(VectorValueSource).tp_dict, "wrapfn_", make_descriptor(t_VectorValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(VectorValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_VectorValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, VectorValueSource::initializeClass, 1)))
                return NULL;
              return t_VectorValueSource::wrap_Object(VectorValueSource(((t_VectorValueSource *) arg)->object.this$));
            }
            static PyObject *t_VectorValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, VectorValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_VectorValueSource_init_(t_VectorValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              VectorValueSource object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                INT_CALL(object = VectorValueSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_VectorValueSource_createWeight(t_VectorValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(VectorValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_VectorValueSource_description(t_VectorValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(VectorValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_VectorValueSource_dimension(t_VectorValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.dimension());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(VectorValueSource), (PyObject *) self, "dimension", args, 2);
            }

            static PyObject *t_VectorValueSource_equals(t_VectorValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(VectorValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_VectorValueSource_getSources(t_VectorValueSource *self)
            {
              ::java::util::List result((jobject) NULL);
              OBJ_CALL(result = self->object.getSources());
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::queries::function::PY_TYPE(ValueSource));
            }

            static PyObject *t_VectorValueSource_getValues(t_VectorValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(VectorValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_VectorValueSource_hashCode(t_VectorValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(VectorValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_VectorValueSource_name(t_VectorValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }

            static PyObject *t_VectorValueSource_get__sources(t_VectorValueSource *self, void *data)
            {
              ::java::util::List value((jobject) NULL);
              OBJ_CALL(value = self->object.getSources());
              return ::java::util::t_List::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene49/Lucene49NormsFormat.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene49 {

          ::java::lang::Class *Lucene49NormsFormat::class$ = NULL;
          jmethodID *Lucene49NormsFormat::mids$ = NULL;
          bool Lucene49NormsFormat::live$ = false;

          jclass Lucene49NormsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene49/Lucene49NormsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normsConsumer_025deb44] = env->getMethodID(cls, "normsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_normsProducer_9b0d4e4a] = env->getMethodID(cls, "normsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene49NormsFormat::Lucene49NormsFormat() : ::org::apache::lucene::codecs::NormsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer Lucene49NormsFormat::normsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_normsConsumer_025deb44], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer Lucene49NormsFormat::normsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_normsProducer_9b0d4e4a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene49 {
          static PyObject *t_Lucene49NormsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene49NormsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene49NormsFormat_init_(t_Lucene49NormsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene49NormsFormat_normsConsumer(t_Lucene49NormsFormat *self, PyObject *args);
          static PyObject *t_Lucene49NormsFormat_normsProducer(t_Lucene49NormsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene49NormsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene49NormsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene49NormsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene49NormsFormat, normsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49NormsFormat, normsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene49NormsFormat, t_Lucene49NormsFormat, ::org::apache::lucene::codecs::NormsFormat, Lucene49NormsFormat, t_Lucene49NormsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene49NormsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene49NormsFormat), module, "Lucene49NormsFormat", 0);
          }

          void t_Lucene49NormsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene49NormsFormat).tp_dict, "class_", make_descriptor(Lucene49NormsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene49NormsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene49NormsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene49NormsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene49NormsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene49NormsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene49NormsFormat::wrap_Object(Lucene49NormsFormat(((t_Lucene49NormsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene49NormsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene49NormsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene49NormsFormat_init_(t_Lucene49NormsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene49NormsFormat object((jobject) NULL);

            INT_CALL(object = Lucene49NormsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene49NormsFormat_normsConsumer(t_Lucene49NormsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49NormsFormat), (PyObject *) self, "normsConsumer", args, 2);
          }

          static PyObject *t_Lucene49NormsFormat_normsProducer(t_Lucene49NormsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49NormsFormat), (PyObject *) self, "normsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/idversion/IDVersionPostingsFormat.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace idversion {

          ::java::lang::Class *IDVersionPostingsFormat::class$ = NULL;
          jmethodID *IDVersionPostingsFormat::mids$ = NULL;
          bool IDVersionPostingsFormat::live$ = false;
          jlong IDVersionPostingsFormat::MAX_VERSION = (jlong) 0;
          jlong IDVersionPostingsFormat::MIN_VERSION = (jlong) 0;

          jclass IDVersionPostingsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/idversion/IDVersionPostingsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_bytesToLong_7bc03dd8] = env->getStaticMethodID(cls, "bytesToLong", "(Lorg/apache/lucene/util/BytesRef;)J");
              mids$[mid_fieldsConsumer_a15793c6] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/FieldsConsumer;");
              mids$[mid_fieldsProducer_c86c62bc] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/FieldsProducer;");
              mids$[mid_longToBytes_57875143] = env->getStaticMethodID(cls, "longToBytes", "(JLorg/apache/lucene/util/BytesRef;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MAX_VERSION = env->getStaticLongField(cls, "MAX_VERSION");
              MIN_VERSION = env->getStaticLongField(cls, "MIN_VERSION");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IDVersionPostingsFormat::IDVersionPostingsFormat() : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          IDVersionPostingsFormat::IDVersionPostingsFormat(jint a0, jint a1) : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

          jlong IDVersionPostingsFormat::bytesToLong(const ::org::apache::lucene::util::BytesRef & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticLongMethod(cls, mids$[mid_bytesToLong_7bc03dd8], a0.this$);
          }

          ::org::apache::lucene::codecs::FieldsConsumer IDVersionPostingsFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_a15793c6], a0.this$));
          }

          ::org::apache::lucene::codecs::FieldsProducer IDVersionPostingsFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_c86c62bc], a0.this$));
          }

          void IDVersionPostingsFormat::longToBytes(jlong a0, const ::org::apache::lucene::util::BytesRef & a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_longToBytes_57875143], a0, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace idversion {
          static PyObject *t_IDVersionPostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IDVersionPostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IDVersionPostingsFormat_init_(t_IDVersionPostingsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IDVersionPostingsFormat_bytesToLong(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IDVersionPostingsFormat_fieldsConsumer(t_IDVersionPostingsFormat *self, PyObject *args);
          static PyObject *t_IDVersionPostingsFormat_fieldsProducer(t_IDVersionPostingsFormat *self, PyObject *args);
          static PyObject *t_IDVersionPostingsFormat_longToBytes(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_IDVersionPostingsFormat__methods_[] = {
            DECLARE_METHOD(t_IDVersionPostingsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IDVersionPostingsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IDVersionPostingsFormat, bytesToLong, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IDVersionPostingsFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionPostingsFormat, fieldsProducer, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionPostingsFormat, longToBytes, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IDVersionPostingsFormat, t_IDVersionPostingsFormat, ::org::apache::lucene::codecs::PostingsFormat, IDVersionPostingsFormat, t_IDVersionPostingsFormat_init_, 0, 0, 0, 0, 0);

          void t_IDVersionPostingsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(IDVersionPostingsFormat), module, "IDVersionPostingsFormat", 0);
          }

          void t_IDVersionPostingsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IDVersionPostingsFormat).tp_dict, "class_", make_descriptor(IDVersionPostingsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IDVersionPostingsFormat).tp_dict, "wrapfn_", make_descriptor(t_IDVersionPostingsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IDVersionPostingsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(IDVersionPostingsFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(IDVersionPostingsFormat).tp_dict, "MAX_VERSION", make_descriptor(IDVersionPostingsFormat::MAX_VERSION));
            PyDict_SetItemString(PY_TYPE(IDVersionPostingsFormat).tp_dict, "MIN_VERSION", make_descriptor(IDVersionPostingsFormat::MIN_VERSION));
          }

          static PyObject *t_IDVersionPostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IDVersionPostingsFormat::initializeClass, 1)))
              return NULL;
            return t_IDVersionPostingsFormat::wrap_Object(IDVersionPostingsFormat(((t_IDVersionPostingsFormat *) arg)->object.this$));
          }
          static PyObject *t_IDVersionPostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IDVersionPostingsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IDVersionPostingsFormat_init_(t_IDVersionPostingsFormat *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                IDVersionPostingsFormat object((jobject) NULL);

                INT_CALL(object = IDVersionPostingsFormat());
                self->object = object;
                break;
              }
              goto err;
             case 2:
              {
                jint a0;
                jint a1;
                IDVersionPostingsFormat object((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  INT_CALL(object = IDVersionPostingsFormat(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IDVersionPostingsFormat_bytesToLong(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jlong result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::idversion::IDVersionPostingsFormat::bytesToLong(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError(type, "bytesToLong", arg);
            return NULL;
          }

          static PyObject *t_IDVersionPostingsFormat_fieldsConsumer(t_IDVersionPostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_FieldsConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IDVersionPostingsFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_IDVersionPostingsFormat_fieldsProducer(t_IDVersionPostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IDVersionPostingsFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }

          static PyObject *t_IDVersionPostingsFormat_longToBytes(PyTypeObject *type, PyObject *args)
          {
            jlong a0;
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);

            if (!parseArgs(args, "Jk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(::org::apache::lucene::codecs::idversion::IDVersionPostingsFormat::longToBytes(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "longToBytes", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/TermFreqIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *TermFreqIterator::class$ = NULL;
          jmethodID *TermFreqIterator::mids$ = NULL;
          bool TermFreqIterator::live$ = false;

          jclass TermFreqIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/TermFreqIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jlong TermFreqIterator::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/spell/TermFreqIterator$TermFreqIteratorWrapper.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_TermFreqIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermFreqIterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermFreqIterator_weight(t_TermFreqIterator *self);

          static PyMethodDef t_TermFreqIterator__methods_[] = {
            DECLARE_METHOD(t_TermFreqIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermFreqIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermFreqIterator, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TermFreqIterator, t_TermFreqIterator, ::org::apache::lucene::util::BytesRefIterator, TermFreqIterator, abstract_init, 0, 0, 0, 0, 0);

          void t_TermFreqIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(TermFreqIterator), module, "TermFreqIterator", 0);
            PyDict_SetItemString(PY_TYPE(TermFreqIterator).tp_dict, "TermFreqIteratorWrapper", make_descriptor(&PY_TYPE(TermFreqIterator$TermFreqIteratorWrapper)));
          }

          void t_TermFreqIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TermFreqIterator).tp_dict, "class_", make_descriptor(TermFreqIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TermFreqIterator).tp_dict, "wrapfn_", make_descriptor(t_TermFreqIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TermFreqIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TermFreqIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TermFreqIterator::initializeClass, 1)))
              return NULL;
            return t_TermFreqIterator::wrap_Object(TermFreqIterator(((t_TermFreqIterator *) arg)->object.this$));
          }
          static PyObject *t_TermFreqIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TermFreqIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TermFreqIterator_weight(t_TermFreqIterator *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LimitTokenPositionFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LimitTokenPositionFilter::class$ = NULL;
          jmethodID *LimitTokenPositionFilter::mids$ = NULL;
          bool LimitTokenPositionFilter::live$ = false;

          jclass LimitTokenPositionFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LimitTokenPositionFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_init$_4f7f61d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;IZ)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LimitTokenPositionFilter::LimitTokenPositionFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          LimitTokenPositionFilter::LimitTokenPositionFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, jboolean a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_4f7f61d3, a0.this$, a1, a2)) {}

          jboolean LimitTokenPositionFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void LimitTokenPositionFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LimitTokenPositionFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LimitTokenPositionFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LimitTokenPositionFilter_init_(t_LimitTokenPositionFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LimitTokenPositionFilter_incrementToken(t_LimitTokenPositionFilter *self, PyObject *args);
          static PyObject *t_LimitTokenPositionFilter_reset(t_LimitTokenPositionFilter *self, PyObject *args);

          static PyMethodDef t_LimitTokenPositionFilter__methods_[] = {
            DECLARE_METHOD(t_LimitTokenPositionFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenPositionFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenPositionFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_LimitTokenPositionFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LimitTokenPositionFilter, t_LimitTokenPositionFilter, ::org::apache::lucene::analysis::TokenFilter, LimitTokenPositionFilter, t_LimitTokenPositionFilter_init_, 0, 0, 0, 0, 0);

          void t_LimitTokenPositionFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(LimitTokenPositionFilter), module, "LimitTokenPositionFilter", 0);
          }

          void t_LimitTokenPositionFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LimitTokenPositionFilter).tp_dict, "class_", make_descriptor(LimitTokenPositionFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LimitTokenPositionFilter).tp_dict, "wrapfn_", make_descriptor(t_LimitTokenPositionFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LimitTokenPositionFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LimitTokenPositionFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LimitTokenPositionFilter::initializeClass, 1)))
              return NULL;
            return t_LimitTokenPositionFilter::wrap_Object(LimitTokenPositionFilter(((t_LimitTokenPositionFilter *) arg)->object.this$));
          }
          static PyObject *t_LimitTokenPositionFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LimitTokenPositionFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LimitTokenPositionFilter_init_(t_LimitTokenPositionFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                LimitTokenPositionFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = LimitTokenPositionFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                jboolean a2;
                LimitTokenPositionFilter object((jobject) NULL);

                if (!parseArgs(args, "kIZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = LimitTokenPositionFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LimitTokenPositionFilter_incrementToken(t_LimitTokenPositionFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(LimitTokenPositionFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_LimitTokenPositionFilter_reset(t_LimitTokenPositionFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(LimitTokenPositionFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache.h"
#include "org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *LruTaxonomyWriterCache::class$ = NULL;
            jmethodID *LruTaxonomyWriterCache::mids$ = NULL;
            bool LruTaxonomyWriterCache::live$ = false;

            jclass LruTaxonomyWriterCache::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_init$_83a5d707] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType;)V");
                mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_get_283f83f5] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
                mids$[mid_isFull_54c6a16a] = env->getMethodID(cls, "isFull", "()Z");
                mids$[mid_put_7ba580a4] = env->getMethodID(cls, "put", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;I)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LruTaxonomyWriterCache::LruTaxonomyWriterCache(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

            LruTaxonomyWriterCache::LruTaxonomyWriterCache(jint a0, const ::org::apache::lucene::facet::taxonomy::writercache::LruTaxonomyWriterCache$LRUType & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_83a5d707, a0, a1.this$)) {}

            void LruTaxonomyWriterCache::clear() const
            {
              env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
            }

            void LruTaxonomyWriterCache::close() const
            {
              env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
            }

            jint LruTaxonomyWriterCache::get(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_get_283f83f5], a0.this$);
            }

            jboolean LruTaxonomyWriterCache::isFull() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isFull_54c6a16a]);
            }

            jboolean LruTaxonomyWriterCache::put(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0, jint a1) const
            {
              return env->callBooleanMethod(this$, mids$[mid_put_7ba580a4], a0.this$, a1);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_LruTaxonomyWriterCache_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LruTaxonomyWriterCache_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LruTaxonomyWriterCache_init_(t_LruTaxonomyWriterCache *self, PyObject *args, PyObject *kwds);
            static PyObject *t_LruTaxonomyWriterCache_clear(t_LruTaxonomyWriterCache *self);
            static PyObject *t_LruTaxonomyWriterCache_close(t_LruTaxonomyWriterCache *self);
            static PyObject *t_LruTaxonomyWriterCache_get(t_LruTaxonomyWriterCache *self, PyObject *arg);
            static PyObject *t_LruTaxonomyWriterCache_isFull(t_LruTaxonomyWriterCache *self);
            static PyObject *t_LruTaxonomyWriterCache_put(t_LruTaxonomyWriterCache *self, PyObject *args);
            static PyObject *t_LruTaxonomyWriterCache_get__full(t_LruTaxonomyWriterCache *self, void *data);
            static PyGetSetDef t_LruTaxonomyWriterCache__fields_[] = {
              DECLARE_GET_FIELD(t_LruTaxonomyWriterCache, full),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_LruTaxonomyWriterCache__methods_[] = {
              DECLARE_METHOD(t_LruTaxonomyWriterCache, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache, clear, METH_NOARGS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache, close, METH_NOARGS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache, get, METH_O),
              DECLARE_METHOD(t_LruTaxonomyWriterCache, isFull, METH_NOARGS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache, put, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(LruTaxonomyWriterCache, t_LruTaxonomyWriterCache, ::java::lang::Object, LruTaxonomyWriterCache, t_LruTaxonomyWriterCache_init_, 0, 0, t_LruTaxonomyWriterCache__fields_, 0, 0);

            void t_LruTaxonomyWriterCache::install(PyObject *module)
            {
              installType(&PY_TYPE(LruTaxonomyWriterCache), module, "LruTaxonomyWriterCache", 0);
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache).tp_dict, "LRUType", make_descriptor(&PY_TYPE(LruTaxonomyWriterCache$LRUType)));
            }

            void t_LruTaxonomyWriterCache::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache).tp_dict, "class_", make_descriptor(LruTaxonomyWriterCache::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache).tp_dict, "wrapfn_", make_descriptor(t_LruTaxonomyWriterCache::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_LruTaxonomyWriterCache_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LruTaxonomyWriterCache::initializeClass, 1)))
                return NULL;
              return t_LruTaxonomyWriterCache::wrap_Object(LruTaxonomyWriterCache(((t_LruTaxonomyWriterCache *) arg)->object.this$));
            }
            static PyObject *t_LruTaxonomyWriterCache_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LruTaxonomyWriterCache::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LruTaxonomyWriterCache_init_(t_LruTaxonomyWriterCache *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  jint a0;
                  LruTaxonomyWriterCache object((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    INT_CALL(object = LruTaxonomyWriterCache(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  jint a0;
                  ::org::apache::lucene::facet::taxonomy::writercache::LruTaxonomyWriterCache$LRUType a1((jobject) NULL);
                  PyTypeObject **p1;
                  LruTaxonomyWriterCache object((jobject) NULL);

                  if (!parseArgs(args, "IK", ::org::apache::lucene::facet::taxonomy::writercache::LruTaxonomyWriterCache$LRUType::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::facet::taxonomy::writercache::t_LruTaxonomyWriterCache$LRUType::parameters_))
                  {
                    INT_CALL(object = LruTaxonomyWriterCache(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_LruTaxonomyWriterCache_clear(t_LruTaxonomyWriterCache *self)
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            static PyObject *t_LruTaxonomyWriterCache_close(t_LruTaxonomyWriterCache *self)
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            static PyObject *t_LruTaxonomyWriterCache_get(t_LruTaxonomyWriterCache *self, PyObject *arg)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_LruTaxonomyWriterCache_isFull(t_LruTaxonomyWriterCache *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.isFull());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_LruTaxonomyWriterCache_put(t_LruTaxonomyWriterCache *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint a1;
              jboolean result;

              if (!parseArgs(args, "kI", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.put(a0, a1));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "put", args);
              return NULL;
            }

            static PyObject *t_LruTaxonomyWriterCache_get__full(t_LruTaxonomyWriterCache *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isFull());
              Py_RETURN_BOOL(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/FastCharStream.h"
#include "org/apache/lucene/queryparser/surround/parser/CharStream.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *FastCharStream::class$ = NULL;
            jmethodID *FastCharStream::mids$ = NULL;
            bool FastCharStream::live$ = false;

            jclass FastCharStream::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/FastCharStream");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_BeginToken_54c6a173] = env->getMethodID(cls, "BeginToken", "()C");
                mids$[mid_Done_54c6a166] = env->getMethodID(cls, "Done", "()V");
                mids$[mid_GetImage_14c7b5c5] = env->getMethodID(cls, "GetImage", "()Ljava/lang/String;");
                mids$[mid_GetSuffix_b4292e99] = env->getMethodID(cls, "GetSuffix", "(I)[C");
                mids$[mid_backup_39c7bd3c] = env->getMethodID(cls, "backup", "(I)V");
                mids$[mid_getBeginColumn_54c6a179] = env->getMethodID(cls, "getBeginColumn", "()I");
                mids$[mid_getBeginLine_54c6a179] = env->getMethodID(cls, "getBeginLine", "()I");
                mids$[mid_getColumn_54c6a179] = env->getMethodID(cls, "getColumn", "()I");
                mids$[mid_getEndColumn_54c6a179] = env->getMethodID(cls, "getEndColumn", "()I");
                mids$[mid_getEndLine_54c6a179] = env->getMethodID(cls, "getEndLine", "()I");
                mids$[mid_getLine_54c6a179] = env->getMethodID(cls, "getLine", "()I");
                mids$[mid_readChar_54c6a173] = env->getMethodID(cls, "readChar", "()C");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FastCharStream::FastCharStream(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

            jchar FastCharStream::BeginToken() const
            {
              return env->callCharMethod(this$, mids$[mid_BeginToken_54c6a173]);
            }

            void FastCharStream::Done() const
            {
              env->callVoidMethod(this$, mids$[mid_Done_54c6a166]);
            }

            ::java::lang::String FastCharStream::GetImage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_GetImage_14c7b5c5]));
            }

            JArray< jchar > FastCharStream::GetSuffix(jint a0) const
            {
              return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_GetSuffix_b4292e99], a0));
            }

            void FastCharStream::backup(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_backup_39c7bd3c], a0);
            }

            jint FastCharStream::getBeginColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getBeginColumn_54c6a179]);
            }

            jint FastCharStream::getBeginLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getBeginLine_54c6a179]);
            }

            jint FastCharStream::getColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getColumn_54c6a179]);
            }

            jint FastCharStream::getEndColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getEndColumn_54c6a179]);
            }

            jint FastCharStream::getEndLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getEndLine_54c6a179]);
            }

            jint FastCharStream::getLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getLine_54c6a179]);
            }

            jchar FastCharStream::readChar() const
            {
              return env->callCharMethod(this$, mids$[mid_readChar_54c6a173]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_FastCharStream_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FastCharStream_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FastCharStream_init_(t_FastCharStream *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FastCharStream_BeginToken(t_FastCharStream *self);
            static PyObject *t_FastCharStream_Done(t_FastCharStream *self);
            static PyObject *t_FastCharStream_GetImage(t_FastCharStream *self);
            static PyObject *t_FastCharStream_GetSuffix(t_FastCharStream *self, PyObject *arg);
            static PyObject *t_FastCharStream_backup(t_FastCharStream *self, PyObject *arg);
            static PyObject *t_FastCharStream_getBeginColumn(t_FastCharStream *self);
            static PyObject *t_FastCharStream_getBeginLine(t_FastCharStream *self);
            static PyObject *t_FastCharStream_getColumn(t_FastCharStream *self);
            static PyObject *t_FastCharStream_getEndColumn(t_FastCharStream *self);
            static PyObject *t_FastCharStream_getEndLine(t_FastCharStream *self);
            static PyObject *t_FastCharStream_getLine(t_FastCharStream *self);
            static PyObject *t_FastCharStream_readChar(t_FastCharStream *self);
            static PyObject *t_FastCharStream_get__beginColumn(t_FastCharStream *self, void *data);
            static PyObject *t_FastCharStream_get__beginLine(t_FastCharStream *self, void *data);
            static PyObject *t_FastCharStream_get__column(t_FastCharStream *self, void *data);
            static PyObject *t_FastCharStream_get__endColumn(t_FastCharStream *self, void *data);
            static PyObject *t_FastCharStream_get__endLine(t_FastCharStream *self, void *data);
            static PyObject *t_FastCharStream_get__line(t_FastCharStream *self, void *data);
            static PyGetSetDef t_FastCharStream__fields_[] = {
              DECLARE_GET_FIELD(t_FastCharStream, beginColumn),
              DECLARE_GET_FIELD(t_FastCharStream, beginLine),
              DECLARE_GET_FIELD(t_FastCharStream, column),
              DECLARE_GET_FIELD(t_FastCharStream, endColumn),
              DECLARE_GET_FIELD(t_FastCharStream, endLine),
              DECLARE_GET_FIELD(t_FastCharStream, line),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FastCharStream__methods_[] = {
              DECLARE_METHOD(t_FastCharStream, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FastCharStream, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FastCharStream, BeginToken, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, Done, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, GetImage, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, GetSuffix, METH_O),
              DECLARE_METHOD(t_FastCharStream, backup, METH_O),
              DECLARE_METHOD(t_FastCharStream, getBeginColumn, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, getBeginLine, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, getColumn, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, getEndColumn, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, getEndLine, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, getLine, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, readChar, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FastCharStream, t_FastCharStream, ::java::lang::Object, FastCharStream, t_FastCharStream_init_, 0, 0, t_FastCharStream__fields_, 0, 0);

            void t_FastCharStream::install(PyObject *module)
            {
              installType(&PY_TYPE(FastCharStream), module, "FastCharStream", 0);
            }

            void t_FastCharStream::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "class_", make_descriptor(FastCharStream::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "wrapfn_", make_descriptor(t_FastCharStream::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FastCharStream_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FastCharStream::initializeClass, 1)))
                return NULL;
              return t_FastCharStream::wrap_Object(FastCharStream(((t_FastCharStream *) arg)->object.this$));
            }
            static PyObject *t_FastCharStream_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FastCharStream::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FastCharStream_init_(t_FastCharStream *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::Reader a0((jobject) NULL);
              FastCharStream object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                INT_CALL(object = FastCharStream(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FastCharStream_BeginToken(t_FastCharStream *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.BeginToken());
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            static PyObject *t_FastCharStream_Done(t_FastCharStream *self)
            {
              OBJ_CALL(self->object.Done());
              Py_RETURN_NONE;
            }

            static PyObject *t_FastCharStream_GetImage(t_FastCharStream *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.GetImage());
              return j2p(result);
            }

            static PyObject *t_FastCharStream_GetSuffix(t_FastCharStream *self, PyObject *arg)
            {
              jint a0;
              JArray< jchar > result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.GetSuffix(a0));
                return result.wrap();
              }

              PyErr_SetArgsError((PyObject *) self, "GetSuffix", arg);
              return NULL;
            }

            static PyObject *t_FastCharStream_backup(t_FastCharStream *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.backup(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "backup", arg);
              return NULL;
            }

            static PyObject *t_FastCharStream_getBeginColumn(t_FastCharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBeginColumn());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_FastCharStream_getBeginLine(t_FastCharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBeginLine());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_FastCharStream_getColumn(t_FastCharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getColumn());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_FastCharStream_getEndColumn(t_FastCharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getEndColumn());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_FastCharStream_getEndLine(t_FastCharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getEndLine());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_FastCharStream_getLine(t_FastCharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getLine());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_FastCharStream_readChar(t_FastCharStream *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.readChar());
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            static PyObject *t_FastCharStream_get__beginColumn(t_FastCharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBeginColumn());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_FastCharStream_get__beginLine(t_FastCharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBeginLine());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_FastCharStream_get__column(t_FastCharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getColumn());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_FastCharStream_get__endColumn(t_FastCharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getEndColumn());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_FastCharStream_get__endLine(t_FastCharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getEndLine());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_FastCharStream_get__line(t_FastCharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getLine());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Header.h"
#include "org/apache/lucene/util/packed/PackedInts$Format.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Header::class$ = NULL;
          jmethodID *PackedInts$Header::mids$ = NULL;
          bool PackedInts$Header::live$ = false;

          jclass PackedInts$Header::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Header");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_46a0813c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/packed/PackedInts$Format;III)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts$Header::PackedInts$Header(const ::org::apache::lucene::util::packed::PackedInts$Format & a0, jint a1, jint a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_46a0813c, a0.this$, a1, a2, a3)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Header_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Header_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedInts$Header_init_(t_PackedInts$Header *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_PackedInts$Header__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Header, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Header, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$Header, t_PackedInts$Header, ::java::lang::Object, PackedInts$Header, t_PackedInts$Header_init_, 0, 0, 0, 0, 0);

          void t_PackedInts$Header::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Header), module, "PackedInts$Header", 0);
          }

          void t_PackedInts$Header::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$Header).tp_dict, "class_", make_descriptor(PackedInts$Header::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$Header).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$Header::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$Header).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$Header_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Header::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Header::wrap_Object(PackedInts$Header(((t_PackedInts$Header *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Header_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Header::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedInts$Header_init_(t_PackedInts$Header *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::packed::PackedInts$Format a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            jint a2;
            jint a3;
            PackedInts$Header object((jobject) NULL);

            if (!parseArgs(args, "KIII", ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &p0, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a1, &a2, &a3))
            {
              INT_CALL(object = PackedInts$Header(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *FuzzyLikeThisQuery::class$ = NULL;
          jmethodID *FuzzyLikeThisQuery::mids$ = NULL;
          bool FuzzyLikeThisQuery::live$ = false;

          jclass FuzzyLikeThisQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_374e0216] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_addTerms_7066f4ef] = env->getMethodID(cls, "addTerms", "(Ljava/lang/String;Ljava/lang/String;FI)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_isIgnoreTF_54c6a16a] = env->getMethodID(cls, "isIgnoreTF", "()Z");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_setIgnoreTF_bb0c767f] = env->getMethodID(cls, "setIgnoreTF", "(Z)V");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FuzzyLikeThisQuery::FuzzyLikeThisQuery(jint a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_374e0216, a0, a1.this$)) {}

          void FuzzyLikeThisQuery::addTerms(const ::java::lang::String & a0, const ::java::lang::String & a1, jfloat a2, jint a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addTerms_7066f4ef], a0.this$, a1.this$, a2, a3);
          }

          jboolean FuzzyLikeThisQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint FuzzyLikeThisQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jboolean FuzzyLikeThisQuery::isIgnoreTF() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIgnoreTF_54c6a16a]);
          }

          ::org::apache::lucene::search::Query FuzzyLikeThisQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          void FuzzyLikeThisQuery::setIgnoreTF(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setIgnoreTF_bb0c767f], a0);
          }

          ::java::lang::String FuzzyLikeThisQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_FuzzyLikeThisQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FuzzyLikeThisQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FuzzyLikeThisQuery_init_(t_FuzzyLikeThisQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FuzzyLikeThisQuery_addTerms(t_FuzzyLikeThisQuery *self, PyObject *args);
          static PyObject *t_FuzzyLikeThisQuery_equals(t_FuzzyLikeThisQuery *self, PyObject *args);
          static PyObject *t_FuzzyLikeThisQuery_hashCode(t_FuzzyLikeThisQuery *self, PyObject *args);
          static PyObject *t_FuzzyLikeThisQuery_isIgnoreTF(t_FuzzyLikeThisQuery *self);
          static PyObject *t_FuzzyLikeThisQuery_rewrite(t_FuzzyLikeThisQuery *self, PyObject *args);
          static PyObject *t_FuzzyLikeThisQuery_setIgnoreTF(t_FuzzyLikeThisQuery *self, PyObject *arg);
          static PyObject *t_FuzzyLikeThisQuery_toString(t_FuzzyLikeThisQuery *self, PyObject *args);
          static PyObject *t_FuzzyLikeThisQuery_get__ignoreTF(t_FuzzyLikeThisQuery *self, void *data);
          static int t_FuzzyLikeThisQuery_set__ignoreTF(t_FuzzyLikeThisQuery *self, PyObject *arg, void *data);
          static PyGetSetDef t_FuzzyLikeThisQuery__fields_[] = {
            DECLARE_GETSET_FIELD(t_FuzzyLikeThisQuery, ignoreTF),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FuzzyLikeThisQuery__methods_[] = {
            DECLARE_METHOD(t_FuzzyLikeThisQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, addTerms, METH_VARARGS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, isIgnoreTF, METH_NOARGS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, setIgnoreTF, METH_O),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FuzzyLikeThisQuery, t_FuzzyLikeThisQuery, ::org::apache::lucene::search::Query, FuzzyLikeThisQuery, t_FuzzyLikeThisQuery_init_, 0, 0, t_FuzzyLikeThisQuery__fields_, 0, 0);

          void t_FuzzyLikeThisQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(FuzzyLikeThisQuery), module, "FuzzyLikeThisQuery", 0);
          }

          void t_FuzzyLikeThisQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FuzzyLikeThisQuery).tp_dict, "class_", make_descriptor(FuzzyLikeThisQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FuzzyLikeThisQuery).tp_dict, "wrapfn_", make_descriptor(t_FuzzyLikeThisQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FuzzyLikeThisQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FuzzyLikeThisQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FuzzyLikeThisQuery::initializeClass, 1)))
              return NULL;
            return t_FuzzyLikeThisQuery::wrap_Object(FuzzyLikeThisQuery(((t_FuzzyLikeThisQuery *) arg)->object.this$));
          }
          static PyObject *t_FuzzyLikeThisQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FuzzyLikeThisQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FuzzyLikeThisQuery_init_(t_FuzzyLikeThisQuery *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
            FuzzyLikeThisQuery object((jobject) NULL);

            if (!parseArgs(args, "Ik", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
            {
              INT_CALL(object = FuzzyLikeThisQuery(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FuzzyLikeThisQuery_addTerms(t_FuzzyLikeThisQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat a2;
            jint a3;

            if (!parseArgs(args, "ssFI", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.addTerms(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addTerms", args);
            return NULL;
          }

          static PyObject *t_FuzzyLikeThisQuery_equals(t_FuzzyLikeThisQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FuzzyLikeThisQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FuzzyLikeThisQuery_hashCode(t_FuzzyLikeThisQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FuzzyLikeThisQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FuzzyLikeThisQuery_isIgnoreTF(t_FuzzyLikeThisQuery *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isIgnoreTF());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FuzzyLikeThisQuery_rewrite(t_FuzzyLikeThisQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FuzzyLikeThisQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_FuzzyLikeThisQuery_setIgnoreTF(t_FuzzyLikeThisQuery *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setIgnoreTF(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setIgnoreTF", arg);
            return NULL;
          }

          static PyObject *t_FuzzyLikeThisQuery_toString(t_FuzzyLikeThisQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FuzzyLikeThisQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FuzzyLikeThisQuery_get__ignoreTF(t_FuzzyLikeThisQuery *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isIgnoreTF());
            Py_RETURN_BOOL(value);
          }
          static int t_FuzzyLikeThisQuery_set__ignoreTF(t_FuzzyLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setIgnoreTF(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "ignoreTF", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cz/CzechStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {

          ::java::lang::Class *CzechStemFilter::class$ = NULL;
          jmethodID *CzechStemFilter::mids$ = NULL;
          bool CzechStemFilter::live$ = false;

          jclass CzechStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cz/CzechStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CzechStemFilter::CzechStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean CzechStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {
          static PyObject *t_CzechStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CzechStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CzechStemFilter_init_(t_CzechStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CzechStemFilter_incrementToken(t_CzechStemFilter *self, PyObject *args);

          static PyMethodDef t_CzechStemFilter__methods_[] = {
            DECLARE_METHOD(t_CzechStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CzechStemFilter, t_CzechStemFilter, ::org::apache::lucene::analysis::TokenFilter, CzechStemFilter, t_CzechStemFilter_init_, 0, 0, 0, 0, 0);

          void t_CzechStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CzechStemFilter), module, "CzechStemFilter", 0);
          }

          void t_CzechStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CzechStemFilter).tp_dict, "class_", make_descriptor(CzechStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CzechStemFilter).tp_dict, "wrapfn_", make_descriptor(t_CzechStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CzechStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CzechStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CzechStemFilter::initializeClass, 1)))
              return NULL;
            return t_CzechStemFilter::wrap_Object(CzechStemFilter(((t_CzechStemFilter *) arg)->object.this$));
          }
          static PyObject *t_CzechStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CzechStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CzechStemFilter_init_(t_CzechStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            CzechStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = CzechStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CzechStemFilter_incrementToken(t_CzechStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CzechStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/RandomAccessOrds.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *RandomAccessOrds::class$ = NULL;
        jmethodID *RandomAccessOrds::mids$ = NULL;
        bool RandomAccessOrds::live$ = false;

        jclass RandomAccessOrds::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/RandomAccessOrds");

            mids$ = new jmethodID[max_mid];
            mids$[mid_cardinality_54c6a179] = env->getMethodID(cls, "cardinality", "()I");
            mids$[mid_ordAt_39c7bd20] = env->getMethodID(cls, "ordAt", "(I)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint RandomAccessOrds::cardinality() const
        {
          return env->callIntMethod(this$, mids$[mid_cardinality_54c6a179]);
        }

        jlong RandomAccessOrds::ordAt(jint a0) const
        {
          return env->callLongMethod(this$, mids$[mid_ordAt_39c7bd20], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_RandomAccessOrds_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RandomAccessOrds_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RandomAccessOrds_cardinality(t_RandomAccessOrds *self);
        static PyObject *t_RandomAccessOrds_ordAt(t_RandomAccessOrds *self, PyObject *arg);

        static PyMethodDef t_RandomAccessOrds__methods_[] = {
          DECLARE_METHOD(t_RandomAccessOrds, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RandomAccessOrds, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RandomAccessOrds, cardinality, METH_NOARGS),
          DECLARE_METHOD(t_RandomAccessOrds, ordAt, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RandomAccessOrds, t_RandomAccessOrds, ::org::apache::lucene::index::SortedSetDocValues, RandomAccessOrds, abstract_init, 0, 0, 0, 0, 0);

        void t_RandomAccessOrds::install(PyObject *module)
        {
          installType(&PY_TYPE(RandomAccessOrds), module, "RandomAccessOrds", 0);
        }

        void t_RandomAccessOrds::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RandomAccessOrds).tp_dict, "class_", make_descriptor(RandomAccessOrds::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RandomAccessOrds).tp_dict, "wrapfn_", make_descriptor(t_RandomAccessOrds::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RandomAccessOrds).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RandomAccessOrds_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RandomAccessOrds::initializeClass, 1)))
            return NULL;
          return t_RandomAccessOrds::wrap_Object(RandomAccessOrds(((t_RandomAccessOrds *) arg)->object.this$));
        }
        static PyObject *t_RandomAccessOrds_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RandomAccessOrds::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RandomAccessOrds_cardinality(t_RandomAccessOrds *self)
        {
          jint result;
          OBJ_CALL(result = self->object.cardinality());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_RandomAccessOrds_ordAt(t_RandomAccessOrds *self, PyObject *arg)
        {
          jint a0;
          jlong result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.ordAt(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "ordAt", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene41/Lucene41PostingsFormat.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {

          ::java::lang::Class *Lucene41PostingsFormat::class$ = NULL;
          jmethodID *Lucene41PostingsFormat::mids$ = NULL;
          bool Lucene41PostingsFormat::live$ = false;
          jint Lucene41PostingsFormat::BLOCK_SIZE = (jint) 0;
          ::java::lang::String *Lucene41PostingsFormat::DOC_EXTENSION = NULL;
          ::java::lang::String *Lucene41PostingsFormat::PAY_EXTENSION = NULL;
          ::java::lang::String *Lucene41PostingsFormat::POS_EXTENSION = NULL;

          jclass Lucene41PostingsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene41/Lucene41PostingsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_fieldsConsumer_a15793c6] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/FieldsConsumer;");
              mids$[mid_fieldsProducer_c86c62bc] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/FieldsProducer;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              BLOCK_SIZE = env->getStaticIntField(cls, "BLOCK_SIZE");
              DOC_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "DOC_EXTENSION", "Ljava/lang/String;"));
              PAY_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "PAY_EXTENSION", "Ljava/lang/String;"));
              POS_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "POS_EXTENSION", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene41PostingsFormat::Lucene41PostingsFormat() : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          Lucene41PostingsFormat::Lucene41PostingsFormat(jint a0, jint a1) : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

          ::org::apache::lucene::codecs::FieldsConsumer Lucene41PostingsFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_a15793c6], a0.this$));
          }

          ::org::apache::lucene::codecs::FieldsProducer Lucene41PostingsFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_c86c62bc], a0.this$));
          }

          ::java::lang::String Lucene41PostingsFormat::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {
          static PyObject *t_Lucene41PostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene41PostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene41PostingsFormat_init_(t_Lucene41PostingsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene41PostingsFormat_fieldsConsumer(t_Lucene41PostingsFormat *self, PyObject *args);
          static PyObject *t_Lucene41PostingsFormat_fieldsProducer(t_Lucene41PostingsFormat *self, PyObject *args);
          static PyObject *t_Lucene41PostingsFormat_toString(t_Lucene41PostingsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene41PostingsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene41PostingsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41PostingsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41PostingsFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsFormat, fieldsProducer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsFormat, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene41PostingsFormat, t_Lucene41PostingsFormat, ::org::apache::lucene::codecs::PostingsFormat, Lucene41PostingsFormat, t_Lucene41PostingsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene41PostingsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene41PostingsFormat), module, "Lucene41PostingsFormat", 0);
          }

          void t_Lucene41PostingsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsFormat).tp_dict, "class_", make_descriptor(Lucene41PostingsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene41PostingsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene41PostingsFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsFormat).tp_dict, "BLOCK_SIZE", make_descriptor(Lucene41PostingsFormat::BLOCK_SIZE));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsFormat).tp_dict, "DOC_EXTENSION", make_descriptor(j2p(*Lucene41PostingsFormat::DOC_EXTENSION)));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsFormat).tp_dict, "PAY_EXTENSION", make_descriptor(j2p(*Lucene41PostingsFormat::PAY_EXTENSION)));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsFormat).tp_dict, "POS_EXTENSION", make_descriptor(j2p(*Lucene41PostingsFormat::POS_EXTENSION)));
          }

          static PyObject *t_Lucene41PostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene41PostingsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene41PostingsFormat::wrap_Object(Lucene41PostingsFormat(((t_Lucene41PostingsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene41PostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene41PostingsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene41PostingsFormat_init_(t_Lucene41PostingsFormat *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Lucene41PostingsFormat object((jobject) NULL);

                INT_CALL(object = Lucene41PostingsFormat());
                self->object = object;
                break;
              }
              goto err;
             case 2:
              {
                jint a0;
                jint a1;
                Lucene41PostingsFormat object((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  INT_CALL(object = Lucene41PostingsFormat(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene41PostingsFormat_fieldsConsumer(t_Lucene41PostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_FieldsConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_Lucene41PostingsFormat_fieldsProducer(t_Lucene41PostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }

          static PyObject *t_Lucene41PostingsFormat_toString(t_Lucene41PostingsFormat *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsFormat), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/br/BrazilianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {

          ::java::lang::Class *BrazilianAnalyzer::class$ = NULL;
          jmethodID *BrazilianAnalyzer::mids$ = NULL;
          bool BrazilianAnalyzer::live$ = false;
          ::java::lang::String *BrazilianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass BrazilianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/br/BrazilianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_3ea629c6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BrazilianAnalyzer::BrazilianAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          BrazilianAnalyzer::BrazilianAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          BrazilianAnalyzer::BrazilianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          BrazilianAnalyzer::BrazilianAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_3ea629c6, a0.this$, a1.this$)) {}

          BrazilianAnalyzer::BrazilianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          BrazilianAnalyzer::BrazilianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet BrazilianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {
          static PyObject *t_BrazilianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BrazilianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BrazilianAnalyzer_init_(t_BrazilianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BrazilianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_BrazilianAnalyzer_get__defaultStopSet(t_BrazilianAnalyzer *self, void *data);
          static PyGetSetDef t_BrazilianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_BrazilianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BrazilianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_BrazilianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BrazilianAnalyzer, t_BrazilianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, BrazilianAnalyzer, t_BrazilianAnalyzer_init_, 0, 0, t_BrazilianAnalyzer__fields_, 0, 0);

          void t_BrazilianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(BrazilianAnalyzer), module, "BrazilianAnalyzer", 0);
          }

          void t_BrazilianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BrazilianAnalyzer).tp_dict, "class_", make_descriptor(BrazilianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BrazilianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_BrazilianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BrazilianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(BrazilianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(BrazilianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*BrazilianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_BrazilianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BrazilianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_BrazilianAnalyzer::wrap_Object(BrazilianAnalyzer(((t_BrazilianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_BrazilianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BrazilianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BrazilianAnalyzer_init_(t_BrazilianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                BrazilianAnalyzer object((jobject) NULL);

                INT_CALL(object = BrazilianAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                BrazilianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BrazilianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                BrazilianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = BrazilianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                BrazilianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BrazilianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                BrazilianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BrazilianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                BrazilianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BrazilianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BrazilianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::br::BrazilianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_BrazilianAnalyzer_get__defaultStopSet(t_BrazilianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene410/Lucene410Codec.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene410 {

          ::java::lang::Class *Lucene410Codec::class$ = NULL;
          jmethodID *Lucene410Codec::mids$ = NULL;
          bool Lucene410Codec::live$ = false;

          jclass Lucene410Codec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene410/Lucene410Codec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_getDocValuesFormatForField_36ef78ba] = env->getMethodID(cls, "getDocValuesFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_getPostingsFormatForField_19d2f1c6] = env->getMethodID(cls, "getPostingsFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene410Codec::Lucene410Codec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesFormat Lucene410Codec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene410Codec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
          }

          ::org::apache::lucene::codecs::DocValuesFormat Lucene410Codec::getDocValuesFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_getDocValuesFormatForField_36ef78ba], a0.this$));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene410Codec::getPostingsFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_getPostingsFormatForField_19d2f1c6], a0.this$));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene410Codec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene410Codec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene410Codec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene410Codec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene410Codec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene410Codec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene410 {
          static PyObject *t_Lucene410Codec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene410Codec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene410Codec_init_(t_Lucene410Codec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene410Codec_docValuesFormat(t_Lucene410Codec *self, PyObject *args);
          static PyObject *t_Lucene410Codec_fieldInfosFormat(t_Lucene410Codec *self, PyObject *args);
          static PyObject *t_Lucene410Codec_getDocValuesFormatForField(t_Lucene410Codec *self, PyObject *arg);
          static PyObject *t_Lucene410Codec_getPostingsFormatForField(t_Lucene410Codec *self, PyObject *arg);
          static PyObject *t_Lucene410Codec_liveDocsFormat(t_Lucene410Codec *self, PyObject *args);
          static PyObject *t_Lucene410Codec_normsFormat(t_Lucene410Codec *self, PyObject *args);
          static PyObject *t_Lucene410Codec_postingsFormat(t_Lucene410Codec *self, PyObject *args);
          static PyObject *t_Lucene410Codec_segmentInfoFormat(t_Lucene410Codec *self, PyObject *args);
          static PyObject *t_Lucene410Codec_storedFieldsFormat(t_Lucene410Codec *self, PyObject *args);
          static PyObject *t_Lucene410Codec_termVectorsFormat(t_Lucene410Codec *self, PyObject *args);

          static PyMethodDef t_Lucene410Codec__methods_[] = {
            DECLARE_METHOD(t_Lucene410Codec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene410Codec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene410Codec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene410Codec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene410Codec, getDocValuesFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene410Codec, getPostingsFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene410Codec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene410Codec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene410Codec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene410Codec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene410Codec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene410Codec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene410Codec, t_Lucene410Codec, ::org::apache::lucene::codecs::Codec, Lucene410Codec, t_Lucene410Codec_init_, 0, 0, 0, 0, 0);

          void t_Lucene410Codec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene410Codec), module, "Lucene410Codec", 0);
          }

          void t_Lucene410Codec::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene410Codec).tp_dict, "class_", make_descriptor(Lucene410Codec::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene410Codec).tp_dict, "wrapfn_", make_descriptor(t_Lucene410Codec::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene410Codec).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene410Codec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene410Codec::initializeClass, 1)))
              return NULL;
            return t_Lucene410Codec::wrap_Object(Lucene410Codec(((t_Lucene410Codec *) arg)->object.this$));
          }
          static PyObject *t_Lucene410Codec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene410Codec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene410Codec_init_(t_Lucene410Codec *self, PyObject *args, PyObject *kwds)
          {
            Lucene410Codec object((jobject) NULL);

            INT_CALL(object = Lucene410Codec());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene410Codec_docValuesFormat(t_Lucene410Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene410Codec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene410Codec_fieldInfosFormat(t_Lucene410Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene410Codec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene410Codec_getDocValuesFormatForField(t_Lucene410Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getDocValuesFormatForField(a0));
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDocValuesFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene410Codec_getPostingsFormatForField(t_Lucene410Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPostingsFormatForField(a0));
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPostingsFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene410Codec_liveDocsFormat(t_Lucene410Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene410Codec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene410Codec_normsFormat(t_Lucene410Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene410Codec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene410Codec_postingsFormat(t_Lucene410Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene410Codec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene410Codec_segmentInfoFormat(t_Lucene410Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene410Codec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene410Codec_storedFieldsFormat(t_Lucene410Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene410Codec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene410Codec_termVectorsFormat(t_Lucene410Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene410Codec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/th/ThaiWordFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/th/ThaiWordFilter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {

          ::java::lang::Class *ThaiWordFilterFactory::class$ = NULL;
          jmethodID *ThaiWordFilterFactory::mids$ = NULL;
          bool ThaiWordFilterFactory::live$ = false;

          jclass ThaiWordFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/th/ThaiWordFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_55090cc5] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/th/ThaiWordFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ThaiWordFilterFactory::ThaiWordFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::th::ThaiWordFilter ThaiWordFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::th::ThaiWordFilter(env->callObjectMethod(this$, mids$[mid_create_55090cc5], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {
          static PyObject *t_ThaiWordFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ThaiWordFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ThaiWordFilterFactory_init_(t_ThaiWordFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ThaiWordFilterFactory_create(t_ThaiWordFilterFactory *self, PyObject *args);

          static PyMethodDef t_ThaiWordFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ThaiWordFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiWordFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiWordFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ThaiWordFilterFactory, t_ThaiWordFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ThaiWordFilterFactory, t_ThaiWordFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ThaiWordFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ThaiWordFilterFactory), module, "ThaiWordFilterFactory", 0);
          }

          void t_ThaiWordFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ThaiWordFilterFactory).tp_dict, "class_", make_descriptor(ThaiWordFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ThaiWordFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ThaiWordFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ThaiWordFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ThaiWordFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ThaiWordFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ThaiWordFilterFactory::wrap_Object(ThaiWordFilterFactory(((t_ThaiWordFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ThaiWordFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ThaiWordFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ThaiWordFilterFactory_init_(t_ThaiWordFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ThaiWordFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ThaiWordFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ThaiWordFilterFactory_create(t_ThaiWordFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::th::ThaiWordFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::th::t_ThaiWordFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ThaiWordFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Diff.h"
#include "java/lang/CharSequence.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Diff::class$ = NULL;
      jmethodID *Diff::mids$ = NULL;
      bool Diff::live$ = false;

      jclass Diff::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Diff");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_init$_ca5a6f66] = env->getMethodID(cls, "<init>", "(IIII)V");
          mids$[mid_apply_33cdba70] = env->getStaticMethodID(cls, "apply", "(Ljava/lang/StringBuilder;Ljava/lang/CharSequence;)V");
          mids$[mid_exec_aacea7e9] = env->getMethodID(cls, "exec", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Diff::Diff() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      Diff::Diff(jint a0, jint a1, jint a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ca5a6f66, a0, a1, a2, a3)) {}

      void Diff::apply(const ::java::lang::StringBuilder & a0, const ::java::lang::CharSequence & a1)
      {
        jclass cls = env->getClass(initializeClass);
        env->callStaticVoidMethod(cls, mids$[mid_apply_33cdba70], a0.this$, a1.this$);
      }

      ::java::lang::String Diff::exec(const ::java::lang::String & a0, const ::java::lang::String & a1) const
      {
        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_exec_aacea7e9], a0.this$, a1.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Diff_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Diff_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Diff_init_(t_Diff *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Diff_apply(PyTypeObject *type, PyObject *args);
      static PyObject *t_Diff_exec(t_Diff *self, PyObject *args);

      static PyMethodDef t_Diff__methods_[] = {
        DECLARE_METHOD(t_Diff, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Diff, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Diff, apply, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Diff, exec, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Diff, t_Diff, ::java::lang::Object, Diff, t_Diff_init_, 0, 0, 0, 0, 0);

      void t_Diff::install(PyObject *module)
      {
        installType(&PY_TYPE(Diff), module, "Diff", 0);
      }

      void t_Diff::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Diff).tp_dict, "class_", make_descriptor(Diff::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Diff).tp_dict, "wrapfn_", make_descriptor(t_Diff::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Diff).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Diff_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Diff::initializeClass, 1)))
          return NULL;
        return t_Diff::wrap_Object(Diff(((t_Diff *) arg)->object.this$));
      }
      static PyObject *t_Diff_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Diff::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Diff_init_(t_Diff *self, PyObject *args, PyObject *kwds)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            Diff object((jobject) NULL);

            INT_CALL(object = Diff());
            self->object = object;
            break;
          }
          goto err;
         case 4:
          {
            jint a0;
            jint a1;
            jint a2;
            jint a3;
            Diff object((jobject) NULL);

            if (!parseArgs(args, "IIII", &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = Diff(a0, a1, a2, a3));
              self->object = object;
              break;
            }
          }
         default:
         err:
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_Diff_apply(PyTypeObject *type, PyObject *args)
      {
        ::java::lang::StringBuilder a0((jobject) NULL);
        ::java::lang::CharSequence a1((jobject) NULL);

        if (!parseArgs(args, "kO", ::java::lang::StringBuilder::initializeClass, &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
        {
          OBJ_CALL(::org::egothor::stemmer::Diff::apply(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError(type, "apply", args);
        return NULL;
      }

      static PyObject *t_Diff_exec(t_Diff *self, PyObject *args)
      {
        ::java::lang::String a0((jobject) NULL);
        ::java::lang::String a1((jobject) NULL);
        ::java::lang::String result((jobject) NULL);

        if (!parseArgs(args, "ss", &a0, &a1))
        {
          OBJ_CALL(result = self->object.exec(a0, a1));
          return j2p(result);
        }

        PyErr_SetArgsError((PyObject *) self, "exec", args);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryParserHelper.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/SyntaxParser.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/builders/QueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {

            ::java::lang::Class *QueryParserHelper::class$ = NULL;
            jmethodID *QueryParserHelper::mids$ = NULL;
            bool QueryParserHelper::live$ = false;

            jclass QueryParserHelper::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/QueryParserHelper");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_552e5b8b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;Lorg/apache/lucene/queryparser/flexible/core/parser/SyntaxParser;Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;Lorg/apache/lucene/queryparser/flexible/core/builders/QueryBuilder;)V");
                mids$[mid_getQueryBuilder_8003a74c] = env->getMethodID(cls, "getQueryBuilder", "()Lorg/apache/lucene/queryparser/flexible/core/builders/QueryBuilder;");
                mids$[mid_getQueryConfigHandler_3636d8c3] = env->getMethodID(cls, "getQueryConfigHandler", "()Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;");
                mids$[mid_getQueryNodeProcessor_eb463160] = env->getMethodID(cls, "getQueryNodeProcessor", "()Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;");
                mids$[mid_getSyntaxParser_ede87db0] = env->getMethodID(cls, "getSyntaxParser", "()Lorg/apache/lucene/queryparser/flexible/core/parser/SyntaxParser;");
                mids$[mid_parse_1a6a44ef] = env->getMethodID(cls, "parse", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;");
                mids$[mid_setQueryBuilder_f13b6d3d] = env->getMethodID(cls, "setQueryBuilder", "(Lorg/apache/lucene/queryparser/flexible/core/builders/QueryBuilder;)V");
                mids$[mid_setQueryConfigHandler_0b1f7132] = env->getMethodID(cls, "setQueryConfigHandler", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                mids$[mid_setQueryNodeProcessor_507a7d15] = env->getMethodID(cls, "setQueryNodeProcessor", "(Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;)V");
                mids$[mid_setSyntaxParser_af2d05c9] = env->getMethodID(cls, "setSyntaxParser", "(Lorg/apache/lucene/queryparser/flexible/core/parser/SyntaxParser;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryParserHelper::QueryParserHelper(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0, const ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser & a1, const ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor & a2, const ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_552e5b8b, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder QueryParserHelper::getQueryBuilder() const
            {
              return ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder(env->callObjectMethod(this$, mids$[mid_getQueryBuilder_8003a74c]));
            }

            ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler QueryParserHelper::getQueryConfigHandler() const
            {
              return ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->callObjectMethod(this$, mids$[mid_getQueryConfigHandler_3636d8c3]));
            }

            ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor QueryParserHelper::getQueryNodeProcessor() const
            {
              return ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor(env->callObjectMethod(this$, mids$[mid_getQueryNodeProcessor_eb463160]));
            }

            ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser QueryParserHelper::getSyntaxParser() const
            {
              return ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser(env->callObjectMethod(this$, mids$[mid_getSyntaxParser_ede87db0]));
            }

            ::java::lang::Object QueryParserHelper::parse(const ::java::lang::String & a0, const ::java::lang::String & a1) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_parse_1a6a44ef], a0.this$, a1.this$));
            }

            void QueryParserHelper::setQueryBuilder(const ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setQueryBuilder_f13b6d3d], a0.this$);
            }

            void QueryParserHelper::setQueryConfigHandler(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setQueryConfigHandler_0b1f7132], a0.this$);
            }

            void QueryParserHelper::setQueryNodeProcessor(const ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setQueryNodeProcessor_507a7d15], a0.this$);
            }

            void QueryParserHelper::setSyntaxParser(const ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setSyntaxParser_af2d05c9], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            static PyObject *t_QueryParserHelper_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParserHelper_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryParserHelper_init_(t_QueryParserHelper *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryParserHelper_getQueryBuilder(t_QueryParserHelper *self);
            static PyObject *t_QueryParserHelper_getQueryConfigHandler(t_QueryParserHelper *self);
            static PyObject *t_QueryParserHelper_getQueryNodeProcessor(t_QueryParserHelper *self);
            static PyObject *t_QueryParserHelper_getSyntaxParser(t_QueryParserHelper *self);
            static PyObject *t_QueryParserHelper_parse(t_QueryParserHelper *self, PyObject *args);
            static PyObject *t_QueryParserHelper_setQueryBuilder(t_QueryParserHelper *self, PyObject *arg);
            static PyObject *t_QueryParserHelper_setQueryConfigHandler(t_QueryParserHelper *self, PyObject *arg);
            static PyObject *t_QueryParserHelper_setQueryNodeProcessor(t_QueryParserHelper *self, PyObject *arg);
            static PyObject *t_QueryParserHelper_setSyntaxParser(t_QueryParserHelper *self, PyObject *arg);
            static PyObject *t_QueryParserHelper_get__queryBuilder(t_QueryParserHelper *self, void *data);
            static int t_QueryParserHelper_set__queryBuilder(t_QueryParserHelper *self, PyObject *arg, void *data);
            static PyObject *t_QueryParserHelper_get__queryConfigHandler(t_QueryParserHelper *self, void *data);
            static int t_QueryParserHelper_set__queryConfigHandler(t_QueryParserHelper *self, PyObject *arg, void *data);
            static PyObject *t_QueryParserHelper_get__queryNodeProcessor(t_QueryParserHelper *self, void *data);
            static int t_QueryParserHelper_set__queryNodeProcessor(t_QueryParserHelper *self, PyObject *arg, void *data);
            static PyObject *t_QueryParserHelper_get__syntaxParser(t_QueryParserHelper *self, void *data);
            static int t_QueryParserHelper_set__syntaxParser(t_QueryParserHelper *self, PyObject *arg, void *data);
            static PyGetSetDef t_QueryParserHelper__fields_[] = {
              DECLARE_GETSET_FIELD(t_QueryParserHelper, queryBuilder),
              DECLARE_GETSET_FIELD(t_QueryParserHelper, queryConfigHandler),
              DECLARE_GETSET_FIELD(t_QueryParserHelper, queryNodeProcessor),
              DECLARE_GETSET_FIELD(t_QueryParserHelper, syntaxParser),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryParserHelper__methods_[] = {
              DECLARE_METHOD(t_QueryParserHelper, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserHelper, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserHelper, getQueryBuilder, METH_NOARGS),
              DECLARE_METHOD(t_QueryParserHelper, getQueryConfigHandler, METH_NOARGS),
              DECLARE_METHOD(t_QueryParserHelper, getQueryNodeProcessor, METH_NOARGS),
              DECLARE_METHOD(t_QueryParserHelper, getSyntaxParser, METH_NOARGS),
              DECLARE_METHOD(t_QueryParserHelper, parse, METH_VARARGS),
              DECLARE_METHOD(t_QueryParserHelper, setQueryBuilder, METH_O),
              DECLARE_METHOD(t_QueryParserHelper, setQueryConfigHandler, METH_O),
              DECLARE_METHOD(t_QueryParserHelper, setQueryNodeProcessor, METH_O),
              DECLARE_METHOD(t_QueryParserHelper, setSyntaxParser, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryParserHelper, t_QueryParserHelper, ::java::lang::Object, QueryParserHelper, t_QueryParserHelper_init_, 0, 0, t_QueryParserHelper__fields_, 0, 0);

            void t_QueryParserHelper::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryParserHelper), module, "QueryParserHelper", 0);
            }

            void t_QueryParserHelper::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryParserHelper).tp_dict, "class_", make_descriptor(QueryParserHelper::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryParserHelper).tp_dict, "wrapfn_", make_descriptor(t_QueryParserHelper::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryParserHelper).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryParserHelper_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryParserHelper::initializeClass, 1)))
                return NULL;
              return t_QueryParserHelper::wrap_Object(QueryParserHelper(((t_QueryParserHelper *) arg)->object.this$));
            }
            static PyObject *t_QueryParserHelper_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryParserHelper::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryParserHelper_init_(t_QueryParserHelper *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
              ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser a1((jobject) NULL);
              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor a2((jobject) NULL);
              ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder a3((jobject) NULL);
              QueryParserHelper object((jobject) NULL);

              if (!parseArgs(args, "kkkk", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser::initializeClass, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor::initializeClass, ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = QueryParserHelper(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryParserHelper_getQueryBuilder(t_QueryParserHelper *self)
            {
              ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder result((jobject) NULL);
              OBJ_CALL(result = self->object.getQueryBuilder());
              return ::org::apache::lucene::queryparser::flexible::core::builders::t_QueryBuilder::wrap_Object(result);
            }

            static PyObject *t_QueryParserHelper_getQueryConfigHandler(t_QueryParserHelper *self)
            {
              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler result((jobject) NULL);
              OBJ_CALL(result = self->object.getQueryConfigHandler());
              return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(result);
            }

            static PyObject *t_QueryParserHelper_getQueryNodeProcessor(t_QueryParserHelper *self)
            {
              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor result((jobject) NULL);
              OBJ_CALL(result = self->object.getQueryNodeProcessor());
              return ::org::apache::lucene::queryparser::flexible::core::processors::t_QueryNodeProcessor::wrap_Object(result);
            }

            static PyObject *t_QueryParserHelper_getSyntaxParser(t_QueryParserHelper *self)
            {
              ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser result((jobject) NULL);
              OBJ_CALL(result = self->object.getSyntaxParser());
              return ::org::apache::lucene::queryparser::flexible::core::parser::t_SyntaxParser::wrap_Object(result);
            }

            static PyObject *t_QueryParserHelper_parse(t_QueryParserHelper *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(result = self->object.parse(a0, a1));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "parse", args);
              return NULL;
            }

            static PyObject *t_QueryParserHelper_setQueryBuilder(t_QueryParserHelper *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setQueryBuilder(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setQueryBuilder", arg);
              return NULL;
            }

            static PyObject *t_QueryParserHelper_setQueryConfigHandler(t_QueryParserHelper *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setQueryConfigHandler(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setQueryConfigHandler", arg);
              return NULL;
            }

            static PyObject *t_QueryParserHelper_setQueryNodeProcessor(t_QueryParserHelper *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setQueryNodeProcessor(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setQueryNodeProcessor", arg);
              return NULL;
            }

            static PyObject *t_QueryParserHelper_setSyntaxParser(t_QueryParserHelper *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setSyntaxParser(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setSyntaxParser", arg);
              return NULL;
            }

            static PyObject *t_QueryParserHelper_get__queryBuilder(t_QueryParserHelper *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder value((jobject) NULL);
              OBJ_CALL(value = self->object.getQueryBuilder());
              return ::org::apache::lucene::queryparser::flexible::core::builders::t_QueryBuilder::wrap_Object(value);
            }
            static int t_QueryParserHelper_set__queryBuilder(t_QueryParserHelper *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder::initializeClass, &value))
                {
                  INT_CALL(self->object.setQueryBuilder(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "queryBuilder", arg);
              return -1;
            }

            static PyObject *t_QueryParserHelper_get__queryConfigHandler(t_QueryParserHelper *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
              OBJ_CALL(value = self->object.getQueryConfigHandler());
              return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(value);
            }
            static int t_QueryParserHelper_set__queryConfigHandler(t_QueryParserHelper *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &value))
                {
                  INT_CALL(self->object.setQueryConfigHandler(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "queryConfigHandler", arg);
              return -1;
            }

            static PyObject *t_QueryParserHelper_get__queryNodeProcessor(t_QueryParserHelper *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor value((jobject) NULL);
              OBJ_CALL(value = self->object.getQueryNodeProcessor());
              return ::org::apache::lucene::queryparser::flexible::core::processors::t_QueryNodeProcessor::wrap_Object(value);
            }
            static int t_QueryParserHelper_set__queryNodeProcessor(t_QueryParserHelper *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor::initializeClass, &value))
                {
                  INT_CALL(self->object.setQueryNodeProcessor(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "queryNodeProcessor", arg);
              return -1;
            }

            static PyObject *t_QueryParserHelper_get__syntaxParser(t_QueryParserHelper *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser value((jobject) NULL);
              OBJ_CALL(value = self->object.getSyntaxParser());
              return ::org::apache::lucene::queryparser::flexible::core::parser::t_SyntaxParser::wrap_Object(value);
            }
            static int t_QueryParserHelper_set__syntaxParser(t_QueryParserHelper *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser::initializeClass, &value))
                {
                  INT_CALL(self->object.setSyntaxParser(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "syntaxParser", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedLongValues$Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedLongValues$Iterator::class$ = NULL;
          jmethodID *PackedLongValues$Iterator::mids$ = NULL;
          bool PackedLongValues$Iterator::live$ = false;

          jclass PackedLongValues$Iterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedLongValues$Iterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_hasNext_54c6a16a] = env->getMethodID(cls, "hasNext", "()Z");
              mids$[mid_next_54c6a17a] = env->getMethodID(cls, "next", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean PackedLongValues$Iterator::hasNext() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasNext_54c6a16a]);
          }

          jlong PackedLongValues$Iterator::next() const
          {
            return env->callLongMethod(this$, mids$[mid_next_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedLongValues$Iterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedLongValues$Iterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedLongValues$Iterator_hasNext(t_PackedLongValues$Iterator *self);
          static PyObject *t_PackedLongValues$Iterator_next(t_PackedLongValues$Iterator *self);

          static PyMethodDef t_PackedLongValues$Iterator__methods_[] = {
            DECLARE_METHOD(t_PackedLongValues$Iterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedLongValues$Iterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedLongValues$Iterator, hasNext, METH_NOARGS),
            DECLARE_METHOD(t_PackedLongValues$Iterator, next, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedLongValues$Iterator, t_PackedLongValues$Iterator, ::java::lang::Object, PackedLongValues$Iterator, abstract_init, 0, 0, 0, 0, 0);

          void t_PackedLongValues$Iterator::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedLongValues$Iterator), module, "PackedLongValues$Iterator", 0);
          }

          void t_PackedLongValues$Iterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedLongValues$Iterator).tp_dict, "class_", make_descriptor(PackedLongValues$Iterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedLongValues$Iterator).tp_dict, "wrapfn_", make_descriptor(t_PackedLongValues$Iterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedLongValues$Iterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedLongValues$Iterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedLongValues$Iterator::initializeClass, 1)))
              return NULL;
            return t_PackedLongValues$Iterator::wrap_Object(PackedLongValues$Iterator(((t_PackedLongValues$Iterator *) arg)->object.this$));
          }
          static PyObject *t_PackedLongValues$Iterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedLongValues$Iterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PackedLongValues$Iterator_hasNext(t_PackedLongValues$Iterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasNext());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_PackedLongValues$Iterator_next(t_PackedLongValues$Iterator *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.next());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/FastTaxonomyFacetCounts.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *FastTaxonomyFacetCounts::class$ = NULL;
          jmethodID *FastTaxonomyFacetCounts::mids$ = NULL;
          bool FastTaxonomyFacetCounts::live$ = false;

          jclass FastTaxonomyFacetCounts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/FastTaxonomyFacetCounts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_33dd1605] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");
              mids$[mid_init$_9888e06b] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FastTaxonomyFacetCounts::FastTaxonomyFacetCounts(const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::FacetsCollector & a2) : ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_33dd1605, a0.this$, a1.this$, a2.this$)) {}

          FastTaxonomyFacetCounts::FastTaxonomyFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a1, const ::org::apache::lucene::facet::FacetsConfig & a2, const ::org::apache::lucene::facet::FacetsCollector & a3) : ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_9888e06b, a0.this$, a1.this$, a2.this$, a3.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_FastTaxonomyFacetCounts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FastTaxonomyFacetCounts_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FastTaxonomyFacetCounts_init_(t_FastTaxonomyFacetCounts *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_FastTaxonomyFacetCounts__methods_[] = {
            DECLARE_METHOD(t_FastTaxonomyFacetCounts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FastTaxonomyFacetCounts, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FastTaxonomyFacetCounts, t_FastTaxonomyFacetCounts, ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets, FastTaxonomyFacetCounts, t_FastTaxonomyFacetCounts_init_, 0, 0, 0, 0, 0);

          void t_FastTaxonomyFacetCounts::install(PyObject *module)
          {
            installType(&PY_TYPE(FastTaxonomyFacetCounts), module, "FastTaxonomyFacetCounts", 0);
          }

          void t_FastTaxonomyFacetCounts::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FastTaxonomyFacetCounts).tp_dict, "class_", make_descriptor(FastTaxonomyFacetCounts::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FastTaxonomyFacetCounts).tp_dict, "wrapfn_", make_descriptor(t_FastTaxonomyFacetCounts::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FastTaxonomyFacetCounts).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FastTaxonomyFacetCounts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FastTaxonomyFacetCounts::initializeClass, 1)))
              return NULL;
            return t_FastTaxonomyFacetCounts::wrap_Object(FastTaxonomyFacetCounts(((t_FastTaxonomyFacetCounts *) arg)->object.this$));
          }
          static PyObject *t_FastTaxonomyFacetCounts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FastTaxonomyFacetCounts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FastTaxonomyFacetCounts_init_(t_FastTaxonomyFacetCounts *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a0((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                FastTaxonomyFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = FastTaxonomyFacetCounts(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a2((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a3((jobject) NULL);
                FastTaxonomyFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "skkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = FastTaxonomyFacetCounts(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *NumericPayloadTokenFilter::class$ = NULL;
          jmethodID *NumericPayloadTokenFilter::mids$ = NULL;
          bool NumericPayloadTokenFilter::live$ = false;

          jclass NumericPayloadTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_333172df] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;FLjava/lang/String;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NumericPayloadTokenFilter::NumericPayloadTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jfloat a1, const ::java::lang::String & a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_333172df, a0.this$, a1, a2.this$)) {}

          jboolean NumericPayloadTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_NumericPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NumericPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NumericPayloadTokenFilter_init_(t_NumericPayloadTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NumericPayloadTokenFilter_incrementToken(t_NumericPayloadTokenFilter *self, PyObject *args);

          static PyMethodDef t_NumericPayloadTokenFilter__methods_[] = {
            DECLARE_METHOD(t_NumericPayloadTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NumericPayloadTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NumericPayloadTokenFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NumericPayloadTokenFilter, t_NumericPayloadTokenFilter, ::org::apache::lucene::analysis::TokenFilter, NumericPayloadTokenFilter, t_NumericPayloadTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_NumericPayloadTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(NumericPayloadTokenFilter), module, "NumericPayloadTokenFilter", 0);
          }

          void t_NumericPayloadTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NumericPayloadTokenFilter).tp_dict, "class_", make_descriptor(NumericPayloadTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NumericPayloadTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_NumericPayloadTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NumericPayloadTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NumericPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NumericPayloadTokenFilter::initializeClass, 1)))
              return NULL;
            return t_NumericPayloadTokenFilter::wrap_Object(NumericPayloadTokenFilter(((t_NumericPayloadTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_NumericPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NumericPayloadTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NumericPayloadTokenFilter_init_(t_NumericPayloadTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            jfloat a1;
            ::java::lang::String a2((jobject) NULL);
            NumericPayloadTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kFs", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = NumericPayloadTokenFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NumericPayloadTokenFilter_incrementToken(t_NumericPayloadTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NumericPayloadTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/StandardAnalyzer.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *StandardAnalyzer::class$ = NULL;
          jmethodID *StandardAnalyzer::mids$ = NULL;
          bool StandardAnalyzer::live$ = false;
          jint StandardAnalyzer::DEFAULT_MAX_TOKEN_LENGTH = (jint) 0;
          ::org::apache::lucene::analysis::util::CharArraySet *StandardAnalyzer::STOP_WORDS_SET = NULL;

          jclass StandardAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/StandardAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getMaxTokenLength_54c6a179] = env->getMethodID(cls, "getMaxTokenLength", "()I");
              mids$[mid_setMaxTokenLength_39c7bd3c] = env->getMethodID(cls, "setMaxTokenLength", "(I)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_TOKEN_LENGTH = env->getStaticIntField(cls, "DEFAULT_MAX_TOKEN_LENGTH");
              STOP_WORDS_SET = new ::org::apache::lucene::analysis::util::CharArraySet(env->getStaticObjectField(cls, "STOP_WORDS_SET", "Lorg/apache/lucene/analysis/util/CharArraySet;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StandardAnalyzer::StandardAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          StandardAnalyzer::StandardAnalyzer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          StandardAnalyzer::StandardAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          StandardAnalyzer::StandardAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          StandardAnalyzer::StandardAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          StandardAnalyzer::StandardAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          jint StandardAnalyzer::getMaxTokenLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxTokenLength_54c6a179]);
          }

          void StandardAnalyzer::setMaxTokenLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxTokenLength_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_StandardAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StandardAnalyzer_init_(t_StandardAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StandardAnalyzer_getMaxTokenLength(t_StandardAnalyzer *self);
          static PyObject *t_StandardAnalyzer_setMaxTokenLength(t_StandardAnalyzer *self, PyObject *arg);
          static PyObject *t_StandardAnalyzer_get__maxTokenLength(t_StandardAnalyzer *self, void *data);
          static int t_StandardAnalyzer_set__maxTokenLength(t_StandardAnalyzer *self, PyObject *arg, void *data);
          static PyGetSetDef t_StandardAnalyzer__fields_[] = {
            DECLARE_GETSET_FIELD(t_StandardAnalyzer, maxTokenLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StandardAnalyzer__methods_[] = {
            DECLARE_METHOD(t_StandardAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardAnalyzer, getMaxTokenLength, METH_NOARGS),
            DECLARE_METHOD(t_StandardAnalyzer, setMaxTokenLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StandardAnalyzer, t_StandardAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, StandardAnalyzer, t_StandardAnalyzer_init_, 0, 0, t_StandardAnalyzer__fields_, 0, 0);

          void t_StandardAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(StandardAnalyzer), module, "StandardAnalyzer", 0);
          }

          void t_StandardAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StandardAnalyzer).tp_dict, "class_", make_descriptor(StandardAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StandardAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_StandardAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StandardAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(StandardAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(StandardAnalyzer).tp_dict, "DEFAULT_MAX_TOKEN_LENGTH", make_descriptor(StandardAnalyzer::DEFAULT_MAX_TOKEN_LENGTH));
            PyDict_SetItemString(PY_TYPE(StandardAnalyzer).tp_dict, "STOP_WORDS_SET", make_descriptor(::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(*StandardAnalyzer::STOP_WORDS_SET)));
          }

          static PyObject *t_StandardAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StandardAnalyzer::initializeClass, 1)))
              return NULL;
            return t_StandardAnalyzer::wrap_Object(StandardAnalyzer(((t_StandardAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_StandardAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StandardAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StandardAnalyzer_init_(t_StandardAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                StandardAnalyzer object((jobject) NULL);

                INT_CALL(object = StandardAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                StandardAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = StandardAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                StandardAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = StandardAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                StandardAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = StandardAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                StandardAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = StandardAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                StandardAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = StandardAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StandardAnalyzer_getMaxTokenLength(t_StandardAnalyzer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardAnalyzer_setMaxTokenLength(t_StandardAnalyzer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxTokenLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxTokenLength", arg);
            return NULL;
          }

          static PyObject *t_StandardAnalyzer_get__maxTokenLength(t_StandardAnalyzer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) value);
          }
          static int t_StandardAnalyzer_set__maxTokenLength(t_StandardAnalyzer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxTokenLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxTokenLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/ShortDocValuesField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *ShortDocValuesField::class$ = NULL;
        jmethodID *ShortDocValuesField::mids$ = NULL;
        bool ShortDocValuesField::live$ = false;

        jclass ShortDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/ShortDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_20464280] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;S)V");
            mids$[mid_setShortValue_3bc40c6a] = env->getMethodID(cls, "setShortValue", "(S)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ShortDocValuesField::ShortDocValuesField(const ::java::lang::String & a0, jshort a1) : ::org::apache::lucene::document::NumericDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_20464280, a0.this$, a1)) {}

        void ShortDocValuesField::setShortValue(jshort a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setShortValue_3bc40c6a], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_ShortDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ShortDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ShortDocValuesField_init_(t_ShortDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ShortDocValuesField_setShortValue(t_ShortDocValuesField *self, PyObject *args);
        static int t_ShortDocValuesField_set__shortValue(t_ShortDocValuesField *self, PyObject *arg, void *data);
        static PyGetSetDef t_ShortDocValuesField__fields_[] = {
          DECLARE_SET_FIELD(t_ShortDocValuesField, shortValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ShortDocValuesField__methods_[] = {
          DECLARE_METHOD(t_ShortDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ShortDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ShortDocValuesField, setShortValue, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ShortDocValuesField, t_ShortDocValuesField, ::org::apache::lucene::document::NumericDocValuesField, ShortDocValuesField, t_ShortDocValuesField_init_, 0, 0, t_ShortDocValuesField__fields_, 0, 0);

        void t_ShortDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(ShortDocValuesField), module, "ShortDocValuesField", 0);
        }

        void t_ShortDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ShortDocValuesField).tp_dict, "class_", make_descriptor(ShortDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ShortDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_ShortDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ShortDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ShortDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ShortDocValuesField::initializeClass, 1)))
            return NULL;
          return t_ShortDocValuesField::wrap_Object(ShortDocValuesField(((t_ShortDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_ShortDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ShortDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ShortDocValuesField_init_(t_ShortDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jshort a1;
          ShortDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sS", &a0, &a1))
          {
            INT_CALL(object = ShortDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ShortDocValuesField_setShortValue(t_ShortDocValuesField *self, PyObject *args)
        {
          jshort a0;

          if (!parseArgs(args, "S", &a0))
          {
            OBJ_CALL(self->object.setShortValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ShortDocValuesField), (PyObject *) self, "setShortValue", args, 2);
        }

        static int t_ShortDocValuesField_set__shortValue(t_ShortDocValuesField *self, PyObject *arg, void *data)
        {
          {
            jshort value;
            if (!parseArg(arg, "S", &value))
            {
              INT_CALL(self->object.setShortValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "shortValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/antlr/runtime/ParserRuleReturnScope.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace antlr {
    namespace runtime {

      ::java::lang::Class *ParserRuleReturnScope::class$ = NULL;
      jmethodID *ParserRuleReturnScope::mids$ = NULL;
      bool ParserRuleReturnScope::live$ = false;

      jclass ParserRuleReturnScope::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/antlr/runtime/ParserRuleReturnScope");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_getStart_846352c3] = env->getMethodID(cls, "getStart", "()Ljava/lang/Object;");
          mids$[mid_getStop_846352c3] = env->getMethodID(cls, "getStop", "()Ljava/lang/Object;");
          mids$[mid_getTree_846352c3] = env->getMethodID(cls, "getTree", "()Ljava/lang/Object;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ParserRuleReturnScope::ParserRuleReturnScope() : ::org::antlr::runtime::RuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      ::java::lang::Object ParserRuleReturnScope::getStart() const
      {
        return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getStart_846352c3]));
      }

      ::java::lang::Object ParserRuleReturnScope::getStop() const
      {
        return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getStop_846352c3]));
      }

      ::java::lang::Object ParserRuleReturnScope::getTree() const
      {
        return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getTree_846352c3]));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace antlr {
    namespace runtime {
      static PyObject *t_ParserRuleReturnScope_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_ParserRuleReturnScope_instance_(PyTypeObject *type, PyObject *arg);
      static int t_ParserRuleReturnScope_init_(t_ParserRuleReturnScope *self, PyObject *args, PyObject *kwds);
      static PyObject *t_ParserRuleReturnScope_getStart(t_ParserRuleReturnScope *self, PyObject *args);
      static PyObject *t_ParserRuleReturnScope_getStop(t_ParserRuleReturnScope *self, PyObject *args);
      static PyObject *t_ParserRuleReturnScope_getTree(t_ParserRuleReturnScope *self, PyObject *args);
      static PyObject *t_ParserRuleReturnScope_get__start(t_ParserRuleReturnScope *self, void *data);
      static PyObject *t_ParserRuleReturnScope_get__stop(t_ParserRuleReturnScope *self, void *data);
      static PyObject *t_ParserRuleReturnScope_get__tree(t_ParserRuleReturnScope *self, void *data);
      static PyGetSetDef t_ParserRuleReturnScope__fields_[] = {
        DECLARE_GET_FIELD(t_ParserRuleReturnScope, start),
        DECLARE_GET_FIELD(t_ParserRuleReturnScope, stop),
        DECLARE_GET_FIELD(t_ParserRuleReturnScope, tree),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_ParserRuleReturnScope__methods_[] = {
        DECLARE_METHOD(t_ParserRuleReturnScope, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_ParserRuleReturnScope, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_ParserRuleReturnScope, getStart, METH_VARARGS),
        DECLARE_METHOD(t_ParserRuleReturnScope, getStop, METH_VARARGS),
        DECLARE_METHOD(t_ParserRuleReturnScope, getTree, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(ParserRuleReturnScope, t_ParserRuleReturnScope, ::org::antlr::runtime::RuleReturnScope, ParserRuleReturnScope, t_ParserRuleReturnScope_init_, 0, 0, t_ParserRuleReturnScope__fields_, 0, 0);

      void t_ParserRuleReturnScope::install(PyObject *module)
      {
        installType(&PY_TYPE(ParserRuleReturnScope), module, "ParserRuleReturnScope", 0);
      }

      void t_ParserRuleReturnScope::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(ParserRuleReturnScope).tp_dict, "class_", make_descriptor(ParserRuleReturnScope::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(ParserRuleReturnScope).tp_dict, "wrapfn_", make_descriptor(t_ParserRuleReturnScope::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(ParserRuleReturnScope).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_ParserRuleReturnScope_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, ParserRuleReturnScope::initializeClass, 1)))
          return NULL;
        return t_ParserRuleReturnScope::wrap_Object(ParserRuleReturnScope(((t_ParserRuleReturnScope *) arg)->object.this$));
      }
      static PyObject *t_ParserRuleReturnScope_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, ParserRuleReturnScope::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_ParserRuleReturnScope_init_(t_ParserRuleReturnScope *self, PyObject *args, PyObject *kwds)
      {
        ParserRuleReturnScope object((jobject) NULL);

        INT_CALL(object = ParserRuleReturnScope());
        self->object = object;

        return 0;
      }

      static PyObject *t_ParserRuleReturnScope_getStart(t_ParserRuleReturnScope *self, PyObject *args)
      {
        ::java::lang::Object result((jobject) NULL);

        if (!parseArgs(args, ""))
        {
          OBJ_CALL(result = self->object.getStart());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(ParserRuleReturnScope), (PyObject *) self, "getStart", args, 2);
      }

      static PyObject *t_ParserRuleReturnScope_getStop(t_ParserRuleReturnScope *self, PyObject *args)
      {
        ::java::lang::Object result((jobject) NULL);

        if (!parseArgs(args, ""))
        {
          OBJ_CALL(result = self->object.getStop());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(ParserRuleReturnScope), (PyObject *) self, "getStop", args, 2);
      }

      static PyObject *t_ParserRuleReturnScope_getTree(t_ParserRuleReturnScope *self, PyObject *args)
      {
        ::java::lang::Object result((jobject) NULL);

        if (!parseArgs(args, ""))
        {
          OBJ_CALL(result = self->object.getTree());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(ParserRuleReturnScope), (PyObject *) self, "getTree", args, 2);
      }

      static PyObject *t_ParserRuleReturnScope_get__start(t_ParserRuleReturnScope *self, void *data)
      {
        ::java::lang::Object value((jobject) NULL);
        OBJ_CALL(value = self->object.getStart());
        return ::java::lang::t_Object::wrap_Object(value);
      }

      static PyObject *t_ParserRuleReturnScope_get__stop(t_ParserRuleReturnScope *self, void *data)
      {
        ::java::lang::Object value((jobject) NULL);
        OBJ_CALL(value = self->object.getStop());
        return ::java::lang::t_Object::wrap_Object(value);
      }

      static PyObject *t_ParserRuleReturnScope_get__tree(t_ParserRuleReturnScope *self, void *data)
      {
        ::java::lang::Object value((jobject) NULL);
        OBJ_CALL(value = self->object.getTree());
        return ::java::lang::t_Object::wrap_Object(value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/SlowCollatedStringComparator.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/text/Collator.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *SlowCollatedStringComparator::class$ = NULL;
          jmethodID *SlowCollatedStringComparator::mids$ = NULL;
          bool SlowCollatedStringComparator::live$ = false;

          jclass SlowCollatedStringComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/SlowCollatedStringComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f4353060] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;Ljava/text/Collator;)V");
              mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
              mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
              mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
              mids$[mid_compareValues_4a26475d] = env->getMethodID(cls, "compareValues", "(Ljava/lang/String;Ljava/lang/String;)I");
              mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
              mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
              mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
              mids$[mid_setTopValue_5fdc3f48] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/String;)V");
              mids$[mid_value_141401b3] = env->getMethodID(cls, "value", "(I)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SlowCollatedStringComparator::SlowCollatedStringComparator(jint a0, const ::java::lang::String & a1, const ::java::text::Collator & a2) : ::org::apache::lucene::search::FieldComparator(env->newObject(initializeClass, &mids$, mid_init$_f4353060, a0, a1.this$, a2.this$)) {}

          jint SlowCollatedStringComparator::compare(jint a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
          }

          jint SlowCollatedStringComparator::compareBottom(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
          }

          jint SlowCollatedStringComparator::compareTop(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
          }

          jint SlowCollatedStringComparator::compareValues(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return env->callIntMethod(this$, mids$[mid_compareValues_4a26475d], a0.this$, a1.this$);
          }

          void SlowCollatedStringComparator::copy(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
          }

          void SlowCollatedStringComparator::setBottom(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
          }

          ::org::apache::lucene::search::FieldComparator SlowCollatedStringComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
          }

          void SlowCollatedStringComparator::setTopValue(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTopValue_5fdc3f48], a0.this$);
          }

          ::java::lang::String SlowCollatedStringComparator::value(jint a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_value_141401b3], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_SlowCollatedStringComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SlowCollatedStringComparator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SlowCollatedStringComparator_of_(t_SlowCollatedStringComparator *self, PyObject *args);
          static int t_SlowCollatedStringComparator_init_(t_SlowCollatedStringComparator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SlowCollatedStringComparator_compare(t_SlowCollatedStringComparator *self, PyObject *args);
          static PyObject *t_SlowCollatedStringComparator_compareBottom(t_SlowCollatedStringComparator *self, PyObject *args);
          static PyObject *t_SlowCollatedStringComparator_compareTop(t_SlowCollatedStringComparator *self, PyObject *args);
          static PyObject *t_SlowCollatedStringComparator_compareValues(t_SlowCollatedStringComparator *self, PyObject *args);
          static PyObject *t_SlowCollatedStringComparator_copy(t_SlowCollatedStringComparator *self, PyObject *args);
          static PyObject *t_SlowCollatedStringComparator_setBottom(t_SlowCollatedStringComparator *self, PyObject *args);
          static PyObject *t_SlowCollatedStringComparator_setNextReader(t_SlowCollatedStringComparator *self, PyObject *args);
          static PyObject *t_SlowCollatedStringComparator_setTopValue(t_SlowCollatedStringComparator *self, PyObject *args);
          static PyObject *t_SlowCollatedStringComparator_value(t_SlowCollatedStringComparator *self, PyObject *args);
          static int t_SlowCollatedStringComparator_set__bottom(t_SlowCollatedStringComparator *self, PyObject *arg, void *data);
          static int t_SlowCollatedStringComparator_set__nextReader(t_SlowCollatedStringComparator *self, PyObject *arg, void *data);
          static int t_SlowCollatedStringComparator_set__topValue(t_SlowCollatedStringComparator *self, PyObject *arg, void *data);
          static PyObject *t_SlowCollatedStringComparator_get__parameters_(t_SlowCollatedStringComparator *self, void *data);
          static PyGetSetDef t_SlowCollatedStringComparator__fields_[] = {
            DECLARE_SET_FIELD(t_SlowCollatedStringComparator, bottom),
            DECLARE_SET_FIELD(t_SlowCollatedStringComparator, nextReader),
            DECLARE_SET_FIELD(t_SlowCollatedStringComparator, topValue),
            DECLARE_GET_FIELD(t_SlowCollatedStringComparator, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SlowCollatedStringComparator__methods_[] = {
            DECLARE_METHOD(t_SlowCollatedStringComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, of_, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, compare, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, compareBottom, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, compareTop, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, compareValues, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, copy, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, setBottom, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, setNextReader, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, setTopValue, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, value, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SlowCollatedStringComparator, t_SlowCollatedStringComparator, ::org::apache::lucene::search::FieldComparator, SlowCollatedStringComparator, t_SlowCollatedStringComparator_init_, 0, 0, t_SlowCollatedStringComparator__fields_, 0, 0);
          PyObject *t_SlowCollatedStringComparator::wrap_Object(const SlowCollatedStringComparator& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SlowCollatedStringComparator::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SlowCollatedStringComparator *self = (t_SlowCollatedStringComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SlowCollatedStringComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SlowCollatedStringComparator::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SlowCollatedStringComparator *self = (t_SlowCollatedStringComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SlowCollatedStringComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(SlowCollatedStringComparator), module, "SlowCollatedStringComparator", 0);
          }

          void t_SlowCollatedStringComparator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SlowCollatedStringComparator).tp_dict, "class_", make_descriptor(SlowCollatedStringComparator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SlowCollatedStringComparator).tp_dict, "wrapfn_", make_descriptor(t_SlowCollatedStringComparator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SlowCollatedStringComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SlowCollatedStringComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SlowCollatedStringComparator::initializeClass, 1)))
              return NULL;
            return t_SlowCollatedStringComparator::wrap_Object(SlowCollatedStringComparator(((t_SlowCollatedStringComparator *) arg)->object.this$));
          }
          static PyObject *t_SlowCollatedStringComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SlowCollatedStringComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SlowCollatedStringComparator_of_(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SlowCollatedStringComparator_init_(t_SlowCollatedStringComparator *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            ::java::text::Collator a2((jobject) NULL);
            SlowCollatedStringComparator object((jobject) NULL);

            if (!parseArgs(args, "Isk", ::java::text::Collator::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = SlowCollatedStringComparator(a0, a1, a2));
              self->object = object;
              self->parameters[0] = &::java::lang::PY_TYPE(String);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SlowCollatedStringComparator_compare(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.compare(a0, a1));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "compare", args, 2);
          }

          static PyObject *t_SlowCollatedStringComparator_compareBottom(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.compareBottom(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "compareBottom", args, 2);
          }

          static PyObject *t_SlowCollatedStringComparator_compareTop(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.compareTop(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "compareTop", args, 2);
          }

          static PyObject *t_SlowCollatedStringComparator_compareValues(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jint result;

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.compareValues(a0, a1));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "compareValues", args, 2);
          }

          static PyObject *t_SlowCollatedStringComparator_copy(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.copy(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_SlowCollatedStringComparator_setBottom(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.setBottom(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "setBottom", args, 2);
          }

          static PyObject *t_SlowCollatedStringComparator_setNextReader(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.setNextReader(a0));
              return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(String));
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "setNextReader", args, 2);
          }

          static PyObject *t_SlowCollatedStringComparator_setTopValue(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(self->object.setTopValue(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "setTopValue", args, 2);
          }

          static PyObject *t_SlowCollatedStringComparator_value(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.value(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "value", args, 2);
          }
          static PyObject *t_SlowCollatedStringComparator_get__parameters_(t_SlowCollatedStringComparator *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_SlowCollatedStringComparator_set__bottom(t_SlowCollatedStringComparator *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setBottom(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "bottom", arg);
            return -1;
          }

          static int t_SlowCollatedStringComparator_set__nextReader(t_SlowCollatedStringComparator *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
              {
                INT_CALL(self->object.setNextReader(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
            return -1;
          }

          static int t_SlowCollatedStringComparator_set__topValue(t_SlowCollatedStringComparator *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setTopValue(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "topValue", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/DelegatingAnalyzerWrapper.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *DelegatingAnalyzerWrapper::class$ = NULL;
        jmethodID *DelegatingAnalyzerWrapper::mids$ = NULL;
        bool DelegatingAnalyzerWrapper::live$ = false;

        jclass DelegatingAnalyzerWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/DelegatingAnalyzerWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_wrapComponents_46d74455] = env->getMethodID(cls, "wrapComponents", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_wrapReader_d8fb1c81] = env->getMethodID(cls, "wrapReader", "(Ljava/lang/String;Ljava/io/Reader;)Ljava/io/Reader;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_DelegatingAnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DelegatingAnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_DelegatingAnalyzerWrapper__methods_[] = {
          DECLARE_METHOD(t_DelegatingAnalyzerWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DelegatingAnalyzerWrapper, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DelegatingAnalyzerWrapper, t_DelegatingAnalyzerWrapper, ::org::apache::lucene::analysis::AnalyzerWrapper, DelegatingAnalyzerWrapper, abstract_init, 0, 0, 0, 0, 0);

        void t_DelegatingAnalyzerWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(DelegatingAnalyzerWrapper), module, "DelegatingAnalyzerWrapper", 0);
        }

        void t_DelegatingAnalyzerWrapper::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DelegatingAnalyzerWrapper).tp_dict, "class_", make_descriptor(DelegatingAnalyzerWrapper::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DelegatingAnalyzerWrapper).tp_dict, "wrapfn_", make_descriptor(t_DelegatingAnalyzerWrapper::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DelegatingAnalyzerWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DelegatingAnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DelegatingAnalyzerWrapper::initializeClass, 1)))
            return NULL;
          return t_DelegatingAnalyzerWrapper::wrap_Object(DelegatingAnalyzerWrapper(((t_DelegatingAnalyzerWrapper *) arg)->object.this$));
        }
        static PyObject *t_DelegatingAnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DelegatingAnalyzerWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/CharFilter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *CharFilter::class$ = NULL;
        jmethodID *CharFilter::mids$ = NULL;
        bool CharFilter::live$ = false;

        jclass CharFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/CharFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_correctOffset_39c7bd23] = env->getMethodID(cls, "correctOffset", "(I)I");
            mids$[mid_correct_39c7bd23] = env->getMethodID(cls, "correct", "(I)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CharFilter::CharFilter(const ::java::io::Reader & a0) : ::java::io::Reader(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

        void CharFilter::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jint CharFilter::correctOffset(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_correctOffset_39c7bd23], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_CharFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CharFilter_init_(t_CharFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CharFilter_close(t_CharFilter *self, PyObject *args);
        static PyObject *t_CharFilter_correctOffset(t_CharFilter *self, PyObject *arg);

        static PyMethodDef t_CharFilter__methods_[] = {
          DECLARE_METHOD(t_CharFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharFilter, close, METH_VARARGS),
          DECLARE_METHOD(t_CharFilter, correctOffset, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CharFilter, t_CharFilter, ::java::io::Reader, CharFilter, t_CharFilter_init_, 0, 0, 0, 0, 0);

        void t_CharFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(CharFilter), module, "CharFilter", 0);
        }

        void t_CharFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CharFilter).tp_dict, "class_", make_descriptor(CharFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CharFilter).tp_dict, "wrapfn_", make_descriptor(t_CharFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CharFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CharFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CharFilter::initializeClass, 1)))
            return NULL;
          return t_CharFilter::wrap_Object(CharFilter(((t_CharFilter *) arg)->object.this$));
        }
        static PyObject *t_CharFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CharFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CharFilter_init_(t_CharFilter *self, PyObject *args, PyObject *kwds)
        {
          ::java::io::Reader a0((jobject) NULL);
          CharFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
          {
            INT_CALL(object = CharFilter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CharFilter_close(t_CharFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CharFilter), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_CharFilter_correctOffset(t_CharFilter *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.correctOffset(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "correctOffset", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/DuplicateFilter.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode.h"
#include "org/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *DuplicateFilter::class$ = NULL;
          jmethodID *DuplicateFilter::mids$ = NULL;
          bool DuplicateFilter::live$ = false;

          jclass DuplicateFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/DuplicateFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_init$_0a23a3cc] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode;Lorg/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
              mids$[mid_getFieldName_14c7b5c5] = env->getMethodID(cls, "getFieldName", "()Ljava/lang/String;");
              mids$[mid_getKeepMode_c01b4463] = env->getMethodID(cls, "getKeepMode", "()Lorg/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode;");
              mids$[mid_getProcessingMode_815046ab] = env->getMethodID(cls, "getProcessingMode", "()Lorg/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setFieldName_5fdc3f48] = env->getMethodID(cls, "setFieldName", "(Ljava/lang/String;)V");
              mids$[mid_setKeepMode_9304b146] = env->getMethodID(cls, "setKeepMode", "(Lorg/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode;)V");
              mids$[mid_setProcessingMode_a2322426] = env->getMethodID(cls, "setProcessingMode", "(Lorg/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DuplicateFilter::DuplicateFilter(const ::java::lang::String & a0) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          DuplicateFilter::DuplicateFilter(const ::java::lang::String & a0, const ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode & a1, const ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode & a2) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_0a23a3cc, a0.this$, a1.this$, a2.this$)) {}

          jboolean DuplicateFilter::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::search::DocIdSet DuplicateFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
          {
            return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
          }

          ::java::lang::String DuplicateFilter::getFieldName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldName_14c7b5c5]));
          }

          ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode DuplicateFilter::getKeepMode() const
          {
            return ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode(env->callObjectMethod(this$, mids$[mid_getKeepMode_c01b4463]));
          }

          ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode DuplicateFilter::getProcessingMode() const
          {
            return ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode(env->callObjectMethod(this$, mids$[mid_getProcessingMode_815046ab]));
          }

          jint DuplicateFilter::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void DuplicateFilter::setFieldName(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFieldName_5fdc3f48], a0.this$);
          }

          void DuplicateFilter::setKeepMode(const ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setKeepMode_9304b146], a0.this$);
          }

          void DuplicateFilter::setProcessingMode(const ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setProcessingMode_a2322426], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_DuplicateFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DuplicateFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DuplicateFilter_init_(t_DuplicateFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DuplicateFilter_equals(t_DuplicateFilter *self, PyObject *args);
          static PyObject *t_DuplicateFilter_getDocIdSet(t_DuplicateFilter *self, PyObject *args);
          static PyObject *t_DuplicateFilter_getFieldName(t_DuplicateFilter *self);
          static PyObject *t_DuplicateFilter_getKeepMode(t_DuplicateFilter *self);
          static PyObject *t_DuplicateFilter_getProcessingMode(t_DuplicateFilter *self);
          static PyObject *t_DuplicateFilter_hashCode(t_DuplicateFilter *self, PyObject *args);
          static PyObject *t_DuplicateFilter_setFieldName(t_DuplicateFilter *self, PyObject *arg);
          static PyObject *t_DuplicateFilter_setKeepMode(t_DuplicateFilter *self, PyObject *arg);
          static PyObject *t_DuplicateFilter_setProcessingMode(t_DuplicateFilter *self, PyObject *arg);
          static PyObject *t_DuplicateFilter_get__fieldName(t_DuplicateFilter *self, void *data);
          static int t_DuplicateFilter_set__fieldName(t_DuplicateFilter *self, PyObject *arg, void *data);
          static PyObject *t_DuplicateFilter_get__keepMode(t_DuplicateFilter *self, void *data);
          static int t_DuplicateFilter_set__keepMode(t_DuplicateFilter *self, PyObject *arg, void *data);
          static PyObject *t_DuplicateFilter_get__processingMode(t_DuplicateFilter *self, void *data);
          static int t_DuplicateFilter_set__processingMode(t_DuplicateFilter *self, PyObject *arg, void *data);
          static PyGetSetDef t_DuplicateFilter__fields_[] = {
            DECLARE_GETSET_FIELD(t_DuplicateFilter, fieldName),
            DECLARE_GETSET_FIELD(t_DuplicateFilter, keepMode),
            DECLARE_GETSET_FIELD(t_DuplicateFilter, processingMode),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DuplicateFilter__methods_[] = {
            DECLARE_METHOD(t_DuplicateFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DuplicateFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DuplicateFilter, equals, METH_VARARGS),
            DECLARE_METHOD(t_DuplicateFilter, getDocIdSet, METH_VARARGS),
            DECLARE_METHOD(t_DuplicateFilter, getFieldName, METH_NOARGS),
            DECLARE_METHOD(t_DuplicateFilter, getKeepMode, METH_NOARGS),
            DECLARE_METHOD(t_DuplicateFilter, getProcessingMode, METH_NOARGS),
            DECLARE_METHOD(t_DuplicateFilter, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_DuplicateFilter, setFieldName, METH_O),
            DECLARE_METHOD(t_DuplicateFilter, setKeepMode, METH_O),
            DECLARE_METHOD(t_DuplicateFilter, setProcessingMode, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DuplicateFilter, t_DuplicateFilter, ::org::apache::lucene::search::Filter, DuplicateFilter, t_DuplicateFilter_init_, 0, 0, t_DuplicateFilter__fields_, 0, 0);

          void t_DuplicateFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(DuplicateFilter), module, "DuplicateFilter", 0);
            PyDict_SetItemString(PY_TYPE(DuplicateFilter).tp_dict, "ProcessingMode", make_descriptor(&PY_TYPE(DuplicateFilter$ProcessingMode)));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter).tp_dict, "KeepMode", make_descriptor(&PY_TYPE(DuplicateFilter$KeepMode)));
          }

          void t_DuplicateFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DuplicateFilter).tp_dict, "class_", make_descriptor(DuplicateFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter).tp_dict, "wrapfn_", make_descriptor(t_DuplicateFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DuplicateFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DuplicateFilter::initializeClass, 1)))
              return NULL;
            return t_DuplicateFilter::wrap_Object(DuplicateFilter(((t_DuplicateFilter *) arg)->object.this$));
          }
          static PyObject *t_DuplicateFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DuplicateFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DuplicateFilter_init_(t_DuplicateFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                DuplicateFilter object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = DuplicateFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode a2((jobject) NULL);
                PyTypeObject **p2;
                DuplicateFilter object((jobject) NULL);

                if (!parseArgs(args, "sKK", ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode::initializeClass, ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::sandbox::queries::t_DuplicateFilter$KeepMode::parameters_, &a2, &p2, ::org::apache::lucene::sandbox::queries::t_DuplicateFilter$ProcessingMode::parameters_))
                {
                  INT_CALL(object = DuplicateFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DuplicateFilter_equals(t_DuplicateFilter *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(DuplicateFilter), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_DuplicateFilter_getDocIdSet(t_DuplicateFilter *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
              return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DuplicateFilter), (PyObject *) self, "getDocIdSet", args, 2);
          }

          static PyObject *t_DuplicateFilter_getFieldName(t_DuplicateFilter *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getFieldName());
            return j2p(result);
          }

          static PyObject *t_DuplicateFilter_getKeepMode(t_DuplicateFilter *self)
          {
            ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode result((jobject) NULL);
            OBJ_CALL(result = self->object.getKeepMode());
            return ::org::apache::lucene::sandbox::queries::t_DuplicateFilter$KeepMode::wrap_Object(result);
          }

          static PyObject *t_DuplicateFilter_getProcessingMode(t_DuplicateFilter *self)
          {
            ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode result((jobject) NULL);
            OBJ_CALL(result = self->object.getProcessingMode());
            return ::org::apache::lucene::sandbox::queries::t_DuplicateFilter$ProcessingMode::wrap_Object(result);
          }

          static PyObject *t_DuplicateFilter_hashCode(t_DuplicateFilter *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(DuplicateFilter), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_DuplicateFilter_setFieldName(t_DuplicateFilter *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setFieldName(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFieldName", arg);
            return NULL;
          }

          static PyObject *t_DuplicateFilter_setKeepMode(t_DuplicateFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode::initializeClass, &a0, &p0, ::org::apache::lucene::sandbox::queries::t_DuplicateFilter$KeepMode::parameters_))
            {
              OBJ_CALL(self->object.setKeepMode(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setKeepMode", arg);
            return NULL;
          }

          static PyObject *t_DuplicateFilter_setProcessingMode(t_DuplicateFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode::initializeClass, &a0, &p0, ::org::apache::lucene::sandbox::queries::t_DuplicateFilter$ProcessingMode::parameters_))
            {
              OBJ_CALL(self->object.setProcessingMode(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setProcessingMode", arg);
            return NULL;
          }

          static PyObject *t_DuplicateFilter_get__fieldName(t_DuplicateFilter *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldName());
            return j2p(value);
          }
          static int t_DuplicateFilter_set__fieldName(t_DuplicateFilter *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setFieldName(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fieldName", arg);
            return -1;
          }

          static PyObject *t_DuplicateFilter_get__keepMode(t_DuplicateFilter *self, void *data)
          {
            ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode value((jobject) NULL);
            OBJ_CALL(value = self->object.getKeepMode());
            return ::org::apache::lucene::sandbox::queries::t_DuplicateFilter$KeepMode::wrap_Object(value);
          }
          static int t_DuplicateFilter_set__keepMode(t_DuplicateFilter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode::initializeClass, &value))
              {
                INT_CALL(self->object.setKeepMode(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "keepMode", arg);
            return -1;
          }

          static PyObject *t_DuplicateFilter_get__processingMode(t_DuplicateFilter *self, void *data)
          {
            ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode value((jobject) NULL);
            OBJ_CALL(value = self->object.getProcessingMode());
            return ::org::apache::lucene::sandbox::queries::t_DuplicateFilter$ProcessingMode::wrap_Object(value);
          }
          static int t_DuplicateFilter_set__processingMode(t_DuplicateFilter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode::initializeClass, &value))
              {
                INT_CALL(self->object.setProcessingMode(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "processingMode", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/std36/UAX29URLEmailTokenizerImpl36.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std36 {

            ::java::lang::Class *UAX29URLEmailTokenizerImpl36::class$ = NULL;
            jmethodID *UAX29URLEmailTokenizerImpl36::mids$ = NULL;
            bool UAX29URLEmailTokenizerImpl36::live$ = false;
            jint UAX29URLEmailTokenizerImpl36::EMAIL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::HANGUL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::HIRAGANA_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::IDEOGRAPHIC_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::KATAKANA_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::NUMERIC_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::URL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::WORD_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::YYEOF = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::YYINITIAL = (jint) 0;

            jclass UAX29URLEmailTokenizerImpl36::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/std36/UAX29URLEmailTokenizerImpl36");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
                mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
                mids$[mid_setBufferSize_39c7bd3c] = env->getMethodID(cls, "setBufferSize", "(I)V");
                mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
                mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                EMAIL_TYPE = env->getStaticIntField(cls, "EMAIL_TYPE");
                HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
                HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
                IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
                KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
                NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
                SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
                URL_TYPE = env->getStaticIntField(cls, "URL_TYPE");
                WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
                YYEOF = env->getStaticIntField(cls, "YYEOF");
                YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            UAX29URLEmailTokenizerImpl36::UAX29URLEmailTokenizerImpl36(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

            jint UAX29URLEmailTokenizerImpl36::getNextToken() const
            {
              return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
            }

            void UAX29URLEmailTokenizerImpl36::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
            }

            void UAX29URLEmailTokenizerImpl36::setBufferSize(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setBufferSize_39c7bd3c], a0);
            }

            void UAX29URLEmailTokenizerImpl36::yybegin(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
            }

            jint UAX29URLEmailTokenizerImpl36::yychar() const
            {
              return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
            }

            jchar UAX29URLEmailTokenizerImpl36::yycharat(jint a0) const
            {
              return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
            }

            void UAX29URLEmailTokenizerImpl36::yyclose() const
            {
              env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
            }

            jint UAX29URLEmailTokenizerImpl36::yylength() const
            {
              return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
            }

            void UAX29URLEmailTokenizerImpl36::yypushback(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
            }

            void UAX29URLEmailTokenizerImpl36::yyreset(const ::java::io::Reader & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
            }

            jint UAX29URLEmailTokenizerImpl36::yystate() const
            {
              return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
            }

            ::java::lang::String UAX29URLEmailTokenizerImpl36::yytext() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std36 {
            static PyObject *t_UAX29URLEmailTokenizerImpl36_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_instance_(PyTypeObject *type, PyObject *arg);
            static int t_UAX29URLEmailTokenizerImpl36_init_(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *args, PyObject *kwds);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_getNextToken(t_UAX29URLEmailTokenizerImpl36 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_getText(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_setBufferSize(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yybegin(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yychar(t_UAX29URLEmailTokenizerImpl36 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yycharat(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yyclose(t_UAX29URLEmailTokenizerImpl36 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yylength(t_UAX29URLEmailTokenizerImpl36 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yypushback(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yyreset(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yystate(t_UAX29URLEmailTokenizerImpl36 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yytext(t_UAX29URLEmailTokenizerImpl36 *self);
            static int t_UAX29URLEmailTokenizerImpl36_set__bufferSize(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg, void *data);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_get__nextToken(t_UAX29URLEmailTokenizerImpl36 *self, void *data);
            static PyGetSetDef t_UAX29URLEmailTokenizerImpl36__fields_[] = {
              DECLARE_SET_FIELD(t_UAX29URLEmailTokenizerImpl36, bufferSize),
              DECLARE_GET_FIELD(t_UAX29URLEmailTokenizerImpl36, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_UAX29URLEmailTokenizerImpl36__methods_[] = {
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, getText, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, setBufferSize, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yybegin, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yychar, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yycharat, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yyclose, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yylength, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yypushback, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yyreset, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yystate, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yytext, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(UAX29URLEmailTokenizerImpl36, t_UAX29URLEmailTokenizerImpl36, ::java::lang::Object, UAX29URLEmailTokenizerImpl36, t_UAX29URLEmailTokenizerImpl36_init_, 0, 0, t_UAX29URLEmailTokenizerImpl36__fields_, 0, 0);

            void t_UAX29URLEmailTokenizerImpl36::install(PyObject *module)
            {
              installType(&PY_TYPE(UAX29URLEmailTokenizerImpl36), module, "UAX29URLEmailTokenizerImpl36", 0);
            }

            void t_UAX29URLEmailTokenizerImpl36::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "class_", make_descriptor(UAX29URLEmailTokenizerImpl36::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "wrapfn_", make_descriptor(t_UAX29URLEmailTokenizerImpl36::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(UAX29URLEmailTokenizerImpl36::initializeClass);
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "EMAIL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::EMAIL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "HANGUL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::HANGUL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "HIRAGANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::HIRAGANA_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::IDEOGRAPHIC_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "KATAKANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::KATAKANA_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "NUMERIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::NUMERIC_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::SOUTH_EAST_ASIAN_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "URL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::URL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "WORD_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::WORD_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "YYEOF", make_descriptor(UAX29URLEmailTokenizerImpl36::YYEOF));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "YYINITIAL", make_descriptor(UAX29URLEmailTokenizerImpl36::YYINITIAL));
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, UAX29URLEmailTokenizerImpl36::initializeClass, 1)))
                return NULL;
              return t_UAX29URLEmailTokenizerImpl36::wrap_Object(UAX29URLEmailTokenizerImpl36(((t_UAX29URLEmailTokenizerImpl36 *) arg)->object.this$));
            }
            static PyObject *t_UAX29URLEmailTokenizerImpl36_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, UAX29URLEmailTokenizerImpl36::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_UAX29URLEmailTokenizerImpl36_init_(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::Reader a0((jobject) NULL);
              UAX29URLEmailTokenizerImpl36 object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                INT_CALL(object = UAX29URLEmailTokenizerImpl36(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_getNextToken(t_UAX29URLEmailTokenizerImpl36 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNextToken());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_getText(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
              {
                OBJ_CALL(self->object.getText(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "getText", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_setBufferSize(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setBufferSize(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setBufferSize", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yybegin(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yybegin(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yychar(t_UAX29URLEmailTokenizerImpl36 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yychar());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yycharat(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg)
            {
              jint a0;
              jchar result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.yycharat(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yyclose(t_UAX29URLEmailTokenizerImpl36 *self)
            {
              OBJ_CALL(self->object.yyclose());
              Py_RETURN_NONE;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yylength(t_UAX29URLEmailTokenizerImpl36 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yylength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yypushback(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yypushback(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yyreset(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg)
            {
              ::java::io::Reader a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
              {
                OBJ_CALL(self->object.yyreset(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yystate(t_UAX29URLEmailTokenizerImpl36 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yystate());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yytext(t_UAX29URLEmailTokenizerImpl36 *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.yytext());
              return j2p(result);
            }

            static int t_UAX29URLEmailTokenizerImpl36_set__bufferSize(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setBufferSize(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "bufferSize", arg);
              return -1;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_get__nextToken(t_UAX29URLEmailTokenizerImpl36 *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNextToken());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocsAndPositionsEnum$EnumWithSlice.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/ReaderSlice.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocsAndPositionsEnum$EnumWithSlice::class$ = NULL;
        jmethodID *MultiDocsAndPositionsEnum$EnumWithSlice::mids$ = NULL;
        jfieldID *MultiDocsAndPositionsEnum$EnumWithSlice::fids$ = NULL;
        bool MultiDocsAndPositionsEnum$EnumWithSlice::live$ = false;

        jclass MultiDocsAndPositionsEnum$EnumWithSlice::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocsAndPositionsEnum$EnumWithSlice");

            mids$ = new jmethodID[max_mid];
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docsAndPositionsEnum] = env->getFieldID(cls, "docsAndPositionsEnum", "Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            fids$[fid_slice] = env->getFieldID(cls, "slice", "Lorg/apache/lucene/index/ReaderSlice;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String MultiDocsAndPositionsEnum$EnumWithSlice::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum MultiDocsAndPositionsEnum$EnumWithSlice::_get_docsAndPositionsEnum() const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->getObjectField(this$, fids$[fid_docsAndPositionsEnum]));
        }

        void MultiDocsAndPositionsEnum$EnumWithSlice::_set_docsAndPositionsEnum(const ::org::apache::lucene::index::DocsAndPositionsEnum & a0) const
        {
          env->setObjectField(this$, fids$[fid_docsAndPositionsEnum], a0.this$);
        }

        ::org::apache::lucene::index::ReaderSlice MultiDocsAndPositionsEnum$EnumWithSlice::_get_slice() const
        {
          return ::org::apache::lucene::index::ReaderSlice(env->getObjectField(this$, fids$[fid_slice]));
        }

        void MultiDocsAndPositionsEnum$EnumWithSlice::_set_slice(const ::org::apache::lucene::index::ReaderSlice & a0) const
        {
          env->setObjectField(this$, fids$[fid_slice], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_toString(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_get__docsAndPositionsEnum(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, void *data);
        static int t_MultiDocsAndPositionsEnum$EnumWithSlice_set__docsAndPositionsEnum(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, PyObject *arg, void *data);
        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_get__slice(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, void *data);
        static int t_MultiDocsAndPositionsEnum$EnumWithSlice_set__slice(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, PyObject *arg, void *data);

        static PyGetSetDef t_MultiDocsAndPositionsEnum$EnumWithSlice__fields_[] = {
          DECLARE_GETSET_FIELD(t_MultiDocsAndPositionsEnum$EnumWithSlice, docsAndPositionsEnum),
          DECLARE_GETSET_FIELD(t_MultiDocsAndPositionsEnum$EnumWithSlice, slice),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiDocsAndPositionsEnum$EnumWithSlice__methods_[] = {
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum$EnumWithSlice, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum$EnumWithSlice, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum$EnumWithSlice, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiDocsAndPositionsEnum$EnumWithSlice, t_MultiDocsAndPositionsEnum$EnumWithSlice, ::java::lang::Object, MultiDocsAndPositionsEnum$EnumWithSlice, abstract_init, 0, 0, t_MultiDocsAndPositionsEnum$EnumWithSlice__fields_, 0, 0);

        void t_MultiDocsAndPositionsEnum$EnumWithSlice::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocsAndPositionsEnum$EnumWithSlice), module, "MultiDocsAndPositionsEnum$EnumWithSlice", 0);
        }

        void t_MultiDocsAndPositionsEnum$EnumWithSlice::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiDocsAndPositionsEnum$EnumWithSlice).tp_dict, "class_", make_descriptor(MultiDocsAndPositionsEnum$EnumWithSlice::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiDocsAndPositionsEnum$EnumWithSlice).tp_dict, "wrapfn_", make_descriptor(t_MultiDocsAndPositionsEnum$EnumWithSlice::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiDocsAndPositionsEnum$EnumWithSlice).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocsAndPositionsEnum$EnumWithSlice::initializeClass, 1)))
            return NULL;
          return t_MultiDocsAndPositionsEnum$EnumWithSlice::wrap_Object(MultiDocsAndPositionsEnum$EnumWithSlice(((t_MultiDocsAndPositionsEnum$EnumWithSlice *) arg)->object.this$));
        }
        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocsAndPositionsEnum$EnumWithSlice::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_toString(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum$EnumWithSlice), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_get__docsAndPositionsEnum(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, void *data)
        {
          ::org::apache::lucene::index::DocsAndPositionsEnum value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docsAndPositionsEnum());
          return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(value);
        }
        static int t_MultiDocsAndPositionsEnum$EnumWithSlice_set__docsAndPositionsEnum(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::DocsAndPositionsEnum value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &value))
          {
            INT_CALL(self->object._set_docsAndPositionsEnum(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docsAndPositionsEnum", arg);
          return -1;
        }

        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_get__slice(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, void *data)
        {
          ::org::apache::lucene::index::ReaderSlice value((jobject) NULL);
          OBJ_CALL(value = self->object._get_slice());
          return ::org::apache::lucene::index::t_ReaderSlice::wrap_Object(value);
        }
        static int t_MultiDocsAndPositionsEnum$EnumWithSlice_set__slice(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::ReaderSlice value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::ReaderSlice::initializeClass, &value))
          {
            INT_CALL(self->object._set_slice(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "slice", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/WeightedTerm.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *WeightedTerm::class$ = NULL;
          jmethodID *WeightedTerm::mids$ = NULL;
          bool WeightedTerm::live$ = false;

          jclass WeightedTerm::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/WeightedTerm");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f3ab5075] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;)V");
              mids$[mid_getTerm_14c7b5c5] = env->getMethodID(cls, "getTerm", "()Ljava/lang/String;");
              mids$[mid_getWeight_54c6a176] = env->getMethodID(cls, "getWeight", "()F");
              mids$[mid_setTerm_5fdc3f48] = env->getMethodID(cls, "setTerm", "(Ljava/lang/String;)V");
              mids$[mid_setWeight_06298cab] = env->getMethodID(cls, "setWeight", "(F)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WeightedTerm::WeightedTerm(jfloat a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f3ab5075, a0, a1.this$)) {}

          ::java::lang::String WeightedTerm::getTerm() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTerm_14c7b5c5]));
          }

          jfloat WeightedTerm::getWeight() const
          {
            return env->callFloatMethod(this$, mids$[mid_getWeight_54c6a176]);
          }

          void WeightedTerm::setTerm(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTerm_5fdc3f48], a0.this$);
          }

          void WeightedTerm::setWeight(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setWeight_06298cab], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_WeightedTerm_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WeightedTerm_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WeightedTerm_init_(t_WeightedTerm *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WeightedTerm_getTerm(t_WeightedTerm *self);
          static PyObject *t_WeightedTerm_getWeight(t_WeightedTerm *self);
          static PyObject *t_WeightedTerm_setTerm(t_WeightedTerm *self, PyObject *arg);
          static PyObject *t_WeightedTerm_setWeight(t_WeightedTerm *self, PyObject *arg);
          static PyObject *t_WeightedTerm_get__term(t_WeightedTerm *self, void *data);
          static int t_WeightedTerm_set__term(t_WeightedTerm *self, PyObject *arg, void *data);
          static PyObject *t_WeightedTerm_get__weight(t_WeightedTerm *self, void *data);
          static int t_WeightedTerm_set__weight(t_WeightedTerm *self, PyObject *arg, void *data);
          static PyGetSetDef t_WeightedTerm__fields_[] = {
            DECLARE_GETSET_FIELD(t_WeightedTerm, term),
            DECLARE_GETSET_FIELD(t_WeightedTerm, weight),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_WeightedTerm__methods_[] = {
            DECLARE_METHOD(t_WeightedTerm, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedTerm, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedTerm, getTerm, METH_NOARGS),
            DECLARE_METHOD(t_WeightedTerm, getWeight, METH_NOARGS),
            DECLARE_METHOD(t_WeightedTerm, setTerm, METH_O),
            DECLARE_METHOD(t_WeightedTerm, setWeight, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WeightedTerm, t_WeightedTerm, ::java::lang::Object, WeightedTerm, t_WeightedTerm_init_, 0, 0, t_WeightedTerm__fields_, 0, 0);

          void t_WeightedTerm::install(PyObject *module)
          {
            installType(&PY_TYPE(WeightedTerm), module, "WeightedTerm", 0);
          }

          void t_WeightedTerm::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WeightedTerm).tp_dict, "class_", make_descriptor(WeightedTerm::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WeightedTerm).tp_dict, "wrapfn_", make_descriptor(t_WeightedTerm::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WeightedTerm).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WeightedTerm_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WeightedTerm::initializeClass, 1)))
              return NULL;
            return t_WeightedTerm::wrap_Object(WeightedTerm(((t_WeightedTerm *) arg)->object.this$));
          }
          static PyObject *t_WeightedTerm_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WeightedTerm::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WeightedTerm_init_(t_WeightedTerm *self, PyObject *args, PyObject *kwds)
          {
            jfloat a0;
            ::java::lang::String a1((jobject) NULL);
            WeightedTerm object((jobject) NULL);

            if (!parseArgs(args, "Fs", &a0, &a1))
            {
              INT_CALL(object = WeightedTerm(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WeightedTerm_getTerm(t_WeightedTerm *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getTerm());
            return j2p(result);
          }

          static PyObject *t_WeightedTerm_getWeight(t_WeightedTerm *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getWeight());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_WeightedTerm_setTerm(t_WeightedTerm *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setTerm(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTerm", arg);
            return NULL;
          }

          static PyObject *t_WeightedTerm_setWeight(t_WeightedTerm *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setWeight(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setWeight", arg);
            return NULL;
          }

          static PyObject *t_WeightedTerm_get__term(t_WeightedTerm *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getTerm());
            return j2p(value);
          }
          static int t_WeightedTerm_set__term(t_WeightedTerm *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setTerm(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "term", arg);
            return -1;
          }

          static PyObject *t_WeightedTerm_get__weight(t_WeightedTerm *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getWeight());
            return PyFloat_FromDouble((double) value);
          }
          static int t_WeightedTerm_set__weight(t_WeightedTerm *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setWeight(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "weight", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/SegmentInfoWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *SegmentInfoWriter::class$ = NULL;
        jmethodID *SegmentInfoWriter::mids$ = NULL;
        bool SegmentInfoWriter::live$ = false;

        jclass SegmentInfoWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/SegmentInfoWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_write_3589180f] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void SegmentInfoWriter::write(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_write_3589180f], a0.this$, a1.this$, a2.this$, a3.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_SegmentInfoWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfoWriter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfoWriter_write(t_SegmentInfoWriter *self, PyObject *args);

        static PyMethodDef t_SegmentInfoWriter__methods_[] = {
          DECLARE_METHOD(t_SegmentInfoWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfoWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfoWriter, write, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentInfoWriter, t_SegmentInfoWriter, ::java::lang::Object, SegmentInfoWriter, abstract_init, 0, 0, 0, 0, 0);

        void t_SegmentInfoWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentInfoWriter), module, "SegmentInfoWriter", 0);
        }

        void t_SegmentInfoWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentInfoWriter).tp_dict, "class_", make_descriptor(SegmentInfoWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentInfoWriter).tp_dict, "wrapfn_", make_descriptor(t_SegmentInfoWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentInfoWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentInfoWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentInfoWriter::initializeClass, 1)))
            return NULL;
          return t_SegmentInfoWriter::wrap_Object(SegmentInfoWriter(((t_SegmentInfoWriter *) arg)->object.this$));
        }
        static PyObject *t_SegmentInfoWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentInfoWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SegmentInfoWriter_write(t_SegmentInfoWriter *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
          ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);

          if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.write(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "write", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$logical_and_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$logical_and_return::class$ = NULL;
          jmethodID *JavascriptParser$logical_and_return::mids$ = NULL;
          bool JavascriptParser$logical_and_return::live$ = false;

          jclass JavascriptParser$logical_and_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$logical_and_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$logical_and_return::JavascriptParser$logical_and_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$logical_and_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$logical_and_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$logical_and_return_init_(t_JavascriptParser$logical_and_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$logical_and_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$logical_and_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$logical_and_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$logical_and_return, t_JavascriptParser$logical_and_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$logical_and_return, t_JavascriptParser$logical_and_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$logical_and_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$logical_and_return), module, "JavascriptParser$logical_and_return", 0);
          }

          void t_JavascriptParser$logical_and_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$logical_and_return).tp_dict, "class_", make_descriptor(JavascriptParser$logical_and_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$logical_and_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$logical_and_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$logical_and_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$logical_and_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$logical_and_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$logical_and_return::wrap_Object(JavascriptParser$logical_and_return(((t_JavascriptParser$logical_and_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$logical_and_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$logical_and_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$logical_and_return_init_(t_JavascriptParser$logical_and_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$logical_and_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$logical_and_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/EnumFieldSource.h"
#include "java/lang/Integer.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/search/FieldCache$IntParser.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *EnumFieldSource::class$ = NULL;
            jmethodID *EnumFieldSource::mids$ = NULL;
            bool EnumFieldSource::live$ = false;

            jclass EnumFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/EnumFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_c567ecd0] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$IntParser;Ljava/util/Map;Ljava/util/Map;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            EnumFieldSource::EnumFieldSource(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$IntParser & a1, const ::java::util::Map & a2, const ::java::util::Map & a3) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_c567ecd0, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            ::java::lang::String EnumFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean EnumFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues EnumFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint EnumFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_EnumFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_EnumFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_EnumFieldSource_init_(t_EnumFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_EnumFieldSource_description(t_EnumFieldSource *self, PyObject *args);
            static PyObject *t_EnumFieldSource_equals(t_EnumFieldSource *self, PyObject *args);
            static PyObject *t_EnumFieldSource_getValues(t_EnumFieldSource *self, PyObject *args);
            static PyObject *t_EnumFieldSource_hashCode(t_EnumFieldSource *self, PyObject *args);

            static PyMethodDef t_EnumFieldSource__methods_[] = {
              DECLARE_METHOD(t_EnumFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_EnumFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_EnumFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_EnumFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_EnumFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_EnumFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(EnumFieldSource, t_EnumFieldSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, EnumFieldSource, t_EnumFieldSource_init_, 0, 0, 0, 0, 0);

            void t_EnumFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(EnumFieldSource), module, "EnumFieldSource", 0);
            }

            void t_EnumFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(EnumFieldSource).tp_dict, "class_", make_descriptor(EnumFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(EnumFieldSource).tp_dict, "wrapfn_", make_descriptor(t_EnumFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(EnumFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_EnumFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, EnumFieldSource::initializeClass, 1)))
                return NULL;
              return t_EnumFieldSource::wrap_Object(EnumFieldSource(((t_EnumFieldSource *) arg)->object.this$));
            }
            static PyObject *t_EnumFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, EnumFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_EnumFieldSource_init_(t_EnumFieldSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$IntParser a1((jobject) NULL);
              ::java::util::Map a2((jobject) NULL);
              PyTypeObject **p2;
              ::java::util::Map a3((jobject) NULL);
              PyTypeObject **p3;
              EnumFieldSource object((jobject) NULL);

              if (!parseArgs(args, "skKK", ::org::apache::lucene::search::FieldCache$IntParser::initializeClass, ::java::util::Map::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3, &p3, ::java::util::t_Map::parameters_))
              {
                INT_CALL(object = EnumFieldSource(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_EnumFieldSource_description(t_EnumFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(EnumFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_EnumFieldSource_equals(t_EnumFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(EnumFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_EnumFieldSource_getValues(t_EnumFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(EnumFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_EnumFieldSource_hashCode(t_EnumFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(EnumFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractGroupFacetCollector$FacetEntry.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractGroupFacetCollector$FacetEntry::class$ = NULL;
          jmethodID *AbstractGroupFacetCollector$FacetEntry::mids$ = NULL;
          bool AbstractGroupFacetCollector$FacetEntry::live$ = false;

          jclass AbstractGroupFacetCollector$FacetEntry::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractGroupFacetCollector$FacetEntry");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_738fc2ce] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BytesRef;I)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getCount_54c6a179] = env->getMethodID(cls, "getCount", "()I");
              mids$[mid_getValue_4ae19461] = env->getMethodID(cls, "getValue", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractGroupFacetCollector$FacetEntry::AbstractGroupFacetCollector$FacetEntry(const ::org::apache::lucene::util::BytesRef & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_738fc2ce, a0.this$, a1)) {}

          jboolean AbstractGroupFacetCollector$FacetEntry::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint AbstractGroupFacetCollector$FacetEntry::getCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getCount_54c6a179]);
          }

          ::org::apache::lucene::util::BytesRef AbstractGroupFacetCollector$FacetEntry::getValue() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getValue_4ae19461]));
          }

          jint AbstractGroupFacetCollector$FacetEntry::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String AbstractGroupFacetCollector$FacetEntry::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AbstractGroupFacetCollector$FacetEntry_init_(t_AbstractGroupFacetCollector$FacetEntry *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_equals(t_AbstractGroupFacetCollector$FacetEntry *self, PyObject *args);
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_getCount(t_AbstractGroupFacetCollector$FacetEntry *self);
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_getValue(t_AbstractGroupFacetCollector$FacetEntry *self);
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_hashCode(t_AbstractGroupFacetCollector$FacetEntry *self, PyObject *args);
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_toString(t_AbstractGroupFacetCollector$FacetEntry *self, PyObject *args);
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_get__count(t_AbstractGroupFacetCollector$FacetEntry *self, void *data);
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_get__value(t_AbstractGroupFacetCollector$FacetEntry *self, void *data);
          static PyGetSetDef t_AbstractGroupFacetCollector$FacetEntry__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractGroupFacetCollector$FacetEntry, count),
            DECLARE_GET_FIELD(t_AbstractGroupFacetCollector$FacetEntry, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractGroupFacetCollector$FacetEntry__methods_[] = {
            DECLARE_METHOD(t_AbstractGroupFacetCollector$FacetEntry, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$FacetEntry, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$FacetEntry, equals, METH_VARARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$FacetEntry, getCount, METH_NOARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$FacetEntry, getValue, METH_NOARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$FacetEntry, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$FacetEntry, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractGroupFacetCollector$FacetEntry, t_AbstractGroupFacetCollector$FacetEntry, ::java::lang::Object, AbstractGroupFacetCollector$FacetEntry, t_AbstractGroupFacetCollector$FacetEntry_init_, 0, 0, t_AbstractGroupFacetCollector$FacetEntry__fields_, 0, 0);

          void t_AbstractGroupFacetCollector$FacetEntry::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractGroupFacetCollector$FacetEntry), module, "AbstractGroupFacetCollector$FacetEntry", 0);
          }

          void t_AbstractGroupFacetCollector$FacetEntry::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector$FacetEntry).tp_dict, "class_", make_descriptor(AbstractGroupFacetCollector$FacetEntry::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector$FacetEntry).tp_dict, "wrapfn_", make_descriptor(t_AbstractGroupFacetCollector$FacetEntry::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector$FacetEntry).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractGroupFacetCollector$FacetEntry::initializeClass, 1)))
              return NULL;
            return t_AbstractGroupFacetCollector$FacetEntry::wrap_Object(AbstractGroupFacetCollector$FacetEntry(((t_AbstractGroupFacetCollector$FacetEntry *) arg)->object.this$));
          }
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractGroupFacetCollector$FacetEntry::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AbstractGroupFacetCollector$FacetEntry_init_(t_AbstractGroupFacetCollector$FacetEntry *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jint a1;
            AbstractGroupFacetCollector$FacetEntry object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              INT_CALL(object = AbstractGroupFacetCollector$FacetEntry(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_equals(t_AbstractGroupFacetCollector$FacetEntry *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractGroupFacetCollector$FacetEntry), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_getCount(t_AbstractGroupFacetCollector$FacetEntry *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_getValue(t_AbstractGroupFacetCollector$FacetEntry *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.getValue());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_hashCode(t_AbstractGroupFacetCollector$FacetEntry *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(AbstractGroupFacetCollector$FacetEntry), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_toString(t_AbstractGroupFacetCollector$FacetEntry *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(AbstractGroupFacetCollector$FacetEntry), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_get__count(t_AbstractGroupFacetCollector$FacetEntry *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getCount());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_get__value(t_AbstractGroupFacetCollector$FacetEntry *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getValue());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternReplaceCharFilter.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/util/regex/Pattern.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternReplaceCharFilter::class$ = NULL;
          jmethodID *PatternReplaceCharFilter::mids$ = NULL;
          bool PatternReplaceCharFilter::live$ = false;
          jint PatternReplaceCharFilter::DEFAULT_MAX_BLOCK_CHARS = (jint) 0;

          jclass PatternReplaceCharFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternReplaceCharFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e0e77162] = env->getMethodID(cls, "<init>", "(Ljava/util/regex/Pattern;Ljava/lang/String;Ljava/io/Reader;)V");
              mids$[mid_init$_ee751df6] = env->getMethodID(cls, "<init>", "(Ljava/util/regex/Pattern;Ljava/lang/String;ILjava/lang/String;Ljava/io/Reader;)V");
              mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
              mids$[mid_read_6f0bb349] = env->getMethodID(cls, "read", "([CII)I");
              mids$[mid_correct_39c7bd23] = env->getMethodID(cls, "correct", "(I)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_BLOCK_CHARS = env->getStaticIntField(cls, "DEFAULT_MAX_BLOCK_CHARS");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternReplaceCharFilter::PatternReplaceCharFilter(const ::java::util::regex::Pattern & a0, const ::java::lang::String & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::charfilter::BaseCharFilter(env->newObject(initializeClass, &mids$, mid_init$_e0e77162, a0.this$, a1.this$, a2.this$)) {}

          PatternReplaceCharFilter::PatternReplaceCharFilter(const ::java::util::regex::Pattern & a0, const ::java::lang::String & a1, jint a2, const ::java::lang::String & a3, const ::java::io::Reader & a4) : ::org::apache::lucene::analysis::charfilter::BaseCharFilter(env->newObject(initializeClass, &mids$, mid_init$_ee751df6, a0.this$, a1.this$, a2, a3.this$, a4.this$)) {}

          jint PatternReplaceCharFilter::read() const
          {
            return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
          }

          jint PatternReplaceCharFilter::read(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callIntMethod(this$, mids$[mid_read_6f0bb349], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternReplaceCharFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternReplaceCharFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternReplaceCharFilter_init_(t_PatternReplaceCharFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternReplaceCharFilter_read(t_PatternReplaceCharFilter *self, PyObject *args);

          static PyMethodDef t_PatternReplaceCharFilter__methods_[] = {
            DECLARE_METHOD(t_PatternReplaceCharFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceCharFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceCharFilter, read, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternReplaceCharFilter, t_PatternReplaceCharFilter, ::org::apache::lucene::analysis::charfilter::BaseCharFilter, PatternReplaceCharFilter, t_PatternReplaceCharFilter_init_, 0, 0, 0, 0, 0);

          void t_PatternReplaceCharFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternReplaceCharFilter), module, "PatternReplaceCharFilter", 0);
          }

          void t_PatternReplaceCharFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternReplaceCharFilter).tp_dict, "class_", make_descriptor(PatternReplaceCharFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternReplaceCharFilter).tp_dict, "wrapfn_", make_descriptor(t_PatternReplaceCharFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternReplaceCharFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PatternReplaceCharFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(PatternReplaceCharFilter).tp_dict, "DEFAULT_MAX_BLOCK_CHARS", make_descriptor(PatternReplaceCharFilter::DEFAULT_MAX_BLOCK_CHARS));
          }

          static PyObject *t_PatternReplaceCharFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternReplaceCharFilter::initializeClass, 1)))
              return NULL;
            return t_PatternReplaceCharFilter::wrap_Object(PatternReplaceCharFilter(((t_PatternReplaceCharFilter *) arg)->object.this$));
          }
          static PyObject *t_PatternReplaceCharFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternReplaceCharFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternReplaceCharFilter_init_(t_PatternReplaceCharFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::util::regex::Pattern a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                PatternReplaceCharFilter object((jobject) NULL);

                if (!parseArgs(args, "ksk", ::java::util::regex::Pattern::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = PatternReplaceCharFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::java::util::regex::Pattern a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                ::java::io::Reader a4((jobject) NULL);
                PatternReplaceCharFilter object((jobject) NULL);

                if (!parseArgs(args, "ksIsk", ::java::util::regex::Pattern::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = PatternReplaceCharFilter(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternReplaceCharFilter_read(t_PatternReplaceCharFilter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jint result;
                OBJ_CALL(result = self->object.read());
                return PyInt_FromLong((long) result);
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jint result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.read(a0, a1, a2));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(PatternReplaceCharFilter), (PyObject *) self, "read", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntsRefBuilder.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntsRefBuilder::class$ = NULL;
        jmethodID *IntsRefBuilder::mids$ = NULL;
        bool IntsRefBuilder::live$ = false;

        jclass IntsRefBuilder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntsRefBuilder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_append_39c7bd3c] = env->getMethodID(cls, "append", "(I)V");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_copyInts_4defa0e8] = env->getMethodID(cls, "copyInts", "(Lorg/apache/lucene/util/IntsRef;)V");
            mids$[mid_copyInts_3e1ea22c] = env->getMethodID(cls, "copyInts", "([III)V");
            mids$[mid_copyUTF8Bytes_7bc03dc4] = env->getMethodID(cls, "copyUTF8Bytes", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_get_5b734841] = env->getMethodID(cls, "get", "()Lorg/apache/lucene/util/IntsRef;");
            mids$[mid_grow_39c7bd3c] = env->getMethodID(cls, "grow", "(I)V");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_intAt_39c7bd23] = env->getMethodID(cls, "intAt", "(I)I");
            mids$[mid_ints_dab10e75] = env->getMethodID(cls, "ints", "()[I");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
            mids$[mid_setIntAt_d8d154a6] = env->getMethodID(cls, "setIntAt", "(II)V");
            mids$[mid_setLength_39c7bd3c] = env->getMethodID(cls, "setLength", "(I)V");
            mids$[mid_toIntsRef_5b734841] = env->getMethodID(cls, "toIntsRef", "()Lorg/apache/lucene/util/IntsRef;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntsRefBuilder::IntsRefBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void IntsRefBuilder::append(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_append_39c7bd3c], a0);
        }

        void IntsRefBuilder::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        void IntsRefBuilder::copyInts(const ::org::apache::lucene::util::IntsRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyInts_4defa0e8], a0.this$);
        }

        void IntsRefBuilder::copyInts(const JArray< jint > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_copyInts_3e1ea22c], a0.this$, a1, a2);
        }

        void IntsRefBuilder::copyUTF8Bytes(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyUTF8Bytes_7bc03dc4], a0.this$);
        }

        jboolean IntsRefBuilder::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::util::IntsRef IntsRefBuilder::get() const
        {
          return ::org::apache::lucene::util::IntsRef(env->callObjectMethod(this$, mids$[mid_get_5b734841]));
        }

        void IntsRefBuilder::grow(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_grow_39c7bd3c], a0);
        }

        jint IntsRefBuilder::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jint IntsRefBuilder::intAt(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_intAt_39c7bd23], a0);
        }

        JArray< jint > IntsRefBuilder::ints() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_ints_dab10e75]));
        }

        jint IntsRefBuilder::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }

        void IntsRefBuilder::setIntAt(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setIntAt_d8d154a6], a0, a1);
        }

        void IntsRefBuilder::setLength(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLength_39c7bd3c], a0);
        }

        ::org::apache::lucene::util::IntsRef IntsRefBuilder::toIntsRef() const
        {
          return ::org::apache::lucene::util::IntsRef(env->callObjectMethod(this$, mids$[mid_toIntsRef_5b734841]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntsRefBuilder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntsRefBuilder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntsRefBuilder_init_(t_IntsRefBuilder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntsRefBuilder_append(t_IntsRefBuilder *self, PyObject *arg);
        static PyObject *t_IntsRefBuilder_clear(t_IntsRefBuilder *self);
        static PyObject *t_IntsRefBuilder_copyInts(t_IntsRefBuilder *self, PyObject *args);
        static PyObject *t_IntsRefBuilder_copyUTF8Bytes(t_IntsRefBuilder *self, PyObject *arg);
        static PyObject *t_IntsRefBuilder_equals(t_IntsRefBuilder *self, PyObject *args);
        static PyObject *t_IntsRefBuilder_get(t_IntsRefBuilder *self);
        static PyObject *t_IntsRefBuilder_grow(t_IntsRefBuilder *self, PyObject *arg);
        static PyObject *t_IntsRefBuilder_hashCode(t_IntsRefBuilder *self, PyObject *args);
        static PyObject *t_IntsRefBuilder_intAt(t_IntsRefBuilder *self, PyObject *arg);
        static PyObject *t_IntsRefBuilder_ints(t_IntsRefBuilder *self);
        static PyObject *t_IntsRefBuilder_length(t_IntsRefBuilder *self);
        static PyObject *t_IntsRefBuilder_setIntAt(t_IntsRefBuilder *self, PyObject *args);
        static PyObject *t_IntsRefBuilder_setLength(t_IntsRefBuilder *self, PyObject *arg);
        static PyObject *t_IntsRefBuilder_toIntsRef(t_IntsRefBuilder *self);

        static PyMethodDef t_IntsRefBuilder__methods_[] = {
          DECLARE_METHOD(t_IntsRefBuilder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntsRefBuilder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntsRefBuilder, append, METH_O),
          DECLARE_METHOD(t_IntsRefBuilder, clear, METH_NOARGS),
          DECLARE_METHOD(t_IntsRefBuilder, copyInts, METH_VARARGS),
          DECLARE_METHOD(t_IntsRefBuilder, copyUTF8Bytes, METH_O),
          DECLARE_METHOD(t_IntsRefBuilder, equals, METH_VARARGS),
          DECLARE_METHOD(t_IntsRefBuilder, get, METH_NOARGS),
          DECLARE_METHOD(t_IntsRefBuilder, grow, METH_O),
          DECLARE_METHOD(t_IntsRefBuilder, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_IntsRefBuilder, intAt, METH_O),
          DECLARE_METHOD(t_IntsRefBuilder, ints, METH_NOARGS),
          DECLARE_METHOD(t_IntsRefBuilder, length, METH_NOARGS),
          DECLARE_METHOD(t_IntsRefBuilder, setIntAt, METH_VARARGS),
          DECLARE_METHOD(t_IntsRefBuilder, setLength, METH_O),
          DECLARE_METHOD(t_IntsRefBuilder, toIntsRef, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntsRefBuilder, t_IntsRefBuilder, ::java::lang::Object, IntsRefBuilder, t_IntsRefBuilder_init_, 0, 0, 0, 0, 0);

        void t_IntsRefBuilder::install(PyObject *module)
        {
          installType(&PY_TYPE(IntsRefBuilder), module, "IntsRefBuilder", 0);
        }

        void t_IntsRefBuilder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntsRefBuilder).tp_dict, "class_", make_descriptor(IntsRefBuilder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntsRefBuilder).tp_dict, "wrapfn_", make_descriptor(t_IntsRefBuilder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntsRefBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntsRefBuilder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntsRefBuilder::initializeClass, 1)))
            return NULL;
          return t_IntsRefBuilder::wrap_Object(IntsRefBuilder(((t_IntsRefBuilder *) arg)->object.this$));
        }
        static PyObject *t_IntsRefBuilder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntsRefBuilder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntsRefBuilder_init_(t_IntsRefBuilder *self, PyObject *args, PyObject *kwds)
        {
          IntsRefBuilder object((jobject) NULL);

          INT_CALL(object = IntsRefBuilder());
          self->object = object;

          return 0;
        }

        static PyObject *t_IntsRefBuilder_append(t_IntsRefBuilder *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.append(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "append", arg);
          return NULL;
        }

        static PyObject *t_IntsRefBuilder_clear(t_IntsRefBuilder *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_IntsRefBuilder_copyInts(t_IntsRefBuilder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::IntsRef a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::IntsRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.copyInts(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jint > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[III", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.copyInts(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "copyInts", args);
          return NULL;
        }

        static PyObject *t_IntsRefBuilder_copyUTF8Bytes(t_IntsRefBuilder *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyUTF8Bytes(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyUTF8Bytes", arg);
          return NULL;
        }

        static PyObject *t_IntsRefBuilder_equals(t_IntsRefBuilder *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(IntsRefBuilder), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_IntsRefBuilder_get(t_IntsRefBuilder *self)
        {
          ::org::apache::lucene::util::IntsRef result((jobject) NULL);
          OBJ_CALL(result = self->object.get());
          return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
        }

        static PyObject *t_IntsRefBuilder_grow(t_IntsRefBuilder *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.grow(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "grow", arg);
          return NULL;
        }

        static PyObject *t_IntsRefBuilder_hashCode(t_IntsRefBuilder *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IntsRefBuilder), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_IntsRefBuilder_intAt(t_IntsRefBuilder *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.intAt(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "intAt", arg);
          return NULL;
        }

        static PyObject *t_IntsRefBuilder_ints(t_IntsRefBuilder *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.ints());
          return result.wrap();
        }

        static PyObject *t_IntsRefBuilder_length(t_IntsRefBuilder *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IntsRefBuilder_setIntAt(t_IntsRefBuilder *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.setIntAt(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setIntAt", args);
          return NULL;
        }

        static PyObject *t_IntsRefBuilder_setLength(t_IntsRefBuilder *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setLength(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLength", arg);
          return NULL;
        }

        static PyObject *t_IntsRefBuilder_toIntsRef(t_IntsRefBuilder *self)
        {
          ::org::apache::lucene::util::IntsRef result((jobject) NULL);
          OBJ_CALL(result = self->object.toIntsRef());
          return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseStemFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseStemFilterFactory::class$ = NULL;
          jmethodID *PortugueseStemFilterFactory::mids$ = NULL;
          bool PortugueseStemFilterFactory::live$ = false;

          jclass PortugueseStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseStemFilterFactory::PortugueseStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream PortugueseStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseStemFilterFactory_init_(t_PortugueseStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseStemFilterFactory_create(t_PortugueseStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_PortugueseStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PortugueseStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseStemFilterFactory, t_PortugueseStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, PortugueseStemFilterFactory, t_PortugueseStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_PortugueseStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseStemFilterFactory), module, "PortugueseStemFilterFactory", 0);
          }

          void t_PortugueseStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseStemFilterFactory).tp_dict, "class_", make_descriptor(PortugueseStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PortugueseStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PortugueseStemFilterFactory::wrap_Object(PortugueseStemFilterFactory(((t_PortugueseStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PortugueseStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseStemFilterFactory_init_(t_PortugueseStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PortugueseStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PortugueseStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseStemFilterFactory_create(t_PortugueseStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PortugueseStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/messages/MessageImpl.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "java/util/Locale.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {

            ::java::lang::Class *MessageImpl::class$ = NULL;
            jmethodID *MessageImpl::mids$ = NULL;
            bool MessageImpl::live$ = false;

            jclass MessageImpl::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/messages/MessageImpl");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_ddea115c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Ljava/lang/Object;)V");
                mids$[mid_getArguments_94e49c77] = env->getMethodID(cls, "getArguments", "()[Ljava/lang/Object;");
                mids$[mid_getKey_14c7b5c5] = env->getMethodID(cls, "getKey", "()Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_14c7b5c5] = env->getMethodID(cls, "getLocalizedMessage", "()Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_c0fb304e] = env->getMethodID(cls, "getLocalizedMessage", "(Ljava/util/Locale;)Ljava/lang/String;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MessageImpl::MessageImpl(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            MessageImpl::MessageImpl(const ::java::lang::String & a0, const JArray< ::java::lang::Object > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ddea115c, a0.this$, a1.this$)) {}

            JArray< ::java::lang::Object > MessageImpl::getArguments() const
            {
              return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_getArguments_94e49c77]));
            }

            ::java::lang::String MessageImpl::getKey() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getKey_14c7b5c5]));
            }

            ::java::lang::String MessageImpl::getLocalizedMessage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_14c7b5c5]));
            }

            ::java::lang::String MessageImpl::getLocalizedMessage(const ::java::util::Locale & a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_c0fb304e], a0.this$));
            }

            ::java::lang::String MessageImpl::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {
            static PyObject *t_MessageImpl_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MessageImpl_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MessageImpl_init_(t_MessageImpl *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MessageImpl_getArguments(t_MessageImpl *self);
            static PyObject *t_MessageImpl_getKey(t_MessageImpl *self);
            static PyObject *t_MessageImpl_getLocalizedMessage(t_MessageImpl *self, PyObject *args);
            static PyObject *t_MessageImpl_toString(t_MessageImpl *self, PyObject *args);
            static PyObject *t_MessageImpl_get__arguments(t_MessageImpl *self, void *data);
            static PyObject *t_MessageImpl_get__key(t_MessageImpl *self, void *data);
            static PyObject *t_MessageImpl_get__localizedMessage(t_MessageImpl *self, void *data);
            static PyGetSetDef t_MessageImpl__fields_[] = {
              DECLARE_GET_FIELD(t_MessageImpl, arguments),
              DECLARE_GET_FIELD(t_MessageImpl, key),
              DECLARE_GET_FIELD(t_MessageImpl, localizedMessage),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_MessageImpl__methods_[] = {
              DECLARE_METHOD(t_MessageImpl, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MessageImpl, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MessageImpl, getArguments, METH_NOARGS),
              DECLARE_METHOD(t_MessageImpl, getKey, METH_NOARGS),
              DECLARE_METHOD(t_MessageImpl, getLocalizedMessage, METH_VARARGS),
              DECLARE_METHOD(t_MessageImpl, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MessageImpl, t_MessageImpl, ::java::lang::Object, MessageImpl, t_MessageImpl_init_, 0, 0, t_MessageImpl__fields_, 0, 0);

            void t_MessageImpl::install(PyObject *module)
            {
              installType(&PY_TYPE(MessageImpl), module, "MessageImpl", 0);
            }

            void t_MessageImpl::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MessageImpl).tp_dict, "class_", make_descriptor(MessageImpl::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MessageImpl).tp_dict, "wrapfn_", make_descriptor(t_MessageImpl::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MessageImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MessageImpl_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MessageImpl::initializeClass, 1)))
                return NULL;
              return t_MessageImpl::wrap_Object(MessageImpl(((t_MessageImpl *) arg)->object.this$));
            }
            static PyObject *t_MessageImpl_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MessageImpl::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MessageImpl_init_(t_MessageImpl *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  MessageImpl object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = MessageImpl(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  JArray< ::java::lang::Object > a1((jobject) NULL);
                  MessageImpl object((jobject) NULL);

                  if (!parseArgs(args, "s[o", &a0, &a1))
                  {
                    INT_CALL(object = MessageImpl(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_MessageImpl_getArguments(t_MessageImpl *self)
            {
              JArray< ::java::lang::Object > result((jobject) NULL);
              OBJ_CALL(result = self->object.getArguments());
              return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
            }

            static PyObject *t_MessageImpl_getKey(t_MessageImpl *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getKey());
              return j2p(result);
            }

            static PyObject *t_MessageImpl_getLocalizedMessage(t_MessageImpl *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  ::java::lang::String result((jobject) NULL);
                  OBJ_CALL(result = self->object.getLocalizedMessage());
                  return j2p(result);
                }
                break;
               case 1:
                {
                  ::java::util::Locale a0((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
                  {
                    OBJ_CALL(result = self->object.getLocalizedMessage(a0));
                    return j2p(result);
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "getLocalizedMessage", args);
              return NULL;
            }

            static PyObject *t_MessageImpl_toString(t_MessageImpl *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(MessageImpl), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_MessageImpl_get__arguments(t_MessageImpl *self, void *data)
            {
              JArray< ::java::lang::Object > value((jobject) NULL);
              OBJ_CALL(value = self->object.getArguments());
              return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
            }

            static PyObject *t_MessageImpl_get__key(t_MessageImpl *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getKey());
              return j2p(value);
            }

            static PyObject *t_MessageImpl_get__localizedMessage(t_MessageImpl *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getLocalizedMessage());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/InputStreamReader.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/io/InputStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *InputStreamReader::class$ = NULL;
    jmethodID *InputStreamReader::mids$ = NULL;
    bool InputStreamReader::live$ = false;

    jclass InputStreamReader::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/InputStreamReader");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
        mids$[mid_init$_32277d42] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;Ljava/lang/String;)V");
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_getEncoding_14c7b5c5] = env->getMethodID(cls, "getEncoding", "()Ljava/lang/String;");
        mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
        mids$[mid_read_6f0bb349] = env->getMethodID(cls, "read", "([CII)I");
        mids$[mid_ready_54c6a16a] = env->getMethodID(cls, "ready", "()Z");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    InputStreamReader::InputStreamReader(const ::java::io::InputStream & a0) : ::java::io::Reader(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

    InputStreamReader::InputStreamReader(const ::java::io::InputStream & a0, const ::java::lang::String & a1) : ::java::io::Reader(env->newObject(initializeClass, &mids$, mid_init$_32277d42, a0.this$, a1.this$)) {}

    void InputStreamReader::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    ::java::lang::String InputStreamReader::getEncoding() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getEncoding_14c7b5c5]));
    }

    jint InputStreamReader::read() const
    {
      return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
    }

    jint InputStreamReader::read(const JArray< jchar > & a0, jint a1, jint a2) const
    {
      return env->callIntMethod(this$, mids$[mid_read_6f0bb349], a0.this$, a1, a2);
    }

    jboolean InputStreamReader::ready() const
    {
      return env->callBooleanMethod(this$, mids$[mid_ready_54c6a16a]);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_InputStreamReader_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_InputStreamReader_instance_(PyTypeObject *type, PyObject *arg);
    static int t_InputStreamReader_init_(t_InputStreamReader *self, PyObject *args, PyObject *kwds);
    static PyObject *t_InputStreamReader_close(t_InputStreamReader *self, PyObject *args);
    static PyObject *t_InputStreamReader_getEncoding(t_InputStreamReader *self);
    static PyObject *t_InputStreamReader_read(t_InputStreamReader *self, PyObject *args);
    static PyObject *t_InputStreamReader_ready(t_InputStreamReader *self, PyObject *args);
    static PyObject *t_InputStreamReader_get__encoding(t_InputStreamReader *self, void *data);
    static PyGetSetDef t_InputStreamReader__fields_[] = {
      DECLARE_GET_FIELD(t_InputStreamReader, encoding),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_InputStreamReader__methods_[] = {
      DECLARE_METHOD(t_InputStreamReader, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_InputStreamReader, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_InputStreamReader, close, METH_VARARGS),
      DECLARE_METHOD(t_InputStreamReader, getEncoding, METH_NOARGS),
      DECLARE_METHOD(t_InputStreamReader, read, METH_VARARGS),
      DECLARE_METHOD(t_InputStreamReader, ready, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(InputStreamReader, t_InputStreamReader, ::java::io::Reader, InputStreamReader, t_InputStreamReader_init_, 0, 0, t_InputStreamReader__fields_, 0, 0);

    void t_InputStreamReader::install(PyObject *module)
    {
      installType(&PY_TYPE(InputStreamReader), module, "InputStreamReader", 0);
    }

    void t_InputStreamReader::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(InputStreamReader).tp_dict, "class_", make_descriptor(InputStreamReader::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(InputStreamReader).tp_dict, "wrapfn_", make_descriptor(t_InputStreamReader::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(InputStreamReader).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_InputStreamReader_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, InputStreamReader::initializeClass, 1)))
        return NULL;
      return t_InputStreamReader::wrap_Object(InputStreamReader(((t_InputStreamReader *) arg)->object.this$));
    }
    static PyObject *t_InputStreamReader_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, InputStreamReader::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_InputStreamReader_init_(t_InputStreamReader *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::io::InputStream a0((jobject) NULL);
          InputStreamReader object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
          {
            INT_CALL(object = InputStreamReader(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::io::InputStream a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          InputStreamReader object((jobject) NULL);

          if (!parseArgs(args, "ks", ::java::io::InputStream::initializeClass, &a0, &a1))
          {
            INT_CALL(object = InputStreamReader(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_InputStreamReader_close(t_InputStreamReader *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.close());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(InputStreamReader), (PyObject *) self, "close", args, 2);
    }

    static PyObject *t_InputStreamReader_getEncoding(t_InputStreamReader *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getEncoding());
      return j2p(result);
    }

    static PyObject *t_InputStreamReader_read(t_InputStreamReader *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          jint result;
          OBJ_CALL(result = self->object.read());
          return PyInt_FromLong((long) result);
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      return callSuper(&PY_TYPE(InputStreamReader), (PyObject *) self, "read", args, 2);
    }

    static PyObject *t_InputStreamReader_ready(t_InputStreamReader *self, PyObject *args)
    {
      jboolean result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.ready());
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(InputStreamReader), (PyObject *) self, "ready", args, 2);
    }

    static PyObject *t_InputStreamReader_get__encoding(t_InputStreamReader *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getEncoding());
      return j2p(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/AfterEffect.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *AfterEffect::class$ = NULL;
          jmethodID *AfterEffect::mids$ = NULL;
          bool AfterEffect::live$ = false;

          jclass AfterEffect::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/AfterEffect");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_05d4946a] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;F)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AfterEffect::AfterEffect() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation AfterEffect::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_05d4946a], a0.this$, a1));
          }

          jfloat AfterEffect::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String AfterEffect::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/similarities/AfterEffect$NoAfterEffect.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_AfterEffect_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AfterEffect_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AfterEffect_init_(t_AfterEffect *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AfterEffect_explain(t_AfterEffect *self, PyObject *args);
          static PyObject *t_AfterEffect_score(t_AfterEffect *self, PyObject *args);
          static PyObject *t_AfterEffect_toString(t_AfterEffect *self, PyObject *args);

          static PyMethodDef t_AfterEffect__methods_[] = {
            DECLARE_METHOD(t_AfterEffect, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffect, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffect, explain, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffect, score, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffect, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AfterEffect, t_AfterEffect, ::java::lang::Object, AfterEffect, t_AfterEffect_init_, 0, 0, 0, 0, 0);

          void t_AfterEffect::install(PyObject *module)
          {
            installType(&PY_TYPE(AfterEffect), module, "AfterEffect", 0);
            PyDict_SetItemString(PY_TYPE(AfterEffect).tp_dict, "NoAfterEffect", make_descriptor(&PY_TYPE(AfterEffect$NoAfterEffect)));
          }

          void t_AfterEffect::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AfterEffect).tp_dict, "class_", make_descriptor(AfterEffect::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AfterEffect).tp_dict, "wrapfn_", make_descriptor(t_AfterEffect::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AfterEffect).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AfterEffect_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AfterEffect::initializeClass, 1)))
              return NULL;
            return t_AfterEffect::wrap_Object(AfterEffect(((t_AfterEffect *) arg)->object.this$));
          }
          static PyObject *t_AfterEffect_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AfterEffect::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AfterEffect_init_(t_AfterEffect *self, PyObject *args, PyObject *kwds)
          {
            AfterEffect object((jobject) NULL);

            INT_CALL(object = AfterEffect());
            self->object = object;

            return 0;
          }

          static PyObject *t_AfterEffect_explain(t_AfterEffect *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", args);
            return NULL;
          }

          static PyObject *t_AfterEffect_score(t_AfterEffect *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "score", args);
            return NULL;
          }

          static PyObject *t_AfterEffect_toString(t_AfterEffect *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(AfterEffect), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntBlockPool$Allocator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntBlockPool$Allocator::class$ = NULL;
        jmethodID *IntBlockPool$Allocator::mids$ = NULL;
        bool IntBlockPool$Allocator::live$ = false;

        jclass IntBlockPool$Allocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntBlockPool$Allocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_getIntBlock_dab10e75] = env->getMethodID(cls, "getIntBlock", "()[I");
            mids$[mid_recycleIntBlocks_9f62f13c] = env->getMethodID(cls, "recycleIntBlocks", "([[III)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntBlockPool$Allocator::IntBlockPool$Allocator(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        JArray< jint > IntBlockPool$Allocator::getIntBlock() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getIntBlock_dab10e75]));
        }

        void IntBlockPool$Allocator::recycleIntBlocks(const JArray< JArray< jint > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleIntBlocks_9f62f13c], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntBlockPool$Allocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntBlockPool$Allocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntBlockPool$Allocator_init_(t_IntBlockPool$Allocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntBlockPool$Allocator_getIntBlock(t_IntBlockPool$Allocator *self);
        static PyObject *t_IntBlockPool$Allocator_recycleIntBlocks(t_IntBlockPool$Allocator *self, PyObject *args);
        static PyObject *t_IntBlockPool$Allocator_get__intBlock(t_IntBlockPool$Allocator *self, void *data);
        static PyGetSetDef t_IntBlockPool$Allocator__fields_[] = {
          DECLARE_GET_FIELD(t_IntBlockPool$Allocator, intBlock),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IntBlockPool$Allocator__methods_[] = {
          DECLARE_METHOD(t_IntBlockPool$Allocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$Allocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$Allocator, getIntBlock, METH_NOARGS),
          DECLARE_METHOD(t_IntBlockPool$Allocator, recycleIntBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntBlockPool$Allocator, t_IntBlockPool$Allocator, ::java::lang::Object, IntBlockPool$Allocator, t_IntBlockPool$Allocator_init_, 0, 0, t_IntBlockPool$Allocator__fields_, 0, 0);

        void t_IntBlockPool$Allocator::install(PyObject *module)
        {
          installType(&PY_TYPE(IntBlockPool$Allocator), module, "IntBlockPool$Allocator", 0);
        }

        void t_IntBlockPool$Allocator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntBlockPool$Allocator).tp_dict, "class_", make_descriptor(IntBlockPool$Allocator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntBlockPool$Allocator).tp_dict, "wrapfn_", make_descriptor(t_IntBlockPool$Allocator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntBlockPool$Allocator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntBlockPool$Allocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntBlockPool$Allocator::initializeClass, 1)))
            return NULL;
          return t_IntBlockPool$Allocator::wrap_Object(IntBlockPool$Allocator(((t_IntBlockPool$Allocator *) arg)->object.this$));
        }
        static PyObject *t_IntBlockPool$Allocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntBlockPool$Allocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntBlockPool$Allocator_init_(t_IntBlockPool$Allocator *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          IntBlockPool$Allocator object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = IntBlockPool$Allocator(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IntBlockPool$Allocator_getIntBlock(t_IntBlockPool$Allocator *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.getIntBlock());
          return result.wrap();
        }

        static PyObject *t_IntBlockPool$Allocator_recycleIntBlocks(t_IntBlockPool$Allocator *self, PyObject *args)
        {
          JArray< JArray< jint > > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[[III", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.recycleIntBlocks(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "recycleIntBlocks", args);
          return NULL;
        }

        static PyObject *t_IntBlockPool$Allocator_get__intBlock(t_IntBlockPool$Allocator *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object.getIntBlock());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractDistinctValuesCollector$GroupCount.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractDistinctValuesCollector$GroupCount::class$ = NULL;
          jmethodID *AbstractDistinctValuesCollector$GroupCount::mids$ = NULL;
          jfieldID *AbstractDistinctValuesCollector$GroupCount::fids$ = NULL;
          bool AbstractDistinctValuesCollector$GroupCount::live$ = false;

          jclass AbstractDistinctValuesCollector$GroupCount::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractDistinctValuesCollector$GroupCount");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_290588ee] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_groupValue] = env->getFieldID(cls, "groupValue", "Ljava/lang/Object;");
              fids$[fid_uniqueValues] = env->getFieldID(cls, "uniqueValues", "Ljava/util/Set;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractDistinctValuesCollector$GroupCount::AbstractDistinctValuesCollector$GroupCount(const ::java::lang::Object & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_290588ee, a0.this$)) {}

          ::java::lang::Object AbstractDistinctValuesCollector$GroupCount::_get_groupValue() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_groupValue]));
          }

          ::java::util::Set AbstractDistinctValuesCollector$GroupCount::_get_uniqueValues() const
          {
            return ::java::util::Set(env->getObjectField(this$, fids$[fid_uniqueValues]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_of_(t_AbstractDistinctValuesCollector$GroupCount *self, PyObject *args);
          static int t_AbstractDistinctValuesCollector$GroupCount_init_(t_AbstractDistinctValuesCollector$GroupCount *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_get__groupValue(t_AbstractDistinctValuesCollector$GroupCount *self, void *data);
          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_get__uniqueValues(t_AbstractDistinctValuesCollector$GroupCount *self, void *data);

          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_get__parameters_(t_AbstractDistinctValuesCollector$GroupCount *self, void *data);
          static PyGetSetDef t_AbstractDistinctValuesCollector$GroupCount__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractDistinctValuesCollector$GroupCount, groupValue),
            DECLARE_GET_FIELD(t_AbstractDistinctValuesCollector$GroupCount, uniqueValues),
            DECLARE_GET_FIELD(t_AbstractDistinctValuesCollector$GroupCount, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractDistinctValuesCollector$GroupCount__methods_[] = {
            DECLARE_METHOD(t_AbstractDistinctValuesCollector$GroupCount, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractDistinctValuesCollector$GroupCount, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractDistinctValuesCollector$GroupCount, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractDistinctValuesCollector$GroupCount, t_AbstractDistinctValuesCollector$GroupCount, ::java::lang::Object, AbstractDistinctValuesCollector$GroupCount, t_AbstractDistinctValuesCollector$GroupCount_init_, 0, 0, t_AbstractDistinctValuesCollector$GroupCount__fields_, 0, 0);
          PyObject *t_AbstractDistinctValuesCollector$GroupCount::wrap_Object(const AbstractDistinctValuesCollector$GroupCount& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractDistinctValuesCollector$GroupCount::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractDistinctValuesCollector$GroupCount *self = (t_AbstractDistinctValuesCollector$GroupCount *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractDistinctValuesCollector$GroupCount::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractDistinctValuesCollector$GroupCount::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractDistinctValuesCollector$GroupCount *self = (t_AbstractDistinctValuesCollector$GroupCount *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractDistinctValuesCollector$GroupCount::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractDistinctValuesCollector$GroupCount), module, "AbstractDistinctValuesCollector$GroupCount", 0);
          }

          void t_AbstractDistinctValuesCollector$GroupCount::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractDistinctValuesCollector$GroupCount).tp_dict, "class_", make_descriptor(AbstractDistinctValuesCollector$GroupCount::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractDistinctValuesCollector$GroupCount).tp_dict, "wrapfn_", make_descriptor(t_AbstractDistinctValuesCollector$GroupCount::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractDistinctValuesCollector$GroupCount).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractDistinctValuesCollector$GroupCount::initializeClass, 1)))
              return NULL;
            return t_AbstractDistinctValuesCollector$GroupCount::wrap_Object(AbstractDistinctValuesCollector$GroupCount(((t_AbstractDistinctValuesCollector$GroupCount *) arg)->object.this$));
          }
          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractDistinctValuesCollector$GroupCount::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_of_(t_AbstractDistinctValuesCollector$GroupCount *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_AbstractDistinctValuesCollector$GroupCount_init_(t_AbstractDistinctValuesCollector$GroupCount *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::Object a0((jobject) NULL);
            AbstractDistinctValuesCollector$GroupCount object((jobject) NULL);

            if (!parseArgs(args, "o", &a0))
            {
              INT_CALL(object = AbstractDistinctValuesCollector$GroupCount(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_get__parameters_(t_AbstractDistinctValuesCollector$GroupCount *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_get__groupValue(t_AbstractDistinctValuesCollector$GroupCount *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupValue());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_get__uniqueValues(t_AbstractDistinctValuesCollector$GroupCount *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object._get_uniqueValues());
            return ::java::util::t_Set::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/MultiPhraseQueryNodeBuilder.h"
#include "org/apache/lucene/search/MultiPhraseQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *MultiPhraseQueryNodeBuilder::class$ = NULL;
              jmethodID *MultiPhraseQueryNodeBuilder::mids$ = NULL;
              bool MultiPhraseQueryNodeBuilder::live$ = false;

              jclass MultiPhraseQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/MultiPhraseQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_5363542a] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/MultiPhraseQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MultiPhraseQueryNodeBuilder::MultiPhraseQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::MultiPhraseQuery MultiPhraseQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::MultiPhraseQuery(env->callObjectMethod(this$, mids$[mid_build_5363542a], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_MultiPhraseQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MultiPhraseQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MultiPhraseQueryNodeBuilder_init_(t_MultiPhraseQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_MultiPhraseQueryNodeBuilder_build(t_MultiPhraseQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_MultiPhraseQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_MultiPhraseQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MultiPhraseQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MultiPhraseQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MultiPhraseQueryNodeBuilder, t_MultiPhraseQueryNodeBuilder, ::java::lang::Object, MultiPhraseQueryNodeBuilder, t_MultiPhraseQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_MultiPhraseQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(MultiPhraseQueryNodeBuilder), module, "MultiPhraseQueryNodeBuilder", 0);
              }

              void t_MultiPhraseQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MultiPhraseQueryNodeBuilder).tp_dict, "class_", make_descriptor(MultiPhraseQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MultiPhraseQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_MultiPhraseQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MultiPhraseQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MultiPhraseQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MultiPhraseQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_MultiPhraseQueryNodeBuilder::wrap_Object(MultiPhraseQueryNodeBuilder(((t_MultiPhraseQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_MultiPhraseQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MultiPhraseQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MultiPhraseQueryNodeBuilder_init_(t_MultiPhraseQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                MultiPhraseQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = MultiPhraseQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_MultiPhraseQueryNodeBuilder_build(t_MultiPhraseQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::MultiPhraseQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_MultiPhraseQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/LetterTokenizer.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *LetterTokenizer::class$ = NULL;
          jmethodID *LetterTokenizer::mids$ = NULL;
          bool LetterTokenizer::live$ = false;

          jclass LetterTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/LetterTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_5877b8f0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_isTokenChar_39c7bd30] = env->getMethodID(cls, "isTokenChar", "(I)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LetterTokenizer::LetterTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          LetterTokenizer::LetterTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_5877b8f0, a0.this$, a1.this$)) {}

          LetterTokenizer::LetterTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          LetterTokenizer::LetterTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_LetterTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LetterTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LetterTokenizer_init_(t_LetterTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_LetterTokenizer__methods_[] = {
            DECLARE_METHOD(t_LetterTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LetterTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LetterTokenizer, t_LetterTokenizer, ::org::apache::lucene::analysis::util::CharTokenizer, LetterTokenizer, t_LetterTokenizer_init_, 0, 0, 0, 0, 0);

          void t_LetterTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(LetterTokenizer), module, "LetterTokenizer", 0);
          }

          void t_LetterTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LetterTokenizer).tp_dict, "class_", make_descriptor(LetterTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LetterTokenizer).tp_dict, "wrapfn_", make_descriptor(t_LetterTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LetterTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LetterTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LetterTokenizer::initializeClass, 1)))
              return NULL;
            return t_LetterTokenizer::wrap_Object(LetterTokenizer(((t_LetterTokenizer *) arg)->object.this$));
          }
          static PyObject *t_LetterTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LetterTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LetterTokenizer_init_(t_LetterTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                LetterTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = LetterTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                LetterTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = LetterTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                LetterTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = LetterTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                LetterTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = LetterTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntBlockPool$SliceWriter.h"
#include "org/apache/lucene/util/IntBlockPool.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntBlockPool$SliceWriter::class$ = NULL;
        jmethodID *IntBlockPool$SliceWriter::mids$ = NULL;
        bool IntBlockPool$SliceWriter::live$ = false;

        jclass IntBlockPool$SliceWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntBlockPool$SliceWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_67e0ad2c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/IntBlockPool;)V");
            mids$[mid_getCurrentOffset_54c6a179] = env->getMethodID(cls, "getCurrentOffset", "()I");
            mids$[mid_reset_39c7bd3c] = env->getMethodID(cls, "reset", "(I)V");
            mids$[mid_startNewSlice_54c6a179] = env->getMethodID(cls, "startNewSlice", "()I");
            mids$[mid_writeInt_39c7bd3c] = env->getMethodID(cls, "writeInt", "(I)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntBlockPool$SliceWriter::IntBlockPool$SliceWriter(const ::org::apache::lucene::util::IntBlockPool & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_67e0ad2c, a0.this$)) {}

        jint IntBlockPool$SliceWriter::getCurrentOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_getCurrentOffset_54c6a179]);
        }

        void IntBlockPool$SliceWriter::reset(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_39c7bd3c], a0);
        }

        jint IntBlockPool$SliceWriter::startNewSlice() const
        {
          return env->callIntMethod(this$, mids$[mid_startNewSlice_54c6a179]);
        }

        void IntBlockPool$SliceWriter::writeInt(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeInt_39c7bd3c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntBlockPool$SliceWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntBlockPool$SliceWriter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntBlockPool$SliceWriter_init_(t_IntBlockPool$SliceWriter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntBlockPool$SliceWriter_getCurrentOffset(t_IntBlockPool$SliceWriter *self);
        static PyObject *t_IntBlockPool$SliceWriter_reset(t_IntBlockPool$SliceWriter *self, PyObject *arg);
        static PyObject *t_IntBlockPool$SliceWriter_startNewSlice(t_IntBlockPool$SliceWriter *self);
        static PyObject *t_IntBlockPool$SliceWriter_writeInt(t_IntBlockPool$SliceWriter *self, PyObject *arg);
        static PyObject *t_IntBlockPool$SliceWriter_get__currentOffset(t_IntBlockPool$SliceWriter *self, void *data);
        static PyGetSetDef t_IntBlockPool$SliceWriter__fields_[] = {
          DECLARE_GET_FIELD(t_IntBlockPool$SliceWriter, currentOffset),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IntBlockPool$SliceWriter__methods_[] = {
          DECLARE_METHOD(t_IntBlockPool$SliceWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$SliceWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$SliceWriter, getCurrentOffset, METH_NOARGS),
          DECLARE_METHOD(t_IntBlockPool$SliceWriter, reset, METH_O),
          DECLARE_METHOD(t_IntBlockPool$SliceWriter, startNewSlice, METH_NOARGS),
          DECLARE_METHOD(t_IntBlockPool$SliceWriter, writeInt, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntBlockPool$SliceWriter, t_IntBlockPool$SliceWriter, ::java::lang::Object, IntBlockPool$SliceWriter, t_IntBlockPool$SliceWriter_init_, 0, 0, t_IntBlockPool$SliceWriter__fields_, 0, 0);

        void t_IntBlockPool$SliceWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(IntBlockPool$SliceWriter), module, "IntBlockPool$SliceWriter", 0);
        }

        void t_IntBlockPool$SliceWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntBlockPool$SliceWriter).tp_dict, "class_", make_descriptor(IntBlockPool$SliceWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntBlockPool$SliceWriter).tp_dict, "wrapfn_", make_descriptor(t_IntBlockPool$SliceWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntBlockPool$SliceWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntBlockPool$SliceWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntBlockPool$SliceWriter::initializeClass, 1)))
            return NULL;
          return t_IntBlockPool$SliceWriter::wrap_Object(IntBlockPool$SliceWriter(((t_IntBlockPool$SliceWriter *) arg)->object.this$));
        }
        static PyObject *t_IntBlockPool$SliceWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntBlockPool$SliceWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntBlockPool$SliceWriter_init_(t_IntBlockPool$SliceWriter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::IntBlockPool a0((jobject) NULL);
          IntBlockPool$SliceWriter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::IntBlockPool::initializeClass, &a0))
          {
            INT_CALL(object = IntBlockPool$SliceWriter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IntBlockPool$SliceWriter_getCurrentOffset(t_IntBlockPool$SliceWriter *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getCurrentOffset());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IntBlockPool$SliceWriter_reset(t_IntBlockPool$SliceWriter *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.reset(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "reset", arg);
          return NULL;
        }

        static PyObject *t_IntBlockPool$SliceWriter_startNewSlice(t_IntBlockPool$SliceWriter *self)
        {
          jint result;
          OBJ_CALL(result = self->object.startNewSlice());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IntBlockPool$SliceWriter_writeInt(t_IntBlockPool$SliceWriter *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.writeInt(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeInt", arg);
          return NULL;
        }

        static PyObject *t_IntBlockPool$SliceWriter_get__currentOffset(t_IntBlockPool$SliceWriter *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getCurrentOffset());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ReferenceManager$RefreshListener.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ReferenceManager$RefreshListener::class$ = NULL;
        jmethodID *ReferenceManager$RefreshListener::mids$ = NULL;
        bool ReferenceManager$RefreshListener::live$ = false;

        jclass ReferenceManager$RefreshListener::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ReferenceManager$RefreshListener");

            mids$ = new jmethodID[max_mid];
            mids$[mid_afterRefresh_bb0c767f] = env->getMethodID(cls, "afterRefresh", "(Z)V");
            mids$[mid_beforeRefresh_54c6a166] = env->getMethodID(cls, "beforeRefresh", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void ReferenceManager$RefreshListener::afterRefresh(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_afterRefresh_bb0c767f], a0);
        }

        void ReferenceManager$RefreshListener::beforeRefresh() const
        {
          env->callVoidMethod(this$, mids$[mid_beforeRefresh_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ReferenceManager$RefreshListener_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReferenceManager$RefreshListener_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReferenceManager$RefreshListener_of_(t_ReferenceManager$RefreshListener *self, PyObject *args);
        static PyObject *t_ReferenceManager$RefreshListener_afterRefresh(t_ReferenceManager$RefreshListener *self, PyObject *arg);
        static PyObject *t_ReferenceManager$RefreshListener_beforeRefresh(t_ReferenceManager$RefreshListener *self);
        static PyObject *t_ReferenceManager$RefreshListener_get__parameters_(t_ReferenceManager$RefreshListener *self, void *data);
        static PyGetSetDef t_ReferenceManager$RefreshListener__fields_[] = {
          DECLARE_GET_FIELD(t_ReferenceManager$RefreshListener, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ReferenceManager$RefreshListener__methods_[] = {
          DECLARE_METHOD(t_ReferenceManager$RefreshListener, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReferenceManager$RefreshListener, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReferenceManager$RefreshListener, of_, METH_VARARGS),
          DECLARE_METHOD(t_ReferenceManager$RefreshListener, afterRefresh, METH_O),
          DECLARE_METHOD(t_ReferenceManager$RefreshListener, beforeRefresh, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ReferenceManager$RefreshListener, t_ReferenceManager$RefreshListener, ::java::lang::Object, ReferenceManager$RefreshListener, abstract_init, 0, 0, t_ReferenceManager$RefreshListener__fields_, 0, 0);
        PyObject *t_ReferenceManager$RefreshListener::wrap_Object(const ReferenceManager$RefreshListener& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ReferenceManager$RefreshListener::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ReferenceManager$RefreshListener *self = (t_ReferenceManager$RefreshListener *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ReferenceManager$RefreshListener::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ReferenceManager$RefreshListener::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ReferenceManager$RefreshListener *self = (t_ReferenceManager$RefreshListener *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ReferenceManager$RefreshListener::install(PyObject *module)
        {
          installType(&PY_TYPE(ReferenceManager$RefreshListener), module, "ReferenceManager$RefreshListener", 0);
        }

        void t_ReferenceManager$RefreshListener::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ReferenceManager$RefreshListener).tp_dict, "class_", make_descriptor(ReferenceManager$RefreshListener::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ReferenceManager$RefreshListener).tp_dict, "wrapfn_", make_descriptor(t_ReferenceManager$RefreshListener::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ReferenceManager$RefreshListener).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ReferenceManager$RefreshListener_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ReferenceManager$RefreshListener::initializeClass, 1)))
            return NULL;
          return t_ReferenceManager$RefreshListener::wrap_Object(ReferenceManager$RefreshListener(((t_ReferenceManager$RefreshListener *) arg)->object.this$));
        }
        static PyObject *t_ReferenceManager$RefreshListener_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ReferenceManager$RefreshListener::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ReferenceManager$RefreshListener_of_(t_ReferenceManager$RefreshListener *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_ReferenceManager$RefreshListener_afterRefresh(t_ReferenceManager$RefreshListener *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.afterRefresh(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "afterRefresh", arg);
          return NULL;
        }

        static PyObject *t_ReferenceManager$RefreshListener_beforeRefresh(t_ReferenceManager$RefreshListener *self)
        {
          OBJ_CALL(self->object.beforeRefresh());
          Py_RETURN_NONE;
        }
        static PyObject *t_ReferenceManager$RefreshListener_get__parameters_(t_ReferenceManager$RefreshListener *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/bg/BulgarianStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {

          ::java::lang::Class *BulgarianStemmer::class$ = NULL;
          jmethodID *BulgarianStemmer::mids$ = NULL;
          bool BulgarianStemmer::live$ = false;

          jclass BulgarianStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/bg/BulgarianStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BulgarianStemmer::BulgarianStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint BulgarianStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {
          static PyObject *t_BulgarianStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BulgarianStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BulgarianStemmer_init_(t_BulgarianStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BulgarianStemmer_stem(t_BulgarianStemmer *self, PyObject *args);

          static PyMethodDef t_BulgarianStemmer__methods_[] = {
            DECLARE_METHOD(t_BulgarianStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BulgarianStemmer, t_BulgarianStemmer, ::java::lang::Object, BulgarianStemmer, t_BulgarianStemmer_init_, 0, 0, 0, 0, 0);

          void t_BulgarianStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(BulgarianStemmer), module, "BulgarianStemmer", 0);
          }

          void t_BulgarianStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BulgarianStemmer).tp_dict, "class_", make_descriptor(BulgarianStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BulgarianStemmer).tp_dict, "wrapfn_", make_descriptor(t_BulgarianStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BulgarianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BulgarianStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BulgarianStemmer::initializeClass, 1)))
              return NULL;
            return t_BulgarianStemmer::wrap_Object(BulgarianStemmer(((t_BulgarianStemmer *) arg)->object.this$));
          }
          static PyObject *t_BulgarianStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BulgarianStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BulgarianStemmer_init_(t_BulgarianStemmer *self, PyObject *args, PyObject *kwds)
          {
            BulgarianStemmer object((jobject) NULL);

            INT_CALL(object = BulgarianStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_BulgarianStemmer_stem(t_BulgarianStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexableFieldType.h"
#include "org/apache/lucene/index/FieldInfo$IndexOptions.h"
#include "org/apache/lucene/index/FieldInfo$DocValuesType.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexableFieldType::class$ = NULL;
        jmethodID *IndexableFieldType::mids$ = NULL;
        bool IndexableFieldType::live$ = false;

        jclass IndexableFieldType::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexableFieldType");

            mids$ = new jmethodID[max_mid];
            mids$[mid_docValueType_db3dc573] = env->getMethodID(cls, "docValueType", "()Lorg/apache/lucene/index/FieldInfo$DocValuesType;");
            mids$[mid_indexOptions_e1b704de] = env->getMethodID(cls, "indexOptions", "()Lorg/apache/lucene/index/FieldInfo$IndexOptions;");
            mids$[mid_indexed_54c6a16a] = env->getMethodID(cls, "indexed", "()Z");
            mids$[mid_omitNorms_54c6a16a] = env->getMethodID(cls, "omitNorms", "()Z");
            mids$[mid_storeTermVectorOffsets_54c6a16a] = env->getMethodID(cls, "storeTermVectorOffsets", "()Z");
            mids$[mid_storeTermVectorPayloads_54c6a16a] = env->getMethodID(cls, "storeTermVectorPayloads", "()Z");
            mids$[mid_storeTermVectorPositions_54c6a16a] = env->getMethodID(cls, "storeTermVectorPositions", "()Z");
            mids$[mid_storeTermVectors_54c6a16a] = env->getMethodID(cls, "storeTermVectors", "()Z");
            mids$[mid_stored_54c6a16a] = env->getMethodID(cls, "stored", "()Z");
            mids$[mid_tokenized_54c6a16a] = env->getMethodID(cls, "tokenized", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::FieldInfo$DocValuesType IndexableFieldType::docValueType() const
        {
          return ::org::apache::lucene::index::FieldInfo$DocValuesType(env->callObjectMethod(this$, mids$[mid_docValueType_db3dc573]));
        }

        ::org::apache::lucene::index::FieldInfo$IndexOptions IndexableFieldType::indexOptions() const
        {
          return ::org::apache::lucene::index::FieldInfo$IndexOptions(env->callObjectMethod(this$, mids$[mid_indexOptions_e1b704de]));
        }

        jboolean IndexableFieldType::indexed() const
        {
          return env->callBooleanMethod(this$, mids$[mid_indexed_54c6a16a]);
        }

        jboolean IndexableFieldType::omitNorms() const
        {
          return env->callBooleanMethod(this$, mids$[mid_omitNorms_54c6a16a]);
        }

        jboolean IndexableFieldType::storeTermVectorOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectorOffsets_54c6a16a]);
        }

        jboolean IndexableFieldType::storeTermVectorPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectorPayloads_54c6a16a]);
        }

        jboolean IndexableFieldType::storeTermVectorPositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectorPositions_54c6a16a]);
        }

        jboolean IndexableFieldType::storeTermVectors() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectors_54c6a16a]);
        }

        jboolean IndexableFieldType::stored() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stored_54c6a16a]);
        }

        jboolean IndexableFieldType::tokenized() const
        {
          return env->callBooleanMethod(this$, mids$[mid_tokenized_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexableFieldType_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexableFieldType_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexableFieldType_docValueType(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_indexOptions(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_indexed(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_omitNorms(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_storeTermVectorOffsets(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_storeTermVectorPayloads(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_storeTermVectorPositions(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_storeTermVectors(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_stored(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_tokenized(t_IndexableFieldType *self);

        static PyMethodDef t_IndexableFieldType__methods_[] = {
          DECLARE_METHOD(t_IndexableFieldType, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexableFieldType, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexableFieldType, docValueType, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, indexOptions, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, indexed, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, omitNorms, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, storeTermVectorOffsets, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, storeTermVectorPayloads, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, storeTermVectorPositions, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, storeTermVectors, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, stored, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, tokenized, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexableFieldType, t_IndexableFieldType, ::java::lang::Object, IndexableFieldType, abstract_init, 0, 0, 0, 0, 0);

        void t_IndexableFieldType::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexableFieldType), module, "IndexableFieldType", 0);
        }

        void t_IndexableFieldType::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexableFieldType).tp_dict, "class_", make_descriptor(IndexableFieldType::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexableFieldType).tp_dict, "wrapfn_", make_descriptor(t_IndexableFieldType::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexableFieldType).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexableFieldType_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexableFieldType::initializeClass, 1)))
            return NULL;
          return t_IndexableFieldType::wrap_Object(IndexableFieldType(((t_IndexableFieldType *) arg)->object.this$));
        }
        static PyObject *t_IndexableFieldType_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexableFieldType::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexableFieldType_docValueType(t_IndexableFieldType *self)
        {
          ::org::apache::lucene::index::FieldInfo$DocValuesType result((jobject) NULL);
          OBJ_CALL(result = self->object.docValueType());
          return ::org::apache::lucene::index::t_FieldInfo$DocValuesType::wrap_Object(result);
        }

        static PyObject *t_IndexableFieldType_indexOptions(t_IndexableFieldType *self)
        {
          ::org::apache::lucene::index::FieldInfo$IndexOptions result((jobject) NULL);
          OBJ_CALL(result = self->object.indexOptions());
          return ::org::apache::lucene::index::t_FieldInfo$IndexOptions::wrap_Object(result);
        }

        static PyObject *t_IndexableFieldType_indexed(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.indexed());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_omitNorms(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.omitNorms());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_storeTermVectorOffsets(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectorOffsets());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_storeTermVectorPayloads(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectorPayloads());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_storeTermVectorPositions(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectorPositions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_storeTermVectors(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectors());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_stored(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.stored());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_tokenized(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.tokenized());
          Py_RETURN_BOOL(result);
        }
      }
    }
  }
}
