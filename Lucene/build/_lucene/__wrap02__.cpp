#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiNormalizationFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiNormalizationFilterFactory::class$ = NULL;
          jmethodID *HindiNormalizationFilterFactory::mids$ = NULL;
          bool HindiNormalizationFilterFactory::live$ = false;

          jclass HindiNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiNormalizationFilterFactory::HindiNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream HindiNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory HindiNormalizationFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiNormalizationFilterFactory_init_(t_HindiNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiNormalizationFilterFactory_create(t_HindiNormalizationFilterFactory *self, PyObject *args);
          static PyObject *t_HindiNormalizationFilterFactory_getMultiTermComponent(t_HindiNormalizationFilterFactory *self);
          static PyObject *t_HindiNormalizationFilterFactory_get__multiTermComponent(t_HindiNormalizationFilterFactory *self, void *data);
          static PyGetSetDef t_HindiNormalizationFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_HindiNormalizationFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_HindiNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HindiNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiNormalizationFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_HindiNormalizationFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HindiNormalizationFilterFactory, t_HindiNormalizationFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, HindiNormalizationFilterFactory, t_HindiNormalizationFilterFactory_init_, 0, 0, t_HindiNormalizationFilterFactory__fields_, 0, 0);

          void t_HindiNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiNormalizationFilterFactory), module, "HindiNormalizationFilterFactory", 0);
          }

          void t_HindiNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HindiNormalizationFilterFactory).tp_dict, "class_", make_descriptor(HindiNormalizationFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HindiNormalizationFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_HindiNormalizationFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HindiNormalizationFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HindiNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HindiNormalizationFilterFactory::wrap_Object(HindiNormalizationFilterFactory(((t_HindiNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HindiNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiNormalizationFilterFactory_init_(t_HindiNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HindiNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HindiNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HindiNormalizationFilterFactory_create(t_HindiNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(HindiNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_HindiNormalizationFilterFactory_getMultiTermComponent(t_HindiNormalizationFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_HindiNormalizationFilterFactory_get__multiTermComponent(t_HindiNormalizationFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternReplaceFilterFactory.h"
#include "org/apache/lucene/analysis/pattern/PatternReplaceFilter.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternReplaceFilterFactory::class$ = NULL;
          jmethodID *PatternReplaceFilterFactory::mids$ = NULL;
          bool PatternReplaceFilterFactory::live$ = false;

          jclass PatternReplaceFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternReplaceFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_d0c93252] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/pattern/PatternReplaceFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternReplaceFilterFactory::PatternReplaceFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::pattern::PatternReplaceFilter PatternReplaceFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::pattern::PatternReplaceFilter(env->callObjectMethod(this$, mids$[mid_create_d0c93252], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternReplaceFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternReplaceFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternReplaceFilterFactory_init_(t_PatternReplaceFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternReplaceFilterFactory_create(t_PatternReplaceFilterFactory *self, PyObject *args);

          static PyMethodDef t_PatternReplaceFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PatternReplaceFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternReplaceFilterFactory, t_PatternReplaceFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, PatternReplaceFilterFactory, t_PatternReplaceFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_PatternReplaceFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternReplaceFilterFactory), module, "PatternReplaceFilterFactory", 0);
          }

          void t_PatternReplaceFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternReplaceFilterFactory).tp_dict, "class_", make_descriptor(PatternReplaceFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternReplaceFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PatternReplaceFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternReplaceFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternReplaceFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternReplaceFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PatternReplaceFilterFactory::wrap_Object(PatternReplaceFilterFactory(((t_PatternReplaceFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PatternReplaceFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternReplaceFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternReplaceFilterFactory_init_(t_PatternReplaceFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PatternReplaceFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PatternReplaceFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternReplaceFilterFactory_create(t_PatternReplaceFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::pattern::PatternReplaceFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::pattern::t_PatternReplaceFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PatternReplaceFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/LongValues.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *LongValues::class$ = NULL;
        jmethodID *LongValues::mids$ = NULL;
        bool LongValues::live$ = false;
        LongValues *LongValues::IDENTITY = NULL;

        jclass LongValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/LongValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_get_0ee6df33] = env->getMethodID(cls, "get", "(J)J");
            mids$[mid_get_39c7bd20] = env->getMethodID(cls, "get", "(I)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            IDENTITY = new LongValues(env->getStaticObjectField(cls, "IDENTITY", "Lorg/apache/lucene/util/LongValues;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LongValues::LongValues() : ::org::apache::lucene::index::NumericDocValues(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jlong LongValues::get(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_get_0ee6df33], a0);
        }

        jlong LongValues::get(jint a0) const
        {
          return env->callLongMethod(this$, mids$[mid_get_39c7bd20], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_LongValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongValues_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LongValues_init_(t_LongValues *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LongValues_get(t_LongValues *self, PyObject *args);

        static PyMethodDef t_LongValues__methods_[] = {
          DECLARE_METHOD(t_LongValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongValues, get, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LongValues, t_LongValues, ::org::apache::lucene::index::NumericDocValues, LongValues, t_LongValues_init_, 0, 0, 0, 0, 0);

        void t_LongValues::install(PyObject *module)
        {
          installType(&PY_TYPE(LongValues), module, "LongValues", 0);
        }

        void t_LongValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LongValues).tp_dict, "class_", make_descriptor(LongValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LongValues).tp_dict, "wrapfn_", make_descriptor(t_LongValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LongValues).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(LongValues::initializeClass);
          PyDict_SetItemString(PY_TYPE(LongValues).tp_dict, "IDENTITY", make_descriptor(t_LongValues::wrap_Object(*LongValues::IDENTITY)));
        }

        static PyObject *t_LongValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LongValues::initializeClass, 1)))
            return NULL;
          return t_LongValues::wrap_Object(LongValues(((t_LongValues *) arg)->object.this$));
        }
        static PyObject *t_LongValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LongValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LongValues_init_(t_LongValues *self, PyObject *args, PyObject *kwds)
        {
          LongValues object((jobject) NULL);

          INT_CALL(object = LongValues());
          self->object = object;

          return 0;
        }

        static PyObject *t_LongValues_get(t_LongValues *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              jint a0;
              jlong result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          return callSuper(&PY_TYPE(LongValues), (PyObject *) self, "get", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocsAndPositionsEnum.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/MultiDocsAndPositionsEnum$EnumWithSlice.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/MultiTermsEnum.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocsAndPositionsEnum::class$ = NULL;
        jmethodID *MultiDocsAndPositionsEnum::mids$ = NULL;
        bool MultiDocsAndPositionsEnum::live$ = false;

        jclass MultiDocsAndPositionsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocsAndPositionsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7d44bb06] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/MultiTermsEnum;I)V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_canReuse_4fe73d2c] = env->getMethodID(cls, "canReuse", "(Lorg/apache/lucene/index/MultiTermsEnum;)Z");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_endOffset_54c6a179] = env->getMethodID(cls, "endOffset", "()I");
            mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
            mids$[mid_getNumSubs_54c6a179] = env->getMethodID(cls, "getNumSubs", "()I");
            mids$[mid_getPayload_4ae19461] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getSubs_451af4aa] = env->getMethodID(cls, "getSubs", "()[Lorg/apache/lucene/index/MultiDocsAndPositionsEnum$EnumWithSlice;");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_nextPosition_54c6a179] = env->getMethodID(cls, "nextPosition", "()I");
            mids$[mid_reset_7ce62fbc] = env->getMethodID(cls, "reset", "([Lorg/apache/lucene/index/MultiDocsAndPositionsEnum$EnumWithSlice;I)Lorg/apache/lucene/index/MultiDocsAndPositionsEnum;");
            mids$[mid_startOffset_54c6a179] = env->getMethodID(cls, "startOffset", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiDocsAndPositionsEnum::MultiDocsAndPositionsEnum(const ::org::apache::lucene::index::MultiTermsEnum & a0, jint a1) : ::org::apache::lucene::index::DocsAndPositionsEnum(env->newObject(initializeClass, &mids$, mid_init$_7d44bb06, a0.this$, a1)) {}

        jint MultiDocsAndPositionsEnum::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        jboolean MultiDocsAndPositionsEnum::canReuse(const ::org::apache::lucene::index::MultiTermsEnum & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_canReuse_4fe73d2c], a0.this$);
        }

        jlong MultiDocsAndPositionsEnum::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint MultiDocsAndPositionsEnum::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint MultiDocsAndPositionsEnum::endOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_endOffset_54c6a179]);
        }

        jint MultiDocsAndPositionsEnum::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
        }

        jint MultiDocsAndPositionsEnum::getNumSubs() const
        {
          return env->callIntMethod(this$, mids$[mid_getNumSubs_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef MultiDocsAndPositionsEnum::getPayload() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_4ae19461]));
        }

        JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice > MultiDocsAndPositionsEnum::getSubs() const
        {
          return JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice >(env->callObjectMethod(this$, mids$[mid_getSubs_451af4aa]));
        }

        jint MultiDocsAndPositionsEnum::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }

        jint MultiDocsAndPositionsEnum::nextPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_nextPosition_54c6a179]);
        }

        MultiDocsAndPositionsEnum MultiDocsAndPositionsEnum::reset(const JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice > & a0, jint a1) const
        {
          return MultiDocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_reset_7ce62fbc], a0.this$, a1));
        }

        jint MultiDocsAndPositionsEnum::startOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_startOffset_54c6a179]);
        }

        ::java::lang::String MultiDocsAndPositionsEnum::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocsAndPositionsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocsAndPositionsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiDocsAndPositionsEnum_init_(t_MultiDocsAndPositionsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiDocsAndPositionsEnum_advance(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_canReuse(t_MultiDocsAndPositionsEnum *self, PyObject *arg);
        static PyObject *t_MultiDocsAndPositionsEnum_cost(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_docID(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_endOffset(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_freq(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_getNumSubs(t_MultiDocsAndPositionsEnum *self);
        static PyObject *t_MultiDocsAndPositionsEnum_getPayload(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_getSubs(t_MultiDocsAndPositionsEnum *self);
        static PyObject *t_MultiDocsAndPositionsEnum_nextDoc(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_nextPosition(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_reset(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_startOffset(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_toString(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_get__numSubs(t_MultiDocsAndPositionsEnum *self, void *data);
        static PyObject *t_MultiDocsAndPositionsEnum_get__payload(t_MultiDocsAndPositionsEnum *self, void *data);
        static PyObject *t_MultiDocsAndPositionsEnum_get__subs(t_MultiDocsAndPositionsEnum *self, void *data);
        static PyGetSetDef t_MultiDocsAndPositionsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_MultiDocsAndPositionsEnum, numSubs),
          DECLARE_GET_FIELD(t_MultiDocsAndPositionsEnum, payload),
          DECLARE_GET_FIELD(t_MultiDocsAndPositionsEnum, subs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiDocsAndPositionsEnum__methods_[] = {
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, advance, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, canReuse, METH_O),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, cost, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, docID, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, endOffset, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, freq, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, getNumSubs, METH_NOARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, getPayload, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, getSubs, METH_NOARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, nextPosition, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, reset, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, startOffset, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiDocsAndPositionsEnum, t_MultiDocsAndPositionsEnum, ::org::apache::lucene::index::DocsAndPositionsEnum, MultiDocsAndPositionsEnum, t_MultiDocsAndPositionsEnum_init_, 0, 0, t_MultiDocsAndPositionsEnum__fields_, 0, 0);

        void t_MultiDocsAndPositionsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocsAndPositionsEnum), module, "MultiDocsAndPositionsEnum", 0);
          PyDict_SetItemString(PY_TYPE(MultiDocsAndPositionsEnum).tp_dict, "EnumWithSlice", make_descriptor(&PY_TYPE(MultiDocsAndPositionsEnum$EnumWithSlice)));
        }

        void t_MultiDocsAndPositionsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiDocsAndPositionsEnum).tp_dict, "class_", make_descriptor(MultiDocsAndPositionsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiDocsAndPositionsEnum).tp_dict, "wrapfn_", make_descriptor(t_MultiDocsAndPositionsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiDocsAndPositionsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocsAndPositionsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocsAndPositionsEnum::initializeClass, 1)))
            return NULL;
          return t_MultiDocsAndPositionsEnum::wrap_Object(MultiDocsAndPositionsEnum(((t_MultiDocsAndPositionsEnum *) arg)->object.this$));
        }
        static PyObject *t_MultiDocsAndPositionsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocsAndPositionsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiDocsAndPositionsEnum_init_(t_MultiDocsAndPositionsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::MultiTermsEnum a0((jobject) NULL);
          jint a1;
          MultiDocsAndPositionsEnum object((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::MultiTermsEnum::initializeClass, &a0, &a1))
          {
            INT_CALL(object = MultiDocsAndPositionsEnum(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiDocsAndPositionsEnum_advance(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_canReuse(t_MultiDocsAndPositionsEnum *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MultiTermsEnum a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MultiTermsEnum::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.canReuse(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "canReuse", arg);
          return NULL;
        }

        static PyObject *t_MultiDocsAndPositionsEnum_cost(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_docID(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_endOffset(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.endOffset());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "endOffset", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_freq(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.freq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "freq", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_getNumSubs(t_MultiDocsAndPositionsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getNumSubs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_getPayload(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "getPayload", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_getSubs(t_MultiDocsAndPositionsEnum *self)
        {
          JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice > result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubs());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_MultiDocsAndPositionsEnum$EnumWithSlice::wrap_jobject);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_nextDoc(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_nextPosition(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextPosition());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "nextPosition", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_reset(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice > a0((jobject) NULL);
          jint a1;
          MultiDocsAndPositionsEnum result((jobject) NULL);

          if (!parseArgs(args, "[kI", ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.reset(a0, a1));
            return t_MultiDocsAndPositionsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "reset", args);
          return NULL;
        }

        static PyObject *t_MultiDocsAndPositionsEnum_startOffset(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.startOffset());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "startOffset", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_toString(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_get__numSubs(t_MultiDocsAndPositionsEnum *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getNumSubs());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_get__payload(t_MultiDocsAndPositionsEnum *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getPayload());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_get__subs(t_MultiDocsAndPositionsEnum *self, void *data)
        {
          JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice > value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubs());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_MultiDocsAndPositionsEnum$EnumWithSlice::wrap_jobject);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *SuggestWord::class$ = NULL;
          jmethodID *SuggestWord::mids$ = NULL;
          jfieldID *SuggestWord::fids$ = NULL;
          bool SuggestWord::live$ = false;

          jclass SuggestWord::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/SuggestWord");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_freq] = env->getFieldID(cls, "freq", "I");
              fids$[fid_score] = env->getFieldID(cls, "score", "F");
              fids$[fid_string] = env->getFieldID(cls, "string", "Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SuggestWord::SuggestWord() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint SuggestWord::_get_freq() const
          {
            return env->getIntField(this$, fids$[fid_freq]);
          }

          void SuggestWord::_set_freq(jint a0) const
          {
            env->setIntField(this$, fids$[fid_freq], a0);
          }

          jfloat SuggestWord::_get_score() const
          {
            return env->getFloatField(this$, fids$[fid_score]);
          }

          void SuggestWord::_set_score(jfloat a0) const
          {
            env->setFloatField(this$, fids$[fid_score], a0);
          }

          ::java::lang::String SuggestWord::_get_string() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_string]));
          }

          void SuggestWord::_set_string(const ::java::lang::String & a0) const
          {
            env->setObjectField(this$, fids$[fid_string], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_SuggestWord_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestWord_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SuggestWord_init_(t_SuggestWord *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SuggestWord_get__freq(t_SuggestWord *self, void *data);
          static int t_SuggestWord_set__freq(t_SuggestWord *self, PyObject *arg, void *data);
          static PyObject *t_SuggestWord_get__score(t_SuggestWord *self, void *data);
          static int t_SuggestWord_set__score(t_SuggestWord *self, PyObject *arg, void *data);
          static PyObject *t_SuggestWord_get__string(t_SuggestWord *self, void *data);
          static int t_SuggestWord_set__string(t_SuggestWord *self, PyObject *arg, void *data);

          static PyGetSetDef t_SuggestWord__fields_[] = {
            DECLARE_GETSET_FIELD(t_SuggestWord, freq),
            DECLARE_GETSET_FIELD(t_SuggestWord, score),
            DECLARE_GETSET_FIELD(t_SuggestWord, string),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SuggestWord__methods_[] = {
            DECLARE_METHOD(t_SuggestWord, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWord, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SuggestWord, t_SuggestWord, ::java::lang::Object, SuggestWord, t_SuggestWord_init_, 0, 0, t_SuggestWord__fields_, 0, 0);

          void t_SuggestWord::install(PyObject *module)
          {
            installType(&PY_TYPE(SuggestWord), module, "SuggestWord", 0);
          }

          void t_SuggestWord::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SuggestWord).tp_dict, "class_", make_descriptor(SuggestWord::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SuggestWord).tp_dict, "wrapfn_", make_descriptor(t_SuggestWord::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SuggestWord).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SuggestWord_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SuggestWord::initializeClass, 1)))
              return NULL;
            return t_SuggestWord::wrap_Object(SuggestWord(((t_SuggestWord *) arg)->object.this$));
          }
          static PyObject *t_SuggestWord_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SuggestWord::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SuggestWord_init_(t_SuggestWord *self, PyObject *args, PyObject *kwds)
          {
            SuggestWord object((jobject) NULL);

            INT_CALL(object = SuggestWord());
            self->object = object;

            return 0;
          }

          static PyObject *t_SuggestWord_get__freq(t_SuggestWord *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_freq());
            return PyInt_FromLong((long) value);
          }
          static int t_SuggestWord_set__freq(t_SuggestWord *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_freq(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "freq", arg);
            return -1;
          }

          static PyObject *t_SuggestWord_get__score(t_SuggestWord *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object._get_score());
            return PyFloat_FromDouble((double) value);
          }
          static int t_SuggestWord_set__score(t_SuggestWord *self, PyObject *arg, void *data)
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object._set_score(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "score", arg);
            return -1;
          }

          static PyObject *t_SuggestWord_get__string(t_SuggestWord *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_string());
            return j2p(value);
          }
          static int t_SuggestWord_set__string(t_SuggestWord *self, PyObject *arg, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            if (!parseArg(arg, "s", &value))
            {
              INT_CALL(self->object._set_string(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "string", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/SuggestMode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *SuggestMode::class$ = NULL;
          jmethodID *SuggestMode::mids$ = NULL;
          bool SuggestMode::live$ = false;
          SuggestMode *SuggestMode::SUGGEST_ALWAYS = NULL;
          SuggestMode *SuggestMode::SUGGEST_MORE_POPULAR = NULL;
          SuggestMode *SuggestMode::SUGGEST_WHEN_NOT_IN_INDEX = NULL;

          jclass SuggestMode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/SuggestMode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_ca4a62d8] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/spell/SuggestMode;");
              mids$[mid_values_1d9d8b36] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/spell/SuggestMode;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              SUGGEST_ALWAYS = new SuggestMode(env->getStaticObjectField(cls, "SUGGEST_ALWAYS", "Lorg/apache/lucene/search/spell/SuggestMode;"));
              SUGGEST_MORE_POPULAR = new SuggestMode(env->getStaticObjectField(cls, "SUGGEST_MORE_POPULAR", "Lorg/apache/lucene/search/spell/SuggestMode;"));
              SUGGEST_WHEN_NOT_IN_INDEX = new SuggestMode(env->getStaticObjectField(cls, "SUGGEST_WHEN_NOT_IN_INDEX", "Lorg/apache/lucene/search/spell/SuggestMode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SuggestMode SuggestMode::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return SuggestMode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ca4a62d8], a0.this$));
          }

          JArray< SuggestMode > SuggestMode::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< SuggestMode >(env->callStaticObjectMethod(cls, mids$[mid_values_1d9d8b36]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_SuggestMode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestMode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestMode_of_(t_SuggestMode *self, PyObject *args);
          static PyObject *t_SuggestMode_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_SuggestMode_values(PyTypeObject *type);
          static PyObject *t_SuggestMode_get__parameters_(t_SuggestMode *self, void *data);
          static PyGetSetDef t_SuggestMode__fields_[] = {
            DECLARE_GET_FIELD(t_SuggestMode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SuggestMode__methods_[] = {
            DECLARE_METHOD(t_SuggestMode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestMode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestMode, of_, METH_VARARGS),
            DECLARE_METHOD(t_SuggestMode, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SuggestMode, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SuggestMode, t_SuggestMode, ::java::lang::Enum, SuggestMode, abstract_init, 0, 0, t_SuggestMode__fields_, 0, 0);
          PyObject *t_SuggestMode::wrap_Object(const SuggestMode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SuggestMode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SuggestMode *self = (t_SuggestMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SuggestMode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SuggestMode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SuggestMode *self = (t_SuggestMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SuggestMode::install(PyObject *module)
          {
            installType(&PY_TYPE(SuggestMode), module, "SuggestMode", 0);
          }

          void t_SuggestMode::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SuggestMode).tp_dict, "class_", make_descriptor(SuggestMode::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SuggestMode).tp_dict, "wrapfn_", make_descriptor(t_SuggestMode::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SuggestMode).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SuggestMode::initializeClass);
            PyDict_SetItemString(PY_TYPE(SuggestMode).tp_dict, "SUGGEST_ALWAYS", make_descriptor(t_SuggestMode::wrap_Object(*SuggestMode::SUGGEST_ALWAYS)));
            PyDict_SetItemString(PY_TYPE(SuggestMode).tp_dict, "SUGGEST_MORE_POPULAR", make_descriptor(t_SuggestMode::wrap_Object(*SuggestMode::SUGGEST_MORE_POPULAR)));
            PyDict_SetItemString(PY_TYPE(SuggestMode).tp_dict, "SUGGEST_WHEN_NOT_IN_INDEX", make_descriptor(t_SuggestMode::wrap_Object(*SuggestMode::SUGGEST_WHEN_NOT_IN_INDEX)));
          }

          static PyObject *t_SuggestMode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SuggestMode::initializeClass, 1)))
              return NULL;
            return t_SuggestMode::wrap_Object(SuggestMode(((t_SuggestMode *) arg)->object.this$));
          }
          static PyObject *t_SuggestMode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SuggestMode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SuggestMode_of_(t_SuggestMode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_SuggestMode_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            SuggestMode result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::spell::SuggestMode::valueOf(a0));
              return t_SuggestMode::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_SuggestMode_values(PyTypeObject *type)
          {
            JArray< SuggestMode > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::search::spell::SuggestMode::values());
            return JArray<jobject>(result.this$).wrap(t_SuggestMode::wrap_jobject);
          }
          static PyObject *t_SuggestMode_get__parameters_(t_SuggestMode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ga/IrishAnalyzer.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ga {

          ::java::lang::Class *IrishAnalyzer::class$ = NULL;
          jmethodID *IrishAnalyzer::mids$ = NULL;
          bool IrishAnalyzer::live$ = false;
          ::java::lang::String *IrishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass IrishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ga/IrishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_3ea629c6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IrishAnalyzer::IrishAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          IrishAnalyzer::IrishAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          IrishAnalyzer::IrishAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          IrishAnalyzer::IrishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          IrishAnalyzer::IrishAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_3ea629c6, a0.this$, a1.this$)) {}

          IrishAnalyzer::IrishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet IrishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ga {
          static PyObject *t_IrishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IrishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IrishAnalyzer_init_(t_IrishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IrishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_IrishAnalyzer_get__defaultStopSet(t_IrishAnalyzer *self, void *data);
          static PyGetSetDef t_IrishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_IrishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IrishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_IrishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IrishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IrishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IrishAnalyzer, t_IrishAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, IrishAnalyzer, t_IrishAnalyzer_init_, 0, 0, t_IrishAnalyzer__fields_, 0, 0);

          void t_IrishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(IrishAnalyzer), module, "IrishAnalyzer", 0);
          }

          void t_IrishAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IrishAnalyzer).tp_dict, "class_", make_descriptor(IrishAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IrishAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_IrishAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IrishAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(IrishAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(IrishAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*IrishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_IrishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IrishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_IrishAnalyzer::wrap_Object(IrishAnalyzer(((t_IrishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_IrishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IrishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IrishAnalyzer_init_(t_IrishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                IrishAnalyzer object((jobject) NULL);

                INT_CALL(object = IrishAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                IrishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = IrishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                IrishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = IrishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                IrishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = IrishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                IrishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = IrishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                IrishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = IrishAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IrishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ga::IrishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_IrishAnalyzer_get__defaultStopSet(t_IrishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/postingshighlight/PassageFormatter.h"
#include "org/apache/lucene/search/postingshighlight/Passage.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {

          ::java::lang::Class *PassageFormatter::class$ = NULL;
          jmethodID *PassageFormatter::mids$ = NULL;
          bool PassageFormatter::live$ = false;

          jclass PassageFormatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/postingshighlight/PassageFormatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_format_2ef5b250] = env->getMethodID(cls, "format", "([Lorg/apache/lucene/search/postingshighlight/Passage;Ljava/lang/String;)Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PassageFormatter::PassageFormatter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::java::lang::Object PassageFormatter::format(const JArray< ::org::apache::lucene::search::postingshighlight::Passage > & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_format_2ef5b250], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {
          static PyObject *t_PassageFormatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PassageFormatter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PassageFormatter_init_(t_PassageFormatter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PassageFormatter_format(t_PassageFormatter *self, PyObject *args);

          static PyMethodDef t_PassageFormatter__methods_[] = {
            DECLARE_METHOD(t_PassageFormatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PassageFormatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PassageFormatter, format, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PassageFormatter, t_PassageFormatter, ::java::lang::Object, PassageFormatter, t_PassageFormatter_init_, 0, 0, 0, 0, 0);

          void t_PassageFormatter::install(PyObject *module)
          {
            installType(&PY_TYPE(PassageFormatter), module, "PassageFormatter", 0);
          }

          void t_PassageFormatter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PassageFormatter).tp_dict, "class_", make_descriptor(PassageFormatter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PassageFormatter).tp_dict, "wrapfn_", make_descriptor(t_PassageFormatter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PassageFormatter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PassageFormatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PassageFormatter::initializeClass, 1)))
              return NULL;
            return t_PassageFormatter::wrap_Object(PassageFormatter(((t_PassageFormatter *) arg)->object.this$));
          }
          static PyObject *t_PassageFormatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PassageFormatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PassageFormatter_init_(t_PassageFormatter *self, PyObject *args, PyObject *kwds)
          {
            PassageFormatter object((jobject) NULL);

            INT_CALL(object = PassageFormatter());
            self->object = object;

            return 0;
          }

          static PyObject *t_PassageFormatter_format(t_PassageFormatter *self, PyObject *args)
          {
            JArray< ::org::apache::lucene::search::postingshighlight::Passage > a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "[ks", ::org::apache::lucene::search::postingshighlight::Passage::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.format(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "format", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ReaderSlice.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ReaderSlice::class$ = NULL;
        jmethodID *ReaderSlice::mids$ = NULL;
        jfieldID *ReaderSlice::fids$ = NULL;
        bool ReaderSlice::live$ = false;
        JArray< ReaderSlice > *ReaderSlice::EMPTY_ARRAY = NULL;

        jclass ReaderSlice::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ReaderSlice");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d3236aa4] = env->getMethodID(cls, "<init>", "(III)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_length] = env->getFieldID(cls, "length", "I");
            fids$[fid_readerIndex] = env->getFieldID(cls, "readerIndex", "I");
            fids$[fid_start] = env->getFieldID(cls, "start", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY_ARRAY = new JArray< ReaderSlice >(env->getStaticObjectField(cls, "EMPTY_ARRAY", "[Lorg/apache/lucene/index/ReaderSlice;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ReaderSlice::ReaderSlice(jint a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d3236aa4, a0, a1, a2)) {}

        ::java::lang::String ReaderSlice::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jint ReaderSlice::_get_length() const
        {
          return env->getIntField(this$, fids$[fid_length]);
        }

        jint ReaderSlice::_get_readerIndex() const
        {
          return env->getIntField(this$, fids$[fid_readerIndex]);
        }

        jint ReaderSlice::_get_start() const
        {
          return env->getIntField(this$, fids$[fid_start]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ReaderSlice_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReaderSlice_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ReaderSlice_init_(t_ReaderSlice *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ReaderSlice_toString(t_ReaderSlice *self, PyObject *args);
        static PyObject *t_ReaderSlice_get__length(t_ReaderSlice *self, void *data);
        static PyObject *t_ReaderSlice_get__readerIndex(t_ReaderSlice *self, void *data);
        static PyObject *t_ReaderSlice_get__start(t_ReaderSlice *self, void *data);

        static PyGetSetDef t_ReaderSlice__fields_[] = {
          DECLARE_GET_FIELD(t_ReaderSlice, length),
          DECLARE_GET_FIELD(t_ReaderSlice, readerIndex),
          DECLARE_GET_FIELD(t_ReaderSlice, start),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ReaderSlice__methods_[] = {
          DECLARE_METHOD(t_ReaderSlice, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderSlice, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderSlice, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ReaderSlice, t_ReaderSlice, ::java::lang::Object, ReaderSlice, t_ReaderSlice_init_, 0, 0, t_ReaderSlice__fields_, 0, 0);

        void t_ReaderSlice::install(PyObject *module)
        {
          installType(&PY_TYPE(ReaderSlice), module, "ReaderSlice", 0);
        }

        void t_ReaderSlice::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ReaderSlice).tp_dict, "class_", make_descriptor(ReaderSlice::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ReaderSlice).tp_dict, "wrapfn_", make_descriptor(t_ReaderSlice::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ReaderSlice).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(ReaderSlice::initializeClass);
          PyDict_SetItemString(PY_TYPE(ReaderSlice).tp_dict, "EMPTY_ARRAY", make_descriptor(JArray<jobject>(ReaderSlice::EMPTY_ARRAY->this$).wrap(t_ReaderSlice::wrap_jobject)));
        }

        static PyObject *t_ReaderSlice_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ReaderSlice::initializeClass, 1)))
            return NULL;
          return t_ReaderSlice::wrap_Object(ReaderSlice(((t_ReaderSlice *) arg)->object.this$));
        }
        static PyObject *t_ReaderSlice_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ReaderSlice::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ReaderSlice_init_(t_ReaderSlice *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          jint a1;
          jint a2;
          ReaderSlice object((jobject) NULL);

          if (!parseArgs(args, "III", &a0, &a1, &a2))
          {
            INT_CALL(object = ReaderSlice(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ReaderSlice_toString(t_ReaderSlice *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(ReaderSlice), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_ReaderSlice_get__length(t_ReaderSlice *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_length());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_ReaderSlice_get__readerIndex(t_ReaderSlice *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_readerIndex());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_ReaderSlice_get__start(t_ReaderSlice *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_start());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/messages/NLSException.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "java/util/Locale.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {

            ::java::lang::Class *QueryNodeException::class$ = NULL;
            jmethodID *QueryNodeException::mids$ = NULL;
            bool QueryNodeException::live$ = false;

            jclass QueryNodeException::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/QueryNodeException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
                mids$[mid_init$_1dde9d59] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;)V");
                mids$[mid_init$_41dcc0ed] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;Ljava/lang/Throwable;)V");
                mids$[mid_getLocalizedMessage_14c7b5c5] = env->getMethodID(cls, "getLocalizedMessage", "()Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_c0fb304e] = env->getMethodID(cls, "getLocalizedMessage", "(Ljava/util/Locale;)Ljava/lang/String;");
                mids$[mid_getMessage_14c7b5c5] = env->getMethodID(cls, "getMessage", "()Ljava/lang/String;");
                mids$[mid_getMessageObject_1bceed44] = env->getMethodID(cls, "getMessageObject", "()Lorg/apache/lucene/queryparser/flexible/messages/Message;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryNodeException::QueryNodeException(const ::java::lang::Throwable & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

            QueryNodeException::QueryNodeException(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_1dde9d59, a0.this$)) {}

            QueryNodeException::QueryNodeException(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0, const ::java::lang::Throwable & a1) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_41dcc0ed, a0.this$, a1.this$)) {}

            ::java::lang::String QueryNodeException::getLocalizedMessage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_14c7b5c5]));
            }

            ::java::lang::String QueryNodeException::getLocalizedMessage(const ::java::util::Locale & a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_c0fb304e], a0.this$));
            }

            ::java::lang::String QueryNodeException::getMessage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMessage_14c7b5c5]));
            }

            ::org::apache::lucene::queryparser::flexible::messages::Message QueryNodeException::getMessageObject() const
            {
              return ::org::apache::lucene::queryparser::flexible::messages::Message(env->callObjectMethod(this$, mids$[mid_getMessageObject_1bceed44]));
            }

            ::java::lang::String QueryNodeException::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            static PyObject *t_QueryNodeException_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryNodeException_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryNodeException_init_(t_QueryNodeException *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryNodeException_getLocalizedMessage(t_QueryNodeException *self, PyObject *args);
            static PyObject *t_QueryNodeException_getMessage(t_QueryNodeException *self, PyObject *args);
            static PyObject *t_QueryNodeException_getMessageObject(t_QueryNodeException *self);
            static PyObject *t_QueryNodeException_toString(t_QueryNodeException *self, PyObject *args);
            static PyObject *t_QueryNodeException_get__localizedMessage(t_QueryNodeException *self, void *data);
            static PyObject *t_QueryNodeException_get__message(t_QueryNodeException *self, void *data);
            static PyObject *t_QueryNodeException_get__messageObject(t_QueryNodeException *self, void *data);
            static PyGetSetDef t_QueryNodeException__fields_[] = {
              DECLARE_GET_FIELD(t_QueryNodeException, localizedMessage),
              DECLARE_GET_FIELD(t_QueryNodeException, message),
              DECLARE_GET_FIELD(t_QueryNodeException, messageObject),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryNodeException__methods_[] = {
              DECLARE_METHOD(t_QueryNodeException, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryNodeException, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryNodeException, getLocalizedMessage, METH_VARARGS),
              DECLARE_METHOD(t_QueryNodeException, getMessage, METH_VARARGS),
              DECLARE_METHOD(t_QueryNodeException, getMessageObject, METH_NOARGS),
              DECLARE_METHOD(t_QueryNodeException, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryNodeException, t_QueryNodeException, ::java::lang::Exception, QueryNodeException, t_QueryNodeException_init_, 0, 0, t_QueryNodeException__fields_, 0, 0);

            void t_QueryNodeException::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryNodeException), module, "QueryNodeException", 0);
            }

            void t_QueryNodeException::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryNodeException).tp_dict, "class_", make_descriptor(QueryNodeException::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryNodeException).tp_dict, "wrapfn_", make_descriptor(t_QueryNodeException::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryNodeException).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryNodeException_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryNodeException::initializeClass, 1)))
                return NULL;
              return t_QueryNodeException::wrap_Object(QueryNodeException(((t_QueryNodeException *) arg)->object.this$));
            }
            static PyObject *t_QueryNodeException_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryNodeException::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryNodeException_init_(t_QueryNodeException *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::Throwable a0((jobject) NULL);
                  QueryNodeException object((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryNodeException(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                  QueryNodeException object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryNodeException(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                  ::java::lang::Throwable a1((jobject) NULL);
                  QueryNodeException object((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, ::java::lang::Throwable::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = QueryNodeException(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryNodeException_getLocalizedMessage(t_QueryNodeException *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  ::java::lang::String result((jobject) NULL);
                  OBJ_CALL(result = self->object.getLocalizedMessage());
                  return j2p(result);
                }
                break;
               case 1:
                {
                  ::java::util::Locale a0((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
                  {
                    OBJ_CALL(result = self->object.getLocalizedMessage(a0));
                    return j2p(result);
                  }
                }
              }

              return callSuper(&PY_TYPE(QueryNodeException), (PyObject *) self, "getLocalizedMessage", args, 2);
            }

            static PyObject *t_QueryNodeException_getMessage(t_QueryNodeException *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getMessage());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(QueryNodeException), (PyObject *) self, "getMessage", args, 2);
            }

            static PyObject *t_QueryNodeException_getMessageObject(t_QueryNodeException *self)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message result((jobject) NULL);
              OBJ_CALL(result = self->object.getMessageObject());
              return ::org::apache::lucene::queryparser::flexible::messages::t_Message::wrap_Object(result);
            }

            static PyObject *t_QueryNodeException_toString(t_QueryNodeException *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(QueryNodeException), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_QueryNodeException_get__localizedMessage(t_QueryNodeException *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getLocalizedMessage());
              return j2p(value);
            }

            static PyObject *t_QueryNodeException_get__message(t_QueryNodeException *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getMessage());
              return j2p(value);
            }

            static PyObject *t_QueryNodeException_get__messageObject(t_QueryNodeException *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message value((jobject) NULL);
              OBJ_CALL(value = self->object.getMessageObject());
              return ::org::apache::lucene::queryparser::flexible::messages::t_Message::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/RomanianStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *RomanianStemmer::class$ = NULL;
        jmethodID *RomanianStemmer::mids$ = NULL;
        bool RomanianStemmer::live$ = false;

        jclass RomanianStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/RomanianStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RomanianStemmer::RomanianStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean RomanianStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint RomanianStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean RomanianStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_RomanianStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RomanianStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RomanianStemmer_init_(t_RomanianStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RomanianStemmer_equals(t_RomanianStemmer *self, PyObject *args);
        static PyObject *t_RomanianStemmer_hashCode(t_RomanianStemmer *self, PyObject *args);
        static PyObject *t_RomanianStemmer_stem(t_RomanianStemmer *self, PyObject *args);

        static PyMethodDef t_RomanianStemmer__methods_[] = {
          DECLARE_METHOD(t_RomanianStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RomanianStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RomanianStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_RomanianStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_RomanianStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RomanianStemmer, t_RomanianStemmer, ::org::tartarus::snowball::SnowballProgram, RomanianStemmer, t_RomanianStemmer_init_, 0, 0, 0, 0, 0);

        void t_RomanianStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(RomanianStemmer), module, "RomanianStemmer", 0);
        }

        void t_RomanianStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RomanianStemmer).tp_dict, "class_", make_descriptor(RomanianStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RomanianStemmer).tp_dict, "wrapfn_", make_descriptor(t_RomanianStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RomanianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RomanianStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RomanianStemmer::initializeClass, 1)))
            return NULL;
          return t_RomanianStemmer::wrap_Object(RomanianStemmer(((t_RomanianStemmer *) arg)->object.this$));
        }
        static PyObject *t_RomanianStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RomanianStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RomanianStemmer_init_(t_RomanianStemmer *self, PyObject *args, PyObject *kwds)
        {
          RomanianStemmer object((jobject) NULL);

          INT_CALL(object = RomanianStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_RomanianStemmer_equals(t_RomanianStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(RomanianStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_RomanianStemmer_hashCode(t_RomanianStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(RomanianStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_RomanianStemmer_stem(t_RomanianStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(RomanianStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/TermsConsumer.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/codecs/TermStats.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/codecs/PostingsConsumer.h"
#include "org/apache/lucene/index/FieldInfo$IndexOptions.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *TermsConsumer::class$ = NULL;
        jmethodID *TermsConsumer::mids$ = NULL;
        bool TermsConsumer::live$ = false;

        jclass TermsConsumer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/TermsConsumer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_finish_42663baa] = env->getMethodID(cls, "finish", "(JJI)V");
            mids$[mid_finishTerm_e998e763] = env->getMethodID(cls, "finishTerm", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/codecs/TermStats;)V");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_merge_90e0102b] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;Lorg/apache/lucene/index/FieldInfo$IndexOptions;Lorg/apache/lucene/index/TermsEnum;)V");
            mids$[mid_startTerm_0765d42f] = env->getMethodID(cls, "startTerm", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/codecs/PostingsConsumer;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TermsConsumer::finish(jlong a0, jlong a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_finish_42663baa], a0, a1, a2);
        }

        void TermsConsumer::finishTerm(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::codecs::TermStats & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_finishTerm_e998e763], a0.this$, a1.this$);
        }

        ::java::util::Comparator TermsConsumer::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        void TermsConsumer::merge(const ::org::apache::lucene::index::MergeState & a0, const ::org::apache::lucene::index::FieldInfo$IndexOptions & a1, const ::org::apache::lucene::index::TermsEnum & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_90e0102b], a0.this$, a1.this$, a2.this$);
        }

        ::org::apache::lucene::codecs::PostingsConsumer TermsConsumer::startTerm(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return ::org::apache::lucene::codecs::PostingsConsumer(env->callObjectMethod(this$, mids$[mid_startTerm_0765d42f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_TermsConsumer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermsConsumer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermsConsumer_finish(t_TermsConsumer *self, PyObject *args);
        static PyObject *t_TermsConsumer_finishTerm(t_TermsConsumer *self, PyObject *args);
        static PyObject *t_TermsConsumer_getComparator(t_TermsConsumer *self);
        static PyObject *t_TermsConsumer_merge(t_TermsConsumer *self, PyObject *args);
        static PyObject *t_TermsConsumer_startTerm(t_TermsConsumer *self, PyObject *arg);
        static PyObject *t_TermsConsumer_get__comparator(t_TermsConsumer *self, void *data);
        static PyGetSetDef t_TermsConsumer__fields_[] = {
          DECLARE_GET_FIELD(t_TermsConsumer, comparator),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermsConsumer__methods_[] = {
          DECLARE_METHOD(t_TermsConsumer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsConsumer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsConsumer, finish, METH_VARARGS),
          DECLARE_METHOD(t_TermsConsumer, finishTerm, METH_VARARGS),
          DECLARE_METHOD(t_TermsConsumer, getComparator, METH_NOARGS),
          DECLARE_METHOD(t_TermsConsumer, merge, METH_VARARGS),
          DECLARE_METHOD(t_TermsConsumer, startTerm, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermsConsumer, t_TermsConsumer, ::java::lang::Object, TermsConsumer, abstract_init, 0, 0, t_TermsConsumer__fields_, 0, 0);

        void t_TermsConsumer::install(PyObject *module)
        {
          installType(&PY_TYPE(TermsConsumer), module, "TermsConsumer", 0);
        }

        void t_TermsConsumer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermsConsumer).tp_dict, "class_", make_descriptor(TermsConsumer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermsConsumer).tp_dict, "wrapfn_", make_descriptor(t_TermsConsumer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermsConsumer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermsConsumer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermsConsumer::initializeClass, 1)))
            return NULL;
          return t_TermsConsumer::wrap_Object(TermsConsumer(((t_TermsConsumer *) arg)->object.this$));
        }
        static PyObject *t_TermsConsumer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermsConsumer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermsConsumer_finish(t_TermsConsumer *self, PyObject *args)
        {
          jlong a0;
          jlong a1;
          jint a2;

          if (!parseArgs(args, "JJI", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.finish(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "finish", args);
          return NULL;
        }

        static PyObject *t_TermsConsumer_finishTerm(t_TermsConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::codecs::TermStats a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::codecs::TermStats::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.finishTerm(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "finishTerm", args);
          return NULL;
        }

        static PyObject *t_TermsConsumer_getComparator(t_TermsConsumer *self)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_TermsConsumer_merge(t_TermsConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);
          ::org::apache::lucene::index::FieldInfo$IndexOptions a1((jobject) NULL);
          PyTypeObject **p1;
          ::org::apache::lucene::index::TermsEnum a2((jobject) NULL);

          if (!parseArgs(args, "kKk", ::org::apache::lucene::index::MergeState::initializeClass, ::org::apache::lucene::index::FieldInfo$IndexOptions::initializeClass, ::org::apache::lucene::index::TermsEnum::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_FieldInfo$IndexOptions::parameters_, &a2))
          {
            OBJ_CALL(self->object.merge(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "merge", args);
          return NULL;
        }

        static PyObject *t_TermsConsumer_startTerm(t_TermsConsumer *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::codecs::PostingsConsumer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.startTerm(a0));
            return ::org::apache::lucene::codecs::t_PostingsConsumer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "startTerm", arg);
          return NULL;
        }

        static PyObject *t_TermsConsumer_get__comparator(t_TermsConsumer *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Format.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Format::class$ = NULL;
          jmethodID *PackedInts$Format::mids$ = NULL;
          jfieldID *PackedInts$Format::fids$ = NULL;
          bool PackedInts$Format::live$ = false;
          PackedInts$Format *PackedInts$Format::PACKED = NULL;
          PackedInts$Format *PackedInts$Format::PACKED_SINGLE_BLOCK = NULL;

          jclass PackedInts$Format::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Format");

              mids$ = new jmethodID[max_mid];
              mids$[mid_byId_926ce3b1] = env->getStaticMethodID(cls, "byId", "(I)Lorg/apache/lucene/util/packed/PackedInts$Format;");
              mids$[mid_byteCount_d3236ab8] = env->getMethodID(cls, "byteCount", "(III)J");
              mids$[mid_getId_54c6a179] = env->getMethodID(cls, "getId", "()I");
              mids$[mid_isSupported_39c7bd30] = env->getMethodID(cls, "isSupported", "(I)Z");
              mids$[mid_longCount_d3236abb] = env->getMethodID(cls, "longCount", "(III)I");
              mids$[mid_overheadPerValue_39c7bd2c] = env->getMethodID(cls, "overheadPerValue", "(I)F");
              mids$[mid_overheadRatio_39c7bd2c] = env->getMethodID(cls, "overheadRatio", "(I)F");
              mids$[mid_valueOf_ad915ab1] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/util/packed/PackedInts$Format;");
              mids$[mid_values_d84982f7] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/util/packed/PackedInts$Format;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_id] = env->getFieldID(cls, "id", "I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              PACKED = new PackedInts$Format(env->getStaticObjectField(cls, "PACKED", "Lorg/apache/lucene/util/packed/PackedInts$Format;"));
              PACKED_SINGLE_BLOCK = new PackedInts$Format(env->getStaticObjectField(cls, "PACKED_SINGLE_BLOCK", "Lorg/apache/lucene/util/packed/PackedInts$Format;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts$Format PackedInts$Format::byId(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return PackedInts$Format(env->callStaticObjectMethod(cls, mids$[mid_byId_926ce3b1], a0));
          }

          jlong PackedInts$Format::byteCount(jint a0, jint a1, jint a2) const
          {
            return env->callLongMethod(this$, mids$[mid_byteCount_d3236ab8], a0, a1, a2);
          }

          jint PackedInts$Format::getId() const
          {
            return env->callIntMethod(this$, mids$[mid_getId_54c6a179]);
          }

          jboolean PackedInts$Format::isSupported(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isSupported_39c7bd30], a0);
          }

          jint PackedInts$Format::longCount(jint a0, jint a1, jint a2) const
          {
            return env->callIntMethod(this$, mids$[mid_longCount_d3236abb], a0, a1, a2);
          }

          jfloat PackedInts$Format::overheadPerValue(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_overheadPerValue_39c7bd2c], a0);
          }

          jfloat PackedInts$Format::overheadRatio(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_overheadRatio_39c7bd2c], a0);
          }

          PackedInts$Format PackedInts$Format::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return PackedInts$Format(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ad915ab1], a0.this$));
          }

          JArray< PackedInts$Format > PackedInts$Format::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< PackedInts$Format >(env->callStaticObjectMethod(cls, mids$[mid_values_d84982f7]));
          }

          jint PackedInts$Format::_get_id() const
          {
            return env->getIntField(this$, fids$[fid_id]);
          }

          void PackedInts$Format::_set_id(jint a0) const
          {
            env->setIntField(this$, fids$[fid_id], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Format_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Format_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Format_of_(t_PackedInts$Format *self, PyObject *args);
          static PyObject *t_PackedInts$Format_byId(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Format_byteCount(t_PackedInts$Format *self, PyObject *args);
          static PyObject *t_PackedInts$Format_getId(t_PackedInts$Format *self);
          static PyObject *t_PackedInts$Format_isSupported(t_PackedInts$Format *self, PyObject *arg);
          static PyObject *t_PackedInts$Format_longCount(t_PackedInts$Format *self, PyObject *args);
          static PyObject *t_PackedInts$Format_overheadPerValue(t_PackedInts$Format *self, PyObject *arg);
          static PyObject *t_PackedInts$Format_overheadRatio(t_PackedInts$Format *self, PyObject *arg);
          static PyObject *t_PackedInts$Format_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts$Format_values(PyTypeObject *type);

          static PyObject *t_PackedInts$Format_get__id(t_PackedInts$Format *self, void *data);
          static PyObject *t_PackedInts$Format_get__parameters_(t_PackedInts$Format *self, void *data);
          static PyGetSetDef t_PackedInts$Format__fields_[] = {
            DECLARE_GET_FIELD(t_PackedInts$Format, id),
            DECLARE_GET_FIELD(t_PackedInts$Format, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PackedInts$Format__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Format, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Format, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Format, of_, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Format, byId, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Format, byteCount, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Format, getId, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Format, isSupported, METH_O),
            DECLARE_METHOD(t_PackedInts$Format, longCount, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Format, overheadPerValue, METH_O),
            DECLARE_METHOD(t_PackedInts$Format, overheadRatio, METH_O),
            DECLARE_METHOD(t_PackedInts$Format, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Format, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$Format, t_PackedInts$Format, ::java::lang::Enum, PackedInts$Format, abstract_init, 0, 0, t_PackedInts$Format__fields_, 0, 0);
          PyObject *t_PackedInts$Format::wrap_Object(const PackedInts$Format& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PackedInts$Format::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PackedInts$Format *self = (t_PackedInts$Format *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_PackedInts$Format::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PackedInts$Format::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PackedInts$Format *self = (t_PackedInts$Format *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_PackedInts$Format::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Format), module, "PackedInts$Format", 0);
          }

          void t_PackedInts$Format::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$Format).tp_dict, "class_", make_descriptor(PackedInts$Format::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$Format).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$Format::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$Format).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PackedInts$Format::initializeClass);
            PyDict_SetItemString(PY_TYPE(PackedInts$Format).tp_dict, "PACKED", make_descriptor(t_PackedInts$Format::wrap_Object(*PackedInts$Format::PACKED)));
            PyDict_SetItemString(PY_TYPE(PackedInts$Format).tp_dict, "PACKED_SINGLE_BLOCK", make_descriptor(t_PackedInts$Format::wrap_Object(*PackedInts$Format::PACKED_SINGLE_BLOCK)));
          }

          static PyObject *t_PackedInts$Format_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Format::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Format::wrap_Object(PackedInts$Format(((t_PackedInts$Format *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Format_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Format::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PackedInts$Format_of_(t_PackedInts$Format *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_PackedInts$Format_byId(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            PackedInts$Format result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts$Format::byId(a0));
              return t_PackedInts$Format::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "byId", arg);
            return NULL;
          }

          static PyObject *t_PackedInts$Format_byteCount(t_PackedInts$Format *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            jlong result;

            if (!parseArgs(args, "III", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.byteCount(a0, a1, a2));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "byteCount", args);
            return NULL;
          }

          static PyObject *t_PackedInts$Format_getId(t_PackedInts$Format *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getId());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Format_isSupported(t_PackedInts$Format *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.isSupported(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isSupported", arg);
            return NULL;
          }

          static PyObject *t_PackedInts$Format_longCount(t_PackedInts$Format *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            jint result;

            if (!parseArgs(args, "III", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.longCount(a0, a1, a2));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "longCount", args);
            return NULL;
          }

          static PyObject *t_PackedInts$Format_overheadPerValue(t_PackedInts$Format *self, PyObject *arg)
          {
            jint a0;
            jfloat result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.overheadPerValue(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "overheadPerValue", arg);
            return NULL;
          }

          static PyObject *t_PackedInts$Format_overheadRatio(t_PackedInts$Format *self, PyObject *arg)
          {
            jint a0;
            jfloat result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.overheadRatio(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "overheadRatio", arg);
            return NULL;
          }

          static PyObject *t_PackedInts$Format_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            PackedInts$Format result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts$Format::valueOf(a0));
              return t_PackedInts$Format::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_PackedInts$Format_values(PyTypeObject *type)
          {
            JArray< PackedInts$Format > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts$Format::values());
            return JArray<jobject>(result.this$).wrap(t_PackedInts$Format::wrap_jobject);
          }
          static PyObject *t_PackedInts$Format_get__parameters_(t_PackedInts$Format *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_PackedInts$Format_get__id(t_PackedInts$Format *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getId());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/TermsFilter.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "java/util/List.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *TermsFilter::class$ = NULL;
        jmethodID *TermsFilter::mids$ = NULL;
        bool TermsFilter::live$ = false;

        jclass TermsFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/TermsFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c9f85e01] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/Term;)V");
            mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
            mids$[mid_init$_8fbc1a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_init$_04719c9d] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/util/List;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermsFilter::TermsFilter(const JArray< ::org::apache::lucene::index::Term > & a0) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_c9f85e01, a0.this$)) {}

        TermsFilter::TermsFilter(const ::java::util::List & a0) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

        TermsFilter::TermsFilter(const ::java::lang::String & a0, const JArray< ::org::apache::lucene::util::BytesRef > & a1) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_8fbc1a2e, a0.this$, a1.this$)) {}

        TermsFilter::TermsFilter(const ::java::lang::String & a0, const ::java::util::List & a1) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_04719c9d, a0.this$, a1.this$)) {}

        jboolean TermsFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSet TermsFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        jint TermsFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String TermsFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_TermsFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermsFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermsFilter_init_(t_TermsFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermsFilter_equals(t_TermsFilter *self, PyObject *args);
        static PyObject *t_TermsFilter_getDocIdSet(t_TermsFilter *self, PyObject *args);
        static PyObject *t_TermsFilter_hashCode(t_TermsFilter *self, PyObject *args);
        static PyObject *t_TermsFilter_toString(t_TermsFilter *self, PyObject *args);

        static PyMethodDef t_TermsFilter__methods_[] = {
          DECLARE_METHOD(t_TermsFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_TermsFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_TermsFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_TermsFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermsFilter, t_TermsFilter, ::org::apache::lucene::search::Filter, TermsFilter, t_TermsFilter_init_, 0, 0, 0, 0, 0);

        void t_TermsFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(TermsFilter), module, "TermsFilter", 0);
        }

        void t_TermsFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermsFilter).tp_dict, "class_", make_descriptor(TermsFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermsFilter).tp_dict, "wrapfn_", make_descriptor(t_TermsFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermsFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermsFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermsFilter::initializeClass, 1)))
            return NULL;
          return t_TermsFilter::wrap_Object(TermsFilter(((t_TermsFilter *) arg)->object.this$));
        }
        static PyObject *t_TermsFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermsFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermsFilter_init_(t_TermsFilter *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::Term > a0((jobject) NULL);
              TermsFilter object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                INT_CALL(object = TermsFilter(a0));
                self->object = object;
                break;
              }
            }
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              TermsFilter object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                INT_CALL(object = TermsFilter(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::org::apache::lucene::util::BytesRef > a1((jobject) NULL);
              TermsFilter object((jobject) NULL);

              if (!parseArgs(args, "s[k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                INT_CALL(object = TermsFilter(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::List a1((jobject) NULL);
              PyTypeObject **p1;
              TermsFilter object((jobject) NULL);

              if (!parseArgs(args, "sK", ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
              {
                INT_CALL(object = TermsFilter(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermsFilter_equals(t_TermsFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TermsFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_TermsFilter_getDocIdSet(t_TermsFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(TermsFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_TermsFilter_hashCode(t_TermsFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(TermsFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_TermsFilter_toString(t_TermsFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(TermsFilter), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/SimpleAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *SimpleAnalyzer::class$ = NULL;
          jmethodID *SimpleAnalyzer::mids$ = NULL;
          bool SimpleAnalyzer::live$ = false;

          jclass SimpleAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/SimpleAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleAnalyzer::SimpleAnalyzer() : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          SimpleAnalyzer::SimpleAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_SimpleAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleAnalyzer_init_(t_SimpleAnalyzer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_SimpleAnalyzer__methods_[] = {
            DECLARE_METHOD(t_SimpleAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleAnalyzer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleAnalyzer, t_SimpleAnalyzer, ::org::apache::lucene::analysis::Analyzer, SimpleAnalyzer, t_SimpleAnalyzer_init_, 0, 0, 0, 0, 0);

          void t_SimpleAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleAnalyzer), module, "SimpleAnalyzer", 0);
          }

          void t_SimpleAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleAnalyzer).tp_dict, "class_", make_descriptor(SimpleAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_SimpleAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleAnalyzer::initializeClass, 1)))
              return NULL;
            return t_SimpleAnalyzer::wrap_Object(SimpleAnalyzer(((t_SimpleAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_SimpleAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleAnalyzer_init_(t_SimpleAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                SimpleAnalyzer object((jobject) NULL);

                INT_CALL(object = SimpleAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                SimpleAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = SimpleAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/QueryParser$Operator.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *QueryParser$Operator::class$ = NULL;
          jmethodID *QueryParser$Operator::mids$ = NULL;
          bool QueryParser$Operator::live$ = false;
          QueryParser$Operator *QueryParser$Operator::AND = NULL;
          QueryParser$Operator *QueryParser$Operator::OR = NULL;

          jclass QueryParser$Operator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/QueryParser$Operator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_7436fa4b] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;");
              mids$[mid_values_6ed7a6cd] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              AND = new QueryParser$Operator(env->getStaticObjectField(cls, "AND", "Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;"));
              OR = new QueryParser$Operator(env->getStaticObjectField(cls, "OR", "Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryParser$Operator QueryParser$Operator::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return QueryParser$Operator(env->callStaticObjectMethod(cls, mids$[mid_valueOf_7436fa4b], a0.this$));
          }

          JArray< QueryParser$Operator > QueryParser$Operator::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< QueryParser$Operator >(env->callStaticObjectMethod(cls, mids$[mid_values_6ed7a6cd]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_QueryParser$Operator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParser$Operator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParser$Operator_of_(t_QueryParser$Operator *self, PyObject *args);
          static PyObject *t_QueryParser$Operator_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_QueryParser$Operator_values(PyTypeObject *type);
          static PyObject *t_QueryParser$Operator_get__parameters_(t_QueryParser$Operator *self, void *data);
          static PyGetSetDef t_QueryParser$Operator__fields_[] = {
            DECLARE_GET_FIELD(t_QueryParser$Operator, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryParser$Operator__methods_[] = {
            DECLARE_METHOD(t_QueryParser$Operator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParser$Operator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParser$Operator, of_, METH_VARARGS),
            DECLARE_METHOD(t_QueryParser$Operator, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_QueryParser$Operator, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryParser$Operator, t_QueryParser$Operator, ::java::lang::Enum, QueryParser$Operator, abstract_init, 0, 0, t_QueryParser$Operator__fields_, 0, 0);
          PyObject *t_QueryParser$Operator::wrap_Object(const QueryParser$Operator& object, PyTypeObject *p0)
          {
            PyObject *obj = t_QueryParser$Operator::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_QueryParser$Operator *self = (t_QueryParser$Operator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_QueryParser$Operator::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_QueryParser$Operator::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_QueryParser$Operator *self = (t_QueryParser$Operator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_QueryParser$Operator::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryParser$Operator), module, "QueryParser$Operator", 0);
          }

          void t_QueryParser$Operator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryParser$Operator).tp_dict, "class_", make_descriptor(QueryParser$Operator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryParser$Operator).tp_dict, "wrapfn_", make_descriptor(t_QueryParser$Operator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryParser$Operator).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(QueryParser$Operator::initializeClass);
            PyDict_SetItemString(PY_TYPE(QueryParser$Operator).tp_dict, "AND", make_descriptor(t_QueryParser$Operator::wrap_Object(*QueryParser$Operator::AND)));
            PyDict_SetItemString(PY_TYPE(QueryParser$Operator).tp_dict, "OR", make_descriptor(t_QueryParser$Operator::wrap_Object(*QueryParser$Operator::OR)));
          }

          static PyObject *t_QueryParser$Operator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryParser$Operator::initializeClass, 1)))
              return NULL;
            return t_QueryParser$Operator::wrap_Object(QueryParser$Operator(((t_QueryParser$Operator *) arg)->object.this$));
          }
          static PyObject *t_QueryParser$Operator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryParser$Operator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_QueryParser$Operator_of_(t_QueryParser$Operator *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_QueryParser$Operator_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            QueryParser$Operator result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::QueryParser$Operator::valueOf(a0));
              return t_QueryParser$Operator::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_QueryParser$Operator_values(PyTypeObject *type)
          {
            JArray< QueryParser$Operator > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::QueryParser$Operator::values());
            return JArray<jobject>(result.this$).wrap(t_QueryParser$Operator::wrap_jobject);
          }
          static PyObject *t_QueryParser$Operator_get__parameters_(t_QueryParser$Operator *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/FuzzyQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *FuzzyQueryNodeProcessor::class$ = NULL;
              jmethodID *FuzzyQueryNodeProcessor::mids$ = NULL;
              bool FuzzyQueryNodeProcessor::live$ = false;

              jclass FuzzyQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/FuzzyQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FuzzyQueryNodeProcessor::FuzzyQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_FuzzyQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FuzzyQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FuzzyQueryNodeProcessor_init_(t_FuzzyQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_FuzzyQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_FuzzyQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FuzzyQueryNodeProcessor, t_FuzzyQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, FuzzyQueryNodeProcessor, t_FuzzyQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_FuzzyQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(FuzzyQueryNodeProcessor), module, "FuzzyQueryNodeProcessor", 0);
              }

              void t_FuzzyQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNodeProcessor).tp_dict, "class_", make_descriptor(FuzzyQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_FuzzyQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FuzzyQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FuzzyQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_FuzzyQueryNodeProcessor::wrap_Object(FuzzyQueryNodeProcessor(((t_FuzzyQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_FuzzyQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FuzzyQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FuzzyQueryNodeProcessor_init_(t_FuzzyQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                FuzzyQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = FuzzyQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/FilterDirectory.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *FilterDirectory::class$ = NULL;
        jmethodID *FilterDirectory::mids$ = NULL;
        bool FilterDirectory::live$ = false;

        jclass FilterDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/FilterDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileExists_5fdc3f44] = env->getMethodID(cls, "fileExists", "(Ljava/lang/String;)Z");
            mids$[mid_fileLength_5fdc3f54] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_getDelegate_1f3934bb] = env->getMethodID(cls, "getDelegate", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getLockFactory_e4e9c36d] = env->getMethodID(cls, "getLockFactory", "()Lorg/apache/lucene/store/LockFactory;");
            mids$[mid_getLockID_14c7b5c5] = env->getMethodID(cls, "getLockID", "()Ljava/lang/String;");
            mids$[mid_listAll_2e6d5245] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_setLockFactory_9892eb8c] = env->getMethodID(cls, "setLockFactory", "(Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_sync_9bfb370d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void FilterDirectory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        void FilterDirectory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::store::IndexOutput FilterDirectory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        void FilterDirectory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_5fdc3f48], a0.this$);
        }

        jboolean FilterDirectory::fileExists(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fileExists_5fdc3f44], a0.this$);
        }

        jlong FilterDirectory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_5fdc3f54], a0.this$);
        }

        ::org::apache::lucene::store::Directory FilterDirectory::getDelegate() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getDelegate_1f3934bb]));
        }

        ::org::apache::lucene::store::LockFactory FilterDirectory::getLockFactory() const
        {
          return ::org::apache::lucene::store::LockFactory(env->callObjectMethod(this$, mids$[mid_getLockFactory_e4e9c36d]));
        }

        ::java::lang::String FilterDirectory::getLockID() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLockID_14c7b5c5]));
        }

        JArray< ::java::lang::String > FilterDirectory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_2e6d5245]));
        }

        ::org::apache::lucene::store::Lock FilterDirectory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }

        ::org::apache::lucene::store::IndexInput FilterDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }

        void FilterDirectory::setLockFactory(const ::org::apache::lucene::store::LockFactory & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLockFactory_9892eb8c], a0.this$);
        }

        void FilterDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_9bfb370d], a0.this$);
        }

        ::java::lang::String FilterDirectory::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_FilterDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectory_clearLock(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_close(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_createOutput(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_deleteFile(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_fileExists(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_fileLength(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_getDelegate(t_FilterDirectory *self);
        static PyObject *t_FilterDirectory_getLockFactory(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_getLockID(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_listAll(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_makeLock(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_openInput(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_setLockFactory(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_sync(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_toString(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_get__delegate(t_FilterDirectory *self, void *data);
        static PyObject *t_FilterDirectory_get__lockFactory(t_FilterDirectory *self, void *data);
        static int t_FilterDirectory_set__lockFactory(t_FilterDirectory *self, PyObject *arg, void *data);
        static PyObject *t_FilterDirectory_get__lockID(t_FilterDirectory *self, void *data);
        static PyGetSetDef t_FilterDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_FilterDirectory, delegate),
          DECLARE_GETSET_FIELD(t_FilterDirectory, lockFactory),
          DECLARE_GET_FIELD(t_FilterDirectory, lockID),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterDirectory__methods_[] = {
          DECLARE_METHOD(t_FilterDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectory, clearLock, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, close, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, fileExists, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, fileLength, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, getDelegate, METH_NOARGS),
          DECLARE_METHOD(t_FilterDirectory, getLockFactory, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, getLockID, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, listAll, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, makeLock, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, setLockFactory, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, sync, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterDirectory, t_FilterDirectory, ::org::apache::lucene::store::Directory, FilterDirectory, abstract_init, 0, 0, t_FilterDirectory__fields_, 0, 0);

        void t_FilterDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterDirectory), module, "FilterDirectory", 0);
        }

        void t_FilterDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterDirectory).tp_dict, "class_", make_descriptor(FilterDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterDirectory).tp_dict, "wrapfn_", make_descriptor(t_FilterDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterDirectory::initializeClass, 1)))
            return NULL;
          return t_FilterDirectory::wrap_Object(FilterDirectory(((t_FilterDirectory *) arg)->object.this$));
        }
        static PyObject *t_FilterDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FilterDirectory_clearLock(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "clearLock", args, 2);
        }

        static PyObject *t_FilterDirectory_close(t_FilterDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_FilterDirectory_createOutput(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_FilterDirectory_deleteFile(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_FilterDirectory_fileExists(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileExists(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "fileExists", args, 2);
        }

        static PyObject *t_FilterDirectory_fileLength(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "fileLength", args, 2);
        }

        static PyObject *t_FilterDirectory_getDelegate(t_FilterDirectory *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getDelegate());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_FilterDirectory_getLockFactory(t_FilterDirectory *self, PyObject *args)
        {
          ::org::apache::lucene::store::LockFactory result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLockFactory());
            return ::org::apache::lucene::store::t_LockFactory::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "getLockFactory", args, 2);
        }

        static PyObject *t_FilterDirectory_getLockID(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLockID());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "getLockID", args, 2);
        }

        static PyObject *t_FilterDirectory_listAll(t_FilterDirectory *self, PyObject *args)
        {
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.listAll());
            return JArray<jstring>(result.this$).wrap();
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "listAll", args, 2);
        }

        static PyObject *t_FilterDirectory_makeLock(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "makeLock", args, 2);
        }

        static PyObject *t_FilterDirectory_openInput(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "openInput", args, 2);
        }

        static PyObject *t_FilterDirectory_setLockFactory(t_FilterDirectory *self, PyObject *args)
        {
          ::org::apache::lucene::store::LockFactory a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setLockFactory(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "setLockFactory", args, 2);
        }

        static PyObject *t_FilterDirectory_sync(t_FilterDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "sync", args, 2);
        }

        static PyObject *t_FilterDirectory_toString(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FilterDirectory_get__delegate(t_FilterDirectory *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getDelegate());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_FilterDirectory_get__lockFactory(t_FilterDirectory *self, void *data)
        {
          ::org::apache::lucene::store::LockFactory value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockFactory());
          return ::org::apache::lucene::store::t_LockFactory::wrap_Object(value);
        }
        static int t_FilterDirectory_set__lockFactory(t_FilterDirectory *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::store::LockFactory value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &value))
            {
              INT_CALL(self->object.setLockFactory(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "lockFactory", arg);
          return -1;
        }

        static PyObject *t_FilterDirectory_get__lockID(t_FilterDirectory *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockID());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerFactory.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/analysis/standard/UAX29URLEmailTokenizer.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *UAX29URLEmailTokenizerFactory::class$ = NULL;
          jmethodID *UAX29URLEmailTokenizerFactory::mids$ = NULL;
          bool UAX29URLEmailTokenizerFactory::live$ = false;

          jclass UAX29URLEmailTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ca873381] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/standard/UAX29URLEmailTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UAX29URLEmailTokenizerFactory::UAX29URLEmailTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::standard::UAX29URLEmailTokenizer UAX29URLEmailTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::standard::UAX29URLEmailTokenizer(env->callObjectMethod(this$, mids$[mid_create_ca873381], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_UAX29URLEmailTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UAX29URLEmailTokenizerFactory_init_(t_UAX29URLEmailTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UAX29URLEmailTokenizerFactory_create(t_UAX29URLEmailTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_UAX29URLEmailTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_UAX29URLEmailTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(UAX29URLEmailTokenizerFactory, t_UAX29URLEmailTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, UAX29URLEmailTokenizerFactory, t_UAX29URLEmailTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_UAX29URLEmailTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(UAX29URLEmailTokenizerFactory), module, "UAX29URLEmailTokenizerFactory", 0);
          }

          void t_UAX29URLEmailTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerFactory).tp_dict, "class_", make_descriptor(UAX29URLEmailTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_UAX29URLEmailTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_UAX29URLEmailTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UAX29URLEmailTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_UAX29URLEmailTokenizerFactory::wrap_Object(UAX29URLEmailTokenizerFactory(((t_UAX29URLEmailTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_UAX29URLEmailTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UAX29URLEmailTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UAX29URLEmailTokenizerFactory_init_(t_UAX29URLEmailTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            UAX29URLEmailTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = UAX29URLEmailTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UAX29URLEmailTokenizerFactory_create(t_UAX29URLEmailTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::standard::UAX29URLEmailTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::standard::t_UAX29URLEmailTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(UAX29URLEmailTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Optimizer.h"
#include "org/egothor/stemmer/Trie.h"
#include "org/egothor/stemmer/Row.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Optimizer::class$ = NULL;
      jmethodID *Optimizer::mids$ = NULL;
      bool Optimizer::live$ = false;

      jclass Optimizer::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Optimizer");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_merge_4f5b02a1] = env->getMethodID(cls, "merge", "(Lorg/egothor/stemmer/Row;Lorg/egothor/stemmer/Row;)Lorg/egothor/stemmer/Row;");
          mids$[mid_optimize_c26c0475] = env->getMethodID(cls, "optimize", "(Lorg/egothor/stemmer/Trie;)Lorg/egothor/stemmer/Trie;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Optimizer::Optimizer() : ::org::egothor::stemmer::Reduce(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      ::org::egothor::stemmer::Row Optimizer::merge(const ::org::egothor::stemmer::Row & a0, const ::org::egothor::stemmer::Row & a1) const
      {
        return ::org::egothor::stemmer::Row(env->callObjectMethod(this$, mids$[mid_merge_4f5b02a1], a0.this$, a1.this$));
      }

      ::org::egothor::stemmer::Trie Optimizer::optimize(const ::org::egothor::stemmer::Trie & a0) const
      {
        return ::org::egothor::stemmer::Trie(env->callObjectMethod(this$, mids$[mid_optimize_c26c0475], a0.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Optimizer_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Optimizer_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Optimizer_init_(t_Optimizer *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Optimizer_merge(t_Optimizer *self, PyObject *args);
      static PyObject *t_Optimizer_optimize(t_Optimizer *self, PyObject *args);

      static PyMethodDef t_Optimizer__methods_[] = {
        DECLARE_METHOD(t_Optimizer, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Optimizer, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Optimizer, merge, METH_VARARGS),
        DECLARE_METHOD(t_Optimizer, optimize, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Optimizer, t_Optimizer, ::org::egothor::stemmer::Reduce, Optimizer, t_Optimizer_init_, 0, 0, 0, 0, 0);

      void t_Optimizer::install(PyObject *module)
      {
        installType(&PY_TYPE(Optimizer), module, "Optimizer", 0);
      }

      void t_Optimizer::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Optimizer).tp_dict, "class_", make_descriptor(Optimizer::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Optimizer).tp_dict, "wrapfn_", make_descriptor(t_Optimizer::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Optimizer).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Optimizer_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Optimizer::initializeClass, 1)))
          return NULL;
        return t_Optimizer::wrap_Object(Optimizer(((t_Optimizer *) arg)->object.this$));
      }
      static PyObject *t_Optimizer_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Optimizer::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Optimizer_init_(t_Optimizer *self, PyObject *args, PyObject *kwds)
      {
        Optimizer object((jobject) NULL);

        INT_CALL(object = Optimizer());
        self->object = object;

        return 0;
      }

      static PyObject *t_Optimizer_merge(t_Optimizer *self, PyObject *args)
      {
        ::org::egothor::stemmer::Row a0((jobject) NULL);
        ::org::egothor::stemmer::Row a1((jobject) NULL);
        ::org::egothor::stemmer::Row result((jobject) NULL);

        if (!parseArgs(args, "kk", ::org::egothor::stemmer::Row::initializeClass, ::org::egothor::stemmer::Row::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.merge(a0, a1));
          return ::org::egothor::stemmer::t_Row::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "merge", args);
        return NULL;
      }

      static PyObject *t_Optimizer_optimize(t_Optimizer *self, PyObject *args)
      {
        ::org::egothor::stemmer::Trie a0((jobject) NULL);
        ::org::egothor::stemmer::Trie result((jobject) NULL);

        if (!parseArgs(args, "k", ::org::egothor::stemmer::Trie::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.optimize(a0));
          return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(Optimizer), (PyObject *) self, "optimize", args, 2);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/OrdTermState.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *OrdTermState::class$ = NULL;
        jmethodID *OrdTermState::mids$ = NULL;
        jfieldID *OrdTermState::fids$ = NULL;
        bool OrdTermState::live$ = false;

        jclass OrdTermState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/OrdTermState");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_copyFrom_d506ca07] = env->getMethodID(cls, "copyFrom", "(Lorg/apache/lucene/index/TermState;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_ord] = env->getFieldID(cls, "ord", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OrdTermState::OrdTermState() : ::org::apache::lucene::index::TermState(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void OrdTermState::copyFrom(const ::org::apache::lucene::index::TermState & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyFrom_d506ca07], a0.this$);
        }

        ::java::lang::String OrdTermState::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jlong OrdTermState::_get_ord() const
        {
          return env->getLongField(this$, fids$[fid_ord]);
        }

        void OrdTermState::_set_ord(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_ord], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_OrdTermState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OrdTermState_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OrdTermState_init_(t_OrdTermState *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OrdTermState_copyFrom(t_OrdTermState *self, PyObject *args);
        static PyObject *t_OrdTermState_toString(t_OrdTermState *self, PyObject *args);
        static PyObject *t_OrdTermState_get__ord(t_OrdTermState *self, void *data);
        static int t_OrdTermState_set__ord(t_OrdTermState *self, PyObject *arg, void *data);

        static PyGetSetDef t_OrdTermState__fields_[] = {
          DECLARE_GETSET_FIELD(t_OrdTermState, ord),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_OrdTermState__methods_[] = {
          DECLARE_METHOD(t_OrdTermState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OrdTermState, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OrdTermState, copyFrom, METH_VARARGS),
          DECLARE_METHOD(t_OrdTermState, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OrdTermState, t_OrdTermState, ::org::apache::lucene::index::TermState, OrdTermState, t_OrdTermState_init_, 0, 0, t_OrdTermState__fields_, 0, 0);

        void t_OrdTermState::install(PyObject *module)
        {
          installType(&PY_TYPE(OrdTermState), module, "OrdTermState", 0);
        }

        void t_OrdTermState::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OrdTermState).tp_dict, "class_", make_descriptor(OrdTermState::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OrdTermState).tp_dict, "wrapfn_", make_descriptor(t_OrdTermState::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OrdTermState).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OrdTermState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OrdTermState::initializeClass, 1)))
            return NULL;
          return t_OrdTermState::wrap_Object(OrdTermState(((t_OrdTermState *) arg)->object.this$));
        }
        static PyObject *t_OrdTermState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OrdTermState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OrdTermState_init_(t_OrdTermState *self, PyObject *args, PyObject *kwds)
        {
          OrdTermState object((jobject) NULL);

          INT_CALL(object = OrdTermState());
          self->object = object;

          return 0;
        }

        static PyObject *t_OrdTermState_copyFrom(t_OrdTermState *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermState a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::TermState::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyFrom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(OrdTermState), (PyObject *) self, "copyFrom", args, 2);
        }

        static PyObject *t_OrdTermState_toString(t_OrdTermState *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(OrdTermState), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_OrdTermState_get__ord(t_OrdTermState *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_ord());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_OrdTermState_set__ord(t_OrdTermState *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_ord(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "ord", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/KeywordAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *KeywordAttribute::class$ = NULL;
          jmethodID *KeywordAttribute::mids$ = NULL;
          bool KeywordAttribute::live$ = false;

          jclass KeywordAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/KeywordAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_isKeyword_54c6a16a] = env->getMethodID(cls, "isKeyword", "()Z");
              mids$[mid_setKeyword_bb0c767f] = env->getMethodID(cls, "setKeyword", "(Z)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean KeywordAttribute::isKeyword() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isKeyword_54c6a16a]);
          }

          void KeywordAttribute::setKeyword(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setKeyword_bb0c767f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_KeywordAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordAttribute_isKeyword(t_KeywordAttribute *self);
          static PyObject *t_KeywordAttribute_setKeyword(t_KeywordAttribute *self, PyObject *arg);
          static PyObject *t_KeywordAttribute_get__keyword(t_KeywordAttribute *self, void *data);
          static int t_KeywordAttribute_set__keyword(t_KeywordAttribute *self, PyObject *arg, void *data);
          static PyGetSetDef t_KeywordAttribute__fields_[] = {
            DECLARE_GETSET_FIELD(t_KeywordAttribute, keyword),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_KeywordAttribute__methods_[] = {
            DECLARE_METHOD(t_KeywordAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordAttribute, isKeyword, METH_NOARGS),
            DECLARE_METHOD(t_KeywordAttribute, setKeyword, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordAttribute, t_KeywordAttribute, ::org::apache::lucene::util::Attribute, KeywordAttribute, abstract_init, 0, 0, t_KeywordAttribute__fields_, 0, 0);

          void t_KeywordAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordAttribute), module, "KeywordAttribute", 0);
          }

          void t_KeywordAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordAttribute).tp_dict, "class_", make_descriptor(KeywordAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordAttribute).tp_dict, "wrapfn_", make_descriptor(t_KeywordAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeywordAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordAttribute::initializeClass, 1)))
              return NULL;
            return t_KeywordAttribute::wrap_Object(KeywordAttribute(((t_KeywordAttribute *) arg)->object.this$));
          }
          static PyObject *t_KeywordAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_KeywordAttribute_isKeyword(t_KeywordAttribute *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isKeyword());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_KeywordAttribute_setKeyword(t_KeywordAttribute *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setKeyword(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setKeyword", arg);
            return NULL;
          }

          static PyObject *t_KeywordAttribute_get__keyword(t_KeywordAttribute *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isKeyword());
            Py_RETURN_BOOL(value);
          }
          static int t_KeywordAttribute_set__keyword(t_KeywordAttribute *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setKeyword(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "keyword", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/ByteArrayDataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *ByteArrayDataOutput::class$ = NULL;
        jmethodID *ByteArrayDataOutput::mids$ = NULL;
        bool ByteArrayDataOutput::live$ = false;

        jclass ByteArrayDataOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/ByteArrayDataOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_49b4f12b] = env->getMethodID(cls, "<init>", "([B)V");
            mids$[mid_init$_86f4435f] = env->getMethodID(cls, "<init>", "([BII)V");
            mids$[mid_getPosition_54c6a179] = env->getMethodID(cls, "getPosition", "()I");
            mids$[mid_reset_49b4f12b] = env->getMethodID(cls, "reset", "([B)V");
            mids$[mid_reset_86f4435f] = env->getMethodID(cls, "reset", "([BII)V");
            mids$[mid_writeByte_b2271687] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_86f4435f] = env->getMethodID(cls, "writeBytes", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteArrayDataOutput::ByteArrayDataOutput() : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ByteArrayDataOutput::ByteArrayDataOutput(const JArray< jbyte > & a0) : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_49b4f12b, a0.this$)) {}

        ByteArrayDataOutput::ByteArrayDataOutput(const JArray< jbyte > & a0, jint a1, jint a2) : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_86f4435f, a0.this$, a1, a2)) {}

        jint ByteArrayDataOutput::getPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_getPosition_54c6a179]);
        }

        void ByteArrayDataOutput::reset(const JArray< jbyte > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_49b4f12b], a0.this$);
        }

        void ByteArrayDataOutput::reset(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_86f4435f], a0.this$, a1, a2);
        }

        void ByteArrayDataOutput::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_b2271687], a0);
        }

        void ByteArrayDataOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_86f4435f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_ByteArrayDataOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteArrayDataOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteArrayDataOutput_init_(t_ByteArrayDataOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteArrayDataOutput_getPosition(t_ByteArrayDataOutput *self);
        static PyObject *t_ByteArrayDataOutput_reset(t_ByteArrayDataOutput *self, PyObject *args);
        static PyObject *t_ByteArrayDataOutput_writeByte(t_ByteArrayDataOutput *self, PyObject *args);
        static PyObject *t_ByteArrayDataOutput_writeBytes(t_ByteArrayDataOutput *self, PyObject *args);
        static PyObject *t_ByteArrayDataOutput_get__position(t_ByteArrayDataOutput *self, void *data);
        static PyGetSetDef t_ByteArrayDataOutput__fields_[] = {
          DECLARE_GET_FIELD(t_ByteArrayDataOutput, position),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ByteArrayDataOutput__methods_[] = {
          DECLARE_METHOD(t_ByteArrayDataOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteArrayDataOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteArrayDataOutput, getPosition, METH_NOARGS),
          DECLARE_METHOD(t_ByteArrayDataOutput, reset, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataOutput, writeByte, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataOutput, writeBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ByteArrayDataOutput, t_ByteArrayDataOutput, ::org::apache::lucene::store::DataOutput, ByteArrayDataOutput, t_ByteArrayDataOutput_init_, 0, 0, t_ByteArrayDataOutput__fields_, 0, 0);

        void t_ByteArrayDataOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteArrayDataOutput), module, "ByteArrayDataOutput", 0);
        }

        void t_ByteArrayDataOutput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ByteArrayDataOutput).tp_dict, "class_", make_descriptor(ByteArrayDataOutput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ByteArrayDataOutput).tp_dict, "wrapfn_", make_descriptor(t_ByteArrayDataOutput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ByteArrayDataOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteArrayDataOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteArrayDataOutput::initializeClass, 1)))
            return NULL;
          return t_ByteArrayDataOutput::wrap_Object(ByteArrayDataOutput(((t_ByteArrayDataOutput *) arg)->object.this$));
        }
        static PyObject *t_ByteArrayDataOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteArrayDataOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteArrayDataOutput_init_(t_ByteArrayDataOutput *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ByteArrayDataOutput object((jobject) NULL);

              INT_CALL(object = ByteArrayDataOutput());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);
              ByteArrayDataOutput object((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                INT_CALL(object = ByteArrayDataOutput(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              ByteArrayDataOutput object((jobject) NULL);

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                INT_CALL(object = ByteArrayDataOutput(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteArrayDataOutput_getPosition(t_ByteArrayDataOutput *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPosition());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_ByteArrayDataOutput_reset(t_ByteArrayDataOutput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(self->object.reset(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.reset(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "reset", args);
          return NULL;
        }

        static PyObject *t_ByteArrayDataOutput_writeByte(t_ByteArrayDataOutput *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ByteArrayDataOutput), (PyObject *) self, "writeByte", args, 2);
        }

        static PyObject *t_ByteArrayDataOutput_writeBytes(t_ByteArrayDataOutput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ByteArrayDataOutput), (PyObject *) self, "writeBytes", args, 2);
        }

        static PyObject *t_ByteArrayDataOutput_get__position(t_ByteArrayDataOutput *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPosition());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/PortugueseStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *PortugueseStemmer::class$ = NULL;
        jmethodID *PortugueseStemmer::mids$ = NULL;
        bool PortugueseStemmer::live$ = false;

        jclass PortugueseStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/PortugueseStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PortugueseStemmer::PortugueseStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean PortugueseStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint PortugueseStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean PortugueseStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_PortugueseStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PortugueseStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PortugueseStemmer_init_(t_PortugueseStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PortugueseStemmer_equals(t_PortugueseStemmer *self, PyObject *args);
        static PyObject *t_PortugueseStemmer_hashCode(t_PortugueseStemmer *self, PyObject *args);
        static PyObject *t_PortugueseStemmer_stem(t_PortugueseStemmer *self, PyObject *args);

        static PyMethodDef t_PortugueseStemmer__methods_[] = {
          DECLARE_METHOD(t_PortugueseStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PortugueseStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PortugueseStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_PortugueseStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_PortugueseStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PortugueseStemmer, t_PortugueseStemmer, ::org::tartarus::snowball::SnowballProgram, PortugueseStemmer, t_PortugueseStemmer_init_, 0, 0, 0, 0, 0);

        void t_PortugueseStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(PortugueseStemmer), module, "PortugueseStemmer", 0);
        }

        void t_PortugueseStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PortugueseStemmer).tp_dict, "class_", make_descriptor(PortugueseStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PortugueseStemmer).tp_dict, "wrapfn_", make_descriptor(t_PortugueseStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PortugueseStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PortugueseStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PortugueseStemmer::initializeClass, 1)))
            return NULL;
          return t_PortugueseStemmer::wrap_Object(PortugueseStemmer(((t_PortugueseStemmer *) arg)->object.this$));
        }
        static PyObject *t_PortugueseStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PortugueseStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PortugueseStemmer_init_(t_PortugueseStemmer *self, PyObject *args, PyObject *kwds)
        {
          PortugueseStemmer object((jobject) NULL);

          INT_CALL(object = PortugueseStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_PortugueseStemmer_equals(t_PortugueseStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PortugueseStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PortugueseStemmer_hashCode(t_PortugueseStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(PortugueseStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_PortugueseStemmer_stem(t_PortugueseStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PortugueseStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/position/PositionFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace position {

          ::java::lang::Class *PositionFilter::class$ = NULL;
          jmethodID *PositionFilter::mids$ = NULL;
          bool PositionFilter::live$ = false;

          jclass PositionFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/position/PositionFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PositionFilter::PositionFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          PositionFilter::PositionFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          jboolean PositionFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void PositionFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace position {
          static PyObject *t_PositionFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PositionFilter_init_(t_PositionFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PositionFilter_incrementToken(t_PositionFilter *self, PyObject *args);
          static PyObject *t_PositionFilter_reset(t_PositionFilter *self, PyObject *args);

          static PyMethodDef t_PositionFilter__methods_[] = {
            DECLARE_METHOD(t_PositionFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_PositionFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PositionFilter, t_PositionFilter, ::org::apache::lucene::analysis::TokenFilter, PositionFilter, t_PositionFilter_init_, 0, 0, 0, 0, 0);

          void t_PositionFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PositionFilter), module, "PositionFilter", 0);
          }

          void t_PositionFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PositionFilter).tp_dict, "class_", make_descriptor(PositionFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PositionFilter).tp_dict, "wrapfn_", make_descriptor(t_PositionFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PositionFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositionFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositionFilter::initializeClass, 1)))
              return NULL;
            return t_PositionFilter::wrap_Object(PositionFilter(((t_PositionFilter *) arg)->object.this$));
          }
          static PyObject *t_PositionFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositionFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PositionFilter_init_(t_PositionFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                PositionFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = PositionFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                PositionFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = PositionFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PositionFilter_incrementToken(t_PositionFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PositionFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_PositionFilter_reset(t_PositionFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PositionFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SimpleMergedSegmentWarmer.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SimpleMergedSegmentWarmer::class$ = NULL;
        jmethodID *SimpleMergedSegmentWarmer::mids$ = NULL;
        bool SimpleMergedSegmentWarmer::live$ = false;

        jclass SimpleMergedSegmentWarmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SimpleMergedSegmentWarmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a5e6dfa2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/InfoStream;)V");
            mids$[mid_warm_c9e29579] = env->getMethodID(cls, "warm", "(Lorg/apache/lucene/index/AtomicReader;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SimpleMergedSegmentWarmer::SimpleMergedSegmentWarmer(const ::org::apache::lucene::util::InfoStream & a0) : ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer(env->newObject(initializeClass, &mids$, mid_init$_a5e6dfa2, a0.this$)) {}

        void SimpleMergedSegmentWarmer::warm(const ::org::apache::lucene::index::AtomicReader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_warm_c9e29579], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SimpleMergedSegmentWarmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SimpleMergedSegmentWarmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SimpleMergedSegmentWarmer_init_(t_SimpleMergedSegmentWarmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SimpleMergedSegmentWarmer_warm(t_SimpleMergedSegmentWarmer *self, PyObject *args);

        static PyMethodDef t_SimpleMergedSegmentWarmer__methods_[] = {
          DECLARE_METHOD(t_SimpleMergedSegmentWarmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleMergedSegmentWarmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleMergedSegmentWarmer, warm, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SimpleMergedSegmentWarmer, t_SimpleMergedSegmentWarmer, ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer, SimpleMergedSegmentWarmer, t_SimpleMergedSegmentWarmer_init_, 0, 0, 0, 0, 0);

        void t_SimpleMergedSegmentWarmer::install(PyObject *module)
        {
          installType(&PY_TYPE(SimpleMergedSegmentWarmer), module, "SimpleMergedSegmentWarmer", 0);
        }

        void t_SimpleMergedSegmentWarmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SimpleMergedSegmentWarmer).tp_dict, "class_", make_descriptor(SimpleMergedSegmentWarmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SimpleMergedSegmentWarmer).tp_dict, "wrapfn_", make_descriptor(t_SimpleMergedSegmentWarmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SimpleMergedSegmentWarmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SimpleMergedSegmentWarmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SimpleMergedSegmentWarmer::initializeClass, 1)))
            return NULL;
          return t_SimpleMergedSegmentWarmer::wrap_Object(SimpleMergedSegmentWarmer(((t_SimpleMergedSegmentWarmer *) arg)->object.this$));
        }
        static PyObject *t_SimpleMergedSegmentWarmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SimpleMergedSegmentWarmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SimpleMergedSegmentWarmer_init_(t_SimpleMergedSegmentWarmer *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::InfoStream a0((jobject) NULL);
          SimpleMergedSegmentWarmer object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::InfoStream::initializeClass, &a0))
          {
            INT_CALL(object = SimpleMergedSegmentWarmer(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SimpleMergedSegmentWarmer_warm(t_SimpleMergedSegmentWarmer *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.warm(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SimpleMergedSegmentWarmer), (PyObject *) self, "warm", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/GroupQueryNodeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *GroupQueryNodeBuilder::class$ = NULL;
              jmethodID *GroupQueryNodeBuilder::mids$ = NULL;
              bool GroupQueryNodeBuilder::live$ = false;

              jclass GroupQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/GroupQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_7f6ce179] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/Query;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              GroupQueryNodeBuilder::GroupQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::Query GroupQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_build_7f6ce179], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_GroupQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_GroupQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_GroupQueryNodeBuilder_init_(t_GroupQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_GroupQueryNodeBuilder_build(t_GroupQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_GroupQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_GroupQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_GroupQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_GroupQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(GroupQueryNodeBuilder, t_GroupQueryNodeBuilder, ::java::lang::Object, GroupQueryNodeBuilder, t_GroupQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_GroupQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(GroupQueryNodeBuilder), module, "GroupQueryNodeBuilder", 0);
              }

              void t_GroupQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(GroupQueryNodeBuilder).tp_dict, "class_", make_descriptor(GroupQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(GroupQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_GroupQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(GroupQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_GroupQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, GroupQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_GroupQueryNodeBuilder::wrap_Object(GroupQueryNodeBuilder(((t_GroupQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_GroupQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, GroupQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_GroupQueryNodeBuilder_init_(t_GroupQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                GroupQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = GroupQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_GroupQueryNodeBuilder_build(t_GroupQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/SortedInputIterator.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *SortedInputIterator::class$ = NULL;
          jmethodID *SortedInputIterator::mids$ = NULL;
          bool SortedInputIterator::live$ = false;

          jclass SortedInputIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/SortedInputIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1754a234] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
              mids$[mid_init$_a76164a7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/suggest/InputIterator;Ljava/util/Comparator;)V");
              mids$[mid_contexts_03e99967] = env->getMethodID(cls, "contexts", "()Ljava/util/Set;");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_hasContexts_54c6a16a] = env->getMethodID(cls, "hasContexts", "()Z");
              mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
              mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_payload_4ae19461] = env->getMethodID(cls, "payload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");
              mids$[mid_decode_b368866d] = env->getMethodID(cls, "decode", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/store/ByteArrayDataInput;)J");
              mids$[mid_encode_f3a12df5] = env->getMethodID(cls, "encode", "(Lorg/apache/lucene/util/OfflineSorter$ByteSequencesWriter;Lorg/apache/lucene/store/ByteArrayDataOutput;[BLorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;Ljava/util/Set;J)V");
              mids$[mid_decodeContexts_8a3417ec] = env->getMethodID(cls, "decodeContexts", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/store/ByteArrayDataInput;)Ljava/util/Set;");
              mids$[mid_decodePayload_62b5ed46] = env->getMethodID(cls, "decodePayload", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/store/ByteArrayDataInput;)Lorg/apache/lucene/util/BytesRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedInputIterator::SortedInputIterator(const ::org::apache::lucene::search::suggest::InputIterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1754a234, a0.this$)) {}

          SortedInputIterator::SortedInputIterator(const ::org::apache::lucene::search::suggest::InputIterator & a0, const ::java::util::Comparator & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a76164a7, a0.this$, a1.this$)) {}

          ::java::util::Set SortedInputIterator::contexts() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_contexts_03e99967]));
          }

          ::java::util::Comparator SortedInputIterator::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          jboolean SortedInputIterator::hasContexts() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasContexts_54c6a16a]);
          }

          jboolean SortedInputIterator::hasPayloads() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
          }

          ::org::apache::lucene::util::BytesRef SortedInputIterator::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
          }

          ::org::apache::lucene::util::BytesRef SortedInputIterator::payload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_payload_4ae19461]));
          }

          jlong SortedInputIterator::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_SortedInputIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedInputIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SortedInputIterator_init_(t_SortedInputIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SortedInputIterator_contexts(t_SortedInputIterator *self);
          static PyObject *t_SortedInputIterator_getComparator(t_SortedInputIterator *self);
          static PyObject *t_SortedInputIterator_hasContexts(t_SortedInputIterator *self);
          static PyObject *t_SortedInputIterator_hasPayloads(t_SortedInputIterator *self);
          static PyObject *t_SortedInputIterator_next(t_SortedInputIterator *self);
          static PyObject *t_SortedInputIterator_payload(t_SortedInputIterator *self);
          static PyObject *t_SortedInputIterator_weight(t_SortedInputIterator *self);
          static PyObject *t_SortedInputIterator_get__comparator(t_SortedInputIterator *self, void *data);
          static PyGetSetDef t_SortedInputIterator__fields_[] = {
            DECLARE_GET_FIELD(t_SortedInputIterator, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SortedInputIterator__methods_[] = {
            DECLARE_METHOD(t_SortedInputIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedInputIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedInputIterator, contexts, METH_NOARGS),
            DECLARE_METHOD(t_SortedInputIterator, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_SortedInputIterator, hasContexts, METH_NOARGS),
            DECLARE_METHOD(t_SortedInputIterator, hasPayloads, METH_NOARGS),
            DECLARE_METHOD(t_SortedInputIterator, next, METH_NOARGS),
            DECLARE_METHOD(t_SortedInputIterator, payload, METH_NOARGS),
            DECLARE_METHOD(t_SortedInputIterator, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedInputIterator, t_SortedInputIterator, ::java::lang::Object, SortedInputIterator, t_SortedInputIterator_init_, PyObject_SelfIter, ((PyObject *(*)(t_SortedInputIterator *)) get_next< t_SortedInputIterator,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_SortedInputIterator__fields_, 0, 0);

          void t_SortedInputIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedInputIterator), module, "SortedInputIterator", 0);
          }

          void t_SortedInputIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedInputIterator).tp_dict, "class_", make_descriptor(SortedInputIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedInputIterator).tp_dict, "wrapfn_", make_descriptor(t_SortedInputIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedInputIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SortedInputIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedInputIterator::initializeClass, 1)))
              return NULL;
            return t_SortedInputIterator::wrap_Object(SortedInputIterator(((t_SortedInputIterator *) arg)->object.this$));
          }
          static PyObject *t_SortedInputIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedInputIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SortedInputIterator_init_(t_SortedInputIterator *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);
                SortedInputIterator object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
                {
                  INT_CALL(object = SortedInputIterator(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);
                ::java::util::Comparator a1((jobject) NULL);
                PyTypeObject **p1;
                SortedInputIterator object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, ::java::util::Comparator::initializeClass, &a0, &a1, &p1, ::java::util::t_Comparator::parameters_))
                {
                  INT_CALL(object = SortedInputIterator(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SortedInputIterator_contexts(t_SortedInputIterator *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.contexts());
            return ::java::util::t_Set::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_SortedInputIterator_getComparator(t_SortedInputIterator *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_SortedInputIterator_hasContexts(t_SortedInputIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasContexts());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SortedInputIterator_hasPayloads(t_SortedInputIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasPayloads());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SortedInputIterator_next(t_SortedInputIterator *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_SortedInputIterator_payload(t_SortedInputIterator *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.payload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_SortedInputIterator_weight(t_SortedInputIterator *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_SortedInputIterator_get__comparator(t_SortedInputIterator *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/jaspell/JaspellLookup.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/util/Set.h"
#include "java/util/List.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace jaspell {

            ::java::lang::Class *JaspellLookup::class$ = NULL;
            jmethodID *JaspellLookup::mids$ = NULL;
            bool JaspellLookup::live$ = false;

            jclass JaspellLookup::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/jaspell/JaspellLookup");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_add_cb8bea96] = env->getMethodID(cls, "add", "(Ljava/lang/CharSequence;Ljava/lang/Object;)Z");
                mids$[mid_build_1754a234] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_get_a739ccff] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getCount_54c6a17a] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_f5d6a55d] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_store_27875f5b] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            JaspellLookup::JaspellLookup() : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            jboolean JaspellLookup::add(const ::java::lang::CharSequence & a0, const ::java::lang::Object & a1) const
            {
              return env->callBooleanMethod(this$, mids$[mid_add_cb8bea96], a0.this$, a1.this$);
            }

            void JaspellLookup::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_1754a234], a0.this$);
            }

            ::java::lang::Object JaspellLookup::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a739ccff], a0.this$));
            }

            jlong JaspellLookup::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_54c6a17a]);
            }

            jboolean JaspellLookup::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_f5d6a55d], a0.this$);
            }

            ::java::util::List JaspellLookup::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
            }

            jlong JaspellLookup::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
            }

            jboolean JaspellLookup::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_27875f5b], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace jaspell {
            static PyObject *t_JaspellLookup_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_JaspellLookup_instance_(PyTypeObject *type, PyObject *arg);
            static int t_JaspellLookup_init_(t_JaspellLookup *self, PyObject *args, PyObject *kwds);
            static PyObject *t_JaspellLookup_add(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_build(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_get(t_JaspellLookup *self, PyObject *arg);
            static PyObject *t_JaspellLookup_getCount(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_load(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_lookup(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_ramBytesUsed(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_store(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_get__count(t_JaspellLookup *self, void *data);
            static PyGetSetDef t_JaspellLookup__fields_[] = {
              DECLARE_GET_FIELD(t_JaspellLookup, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_JaspellLookup__methods_[] = {
              DECLARE_METHOD(t_JaspellLookup, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JaspellLookup, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JaspellLookup, add, METH_VARARGS),
              DECLARE_METHOD(t_JaspellLookup, build, METH_VARARGS),
              DECLARE_METHOD(t_JaspellLookup, get, METH_O),
              DECLARE_METHOD(t_JaspellLookup, getCount, METH_VARARGS),
              DECLARE_METHOD(t_JaspellLookup, load, METH_VARARGS),
              DECLARE_METHOD(t_JaspellLookup, lookup, METH_VARARGS),
              DECLARE_METHOD(t_JaspellLookup, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_JaspellLookup, store, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(JaspellLookup, t_JaspellLookup, ::org::apache::lucene::search::suggest::Lookup, JaspellLookup, t_JaspellLookup_init_, 0, 0, t_JaspellLookup__fields_, 0, 0);

            void t_JaspellLookup::install(PyObject *module)
            {
              installType(&PY_TYPE(JaspellLookup), module, "JaspellLookup", 0);
            }

            void t_JaspellLookup::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(JaspellLookup).tp_dict, "class_", make_descriptor(JaspellLookup::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(JaspellLookup).tp_dict, "wrapfn_", make_descriptor(t_JaspellLookup::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(JaspellLookup).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_JaspellLookup_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, JaspellLookup::initializeClass, 1)))
                return NULL;
              return t_JaspellLookup::wrap_Object(JaspellLookup(((t_JaspellLookup *) arg)->object.this$));
            }
            static PyObject *t_JaspellLookup_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, JaspellLookup::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_JaspellLookup_init_(t_JaspellLookup *self, PyObject *args, PyObject *kwds)
            {
              JaspellLookup object((jobject) NULL);

              INT_CALL(object = JaspellLookup());
              self->object = object;

              return 0;
            }

            static PyObject *t_JaspellLookup_add(t_JaspellLookup *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object a1((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "Oo", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
              {
                OBJ_CALL(result = self->object.add(a0, a1));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "add", args);
              return NULL;
            }

            static PyObject *t_JaspellLookup_build(t_JaspellLookup *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.build(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(JaspellLookup), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_JaspellLookup_get(t_JaspellLookup *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_JaspellLookup_getCount(t_JaspellLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(JaspellLookup), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_JaspellLookup_load(t_JaspellLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(JaspellLookup), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_JaspellLookup_lookup(t_JaspellLookup *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              jint a3;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
              }

              return callSuper(&PY_TYPE(JaspellLookup), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_JaspellLookup_ramBytesUsed(t_JaspellLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(JaspellLookup), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_JaspellLookup_store(t_JaspellLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(JaspellLookup), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_JaspellLookup_get__count(t_JaspellLookup *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BooleanClause$Occur::class$ = NULL;
        jmethodID *BooleanClause$Occur::mids$ = NULL;
        bool BooleanClause$Occur::live$ = false;
        BooleanClause$Occur *BooleanClause$Occur::MUST = NULL;
        BooleanClause$Occur *BooleanClause$Occur::MUST_NOT = NULL;
        BooleanClause$Occur *BooleanClause$Occur::SHOULD = NULL;

        jclass BooleanClause$Occur::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BooleanClause$Occur");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_af513d37] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/BooleanClause$Occur;");
            mids$[mid_values_e84c4b69] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/BooleanClause$Occur;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            MUST = new BooleanClause$Occur(env->getStaticObjectField(cls, "MUST", "Lorg/apache/lucene/search/BooleanClause$Occur;"));
            MUST_NOT = new BooleanClause$Occur(env->getStaticObjectField(cls, "MUST_NOT", "Lorg/apache/lucene/search/BooleanClause$Occur;"));
            SHOULD = new BooleanClause$Occur(env->getStaticObjectField(cls, "SHOULD", "Lorg/apache/lucene/search/BooleanClause$Occur;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BooleanClause$Occur BooleanClause$Occur::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return BooleanClause$Occur(env->callStaticObjectMethod(cls, mids$[mid_valueOf_af513d37], a0.this$));
        }

        JArray< BooleanClause$Occur > BooleanClause$Occur::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< BooleanClause$Occur >(env->callStaticObjectMethod(cls, mids$[mid_values_e84c4b69]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BooleanClause$Occur_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanClause$Occur_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanClause$Occur_of_(t_BooleanClause$Occur *self, PyObject *args);
        static PyObject *t_BooleanClause$Occur_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_BooleanClause$Occur_values(PyTypeObject *type);
        static PyObject *t_BooleanClause$Occur_get__parameters_(t_BooleanClause$Occur *self, void *data);
        static PyGetSetDef t_BooleanClause$Occur__fields_[] = {
          DECLARE_GET_FIELD(t_BooleanClause$Occur, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BooleanClause$Occur__methods_[] = {
          DECLARE_METHOD(t_BooleanClause$Occur, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanClause$Occur, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanClause$Occur, of_, METH_VARARGS),
          DECLARE_METHOD(t_BooleanClause$Occur, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BooleanClause$Occur, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BooleanClause$Occur, t_BooleanClause$Occur, ::java::lang::Enum, BooleanClause$Occur, abstract_init, 0, 0, t_BooleanClause$Occur__fields_, 0, 0);
        PyObject *t_BooleanClause$Occur::wrap_Object(const BooleanClause$Occur& object, PyTypeObject *p0)
        {
          PyObject *obj = t_BooleanClause$Occur::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_BooleanClause$Occur *self = (t_BooleanClause$Occur *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_BooleanClause$Occur::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_BooleanClause$Occur::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_BooleanClause$Occur *self = (t_BooleanClause$Occur *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_BooleanClause$Occur::install(PyObject *module)
        {
          installType(&PY_TYPE(BooleanClause$Occur), module, "BooleanClause$Occur", 0);
        }

        void t_BooleanClause$Occur::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BooleanClause$Occur).tp_dict, "class_", make_descriptor(BooleanClause$Occur::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BooleanClause$Occur).tp_dict, "wrapfn_", make_descriptor(t_BooleanClause$Occur::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BooleanClause$Occur).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(BooleanClause$Occur::initializeClass);
          PyDict_SetItemString(PY_TYPE(BooleanClause$Occur).tp_dict, "MUST", make_descriptor(t_BooleanClause$Occur::wrap_Object(*BooleanClause$Occur::MUST)));
          PyDict_SetItemString(PY_TYPE(BooleanClause$Occur).tp_dict, "MUST_NOT", make_descriptor(t_BooleanClause$Occur::wrap_Object(*BooleanClause$Occur::MUST_NOT)));
          PyDict_SetItemString(PY_TYPE(BooleanClause$Occur).tp_dict, "SHOULD", make_descriptor(t_BooleanClause$Occur::wrap_Object(*BooleanClause$Occur::SHOULD)));
        }

        static PyObject *t_BooleanClause$Occur_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BooleanClause$Occur::initializeClass, 1)))
            return NULL;
          return t_BooleanClause$Occur::wrap_Object(BooleanClause$Occur(((t_BooleanClause$Occur *) arg)->object.this$));
        }
        static PyObject *t_BooleanClause$Occur_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BooleanClause$Occur::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BooleanClause$Occur_of_(t_BooleanClause$Occur *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_BooleanClause$Occur_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          BooleanClause$Occur result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::BooleanClause$Occur::valueOf(a0));
            return t_BooleanClause$Occur::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_BooleanClause$Occur_values(PyTypeObject *type)
        {
          JArray< BooleanClause$Occur > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::BooleanClause$Occur::values());
          return JArray<jobject>(result.this$).wrap(t_BooleanClause$Occur::wrap_jobject);
        }
        static PyObject *t_BooleanClause$Occur_get__parameters_(t_BooleanClause$Occur *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/IDFValueSource.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *IDFValueSource::class$ = NULL;
            jmethodID *IDFValueSource::mids$ = NULL;
            bool IDFValueSource::live$ = false;

            jclass IDFValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/IDFValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b45b6622] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            IDFValueSource::IDFValueSource(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3) : ::org::apache::lucene::queries::function::valuesource::DocFreqValueSource(env->newObject(initializeClass, &mids$, mid_init$_b45b6622, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues IDFValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            ::java::lang::String IDFValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_IDFValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_IDFValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_IDFValueSource_init_(t_IDFValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_IDFValueSource_getValues(t_IDFValueSource *self, PyObject *args);
            static PyObject *t_IDFValueSource_name(t_IDFValueSource *self, PyObject *args);

            static PyMethodDef t_IDFValueSource__methods_[] = {
              DECLARE_METHOD(t_IDFValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IDFValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IDFValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_IDFValueSource, name, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(IDFValueSource, t_IDFValueSource, ::org::apache::lucene::queries::function::valuesource::DocFreqValueSource, IDFValueSource, t_IDFValueSource_init_, 0, 0, 0, 0, 0);

            void t_IDFValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(IDFValueSource), module, "IDFValueSource", 0);
            }

            void t_IDFValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(IDFValueSource).tp_dict, "class_", make_descriptor(IDFValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(IDFValueSource).tp_dict, "wrapfn_", make_descriptor(t_IDFValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(IDFValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_IDFValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, IDFValueSource::initializeClass, 1)))
                return NULL;
              return t_IDFValueSource::wrap_Object(IDFValueSource(((t_IDFValueSource *) arg)->object.this$));
            }
            static PyObject *t_IDFValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, IDFValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_IDFValueSource_init_(t_IDFValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              IDFValueSource object((jobject) NULL);

              if (!parseArgs(args, "sssk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = IDFValueSource(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_IDFValueSource_getValues(t_IDFValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(IDFValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_IDFValueSource_name(t_IDFValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.name());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(IDFValueSource), (PyObject *) self, "name", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sinks/TokenTypeSinkFilter.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {

          ::java::lang::Class *TokenTypeSinkFilter::class$ = NULL;
          jmethodID *TokenTypeSinkFilter::mids$ = NULL;
          bool TokenTypeSinkFilter::live$ = false;

          jclass TokenTypeSinkFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sinks/TokenTypeSinkFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_accept_aea2d6e6] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/AttributeSource;)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenTypeSinkFilter::TokenTypeSinkFilter(const ::java::lang::String & a0) : ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          jboolean TokenTypeSinkFilter::accept(const ::org::apache::lucene::util::AttributeSource & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_aea2d6e6], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {
          static PyObject *t_TokenTypeSinkFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenTypeSinkFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenTypeSinkFilter_init_(t_TokenTypeSinkFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenTypeSinkFilter_accept(t_TokenTypeSinkFilter *self, PyObject *args);

          static PyMethodDef t_TokenTypeSinkFilter__methods_[] = {
            DECLARE_METHOD(t_TokenTypeSinkFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenTypeSinkFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenTypeSinkFilter, accept, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenTypeSinkFilter, t_TokenTypeSinkFilter, ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter, TokenTypeSinkFilter, t_TokenTypeSinkFilter_init_, 0, 0, 0, 0, 0);

          void t_TokenTypeSinkFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenTypeSinkFilter), module, "TokenTypeSinkFilter", 0);
          }

          void t_TokenTypeSinkFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenTypeSinkFilter).tp_dict, "class_", make_descriptor(TokenTypeSinkFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenTypeSinkFilter).tp_dict, "wrapfn_", make_descriptor(t_TokenTypeSinkFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenTypeSinkFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenTypeSinkFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenTypeSinkFilter::initializeClass, 1)))
              return NULL;
            return t_TokenTypeSinkFilter::wrap_Object(TokenTypeSinkFilter(((t_TokenTypeSinkFilter *) arg)->object.this$));
          }
          static PyObject *t_TokenTypeSinkFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenTypeSinkFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenTypeSinkFilter_init_(t_TokenTypeSinkFilter *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            TokenTypeSinkFilter object((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              INT_CALL(object = TokenTypeSinkFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenTypeSinkFilter_accept(t_TokenTypeSinkFilter *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeSource a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeSource::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.accept(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TokenTypeSinkFilter), (PyObject *) self, "accept", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessorImpl.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {

              ::java::lang::Class *QueryNodeProcessorImpl::class$ = NULL;
              jmethodID *QueryNodeProcessorImpl::mids$ = NULL;
              bool QueryNodeProcessorImpl::live$ = false;

              jclass QueryNodeProcessorImpl::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessorImpl");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_init$_0b1f7132] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_getQueryConfigHandler_3636d8c3] = env->getMethodID(cls, "getQueryConfigHandler", "()Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setQueryConfigHandler_0b1f7132] = env->getMethodID(cls, "setQueryConfigHandler", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");
                  mids$[mid_processChildren_cc04aeef] = env->getMethodID(cls, "processChildren", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              QueryNodeProcessorImpl::QueryNodeProcessorImpl() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              QueryNodeProcessorImpl::QueryNodeProcessorImpl(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0b1f7132, a0.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler QueryNodeProcessorImpl::getQueryConfigHandler() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->callObjectMethod(this$, mids$[mid_getQueryConfigHandler_3636d8c3]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeProcessorImpl::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }

              void QueryNodeProcessorImpl::setQueryConfigHandler(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setQueryConfigHandler_0b1f7132], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {
              static PyObject *t_QueryNodeProcessorImpl_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeProcessorImpl_instance_(PyTypeObject *type, PyObject *arg);
              static int t_QueryNodeProcessorImpl_init_(t_QueryNodeProcessorImpl *self, PyObject *args, PyObject *kwds);
              static PyObject *t_QueryNodeProcessorImpl_getQueryConfigHandler(t_QueryNodeProcessorImpl *self);
              static PyObject *t_QueryNodeProcessorImpl_process(t_QueryNodeProcessorImpl *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorImpl_setQueryConfigHandler(t_QueryNodeProcessorImpl *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorImpl_get__queryConfigHandler(t_QueryNodeProcessorImpl *self, void *data);
              static int t_QueryNodeProcessorImpl_set__queryConfigHandler(t_QueryNodeProcessorImpl *self, PyObject *arg, void *data);
              static PyGetSetDef t_QueryNodeProcessorImpl__fields_[] = {
                DECLARE_GETSET_FIELD(t_QueryNodeProcessorImpl, queryConfigHandler),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_QueryNodeProcessorImpl__methods_[] = {
                DECLARE_METHOD(t_QueryNodeProcessorImpl, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeProcessorImpl, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeProcessorImpl, getQueryConfigHandler, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessorImpl, process, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorImpl, setQueryConfigHandler, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryNodeProcessorImpl, t_QueryNodeProcessorImpl, ::java::lang::Object, QueryNodeProcessorImpl, t_QueryNodeProcessorImpl_init_, 0, 0, t_QueryNodeProcessorImpl__fields_, 0, 0);

              void t_QueryNodeProcessorImpl::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryNodeProcessorImpl), module, "QueryNodeProcessorImpl", 0);
              }

              void t_QueryNodeProcessorImpl::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessorImpl).tp_dict, "class_", make_descriptor(QueryNodeProcessorImpl::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessorImpl).tp_dict, "wrapfn_", make_descriptor(t_QueryNodeProcessorImpl::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessorImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryNodeProcessorImpl_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryNodeProcessorImpl::initializeClass, 1)))
                  return NULL;
                return t_QueryNodeProcessorImpl::wrap_Object(QueryNodeProcessorImpl(((t_QueryNodeProcessorImpl *) arg)->object.this$));
              }
              static PyObject *t_QueryNodeProcessorImpl_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryNodeProcessorImpl::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_QueryNodeProcessorImpl_init_(t_QueryNodeProcessorImpl *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    QueryNodeProcessorImpl object((jobject) NULL);

                    INT_CALL(object = QueryNodeProcessorImpl());
                    self->object = object;
                    break;
                  }
                  goto err;
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                    QueryNodeProcessorImpl object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                    {
                      INT_CALL(object = QueryNodeProcessorImpl(a0));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_QueryNodeProcessorImpl_getQueryConfigHandler(t_QueryNodeProcessorImpl *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler result((jobject) NULL);
                OBJ_CALL(result = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(result);
              }

              static PyObject *t_QueryNodeProcessorImpl_process(t_QueryNodeProcessorImpl *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "process", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorImpl_setQueryConfigHandler(t_QueryNodeProcessorImpl *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setQueryConfigHandler(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setQueryConfigHandler", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorImpl_get__queryConfigHandler(t_QueryNodeProcessorImpl *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                OBJ_CALL(value = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(value);
              }
              static int t_QueryNodeProcessorImpl_set__queryConfigHandler(t_QueryNodeProcessorImpl *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &value))
                  {
                    INT_CALL(self->object.setQueryConfigHandler(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "queryConfigHandler", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fa/PersianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {

          ::java::lang::Class *PersianAnalyzer::class$ = NULL;
          jmethodID *PersianAnalyzer::mids$ = NULL;
          bool PersianAnalyzer::live$ = false;
          ::java::lang::String *PersianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;
          ::java::lang::String *PersianAnalyzer::STOPWORDS_COMMENT = NULL;

          jclass PersianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fa/PersianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_initReader_d8fb1c81] = env->getMethodID(cls, "initReader", "(Ljava/lang/String;Ljava/io/Reader;)Ljava/io/Reader;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              STOPWORDS_COMMENT = new ::java::lang::String(env->getStaticObjectField(cls, "STOPWORDS_COMMENT", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PersianAnalyzer::PersianAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          PersianAnalyzer::PersianAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          PersianAnalyzer::PersianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          PersianAnalyzer::PersianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet PersianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {
          static PyObject *t_PersianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PersianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PersianAnalyzer_init_(t_PersianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PersianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_PersianAnalyzer_get__defaultStopSet(t_PersianAnalyzer *self, void *data);
          static PyGetSetDef t_PersianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_PersianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PersianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_PersianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PersianAnalyzer, t_PersianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, PersianAnalyzer, t_PersianAnalyzer_init_, 0, 0, t_PersianAnalyzer__fields_, 0, 0);

          void t_PersianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(PersianAnalyzer), module, "PersianAnalyzer", 0);
          }

          void t_PersianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PersianAnalyzer).tp_dict, "class_", make_descriptor(PersianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PersianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_PersianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PersianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PersianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(PersianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*PersianAnalyzer::DEFAULT_STOPWORD_FILE)));
            PyDict_SetItemString(PY_TYPE(PersianAnalyzer).tp_dict, "STOPWORDS_COMMENT", make_descriptor(j2p(*PersianAnalyzer::STOPWORDS_COMMENT)));
          }

          static PyObject *t_PersianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PersianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_PersianAnalyzer::wrap_Object(PersianAnalyzer(((t_PersianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_PersianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PersianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PersianAnalyzer_init_(t_PersianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                PersianAnalyzer object((jobject) NULL);

                INT_CALL(object = PersianAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                PersianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = PersianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PersianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = PersianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                PersianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = PersianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PersianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::fa::PersianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_PersianAnalyzer_get__defaultStopSet(t_PersianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexFileNames.h"
#include "java/util/regex/Pattern.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexFileNames::class$ = NULL;
        jmethodID *IndexFileNames::mids$ = NULL;
        bool IndexFileNames::live$ = false;
        ::java::util::regex::Pattern *IndexFileNames::CODEC_FILE_PATTERN = NULL;
        ::java::lang::String *IndexFileNames::COMPOUND_FILE_ENTRIES_EXTENSION = NULL;
        ::java::lang::String *IndexFileNames::COMPOUND_FILE_EXTENSION = NULL;
        ::java::lang::String *IndexFileNames::GEN_EXTENSION = NULL;
        JArray< ::java::lang::String > *IndexFileNames::INDEX_EXTENSIONS = NULL;
        ::java::lang::String *IndexFileNames::SEGMENTS = NULL;
        ::java::lang::String *IndexFileNames::SEGMENTS_GEN = NULL;

        jclass IndexFileNames::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexFileNames");

            mids$ = new jmethodID[max_mid];
            mids$[mid_fileNameFromGeneration_7a384922] = env->getStaticMethodID(cls, "fileNameFromGeneration", "(Ljava/lang/String;Ljava/lang/String;J)Ljava/lang/String;");
            mids$[mid_getExtension_97a5258f] = env->getStaticMethodID(cls, "getExtension", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_matchesExtension_4a26474e] = env->getStaticMethodID(cls, "matchesExtension", "(Ljava/lang/String;Ljava/lang/String;)Z");
            mids$[mid_parseGeneration_5fdc3f54] = env->getStaticMethodID(cls, "parseGeneration", "(Ljava/lang/String;)J");
            mids$[mid_parseSegmentName_97a5258f] = env->getStaticMethodID(cls, "parseSegmentName", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_segmentFileName_af6d27e3] = env->getStaticMethodID(cls, "segmentFileName", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_stripExtension_97a5258f] = env->getStaticMethodID(cls, "stripExtension", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_stripSegmentName_97a5258f] = env->getStaticMethodID(cls, "stripSegmentName", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            CODEC_FILE_PATTERN = new ::java::util::regex::Pattern(env->getStaticObjectField(cls, "CODEC_FILE_PATTERN", "Ljava/util/regex/Pattern;"));
            COMPOUND_FILE_ENTRIES_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "COMPOUND_FILE_ENTRIES_EXTENSION", "Ljava/lang/String;"));
            COMPOUND_FILE_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "COMPOUND_FILE_EXTENSION", "Ljava/lang/String;"));
            GEN_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "GEN_EXTENSION", "Ljava/lang/String;"));
            INDEX_EXTENSIONS = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "INDEX_EXTENSIONS", "[Ljava/lang/String;"));
            SEGMENTS = new ::java::lang::String(env->getStaticObjectField(cls, "SEGMENTS", "Ljava/lang/String;"));
            SEGMENTS_GEN = new ::java::lang::String(env->getStaticObjectField(cls, "SEGMENTS_GEN", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String IndexFileNames::fileNameFromGeneration(const ::java::lang::String & a0, const ::java::lang::String & a1, jlong a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_fileNameFromGeneration_7a384922], a0.this$, a1.this$, a2));
        }

        ::java::lang::String IndexFileNames::getExtension(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getExtension_97a5258f], a0.this$));
        }

        jboolean IndexFileNames::matchesExtension(const ::java::lang::String & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_matchesExtension_4a26474e], a0.this$, a1.this$);
        }

        jlong IndexFileNames::parseGeneration(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_parseGeneration_5fdc3f54], a0.this$);
        }

        ::java::lang::String IndexFileNames::parseSegmentName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_parseSegmentName_97a5258f], a0.this$));
        }

        ::java::lang::String IndexFileNames::segmentFileName(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_segmentFileName_af6d27e3], a0.this$, a1.this$, a2.this$));
        }

        ::java::lang::String IndexFileNames::stripExtension(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_stripExtension_97a5258f], a0.this$));
        }

        ::java::lang::String IndexFileNames::stripSegmentName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_stripSegmentName_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexFileNames_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFileNames_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFileNames_fileNameFromGeneration(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexFileNames_getExtension(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFileNames_matchesExtension(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexFileNames_parseGeneration(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFileNames_parseSegmentName(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFileNames_segmentFileName(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexFileNames_stripExtension(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFileNames_stripSegmentName(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_IndexFileNames__methods_[] = {
          DECLARE_METHOD(t_IndexFileNames, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, fileNameFromGeneration, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, getExtension, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, matchesExtension, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, parseGeneration, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, parseSegmentName, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, segmentFileName, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, stripExtension, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, stripSegmentName, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexFileNames, t_IndexFileNames, ::java::lang::Object, IndexFileNames, abstract_init, 0, 0, 0, 0, 0);

        void t_IndexFileNames::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexFileNames), module, "IndexFileNames", 0);
        }

        void t_IndexFileNames::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "class_", make_descriptor(IndexFileNames::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "wrapfn_", make_descriptor(t_IndexFileNames::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IndexFileNames::initializeClass);
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "CODEC_FILE_PATTERN", make_descriptor(::java::util::regex::t_Pattern::wrap_Object(*IndexFileNames::CODEC_FILE_PATTERN)));
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "COMPOUND_FILE_ENTRIES_EXTENSION", make_descriptor(j2p(*IndexFileNames::COMPOUND_FILE_ENTRIES_EXTENSION)));
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "COMPOUND_FILE_EXTENSION", make_descriptor(j2p(*IndexFileNames::COMPOUND_FILE_EXTENSION)));
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "GEN_EXTENSION", make_descriptor(j2p(*IndexFileNames::GEN_EXTENSION)));
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "INDEX_EXTENSIONS", make_descriptor(JArray<jstring>(IndexFileNames::INDEX_EXTENSIONS->this$).wrap()));
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "SEGMENTS", make_descriptor(j2p(*IndexFileNames::SEGMENTS)));
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "SEGMENTS_GEN", make_descriptor(j2p(*IndexFileNames::SEGMENTS_GEN)));
        }

        static PyObject *t_IndexFileNames_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexFileNames::initializeClass, 1)))
            return NULL;
          return t_IndexFileNames::wrap_Object(IndexFileNames(((t_IndexFileNames *) arg)->object.this$));
        }
        static PyObject *t_IndexFileNames_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexFileNames::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexFileNames_fileNameFromGeneration(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jlong a2;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "ssJ", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::fileNameFromGeneration(a0, a1, a2));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "fileNameFromGeneration", args);
          return NULL;
        }

        static PyObject *t_IndexFileNames_getExtension(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::getExtension(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "getExtension", arg);
          return NULL;
        }

        static PyObject *t_IndexFileNames_matchesExtension(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::matchesExtension(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "matchesExtension", args);
          return NULL;
        }

        static PyObject *t_IndexFileNames_parseGeneration(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::parseGeneration(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "parseGeneration", arg);
          return NULL;
        }

        static PyObject *t_IndexFileNames_parseSegmentName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::parseSegmentName(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "parseSegmentName", arg);
          return NULL;
        }

        static PyObject *t_IndexFileNames_segmentFileName(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "sss", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::segmentFileName(a0, a1, a2));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "segmentFileName", args);
          return NULL;
        }

        static PyObject *t_IndexFileNames_stripExtension(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::stripExtension(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "stripExtension", arg);
          return NULL;
        }

        static PyObject *t_IndexFileNames_stripSegmentName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::stripSegmentName(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "stripSegmentName", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/KStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *KStemFilterFactory::class$ = NULL;
          jmethodID *KStemFilterFactory::mids$ = NULL;
          bool KStemFilterFactory::live$ = false;

          jclass KStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/KStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_2969f76d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KStemFilterFactory::KStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter KStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_2969f76d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_KStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KStemFilterFactory_init_(t_KStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KStemFilterFactory_create(t_KStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_KStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_KStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KStemFilterFactory, t_KStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, KStemFilterFactory, t_KStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_KStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(KStemFilterFactory), module, "KStemFilterFactory", 0);
          }

          void t_KStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KStemFilterFactory).tp_dict, "class_", make_descriptor(KStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_KStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_KStemFilterFactory::wrap_Object(KStemFilterFactory(((t_KStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_KStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KStemFilterFactory_init_(t_KStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            KStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = KStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KStemFilterFactory_create(t_KStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(KStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace path {

          ::java::lang::Class *ReversePathHierarchyTokenizer::class$ = NULL;
          jmethodID *ReversePathHierarchyTokenizer::mids$ = NULL;
          bool ReversePathHierarchyTokenizer::live$ = false;
          jchar ReversePathHierarchyTokenizer::DEFAULT_DELIMITER = (jchar) 0;
          jint ReversePathHierarchyTokenizer::DEFAULT_SKIP = (jint) 0;

          jclass ReversePathHierarchyTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_8c604f56] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;I)V");
              mids$[mid_init$_e27d22ca] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;CI)V");
              mids$[mid_init$_944d83a2] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;IC)V");
              mids$[mid_init$_94478bac] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;CC)V");
              mids$[mid_init$_94f21e72] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;CCI)V");
              mids$[mid_init$_132ff91e] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;ICC)V");
              mids$[mid_init$_df655116] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;CCI)V");
              mids$[mid_init$_5df3b604] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;ICCI)V");
              mids$[mid_init$_0b338d38] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;ICCI)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_DELIMITER = env->getStaticCharField(cls, "DEFAULT_DELIMITER");
              DEFAULT_SKIP = env->getStaticIntField(cls, "DEFAULT_SKIP");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::java::io::Reader & a0, jint a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_8c604f56, a0.this$, a1)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::java::io::Reader & a0, jchar a1, jint a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_e27d22ca, a0.this$, a1, a2)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::java::io::Reader & a0, jint a1, jchar a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_944d83a2, a0.this$, a1, a2)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::java::io::Reader & a0, jchar a1, jchar a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_94478bac, a0.this$, a1, a2)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::java::io::Reader & a0, jchar a1, jchar a2, jint a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_94f21e72, a0.this$, a1, a2, a3)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::java::io::Reader & a0, jint a1, jchar a2, jchar a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_132ff91e, a0.this$, a1, a2, a3)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, jchar a2, jchar a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_df655116, a0.this$, a1.this$, a2, a3, a4)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::java::io::Reader & a0, jint a1, jchar a2, jchar a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_5df3b604, a0.this$, a1, a2, a3, a4)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, jint a2, jchar a3, jchar a4, jint a5) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_0b338d38, a0.this$, a1.this$, a2, a3, a4, a5)) {}

          void ReversePathHierarchyTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean ReversePathHierarchyTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void ReversePathHierarchyTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace path {
          static PyObject *t_ReversePathHierarchyTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ReversePathHierarchyTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ReversePathHierarchyTokenizer_init_(t_ReversePathHierarchyTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ReversePathHierarchyTokenizer_end(t_ReversePathHierarchyTokenizer *self, PyObject *args);
          static PyObject *t_ReversePathHierarchyTokenizer_incrementToken(t_ReversePathHierarchyTokenizer *self, PyObject *args);
          static PyObject *t_ReversePathHierarchyTokenizer_reset(t_ReversePathHierarchyTokenizer *self, PyObject *args);

          static PyMethodDef t_ReversePathHierarchyTokenizer__methods_[] = {
            DECLARE_METHOD(t_ReversePathHierarchyTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ReversePathHierarchyTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ReversePathHierarchyTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_ReversePathHierarchyTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ReversePathHierarchyTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ReversePathHierarchyTokenizer, t_ReversePathHierarchyTokenizer, ::org::apache::lucene::analysis::Tokenizer, ReversePathHierarchyTokenizer, t_ReversePathHierarchyTokenizer_init_, 0, 0, 0, 0, 0);

          void t_ReversePathHierarchyTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(ReversePathHierarchyTokenizer), module, "ReversePathHierarchyTokenizer", 0);
          }

          void t_ReversePathHierarchyTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ReversePathHierarchyTokenizer).tp_dict, "class_", make_descriptor(ReversePathHierarchyTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ReversePathHierarchyTokenizer).tp_dict, "wrapfn_", make_descriptor(t_ReversePathHierarchyTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ReversePathHierarchyTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ReversePathHierarchyTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ReversePathHierarchyTokenizer).tp_dict, "DEFAULT_DELIMITER", make_descriptor(ReversePathHierarchyTokenizer::DEFAULT_DELIMITER));
            PyDict_SetItemString(PY_TYPE(ReversePathHierarchyTokenizer).tp_dict, "DEFAULT_SKIP", make_descriptor(ReversePathHierarchyTokenizer::DEFAULT_SKIP));
          }

          static PyObject *t_ReversePathHierarchyTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ReversePathHierarchyTokenizer::initializeClass, 1)))
              return NULL;
            return t_ReversePathHierarchyTokenizer::wrap_Object(ReversePathHierarchyTokenizer(((t_ReversePathHierarchyTokenizer *) arg)->object.this$));
          }
          static PyObject *t_ReversePathHierarchyTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ReversePathHierarchyTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ReversePathHierarchyTokenizer_init_(t_ReversePathHierarchyTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kI", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::io::Reader a0((jobject) NULL);
                jchar a1;
                jint a2;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kCI", ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                jchar a2;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kIC", ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                jchar a1;
                jchar a2;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kCC", ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::io::Reader a0((jobject) NULL);
                jchar a1;
                jchar a2;
                jint a3;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kCCI", ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                jchar a2;
                jchar a3;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kICC", ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jchar a2;
                jchar a3;
                jint a4;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkCCI", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                jchar a2;
                jchar a3;
                jint a4;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kICCI", ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 6:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                jchar a3;
                jchar a4;
                jint a5;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkICCI", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ReversePathHierarchyTokenizer_end(t_ReversePathHierarchyTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ReversePathHierarchyTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_ReversePathHierarchyTokenizer_incrementToken(t_ReversePathHierarchyTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ReversePathHierarchyTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ReversePathHierarchyTokenizer_reset(t_ReversePathHierarchyTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ReversePathHierarchyTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene49/Lucene49DocValuesFormat.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene49 {

          ::java::lang::Class *Lucene49DocValuesFormat::class$ = NULL;
          jmethodID *Lucene49DocValuesFormat::mids$ = NULL;
          bool Lucene49DocValuesFormat::live$ = false;

          jclass Lucene49DocValuesFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene49/Lucene49DocValuesFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsConsumer_025deb44] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_fieldsProducer_9b0d4e4a] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene49DocValuesFormat::Lucene49DocValuesFormat() : ::org::apache::lucene::codecs::DocValuesFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer Lucene49DocValuesFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_025deb44], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer Lucene49DocValuesFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_9b0d4e4a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene49 {
          static PyObject *t_Lucene49DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene49DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene49DocValuesFormat_init_(t_Lucene49DocValuesFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene49DocValuesFormat_fieldsConsumer(t_Lucene49DocValuesFormat *self, PyObject *args);
          static PyObject *t_Lucene49DocValuesFormat_fieldsProducer(t_Lucene49DocValuesFormat *self, PyObject *args);

          static PyMethodDef t_Lucene49DocValuesFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene49DocValuesFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene49DocValuesFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene49DocValuesFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49DocValuesFormat, fieldsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene49DocValuesFormat, t_Lucene49DocValuesFormat, ::org::apache::lucene::codecs::DocValuesFormat, Lucene49DocValuesFormat, t_Lucene49DocValuesFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene49DocValuesFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene49DocValuesFormat), module, "Lucene49DocValuesFormat", 0);
          }

          void t_Lucene49DocValuesFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene49DocValuesFormat).tp_dict, "class_", make_descriptor(Lucene49DocValuesFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene49DocValuesFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene49DocValuesFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene49DocValuesFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene49DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene49DocValuesFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene49DocValuesFormat::wrap_Object(Lucene49DocValuesFormat(((t_Lucene49DocValuesFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene49DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene49DocValuesFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene49DocValuesFormat_init_(t_Lucene49DocValuesFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene49DocValuesFormat object((jobject) NULL);

            INT_CALL(object = Lucene49DocValuesFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene49DocValuesFormat_fieldsConsumer(t_Lucene49DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49DocValuesFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_Lucene49DocValuesFormat_fieldsProducer(t_Lucene49DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49DocValuesFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap$Parser.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/CharsRefBuilder.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *SynonymMap$Parser::class$ = NULL;
          jmethodID *SynonymMap$Parser::mids$ = NULL;
          bool SynonymMap$Parser::live$ = false;

          jclass SynonymMap$Parser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/SynonymMap$Parser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8ce78b37] = env->getMethodID(cls, "<init>", "(ZLorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_analyze_8e7b35f5] = env->getMethodID(cls, "analyze", "(Ljava/lang/String;Lorg/apache/lucene/util/CharsRefBuilder;)Lorg/apache/lucene/util/CharsRef;");
              mids$[mid_parse_cf2e3c10] = env->getMethodID(cls, "parse", "(Ljava/io/Reader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SynonymMap$Parser::SynonymMap$Parser(jboolean a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::analysis::synonym::SynonymMap$Builder(env->newObject(initializeClass, &mids$, mid_init$_8ce78b37, a0, a1.this$)) {}

          ::org::apache::lucene::util::CharsRef SynonymMap$Parser::analyze(const ::java::lang::String & a0, const ::org::apache::lucene::util::CharsRefBuilder & a1) const
          {
            return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_analyze_8e7b35f5], a0.this$, a1.this$));
          }

          void SynonymMap$Parser::parse(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_parse_cf2e3c10], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_SynonymMap$Parser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SynonymMap$Parser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SynonymMap$Parser_init_(t_SynonymMap$Parser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SynonymMap$Parser_analyze(t_SynonymMap$Parser *self, PyObject *args);
          static PyObject *t_SynonymMap$Parser_parse(t_SynonymMap$Parser *self, PyObject *arg);

          static PyMethodDef t_SynonymMap$Parser__methods_[] = {
            DECLARE_METHOD(t_SynonymMap$Parser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymMap$Parser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymMap$Parser, analyze, METH_VARARGS),
            DECLARE_METHOD(t_SynonymMap$Parser, parse, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SynonymMap$Parser, t_SynonymMap$Parser, ::org::apache::lucene::analysis::synonym::SynonymMap$Builder, SynonymMap$Parser, t_SynonymMap$Parser_init_, 0, 0, 0, 0, 0);

          void t_SynonymMap$Parser::install(PyObject *module)
          {
            installType(&PY_TYPE(SynonymMap$Parser), module, "SynonymMap$Parser", 0);
          }

          void t_SynonymMap$Parser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SynonymMap$Parser).tp_dict, "class_", make_descriptor(SynonymMap$Parser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SynonymMap$Parser).tp_dict, "wrapfn_", make_descriptor(t_SynonymMap$Parser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SynonymMap$Parser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SynonymMap$Parser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SynonymMap$Parser::initializeClass, 1)))
              return NULL;
            return t_SynonymMap$Parser::wrap_Object(SynonymMap$Parser(((t_SynonymMap$Parser *) arg)->object.this$));
          }
          static PyObject *t_SynonymMap$Parser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SynonymMap$Parser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SynonymMap$Parser_init_(t_SynonymMap$Parser *self, PyObject *args, PyObject *kwds)
          {
            jboolean a0;
            ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
            SynonymMap$Parser object((jobject) NULL);

            if (!parseArgs(args, "Zk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
            {
              INT_CALL(object = SynonymMap$Parser(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SynonymMap$Parser_analyze(t_SynonymMap$Parser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRefBuilder a1((jobject) NULL);
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::util::CharsRefBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.analyze(a0, a1));
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "analyze", args);
            return NULL;
          }

          static PyObject *t_SynonymMap$Parser_parse(t_SynonymMap$Parser *self, PyObject *arg)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.parse(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "parse", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/std40/StandardTokenizerImpl40.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std40 {

            ::java::lang::Class *StandardTokenizerImpl40::class$ = NULL;
            jmethodID *StandardTokenizerImpl40::mids$ = NULL;
            bool StandardTokenizerImpl40::live$ = false;
            jint StandardTokenizerImpl40::HANGUL_TYPE = (jint) 0;
            jint StandardTokenizerImpl40::HIRAGANA_TYPE = (jint) 0;
            jint StandardTokenizerImpl40::IDEOGRAPHIC_TYPE = (jint) 0;
            jint StandardTokenizerImpl40::KATAKANA_TYPE = (jint) 0;
            jint StandardTokenizerImpl40::NUMERIC_TYPE = (jint) 0;
            jint StandardTokenizerImpl40::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
            jint StandardTokenizerImpl40::WORD_TYPE = (jint) 0;
            jint StandardTokenizerImpl40::YYEOF = (jint) 0;
            jint StandardTokenizerImpl40::YYINITIAL = (jint) 0;

            jclass StandardTokenizerImpl40::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/std40/StandardTokenizerImpl40");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
                mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
                mids$[mid_setBufferSize_39c7bd3c] = env->getMethodID(cls, "setBufferSize", "(I)V");
                mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
                mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
                HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
                IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
                KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
                NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
                SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
                WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
                YYEOF = env->getStaticIntField(cls, "YYEOF");
                YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            StandardTokenizerImpl40::StandardTokenizerImpl40(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

            jint StandardTokenizerImpl40::getNextToken() const
            {
              return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
            }

            void StandardTokenizerImpl40::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
            }

            void StandardTokenizerImpl40::setBufferSize(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setBufferSize_39c7bd3c], a0);
            }

            void StandardTokenizerImpl40::yybegin(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
            }

            jint StandardTokenizerImpl40::yychar() const
            {
              return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
            }

            jchar StandardTokenizerImpl40::yycharat(jint a0) const
            {
              return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
            }

            void StandardTokenizerImpl40::yyclose() const
            {
              env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
            }

            jint StandardTokenizerImpl40::yylength() const
            {
              return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
            }

            void StandardTokenizerImpl40::yypushback(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
            }

            void StandardTokenizerImpl40::yyreset(const ::java::io::Reader & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
            }

            jint StandardTokenizerImpl40::yystate() const
            {
              return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
            }

            ::java::lang::String StandardTokenizerImpl40::yytext() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std40 {
            static PyObject *t_StandardTokenizerImpl40_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl40_instance_(PyTypeObject *type, PyObject *arg);
            static int t_StandardTokenizerImpl40_init_(t_StandardTokenizerImpl40 *self, PyObject *args, PyObject *kwds);
            static PyObject *t_StandardTokenizerImpl40_getNextToken(t_StandardTokenizerImpl40 *self);
            static PyObject *t_StandardTokenizerImpl40_getText(t_StandardTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl40_setBufferSize(t_StandardTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl40_yybegin(t_StandardTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl40_yychar(t_StandardTokenizerImpl40 *self);
            static PyObject *t_StandardTokenizerImpl40_yycharat(t_StandardTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl40_yyclose(t_StandardTokenizerImpl40 *self);
            static PyObject *t_StandardTokenizerImpl40_yylength(t_StandardTokenizerImpl40 *self);
            static PyObject *t_StandardTokenizerImpl40_yypushback(t_StandardTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl40_yyreset(t_StandardTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl40_yystate(t_StandardTokenizerImpl40 *self);
            static PyObject *t_StandardTokenizerImpl40_yytext(t_StandardTokenizerImpl40 *self);
            static int t_StandardTokenizerImpl40_set__bufferSize(t_StandardTokenizerImpl40 *self, PyObject *arg, void *data);
            static PyObject *t_StandardTokenizerImpl40_get__nextToken(t_StandardTokenizerImpl40 *self, void *data);
            static PyGetSetDef t_StandardTokenizerImpl40__fields_[] = {
              DECLARE_SET_FIELD(t_StandardTokenizerImpl40, bufferSize),
              DECLARE_GET_FIELD(t_StandardTokenizerImpl40, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_StandardTokenizerImpl40__methods_[] = {
              DECLARE_METHOD(t_StandardTokenizerImpl40, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardTokenizerImpl40, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardTokenizerImpl40, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl40, getText, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl40, setBufferSize, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yybegin, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yychar, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yycharat, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yyclose, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yylength, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yypushback, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yyreset, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yystate, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yytext, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(StandardTokenizerImpl40, t_StandardTokenizerImpl40, ::java::lang::Object, StandardTokenizerImpl40, t_StandardTokenizerImpl40_init_, 0, 0, t_StandardTokenizerImpl40__fields_, 0, 0);

            void t_StandardTokenizerImpl40::install(PyObject *module)
            {
              installType(&PY_TYPE(StandardTokenizerImpl40), module, "StandardTokenizerImpl40", 0);
            }

            void t_StandardTokenizerImpl40::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "class_", make_descriptor(StandardTokenizerImpl40::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "wrapfn_", make_descriptor(t_StandardTokenizerImpl40::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(StandardTokenizerImpl40::initializeClass);
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "HANGUL_TYPE", make_descriptor(StandardTokenizerImpl40::HANGUL_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "HIRAGANA_TYPE", make_descriptor(StandardTokenizerImpl40::HIRAGANA_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(StandardTokenizerImpl40::IDEOGRAPHIC_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "KATAKANA_TYPE", make_descriptor(StandardTokenizerImpl40::KATAKANA_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "NUMERIC_TYPE", make_descriptor(StandardTokenizerImpl40::NUMERIC_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(StandardTokenizerImpl40::SOUTH_EAST_ASIAN_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "WORD_TYPE", make_descriptor(StandardTokenizerImpl40::WORD_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "YYEOF", make_descriptor(StandardTokenizerImpl40::YYEOF));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "YYINITIAL", make_descriptor(StandardTokenizerImpl40::YYINITIAL));
            }

            static PyObject *t_StandardTokenizerImpl40_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, StandardTokenizerImpl40::initializeClass, 1)))
                return NULL;
              return t_StandardTokenizerImpl40::wrap_Object(StandardTokenizerImpl40(((t_StandardTokenizerImpl40 *) arg)->object.this$));
            }
            static PyObject *t_StandardTokenizerImpl40_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, StandardTokenizerImpl40::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_StandardTokenizerImpl40_init_(t_StandardTokenizerImpl40 *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::Reader a0((jobject) NULL);
              StandardTokenizerImpl40 object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                INT_CALL(object = StandardTokenizerImpl40(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_StandardTokenizerImpl40_getNextToken(t_StandardTokenizerImpl40 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNextToken());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl40_getText(t_StandardTokenizerImpl40 *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
              {
                OBJ_CALL(self->object.getText(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "getText", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl40_setBufferSize(t_StandardTokenizerImpl40 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setBufferSize(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setBufferSize", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl40_yybegin(t_StandardTokenizerImpl40 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yybegin(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl40_yychar(t_StandardTokenizerImpl40 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yychar());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl40_yycharat(t_StandardTokenizerImpl40 *self, PyObject *arg)
            {
              jint a0;
              jchar result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.yycharat(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl40_yyclose(t_StandardTokenizerImpl40 *self)
            {
              OBJ_CALL(self->object.yyclose());
              Py_RETURN_NONE;
            }

            static PyObject *t_StandardTokenizerImpl40_yylength(t_StandardTokenizerImpl40 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yylength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl40_yypushback(t_StandardTokenizerImpl40 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yypushback(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl40_yyreset(t_StandardTokenizerImpl40 *self, PyObject *arg)
            {
              ::java::io::Reader a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
              {
                OBJ_CALL(self->object.yyreset(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl40_yystate(t_StandardTokenizerImpl40 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yystate());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl40_yytext(t_StandardTokenizerImpl40 *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.yytext());
              return j2p(result);
            }

            static int t_StandardTokenizerImpl40_set__bufferSize(t_StandardTokenizerImpl40 *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setBufferSize(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "bufferSize", arg);
              return -1;
            }

            static PyObject *t_StandardTokenizerImpl40_get__nextToken(t_StandardTokenizerImpl40 *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNextToken());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/NumericRangeQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/NumericConfig.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *NumericRangeQueryNode::class$ = NULL;
              jmethodID *NumericRangeQueryNode::mids$ = NULL;
              jfieldID *NumericRangeQueryNode::fids$ = NULL;
              bool NumericRangeQueryNode::live$ = false;

              jclass NumericRangeQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/NumericRangeQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_b6ec7fba] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode;Lorg/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode;ZZLorg/apache/lucene/queryparser/flexible/standard/config/NumericConfig;)V");
                  mids$[mid_getNumericConfig_4e1c9c59] = env->getMethodID(cls, "getNumericConfig", "()Lorg/apache/lucene/queryparser/flexible/standard/config/NumericConfig;");
                  mids$[mid_setBounds_b6ec7fba] = env->getMethodID(cls, "setBounds", "(Lorg/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode;Lorg/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode;ZZLorg/apache/lucene/queryparser/flexible/standard/config/NumericConfig;)V");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  fids$ = new jfieldID[max_fid];
                  fids$[fid_numericConfig] = env->getFieldID(cls, "numericConfig", "Lorg/apache/lucene/queryparser/flexible/standard/config/NumericConfig;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NumericRangeQueryNode::NumericRangeQueryNode(const ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode & a0, const ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode & a1, jboolean a2, jboolean a3, const ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig & a4) : ::org::apache::lucene::queryparser::flexible::standard::nodes::AbstractRangeQueryNode(env->newObject(initializeClass, &mids$, mid_init$_b6ec7fba, a0.this$, a1.this$, a2, a3, a4.this$)) {}

              ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig NumericRangeQueryNode::getNumericConfig() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig(env->callObjectMethod(this$, mids$[mid_getNumericConfig_4e1c9c59]));
              }

              void NumericRangeQueryNode::setBounds(const ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode & a0, const ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode & a1, jboolean a2, jboolean a3, const ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig & a4) const
              {
                env->callVoidMethod(this$, mids$[mid_setBounds_b6ec7fba], a0.this$, a1.this$, a2, a3, a4.this$);
              }

              ::java::lang::String NumericRangeQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }

              ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig NumericRangeQueryNode::_get_numericConfig() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig(env->getObjectField(this$, fids$[fid_numericConfig]));
              }

              void NumericRangeQueryNode::_set_numericConfig(const ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig & a0) const
              {
                env->setObjectField(this$, fids$[fid_numericConfig], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_NumericRangeQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumericRangeQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumericRangeQueryNode_of_(t_NumericRangeQueryNode *self, PyObject *args);
              static int t_NumericRangeQueryNode_init_(t_NumericRangeQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_NumericRangeQueryNode_getNumericConfig(t_NumericRangeQueryNode *self);
              static PyObject *t_NumericRangeQueryNode_setBounds(t_NumericRangeQueryNode *self, PyObject *args);
              static PyObject *t_NumericRangeQueryNode_toString(t_NumericRangeQueryNode *self, PyObject *args);

              static PyObject *t_NumericRangeQueryNode_get__numericConfig(t_NumericRangeQueryNode *self, void *data);
              static PyObject *t_NumericRangeQueryNode_get__parameters_(t_NumericRangeQueryNode *self, void *data);
              static PyGetSetDef t_NumericRangeQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_NumericRangeQueryNode, numericConfig),
                DECLARE_GET_FIELD(t_NumericRangeQueryNode, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_NumericRangeQueryNode__methods_[] = {
                DECLARE_METHOD(t_NumericRangeQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericRangeQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericRangeQueryNode, of_, METH_VARARGS),
                DECLARE_METHOD(t_NumericRangeQueryNode, getNumericConfig, METH_NOARGS),
                DECLARE_METHOD(t_NumericRangeQueryNode, setBounds, METH_VARARGS),
                DECLARE_METHOD(t_NumericRangeQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NumericRangeQueryNode, t_NumericRangeQueryNode, ::org::apache::lucene::queryparser::flexible::standard::nodes::AbstractRangeQueryNode, NumericRangeQueryNode, t_NumericRangeQueryNode_init_, 0, 0, t_NumericRangeQueryNode__fields_, 0, 0);
              PyObject *t_NumericRangeQueryNode::wrap_Object(const NumericRangeQueryNode& object, PyTypeObject *p0)
              {
                PyObject *obj = t_NumericRangeQueryNode::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_NumericRangeQueryNode *self = (t_NumericRangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_NumericRangeQueryNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_NumericRangeQueryNode::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_NumericRangeQueryNode *self = (t_NumericRangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_NumericRangeQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(NumericRangeQueryNode), module, "NumericRangeQueryNode", 0);
              }

              void t_NumericRangeQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNode).tp_dict, "class_", make_descriptor(NumericRangeQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNode).tp_dict, "wrapfn_", make_descriptor(t_NumericRangeQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NumericRangeQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NumericRangeQueryNode::initializeClass, 1)))
                  return NULL;
                return t_NumericRangeQueryNode::wrap_Object(NumericRangeQueryNode(((t_NumericRangeQueryNode *) arg)->object.this$));
              }
              static PyObject *t_NumericRangeQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NumericRangeQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_NumericRangeQueryNode_of_(t_NumericRangeQueryNode *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static int t_NumericRangeQueryNode_init_(t_NumericRangeQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode a1((jobject) NULL);
                jboolean a2;
                jboolean a3;
                ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig a4((jobject) NULL);
                NumericRangeQueryNode object((jobject) NULL);

                if (!parseArgs(args, "kkZZk", ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = NumericRangeQueryNode(a0, a1, a2, a3, a4));
                  self->object = object;
                  self->parameters[0] = &::org::apache::lucene::queryparser::flexible::standard::nodes::PY_TYPE(NumericQueryNode);
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_NumericRangeQueryNode_getNumericConfig(t_NumericRangeQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig result((jobject) NULL);
                OBJ_CALL(result = self->object.getNumericConfig());
                return ::org::apache::lucene::queryparser::flexible::standard::config::t_NumericConfig::wrap_Object(result);
              }

              static PyObject *t_NumericRangeQueryNode_setBounds(t_NumericRangeQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode a1((jobject) NULL);
                jboolean a2;
                jboolean a3;
                ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig a4((jobject) NULL);

                if (!parseArgs(args, "kkZZk", ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.setBounds(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }

                return callSuper(&PY_TYPE(NumericRangeQueryNode), (PyObject *) self, "setBounds", args, 2);
              }

              static PyObject *t_NumericRangeQueryNode_toString(t_NumericRangeQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(NumericRangeQueryNode), (PyObject *) self, "toString", args, 2);
              }
              static PyObject *t_NumericRangeQueryNode_get__parameters_(t_NumericRangeQueryNode *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }

              static PyObject *t_NumericRangeQueryNode_get__numericConfig(t_NumericRangeQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig value((jobject) NULL);
                OBJ_CALL(value = self->object.getNumericConfig());
                return ::org::apache::lucene::queryparser::flexible::standard::config::t_NumericConfig::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ThreadInterruptedException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ThreadInterruptedException::class$ = NULL;
        jmethodID *ThreadInterruptedException::mids$ = NULL;
        bool ThreadInterruptedException::live$ = false;

        jclass ThreadInterruptedException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ThreadInterruptedException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f201c224] = env->getMethodID(cls, "<init>", "(Ljava/lang/InterruptedException;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ThreadInterruptedException::ThreadInterruptedException(const ::java::lang::InterruptedException & a0) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_f201c224, a0.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ThreadInterruptedException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ThreadInterruptedException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ThreadInterruptedException_init_(t_ThreadInterruptedException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_ThreadInterruptedException__methods_[] = {
          DECLARE_METHOD(t_ThreadInterruptedException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ThreadInterruptedException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ThreadInterruptedException, t_ThreadInterruptedException, ::java::lang::RuntimeException, ThreadInterruptedException, t_ThreadInterruptedException_init_, 0, 0, 0, 0, 0);

        void t_ThreadInterruptedException::install(PyObject *module)
        {
          installType(&PY_TYPE(ThreadInterruptedException), module, "ThreadInterruptedException", 0);
        }

        void t_ThreadInterruptedException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ThreadInterruptedException).tp_dict, "class_", make_descriptor(ThreadInterruptedException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ThreadInterruptedException).tp_dict, "wrapfn_", make_descriptor(t_ThreadInterruptedException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ThreadInterruptedException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ThreadInterruptedException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ThreadInterruptedException::initializeClass, 1)))
            return NULL;
          return t_ThreadInterruptedException::wrap_Object(ThreadInterruptedException(((t_ThreadInterruptedException *) arg)->object.this$));
        }
        static PyObject *t_ThreadInterruptedException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ThreadInterruptedException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ThreadInterruptedException_init_(t_ThreadInterruptedException *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::InterruptedException a0((jobject) NULL);
          ThreadInterruptedException object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::InterruptedException::initializeClass, &a0))
          {
            INT_CALL(object = ThreadInterruptedException(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/StringWriter.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "java/io/IOException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *StringWriter::class$ = NULL;
    jmethodID *StringWriter::mids$ = NULL;
    bool StringWriter::live$ = false;

    jclass StringWriter::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/StringWriter");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
        mids$[mid_append_3aee6342] = env->getMethodID(cls, "append", "(C)Ljava/io/StringWriter;");
        mids$[mid_append_e2d4acee] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Ljava/io/StringWriter;");
        mids$[mid_append_199526fa] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Ljava/io/StringWriter;");
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
        mids$[mid_getBuffer_d54172a5] = env->getMethodID(cls, "getBuffer", "()Ljava/lang/StringBuffer;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_write_5fdc3f48] = env->getMethodID(cls, "write", "(Ljava/lang/String;)V");
        mids$[mid_write_39c7bd3c] = env->getMethodID(cls, "write", "(I)V");
        mids$[mid_write_555f322c] = env->getMethodID(cls, "write", "(Ljava/lang/String;II)V");
        mids$[mid_write_6f0bb356] = env->getMethodID(cls, "write", "([CII)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    StringWriter::StringWriter() : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    StringWriter::StringWriter(jint a0) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

    StringWriter StringWriter::append(jchar a0) const
    {
      return StringWriter(env->callObjectMethod(this$, mids$[mid_append_3aee6342], a0));
    }

    StringWriter StringWriter::append(const ::java::lang::CharSequence & a0) const
    {
      return StringWriter(env->callObjectMethod(this$, mids$[mid_append_e2d4acee], a0.this$));
    }

    StringWriter StringWriter::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
    {
      return StringWriter(env->callObjectMethod(this$, mids$[mid_append_199526fa], a0.this$, a1, a2));
    }

    void StringWriter::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    void StringWriter::flush() const
    {
      env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
    }

    ::java::lang::StringBuffer StringWriter::getBuffer() const
    {
      return ::java::lang::StringBuffer(env->callObjectMethod(this$, mids$[mid_getBuffer_d54172a5]));
    }

    ::java::lang::String StringWriter::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    void StringWriter::write(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_5fdc3f48], a0.this$);
    }

    void StringWriter::write(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_39c7bd3c], a0);
    }

    void StringWriter::write(const ::java::lang::String & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_write_555f322c], a0.this$, a1, a2);
    }

    void StringWriter::write(const JArray< jchar > & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_write_6f0bb356], a0.this$, a1, a2);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_StringWriter_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_StringWriter_instance_(PyTypeObject *type, PyObject *arg);
    static int t_StringWriter_init_(t_StringWriter *self, PyObject *args, PyObject *kwds);
    static PyObject *t_StringWriter_append(t_StringWriter *self, PyObject *args);
    static PyObject *t_StringWriter_close(t_StringWriter *self, PyObject *args);
    static PyObject *t_StringWriter_flush(t_StringWriter *self, PyObject *args);
    static PyObject *t_StringWriter_getBuffer(t_StringWriter *self);
    static PyObject *t_StringWriter_toString(t_StringWriter *self, PyObject *args);
    static PyObject *t_StringWriter_write(t_StringWriter *self, PyObject *args);
    static PyObject *t_StringWriter_get__buffer(t_StringWriter *self, void *data);
    static PyGetSetDef t_StringWriter__fields_[] = {
      DECLARE_GET_FIELD(t_StringWriter, buffer),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_StringWriter__methods_[] = {
      DECLARE_METHOD(t_StringWriter, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_StringWriter, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_StringWriter, append, METH_VARARGS),
      DECLARE_METHOD(t_StringWriter, close, METH_VARARGS),
      DECLARE_METHOD(t_StringWriter, flush, METH_VARARGS),
      DECLARE_METHOD(t_StringWriter, getBuffer, METH_NOARGS),
      DECLARE_METHOD(t_StringWriter, toString, METH_VARARGS),
      DECLARE_METHOD(t_StringWriter, write, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(StringWriter, t_StringWriter, ::java::io::Writer, StringWriter, t_StringWriter_init_, 0, 0, t_StringWriter__fields_, 0, 0);

    void t_StringWriter::install(PyObject *module)
    {
      installType(&PY_TYPE(StringWriter), module, "StringWriter", 0);
    }

    void t_StringWriter::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(StringWriter).tp_dict, "class_", make_descriptor(StringWriter::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(StringWriter).tp_dict, "wrapfn_", make_descriptor(t_StringWriter::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(StringWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_StringWriter_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, StringWriter::initializeClass, 1)))
        return NULL;
      return t_StringWriter::wrap_Object(StringWriter(((t_StringWriter *) arg)->object.this$));
    }
    static PyObject *t_StringWriter_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, StringWriter::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_StringWriter_init_(t_StringWriter *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          StringWriter object((jobject) NULL);

          INT_CALL(object = StringWriter());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          jint a0;
          StringWriter object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = StringWriter(a0));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_StringWriter_append(t_StringWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          StringWriter result((jobject) NULL);

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return t_StringWriter::wrap_Object(result);
          }
        }
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          StringWriter result((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return t_StringWriter::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint a2;
          StringWriter result((jobject) NULL);

          if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.append(a0, a1, a2));
            return t_StringWriter::wrap_Object(result);
          }
        }
      }

      return callSuper(&PY_TYPE(StringWriter), (PyObject *) self, "append", args, 2);
    }

    static PyObject *t_StringWriter_close(t_StringWriter *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.close());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(StringWriter), (PyObject *) self, "close", args, 2);
    }

    static PyObject *t_StringWriter_flush(t_StringWriter *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.flush());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(StringWriter), (PyObject *) self, "flush", args, 2);
    }

    static PyObject *t_StringWriter_getBuffer(t_StringWriter *self)
    {
      ::java::lang::StringBuffer result((jobject) NULL);
      OBJ_CALL(result = self->object.getBuffer());
      return ::java::lang::t_StringBuffer::wrap_Object(result);
    }

    static PyObject *t_StringWriter_toString(t_StringWriter *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(StringWriter), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_StringWriter_write(t_StringWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 3:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "sII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
      }

      return callSuper(&PY_TYPE(StringWriter), (PyObject *) self, "write", args, 2);
    }

    static PyObject *t_StringWriter_get__buffer(t_StringWriter *self, void *data)
    {
      ::java::lang::StringBuffer value((jobject) NULL);
      OBJ_CALL(value = self->object.getBuffer());
      return ::java::lang::t_StringBuffer::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FuzzyQuery.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FuzzyQuery::class$ = NULL;
        jmethodID *FuzzyQuery::mids$ = NULL;
        bool FuzzyQuery::live$ = false;
        jint FuzzyQuery::defaultMaxEdits = (jint) 0;
        jint FuzzyQuery::defaultMaxExpansions = (jint) 0;
        jfloat FuzzyQuery::defaultMinSimilarity = (jfloat) 0;
        jint FuzzyQuery::defaultPrefixLength = (jint) 0;
        jboolean FuzzyQuery::defaultTranspositions = (jboolean) 0;

        jclass FuzzyQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FuzzyQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_init$_05555589] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;I)V");
            mids$[mid_init$_10c66029] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;II)V");
            mids$[mid_init$_12e80fe2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;IIIZ)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_floatToEdits_77691edc] = env->getStaticMethodID(cls, "floatToEdits", "(FI)I");
            mids$[mid_getMaxEdits_54c6a179] = env->getMethodID(cls, "getMaxEdits", "()I");
            mids$[mid_getPrefixLength_54c6a179] = env->getMethodID(cls, "getPrefixLength", "()I");
            mids$[mid_getTerm_0f71f314] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/index/Term;");
            mids$[mid_getTranspositions_54c6a16a] = env->getMethodID(cls, "getTranspositions", "()Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getTermsEnum_67b5a29a] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            defaultMaxEdits = env->getStaticIntField(cls, "defaultMaxEdits");
            defaultMaxExpansions = env->getStaticIntField(cls, "defaultMaxExpansions");
            defaultMinSimilarity = env->getStaticFloatField(cls, "defaultMinSimilarity");
            defaultPrefixLength = env->getStaticIntField(cls, "defaultPrefixLength");
            defaultTranspositions = env->getStaticBooleanField(cls, "defaultTranspositions");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FuzzyQuery::FuzzyQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

        FuzzyQuery::FuzzyQuery(const ::org::apache::lucene::index::Term & a0, jint a1) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_05555589, a0.this$, a1)) {}

        FuzzyQuery::FuzzyQuery(const ::org::apache::lucene::index::Term & a0, jint a1, jint a2) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_10c66029, a0.this$, a1, a2)) {}

        FuzzyQuery::FuzzyQuery(const ::org::apache::lucene::index::Term & a0, jint a1, jint a2, jint a3, jboolean a4) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_12e80fe2, a0.this$, a1, a2, a3, a4)) {}

        jboolean FuzzyQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint FuzzyQuery::floatToEdits(jfloat a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_floatToEdits_77691edc], a0, a1);
        }

        jint FuzzyQuery::getMaxEdits() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxEdits_54c6a179]);
        }

        jint FuzzyQuery::getPrefixLength() const
        {
          return env->callIntMethod(this$, mids$[mid_getPrefixLength_54c6a179]);
        }

        ::org::apache::lucene::index::Term FuzzyQuery::getTerm() const
        {
          return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getTerm_0f71f314]));
        }

        jboolean FuzzyQuery::getTranspositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getTranspositions_54c6a16a]);
        }

        jint FuzzyQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String FuzzyQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FuzzyQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FuzzyQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FuzzyQuery_init_(t_FuzzyQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FuzzyQuery_equals(t_FuzzyQuery *self, PyObject *args);
        static PyObject *t_FuzzyQuery_floatToEdits(PyTypeObject *type, PyObject *args);
        static PyObject *t_FuzzyQuery_getMaxEdits(t_FuzzyQuery *self);
        static PyObject *t_FuzzyQuery_getPrefixLength(t_FuzzyQuery *self);
        static PyObject *t_FuzzyQuery_getTerm(t_FuzzyQuery *self);
        static PyObject *t_FuzzyQuery_getTranspositions(t_FuzzyQuery *self);
        static PyObject *t_FuzzyQuery_hashCode(t_FuzzyQuery *self, PyObject *args);
        static PyObject *t_FuzzyQuery_toString(t_FuzzyQuery *self, PyObject *args);
        static PyObject *t_FuzzyQuery_get__maxEdits(t_FuzzyQuery *self, void *data);
        static PyObject *t_FuzzyQuery_get__prefixLength(t_FuzzyQuery *self, void *data);
        static PyObject *t_FuzzyQuery_get__term(t_FuzzyQuery *self, void *data);
        static PyObject *t_FuzzyQuery_get__transpositions(t_FuzzyQuery *self, void *data);
        static PyGetSetDef t_FuzzyQuery__fields_[] = {
          DECLARE_GET_FIELD(t_FuzzyQuery, maxEdits),
          DECLARE_GET_FIELD(t_FuzzyQuery, prefixLength),
          DECLARE_GET_FIELD(t_FuzzyQuery, term),
          DECLARE_GET_FIELD(t_FuzzyQuery, transpositions),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FuzzyQuery__methods_[] = {
          DECLARE_METHOD(t_FuzzyQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyQuery, floatToEdits, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FuzzyQuery, getMaxEdits, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyQuery, getPrefixLength, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyQuery, getTerm, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyQuery, getTranspositions, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FuzzyQuery, t_FuzzyQuery, ::org::apache::lucene::search::MultiTermQuery, FuzzyQuery, t_FuzzyQuery_init_, 0, 0, t_FuzzyQuery__fields_, 0, 0);

        void t_FuzzyQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(FuzzyQuery), module, "FuzzyQuery", 0);
        }

        void t_FuzzyQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FuzzyQuery).tp_dict, "class_", make_descriptor(FuzzyQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FuzzyQuery).tp_dict, "wrapfn_", make_descriptor(t_FuzzyQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FuzzyQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FuzzyQuery::initializeClass);
          PyDict_SetItemString(PY_TYPE(FuzzyQuery).tp_dict, "defaultMaxEdits", make_descriptor(FuzzyQuery::defaultMaxEdits));
          PyDict_SetItemString(PY_TYPE(FuzzyQuery).tp_dict, "defaultMaxExpansions", make_descriptor(FuzzyQuery::defaultMaxExpansions));
          PyDict_SetItemString(PY_TYPE(FuzzyQuery).tp_dict, "defaultMinSimilarity", make_descriptor(FuzzyQuery::defaultMinSimilarity));
          PyDict_SetItemString(PY_TYPE(FuzzyQuery).tp_dict, "defaultPrefixLength", make_descriptor(FuzzyQuery::defaultPrefixLength));
          PyDict_SetItemString(PY_TYPE(FuzzyQuery).tp_dict, "defaultTranspositions", make_descriptor(FuzzyQuery::defaultTranspositions));
        }

        static PyObject *t_FuzzyQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FuzzyQuery::initializeClass, 1)))
            return NULL;
          return t_FuzzyQuery::wrap_Object(FuzzyQuery(((t_FuzzyQuery *) arg)->object.this$));
        }
        static PyObject *t_FuzzyQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FuzzyQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FuzzyQuery_init_(t_FuzzyQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              FuzzyQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                INT_CALL(object = FuzzyQuery(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              FuzzyQuery object((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
              {
                INT_CALL(object = FuzzyQuery(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              jint a2;
              FuzzyQuery object((jobject) NULL);

              if (!parseArgs(args, "kII", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = FuzzyQuery(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 5:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jboolean a4;
              FuzzyQuery object((jobject) NULL);

              if (!parseArgs(args, "kIIIZ", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = FuzzyQuery(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FuzzyQuery_equals(t_FuzzyQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FuzzyQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FuzzyQuery_floatToEdits(PyTypeObject *type, PyObject *args)
        {
          jfloat a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "FI", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::FuzzyQuery::floatToEdits(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "floatToEdits", args);
          return NULL;
        }

        static PyObject *t_FuzzyQuery_getMaxEdits(t_FuzzyQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxEdits());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FuzzyQuery_getPrefixLength(t_FuzzyQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPrefixLength());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FuzzyQuery_getTerm(t_FuzzyQuery *self)
        {
          ::org::apache::lucene::index::Term result((jobject) NULL);
          OBJ_CALL(result = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(result);
        }

        static PyObject *t_FuzzyQuery_getTranspositions(t_FuzzyQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getTranspositions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FuzzyQuery_hashCode(t_FuzzyQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FuzzyQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FuzzyQuery_toString(t_FuzzyQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FuzzyQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FuzzyQuery_get__maxEdits(t_FuzzyQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxEdits());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_FuzzyQuery_get__prefixLength(t_FuzzyQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPrefixLength());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_FuzzyQuery_get__term(t_FuzzyQuery *self, void *data)
        {
          ::org::apache::lucene::index::Term value((jobject) NULL);
          OBJ_CALL(value = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(value);
        }

        static PyObject *t_FuzzyQuery_get__transpositions(t_FuzzyQuery *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getTranspositions());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/es/SpanishLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {

          ::java::lang::Class *SpanishLightStemmer::class$ = NULL;
          jmethodID *SpanishLightStemmer::mids$ = NULL;
          bool SpanishLightStemmer::live$ = false;

          jclass SpanishLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/es/SpanishLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanishLightStemmer::SpanishLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint SpanishLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {
          static PyObject *t_SpanishLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanishLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanishLightStemmer_init_(t_SpanishLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanishLightStemmer_stem(t_SpanishLightStemmer *self, PyObject *args);

          static PyMethodDef t_SpanishLightStemmer__methods_[] = {
            DECLARE_METHOD(t_SpanishLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanishLightStemmer, t_SpanishLightStemmer, ::java::lang::Object, SpanishLightStemmer, t_SpanishLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_SpanishLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanishLightStemmer), module, "SpanishLightStemmer", 0);
          }

          void t_SpanishLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanishLightStemmer).tp_dict, "class_", make_descriptor(SpanishLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanishLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_SpanishLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanishLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanishLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanishLightStemmer::initializeClass, 1)))
              return NULL;
            return t_SpanishLightStemmer::wrap_Object(SpanishLightStemmer(((t_SpanishLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_SpanishLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanishLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanishLightStemmer_init_(t_SpanishLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            SpanishLightStemmer object((jobject) NULL);

            INT_CALL(object = SpanishLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_SpanishLightStemmer_stem(t_SpanishLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *BlendedInfixSuggester$BlenderType::class$ = NULL;
            jmethodID *BlendedInfixSuggester$BlenderType::mids$ = NULL;
            bool BlendedInfixSuggester$BlenderType::live$ = false;
            BlendedInfixSuggester$BlenderType *BlendedInfixSuggester$BlenderType::CUSTOM = NULL;
            BlendedInfixSuggester$BlenderType *BlendedInfixSuggester$BlenderType::POSITION_LINEAR = NULL;
            BlendedInfixSuggester$BlenderType *BlendedInfixSuggester$BlenderType::POSITION_RECIPROCAL = NULL;

            jclass BlendedInfixSuggester$BlenderType::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType");

                mids$ = new jmethodID[max_mid];
                mids$[mid_valueOf_ff583aba] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType;");
                mids$[mid_values_c5f82234] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                CUSTOM = new BlendedInfixSuggester$BlenderType(env->getStaticObjectField(cls, "CUSTOM", "Lorg/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType;"));
                POSITION_LINEAR = new BlendedInfixSuggester$BlenderType(env->getStaticObjectField(cls, "POSITION_LINEAR", "Lorg/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType;"));
                POSITION_RECIPROCAL = new BlendedInfixSuggester$BlenderType(env->getStaticObjectField(cls, "POSITION_RECIPROCAL", "Lorg/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BlendedInfixSuggester$BlenderType BlendedInfixSuggester$BlenderType::valueOf(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return BlendedInfixSuggester$BlenderType(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ff583aba], a0.this$));
            }

            JArray< BlendedInfixSuggester$BlenderType > BlendedInfixSuggester$BlenderType::values()
            {
              jclass cls = env->getClass(initializeClass);
              return JArray< BlendedInfixSuggester$BlenderType >(env->callStaticObjectMethod(cls, mids$[mid_values_c5f82234]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_BlendedInfixSuggester$BlenderType_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BlendedInfixSuggester$BlenderType_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BlendedInfixSuggester$BlenderType_of_(t_BlendedInfixSuggester$BlenderType *self, PyObject *args);
            static PyObject *t_BlendedInfixSuggester$BlenderType_valueOf(PyTypeObject *type, PyObject *args);
            static PyObject *t_BlendedInfixSuggester$BlenderType_values(PyTypeObject *type);
            static PyObject *t_BlendedInfixSuggester$BlenderType_get__parameters_(t_BlendedInfixSuggester$BlenderType *self, void *data);
            static PyGetSetDef t_BlendedInfixSuggester$BlenderType__fields_[] = {
              DECLARE_GET_FIELD(t_BlendedInfixSuggester$BlenderType, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_BlendedInfixSuggester$BlenderType__methods_[] = {
              DECLARE_METHOD(t_BlendedInfixSuggester$BlenderType, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BlendedInfixSuggester$BlenderType, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BlendedInfixSuggester$BlenderType, of_, METH_VARARGS),
              DECLARE_METHOD(t_BlendedInfixSuggester$BlenderType, valueOf, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_BlendedInfixSuggester$BlenderType, values, METH_NOARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BlendedInfixSuggester$BlenderType, t_BlendedInfixSuggester$BlenderType, ::java::lang::Enum, BlendedInfixSuggester$BlenderType, abstract_init, 0, 0, t_BlendedInfixSuggester$BlenderType__fields_, 0, 0);
            PyObject *t_BlendedInfixSuggester$BlenderType::wrap_Object(const BlendedInfixSuggester$BlenderType& object, PyTypeObject *p0)
            {
              PyObject *obj = t_BlendedInfixSuggester$BlenderType::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_BlendedInfixSuggester$BlenderType *self = (t_BlendedInfixSuggester$BlenderType *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_BlendedInfixSuggester$BlenderType::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_BlendedInfixSuggester$BlenderType::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_BlendedInfixSuggester$BlenderType *self = (t_BlendedInfixSuggester$BlenderType *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_BlendedInfixSuggester$BlenderType::install(PyObject *module)
            {
              installType(&PY_TYPE(BlendedInfixSuggester$BlenderType), module, "BlendedInfixSuggester$BlenderType", 0);
            }

            void t_BlendedInfixSuggester$BlenderType::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester$BlenderType).tp_dict, "class_", make_descriptor(BlendedInfixSuggester$BlenderType::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester$BlenderType).tp_dict, "wrapfn_", make_descriptor(t_BlendedInfixSuggester$BlenderType::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester$BlenderType).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(BlendedInfixSuggester$BlenderType::initializeClass);
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester$BlenderType).tp_dict, "CUSTOM", make_descriptor(t_BlendedInfixSuggester$BlenderType::wrap_Object(*BlendedInfixSuggester$BlenderType::CUSTOM)));
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester$BlenderType).tp_dict, "POSITION_LINEAR", make_descriptor(t_BlendedInfixSuggester$BlenderType::wrap_Object(*BlendedInfixSuggester$BlenderType::POSITION_LINEAR)));
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester$BlenderType).tp_dict, "POSITION_RECIPROCAL", make_descriptor(t_BlendedInfixSuggester$BlenderType::wrap_Object(*BlendedInfixSuggester$BlenderType::POSITION_RECIPROCAL)));
            }

            static PyObject *t_BlendedInfixSuggester$BlenderType_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BlendedInfixSuggester$BlenderType::initializeClass, 1)))
                return NULL;
              return t_BlendedInfixSuggester$BlenderType::wrap_Object(BlendedInfixSuggester$BlenderType(((t_BlendedInfixSuggester$BlenderType *) arg)->object.this$));
            }
            static PyObject *t_BlendedInfixSuggester$BlenderType_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BlendedInfixSuggester$BlenderType::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_BlendedInfixSuggester$BlenderType_of_(t_BlendedInfixSuggester$BlenderType *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static PyObject *t_BlendedInfixSuggester$BlenderType_valueOf(PyTypeObject *type, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              BlendedInfixSuggester$BlenderType result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::suggest::analyzing::BlendedInfixSuggester$BlenderType::valueOf(a0));
                return t_BlendedInfixSuggester$BlenderType::wrap_Object(result);
              }

              return callSuper(type, "valueOf", args, 2);
            }

            static PyObject *t_BlendedInfixSuggester$BlenderType_values(PyTypeObject *type)
            {
              JArray< BlendedInfixSuggester$BlenderType > result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::search::suggest::analyzing::BlendedInfixSuggester$BlenderType::values());
              return JArray<jobject>(result.this$).wrap(t_BlendedInfixSuggester$BlenderType::wrap_jobject);
            }
            static PyObject *t_BlendedInfixSuggester$BlenderType_get__parameters_(t_BlendedInfixSuggester$BlenderType *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/StandardFilterFactory.h"
#include "org/apache/lucene/analysis/standard/StandardFilter.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *StandardFilterFactory::class$ = NULL;
          jmethodID *StandardFilterFactory::mids$ = NULL;
          bool StandardFilterFactory::live$ = false;

          jclass StandardFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/StandardFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_2a39d447] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/standard/StandardFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StandardFilterFactory::StandardFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::standard::StandardFilter StandardFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::standard::StandardFilter(env->callObjectMethod(this$, mids$[mid_create_2a39d447], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_StandardFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StandardFilterFactory_init_(t_StandardFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StandardFilterFactory_create(t_StandardFilterFactory *self, PyObject *args);

          static PyMethodDef t_StandardFilterFactory__methods_[] = {
            DECLARE_METHOD(t_StandardFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StandardFilterFactory, t_StandardFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, StandardFilterFactory, t_StandardFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_StandardFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(StandardFilterFactory), module, "StandardFilterFactory", 0);
          }

          void t_StandardFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StandardFilterFactory).tp_dict, "class_", make_descriptor(StandardFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StandardFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_StandardFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StandardFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StandardFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StandardFilterFactory::initializeClass, 1)))
              return NULL;
            return t_StandardFilterFactory::wrap_Object(StandardFilterFactory(((t_StandardFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_StandardFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StandardFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StandardFilterFactory_init_(t_StandardFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            StandardFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = StandardFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StandardFilterFactory_create(t_StandardFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::standard::StandardFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::standard::t_StandardFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(StandardFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Filter::class$ = NULL;
        jmethodID *Filter::mids$ = NULL;
        bool Filter::live$ = false;

        jclass Filter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Filter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Filter::Filter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::DocIdSet Filter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Filter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Filter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Filter_init_(t_Filter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Filter_getDocIdSet(t_Filter *self, PyObject *args);

        static PyMethodDef t_Filter__methods_[] = {
          DECLARE_METHOD(t_Filter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Filter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Filter, getDocIdSet, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Filter, t_Filter, ::java::lang::Object, Filter, t_Filter_init_, 0, 0, 0, 0, 0);

        void t_Filter::install(PyObject *module)
        {
          installType(&PY_TYPE(Filter), module, "Filter", 0);
        }

        void t_Filter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Filter).tp_dict, "class_", make_descriptor(Filter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Filter).tp_dict, "wrapfn_", make_descriptor(t_Filter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Filter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Filter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Filter::initializeClass, 1)))
            return NULL;
          return t_Filter::wrap_Object(Filter(((t_Filter *) arg)->object.this$));
        }
        static PyObject *t_Filter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Filter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Filter_init_(t_Filter *self, PyObject *args, PyObject *kwds)
        {
          Filter object((jobject) NULL);

          INT_CALL(object = Filter());
          self->object = object;

          return 0;
        }

        static PyObject *t_Filter_getDocIdSet(t_Filter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocIdSet", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RamUsageEstimator$JvmFeature.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RamUsageEstimator$JvmFeature::class$ = NULL;
        jmethodID *RamUsageEstimator$JvmFeature::mids$ = NULL;
        jfieldID *RamUsageEstimator$JvmFeature::fids$ = NULL;
        bool RamUsageEstimator$JvmFeature::live$ = false;
        RamUsageEstimator$JvmFeature *RamUsageEstimator$JvmFeature::ARRAY_HEADER_SIZE = NULL;
        RamUsageEstimator$JvmFeature *RamUsageEstimator$JvmFeature::FIELD_OFFSETS = NULL;
        RamUsageEstimator$JvmFeature *RamUsageEstimator$JvmFeature::OBJECT_ALIGNMENT = NULL;
        RamUsageEstimator$JvmFeature *RamUsageEstimator$JvmFeature::OBJECT_REFERENCE_SIZE = NULL;

        jclass RamUsageEstimator$JvmFeature::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RamUsageEstimator$JvmFeature");

            mids$ = new jmethodID[max_mid];
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_valueOf_435c0e75] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/util/RamUsageEstimator$JvmFeature;");
            mids$[mid_values_6bc6c637] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/util/RamUsageEstimator$JvmFeature;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_description] = env->getFieldID(cls, "description", "Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            ARRAY_HEADER_SIZE = new RamUsageEstimator$JvmFeature(env->getStaticObjectField(cls, "ARRAY_HEADER_SIZE", "Lorg/apache/lucene/util/RamUsageEstimator$JvmFeature;"));
            FIELD_OFFSETS = new RamUsageEstimator$JvmFeature(env->getStaticObjectField(cls, "FIELD_OFFSETS", "Lorg/apache/lucene/util/RamUsageEstimator$JvmFeature;"));
            OBJECT_ALIGNMENT = new RamUsageEstimator$JvmFeature(env->getStaticObjectField(cls, "OBJECT_ALIGNMENT", "Lorg/apache/lucene/util/RamUsageEstimator$JvmFeature;"));
            OBJECT_REFERENCE_SIZE = new RamUsageEstimator$JvmFeature(env->getStaticObjectField(cls, "OBJECT_REFERENCE_SIZE", "Lorg/apache/lucene/util/RamUsageEstimator$JvmFeature;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String RamUsageEstimator$JvmFeature::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        RamUsageEstimator$JvmFeature RamUsageEstimator$JvmFeature::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return RamUsageEstimator$JvmFeature(env->callStaticObjectMethod(cls, mids$[mid_valueOf_435c0e75], a0.this$));
        }

        JArray< RamUsageEstimator$JvmFeature > RamUsageEstimator$JvmFeature::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< RamUsageEstimator$JvmFeature >(env->callStaticObjectMethod(cls, mids$[mid_values_6bc6c637]));
        }

        ::java::lang::String RamUsageEstimator$JvmFeature::_get_description() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_description]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RamUsageEstimator$JvmFeature_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RamUsageEstimator$JvmFeature_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RamUsageEstimator$JvmFeature_of_(t_RamUsageEstimator$JvmFeature *self, PyObject *args);
        static PyObject *t_RamUsageEstimator$JvmFeature_toString(t_RamUsageEstimator$JvmFeature *self, PyObject *args);
        static PyObject *t_RamUsageEstimator$JvmFeature_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_RamUsageEstimator$JvmFeature_values(PyTypeObject *type);
        static PyObject *t_RamUsageEstimator$JvmFeature_get__description(t_RamUsageEstimator$JvmFeature *self, void *data);

        static PyObject *t_RamUsageEstimator$JvmFeature_get__parameters_(t_RamUsageEstimator$JvmFeature *self, void *data);
        static PyGetSetDef t_RamUsageEstimator$JvmFeature__fields_[] = {
          DECLARE_GET_FIELD(t_RamUsageEstimator$JvmFeature, description),
          DECLARE_GET_FIELD(t_RamUsageEstimator$JvmFeature, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RamUsageEstimator$JvmFeature__methods_[] = {
          DECLARE_METHOD(t_RamUsageEstimator$JvmFeature, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator$JvmFeature, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator$JvmFeature, of_, METH_VARARGS),
          DECLARE_METHOD(t_RamUsageEstimator$JvmFeature, toString, METH_VARARGS),
          DECLARE_METHOD(t_RamUsageEstimator$JvmFeature, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator$JvmFeature, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RamUsageEstimator$JvmFeature, t_RamUsageEstimator$JvmFeature, ::java::lang::Enum, RamUsageEstimator$JvmFeature, abstract_init, 0, 0, t_RamUsageEstimator$JvmFeature__fields_, 0, 0);
        PyObject *t_RamUsageEstimator$JvmFeature::wrap_Object(const RamUsageEstimator$JvmFeature& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RamUsageEstimator$JvmFeature::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RamUsageEstimator$JvmFeature *self = (t_RamUsageEstimator$JvmFeature *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_RamUsageEstimator$JvmFeature::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RamUsageEstimator$JvmFeature::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RamUsageEstimator$JvmFeature *self = (t_RamUsageEstimator$JvmFeature *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_RamUsageEstimator$JvmFeature::install(PyObject *module)
        {
          installType(&PY_TYPE(RamUsageEstimator$JvmFeature), module, "RamUsageEstimator$JvmFeature", 0);
        }

        void t_RamUsageEstimator$JvmFeature::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator$JvmFeature).tp_dict, "class_", make_descriptor(RamUsageEstimator$JvmFeature::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator$JvmFeature).tp_dict, "wrapfn_", make_descriptor(t_RamUsageEstimator$JvmFeature::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator$JvmFeature).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(RamUsageEstimator$JvmFeature::initializeClass);
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator$JvmFeature).tp_dict, "ARRAY_HEADER_SIZE", make_descriptor(t_RamUsageEstimator$JvmFeature::wrap_Object(*RamUsageEstimator$JvmFeature::ARRAY_HEADER_SIZE)));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator$JvmFeature).tp_dict, "FIELD_OFFSETS", make_descriptor(t_RamUsageEstimator$JvmFeature::wrap_Object(*RamUsageEstimator$JvmFeature::FIELD_OFFSETS)));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator$JvmFeature).tp_dict, "OBJECT_ALIGNMENT", make_descriptor(t_RamUsageEstimator$JvmFeature::wrap_Object(*RamUsageEstimator$JvmFeature::OBJECT_ALIGNMENT)));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator$JvmFeature).tp_dict, "OBJECT_REFERENCE_SIZE", make_descriptor(t_RamUsageEstimator$JvmFeature::wrap_Object(*RamUsageEstimator$JvmFeature::OBJECT_REFERENCE_SIZE)));
        }

        static PyObject *t_RamUsageEstimator$JvmFeature_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RamUsageEstimator$JvmFeature::initializeClass, 1)))
            return NULL;
          return t_RamUsageEstimator$JvmFeature::wrap_Object(RamUsageEstimator$JvmFeature(((t_RamUsageEstimator$JvmFeature *) arg)->object.this$));
        }
        static PyObject *t_RamUsageEstimator$JvmFeature_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RamUsageEstimator$JvmFeature::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RamUsageEstimator$JvmFeature_of_(t_RamUsageEstimator$JvmFeature *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_RamUsageEstimator$JvmFeature_toString(t_RamUsageEstimator$JvmFeature *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(RamUsageEstimator$JvmFeature), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_RamUsageEstimator$JvmFeature_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          RamUsageEstimator$JvmFeature result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator$JvmFeature::valueOf(a0));
            return t_RamUsageEstimator$JvmFeature::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_RamUsageEstimator$JvmFeature_values(PyTypeObject *type)
        {
          JArray< RamUsageEstimator$JvmFeature > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator$JvmFeature::values());
          return JArray<jobject>(result.this$).wrap(t_RamUsageEstimator$JvmFeature::wrap_jobject);
        }
        static PyObject *t_RamUsageEstimator$JvmFeature_get__parameters_(t_RamUsageEstimator$JvmFeature *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_RamUsageEstimator$JvmFeature_get__description(t_RamUsageEstimator$JvmFeature *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_description());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/QueryParserConstants.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *QueryParserConstants::class$ = NULL;
          jmethodID *QueryParserConstants::mids$ = NULL;
          bool QueryParserConstants::live$ = false;
          jint QueryParserConstants::AND = (jint) 0;
          jint QueryParserConstants::BAREOPER = (jint) 0;
          jint QueryParserConstants::Boost = (jint) 0;
          jint QueryParserConstants::CARAT = (jint) 0;
          jint QueryParserConstants::COLON = (jint) 0;
          jint QueryParserConstants::DEFAULT = (jint) 0;
          jint QueryParserConstants::EOF = (jint) 0;
          jint QueryParserConstants::FUZZY_SLOP = (jint) 0;
          jint QueryParserConstants::LPAREN = (jint) 0;
          jint QueryParserConstants::MINUS = (jint) 0;
          jint QueryParserConstants::NOT = (jint) 0;
          jint QueryParserConstants::NUMBER = (jint) 0;
          jint QueryParserConstants::OR = (jint) 0;
          jint QueryParserConstants::PLUS = (jint) 0;
          jint QueryParserConstants::PREFIXTERM = (jint) 0;
          jint QueryParserConstants::QUOTED = (jint) 0;
          jint QueryParserConstants::RANGEEX_END = (jint) 0;
          jint QueryParserConstants::RANGEEX_START = (jint) 0;
          jint QueryParserConstants::RANGEIN_END = (jint) 0;
          jint QueryParserConstants::RANGEIN_START = (jint) 0;
          jint QueryParserConstants::RANGE_GOOP = (jint) 0;
          jint QueryParserConstants::RANGE_QUOTED = (jint) 0;
          jint QueryParserConstants::RANGE_TO = (jint) 0;
          jint QueryParserConstants::REGEXPTERM = (jint) 0;
          jint QueryParserConstants::RPAREN = (jint) 0;
          jint QueryParserConstants::Range = (jint) 0;
          jint QueryParserConstants::STAR = (jint) 0;
          jint QueryParserConstants::TERM = (jint) 0;
          jint QueryParserConstants::WILDTERM = (jint) 0;
          jint QueryParserConstants::_ESCAPED_CHAR = (jint) 0;
          jint QueryParserConstants::_NUM_CHAR = (jint) 0;
          jint QueryParserConstants::_QUOTED_CHAR = (jint) 0;
          jint QueryParserConstants::_TERM_CHAR = (jint) 0;
          jint QueryParserConstants::_TERM_START_CHAR = (jint) 0;
          jint QueryParserConstants::_WHITESPACE = (jint) 0;
          JArray< ::java::lang::String > *QueryParserConstants::tokenImage = NULL;

          jclass QueryParserConstants::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/QueryParserConstants");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              AND = env->getStaticIntField(cls, "AND");
              BAREOPER = env->getStaticIntField(cls, "BAREOPER");
              Boost = env->getStaticIntField(cls, "Boost");
              CARAT = env->getStaticIntField(cls, "CARAT");
              COLON = env->getStaticIntField(cls, "COLON");
              DEFAULT = env->getStaticIntField(cls, "DEFAULT");
              EOF = env->getStaticIntField(cls, "EOF");
              FUZZY_SLOP = env->getStaticIntField(cls, "FUZZY_SLOP");
              LPAREN = env->getStaticIntField(cls, "LPAREN");
              MINUS = env->getStaticIntField(cls, "MINUS");
              NOT = env->getStaticIntField(cls, "NOT");
              NUMBER = env->getStaticIntField(cls, "NUMBER");
              OR = env->getStaticIntField(cls, "OR");
              PLUS = env->getStaticIntField(cls, "PLUS");
              PREFIXTERM = env->getStaticIntField(cls, "PREFIXTERM");
              QUOTED = env->getStaticIntField(cls, "QUOTED");
              RANGEEX_END = env->getStaticIntField(cls, "RANGEEX_END");
              RANGEEX_START = env->getStaticIntField(cls, "RANGEEX_START");
              RANGEIN_END = env->getStaticIntField(cls, "RANGEIN_END");
              RANGEIN_START = env->getStaticIntField(cls, "RANGEIN_START");
              RANGE_GOOP = env->getStaticIntField(cls, "RANGE_GOOP");
              RANGE_QUOTED = env->getStaticIntField(cls, "RANGE_QUOTED");
              RANGE_TO = env->getStaticIntField(cls, "RANGE_TO");
              REGEXPTERM = env->getStaticIntField(cls, "REGEXPTERM");
              RPAREN = env->getStaticIntField(cls, "RPAREN");
              Range = env->getStaticIntField(cls, "Range");
              STAR = env->getStaticIntField(cls, "STAR");
              TERM = env->getStaticIntField(cls, "TERM");
              WILDTERM = env->getStaticIntField(cls, "WILDTERM");
              _ESCAPED_CHAR = env->getStaticIntField(cls, "_ESCAPED_CHAR");
              _NUM_CHAR = env->getStaticIntField(cls, "_NUM_CHAR");
              _QUOTED_CHAR = env->getStaticIntField(cls, "_QUOTED_CHAR");
              _TERM_CHAR = env->getStaticIntField(cls, "_TERM_CHAR");
              _TERM_START_CHAR = env->getStaticIntField(cls, "_TERM_START_CHAR");
              _WHITESPACE = env->getStaticIntField(cls, "_WHITESPACE");
              tokenImage = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "tokenImage", "[Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_QueryParserConstants_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParserConstants_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_QueryParserConstants__methods_[] = {
            DECLARE_METHOD(t_QueryParserConstants, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserConstants, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryParserConstants, t_QueryParserConstants, ::java::lang::Object, QueryParserConstants, abstract_init, 0, 0, 0, 0, 0);

          void t_QueryParserConstants::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryParserConstants), module, "QueryParserConstants", 0);
          }

          void t_QueryParserConstants::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "class_", make_descriptor(QueryParserConstants::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "wrapfn_", make_descriptor(t_QueryParserConstants::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(QueryParserConstants::initializeClass);
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "AND", make_descriptor(QueryParserConstants::AND));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "BAREOPER", make_descriptor(QueryParserConstants::BAREOPER));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "Boost", make_descriptor(QueryParserConstants::Boost));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "CARAT", make_descriptor(QueryParserConstants::CARAT));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "COLON", make_descriptor(QueryParserConstants::COLON));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "DEFAULT", make_descriptor(QueryParserConstants::DEFAULT));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "EOF", make_descriptor(QueryParserConstants::EOF));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "FUZZY_SLOP", make_descriptor(QueryParserConstants::FUZZY_SLOP));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "LPAREN", make_descriptor(QueryParserConstants::LPAREN));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "MINUS", make_descriptor(QueryParserConstants::MINUS));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "NOT", make_descriptor(QueryParserConstants::NOT));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "NUMBER", make_descriptor(QueryParserConstants::NUMBER));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "OR", make_descriptor(QueryParserConstants::OR));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "PLUS", make_descriptor(QueryParserConstants::PLUS));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "PREFIXTERM", make_descriptor(QueryParserConstants::PREFIXTERM));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "QUOTED", make_descriptor(QueryParserConstants::QUOTED));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RANGEEX_END", make_descriptor(QueryParserConstants::RANGEEX_END));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RANGEEX_START", make_descriptor(QueryParserConstants::RANGEEX_START));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RANGEIN_END", make_descriptor(QueryParserConstants::RANGEIN_END));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RANGEIN_START", make_descriptor(QueryParserConstants::RANGEIN_START));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RANGE_GOOP", make_descriptor(QueryParserConstants::RANGE_GOOP));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RANGE_QUOTED", make_descriptor(QueryParserConstants::RANGE_QUOTED));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RANGE_TO", make_descriptor(QueryParserConstants::RANGE_TO));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "REGEXPTERM", make_descriptor(QueryParserConstants::REGEXPTERM));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RPAREN", make_descriptor(QueryParserConstants::RPAREN));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "Range", make_descriptor(QueryParserConstants::Range));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "STAR", make_descriptor(QueryParserConstants::STAR));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "TERM", make_descriptor(QueryParserConstants::TERM));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "WILDTERM", make_descriptor(QueryParserConstants::WILDTERM));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_ESCAPED_CHAR", make_descriptor(QueryParserConstants::_ESCAPED_CHAR));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_NUM_CHAR", make_descriptor(QueryParserConstants::_NUM_CHAR));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_QUOTED_CHAR", make_descriptor(QueryParserConstants::_QUOTED_CHAR));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_TERM_CHAR", make_descriptor(QueryParserConstants::_TERM_CHAR));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_TERM_START_CHAR", make_descriptor(QueryParserConstants::_TERM_START_CHAR));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_WHITESPACE", make_descriptor(QueryParserConstants::_WHITESPACE));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "tokenImage", make_descriptor(JArray<jstring>(QueryParserConstants::tokenImage->this$).wrap()));
          }

          static PyObject *t_QueryParserConstants_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryParserConstants::initializeClass, 1)))
              return NULL;
            return t_QueryParserConstants::wrap_Object(QueryParserConstants(((t_QueryParserConstants *) arg)->object.this$));
          }
          static PyObject *t_QueryParserConstants_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryParserConstants::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TieredMergePolicy.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/index/MergePolicy$MergeSpecification.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/lang/Boolean.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TieredMergePolicy::class$ = NULL;
        jmethodID *TieredMergePolicy::mids$ = NULL;
        bool TieredMergePolicy::live$ = false;
        jdouble TieredMergePolicy::DEFAULT_NO_CFS_RATIO = (jdouble) 0;

        jclass TieredMergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TieredMergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_findForcedDeletesMerges_581dbc49] = env->getMethodID(cls, "findForcedDeletesMerges", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findForcedMerges_4fe4a5b5] = env->getMethodID(cls, "findForcedMerges", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findMerges_cada0df0] = env->getMethodID(cls, "findMerges", "(Lorg/apache/lucene/index/MergeTrigger;Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_getFloorSegmentMB_54c6a174] = env->getMethodID(cls, "getFloorSegmentMB", "()D");
            mids$[mid_getForceMergeDeletesPctAllowed_54c6a174] = env->getMethodID(cls, "getForceMergeDeletesPctAllowed", "()D");
            mids$[mid_getMaxMergeAtOnce_54c6a179] = env->getMethodID(cls, "getMaxMergeAtOnce", "()I");
            mids$[mid_getMaxMergeAtOnceExplicit_54c6a179] = env->getMethodID(cls, "getMaxMergeAtOnceExplicit", "()I");
            mids$[mid_getMaxMergedSegmentMB_54c6a174] = env->getMethodID(cls, "getMaxMergedSegmentMB", "()D");
            mids$[mid_getReclaimDeletesWeight_54c6a174] = env->getMethodID(cls, "getReclaimDeletesWeight", "()D");
            mids$[mid_getSegmentsPerTier_54c6a174] = env->getMethodID(cls, "getSegmentsPerTier", "()D");
            mids$[mid_setFloorSegmentMB_e09c6d07] = env->getMethodID(cls, "setFloorSegmentMB", "(D)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_setForceMergeDeletesPctAllowed_e09c6d07] = env->getMethodID(cls, "setForceMergeDeletesPctAllowed", "(D)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_setMaxMergeAtOnce_40ad7bc2] = env->getMethodID(cls, "setMaxMergeAtOnce", "(I)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_setMaxMergeAtOnceExplicit_40ad7bc2] = env->getMethodID(cls, "setMaxMergeAtOnceExplicit", "(I)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_setMaxMergedSegmentMB_e09c6d07] = env->getMethodID(cls, "setMaxMergedSegmentMB", "(D)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_setReclaimDeletesWeight_e09c6d07] = env->getMethodID(cls, "setReclaimDeletesWeight", "(D)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_setSegmentsPerTier_e09c6d07] = env->getMethodID(cls, "setSegmentsPerTier", "(D)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_score_178499e5] = env->getMethodID(cls, "score", "(Ljava/util/List;ZJLorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/TieredMergePolicy$MergeScore;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_NO_CFS_RATIO = env->getStaticDoubleField(cls, "DEFAULT_NO_CFS_RATIO");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TieredMergePolicy::TieredMergePolicy() : ::org::apache::lucene::index::MergePolicy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::index::MergePolicy$MergeSpecification TieredMergePolicy::findForcedDeletesMerges(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::IndexWriter & a1) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedDeletesMerges_581dbc49], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification TieredMergePolicy::findForcedMerges(const ::org::apache::lucene::index::SegmentInfos & a0, jint a1, const ::java::util::Map & a2, const ::org::apache::lucene::index::IndexWriter & a3) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedMerges_4fe4a5b5], a0.this$, a1, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification TieredMergePolicy::findMerges(const ::org::apache::lucene::index::MergeTrigger & a0, const ::org::apache::lucene::index::SegmentInfos & a1, const ::org::apache::lucene::index::IndexWriter & a2) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findMerges_cada0df0], a0.this$, a1.this$, a2.this$));
        }

        jdouble TieredMergePolicy::getFloorSegmentMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getFloorSegmentMB_54c6a174]);
        }

        jdouble TieredMergePolicy::getForceMergeDeletesPctAllowed() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getForceMergeDeletesPctAllowed_54c6a174]);
        }

        jint TieredMergePolicy::getMaxMergeAtOnce() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxMergeAtOnce_54c6a179]);
        }

        jint TieredMergePolicy::getMaxMergeAtOnceExplicit() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxMergeAtOnceExplicit_54c6a179]);
        }

        jdouble TieredMergePolicy::getMaxMergedSegmentMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMaxMergedSegmentMB_54c6a174]);
        }

        jdouble TieredMergePolicy::getReclaimDeletesWeight() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getReclaimDeletesWeight_54c6a174]);
        }

        jdouble TieredMergePolicy::getSegmentsPerTier() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getSegmentsPerTier_54c6a174]);
        }

        TieredMergePolicy TieredMergePolicy::setFloorSegmentMB(jdouble a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setFloorSegmentMB_e09c6d07], a0));
        }

        TieredMergePolicy TieredMergePolicy::setForceMergeDeletesPctAllowed(jdouble a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setForceMergeDeletesPctAllowed_e09c6d07], a0));
        }

        TieredMergePolicy TieredMergePolicy::setMaxMergeAtOnce(jint a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setMaxMergeAtOnce_40ad7bc2], a0));
        }

        TieredMergePolicy TieredMergePolicy::setMaxMergeAtOnceExplicit(jint a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setMaxMergeAtOnceExplicit_40ad7bc2], a0));
        }

        TieredMergePolicy TieredMergePolicy::setMaxMergedSegmentMB(jdouble a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setMaxMergedSegmentMB_e09c6d07], a0));
        }

        TieredMergePolicy TieredMergePolicy::setReclaimDeletesWeight(jdouble a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setReclaimDeletesWeight_e09c6d07], a0));
        }

        TieredMergePolicy TieredMergePolicy::setSegmentsPerTier(jdouble a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setSegmentsPerTier_e09c6d07], a0));
        }

        ::java::lang::String TieredMergePolicy::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TieredMergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TieredMergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TieredMergePolicy_init_(t_TieredMergePolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TieredMergePolicy_findForcedDeletesMerges(t_TieredMergePolicy *self, PyObject *args);
        static PyObject *t_TieredMergePolicy_findForcedMerges(t_TieredMergePolicy *self, PyObject *args);
        static PyObject *t_TieredMergePolicy_findMerges(t_TieredMergePolicy *self, PyObject *args);
        static PyObject *t_TieredMergePolicy_getFloorSegmentMB(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_getForceMergeDeletesPctAllowed(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_getMaxMergeAtOnce(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_getMaxMergeAtOnceExplicit(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_getMaxMergedSegmentMB(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_getReclaimDeletesWeight(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_getSegmentsPerTier(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_setFloorSegmentMB(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_setForceMergeDeletesPctAllowed(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_setMaxMergeAtOnce(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_setMaxMergeAtOnceExplicit(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_setMaxMergedSegmentMB(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_setReclaimDeletesWeight(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_setSegmentsPerTier(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_toString(t_TieredMergePolicy *self, PyObject *args);
        static PyObject *t_TieredMergePolicy_get__floorSegmentMB(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__floorSegmentMB(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_TieredMergePolicy_get__forceMergeDeletesPctAllowed(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__forceMergeDeletesPctAllowed(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_TieredMergePolicy_get__maxMergeAtOnce(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__maxMergeAtOnce(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_TieredMergePolicy_get__maxMergeAtOnceExplicit(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__maxMergeAtOnceExplicit(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_TieredMergePolicy_get__maxMergedSegmentMB(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__maxMergedSegmentMB(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_TieredMergePolicy_get__reclaimDeletesWeight(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__reclaimDeletesWeight(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_TieredMergePolicy_get__segmentsPerTier(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__segmentsPerTier(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyGetSetDef t_TieredMergePolicy__fields_[] = {
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, floorSegmentMB),
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, forceMergeDeletesPctAllowed),
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, maxMergeAtOnce),
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, maxMergeAtOnceExplicit),
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, maxMergedSegmentMB),
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, reclaimDeletesWeight),
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, segmentsPerTier),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TieredMergePolicy__methods_[] = {
          DECLARE_METHOD(t_TieredMergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TieredMergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TieredMergePolicy, findForcedDeletesMerges, METH_VARARGS),
          DECLARE_METHOD(t_TieredMergePolicy, findForcedMerges, METH_VARARGS),
          DECLARE_METHOD(t_TieredMergePolicy, findMerges, METH_VARARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getFloorSegmentMB, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getForceMergeDeletesPctAllowed, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getMaxMergeAtOnce, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getMaxMergeAtOnceExplicit, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getMaxMergedSegmentMB, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getReclaimDeletesWeight, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getSegmentsPerTier, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, setFloorSegmentMB, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, setForceMergeDeletesPctAllowed, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, setMaxMergeAtOnce, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, setMaxMergeAtOnceExplicit, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, setMaxMergedSegmentMB, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, setReclaimDeletesWeight, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, setSegmentsPerTier, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TieredMergePolicy, t_TieredMergePolicy, ::org::apache::lucene::index::MergePolicy, TieredMergePolicy, t_TieredMergePolicy_init_, 0, 0, t_TieredMergePolicy__fields_, 0, 0);

        void t_TieredMergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(TieredMergePolicy), module, "TieredMergePolicy", 0);
        }

        void t_TieredMergePolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TieredMergePolicy).tp_dict, "class_", make_descriptor(TieredMergePolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TieredMergePolicy).tp_dict, "wrapfn_", make_descriptor(t_TieredMergePolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TieredMergePolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(TieredMergePolicy::initializeClass);
          PyDict_SetItemString(PY_TYPE(TieredMergePolicy).tp_dict, "DEFAULT_NO_CFS_RATIO", make_descriptor(TieredMergePolicy::DEFAULT_NO_CFS_RATIO));
        }

        static PyObject *t_TieredMergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TieredMergePolicy::initializeClass, 1)))
            return NULL;
          return t_TieredMergePolicy::wrap_Object(TieredMergePolicy(((t_TieredMergePolicy *) arg)->object.this$));
        }
        static PyObject *t_TieredMergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TieredMergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TieredMergePolicy_init_(t_TieredMergePolicy *self, PyObject *args, PyObject *kwds)
        {
          TieredMergePolicy object((jobject) NULL);

          INT_CALL(object = TieredMergePolicy());
          self->object = object;

          return 0;
        }

        static PyObject *t_TieredMergePolicy_findForcedDeletesMerges(t_TieredMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.findForcedDeletesMerges(a0, a1));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(TieredMergePolicy), (PyObject *) self, "findForcedDeletesMerges", args, 2);
        }

        static PyObject *t_TieredMergePolicy_findForcedMerges(t_TieredMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          jint a1;
          ::java::util::Map a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::index::IndexWriter a3((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kIKk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3))
          {
            OBJ_CALL(result = self->object.findForcedMerges(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(TieredMergePolicy), (PyObject *) self, "findForcedMerges", args, 2);
        }

        static PyObject *t_TieredMergePolicy_findMerges(t_TieredMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeTrigger a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::SegmentInfos a1((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a2((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "Kkk", ::org::apache::lucene::index::MergeTrigger::initializeClass, ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a1, &a2))
          {
            OBJ_CALL(result = self->object.findMerges(a0, a1, a2));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(TieredMergePolicy), (PyObject *) self, "findMerges", args, 2);
        }

        static PyObject *t_TieredMergePolicy_getFloorSegmentMB(t_TieredMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getFloorSegmentMB());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_TieredMergePolicy_getForceMergeDeletesPctAllowed(t_TieredMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getForceMergeDeletesPctAllowed());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_TieredMergePolicy_getMaxMergeAtOnce(t_TieredMergePolicy *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxMergeAtOnce());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_TieredMergePolicy_getMaxMergeAtOnceExplicit(t_TieredMergePolicy *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxMergeAtOnceExplicit());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_TieredMergePolicy_getMaxMergedSegmentMB(t_TieredMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMaxMergedSegmentMB());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_TieredMergePolicy_getReclaimDeletesWeight(t_TieredMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getReclaimDeletesWeight());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_TieredMergePolicy_getSegmentsPerTier(t_TieredMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getSegmentsPerTier());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_TieredMergePolicy_setFloorSegmentMB(t_TieredMergePolicy *self, PyObject *arg)
        {
          jdouble a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setFloorSegmentMB(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setFloorSegmentMB", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_setForceMergeDeletesPctAllowed(t_TieredMergePolicy *self, PyObject *arg)
        {
          jdouble a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setForceMergeDeletesPctAllowed(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setForceMergeDeletesPctAllowed", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_setMaxMergeAtOnce(t_TieredMergePolicy *self, PyObject *arg)
        {
          jint a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setMaxMergeAtOnce(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergeAtOnce", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_setMaxMergeAtOnceExplicit(t_TieredMergePolicy *self, PyObject *arg)
        {
          jint a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setMaxMergeAtOnceExplicit(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergeAtOnceExplicit", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_setMaxMergedSegmentMB(t_TieredMergePolicy *self, PyObject *arg)
        {
          jdouble a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setMaxMergedSegmentMB(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergedSegmentMB", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_setReclaimDeletesWeight(t_TieredMergePolicy *self, PyObject *arg)
        {
          jdouble a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setReclaimDeletesWeight(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setReclaimDeletesWeight", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_setSegmentsPerTier(t_TieredMergePolicy *self, PyObject *arg)
        {
          jdouble a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setSegmentsPerTier(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setSegmentsPerTier", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_toString(t_TieredMergePolicy *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(TieredMergePolicy), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_TieredMergePolicy_get__floorSegmentMB(t_TieredMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getFloorSegmentMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TieredMergePolicy_set__floorSegmentMB(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setFloorSegmentMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "floorSegmentMB", arg);
          return -1;
        }

        static PyObject *t_TieredMergePolicy_get__forceMergeDeletesPctAllowed(t_TieredMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getForceMergeDeletesPctAllowed());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TieredMergePolicy_set__forceMergeDeletesPctAllowed(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setForceMergeDeletesPctAllowed(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "forceMergeDeletesPctAllowed", arg);
          return -1;
        }

        static PyObject *t_TieredMergePolicy_get__maxMergeAtOnce(t_TieredMergePolicy *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxMergeAtOnce());
          return PyInt_FromLong((long) value);
        }
        static int t_TieredMergePolicy_set__maxMergeAtOnce(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxMergeAtOnce(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxMergeAtOnce", arg);
          return -1;
        }

        static PyObject *t_TieredMergePolicy_get__maxMergeAtOnceExplicit(t_TieredMergePolicy *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxMergeAtOnceExplicit());
          return PyInt_FromLong((long) value);
        }
        static int t_TieredMergePolicy_set__maxMergeAtOnceExplicit(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxMergeAtOnceExplicit(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxMergeAtOnceExplicit", arg);
          return -1;
        }

        static PyObject *t_TieredMergePolicy_get__maxMergedSegmentMB(t_TieredMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMaxMergedSegmentMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TieredMergePolicy_set__maxMergedSegmentMB(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMaxMergedSegmentMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxMergedSegmentMB", arg);
          return -1;
        }

        static PyObject *t_TieredMergePolicy_get__reclaimDeletesWeight(t_TieredMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getReclaimDeletesWeight());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TieredMergePolicy_set__reclaimDeletesWeight(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setReclaimDeletesWeight(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "reclaimDeletesWeight", arg);
          return -1;
        }

        static PyObject *t_TieredMergePolicy_get__segmentsPerTier(t_TieredMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getSegmentsPerTier());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TieredMergePolicy_set__segmentsPerTier(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setSegmentsPerTier(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "segmentsPerTier", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/IdentityEncoder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *IdentityEncoder::class$ = NULL;
          jmethodID *IdentityEncoder::mids$ = NULL;
          bool IdentityEncoder::live$ = false;

          jclass IdentityEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/IdentityEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_encode_871544e1] = env->getMethodID(cls, "encode", "([CII)Lorg/apache/lucene/util/BytesRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IdentityEncoder::IdentityEncoder() : ::org::apache::lucene::analysis::payloads::AbstractEncoder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::BytesRef IdentityEncoder::encode(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_encode_871544e1], a0.this$, a1, a2));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_IdentityEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IdentityEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IdentityEncoder_init_(t_IdentityEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IdentityEncoder_encode(t_IdentityEncoder *self, PyObject *args);

          static PyMethodDef t_IdentityEncoder__methods_[] = {
            DECLARE_METHOD(t_IdentityEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IdentityEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IdentityEncoder, encode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IdentityEncoder, t_IdentityEncoder, ::org::apache::lucene::analysis::payloads::AbstractEncoder, IdentityEncoder, t_IdentityEncoder_init_, 0, 0, 0, 0, 0);

          void t_IdentityEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(IdentityEncoder), module, "IdentityEncoder", 0);
          }

          void t_IdentityEncoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IdentityEncoder).tp_dict, "class_", make_descriptor(IdentityEncoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IdentityEncoder).tp_dict, "wrapfn_", make_descriptor(t_IdentityEncoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IdentityEncoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IdentityEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IdentityEncoder::initializeClass, 1)))
              return NULL;
            return t_IdentityEncoder::wrap_Object(IdentityEncoder(((t_IdentityEncoder *) arg)->object.this$));
          }
          static PyObject *t_IdentityEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IdentityEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IdentityEncoder_init_(t_IdentityEncoder *self, PyObject *args, PyObject *kwds)
          {
            IdentityEncoder object((jobject) NULL);

            INT_CALL(object = IdentityEncoder());
            self->object = object;

            return 0;
          }

          static PyObject *t_IdentityEncoder_encode(t_IdentityEncoder *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.encode(a0, a1, a2));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IdentityEncoder), (PyObject *) self, "encode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnum.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace idversion {

          ::java::lang::Class *IDVersionSegmentTermsEnum::class$ = NULL;
          jmethodID *IDVersionSegmentTermsEnum::mids$ = NULL;
          bool IDVersionSegmentTermsEnum::live$ = false;

          jclass IDVersionSegmentTermsEnum::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnum");

              mids$ = new jmethodID[max_mid];
              mids$[mid_docFreq_54c6a179] = env->getMethodID(cls, "docFreq", "()I");
              mids$[mid_docs_e6d4c3ef] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
              mids$[mid_docsAndPositions_b5d9c11b] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_getVersion_54c6a17a] = env->getMethodID(cls, "getVersion", "()J");
              mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_ord_54c6a17a] = env->getMethodID(cls, "ord", "()J");
              mids$[mid_seekCeil_fa9d72c4] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
              mids$[mid_seekExact_7bc03dc8] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Z");
              mids$[mid_seekExact_0ee6df2f] = env->getMethodID(cls, "seekExact", "(J)V");
              mids$[mid_seekExact_9e70a0d1] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;J)Z");
              mids$[mid_seekExact_fe46da51] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/index/TermState;)V");
              mids$[mid_term_4ae19461] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_termState_3e41fede] = env->getMethodID(cls, "termState", "()Lorg/apache/lucene/index/TermState;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_totalTermFreq_54c6a17a] = env->getMethodID(cls, "totalTermFreq", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint IDVersionSegmentTermsEnum::docFreq() const
          {
            return env->callIntMethod(this$, mids$[mid_docFreq_54c6a179]);
          }

          ::org::apache::lucene::index::DocsEnum IDVersionSegmentTermsEnum::docs(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsEnum & a1, jint a2) const
          {
            return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_e6d4c3ef], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::index::DocsAndPositionsEnum IDVersionSegmentTermsEnum::docsAndPositions(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsAndPositionsEnum & a1, jint a2) const
          {
            return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_b5d9c11b], a0.this$, a1.this$, a2));
          }

          ::java::util::Comparator IDVersionSegmentTermsEnum::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          jlong IDVersionSegmentTermsEnum::getVersion() const
          {
            return env->callLongMethod(this$, mids$[mid_getVersion_54c6a17a]);
          }

          ::org::apache::lucene::util::BytesRef IDVersionSegmentTermsEnum::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
          }

          jlong IDVersionSegmentTermsEnum::ord() const
          {
            return env->callLongMethod(this$, mids$[mid_ord_54c6a17a]);
          }

          ::org::apache::lucene::index::TermsEnum$SeekStatus IDVersionSegmentTermsEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_fa9d72c4], a0.this$));
          }

          jboolean IDVersionSegmentTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_seekExact_7bc03dc8], a0.this$);
          }

          void IDVersionSegmentTermsEnum::seekExact(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_seekExact_0ee6df2f], a0);
          }

          jboolean IDVersionSegmentTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0, jlong a1) const
          {
            return env->callBooleanMethod(this$, mids$[mid_seekExact_9e70a0d1], a0.this$, a1);
          }

          void IDVersionSegmentTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::index::TermState & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_seekExact_fe46da51], a0.this$, a1.this$);
          }

          ::org::apache::lucene::util::BytesRef IDVersionSegmentTermsEnum::term() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_4ae19461]));
          }

          ::org::apache::lucene::index::TermState IDVersionSegmentTermsEnum::termState() const
          {
            return ::org::apache::lucene::index::TermState(env->callObjectMethod(this$, mids$[mid_termState_3e41fede]));
          }

          ::java::lang::String IDVersionSegmentTermsEnum::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          jlong IDVersionSegmentTermsEnum::totalTermFreq() const
          {
            return env->callLongMethod(this$, mids$[mid_totalTermFreq_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace idversion {
          static PyObject *t_IDVersionSegmentTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IDVersionSegmentTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IDVersionSegmentTermsEnum_docFreq(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_docs(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_docsAndPositions(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_getComparator(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_getVersion(t_IDVersionSegmentTermsEnum *self);
          static PyObject *t_IDVersionSegmentTermsEnum_next(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_ord(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_seekCeil(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_seekExact(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_term(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_termState(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_toString(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_totalTermFreq(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_get__comparator(t_IDVersionSegmentTermsEnum *self, void *data);
          static PyObject *t_IDVersionSegmentTermsEnum_get__version(t_IDVersionSegmentTermsEnum *self, void *data);
          static PyGetSetDef t_IDVersionSegmentTermsEnum__fields_[] = {
            DECLARE_GET_FIELD(t_IDVersionSegmentTermsEnum, comparator),
            DECLARE_GET_FIELD(t_IDVersionSegmentTermsEnum, version),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IDVersionSegmentTermsEnum__methods_[] = {
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, docFreq, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, docs, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, docsAndPositions, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, getComparator, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, getVersion, METH_NOARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, next, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, ord, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, seekCeil, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, seekExact, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, term, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, termState, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, toString, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, totalTermFreq, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IDVersionSegmentTermsEnum, t_IDVersionSegmentTermsEnum, ::org::apache::lucene::index::TermsEnum, IDVersionSegmentTermsEnum, abstract_init, PyObject_SelfIter, ((PyObject *(*)(t_IDVersionSegmentTermsEnum *)) get_next< t_IDVersionSegmentTermsEnum,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_IDVersionSegmentTermsEnum__fields_, 0, 0);

          void t_IDVersionSegmentTermsEnum::install(PyObject *module)
          {
            installType(&PY_TYPE(IDVersionSegmentTermsEnum), module, "IDVersionSegmentTermsEnum", 0);
          }

          void t_IDVersionSegmentTermsEnum::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IDVersionSegmentTermsEnum).tp_dict, "class_", make_descriptor(IDVersionSegmentTermsEnum::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IDVersionSegmentTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_IDVersionSegmentTermsEnum::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IDVersionSegmentTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IDVersionSegmentTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IDVersionSegmentTermsEnum::initializeClass, 1)))
              return NULL;
            return t_IDVersionSegmentTermsEnum::wrap_Object(IDVersionSegmentTermsEnum(((t_IDVersionSegmentTermsEnum *) arg)->object.this$));
          }
          static PyObject *t_IDVersionSegmentTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IDVersionSegmentTermsEnum::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IDVersionSegmentTermsEnum_docFreq(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docFreq());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "docFreq", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_docs(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::util::Bits a0((jobject) NULL);
            ::org::apache::lucene::index::DocsEnum a1((jobject) NULL);
            jint a2;
            ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

            if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.docs(a0, a1, a2));
              return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "docs", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_docsAndPositions(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::util::Bits a0((jobject) NULL);
            ::org::apache::lucene::index::DocsAndPositionsEnum a1((jobject) NULL);
            jint a2;
            ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

            if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2));
              return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "docsAndPositions", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_getComparator(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::java::util::Comparator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "getComparator", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_getVersion(t_IDVersionSegmentTermsEnum *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getVersion());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_next(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.next());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_ord(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ord());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "ord", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_seekCeil(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekCeil(a0));
              return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "seekCeil", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_seekExact(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.seekExact(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.seekExact(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                jlong a1;
                jboolean result;

                if (!parseArgs(args, "kJ", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.seekExact(a0, a1));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                ::org::apache::lucene::index::TermState a1((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(self->object.seekExact(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "seekExact", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_term(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.term());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "term", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_termState(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::index::TermState result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termState());
              return ::org::apache::lucene::index::t_TermState::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "termState", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_toString(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_totalTermFreq(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.totalTermFreq());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "totalTermFreq", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_get__comparator(t_IDVersionSegmentTermsEnum *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_get__version(t_IDVersionSegmentTermsEnum *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getVersion());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "org/apache/lucene/search/spans/SpanTermQuery.h"
#include "org/apache/lucene/queryparser/surround/query/TooManyBasicQueries.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *BasicQueryFactory::class$ = NULL;
            jmethodID *BasicQueryFactory::mids$ = NULL;
            bool BasicQueryFactory::live$ = false;

            jclass BasicQueryFactory::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/BasicQueryFactory");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getMaxBasicQueries_54c6a179] = env->getMethodID(cls, "getMaxBasicQueries", "()I");
                mids$[mid_getNrQueriesMade_54c6a179] = env->getMethodID(cls, "getNrQueriesMade", "()I");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_newSpanTermQuery_538d14f1] = env->getMethodID(cls, "newSpanTermQuery", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/spans/SpanTermQuery;");
                mids$[mid_newTermQuery_ab5e03f9] = env->getMethodID(cls, "newTermQuery", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/TermQuery;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_checkMax_54c6a166] = env->getMethodID(cls, "checkMax", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BasicQueryFactory::BasicQueryFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            BasicQueryFactory::BasicQueryFactory(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

            jboolean BasicQueryFactory::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jint BasicQueryFactory::getMaxBasicQueries() const
            {
              return env->callIntMethod(this$, mids$[mid_getMaxBasicQueries_54c6a179]);
            }

            jint BasicQueryFactory::getNrQueriesMade() const
            {
              return env->callIntMethod(this$, mids$[mid_getNrQueriesMade_54c6a179]);
            }

            jint BasicQueryFactory::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::org::apache::lucene::search::spans::SpanTermQuery BasicQueryFactory::newSpanTermQuery(const ::org::apache::lucene::index::Term & a0) const
            {
              return ::org::apache::lucene::search::spans::SpanTermQuery(env->callObjectMethod(this$, mids$[mid_newSpanTermQuery_538d14f1], a0.this$));
            }

            ::org::apache::lucene::search::TermQuery BasicQueryFactory::newTermQuery(const ::org::apache::lucene::index::Term & a0) const
            {
              return ::org::apache::lucene::search::TermQuery(env->callObjectMethod(this$, mids$[mid_newTermQuery_ab5e03f9], a0.this$));
            }

            ::java::lang::String BasicQueryFactory::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_BasicQueryFactory_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BasicQueryFactory_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BasicQueryFactory_init_(t_BasicQueryFactory *self, PyObject *args, PyObject *kwds);
            static PyObject *t_BasicQueryFactory_equals(t_BasicQueryFactory *self, PyObject *args);
            static PyObject *t_BasicQueryFactory_getMaxBasicQueries(t_BasicQueryFactory *self);
            static PyObject *t_BasicQueryFactory_getNrQueriesMade(t_BasicQueryFactory *self);
            static PyObject *t_BasicQueryFactory_hashCode(t_BasicQueryFactory *self, PyObject *args);
            static PyObject *t_BasicQueryFactory_newSpanTermQuery(t_BasicQueryFactory *self, PyObject *arg);
            static PyObject *t_BasicQueryFactory_newTermQuery(t_BasicQueryFactory *self, PyObject *arg);
            static PyObject *t_BasicQueryFactory_toString(t_BasicQueryFactory *self, PyObject *args);
            static PyObject *t_BasicQueryFactory_get__maxBasicQueries(t_BasicQueryFactory *self, void *data);
            static PyObject *t_BasicQueryFactory_get__nrQueriesMade(t_BasicQueryFactory *self, void *data);
            static PyGetSetDef t_BasicQueryFactory__fields_[] = {
              DECLARE_GET_FIELD(t_BasicQueryFactory, maxBasicQueries),
              DECLARE_GET_FIELD(t_BasicQueryFactory, nrQueriesMade),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_BasicQueryFactory__methods_[] = {
              DECLARE_METHOD(t_BasicQueryFactory, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BasicQueryFactory, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BasicQueryFactory, equals, METH_VARARGS),
              DECLARE_METHOD(t_BasicQueryFactory, getMaxBasicQueries, METH_NOARGS),
              DECLARE_METHOD(t_BasicQueryFactory, getNrQueriesMade, METH_NOARGS),
              DECLARE_METHOD(t_BasicQueryFactory, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_BasicQueryFactory, newSpanTermQuery, METH_O),
              DECLARE_METHOD(t_BasicQueryFactory, newTermQuery, METH_O),
              DECLARE_METHOD(t_BasicQueryFactory, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BasicQueryFactory, t_BasicQueryFactory, ::java::lang::Object, BasicQueryFactory, t_BasicQueryFactory_init_, 0, 0, t_BasicQueryFactory__fields_, 0, 0);

            void t_BasicQueryFactory::install(PyObject *module)
            {
              installType(&PY_TYPE(BasicQueryFactory), module, "BasicQueryFactory", 0);
            }

            void t_BasicQueryFactory::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BasicQueryFactory).tp_dict, "class_", make_descriptor(BasicQueryFactory::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BasicQueryFactory).tp_dict, "wrapfn_", make_descriptor(t_BasicQueryFactory::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BasicQueryFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BasicQueryFactory_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BasicQueryFactory::initializeClass, 1)))
                return NULL;
              return t_BasicQueryFactory::wrap_Object(BasicQueryFactory(((t_BasicQueryFactory *) arg)->object.this$));
            }
            static PyObject *t_BasicQueryFactory_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BasicQueryFactory::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BasicQueryFactory_init_(t_BasicQueryFactory *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  BasicQueryFactory object((jobject) NULL);

                  INT_CALL(object = BasicQueryFactory());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  jint a0;
                  BasicQueryFactory object((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    INT_CALL(object = BasicQueryFactory(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_BasicQueryFactory_equals(t_BasicQueryFactory *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(BasicQueryFactory), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_BasicQueryFactory_getMaxBasicQueries(t_BasicQueryFactory *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getMaxBasicQueries());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_BasicQueryFactory_getNrQueriesMade(t_BasicQueryFactory *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNrQueriesMade());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_BasicQueryFactory_hashCode(t_BasicQueryFactory *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(BasicQueryFactory), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_BasicQueryFactory_newSpanTermQuery(t_BasicQueryFactory *self, PyObject *arg)
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::org::apache::lucene::search::spans::SpanTermQuery result((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.newSpanTermQuery(a0));
                return ::org::apache::lucene::search::spans::t_SpanTermQuery::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "newSpanTermQuery", arg);
              return NULL;
            }

            static PyObject *t_BasicQueryFactory_newTermQuery(t_BasicQueryFactory *self, PyObject *arg)
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::org::apache::lucene::search::TermQuery result((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.newTermQuery(a0));
                return ::org::apache::lucene::search::t_TermQuery::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "newTermQuery", arg);
              return NULL;
            }

            static PyObject *t_BasicQueryFactory_toString(t_BasicQueryFactory *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(BasicQueryFactory), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_BasicQueryFactory_get__maxBasicQueries(t_BasicQueryFactory *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getMaxBasicQueries());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_BasicQueryFactory_get__nrQueriesMade(t_BasicQueryFactory *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNrQueriesMade());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/WordlistLoader.h"
#include "org/apache/lucene/analysis/util/CharArrayMap.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/InputStream.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *WordlistLoader::class$ = NULL;
          jmethodID *WordlistLoader::mids$ = NULL;
          bool WordlistLoader::live$ = false;

          jclass WordlistLoader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/WordlistLoader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getSnowballWordSet_aa7d87ca] = env->getStaticMethodID(cls, "getSnowballWordSet", "(Ljava/io/Reader;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_getSnowballWordSet_f4ba7807] = env->getStaticMethodID(cls, "getSnowballWordSet", "(Ljava/io/Reader;Lorg/apache/lucene/analysis/util/CharArraySet;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_getSnowballWordSet_b3c09259] = env->getStaticMethodID(cls, "getSnowballWordSet", "(Ljava/io/Reader;Lorg/apache/lucene/util/Version;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_getStemDict_a82ef4ef] = env->getStaticMethodID(cls, "getStemDict", "(Ljava/io/Reader;Lorg/apache/lucene/analysis/util/CharArrayMap;)Lorg/apache/lucene/analysis/util/CharArrayMap;");
              mids$[mid_getWordSet_aa7d87ca] = env->getStaticMethodID(cls, "getWordSet", "(Ljava/io/Reader;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_getWordSet_0a5cb284] = env->getStaticMethodID(cls, "getWordSet", "(Ljava/io/Reader;Ljava/lang/String;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_getWordSet_b3c09259] = env->getStaticMethodID(cls, "getWordSet", "(Ljava/io/Reader;Lorg/apache/lucene/util/Version;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_getWordSet_f4ba7807] = env->getStaticMethodID(cls, "getWordSet", "(Ljava/io/Reader;Lorg/apache/lucene/analysis/util/CharArraySet;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_getWordSet_47002787] = env->getStaticMethodID(cls, "getWordSet", "(Ljava/io/Reader;Ljava/lang/String;Lorg/apache/lucene/util/Version;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_getWordSet_24df331d] = env->getStaticMethodID(cls, "getWordSet", "(Ljava/io/Reader;Ljava/lang/String;Lorg/apache/lucene/analysis/util/CharArraySet;)Lorg/apache/lucene/analysis/util/CharArraySet;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::analysis::util::CharArraySet WordlistLoader::getSnowballWordSet(const ::java::io::Reader & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getSnowballWordSet_aa7d87ca], a0.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet WordlistLoader::getSnowballWordSet(const ::java::io::Reader & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getSnowballWordSet_f4ba7807], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet WordlistLoader::getSnowballWordSet(const ::java::io::Reader & a0, const ::org::apache::lucene::util::Version & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getSnowballWordSet_b3c09259], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::CharArrayMap WordlistLoader::getStemDict(const ::java::io::Reader & a0, const ::org::apache::lucene::analysis::util::CharArrayMap & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArrayMap(env->callStaticObjectMethod(cls, mids$[mid_getStemDict_a82ef4ef], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet WordlistLoader::getWordSet(const ::java::io::Reader & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getWordSet_aa7d87ca], a0.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet WordlistLoader::getWordSet(const ::java::io::Reader & a0, const ::java::lang::String & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getWordSet_0a5cb284], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet WordlistLoader::getWordSet(const ::java::io::Reader & a0, const ::org::apache::lucene::util::Version & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getWordSet_b3c09259], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet WordlistLoader::getWordSet(const ::java::io::Reader & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getWordSet_f4ba7807], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet WordlistLoader::getWordSet(const ::java::io::Reader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::util::Version & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getWordSet_47002787], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet WordlistLoader::getWordSet(const ::java::io::Reader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getWordSet_24df331d], a0.this$, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_WordlistLoader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordlistLoader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordlistLoader_getSnowballWordSet(PyTypeObject *type, PyObject *args);
          static PyObject *t_WordlistLoader_getStemDict(PyTypeObject *type, PyObject *args);
          static PyObject *t_WordlistLoader_getWordSet(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_WordlistLoader__methods_[] = {
            DECLARE_METHOD(t_WordlistLoader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordlistLoader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordlistLoader, getSnowballWordSet, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_WordlistLoader, getStemDict, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_WordlistLoader, getWordSet, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WordlistLoader, t_WordlistLoader, ::java::lang::Object, WordlistLoader, abstract_init, 0, 0, 0, 0, 0);

          void t_WordlistLoader::install(PyObject *module)
          {
            installType(&PY_TYPE(WordlistLoader), module, "WordlistLoader", 0);
          }

          void t_WordlistLoader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WordlistLoader).tp_dict, "class_", make_descriptor(WordlistLoader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WordlistLoader).tp_dict, "wrapfn_", make_descriptor(t_WordlistLoader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WordlistLoader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WordlistLoader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordlistLoader::initializeClass, 1)))
              return NULL;
            return t_WordlistLoader::wrap_Object(WordlistLoader(((t_WordlistLoader *) arg)->object.this$));
          }
          static PyObject *t_WordlistLoader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordlistLoader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_WordlistLoader_getSnowballWordSet(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::WordlistLoader::getSnowballWordSet(a0));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "kK", ::java::io::Reader::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::WordlistLoader::getSnowballWordSet(a0, a1));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                ::org::apache::lucene::util::Version a1((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "kk", ::java::io::Reader::initializeClass, ::org::apache::lucene::util::Version::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::WordlistLoader::getSnowballWordSet(a0, a1));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getSnowballWordSet", args);
            return NULL;
          }

          static PyObject *t_WordlistLoader_getStemDict(PyTypeObject *type, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::org::apache::lucene::analysis::util::CharArrayMap a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::analysis::util::CharArrayMap result((jobject) NULL);

            if (!parseArgs(args, "kK", ::java::io::Reader::initializeClass, ::org::apache::lucene::analysis::util::CharArrayMap::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArrayMap::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::WordlistLoader::getStemDict(a0, a1));
              return ::org::apache::lucene::analysis::util::t_CharArrayMap::wrap_Object(result, &::java::lang::PY_TYPE(String));
            }

            PyErr_SetArgsError(type, "getStemDict", args);
            return NULL;
          }

          static PyObject *t_WordlistLoader_getWordSet(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::WordlistLoader::getWordSet(a0));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "ks", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::WordlistLoader::getWordSet(a0, a1));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                ::org::apache::lucene::util::Version a1((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "kk", ::java::io::Reader::initializeClass, ::org::apache::lucene::util::Version::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::WordlistLoader::getWordSet(a0, a1));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "kK", ::java::io::Reader::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::WordlistLoader::getWordSet(a0, a1));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::util::Version a2((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "ksk", ::java::io::Reader::initializeClass, ::org::apache::lucene::util::Version::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::WordlistLoader::getWordSet(a0, a1, a2));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "ksK", ::java::io::Reader::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::WordlistLoader::getWordSet(a0, a1, a2));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getWordSet", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/SentinelIntSet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *SentinelIntSet::class$ = NULL;
        jmethodID *SentinelIntSet::mids$ = NULL;
        jfieldID *SentinelIntSet::fids$ = NULL;
        bool SentinelIntSet::live$ = false;

        jclass SentinelIntSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/SentinelIntSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_exists_39c7bd30] = env->getMethodID(cls, "exists", "(I)Z");
            mids$[mid_find_39c7bd23] = env->getMethodID(cls, "find", "(I)I");
            mids$[mid_getSlot_39c7bd23] = env->getMethodID(cls, "getSlot", "(I)I");
            mids$[mid_hash_39c7bd23] = env->getMethodID(cls, "hash", "(I)I");
            mids$[mid_put_39c7bd23] = env->getMethodID(cls, "put", "(I)I");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_rehash_54c6a166] = env->getMethodID(cls, "rehash", "()V");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

            fids$ = new jfieldID[max_fid];
            fids$[fid_count] = env->getFieldID(cls, "count", "I");
            fids$[fid_emptyVal] = env->getFieldID(cls, "emptyVal", "I");
            fids$[fid_keys] = env->getFieldID(cls, "keys", "[I");
            fids$[fid_rehashCount] = env->getFieldID(cls, "rehashCount", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SentinelIntSet::SentinelIntSet(jint a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

        void SentinelIntSet::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        jboolean SentinelIntSet::exists(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_exists_39c7bd30], a0);
        }

        jint SentinelIntSet::find(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_find_39c7bd23], a0);
        }

        jint SentinelIntSet::getSlot(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getSlot_39c7bd23], a0);
        }

        jint SentinelIntSet::hash(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_hash_39c7bd23], a0);
        }

        jint SentinelIntSet::put(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_put_39c7bd23], a0);
        }

        jlong SentinelIntSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        void SentinelIntSet::rehash() const
        {
          env->callVoidMethod(this$, mids$[mid_rehash_54c6a166]);
        }

        jint SentinelIntSet::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        jint SentinelIntSet::_get_count() const
        {
          return env->getIntField(this$, fids$[fid_count]);
        }

        void SentinelIntSet::_set_count(jint a0) const
        {
          env->setIntField(this$, fids$[fid_count], a0);
        }

        jint SentinelIntSet::_get_emptyVal() const
        {
          return env->getIntField(this$, fids$[fid_emptyVal]);
        }

        JArray< jint > SentinelIntSet::_get_keys() const
        {
          return JArray< jint >(env->getObjectField(this$, fids$[fid_keys]));
        }

        void SentinelIntSet::_set_keys(const JArray< jint > & a0) const
        {
          env->setObjectField(this$, fids$[fid_keys], a0.this$);
        }

        jint SentinelIntSet::_get_rehashCount() const
        {
          return env->getIntField(this$, fids$[fid_rehashCount]);
        }

        void SentinelIntSet::_set_rehashCount(jint a0) const
        {
          env->setIntField(this$, fids$[fid_rehashCount], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_SentinelIntSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SentinelIntSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SentinelIntSet_init_(t_SentinelIntSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SentinelIntSet_clear(t_SentinelIntSet *self);
        static PyObject *t_SentinelIntSet_exists(t_SentinelIntSet *self, PyObject *arg);
        static PyObject *t_SentinelIntSet_find(t_SentinelIntSet *self, PyObject *arg);
        static PyObject *t_SentinelIntSet_getSlot(t_SentinelIntSet *self, PyObject *arg);
        static PyObject *t_SentinelIntSet_hash(t_SentinelIntSet *self, PyObject *arg);
        static PyObject *t_SentinelIntSet_put(t_SentinelIntSet *self, PyObject *arg);
        static PyObject *t_SentinelIntSet_ramBytesUsed(t_SentinelIntSet *self);
        static PyObject *t_SentinelIntSet_rehash(t_SentinelIntSet *self);
        static PyObject *t_SentinelIntSet_size(t_SentinelIntSet *self);
        static PyObject *t_SentinelIntSet_get__count(t_SentinelIntSet *self, void *data);
        static int t_SentinelIntSet_set__count(t_SentinelIntSet *self, PyObject *arg, void *data);
        static PyObject *t_SentinelIntSet_get__emptyVal(t_SentinelIntSet *self, void *data);
        static PyObject *t_SentinelIntSet_get__keys(t_SentinelIntSet *self, void *data);
        static int t_SentinelIntSet_set__keys(t_SentinelIntSet *self, PyObject *arg, void *data);
        static PyObject *t_SentinelIntSet_get__rehashCount(t_SentinelIntSet *self, void *data);
        static int t_SentinelIntSet_set__rehashCount(t_SentinelIntSet *self, PyObject *arg, void *data);

        static PyGetSetDef t_SentinelIntSet__fields_[] = {
          DECLARE_GETSET_FIELD(t_SentinelIntSet, count),
          DECLARE_GET_FIELD(t_SentinelIntSet, emptyVal),
          DECLARE_GETSET_FIELD(t_SentinelIntSet, keys),
          DECLARE_GETSET_FIELD(t_SentinelIntSet, rehashCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SentinelIntSet__methods_[] = {
          DECLARE_METHOD(t_SentinelIntSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SentinelIntSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SentinelIntSet, clear, METH_NOARGS),
          DECLARE_METHOD(t_SentinelIntSet, exists, METH_O),
          DECLARE_METHOD(t_SentinelIntSet, find, METH_O),
          DECLARE_METHOD(t_SentinelIntSet, getSlot, METH_O),
          DECLARE_METHOD(t_SentinelIntSet, hash, METH_O),
          DECLARE_METHOD(t_SentinelIntSet, put, METH_O),
          DECLARE_METHOD(t_SentinelIntSet, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_SentinelIntSet, rehash, METH_NOARGS),
          DECLARE_METHOD(t_SentinelIntSet, size, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SentinelIntSet, t_SentinelIntSet, ::java::lang::Object, SentinelIntSet, t_SentinelIntSet_init_, 0, 0, t_SentinelIntSet__fields_, 0, 0);

        void t_SentinelIntSet::install(PyObject *module)
        {
          installType(&PY_TYPE(SentinelIntSet), module, "SentinelIntSet", 0);
        }

        void t_SentinelIntSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SentinelIntSet).tp_dict, "class_", make_descriptor(SentinelIntSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SentinelIntSet).tp_dict, "wrapfn_", make_descriptor(t_SentinelIntSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SentinelIntSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SentinelIntSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SentinelIntSet::initializeClass, 1)))
            return NULL;
          return t_SentinelIntSet::wrap_Object(SentinelIntSet(((t_SentinelIntSet *) arg)->object.this$));
        }
        static PyObject *t_SentinelIntSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SentinelIntSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SentinelIntSet_init_(t_SentinelIntSet *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          jint a1;
          SentinelIntSet object((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            INT_CALL(object = SentinelIntSet(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SentinelIntSet_clear(t_SentinelIntSet *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_SentinelIntSet_exists(t_SentinelIntSet *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.exists(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "exists", arg);
          return NULL;
        }

        static PyObject *t_SentinelIntSet_find(t_SentinelIntSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.find(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "find", arg);
          return NULL;
        }

        static PyObject *t_SentinelIntSet_getSlot(t_SentinelIntSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getSlot(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSlot", arg);
          return NULL;
        }

        static PyObject *t_SentinelIntSet_hash(t_SentinelIntSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.hash(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "hash", arg);
          return NULL;
        }

        static PyObject *t_SentinelIntSet_put(t_SentinelIntSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.put(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "put", arg);
          return NULL;
        }

        static PyObject *t_SentinelIntSet_ramBytesUsed(t_SentinelIntSet *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SentinelIntSet_rehash(t_SentinelIntSet *self)
        {
          OBJ_CALL(self->object.rehash());
          Py_RETURN_NONE;
        }

        static PyObject *t_SentinelIntSet_size(t_SentinelIntSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SentinelIntSet_get__count(t_SentinelIntSet *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_count());
          return PyInt_FromLong((long) value);
        }
        static int t_SentinelIntSet_set__count(t_SentinelIntSet *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_count(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "count", arg);
          return -1;
        }

        static PyObject *t_SentinelIntSet_get__emptyVal(t_SentinelIntSet *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_emptyVal());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_SentinelIntSet_get__keys(t_SentinelIntSet *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_keys());
          return value.wrap();
        }
        static int t_SentinelIntSet_set__keys(t_SentinelIntSet *self, PyObject *arg, void *data)
        {
          JArray< jint > value((jobject) NULL);
          if (!parseArg(arg, "[I", &value))
          {
            INT_CALL(self->object._set_keys(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "keys", arg);
          return -1;
        }

        static PyObject *t_SentinelIntSet_get__rehashCount(t_SentinelIntSet *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_rehashCount());
          return PyInt_FromLong((long) value);
        }
        static int t_SentinelIntSet_set__rehashCount(t_SentinelIntSet *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_rehashCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "rehashCount", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/TermFilter.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *TermFilter::class$ = NULL;
        jmethodID *TermFilter::mids$ = NULL;
        bool TermFilter::live$ = false;

        jclass TermFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/TermFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_getTerm_0f71f314] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/index/Term;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermFilter::TermFilter(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

        jboolean TermFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSet TermFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::Term TermFilter::getTerm() const
        {
          return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getTerm_0f71f314]));
        }

        jint TermFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String TermFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_TermFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermFilter_init_(t_TermFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermFilter_equals(t_TermFilter *self, PyObject *args);
        static PyObject *t_TermFilter_getDocIdSet(t_TermFilter *self, PyObject *args);
        static PyObject *t_TermFilter_getTerm(t_TermFilter *self);
        static PyObject *t_TermFilter_hashCode(t_TermFilter *self, PyObject *args);
        static PyObject *t_TermFilter_toString(t_TermFilter *self, PyObject *args);
        static PyObject *t_TermFilter_get__term(t_TermFilter *self, void *data);
        static PyGetSetDef t_TermFilter__fields_[] = {
          DECLARE_GET_FIELD(t_TermFilter, term),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermFilter__methods_[] = {
          DECLARE_METHOD(t_TermFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_TermFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_TermFilter, getTerm, METH_NOARGS),
          DECLARE_METHOD(t_TermFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_TermFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermFilter, t_TermFilter, ::org::apache::lucene::search::Filter, TermFilter, t_TermFilter_init_, 0, 0, t_TermFilter__fields_, 0, 0);

        void t_TermFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(TermFilter), module, "TermFilter", 0);
        }

        void t_TermFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermFilter).tp_dict, "class_", make_descriptor(TermFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermFilter).tp_dict, "wrapfn_", make_descriptor(t_TermFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermFilter::initializeClass, 1)))
            return NULL;
          return t_TermFilter::wrap_Object(TermFilter(((t_TermFilter *) arg)->object.this$));
        }
        static PyObject *t_TermFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermFilter_init_(t_TermFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          TermFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            INT_CALL(object = TermFilter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermFilter_equals(t_TermFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TermFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_TermFilter_getDocIdSet(t_TermFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(TermFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_TermFilter_getTerm(t_TermFilter *self)
        {
          ::org::apache::lucene::index::Term result((jobject) NULL);
          OBJ_CALL(result = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(result);
        }

        static PyObject *t_TermFilter_hashCode(t_TermFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(TermFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_TermFilter_toString(t_TermFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(TermFilter), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_TermFilter_get__term(t_TermFilter *self, void *data)
        {
          ::org::apache::lucene::index::Term value((jobject) NULL);
          OBJ_CALL(value = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ConstValueSource.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Object.h"
#include "java/lang/Number.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ConstValueSource::class$ = NULL;
            jmethodID *ConstValueSource::mids$ = NULL;
            bool ConstValueSource::live$ = false;

            jclass ConstValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ConstValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getBool_54c6a16a] = env->getMethodID(cls, "getBool", "()Z");
                mids$[mid_getDouble_54c6a174] = env->getMethodID(cls, "getDouble", "()D");
                mids$[mid_getFloat_54c6a176] = env->getMethodID(cls, "getFloat", "()F");
                mids$[mid_getInt_54c6a179] = env->getMethodID(cls, "getInt", "()I");
                mids$[mid_getLong_54c6a17a] = env->getMethodID(cls, "getLong", "()J");
                mids$[mid_getNumber_ee47e3e1] = env->getMethodID(cls, "getNumber", "()Ljava/lang/Number;");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ConstValueSource::ConstValueSource(jfloat a0) : ::org::apache::lucene::queries::function::valuesource::ConstNumberSource(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

            ::java::lang::String ConstValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean ConstValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jboolean ConstValueSource::getBool() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getBool_54c6a16a]);
            }

            jdouble ConstValueSource::getDouble() const
            {
              return env->callDoubleMethod(this$, mids$[mid_getDouble_54c6a174]);
            }

            jfloat ConstValueSource::getFloat() const
            {
              return env->callFloatMethod(this$, mids$[mid_getFloat_54c6a176]);
            }

            jint ConstValueSource::getInt() const
            {
              return env->callIntMethod(this$, mids$[mid_getInt_54c6a179]);
            }

            jlong ConstValueSource::getLong() const
            {
              return env->callLongMethod(this$, mids$[mid_getLong_54c6a17a]);
            }

            ::java::lang::Number ConstValueSource::getNumber() const
            {
              return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getNumber_ee47e3e1]));
            }

            ::org::apache::lucene::queries::function::FunctionValues ConstValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint ConstValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ConstValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ConstValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ConstValueSource_init_(t_ConstValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ConstValueSource_description(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_equals(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getBool(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getDouble(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getFloat(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getInt(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getLong(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getNumber(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getValues(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_hashCode(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_get__bool(t_ConstValueSource *self, void *data);
            static PyObject *t_ConstValueSource_get__double(t_ConstValueSource *self, void *data);
            static PyObject *t_ConstValueSource_get__float(t_ConstValueSource *self, void *data);
            static PyObject *t_ConstValueSource_get__int(t_ConstValueSource *self, void *data);
            static PyObject *t_ConstValueSource_get__long(t_ConstValueSource *self, void *data);
            static PyObject *t_ConstValueSource_get__number(t_ConstValueSource *self, void *data);
            static PyGetSetDef t_ConstValueSource__fields_[] = {
              DECLARE_GET_FIELD(t_ConstValueSource, bool),
              DECLARE_GET_FIELD(t_ConstValueSource, double),
              DECLARE_GET_FIELD(t_ConstValueSource, float),
              DECLARE_GET_FIELD(t_ConstValueSource, int),
              DECLARE_GET_FIELD(t_ConstValueSource, long),
              DECLARE_GET_FIELD(t_ConstValueSource, number),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ConstValueSource__methods_[] = {
              DECLARE_METHOD(t_ConstValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ConstValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ConstValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getBool, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getDouble, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getFloat, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getInt, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getLong, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getNumber, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ConstValueSource, t_ConstValueSource, ::org::apache::lucene::queries::function::valuesource::ConstNumberSource, ConstValueSource, t_ConstValueSource_init_, 0, 0, t_ConstValueSource__fields_, 0, 0);

            void t_ConstValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(ConstValueSource), module, "ConstValueSource", 0);
            }

            void t_ConstValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ConstValueSource).tp_dict, "class_", make_descriptor(ConstValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ConstValueSource).tp_dict, "wrapfn_", make_descriptor(t_ConstValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ConstValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ConstValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ConstValueSource::initializeClass, 1)))
                return NULL;
              return t_ConstValueSource::wrap_Object(ConstValueSource(((t_ConstValueSource *) arg)->object.this$));
            }
            static PyObject *t_ConstValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ConstValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ConstValueSource_init_(t_ConstValueSource *self, PyObject *args, PyObject *kwds)
            {
              jfloat a0;
              ConstValueSource object((jobject) NULL);

              if (!parseArgs(args, "F", &a0))
              {
                INT_CALL(object = ConstValueSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ConstValueSource_description(t_ConstValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_ConstValueSource_equals(t_ConstValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_ConstValueSource_getBool(t_ConstValueSource *self, PyObject *args)
            {
              jboolean result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getBool());
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "getBool", args, 2);
            }

            static PyObject *t_ConstValueSource_getDouble(t_ConstValueSource *self, PyObject *args)
            {
              jdouble result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getDouble());
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "getDouble", args, 2);
            }

            static PyObject *t_ConstValueSource_getFloat(t_ConstValueSource *self, PyObject *args)
            {
              jfloat result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getFloat());
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "getFloat", args, 2);
            }

            static PyObject *t_ConstValueSource_getInt(t_ConstValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getInt());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "getInt", args, 2);
            }

            static PyObject *t_ConstValueSource_getLong(t_ConstValueSource *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getLong());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "getLong", args, 2);
            }

            static PyObject *t_ConstValueSource_getNumber(t_ConstValueSource *self, PyObject *args)
            {
              ::java::lang::Number result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getNumber());
                return ::java::lang::t_Number::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "getNumber", args, 2);
            }

            static PyObject *t_ConstValueSource_getValues(t_ConstValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_ConstValueSource_hashCode(t_ConstValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_ConstValueSource_get__bool(t_ConstValueSource *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getBool());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_ConstValueSource_get__double(t_ConstValueSource *self, void *data)
            {
              jdouble value;
              OBJ_CALL(value = self->object.getDouble());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_ConstValueSource_get__float(t_ConstValueSource *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getFloat());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_ConstValueSource_get__int(t_ConstValueSource *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getInt());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_ConstValueSource_get__long(t_ConstValueSource *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getLong());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }

            static PyObject *t_ConstValueSource_get__number(t_ConstValueSource *self, void *data)
            {
              ::java::lang::Number value((jobject) NULL);
              OBJ_CALL(value = self->object.getNumber());
              return ::java::lang::t_Number::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/NearSpansOrdered.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/TermContext.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/Term.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/spans/SpanNearQuery.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *NearSpansOrdered::class$ = NULL;
          jmethodID *NearSpansOrdered::mids$ = NULL;
          bool NearSpansOrdered::live$ = false;

          jclass NearSpansOrdered::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/NearSpansOrdered");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a9b434a2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanNearQuery;Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)V");
              mids$[mid_init$_0f9019fb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanNearQuery;Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;Z)V");
              mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
              mids$[mid_doc_54c6a179] = env->getMethodID(cls, "doc", "()I");
              mids$[mid_end_54c6a179] = env->getMethodID(cls, "end", "()I");
              mids$[mid_getPayload_2d2d7de4] = env->getMethodID(cls, "getPayload", "()Ljava/util/Collection;");
              mids$[mid_getSubSpans_dd49b8eb] = env->getMethodID(cls, "getSubSpans", "()[Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_isPayloadAvailable_54c6a16a] = env->getMethodID(cls, "isPayloadAvailable", "()Z");
              mids$[mid_next_54c6a16a] = env->getMethodID(cls, "next", "()Z");
              mids$[mid_skipTo_39c7bd30] = env->getMethodID(cls, "skipTo", "(I)Z");
              mids$[mid_start_54c6a179] = env->getMethodID(cls, "start", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NearSpansOrdered::NearSpansOrdered(const ::org::apache::lucene::search::spans::SpanNearQuery & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1, const ::org::apache::lucene::util::Bits & a2, const ::java::util::Map & a3) : ::org::apache::lucene::search::spans::Spans(env->newObject(initializeClass, &mids$, mid_init$_a9b434a2, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          NearSpansOrdered::NearSpansOrdered(const ::org::apache::lucene::search::spans::SpanNearQuery & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1, const ::org::apache::lucene::util::Bits & a2, const ::java::util::Map & a3, jboolean a4) : ::org::apache::lucene::search::spans::Spans(env->newObject(initializeClass, &mids$, mid_init$_0f9019fb, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

          jlong NearSpansOrdered::cost() const
          {
            return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
          }

          jint NearSpansOrdered::doc() const
          {
            return env->callIntMethod(this$, mids$[mid_doc_54c6a179]);
          }

          jint NearSpansOrdered::end() const
          {
            return env->callIntMethod(this$, mids$[mid_end_54c6a179]);
          }

          ::java::util::Collection NearSpansOrdered::getPayload() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getPayload_2d2d7de4]));
          }

          JArray< ::org::apache::lucene::search::spans::Spans > NearSpansOrdered::getSubSpans() const
          {
            return JArray< ::org::apache::lucene::search::spans::Spans >(env->callObjectMethod(this$, mids$[mid_getSubSpans_dd49b8eb]));
          }

          jboolean NearSpansOrdered::isPayloadAvailable() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isPayloadAvailable_54c6a16a]);
          }

          jboolean NearSpansOrdered::next() const
          {
            return env->callBooleanMethod(this$, mids$[mid_next_54c6a16a]);
          }

          jboolean NearSpansOrdered::skipTo(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_skipTo_39c7bd30], a0);
          }

          jint NearSpansOrdered::start() const
          {
            return env->callIntMethod(this$, mids$[mid_start_54c6a179]);
          }

          ::java::lang::String NearSpansOrdered::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_NearSpansOrdered_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NearSpansOrdered_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NearSpansOrdered_init_(t_NearSpansOrdered *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NearSpansOrdered_cost(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_doc(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_end(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_getPayload(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_getSubSpans(t_NearSpansOrdered *self);
          static PyObject *t_NearSpansOrdered_isPayloadAvailable(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_next(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_skipTo(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_start(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_toString(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_get__payload(t_NearSpansOrdered *self, void *data);
          static PyObject *t_NearSpansOrdered_get__payloadAvailable(t_NearSpansOrdered *self, void *data);
          static PyObject *t_NearSpansOrdered_get__subSpans(t_NearSpansOrdered *self, void *data);
          static PyGetSetDef t_NearSpansOrdered__fields_[] = {
            DECLARE_GET_FIELD(t_NearSpansOrdered, payload),
            DECLARE_GET_FIELD(t_NearSpansOrdered, payloadAvailable),
            DECLARE_GET_FIELD(t_NearSpansOrdered, subSpans),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NearSpansOrdered__methods_[] = {
            DECLARE_METHOD(t_NearSpansOrdered, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NearSpansOrdered, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NearSpansOrdered, cost, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, doc, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, end, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, getPayload, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, getSubSpans, METH_NOARGS),
            DECLARE_METHOD(t_NearSpansOrdered, isPayloadAvailable, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, next, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, skipTo, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, start, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NearSpansOrdered, t_NearSpansOrdered, ::org::apache::lucene::search::spans::Spans, NearSpansOrdered, t_NearSpansOrdered_init_, 0, 0, t_NearSpansOrdered__fields_, 0, 0);

          void t_NearSpansOrdered::install(PyObject *module)
          {
            installType(&PY_TYPE(NearSpansOrdered), module, "NearSpansOrdered", 0);
          }

          void t_NearSpansOrdered::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NearSpansOrdered).tp_dict, "class_", make_descriptor(NearSpansOrdered::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NearSpansOrdered).tp_dict, "wrapfn_", make_descriptor(t_NearSpansOrdered::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NearSpansOrdered).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NearSpansOrdered_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NearSpansOrdered::initializeClass, 1)))
              return NULL;
            return t_NearSpansOrdered::wrap_Object(NearSpansOrdered(((t_NearSpansOrdered *) arg)->object.this$));
          }
          static PyObject *t_NearSpansOrdered_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NearSpansOrdered::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NearSpansOrdered_init_(t_NearSpansOrdered *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::search::spans::SpanNearQuery a0((jobject) NULL);
                ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
                ::org::apache::lucene::util::Bits a2((jobject) NULL);
                ::java::util::Map a3((jobject) NULL);
                PyTypeObject **p3;
                NearSpansOrdered object((jobject) NULL);

                if (!parseArgs(args, "kkkK", ::org::apache::lucene::search::spans::SpanNearQuery::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Map::parameters_))
                {
                  INT_CALL(object = NearSpansOrdered(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::search::spans::SpanNearQuery a0((jobject) NULL);
                ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
                ::org::apache::lucene::util::Bits a2((jobject) NULL);
                ::java::util::Map a3((jobject) NULL);
                PyTypeObject **p3;
                jboolean a4;
                NearSpansOrdered object((jobject) NULL);

                if (!parseArgs(args, "kkkKZ", ::org::apache::lucene::search::spans::SpanNearQuery::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Map::parameters_, &a4))
                {
                  INT_CALL(object = NearSpansOrdered(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NearSpansOrdered_cost(t_NearSpansOrdered *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.cost());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "cost", args, 2);
          }

          static PyObject *t_NearSpansOrdered_doc(t_NearSpansOrdered *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.doc());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "doc", args, 2);
          }

          static PyObject *t_NearSpansOrdered_end(t_NearSpansOrdered *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.end());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_NearSpansOrdered_getPayload(t_NearSpansOrdered *self, PyObject *args)
          {
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getPayload());
              return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(Object));
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "getPayload", args, 2);
          }

          static PyObject *t_NearSpansOrdered_getSubSpans(t_NearSpansOrdered *self)
          {
            JArray< ::org::apache::lucene::search::spans::Spans > result((jobject) NULL);
            OBJ_CALL(result = self->object.getSubSpans());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spans::t_Spans::wrap_jobject);
          }

          static PyObject *t_NearSpansOrdered_isPayloadAvailable(t_NearSpansOrdered *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.isPayloadAvailable());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "isPayloadAvailable", args, 2);
          }

          static PyObject *t_NearSpansOrdered_next(t_NearSpansOrdered *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.next());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_NearSpansOrdered_skipTo(t_NearSpansOrdered *self, PyObject *args)
          {
            jint a0;
            jboolean result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.skipTo(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "skipTo", args, 2);
          }

          static PyObject *t_NearSpansOrdered_start(t_NearSpansOrdered *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.start());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "start", args, 2);
          }

          static PyObject *t_NearSpansOrdered_toString(t_NearSpansOrdered *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_NearSpansOrdered_get__payload(t_NearSpansOrdered *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getPayload());
            return ::java::util::t_Collection::wrap_Object(value);
          }

          static PyObject *t_NearSpansOrdered_get__payloadAvailable(t_NearSpansOrdered *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isPayloadAvailable());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_NearSpansOrdered_get__subSpans(t_NearSpansOrdered *self, void *data)
          {
            JArray< ::org::apache::lucene::search::spans::Spans > value((jobject) NULL);
            OBJ_CALL(value = self->object.getSubSpans());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::spans::t_Spans::wrap_jobject);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40Codec.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40Codec::class$ = NULL;
          jmethodID *Lucene40Codec::mids$ = NULL;
          bool Lucene40Codec::live$ = false;

          jclass Lucene40Codec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40Codec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_getPostingsFormatForField_19d2f1c6] = env->getMethodID(cls, "getPostingsFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40Codec::Lucene40Codec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesFormat Lucene40Codec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene40Codec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene40Codec::getPostingsFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_getPostingsFormatForField_19d2f1c6], a0.this$));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene40Codec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene40Codec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene40Codec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene40Codec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene40Codec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene40Codec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40Codec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40Codec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40Codec_init_(t_Lucene40Codec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40Codec_docValuesFormat(t_Lucene40Codec *self, PyObject *args);
          static PyObject *t_Lucene40Codec_fieldInfosFormat(t_Lucene40Codec *self, PyObject *args);
          static PyObject *t_Lucene40Codec_getPostingsFormatForField(t_Lucene40Codec *self, PyObject *arg);
          static PyObject *t_Lucene40Codec_liveDocsFormat(t_Lucene40Codec *self, PyObject *args);
          static PyObject *t_Lucene40Codec_normsFormat(t_Lucene40Codec *self, PyObject *args);
          static PyObject *t_Lucene40Codec_postingsFormat(t_Lucene40Codec *self, PyObject *args);
          static PyObject *t_Lucene40Codec_segmentInfoFormat(t_Lucene40Codec *self, PyObject *args);
          static PyObject *t_Lucene40Codec_storedFieldsFormat(t_Lucene40Codec *self, PyObject *args);
          static PyObject *t_Lucene40Codec_termVectorsFormat(t_Lucene40Codec *self, PyObject *args);

          static PyMethodDef t_Lucene40Codec__methods_[] = {
            DECLARE_METHOD(t_Lucene40Codec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40Codec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40Codec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40Codec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40Codec, getPostingsFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene40Codec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40Codec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40Codec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40Codec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40Codec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40Codec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40Codec, t_Lucene40Codec, ::org::apache::lucene::codecs::Codec, Lucene40Codec, t_Lucene40Codec_init_, 0, 0, 0, 0, 0);

          void t_Lucene40Codec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40Codec), module, "Lucene40Codec", 0);
          }

          void t_Lucene40Codec::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40Codec).tp_dict, "class_", make_descriptor(Lucene40Codec::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40Codec).tp_dict, "wrapfn_", make_descriptor(t_Lucene40Codec::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40Codec).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40Codec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40Codec::initializeClass, 1)))
              return NULL;
            return t_Lucene40Codec::wrap_Object(Lucene40Codec(((t_Lucene40Codec *) arg)->object.this$));
          }
          static PyObject *t_Lucene40Codec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40Codec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40Codec_init_(t_Lucene40Codec *self, PyObject *args, PyObject *kwds)
          {
            Lucene40Codec object((jobject) NULL);

            INT_CALL(object = Lucene40Codec());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40Codec_docValuesFormat(t_Lucene40Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40Codec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene40Codec_fieldInfosFormat(t_Lucene40Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40Codec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene40Codec_getPostingsFormatForField(t_Lucene40Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPostingsFormatForField(a0));
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPostingsFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene40Codec_liveDocsFormat(t_Lucene40Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40Codec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene40Codec_normsFormat(t_Lucene40Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40Codec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene40Codec_postingsFormat(t_Lucene40Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40Codec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene40Codec_segmentInfoFormat(t_Lucene40Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40Codec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene40Codec_storedFieldsFormat(t_Lucene40Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40Codec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene40Codec_termVectorsFormat(t_Lucene40Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40Codec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModelD.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModelD::class$ = NULL;
          jmethodID *BasicModelD::mids$ = NULL;
          bool BasicModelD::live$ = false;

          jclass BasicModelD::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModelD");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModelD::BasicModelD() : ::org::apache::lucene::search::similarities::BasicModel(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat BasicModelD::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String BasicModelD::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModelD_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModelD_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModelD_init_(t_BasicModelD *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModelD_score(t_BasicModelD *self, PyObject *args);
          static PyObject *t_BasicModelD_toString(t_BasicModelD *self, PyObject *args);

          static PyMethodDef t_BasicModelD__methods_[] = {
            DECLARE_METHOD(t_BasicModelD, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelD, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelD, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelD, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicModelD, t_BasicModelD, ::org::apache::lucene::search::similarities::BasicModel, BasicModelD, t_BasicModelD_init_, 0, 0, 0, 0, 0);

          void t_BasicModelD::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModelD), module, "BasicModelD", 0);
          }

          void t_BasicModelD::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicModelD).tp_dict, "class_", make_descriptor(BasicModelD::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicModelD).tp_dict, "wrapfn_", make_descriptor(t_BasicModelD::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicModelD).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModelD_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModelD::initializeClass, 1)))
              return NULL;
            return t_BasicModelD::wrap_Object(BasicModelD(((t_BasicModelD *) arg)->object.this$));
          }
          static PyObject *t_BasicModelD_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModelD::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModelD_init_(t_BasicModelD *self, PyObject *args, PyObject *kwds)
          {
            BasicModelD object((jobject) NULL);

            INT_CALL(object = BasicModelD());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModelD_score(t_BasicModelD *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(BasicModelD), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_BasicModelD_toString(t_BasicModelD *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BasicModelD), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {

            ::java::lang::Class *TermAllGroupHeadsCollector::class$ = NULL;
            jmethodID *TermAllGroupHeadsCollector::mids$ = NULL;
            bool TermAllGroupHeadsCollector::live$ = false;

            jclass TermAllGroupHeadsCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_create_3e5305de] = env->getStaticMethodID(cls, "create", "(Ljava/lang/String;Lorg/apache/lucene/search/Sort;)Lorg/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector;");
                mids$[mid_create_cf6bc864] = env->getStaticMethodID(cls, "create", "(Ljava/lang/String;Lorg/apache/lucene/search/Sort;I)Lorg/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector TermAllGroupHeadsCollector::create(const ::java::lang::String & a0, const ::org::apache::lucene::search::Sort & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector(env->callStaticObjectMethod(cls, mids$[mid_create_3e5305de], a0.this$, a1.this$));
            }

            ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector TermAllGroupHeadsCollector::create(const ::java::lang::String & a0, const ::org::apache::lucene::search::Sort & a1, jint a2)
            {
              jclass cls = env->getClass(initializeClass);
              return ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector(env->callStaticObjectMethod(cls, mids$[mid_create_cf6bc864], a0.this$, a1.this$, a2));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {
            static PyObject *t_TermAllGroupHeadsCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermAllGroupHeadsCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermAllGroupHeadsCollector_of_(t_TermAllGroupHeadsCollector *self, PyObject *args);
            static PyObject *t_TermAllGroupHeadsCollector_create(PyTypeObject *type, PyObject *args);
            static PyObject *t_TermAllGroupHeadsCollector_get__parameters_(t_TermAllGroupHeadsCollector *self, void *data);
            static PyGetSetDef t_TermAllGroupHeadsCollector__fields_[] = {
              DECLARE_GET_FIELD(t_TermAllGroupHeadsCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TermAllGroupHeadsCollector__methods_[] = {
              DECLARE_METHOD(t_TermAllGroupHeadsCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermAllGroupHeadsCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermAllGroupHeadsCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_TermAllGroupHeadsCollector, create, METH_VARARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermAllGroupHeadsCollector, t_TermAllGroupHeadsCollector, ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector, TermAllGroupHeadsCollector, abstract_init, 0, 0, t_TermAllGroupHeadsCollector__fields_, 0, 0);
            PyObject *t_TermAllGroupHeadsCollector::wrap_Object(const TermAllGroupHeadsCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermAllGroupHeadsCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermAllGroupHeadsCollector *self = (t_TermAllGroupHeadsCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_TermAllGroupHeadsCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermAllGroupHeadsCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermAllGroupHeadsCollector *self = (t_TermAllGroupHeadsCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_TermAllGroupHeadsCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(TermAllGroupHeadsCollector), module, "TermAllGroupHeadsCollector", 0);
            }

            void t_TermAllGroupHeadsCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermAllGroupHeadsCollector).tp_dict, "class_", make_descriptor(TermAllGroupHeadsCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermAllGroupHeadsCollector).tp_dict, "wrapfn_", make_descriptor(t_TermAllGroupHeadsCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermAllGroupHeadsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermAllGroupHeadsCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermAllGroupHeadsCollector::initializeClass, 1)))
                return NULL;
              return t_TermAllGroupHeadsCollector::wrap_Object(TermAllGroupHeadsCollector(((t_TermAllGroupHeadsCollector *) arg)->object.this$));
            }
            static PyObject *t_TermAllGroupHeadsCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermAllGroupHeadsCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TermAllGroupHeadsCollector_of_(t_TermAllGroupHeadsCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static PyObject *t_TermAllGroupHeadsCollector_create(PyTypeObject *type, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::search::Sort a1((jobject) NULL);
                  ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector result((jobject) NULL);

                  if (!parseArgs(args, "sk", ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::search::grouping::term::TermAllGroupHeadsCollector::create(a0, a1));
                    return ::org::apache::lucene::search::grouping::t_AbstractAllGroupHeadsCollector::wrap_Object(result);
                  }
                }
                break;
               case 3:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::search::Sort a1((jobject) NULL);
                  jint a2;
                  ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector result((jobject) NULL);

                  if (!parseArgs(args, "skI", ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::search::grouping::term::TermAllGroupHeadsCollector::create(a0, a1, a2));
                    return ::org::apache::lucene::search::grouping::t_AbstractAllGroupHeadsCollector::wrap_Object(result);
                  }
                }
              }

              PyErr_SetArgsError(type, "create", args);
              return NULL;
            }
            static PyObject *t_TermAllGroupHeadsCollector_get__parameters_(t_TermAllGroupHeadsCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/ByteDocValuesField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *ByteDocValuesField::class$ = NULL;
        jmethodID *ByteDocValuesField::mids$ = NULL;
        bool ByteDocValuesField::live$ = false;

        jclass ByteDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/ByteDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a032b77d] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;B)V");
            mids$[mid_setByteValue_b2271687] = env->getMethodID(cls, "setByteValue", "(B)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteDocValuesField::ByteDocValuesField(const ::java::lang::String & a0, jbyte a1) : ::org::apache::lucene::document::NumericDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_a032b77d, a0.this$, a1)) {}

        void ByteDocValuesField::setByteValue(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setByteValue_b2271687], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_ByteDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteDocValuesField_init_(t_ByteDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteDocValuesField_setByteValue(t_ByteDocValuesField *self, PyObject *args);
        static int t_ByteDocValuesField_set__byteValue(t_ByteDocValuesField *self, PyObject *arg, void *data);
        static PyGetSetDef t_ByteDocValuesField__fields_[] = {
          DECLARE_SET_FIELD(t_ByteDocValuesField, byteValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ByteDocValuesField__methods_[] = {
          DECLARE_METHOD(t_ByteDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteDocValuesField, setByteValue, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ByteDocValuesField, t_ByteDocValuesField, ::org::apache::lucene::document::NumericDocValuesField, ByteDocValuesField, t_ByteDocValuesField_init_, 0, 0, t_ByteDocValuesField__fields_, 0, 0);

        void t_ByteDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteDocValuesField), module, "ByteDocValuesField", 0);
        }

        void t_ByteDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ByteDocValuesField).tp_dict, "class_", make_descriptor(ByteDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ByteDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_ByteDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ByteDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteDocValuesField::initializeClass, 1)))
            return NULL;
          return t_ByteDocValuesField::wrap_Object(ByteDocValuesField(((t_ByteDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_ByteDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteDocValuesField_init_(t_ByteDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jbyte a1;
          ByteDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sB", &a0, &a1))
          {
            INT_CALL(object = ByteDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteDocValuesField_setByteValue(t_ByteDocValuesField *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.setByteValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ByteDocValuesField), (PyObject *) self, "setByteValue", args, 2);
        }

        static int t_ByteDocValuesField_set__byteValue(t_ByteDocValuesField *self, PyObject *arg, void *data)
        {
          {
            jbyte value;
            if (!parseArg(arg, "B", &value))
            {
              INT_CALL(self->object.setByteValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "byteValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldFragList::class$ = NULL;
          jmethodID *FieldFragList::mids$ = NULL;
          bool FieldFragList::live$ = false;

          jclass FieldFragList::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldFragList");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_add_21fbeb2b] = env->getMethodID(cls, "add", "(IILjava/util/List;)V");
              mids$[mid_getFragInfos_87851566] = env->getMethodID(cls, "getFragInfos", "()Ljava/util/List;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldFragList::FieldFragList(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          void FieldFragList::add(jint a0, jint a1, const ::java::util::List & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_add_21fbeb2b], a0, a1, a2.this$);
          }

          ::java::util::List FieldFragList::getFragInfos() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getFragInfos_87851566]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldFragList_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldFragList_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldFragList_init_(t_FieldFragList *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldFragList_add(t_FieldFragList *self, PyObject *args);
          static PyObject *t_FieldFragList_getFragInfos(t_FieldFragList *self);
          static PyObject *t_FieldFragList_get__fragInfos(t_FieldFragList *self, void *data);
          static PyGetSetDef t_FieldFragList__fields_[] = {
            DECLARE_GET_FIELD(t_FieldFragList, fragInfos),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldFragList__methods_[] = {
            DECLARE_METHOD(t_FieldFragList, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldFragList, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldFragList, add, METH_VARARGS),
            DECLARE_METHOD(t_FieldFragList, getFragInfos, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldFragList, t_FieldFragList, ::java::lang::Object, FieldFragList, t_FieldFragList_init_, 0, 0, t_FieldFragList__fields_, 0, 0);

          void t_FieldFragList::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldFragList), module, "FieldFragList", 0);
            PyDict_SetItemString(PY_TYPE(FieldFragList).tp_dict, "WeightedFragInfo", make_descriptor(&PY_TYPE(FieldFragList$WeightedFragInfo)));
          }

          void t_FieldFragList::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldFragList).tp_dict, "class_", make_descriptor(FieldFragList::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldFragList).tp_dict, "wrapfn_", make_descriptor(t_FieldFragList::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldFragList).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldFragList_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldFragList::initializeClass, 1)))
              return NULL;
            return t_FieldFragList::wrap_Object(FieldFragList(((t_FieldFragList *) arg)->object.this$));
          }
          static PyObject *t_FieldFragList_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldFragList::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldFragList_init_(t_FieldFragList *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            FieldFragList object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = FieldFragList(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldFragList_add(t_FieldFragList *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::java::util::List a2((jobject) NULL);
            PyTypeObject **p2;

            if (!parseArgs(args, "IIK", ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(self->object.add(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_FieldFragList_getFragInfos(t_FieldFragList *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getFragInfos());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldFragList$WeightedFragInfo));
          }

          static PyObject *t_FieldFragList_get__fragInfos(t_FieldFragList *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getFragInfos());
            return ::java::util::t_List::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MaxFloatFunction.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MaxFloatFunction::class$ = NULL;
            jmethodID *MaxFloatFunction::mids$ = NULL;
            bool MaxFloatFunction::live$ = false;

            jclass MaxFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MaxFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ee9922ca] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_d2e34bb9] = env->getMethodID(cls, "func", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MaxFloatFunction::MaxFloatFunction(const JArray< ::org::apache::lucene::queries::function::ValueSource > & a0) : ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction(env->newObject(initializeClass, &mids$, mid_init$_ee9922ca, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MaxFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MaxFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MaxFloatFunction_init_(t_MaxFloatFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_MaxFloatFunction__methods_[] = {
              DECLARE_METHOD(t_MaxFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MaxFloatFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MaxFloatFunction, t_MaxFloatFunction, ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction, MaxFloatFunction, t_MaxFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_MaxFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(MaxFloatFunction), module, "MaxFloatFunction", 0);
            }

            void t_MaxFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MaxFloatFunction).tp_dict, "class_", make_descriptor(MaxFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MaxFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_MaxFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MaxFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MaxFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MaxFloatFunction::initializeClass, 1)))
                return NULL;
              return t_MaxFloatFunction::wrap_Object(MaxFloatFunction(((t_MaxFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_MaxFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MaxFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MaxFloatFunction_init_(t_MaxFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              JArray< ::org::apache::lucene::queries::function::ValueSource > a0((jobject) NULL);
              MaxFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = MaxFloatFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerImpl.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *UAX29URLEmailTokenizerImpl::class$ = NULL;
          jmethodID *UAX29URLEmailTokenizerImpl::mids$ = NULL;
          bool UAX29URLEmailTokenizerImpl::live$ = false;
          jint UAX29URLEmailTokenizerImpl::AVOID_BAD_URL = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::EMAIL_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::HANGUL_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::HIRAGANA_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::IDEOGRAPHIC_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::KATAKANA_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::NUMERIC_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::URL_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::WORD_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::YYEOF = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::YYINITIAL = (jint) 0;

          jclass UAX29URLEmailTokenizerImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
              mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
              mids$[mid_setBufferSize_39c7bd3c] = env->getMethodID(cls, "setBufferSize", "(I)V");
              mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
              mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
              mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
              mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
              mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
              mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
              mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
              mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
              mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              AVOID_BAD_URL = env->getStaticIntField(cls, "AVOID_BAD_URL");
              EMAIL_TYPE = env->getStaticIntField(cls, "EMAIL_TYPE");
              HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
              HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
              IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
              KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
              NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
              SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
              URL_TYPE = env->getStaticIntField(cls, "URL_TYPE");
              WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
              YYEOF = env->getStaticIntField(cls, "YYEOF");
              YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UAX29URLEmailTokenizerImpl::UAX29URLEmailTokenizerImpl(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          jint UAX29URLEmailTokenizerImpl::getNextToken() const
          {
            return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
          }

          void UAX29URLEmailTokenizerImpl::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
          }

          void UAX29URLEmailTokenizerImpl::setBufferSize(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setBufferSize_39c7bd3c], a0);
          }

          void UAX29URLEmailTokenizerImpl::yybegin(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
          }

          jint UAX29URLEmailTokenizerImpl::yychar() const
          {
            return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
          }

          jchar UAX29URLEmailTokenizerImpl::yycharat(jint a0) const
          {
            return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
          }

          void UAX29URLEmailTokenizerImpl::yyclose() const
          {
            env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
          }

          jint UAX29URLEmailTokenizerImpl::yylength() const
          {
            return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
          }

          void UAX29URLEmailTokenizerImpl::yypushback(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
          }

          void UAX29URLEmailTokenizerImpl::yyreset(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
          }

          jint UAX29URLEmailTokenizerImpl::yystate() const
          {
            return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
          }

          ::java::lang::String UAX29URLEmailTokenizerImpl::yytext() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_UAX29URLEmailTokenizerImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UAX29URLEmailTokenizerImpl_init_(t_UAX29URLEmailTokenizerImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UAX29URLEmailTokenizerImpl_getNextToken(t_UAX29URLEmailTokenizerImpl *self);
          static PyObject *t_UAX29URLEmailTokenizerImpl_getText(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerImpl_setBufferSize(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yybegin(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yychar(t_UAX29URLEmailTokenizerImpl *self);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yycharat(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yyclose(t_UAX29URLEmailTokenizerImpl *self);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yylength(t_UAX29URLEmailTokenizerImpl *self);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yypushback(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yyreset(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yystate(t_UAX29URLEmailTokenizerImpl *self);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yytext(t_UAX29URLEmailTokenizerImpl *self);
          static int t_UAX29URLEmailTokenizerImpl_set__bufferSize(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg, void *data);
          static PyObject *t_UAX29URLEmailTokenizerImpl_get__nextToken(t_UAX29URLEmailTokenizerImpl *self, void *data);
          static PyGetSetDef t_UAX29URLEmailTokenizerImpl__fields_[] = {
            DECLARE_SET_FIELD(t_UAX29URLEmailTokenizerImpl, bufferSize),
            DECLARE_GET_FIELD(t_UAX29URLEmailTokenizerImpl, nextToken),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_UAX29URLEmailTokenizerImpl__methods_[] = {
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, getNextToken, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, getText, METH_O),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, setBufferSize, METH_O),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yybegin, METH_O),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yychar, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yycharat, METH_O),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yyclose, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yylength, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yypushback, METH_O),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yyreset, METH_O),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yystate, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yytext, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(UAX29URLEmailTokenizerImpl, t_UAX29URLEmailTokenizerImpl, ::java::lang::Object, UAX29URLEmailTokenizerImpl, t_UAX29URLEmailTokenizerImpl_init_, 0, 0, t_UAX29URLEmailTokenizerImpl__fields_, 0, 0);

          void t_UAX29URLEmailTokenizerImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(UAX29URLEmailTokenizerImpl), module, "UAX29URLEmailTokenizerImpl", 0);
          }

          void t_UAX29URLEmailTokenizerImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "class_", make_descriptor(UAX29URLEmailTokenizerImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "wrapfn_", make_descriptor(t_UAX29URLEmailTokenizerImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(UAX29URLEmailTokenizerImpl::initializeClass);
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "AVOID_BAD_URL", make_descriptor(UAX29URLEmailTokenizerImpl::AVOID_BAD_URL));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "EMAIL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::EMAIL_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "HANGUL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::HANGUL_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "HIRAGANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::HIRAGANA_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::IDEOGRAPHIC_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "KATAKANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::KATAKANA_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "NUMERIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::NUMERIC_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::SOUTH_EAST_ASIAN_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "URL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::URL_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "WORD_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::WORD_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "YYEOF", make_descriptor(UAX29URLEmailTokenizerImpl::YYEOF));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "YYINITIAL", make_descriptor(UAX29URLEmailTokenizerImpl::YYINITIAL));
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UAX29URLEmailTokenizerImpl::initializeClass, 1)))
              return NULL;
            return t_UAX29URLEmailTokenizerImpl::wrap_Object(UAX29URLEmailTokenizerImpl(((t_UAX29URLEmailTokenizerImpl *) arg)->object.this$));
          }
          static PyObject *t_UAX29URLEmailTokenizerImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UAX29URLEmailTokenizerImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UAX29URLEmailTokenizerImpl_init_(t_UAX29URLEmailTokenizerImpl *self, PyObject *args, PyObject *kwds)
          {
            ::java::io::Reader a0((jobject) NULL);
            UAX29URLEmailTokenizerImpl object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              INT_CALL(object = UAX29URLEmailTokenizerImpl(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_getNextToken(t_UAX29URLEmailTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNextToken());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_getText(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
            {
              OBJ_CALL(self->object.getText(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "getText", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_setBufferSize(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setBufferSize(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setBufferSize", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yybegin(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.yybegin(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yychar(t_UAX29URLEmailTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yychar());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yycharat(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg)
          {
            jint a0;
            jchar result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.yycharat(a0));
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yyclose(t_UAX29URLEmailTokenizerImpl *self)
          {
            OBJ_CALL(self->object.yyclose());
            Py_RETURN_NONE;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yylength(t_UAX29URLEmailTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yylength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yypushback(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.yypushback(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yyreset(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.yyreset(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yystate(t_UAX29URLEmailTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yystate());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yytext(t_UAX29URLEmailTokenizerImpl *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.yytext());
            return j2p(result);
          }

          static int t_UAX29URLEmailTokenizerImpl_set__bufferSize(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setBufferSize(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "bufferSize", arg);
            return -1;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_get__nextToken(t_UAX29URLEmailTokenizerImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNextToken());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/MultiSimilarity.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "org/apache/lucene/search/similarities/Similarity$SimWeight.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *MultiSimilarity::class$ = NULL;
          jmethodID *MultiSimilarity::mids$ = NULL;
          bool MultiSimilarity::live$ = false;

          jclass MultiSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/MultiSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_82c64346] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/similarities/Similarity;)V");
              mids$[mid_computeNorm_6ff84e0e] = env->getMethodID(cls, "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J");
              mids$[mid_computeWeight_8bb6ee0b] = env->getMethodID(cls, "computeWeight", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimWeight;");
              mids$[mid_simScorer_9a2cfed8] = env->getMethodID(cls, "simScorer", "(Lorg/apache/lucene/search/similarities/Similarity$SimWeight;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MultiSimilarity::MultiSimilarity(const JArray< ::org::apache::lucene::search::similarities::Similarity > & a0) : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_82c64346, a0.this$)) {}

          jlong MultiSimilarity::computeNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_computeNorm_6ff84e0e], a0.this$);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimWeight MultiSimilarity::computeWeight(jfloat a0, const ::org::apache::lucene::search::CollectionStatistics & a1, const JArray< ::org::apache::lucene::search::TermStatistics > & a2) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimWeight(env->callObjectMethod(this$, mids$[mid_computeWeight_8bb6ee0b], a0, a1.this$, a2.this$));
          }

          ::org::apache::lucene::search::similarities::Similarity$SimScorer MultiSimilarity::simScorer(const ::org::apache::lucene::search::similarities::Similarity$SimWeight & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->callObjectMethod(this$, mids$[mid_simScorer_9a2cfed8], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_MultiSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MultiSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MultiSimilarity_init_(t_MultiSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MultiSimilarity_computeNorm(t_MultiSimilarity *self, PyObject *args);
          static PyObject *t_MultiSimilarity_computeWeight(t_MultiSimilarity *self, PyObject *args);
          static PyObject *t_MultiSimilarity_simScorer(t_MultiSimilarity *self, PyObject *args);

          static PyMethodDef t_MultiSimilarity__methods_[] = {
            DECLARE_METHOD(t_MultiSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MultiSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MultiSimilarity, computeNorm, METH_VARARGS),
            DECLARE_METHOD(t_MultiSimilarity, computeWeight, METH_VARARGS),
            DECLARE_METHOD(t_MultiSimilarity, simScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MultiSimilarity, t_MultiSimilarity, ::org::apache::lucene::search::similarities::Similarity, MultiSimilarity, t_MultiSimilarity_init_, 0, 0, 0, 0, 0);

          void t_MultiSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(MultiSimilarity), module, "MultiSimilarity", 0);
          }

          void t_MultiSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MultiSimilarity).tp_dict, "class_", make_descriptor(MultiSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MultiSimilarity).tp_dict, "wrapfn_", make_descriptor(t_MultiSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MultiSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MultiSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MultiSimilarity::initializeClass, 1)))
              return NULL;
            return t_MultiSimilarity::wrap_Object(MultiSimilarity(((t_MultiSimilarity *) arg)->object.this$));
          }
          static PyObject *t_MultiSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MultiSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MultiSimilarity_init_(t_MultiSimilarity *self, PyObject *args, PyObject *kwds)
          {
            JArray< ::org::apache::lucene::search::similarities::Similarity > a0((jobject) NULL);
            MultiSimilarity object((jobject) NULL);

            if (!parseArgs(args, "[k", ::org::apache::lucene::search::similarities::Similarity::initializeClass, &a0))
            {
              INT_CALL(object = MultiSimilarity(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MultiSimilarity_computeNorm(t_MultiSimilarity *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeNorm(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(MultiSimilarity), (PyObject *) self, "computeNorm", args, 2);
          }

          static PyObject *t_MultiSimilarity_computeWeight(t_MultiSimilarity *self, PyObject *args)
          {
            jfloat a0;
            ::org::apache::lucene::search::CollectionStatistics a1((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a2((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimWeight result((jobject) NULL);

            if (!parseArgs(args, "Fk[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.computeWeight(a0, a1, a2));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimWeight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MultiSimilarity), (PyObject *) self, "computeWeight", args, 2);
          }

          static PyObject *t_MultiSimilarity_simScorer(t_MultiSimilarity *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::Similarity$SimWeight a0((jobject) NULL);
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimScorer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::similarities::Similarity$SimWeight::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.simScorer(a0, a1));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MultiSimilarity), (PyObject *) self, "simScorer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/PatternConsumer.h"
#include "java/util/ArrayList.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *PatternConsumer::class$ = NULL;
            jmethodID *PatternConsumer::mids$ = NULL;
            bool PatternConsumer::live$ = false;

            jclass PatternConsumer::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/PatternConsumer");

                mids$ = new jmethodID[max_mid];
                mids$[mid_addClass_5fdc3f48] = env->getMethodID(cls, "addClass", "(Ljava/lang/String;)V");
                mids$[mid_addException_069f7243] = env->getMethodID(cls, "addException", "(Ljava/lang/String;Ljava/util/ArrayList;)V");
                mids$[mid_addPattern_4a264742] = env->getMethodID(cls, "addPattern", "(Ljava/lang/String;Ljava/lang/String;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void PatternConsumer::addClass(const ::java::lang::String & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addClass_5fdc3f48], a0.this$);
            }

            void PatternConsumer::addException(const ::java::lang::String & a0, const ::java::util::ArrayList & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addException_069f7243], a0.this$, a1.this$);
            }

            void PatternConsumer::addPattern(const ::java::lang::String & a0, const ::java::lang::String & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addPattern_4a264742], a0.this$, a1.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_PatternConsumer_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_PatternConsumer_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_PatternConsumer_addClass(t_PatternConsumer *self, PyObject *arg);
            static PyObject *t_PatternConsumer_addException(t_PatternConsumer *self, PyObject *args);
            static PyObject *t_PatternConsumer_addPattern(t_PatternConsumer *self, PyObject *args);

            static PyMethodDef t_PatternConsumer__methods_[] = {
              DECLARE_METHOD(t_PatternConsumer, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PatternConsumer, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PatternConsumer, addClass, METH_O),
              DECLARE_METHOD(t_PatternConsumer, addException, METH_VARARGS),
              DECLARE_METHOD(t_PatternConsumer, addPattern, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(PatternConsumer, t_PatternConsumer, ::java::lang::Object, PatternConsumer, abstract_init, 0, 0, 0, 0, 0);

            void t_PatternConsumer::install(PyObject *module)
            {
              installType(&PY_TYPE(PatternConsumer), module, "PatternConsumer", 0);
            }

            void t_PatternConsumer::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(PatternConsumer).tp_dict, "class_", make_descriptor(PatternConsumer::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(PatternConsumer).tp_dict, "wrapfn_", make_descriptor(t_PatternConsumer::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(PatternConsumer).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_PatternConsumer_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, PatternConsumer::initializeClass, 1)))
                return NULL;
              return t_PatternConsumer::wrap_Object(PatternConsumer(((t_PatternConsumer *) arg)->object.this$));
            }
            static PyObject *t_PatternConsumer_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, PatternConsumer::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_PatternConsumer_addClass(t_PatternConsumer *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(self->object.addClass(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addClass", arg);
              return NULL;
            }

            static PyObject *t_PatternConsumer_addException(t_PatternConsumer *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::ArrayList a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "sK", ::java::util::ArrayList::initializeClass, &a0, &a1, &p1, ::java::util::t_ArrayList::parameters_))
              {
                OBJ_CALL(self->object.addException(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addException", args);
              return NULL;
            }

            static PyObject *t_PatternConsumer_addPattern(t_PatternConsumer *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(self->object.addPattern(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addPattern", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$NumericComparator.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/lang/Number.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$NumericComparator::class$ = NULL;
        jmethodID *FieldComparator$NumericComparator::mids$ = NULL;
        bool FieldComparator$NumericComparator::live$ = false;

        jclass FieldComparator$NumericComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$NumericComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_158d1296] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Number;)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparator$NumericComparator::FieldComparator$NumericComparator(const ::java::lang::String & a0, const ::java::lang::Number & a1) : ::org::apache::lucene::search::FieldComparator(env->newObject(initializeClass, &mids$, mid_init$_158d1296, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::FieldComparator FieldComparator$NumericComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$NumericComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$NumericComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$NumericComparator_of_(t_FieldComparator$NumericComparator *self, PyObject *args);
        static int t_FieldComparator$NumericComparator_init_(t_FieldComparator$NumericComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparator$NumericComparator_setNextReader(t_FieldComparator$NumericComparator *self, PyObject *args);
        static int t_FieldComparator$NumericComparator_set__nextReader(t_FieldComparator$NumericComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$NumericComparator_get__parameters_(t_FieldComparator$NumericComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$NumericComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$NumericComparator, nextReader),
          DECLARE_GET_FIELD(t_FieldComparator$NumericComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$NumericComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$NumericComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$NumericComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$NumericComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$NumericComparator, setNextReader, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$NumericComparator, t_FieldComparator$NumericComparator, ::org::apache::lucene::search::FieldComparator, FieldComparator$NumericComparator, t_FieldComparator$NumericComparator_init_, 0, 0, t_FieldComparator$NumericComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$NumericComparator::wrap_Object(const FieldComparator$NumericComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$NumericComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$NumericComparator *self = (t_FieldComparator$NumericComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$NumericComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$NumericComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$NumericComparator *self = (t_FieldComparator$NumericComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$NumericComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$NumericComparator), module, "FieldComparator$NumericComparator", 0);
        }

        void t_FieldComparator$NumericComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$NumericComparator).tp_dict, "class_", make_descriptor(FieldComparator$NumericComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$NumericComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$NumericComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$NumericComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$NumericComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$NumericComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$NumericComparator::wrap_Object(FieldComparator$NumericComparator(((t_FieldComparator$NumericComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$NumericComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$NumericComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$NumericComparator_of_(t_FieldComparator$NumericComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldComparator$NumericComparator_init_(t_FieldComparator$NumericComparator *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Number a1((jobject) NULL);
          FieldComparator$NumericComparator object((jobject) NULL);

          if (!parseArgs(args, "sO", &::java::lang::PY_TYPE(Number), &a0, &a1))
          {
            INT_CALL(object = FieldComparator$NumericComparator(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldComparator$NumericComparator_setNextReader(t_FieldComparator$NumericComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, self->parameters[0]);
          }

          return callSuper(&PY_TYPE(FieldComparator$NumericComparator), (PyObject *) self, "setNextReader", args, 2);
        }
        static PyObject *t_FieldComparator$NumericComparator_get__parameters_(t_FieldComparator$NumericComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$NumericComparator_set__nextReader(t_FieldComparator$NumericComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/UpperCaseFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/core/UpperCaseFilter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *UpperCaseFilterFactory::class$ = NULL;
          jmethodID *UpperCaseFilterFactory::mids$ = NULL;
          bool UpperCaseFilterFactory::live$ = false;

          jclass UpperCaseFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/UpperCaseFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_da6c60eb] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/core/UpperCaseFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UpperCaseFilterFactory::UpperCaseFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::core::UpperCaseFilter UpperCaseFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::core::UpperCaseFilter(env->callObjectMethod(this$, mids$[mid_create_da6c60eb], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory UpperCaseFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_UpperCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UpperCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UpperCaseFilterFactory_init_(t_UpperCaseFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UpperCaseFilterFactory_create(t_UpperCaseFilterFactory *self, PyObject *args);
          static PyObject *t_UpperCaseFilterFactory_getMultiTermComponent(t_UpperCaseFilterFactory *self);
          static PyObject *t_UpperCaseFilterFactory_get__multiTermComponent(t_UpperCaseFilterFactory *self, void *data);
          static PyGetSetDef t_UpperCaseFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_UpperCaseFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_UpperCaseFilterFactory__methods_[] = {
            DECLARE_METHOD(t_UpperCaseFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UpperCaseFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UpperCaseFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_UpperCaseFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(UpperCaseFilterFactory, t_UpperCaseFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, UpperCaseFilterFactory, t_UpperCaseFilterFactory_init_, 0, 0, t_UpperCaseFilterFactory__fields_, 0, 0);

          void t_UpperCaseFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(UpperCaseFilterFactory), module, "UpperCaseFilterFactory", 0);
          }

          void t_UpperCaseFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(UpperCaseFilterFactory).tp_dict, "class_", make_descriptor(UpperCaseFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(UpperCaseFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_UpperCaseFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(UpperCaseFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_UpperCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UpperCaseFilterFactory::initializeClass, 1)))
              return NULL;
            return t_UpperCaseFilterFactory::wrap_Object(UpperCaseFilterFactory(((t_UpperCaseFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_UpperCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UpperCaseFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UpperCaseFilterFactory_init_(t_UpperCaseFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            UpperCaseFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = UpperCaseFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UpperCaseFilterFactory_create(t_UpperCaseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::core::UpperCaseFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::core::t_UpperCaseFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(UpperCaseFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_UpperCaseFilterFactory_getMultiTermComponent(t_UpperCaseFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_UpperCaseFilterFactory_get__multiTermComponent(t_UpperCaseFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40SkipListReader.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40SkipListReader::class$ = NULL;
          jmethodID *Lucene40SkipListReader::mids$ = NULL;
          bool Lucene40SkipListReader::live$ = false;

          jclass Lucene40SkipListReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40SkipListReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_949015ba] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/IndexInput;II)V");
              mids$[mid_getFreqPointer_54c6a17a] = env->getMethodID(cls, "getFreqPointer", "()J");
              mids$[mid_getOffsetLength_54c6a179] = env->getMethodID(cls, "getOffsetLength", "()I");
              mids$[mid_getPayloadLength_54c6a179] = env->getMethodID(cls, "getPayloadLength", "()I");
              mids$[mid_getProxPointer_54c6a17a] = env->getMethodID(cls, "getProxPointer", "()J");
              mids$[mid_init_05c5678f] = env->getMethodID(cls, "init", "(JJJIZZ)V");
              mids$[mid_seekChild_39c7bd3c] = env->getMethodID(cls, "seekChild", "(I)V");
              mids$[mid_setLastSkipData_39c7bd3c] = env->getMethodID(cls, "setLastSkipData", "(I)V");
              mids$[mid_readSkipData_5203bb2b] = env->getMethodID(cls, "readSkipData", "(ILorg/apache/lucene/store/IndexInput;)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40SkipListReader::Lucene40SkipListReader(const ::org::apache::lucene::store::IndexInput & a0, jint a1, jint a2) : ::org::apache::lucene::codecs::MultiLevelSkipListReader(env->newObject(initializeClass, &mids$, mid_init$_949015ba, a0.this$, a1, a2)) {}

          jlong Lucene40SkipListReader::getFreqPointer() const
          {
            return env->callLongMethod(this$, mids$[mid_getFreqPointer_54c6a17a]);
          }

          jint Lucene40SkipListReader::getOffsetLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getOffsetLength_54c6a179]);
          }

          jint Lucene40SkipListReader::getPayloadLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getPayloadLength_54c6a179]);
          }

          jlong Lucene40SkipListReader::getProxPointer() const
          {
            return env->callLongMethod(this$, mids$[mid_getProxPointer_54c6a17a]);
          }

          void Lucene40SkipListReader::init(jlong a0, jlong a1, jlong a2, jint a3, jboolean a4, jboolean a5) const
          {
            env->callVoidMethod(this$, mids$[mid_init_05c5678f], a0, a1, a2, a3, a4, a5);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40SkipListReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40SkipListReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40SkipListReader_init_(t_Lucene40SkipListReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40SkipListReader_getFreqPointer(t_Lucene40SkipListReader *self);
          static PyObject *t_Lucene40SkipListReader_getOffsetLength(t_Lucene40SkipListReader *self);
          static PyObject *t_Lucene40SkipListReader_getPayloadLength(t_Lucene40SkipListReader *self);
          static PyObject *t_Lucene40SkipListReader_getProxPointer(t_Lucene40SkipListReader *self);
          static PyObject *t_Lucene40SkipListReader_init(t_Lucene40SkipListReader *self, PyObject *args);
          static PyObject *t_Lucene40SkipListReader_get__freqPointer(t_Lucene40SkipListReader *self, void *data);
          static PyObject *t_Lucene40SkipListReader_get__offsetLength(t_Lucene40SkipListReader *self, void *data);
          static PyObject *t_Lucene40SkipListReader_get__payloadLength(t_Lucene40SkipListReader *self, void *data);
          static PyObject *t_Lucene40SkipListReader_get__proxPointer(t_Lucene40SkipListReader *self, void *data);
          static PyGetSetDef t_Lucene40SkipListReader__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene40SkipListReader, freqPointer),
            DECLARE_GET_FIELD(t_Lucene40SkipListReader, offsetLength),
            DECLARE_GET_FIELD(t_Lucene40SkipListReader, payloadLength),
            DECLARE_GET_FIELD(t_Lucene40SkipListReader, proxPointer),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene40SkipListReader__methods_[] = {
            DECLARE_METHOD(t_Lucene40SkipListReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40SkipListReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40SkipListReader, getFreqPointer, METH_NOARGS),
            DECLARE_METHOD(t_Lucene40SkipListReader, getOffsetLength, METH_NOARGS),
            DECLARE_METHOD(t_Lucene40SkipListReader, getPayloadLength, METH_NOARGS),
            DECLARE_METHOD(t_Lucene40SkipListReader, getProxPointer, METH_NOARGS),
            DECLARE_METHOD(t_Lucene40SkipListReader, init, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40SkipListReader, t_Lucene40SkipListReader, ::org::apache::lucene::codecs::MultiLevelSkipListReader, Lucene40SkipListReader, t_Lucene40SkipListReader_init_, 0, 0, t_Lucene40SkipListReader__fields_, 0, 0);

          void t_Lucene40SkipListReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40SkipListReader), module, "Lucene40SkipListReader", 0);
          }

          void t_Lucene40SkipListReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40SkipListReader).tp_dict, "class_", make_descriptor(Lucene40SkipListReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40SkipListReader).tp_dict, "wrapfn_", make_descriptor(t_Lucene40SkipListReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40SkipListReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40SkipListReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40SkipListReader::initializeClass, 1)))
              return NULL;
            return t_Lucene40SkipListReader::wrap_Object(Lucene40SkipListReader(((t_Lucene40SkipListReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene40SkipListReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40SkipListReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40SkipListReader_init_(t_Lucene40SkipListReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
            jint a1;
            jint a2;
            Lucene40SkipListReader object((jobject) NULL);

            if (!parseArgs(args, "kII", ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = Lucene40SkipListReader(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene40SkipListReader_getFreqPointer(t_Lucene40SkipListReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getFreqPointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Lucene40SkipListReader_getOffsetLength(t_Lucene40SkipListReader *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getOffsetLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Lucene40SkipListReader_getPayloadLength(t_Lucene40SkipListReader *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPayloadLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Lucene40SkipListReader_getProxPointer(t_Lucene40SkipListReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getProxPointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Lucene40SkipListReader_init(t_Lucene40SkipListReader *self, PyObject *args)
          {
            jlong a0;
            jlong a1;
            jlong a2;
            jint a3;
            jboolean a4;
            jboolean a5;

            if (!parseArgs(args, "JJJIZZ", &a0, &a1, &a2, &a3, &a4, &a5))
            {
              OBJ_CALL(self->object.init(a0, a1, a2, a3, a4, a5));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40SkipListReader), (PyObject *) self, "init", args, 2);
          }

          static PyObject *t_Lucene40SkipListReader_get__freqPointer(t_Lucene40SkipListReader *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getFreqPointer());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_Lucene40SkipListReader_get__offsetLength(t_Lucene40SkipListReader *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getOffsetLength());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_Lucene40SkipListReader_get__payloadLength(t_Lucene40SkipListReader *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPayloadLength());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_Lucene40SkipListReader_get__proxPointer(t_Lucene40SkipListReader *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getProxPointer());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/KStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *KStemFilter::class$ = NULL;
          jmethodID *KStemFilter::mids$ = NULL;
          bool KStemFilter::live$ = false;

          jclass KStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/KStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KStemFilter::KStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean KStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_KStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KStemFilter_init_(t_KStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KStemFilter_incrementToken(t_KStemFilter *self, PyObject *args);

          static PyMethodDef t_KStemFilter__methods_[] = {
            DECLARE_METHOD(t_KStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KStemFilter, t_KStemFilter, ::org::apache::lucene::analysis::TokenFilter, KStemFilter, t_KStemFilter_init_, 0, 0, 0, 0, 0);

          void t_KStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(KStemFilter), module, "KStemFilter", 0);
          }

          void t_KStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KStemFilter).tp_dict, "class_", make_descriptor(KStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KStemFilter).tp_dict, "wrapfn_", make_descriptor(t_KStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KStemFilter::initializeClass, 1)))
              return NULL;
            return t_KStemFilter::wrap_Object(KStemFilter(((t_KStemFilter *) arg)->object.this$));
          }
          static PyObject *t_KStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KStemFilter_init_(t_KStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            KStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = KStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KStemFilter_incrementToken(t_KStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(KStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SearcherManager.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/SearcherFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SearcherManager::class$ = NULL;
        jmethodID *SearcherManager::mids$ = NULL;
        bool SearcherManager::live$ = false;

        jclass SearcherManager::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SearcherManager");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_8abe804e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/search/SearcherFactory;)V");
            mids$[mid_init$_1c94e792] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexWriter;ZLorg/apache/lucene/search/SearcherFactory;)V");
            mids$[mid_getSearcher_00082010] = env->getStaticMethodID(cls, "getSearcher", "(Lorg/apache/lucene/search/SearcherFactory;Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/IndexSearcher;");
            mids$[mid_isSearcherCurrent_54c6a16a] = env->getMethodID(cls, "isSearcherCurrent", "()Z");
            mids$[mid_decRef_474fe51c] = env->getMethodID(cls, "decRef", "(Lorg/apache/lucene/search/IndexSearcher;)V");
            mids$[mid_getRefCount_474fe503] = env->getMethodID(cls, "getRefCount", "(Lorg/apache/lucene/search/IndexSearcher;)I");
            mids$[mid_tryIncRef_474fe510] = env->getMethodID(cls, "tryIncRef", "(Lorg/apache/lucene/search/IndexSearcher;)Z");
            mids$[mid_refreshIfNeeded_8f3bcadb] = env->getMethodID(cls, "refreshIfNeeded", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/IndexSearcher;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SearcherManager::SearcherManager(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::search::SearcherFactory & a1) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_8abe804e, a0.this$, a1.this$)) {}

        SearcherManager::SearcherManager(const ::org::apache::lucene::index::IndexWriter & a0, jboolean a1, const ::org::apache::lucene::search::SearcherFactory & a2) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_1c94e792, a0.this$, a1, a2.this$)) {}

        ::org::apache::lucene::search::IndexSearcher SearcherManager::getSearcher(const ::org::apache::lucene::search::SearcherFactory & a0, const ::org::apache::lucene::index::IndexReader & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::IndexSearcher(env->callStaticObjectMethod(cls, mids$[mid_getSearcher_00082010], a0.this$, a1.this$));
        }

        jboolean SearcherManager::isSearcherCurrent() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isSearcherCurrent_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SearcherManager_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherManager_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherManager_of_(t_SearcherManager *self, PyObject *args);
        static int t_SearcherManager_init_(t_SearcherManager *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SearcherManager_getSearcher(PyTypeObject *type, PyObject *args);
        static PyObject *t_SearcherManager_isSearcherCurrent(t_SearcherManager *self);
        static PyObject *t_SearcherManager_get__searcherCurrent(t_SearcherManager *self, void *data);
        static PyObject *t_SearcherManager_get__parameters_(t_SearcherManager *self, void *data);
        static PyGetSetDef t_SearcherManager__fields_[] = {
          DECLARE_GET_FIELD(t_SearcherManager, searcherCurrent),
          DECLARE_GET_FIELD(t_SearcherManager, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SearcherManager__methods_[] = {
          DECLARE_METHOD(t_SearcherManager, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherManager, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherManager, of_, METH_VARARGS),
          DECLARE_METHOD(t_SearcherManager, getSearcher, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SearcherManager, isSearcherCurrent, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SearcherManager, t_SearcherManager, ::org::apache::lucene::search::ReferenceManager, SearcherManager, t_SearcherManager_init_, 0, 0, t_SearcherManager__fields_, 0, 0);
        PyObject *t_SearcherManager::wrap_Object(const SearcherManager& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SearcherManager::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SearcherManager *self = (t_SearcherManager *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SearcherManager::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SearcherManager::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SearcherManager *self = (t_SearcherManager *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SearcherManager::install(PyObject *module)
        {
          installType(&PY_TYPE(SearcherManager), module, "SearcherManager", 0);
        }

        void t_SearcherManager::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SearcherManager).tp_dict, "class_", make_descriptor(SearcherManager::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SearcherManager).tp_dict, "wrapfn_", make_descriptor(t_SearcherManager::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SearcherManager).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SearcherManager_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SearcherManager::initializeClass, 1)))
            return NULL;
          return t_SearcherManager::wrap_Object(SearcherManager(((t_SearcherManager *) arg)->object.this$));
        }
        static PyObject *t_SearcherManager_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SearcherManager::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SearcherManager_of_(t_SearcherManager *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_SearcherManager_init_(t_SearcherManager *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::search::SearcherFactory a1((jobject) NULL);
              SearcherManager object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::search::SearcherFactory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = SearcherManager(a0, a1));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::search::PY_TYPE(IndexSearcher);
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
              jboolean a1;
              ::org::apache::lucene::search::SearcherFactory a2((jobject) NULL);
              SearcherManager object((jobject) NULL);

              if (!parseArgs(args, "kZk", ::org::apache::lucene::index::IndexWriter::initializeClass, ::org::apache::lucene::search::SearcherFactory::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = SearcherManager(a0, a1, a2));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::search::PY_TYPE(IndexSearcher);
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SearcherManager_getSearcher(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::search::SearcherFactory a0((jobject) NULL);
          ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
          ::org::apache::lucene::search::IndexSearcher result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::search::SearcherFactory::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::SearcherManager::getSearcher(a0, a1));
            return ::org::apache::lucene::search::t_IndexSearcher::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSearcher", args);
          return NULL;
        }

        static PyObject *t_SearcherManager_isSearcherCurrent(t_SearcherManager *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isSearcherCurrent());
          Py_RETURN_BOOL(result);
        }
        static PyObject *t_SearcherManager_get__parameters_(t_SearcherManager *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_SearcherManager_get__searcherCurrent(t_SearcherManager *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isSearcherCurrent());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModelIn.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModelIn::class$ = NULL;
          jmethodID *BasicModelIn::mids$ = NULL;
          bool BasicModelIn::live$ = false;

          jclass BasicModelIn::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModelIn");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_05d4946a] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;F)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModelIn::BasicModelIn() : ::org::apache::lucene::search::similarities::BasicModel(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation BasicModelIn::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_05d4946a], a0.this$, a1));
          }

          jfloat BasicModelIn::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String BasicModelIn::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModelIn_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModelIn_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModelIn_init_(t_BasicModelIn *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModelIn_explain(t_BasicModelIn *self, PyObject *args);
          static PyObject *t_BasicModelIn_score(t_BasicModelIn *self, PyObject *args);
          static PyObject *t_BasicModelIn_toString(t_BasicModelIn *self, PyObject *args);

          static PyMethodDef t_BasicModelIn__methods_[] = {
            DECLARE_METHOD(t_BasicModelIn, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelIn, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelIn, explain, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelIn, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelIn, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicModelIn, t_BasicModelIn, ::org::apache::lucene::search::similarities::BasicModel, BasicModelIn, t_BasicModelIn_init_, 0, 0, 0, 0, 0);

          void t_BasicModelIn::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModelIn), module, "BasicModelIn", 0);
          }

          void t_BasicModelIn::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicModelIn).tp_dict, "class_", make_descriptor(BasicModelIn::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicModelIn).tp_dict, "wrapfn_", make_descriptor(t_BasicModelIn::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicModelIn).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModelIn_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModelIn::initializeClass, 1)))
              return NULL;
            return t_BasicModelIn::wrap_Object(BasicModelIn(((t_BasicModelIn *) arg)->object.this$));
          }
          static PyObject *t_BasicModelIn_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModelIn::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModelIn_init_(t_BasicModelIn *self, PyObject *args, PyObject *kwds)
          {
            BasicModelIn object((jobject) NULL);

            INT_CALL(object = BasicModelIn());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModelIn_explain(t_BasicModelIn *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BasicModelIn), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_BasicModelIn_score(t_BasicModelIn *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(BasicModelIn), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_BasicModelIn_toString(t_BasicModelIn *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BasicModelIn), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hu/HungarianLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {

          ::java::lang::Class *HungarianLightStemmer::class$ = NULL;
          jmethodID *HungarianLightStemmer::mids$ = NULL;
          bool HungarianLightStemmer::live$ = false;

          jclass HungarianLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hu/HungarianLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HungarianLightStemmer::HungarianLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint HungarianLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {
          static PyObject *t_HungarianLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HungarianLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HungarianLightStemmer_init_(t_HungarianLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HungarianLightStemmer_stem(t_HungarianLightStemmer *self, PyObject *args);

          static PyMethodDef t_HungarianLightStemmer__methods_[] = {
            DECLARE_METHOD(t_HungarianLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HungarianLightStemmer, t_HungarianLightStemmer, ::java::lang::Object, HungarianLightStemmer, t_HungarianLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_HungarianLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(HungarianLightStemmer), module, "HungarianLightStemmer", 0);
          }

          void t_HungarianLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HungarianLightStemmer).tp_dict, "class_", make_descriptor(HungarianLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HungarianLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_HungarianLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HungarianLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HungarianLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HungarianLightStemmer::initializeClass, 1)))
              return NULL;
            return t_HungarianLightStemmer::wrap_Object(HungarianLightStemmer(((t_HungarianLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_HungarianLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HungarianLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HungarianLightStemmer_init_(t_HungarianLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            HungarianLightStemmer object((jobject) NULL);

            INT_CALL(object = HungarianLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_HungarianLightStemmer_stem(t_HungarianLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/IrishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *IrishStemmer::class$ = NULL;
        jmethodID *IrishStemmer::mids$ = NULL;
        bool IrishStemmer::live$ = false;

        jclass IrishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/IrishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IrishStemmer::IrishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean IrishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint IrishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean IrishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_IrishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IrishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IrishStemmer_init_(t_IrishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IrishStemmer_equals(t_IrishStemmer *self, PyObject *args);
        static PyObject *t_IrishStemmer_hashCode(t_IrishStemmer *self, PyObject *args);
        static PyObject *t_IrishStemmer_stem(t_IrishStemmer *self, PyObject *args);

        static PyMethodDef t_IrishStemmer__methods_[] = {
          DECLARE_METHOD(t_IrishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IrishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IrishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_IrishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_IrishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IrishStemmer, t_IrishStemmer, ::org::tartarus::snowball::SnowballProgram, IrishStemmer, t_IrishStemmer_init_, 0, 0, 0, 0, 0);

        void t_IrishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(IrishStemmer), module, "IrishStemmer", 0);
        }

        void t_IrishStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IrishStemmer).tp_dict, "class_", make_descriptor(IrishStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IrishStemmer).tp_dict, "wrapfn_", make_descriptor(t_IrishStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IrishStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IrishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IrishStemmer::initializeClass, 1)))
            return NULL;
          return t_IrishStemmer::wrap_Object(IrishStemmer(((t_IrishStemmer *) arg)->object.this$));
        }
        static PyObject *t_IrishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IrishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IrishStemmer_init_(t_IrishStemmer *self, PyObject *args, PyObject *kwds)
        {
          IrishStemmer object((jobject) NULL);

          INT_CALL(object = IrishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_IrishStemmer_equals(t_IrishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(IrishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_IrishStemmer_hashCode(t_IrishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IrishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_IrishStemmer_stem(t_IrishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(IrishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/UTF32ToUTF8.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *UTF32ToUTF8::class$ = NULL;
          jmethodID *UTF32ToUTF8::mids$ = NULL;
          bool UTF32ToUTF8::live$ = false;

          jclass UTF32ToUTF8::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/UTF32ToUTF8");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_convert_7aca8e1f] = env->getMethodID(cls, "convert", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UTF32ToUTF8::UTF32ToUTF8() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::automaton::Automaton UTF32ToUTF8::convert(const ::org::apache::lucene::util::automaton::Automaton & a0) const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_convert_7aca8e1f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_UTF32ToUTF8_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UTF32ToUTF8_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UTF32ToUTF8_init_(t_UTF32ToUTF8 *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UTF32ToUTF8_convert(t_UTF32ToUTF8 *self, PyObject *arg);

          static PyMethodDef t_UTF32ToUTF8__methods_[] = {
            DECLARE_METHOD(t_UTF32ToUTF8, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UTF32ToUTF8, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UTF32ToUTF8, convert, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(UTF32ToUTF8, t_UTF32ToUTF8, ::java::lang::Object, UTF32ToUTF8, t_UTF32ToUTF8_init_, 0, 0, 0, 0, 0);

          void t_UTF32ToUTF8::install(PyObject *module)
          {
            installType(&PY_TYPE(UTF32ToUTF8), module, "UTF32ToUTF8", 0);
          }

          void t_UTF32ToUTF8::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(UTF32ToUTF8).tp_dict, "class_", make_descriptor(UTF32ToUTF8::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(UTF32ToUTF8).tp_dict, "wrapfn_", make_descriptor(t_UTF32ToUTF8::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(UTF32ToUTF8).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_UTF32ToUTF8_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UTF32ToUTF8::initializeClass, 1)))
              return NULL;
            return t_UTF32ToUTF8::wrap_Object(UTF32ToUTF8(((t_UTF32ToUTF8 *) arg)->object.this$));
          }
          static PyObject *t_UTF32ToUTF8_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UTF32ToUTF8::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UTF32ToUTF8_init_(t_UTF32ToUTF8 *self, PyObject *args, PyObject *kwds)
          {
            UTF32ToUTF8 object((jobject) NULL);

            INT_CALL(object = UTF32ToUTF8());
            self->object = object;

            return 0;
          }

          static PyObject *t_UTF32ToUTF8_convert(t_UTF32ToUTF8 *self, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.convert(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "convert", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$FloatComparator.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Float.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/FieldCache$Parser.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$FloatComparator::class$ = NULL;
        jmethodID *FieldComparator$FloatComparator::mids$ = NULL;
        bool FieldComparator$FloatComparator::live$ = false;

        jclass FieldComparator$FloatComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$FloatComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d3177756] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;Lorg/apache/lucene/search/FieldCache$Parser;Ljava/lang/Float;)V");
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_6b30eb6a] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Float;)V");
            mids$[mid_value_c4acb5a1] = env->getMethodID(cls, "value", "(I)Ljava/lang/Float;");
            mids$[mid_getFloatValues_e61237ca] = env->getMethodID(cls, "getFloatValues", "(Lorg/apache/lucene/index/AtomicReaderContext;Ljava/lang/String;)Lorg/apache/lucene/search/FieldCache$Floats;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparator$FloatComparator::FieldComparator$FloatComparator(jint a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$Parser & a2, const ::java::lang::Float & a3) : ::org::apache::lucene::search::FieldComparator$NumericComparator(env->newObject(initializeClass, &mids$, mid_init$_d3177756, a0, a1.this$, a2.this$, a3.this$)) {}

        jint FieldComparator$FloatComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$FloatComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$FloatComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        void FieldComparator$FloatComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$FloatComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$FloatComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$FloatComparator::setTopValue(const ::java::lang::Float & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_6b30eb6a], a0.this$);
        }

        ::java::lang::Float FieldComparator$FloatComparator::value(jint a0) const
        {
          return ::java::lang::Float(env->callObjectMethod(this$, mids$[mid_value_c4acb5a1], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$FloatComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$FloatComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$FloatComparator_of_(t_FieldComparator$FloatComparator *self, PyObject *args);
        static int t_FieldComparator$FloatComparator_init_(t_FieldComparator$FloatComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparator$FloatComparator_compare(t_FieldComparator$FloatComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$FloatComparator_compareBottom(t_FieldComparator$FloatComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$FloatComparator_compareTop(t_FieldComparator$FloatComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$FloatComparator_copy(t_FieldComparator$FloatComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$FloatComparator_setBottom(t_FieldComparator$FloatComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$FloatComparator_setNextReader(t_FieldComparator$FloatComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$FloatComparator_setTopValue(t_FieldComparator$FloatComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$FloatComparator_value(t_FieldComparator$FloatComparator *self, PyObject *args);
        static int t_FieldComparator$FloatComparator_set__bottom(t_FieldComparator$FloatComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$FloatComparator_set__nextReader(t_FieldComparator$FloatComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$FloatComparator_set__topValue(t_FieldComparator$FloatComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$FloatComparator_get__parameters_(t_FieldComparator$FloatComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$FloatComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$FloatComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$FloatComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$FloatComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$FloatComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$FloatComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$FloatComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$FloatComparator, t_FieldComparator$FloatComparator, ::org::apache::lucene::search::FieldComparator$NumericComparator, FieldComparator$FloatComparator, t_FieldComparator$FloatComparator_init_, 0, 0, t_FieldComparator$FloatComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$FloatComparator::wrap_Object(const FieldComparator$FloatComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$FloatComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$FloatComparator *self = (t_FieldComparator$FloatComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$FloatComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$FloatComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$FloatComparator *self = (t_FieldComparator$FloatComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$FloatComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$FloatComparator), module, "FieldComparator$FloatComparator", 0);
        }

        void t_FieldComparator$FloatComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$FloatComparator).tp_dict, "class_", make_descriptor(FieldComparator$FloatComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$FloatComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$FloatComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$FloatComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$FloatComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$FloatComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$FloatComparator::wrap_Object(FieldComparator$FloatComparator(((t_FieldComparator$FloatComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$FloatComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$FloatComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$FloatComparator_of_(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldComparator$FloatComparator_init_(t_FieldComparator$FloatComparator *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::search::FieldCache$Parser a2((jobject) NULL);
          ::java::lang::Float a3((jobject) NULL);
          FieldComparator$FloatComparator object((jobject) NULL);

          if (!parseArgs(args, "IskO", ::org::apache::lucene::search::FieldCache$Parser::initializeClass, &::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = FieldComparator$FloatComparator(a0, a1, a2, a3));
            self->object = object;
            self->parameters[0] = &::java::lang::PY_TYPE(Float);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldComparator$FloatComparator_compare(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$FloatComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$FloatComparator_compareBottom(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$FloatComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$FloatComparator_compareTop(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$FloatComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$FloatComparator_copy(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$FloatComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$FloatComparator_setBottom(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$FloatComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$FloatComparator_setNextReader(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Float));
          }

          return callSuper(&PY_TYPE(FieldComparator$FloatComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$FloatComparator_setTopValue(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          ::java::lang::Float a0((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Float), &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$FloatComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$FloatComparator_value(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          jint a0;
          ::java::lang::Float result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::java::lang::t_Float::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$FloatComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$FloatComparator_get__parameters_(t_FieldComparator$FloatComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$FloatComparator_set__bottom(t_FieldComparator$FloatComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$FloatComparator_set__nextReader(t_FieldComparator$FloatComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$FloatComparator_set__topValue(t_FieldComparator$FloatComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Float value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Float), &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fa/PersianNormalizer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {

          ::java::lang::Class *PersianNormalizer::class$ = NULL;
          jmethodID *PersianNormalizer::mids$ = NULL;
          bool PersianNormalizer::live$ = false;
          jchar PersianNormalizer::FARSI_YEH = (jchar) 0;
          jchar PersianNormalizer::HAMZA_ABOVE = (jchar) 0;
          jchar PersianNormalizer::HEH = (jchar) 0;
          jchar PersianNormalizer::HEH_GOAL = (jchar) 0;
          jchar PersianNormalizer::HEH_YEH = (jchar) 0;
          jchar PersianNormalizer::KAF = (jchar) 0;
          jchar PersianNormalizer::KEHEH = (jchar) 0;
          jchar PersianNormalizer::YEH = (jchar) 0;
          jchar PersianNormalizer::YEH_BARREE = (jchar) 0;

          jclass PersianNormalizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fa/PersianNormalizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normalize_ec6430eb] = env->getMethodID(cls, "normalize", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              FARSI_YEH = env->getStaticCharField(cls, "FARSI_YEH");
              HAMZA_ABOVE = env->getStaticCharField(cls, "HAMZA_ABOVE");
              HEH = env->getStaticCharField(cls, "HEH");
              HEH_GOAL = env->getStaticCharField(cls, "HEH_GOAL");
              HEH_YEH = env->getStaticCharField(cls, "HEH_YEH");
              KAF = env->getStaticCharField(cls, "KAF");
              KEHEH = env->getStaticCharField(cls, "KEHEH");
              YEH = env->getStaticCharField(cls, "YEH");
              YEH_BARREE = env->getStaticCharField(cls, "YEH_BARREE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PersianNormalizer::PersianNormalizer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint PersianNormalizer::normalize(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_normalize_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {
          static PyObject *t_PersianNormalizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PersianNormalizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PersianNormalizer_init_(t_PersianNormalizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PersianNormalizer_normalize(t_PersianNormalizer *self, PyObject *args);

          static PyMethodDef t_PersianNormalizer__methods_[] = {
            DECLARE_METHOD(t_PersianNormalizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianNormalizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianNormalizer, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PersianNormalizer, t_PersianNormalizer, ::java::lang::Object, PersianNormalizer, t_PersianNormalizer_init_, 0, 0, 0, 0, 0);

          void t_PersianNormalizer::install(PyObject *module)
          {
            installType(&PY_TYPE(PersianNormalizer), module, "PersianNormalizer", 0);
          }

          void t_PersianNormalizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "class_", make_descriptor(PersianNormalizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "wrapfn_", make_descriptor(t_PersianNormalizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PersianNormalizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "FARSI_YEH", make_descriptor(PersianNormalizer::FARSI_YEH));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "HAMZA_ABOVE", make_descriptor(PersianNormalizer::HAMZA_ABOVE));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "HEH", make_descriptor(PersianNormalizer::HEH));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "HEH_GOAL", make_descriptor(PersianNormalizer::HEH_GOAL));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "HEH_YEH", make_descriptor(PersianNormalizer::HEH_YEH));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "KAF", make_descriptor(PersianNormalizer::KAF));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "KEHEH", make_descriptor(PersianNormalizer::KEHEH));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "YEH", make_descriptor(PersianNormalizer::YEH));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "YEH_BARREE", make_descriptor(PersianNormalizer::YEH_BARREE));
          }

          static PyObject *t_PersianNormalizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PersianNormalizer::initializeClass, 1)))
              return NULL;
            return t_PersianNormalizer::wrap_Object(PersianNormalizer(((t_PersianNormalizer *) arg)->object.this$));
          }
          static PyObject *t_PersianNormalizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PersianNormalizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PersianNormalizer_init_(t_PersianNormalizer *self, PyObject *args, PyObject *kwds)
          {
            PersianNormalizer object((jobject) NULL);

            INT_CALL(object = PersianNormalizer());
            self->object = object;

            return 0;
          }

          static PyObject *t_PersianNormalizer_normalize(t_PersianNormalizer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.normalize(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "normalize", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/TypeTokenFilter.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *TypeTokenFilter::class$ = NULL;
          jmethodID *TypeTokenFilter::mids$ = NULL;
          bool TypeTokenFilter::live$ = false;

          jclass TypeTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/TypeTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_012ae4f0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/util/Set;)V");
              mids$[mid_init$_ecce6e0b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Ljava/util/Set;)V");
              mids$[mid_init$_93acd659] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/util/Set;Z)V");
              mids$[mid_init$_eb1a7514] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Ljava/util/Set;Z)V");
              mids$[mid_init$_bac183a2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;ZLorg/apache/lucene/analysis/TokenStream;Ljava/util/Set;)V");
              mids$[mid_init$_436958cb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;ZLorg/apache/lucene/analysis/TokenStream;Ljava/util/Set;Z)V");
              mids$[mid_accept_54c6a16a] = env->getMethodID(cls, "accept", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TypeTokenFilter::TypeTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::util::Set & a1) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_012ae4f0, a0.this$, a1.this$)) {}

          TypeTokenFilter::TypeTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::java::util::Set & a2) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_ecce6e0b, a0.this$, a1.this$, a2.this$)) {}

          TypeTokenFilter::TypeTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::util::Set & a1, jboolean a2) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_93acd659, a0.this$, a1.this$, a2)) {}

          TypeTokenFilter::TypeTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::java::util::Set & a2, jboolean a3) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_eb1a7514, a0.this$, a1.this$, a2.this$, a3)) {}

          TypeTokenFilter::TypeTokenFilter(const ::org::apache::lucene::util::Version & a0, jboolean a1, const ::org::apache::lucene::analysis::TokenStream & a2, const ::java::util::Set & a3) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_bac183a2, a0.this$, a1, a2.this$, a3.this$)) {}

          TypeTokenFilter::TypeTokenFilter(const ::org::apache::lucene::util::Version & a0, jboolean a1, const ::org::apache::lucene::analysis::TokenStream & a2, const ::java::util::Set & a3, jboolean a4) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_436958cb, a0.this$, a1, a2.this$, a3.this$, a4)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_TypeTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TypeTokenFilter_init_(t_TypeTokenFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_TypeTokenFilter__methods_[] = {
            DECLARE_METHOD(t_TypeTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeTokenFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TypeTokenFilter, t_TypeTokenFilter, ::org::apache::lucene::analysis::util::FilteringTokenFilter, TypeTokenFilter, t_TypeTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_TypeTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TypeTokenFilter), module, "TypeTokenFilter", 0);
          }

          void t_TypeTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TypeTokenFilter).tp_dict, "class_", make_descriptor(TypeTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TypeTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_TypeTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TypeTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TypeTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TypeTokenFilter::initializeClass, 1)))
              return NULL;
            return t_TypeTokenFilter::wrap_Object(TypeTokenFilter(((t_TypeTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_TypeTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TypeTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TypeTokenFilter_init_(t_TypeTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::util::Set a1((jobject) NULL);
                PyTypeObject **p1;
                TypeTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = TypeTokenFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::java::util::Set a2((jobject) NULL);
                PyTypeObject **p2;
                TypeTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kkK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = TypeTokenFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::util::Set a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                TypeTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kKZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2))
                {
                  INT_CALL(object = TypeTokenFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::java::util::Set a2((jobject) NULL);
                PyTypeObject **p2;
                jboolean a3;
                TypeTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kkKZ", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Set::parameters_, &a3))
                {
                  INT_CALL(object = TypeTokenFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                jboolean a1;
                ::org::apache::lucene::analysis::TokenStream a2((jobject) NULL);
                ::java::util::Set a3((jobject) NULL);
                PyTypeObject **p3;
                TypeTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kZkK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = TypeTokenFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                jboolean a1;
                ::org::apache::lucene::analysis::TokenStream a2((jobject) NULL);
                ::java::util::Set a3((jobject) NULL);
                PyTypeObject **p3;
                jboolean a4;
                TypeTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kZkKZ", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Set::parameters_, &a4))
                {
                  INT_CALL(object = TypeTokenFilter(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cn/ChineseTokenizer.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {

          ::java::lang::Class *ChineseTokenizer::class$ = NULL;
          jmethodID *ChineseTokenizer::mids$ = NULL;
          bool ChineseTokenizer::live$ = false;

          jclass ChineseTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cn/ChineseTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_5877b8f0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ChineseTokenizer::ChineseTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          ChineseTokenizer::ChineseTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_5877b8f0, a0.this$, a1.this$)) {}

          void ChineseTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean ChineseTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void ChineseTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {
          static PyObject *t_ChineseTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ChineseTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ChineseTokenizer_init_(t_ChineseTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ChineseTokenizer_end(t_ChineseTokenizer *self, PyObject *args);
          static PyObject *t_ChineseTokenizer_incrementToken(t_ChineseTokenizer *self, PyObject *args);
          static PyObject *t_ChineseTokenizer_reset(t_ChineseTokenizer *self, PyObject *args);

          static PyMethodDef t_ChineseTokenizer__methods_[] = {
            DECLARE_METHOD(t_ChineseTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_ChineseTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ChineseTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ChineseTokenizer, t_ChineseTokenizer, ::org::apache::lucene::analysis::Tokenizer, ChineseTokenizer, t_ChineseTokenizer_init_, 0, 0, 0, 0, 0);

          void t_ChineseTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(ChineseTokenizer), module, "ChineseTokenizer", 0);
          }

          void t_ChineseTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ChineseTokenizer).tp_dict, "class_", make_descriptor(ChineseTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ChineseTokenizer).tp_dict, "wrapfn_", make_descriptor(t_ChineseTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ChineseTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ChineseTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ChineseTokenizer::initializeClass, 1)))
              return NULL;
            return t_ChineseTokenizer::wrap_Object(ChineseTokenizer(((t_ChineseTokenizer *) arg)->object.this$));
          }
          static PyObject *t_ChineseTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ChineseTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ChineseTokenizer_init_(t_ChineseTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                ChineseTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = ChineseTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ChineseTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ChineseTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ChineseTokenizer_end(t_ChineseTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ChineseTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_ChineseTokenizer_incrementToken(t_ChineseTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ChineseTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ChineseTokenizer_reset(t_ChineseTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ChineseTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/TrimFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *TrimFilter::class$ = NULL;
          jmethodID *TrimFilter::mids$ = NULL;
          bool TrimFilter::live$ = false;

          jclass TrimFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/TrimFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_db34a9b2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Z)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TrimFilter::TrimFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          TrimFilter::TrimFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          TrimFilter::TrimFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jboolean a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_db34a9b2, a0.this$, a1.this$, a2)) {}

          jboolean TrimFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_TrimFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TrimFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TrimFilter_init_(t_TrimFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TrimFilter_incrementToken(t_TrimFilter *self, PyObject *args);

          static PyMethodDef t_TrimFilter__methods_[] = {
            DECLARE_METHOD(t_TrimFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TrimFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TrimFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TrimFilter, t_TrimFilter, ::org::apache::lucene::analysis::TokenFilter, TrimFilter, t_TrimFilter_init_, 0, 0, 0, 0, 0);

          void t_TrimFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TrimFilter), module, "TrimFilter", 0);
          }

          void t_TrimFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TrimFilter).tp_dict, "class_", make_descriptor(TrimFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TrimFilter).tp_dict, "wrapfn_", make_descriptor(t_TrimFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TrimFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TrimFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TrimFilter::initializeClass, 1)))
              return NULL;
            return t_TrimFilter::wrap_Object(TrimFilter(((t_TrimFilter *) arg)->object.this$));
          }
          static PyObject *t_TrimFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TrimFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TrimFilter_init_(t_TrimFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                TrimFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = TrimFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                TrimFilter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = TrimFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jboolean a2;
                TrimFilter object((jobject) NULL);

                if (!parseArgs(args, "kkZ", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = TrimFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TrimFilter_incrementToken(t_TrimFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TrimFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/SetOnce$AlreadySetException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *SetOnce$AlreadySetException::class$ = NULL;
        jmethodID *SetOnce$AlreadySetException::mids$ = NULL;
        bool SetOnce$AlreadySetException::live$ = false;

        jclass SetOnce$AlreadySetException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/SetOnce$AlreadySetException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SetOnce$AlreadySetException::SetOnce$AlreadySetException() : ::java::lang::IllegalStateException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_SetOnce$AlreadySetException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SetOnce$AlreadySetException_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SetOnce$AlreadySetException_of_(t_SetOnce$AlreadySetException *self, PyObject *args);
        static int t_SetOnce$AlreadySetException_init_(t_SetOnce$AlreadySetException *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SetOnce$AlreadySetException_get__parameters_(t_SetOnce$AlreadySetException *self, void *data);
        static PyGetSetDef t_SetOnce$AlreadySetException__fields_[] = {
          DECLARE_GET_FIELD(t_SetOnce$AlreadySetException, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SetOnce$AlreadySetException__methods_[] = {
          DECLARE_METHOD(t_SetOnce$AlreadySetException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SetOnce$AlreadySetException, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SetOnce$AlreadySetException, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SetOnce$AlreadySetException, t_SetOnce$AlreadySetException, ::java::lang::IllegalStateException, SetOnce$AlreadySetException, t_SetOnce$AlreadySetException_init_, 0, 0, t_SetOnce$AlreadySetException__fields_, 0, 0);
        PyObject *t_SetOnce$AlreadySetException::wrap_Object(const SetOnce$AlreadySetException& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SetOnce$AlreadySetException::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SetOnce$AlreadySetException *self = (t_SetOnce$AlreadySetException *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SetOnce$AlreadySetException::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SetOnce$AlreadySetException::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SetOnce$AlreadySetException *self = (t_SetOnce$AlreadySetException *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SetOnce$AlreadySetException::install(PyObject *module)
        {
          installType(&PY_TYPE(SetOnce$AlreadySetException), module, "SetOnce$AlreadySetException", 0);
        }

        void t_SetOnce$AlreadySetException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SetOnce$AlreadySetException).tp_dict, "class_", make_descriptor(SetOnce$AlreadySetException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SetOnce$AlreadySetException).tp_dict, "wrapfn_", make_descriptor(t_SetOnce$AlreadySetException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SetOnce$AlreadySetException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SetOnce$AlreadySetException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SetOnce$AlreadySetException::initializeClass, 1)))
            return NULL;
          return t_SetOnce$AlreadySetException::wrap_Object(SetOnce$AlreadySetException(((t_SetOnce$AlreadySetException *) arg)->object.this$));
        }
        static PyObject *t_SetOnce$AlreadySetException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SetOnce$AlreadySetException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SetOnce$AlreadySetException_of_(t_SetOnce$AlreadySetException *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_SetOnce$AlreadySetException_init_(t_SetOnce$AlreadySetException *self, PyObject *args, PyObject *kwds)
        {
          SetOnce$AlreadySetException object((jobject) NULL);

          INT_CALL(object = SetOnce$AlreadySetException());
          self->object = object;

          return 0;
        }
        static PyObject *t_SetOnce$AlreadySetException_get__parameters_(t_SetOnce$AlreadySetException *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/commongrams/CommonGramsFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {

          ::java::lang::Class *CommonGramsFilter::class$ = NULL;
          jmethodID *CommonGramsFilter::mids$ = NULL;
          bool CommonGramsFilter::live$ = false;
          ::java::lang::String *CommonGramsFilter::GRAM_TYPE = NULL;

          jclass CommonGramsFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/commongrams/CommonGramsFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_64fb9de3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_e67dd59e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              GRAM_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "GRAM_TYPE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CommonGramsFilter::CommonGramsFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_64fb9de3, a0.this$, a1.this$)) {}

          CommonGramsFilter::CommonGramsFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_e67dd59e, a0.this$, a1.this$, a2.this$)) {}

          jboolean CommonGramsFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void CommonGramsFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {
          static PyObject *t_CommonGramsFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CommonGramsFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CommonGramsFilter_init_(t_CommonGramsFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CommonGramsFilter_incrementToken(t_CommonGramsFilter *self, PyObject *args);
          static PyObject *t_CommonGramsFilter_reset(t_CommonGramsFilter *self, PyObject *args);

          static PyMethodDef t_CommonGramsFilter__methods_[] = {
            DECLARE_METHOD(t_CommonGramsFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_CommonGramsFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CommonGramsFilter, t_CommonGramsFilter, ::org::apache::lucene::analysis::TokenFilter, CommonGramsFilter, t_CommonGramsFilter_init_, 0, 0, 0, 0, 0);

          void t_CommonGramsFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CommonGramsFilter), module, "CommonGramsFilter", 0);
          }

          void t_CommonGramsFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CommonGramsFilter).tp_dict, "class_", make_descriptor(CommonGramsFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CommonGramsFilter).tp_dict, "wrapfn_", make_descriptor(t_CommonGramsFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CommonGramsFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CommonGramsFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(CommonGramsFilter).tp_dict, "GRAM_TYPE", make_descriptor(j2p(*CommonGramsFilter::GRAM_TYPE)));
          }

          static PyObject *t_CommonGramsFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CommonGramsFilter::initializeClass, 1)))
              return NULL;
            return t_CommonGramsFilter::wrap_Object(CommonGramsFilter(((t_CommonGramsFilter *) arg)->object.this$));
          }
          static PyObject *t_CommonGramsFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CommonGramsFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CommonGramsFilter_init_(t_CommonGramsFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                CommonGramsFilter object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = CommonGramsFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                CommonGramsFilter object((jobject) NULL);

                if (!parseArgs(args, "kkK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = CommonGramsFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CommonGramsFilter_incrementToken(t_CommonGramsFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CommonGramsFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_CommonGramsFilter_reset(t_CommonGramsFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CommonGramsFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ReaderManager.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ReaderManager::class$ = NULL;
        jmethodID *ReaderManager::mids$ = NULL;
        bool ReaderManager::live$ = false;

        jclass ReaderManager::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ReaderManager");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_2e261ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_init$_7015519a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexWriter;Z)V");
            mids$[mid_decRef_1e43081e] = env->getMethodID(cls, "decRef", "(Lorg/apache/lucene/index/DirectoryReader;)V");
            mids$[mid_getRefCount_1e430801] = env->getMethodID(cls, "getRefCount", "(Lorg/apache/lucene/index/DirectoryReader;)I");
            mids$[mid_tryIncRef_1e430812] = env->getMethodID(cls, "tryIncRef", "(Lorg/apache/lucene/index/DirectoryReader;)Z");
            mids$[mid_refreshIfNeeded_5bb3c60f] = env->getMethodID(cls, "refreshIfNeeded", "(Lorg/apache/lucene/index/DirectoryReader;)Lorg/apache/lucene/index/DirectoryReader;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ReaderManager::ReaderManager(const ::org::apache::lucene::store::Directory & a0) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_2e261ef2, a0.this$)) {}

        ReaderManager::ReaderManager(const ::org::apache::lucene::index::IndexWriter & a0, jboolean a1) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_7015519a, a0.this$, a1)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ReaderManager_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReaderManager_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReaderManager_of_(t_ReaderManager *self, PyObject *args);
        static int t_ReaderManager_init_(t_ReaderManager *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ReaderManager_get__parameters_(t_ReaderManager *self, void *data);
        static PyGetSetDef t_ReaderManager__fields_[] = {
          DECLARE_GET_FIELD(t_ReaderManager, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ReaderManager__methods_[] = {
          DECLARE_METHOD(t_ReaderManager, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderManager, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderManager, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ReaderManager, t_ReaderManager, ::org::apache::lucene::search::ReferenceManager, ReaderManager, t_ReaderManager_init_, 0, 0, t_ReaderManager__fields_, 0, 0);
        PyObject *t_ReaderManager::wrap_Object(const ReaderManager& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ReaderManager::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ReaderManager *self = (t_ReaderManager *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ReaderManager::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ReaderManager::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ReaderManager *self = (t_ReaderManager *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ReaderManager::install(PyObject *module)
        {
          installType(&PY_TYPE(ReaderManager), module, "ReaderManager", 0);
        }

        void t_ReaderManager::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ReaderManager).tp_dict, "class_", make_descriptor(ReaderManager::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ReaderManager).tp_dict, "wrapfn_", make_descriptor(t_ReaderManager::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ReaderManager).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ReaderManager_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ReaderManager::initializeClass, 1)))
            return NULL;
          return t_ReaderManager::wrap_Object(ReaderManager(((t_ReaderManager *) arg)->object.this$));
        }
        static PyObject *t_ReaderManager_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ReaderManager::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ReaderManager_of_(t_ReaderManager *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_ReaderManager_init_(t_ReaderManager *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ReaderManager object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                INT_CALL(object = ReaderManager(a0));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(DirectoryReader);
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
              jboolean a1;
              ReaderManager object((jobject) NULL);

              if (!parseArgs(args, "kZ", ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1))
              {
                INT_CALL(object = ReaderManager(a0, a1));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(DirectoryReader);
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_ReaderManager_get__parameters_(t_ReaderManager *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SimpleTerm$MatchingTermVisitor::class$ = NULL;
            jmethodID *SimpleTerm$MatchingTermVisitor::mids$ = NULL;
            bool SimpleTerm$MatchingTermVisitor::live$ = false;

            jclass SimpleTerm$MatchingTermVisitor::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor");

                mids$ = new jmethodID[max_mid];
                mids$[mid_visitMatchingTerm_7eca6a81] = env->getMethodID(cls, "visitMatchingTerm", "(Lorg/apache/lucene/index/Term;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void SimpleTerm$MatchingTermVisitor::visitMatchingTerm(const ::org::apache::lucene::index::Term & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_visitMatchingTerm_7eca6a81], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SimpleTerm$MatchingTermVisitor_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SimpleTerm$MatchingTermVisitor_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SimpleTerm$MatchingTermVisitor_visitMatchingTerm(t_SimpleTerm$MatchingTermVisitor *self, PyObject *arg);

            static PyMethodDef t_SimpleTerm$MatchingTermVisitor__methods_[] = {
              DECLARE_METHOD(t_SimpleTerm$MatchingTermVisitor, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleTerm$MatchingTermVisitor, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleTerm$MatchingTermVisitor, visitMatchingTerm, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SimpleTerm$MatchingTermVisitor, t_SimpleTerm$MatchingTermVisitor, ::java::lang::Object, SimpleTerm$MatchingTermVisitor, abstract_init, 0, 0, 0, 0, 0);

            void t_SimpleTerm$MatchingTermVisitor::install(PyObject *module)
            {
              installType(&PY_TYPE(SimpleTerm$MatchingTermVisitor), module, "SimpleTerm$MatchingTermVisitor", 0);
            }

            void t_SimpleTerm$MatchingTermVisitor::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SimpleTerm$MatchingTermVisitor).tp_dict, "class_", make_descriptor(SimpleTerm$MatchingTermVisitor::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SimpleTerm$MatchingTermVisitor).tp_dict, "wrapfn_", make_descriptor(t_SimpleTerm$MatchingTermVisitor::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SimpleTerm$MatchingTermVisitor).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SimpleTerm$MatchingTermVisitor_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SimpleTerm$MatchingTermVisitor::initializeClass, 1)))
                return NULL;
              return t_SimpleTerm$MatchingTermVisitor::wrap_Object(SimpleTerm$MatchingTermVisitor(((t_SimpleTerm$MatchingTermVisitor *) arg)->object.this$));
            }
            static PyObject *t_SimpleTerm$MatchingTermVisitor_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SimpleTerm$MatchingTermVisitor::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_SimpleTerm$MatchingTermVisitor_visitMatchingTerm(t_SimpleTerm$MatchingTermVisitor *self, PyObject *arg)
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(self->object.visitMatchingTerm(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "visitMatchingTerm", arg);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/MatchAllDocsQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *MatchAllDocsQueryNodeProcessor::class$ = NULL;
              jmethodID *MatchAllDocsQueryNodeProcessor::mids$ = NULL;
              bool MatchAllDocsQueryNodeProcessor::live$ = false;

              jclass MatchAllDocsQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/MatchAllDocsQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MatchAllDocsQueryNodeProcessor::MatchAllDocsQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_MatchAllDocsQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MatchAllDocsQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MatchAllDocsQueryNodeProcessor_init_(t_MatchAllDocsQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_MatchAllDocsQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_MatchAllDocsQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchAllDocsQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MatchAllDocsQueryNodeProcessor, t_MatchAllDocsQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, MatchAllDocsQueryNodeProcessor, t_MatchAllDocsQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_MatchAllDocsQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(MatchAllDocsQueryNodeProcessor), module, "MatchAllDocsQueryNodeProcessor", 0);
              }

              void t_MatchAllDocsQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNodeProcessor).tp_dict, "class_", make_descriptor(MatchAllDocsQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_MatchAllDocsQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MatchAllDocsQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MatchAllDocsQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_MatchAllDocsQueryNodeProcessor::wrap_Object(MatchAllDocsQueryNodeProcessor(((t_MatchAllDocsQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_MatchAllDocsQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MatchAllDocsQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MatchAllDocsQueryNodeProcessor_init_(t_MatchAllDocsQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                MatchAllDocsQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = MatchAllDocsQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$LongComparator.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/lang/Long.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/FieldCache$Parser.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$LongComparator::class$ = NULL;
        jmethodID *FieldComparator$LongComparator::mids$ = NULL;
        bool FieldComparator$LongComparator::live$ = false;

        jclass FieldComparator$LongComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$LongComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a6072141] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;Lorg/apache/lucene/search/FieldCache$Parser;Ljava/lang/Long;)V");
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_da558031] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Long;)V");
            mids$[mid_value_67140e92] = env->getMethodID(cls, "value", "(I)Ljava/lang/Long;");
            mids$[mid_getLongValues_8288bb5d] = env->getMethodID(cls, "getLongValues", "(Lorg/apache/lucene/index/AtomicReaderContext;Ljava/lang/String;)Lorg/apache/lucene/search/FieldCache$Longs;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparator$LongComparator::FieldComparator$LongComparator(jint a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$Parser & a2, const ::java::lang::Long & a3) : ::org::apache::lucene::search::FieldComparator$NumericComparator(env->newObject(initializeClass, &mids$, mid_init$_a6072141, a0, a1.this$, a2.this$, a3.this$)) {}

        jint FieldComparator$LongComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$LongComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$LongComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        void FieldComparator$LongComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$LongComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$LongComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$LongComparator::setTopValue(const ::java::lang::Long & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_da558031], a0.this$);
        }

        ::java::lang::Long FieldComparator$LongComparator::value(jint a0) const
        {
          return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_value_67140e92], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$LongComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$LongComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$LongComparator_of_(t_FieldComparator$LongComparator *self, PyObject *args);
        static int t_FieldComparator$LongComparator_init_(t_FieldComparator$LongComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparator$LongComparator_compare(t_FieldComparator$LongComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$LongComparator_compareBottom(t_FieldComparator$LongComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$LongComparator_compareTop(t_FieldComparator$LongComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$LongComparator_copy(t_FieldComparator$LongComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$LongComparator_setBottom(t_FieldComparator$LongComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$LongComparator_setNextReader(t_FieldComparator$LongComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$LongComparator_setTopValue(t_FieldComparator$LongComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$LongComparator_value(t_FieldComparator$LongComparator *self, PyObject *args);
        static int t_FieldComparator$LongComparator_set__bottom(t_FieldComparator$LongComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$LongComparator_set__nextReader(t_FieldComparator$LongComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$LongComparator_set__topValue(t_FieldComparator$LongComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$LongComparator_get__parameters_(t_FieldComparator$LongComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$LongComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$LongComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$LongComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$LongComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$LongComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$LongComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$LongComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$LongComparator, t_FieldComparator$LongComparator, ::org::apache::lucene::search::FieldComparator$NumericComparator, FieldComparator$LongComparator, t_FieldComparator$LongComparator_init_, 0, 0, t_FieldComparator$LongComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$LongComparator::wrap_Object(const FieldComparator$LongComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$LongComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$LongComparator *self = (t_FieldComparator$LongComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$LongComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$LongComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$LongComparator *self = (t_FieldComparator$LongComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$LongComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$LongComparator), module, "FieldComparator$LongComparator", 0);
        }

        void t_FieldComparator$LongComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$LongComparator).tp_dict, "class_", make_descriptor(FieldComparator$LongComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$LongComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$LongComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$LongComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$LongComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$LongComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$LongComparator::wrap_Object(FieldComparator$LongComparator(((t_FieldComparator$LongComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$LongComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$LongComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$LongComparator_of_(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldComparator$LongComparator_init_(t_FieldComparator$LongComparator *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::search::FieldCache$Parser a2((jobject) NULL);
          ::java::lang::Long a3((jobject) NULL);
          FieldComparator$LongComparator object((jobject) NULL);

          if (!parseArgs(args, "IskO", ::org::apache::lucene::search::FieldCache$Parser::initializeClass, &::java::lang::PY_TYPE(Long), &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = FieldComparator$LongComparator(a0, a1, a2, a3));
            self->object = object;
            self->parameters[0] = &::java::lang::PY_TYPE(Long);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldComparator$LongComparator_compare(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$LongComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$LongComparator_compareBottom(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$LongComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$LongComparator_compareTop(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$LongComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$LongComparator_copy(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$LongComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$LongComparator_setBottom(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$LongComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$LongComparator_setNextReader(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Long));
          }

          return callSuper(&PY_TYPE(FieldComparator$LongComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$LongComparator_setTopValue(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          ::java::lang::Long a0((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Long), &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$LongComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$LongComparator_value(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          jint a0;
          ::java::lang::Long result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::java::lang::t_Long::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$LongComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$LongComparator_get__parameters_(t_FieldComparator$LongComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$LongComparator_set__bottom(t_FieldComparator$LongComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$LongComparator_set__nextReader(t_FieldComparator$LongComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$LongComparator_set__topValue(t_FieldComparator$LongComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Long value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Long), &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *LikeThisQueryBuilder::class$ = NULL;
            jmethodID *LikeThisQueryBuilder::mids$ = NULL;
            bool LikeThisQueryBuilder::live$ = false;

            jclass LikeThisQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b896d246] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;[Ljava/lang/String;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LikeThisQueryBuilder::LikeThisQueryBuilder(const ::org::apache::lucene::analysis::Analyzer & a0, const JArray< ::java::lang::String > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b896d246, a0.this$, a1.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_LikeThisQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LikeThisQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LikeThisQueryBuilder_init_(t_LikeThisQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_LikeThisQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_LikeThisQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LikeThisQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(LikeThisQueryBuilder, t_LikeThisQueryBuilder, ::java::lang::Object, LikeThisQueryBuilder, t_LikeThisQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_LikeThisQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(LikeThisQueryBuilder), module, "LikeThisQueryBuilder", 0);
            }

            void t_LikeThisQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(LikeThisQueryBuilder).tp_dict, "class_", make_descriptor(LikeThisQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(LikeThisQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_LikeThisQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(LikeThisQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_LikeThisQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LikeThisQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_LikeThisQueryBuilder::wrap_Object(LikeThisQueryBuilder(((t_LikeThisQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_LikeThisQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LikeThisQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LikeThisQueryBuilder_init_(t_LikeThisQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
              JArray< ::java::lang::String > a1((jobject) NULL);
              LikeThisQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k[s", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
              {
                INT_CALL(object = LikeThisQueryBuilder(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergePolicy.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/index/MergePolicy$MergeSpecification.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/lang/Boolean.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergePolicy::class$ = NULL;
        jmethodID *MergePolicy::mids$ = NULL;
        bool MergePolicy::live$ = false;

        jclass MergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_findForcedDeletesMerges_581dbc49] = env->getMethodID(cls, "findForcedDeletesMerges", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findForcedMerges_4fe4a5b5] = env->getMethodID(cls, "findForcedMerges", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findMerges_cada0df0] = env->getMethodID(cls, "findMerges", "(Lorg/apache/lucene/index/MergeTrigger;Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_getMaxCFSSegmentSizeMB_54c6a174] = env->getMethodID(cls, "getMaxCFSSegmentSizeMB", "()D");
            mids$[mid_getNoCFSRatio_54c6a174] = env->getMethodID(cls, "getNoCFSRatio", "()D");
            mids$[mid_setMaxCFSSegmentSizeMB_5d1c7645] = env->getMethodID(cls, "setMaxCFSSegmentSizeMB", "(D)V");
            mids$[mid_setNoCFSRatio_5d1c7645] = env->getMethodID(cls, "setNoCFSRatio", "(D)V");
            mids$[mid_useCompoundFile_70dc8488] = env->getMethodID(cls, "useCompoundFile", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)Z");
            mids$[mid_size_5454cb07] = env->getMethodID(cls, "size", "(Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)J");
            mids$[mid_isMerged_70dc8488] = env->getMethodID(cls, "isMerged", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergePolicy::MergePolicy() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::index::MergePolicy$MergeSpecification MergePolicy::findForcedDeletesMerges(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::IndexWriter & a1) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedDeletesMerges_581dbc49], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification MergePolicy::findForcedMerges(const ::org::apache::lucene::index::SegmentInfos & a0, jint a1, const ::java::util::Map & a2, const ::org::apache::lucene::index::IndexWriter & a3) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedMerges_4fe4a5b5], a0.this$, a1, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification MergePolicy::findMerges(const ::org::apache::lucene::index::MergeTrigger & a0, const ::org::apache::lucene::index::SegmentInfos & a1, const ::org::apache::lucene::index::IndexWriter & a2) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findMerges_cada0df0], a0.this$, a1.this$, a2.this$));
        }

        jdouble MergePolicy::getMaxCFSSegmentSizeMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMaxCFSSegmentSizeMB_54c6a174]);
        }

        jdouble MergePolicy::getNoCFSRatio() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getNoCFSRatio_54c6a174]);
        }

        void MergePolicy::setMaxCFSSegmentSizeMB(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxCFSSegmentSizeMB_5d1c7645], a0);
        }

        void MergePolicy::setNoCFSRatio(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNoCFSRatio_5d1c7645], a0);
        }

        jboolean MergePolicy::useCompoundFile(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::SegmentCommitInfo & a1, const ::org::apache::lucene::index::IndexWriter & a2) const
        {
          return env->callBooleanMethod(this$, mids$[mid_useCompoundFile_70dc8488], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/MergePolicy$MergeAbortedException.h"
#include "org/apache/lucene/index/MergePolicy$MergeException.h"
#include "org/apache/lucene/index/MergePolicy$OneMerge.h"
#include "org/apache/lucene/index/MergePolicy$DocMap.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergePolicy_init_(t_MergePolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergePolicy_findForcedDeletesMerges(t_MergePolicy *self, PyObject *args);
        static PyObject *t_MergePolicy_findForcedMerges(t_MergePolicy *self, PyObject *args);
        static PyObject *t_MergePolicy_findMerges(t_MergePolicy *self, PyObject *args);
        static PyObject *t_MergePolicy_getMaxCFSSegmentSizeMB(t_MergePolicy *self);
        static PyObject *t_MergePolicy_getNoCFSRatio(t_MergePolicy *self);
        static PyObject *t_MergePolicy_setMaxCFSSegmentSizeMB(t_MergePolicy *self, PyObject *arg);
        static PyObject *t_MergePolicy_setNoCFSRatio(t_MergePolicy *self, PyObject *arg);
        static PyObject *t_MergePolicy_useCompoundFile(t_MergePolicy *self, PyObject *args);
        static PyObject *t_MergePolicy_get__maxCFSSegmentSizeMB(t_MergePolicy *self, void *data);
        static int t_MergePolicy_set__maxCFSSegmentSizeMB(t_MergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_MergePolicy_get__noCFSRatio(t_MergePolicy *self, void *data);
        static int t_MergePolicy_set__noCFSRatio(t_MergePolicy *self, PyObject *arg, void *data);
        static PyGetSetDef t_MergePolicy__fields_[] = {
          DECLARE_GETSET_FIELD(t_MergePolicy, maxCFSSegmentSizeMB),
          DECLARE_GETSET_FIELD(t_MergePolicy, noCFSRatio),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergePolicy__methods_[] = {
          DECLARE_METHOD(t_MergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy, findForcedDeletesMerges, METH_VARARGS),
          DECLARE_METHOD(t_MergePolicy, findForcedMerges, METH_VARARGS),
          DECLARE_METHOD(t_MergePolicy, findMerges, METH_VARARGS),
          DECLARE_METHOD(t_MergePolicy, getMaxCFSSegmentSizeMB, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy, getNoCFSRatio, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy, setMaxCFSSegmentSizeMB, METH_O),
          DECLARE_METHOD(t_MergePolicy, setNoCFSRatio, METH_O),
          DECLARE_METHOD(t_MergePolicy, useCompoundFile, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergePolicy, t_MergePolicy, ::java::lang::Object, MergePolicy, t_MergePolicy_init_, 0, 0, t_MergePolicy__fields_, 0, 0);

        void t_MergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(MergePolicy), module, "MergePolicy", 0);
          PyDict_SetItemString(PY_TYPE(MergePolicy).tp_dict, "MergeAbortedException", make_descriptor(&PY_TYPE(MergePolicy$MergeAbortedException)));
          PyDict_SetItemString(PY_TYPE(MergePolicy).tp_dict, "MergeException", make_descriptor(&PY_TYPE(MergePolicy$MergeException)));
          PyDict_SetItemString(PY_TYPE(MergePolicy).tp_dict, "MergeSpecification", make_descriptor(&PY_TYPE(MergePolicy$MergeSpecification)));
          PyDict_SetItemString(PY_TYPE(MergePolicy).tp_dict, "OneMerge", make_descriptor(&PY_TYPE(MergePolicy$OneMerge)));
          PyDict_SetItemString(PY_TYPE(MergePolicy).tp_dict, "DocMap", make_descriptor(&PY_TYPE(MergePolicy$DocMap)));
        }

        void t_MergePolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergePolicy).tp_dict, "class_", make_descriptor(MergePolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergePolicy).tp_dict, "wrapfn_", make_descriptor(t_MergePolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergePolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergePolicy::initializeClass, 1)))
            return NULL;
          return t_MergePolicy::wrap_Object(MergePolicy(((t_MergePolicy *) arg)->object.this$));
        }
        static PyObject *t_MergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergePolicy_init_(t_MergePolicy *self, PyObject *args, PyObject *kwds)
        {
          MergePolicy object((jobject) NULL);

          INT_CALL(object = MergePolicy());
          self->object = object;

          return 0;
        }

        static PyObject *t_MergePolicy_findForcedDeletesMerges(t_MergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.findForcedDeletesMerges(a0, a1));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "findForcedDeletesMerges", args);
          return NULL;
        }

        static PyObject *t_MergePolicy_findForcedMerges(t_MergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          jint a1;
          ::java::util::Map a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::index::IndexWriter a3((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kIKk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3))
          {
            OBJ_CALL(result = self->object.findForcedMerges(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "findForcedMerges", args);
          return NULL;
        }

        static PyObject *t_MergePolicy_findMerges(t_MergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeTrigger a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::SegmentInfos a1((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a2((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "Kkk", ::org::apache::lucene::index::MergeTrigger::initializeClass, ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a1, &a2))
          {
            OBJ_CALL(result = self->object.findMerges(a0, a1, a2));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "findMerges", args);
          return NULL;
        }

        static PyObject *t_MergePolicy_getMaxCFSSegmentSizeMB(t_MergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMaxCFSSegmentSizeMB());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_MergePolicy_getNoCFSRatio(t_MergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getNoCFSRatio());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_MergePolicy_setMaxCFSSegmentSizeMB(t_MergePolicy *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setMaxCFSSegmentSizeMB(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxCFSSegmentSizeMB", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy_setNoCFSRatio(t_MergePolicy *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setNoCFSRatio(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setNoCFSRatio", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy_useCompoundFile(t_MergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentCommitInfo a1((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a2((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "kkk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.useCompoundFile(a0, a1, a2));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "useCompoundFile", args);
          return NULL;
        }

        static PyObject *t_MergePolicy_get__maxCFSSegmentSizeMB(t_MergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMaxCFSSegmentSizeMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_MergePolicy_set__maxCFSSegmentSizeMB(t_MergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMaxCFSSegmentSizeMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxCFSSegmentSizeMB", arg);
          return -1;
        }

        static PyObject *t_MergePolicy_get__noCFSRatio(t_MergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getNoCFSRatio());
          return PyFloat_FromDouble((double) value);
        }
        static int t_MergePolicy_set__noCFSRatio(t_MergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setNoCFSRatio(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "noCFSRatio", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionLengthAttributeImpl.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionLengthAttribute.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PositionLengthAttributeImpl::class$ = NULL;
          jmethodID *PositionLengthAttributeImpl::mids$ = NULL;
          bool PositionLengthAttributeImpl::live$ = false;

          jclass PositionLengthAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PositionLengthAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getPositionLength_54c6a179] = env->getMethodID(cls, "getPositionLength", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setPositionLength_39c7bd3c] = env->getMethodID(cls, "setPositionLength", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PositionLengthAttributeImpl::PositionLengthAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void PositionLengthAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          void PositionLengthAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jboolean PositionLengthAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint PositionLengthAttributeImpl::getPositionLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionLength_54c6a179]);
          }

          jint PositionLengthAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void PositionLengthAttributeImpl::setPositionLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionLength_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PositionLengthAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionLengthAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PositionLengthAttributeImpl_init_(t_PositionLengthAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PositionLengthAttributeImpl_clear(t_PositionLengthAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionLengthAttributeImpl_copyTo(t_PositionLengthAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionLengthAttributeImpl_equals(t_PositionLengthAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionLengthAttributeImpl_getPositionLength(t_PositionLengthAttributeImpl *self);
          static PyObject *t_PositionLengthAttributeImpl_hashCode(t_PositionLengthAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionLengthAttributeImpl_setPositionLength(t_PositionLengthAttributeImpl *self, PyObject *arg);
          static PyObject *t_PositionLengthAttributeImpl_get__positionLength(t_PositionLengthAttributeImpl *self, void *data);
          static int t_PositionLengthAttributeImpl_set__positionLength(t_PositionLengthAttributeImpl *self, PyObject *arg, void *data);
          static PyGetSetDef t_PositionLengthAttributeImpl__fields_[] = {
            DECLARE_GETSET_FIELD(t_PositionLengthAttributeImpl, positionLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PositionLengthAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_PositionLengthAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, getPositionLength, METH_NOARGS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, setPositionLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PositionLengthAttributeImpl, t_PositionLengthAttributeImpl, ::org::apache::lucene::util::AttributeImpl, PositionLengthAttributeImpl, t_PositionLengthAttributeImpl_init_, 0, 0, t_PositionLengthAttributeImpl__fields_, 0, 0);

          void t_PositionLengthAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(PositionLengthAttributeImpl), module, "PositionLengthAttributeImpl", 0);
          }

          void t_PositionLengthAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PositionLengthAttributeImpl).tp_dict, "class_", make_descriptor(PositionLengthAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PositionLengthAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_PositionLengthAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PositionLengthAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositionLengthAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositionLengthAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_PositionLengthAttributeImpl::wrap_Object(PositionLengthAttributeImpl(((t_PositionLengthAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_PositionLengthAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositionLengthAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PositionLengthAttributeImpl_init_(t_PositionLengthAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            PositionLengthAttributeImpl object((jobject) NULL);

            INT_CALL(object = PositionLengthAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_PositionLengthAttributeImpl_clear(t_PositionLengthAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PositionLengthAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_PositionLengthAttributeImpl_copyTo(t_PositionLengthAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PositionLengthAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_PositionLengthAttributeImpl_equals(t_PositionLengthAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PositionLengthAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PositionLengthAttributeImpl_getPositionLength(t_PositionLengthAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPositionLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PositionLengthAttributeImpl_hashCode(t_PositionLengthAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PositionLengthAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_PositionLengthAttributeImpl_setPositionLength(t_PositionLengthAttributeImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPositionLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionLength", arg);
            return NULL;
          }

          static PyObject *t_PositionLengthAttributeImpl_get__positionLength(t_PositionLengthAttributeImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPositionLength());
            return PyInt_FromLong((long) value);
          }
          static int t_PositionLengthAttributeImpl_set__positionLength(t_PositionLengthAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPositionLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/DocFreqValueSource.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *DocFreqValueSource::class$ = NULL;
            jmethodID *DocFreqValueSource::mids$ = NULL;
            bool DocFreqValueSource::live$ = false;

            jclass DocFreqValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/DocFreqValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b45b6622] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DocFreqValueSource::DocFreqValueSource(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_b45b6622, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            void DocFreqValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String DocFreqValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean DocFreqValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues DocFreqValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint DocFreqValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String DocFreqValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_DocFreqValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DocFreqValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DocFreqValueSource_init_(t_DocFreqValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DocFreqValueSource_createWeight(t_DocFreqValueSource *self, PyObject *args);
            static PyObject *t_DocFreqValueSource_description(t_DocFreqValueSource *self, PyObject *args);
            static PyObject *t_DocFreqValueSource_equals(t_DocFreqValueSource *self, PyObject *args);
            static PyObject *t_DocFreqValueSource_getValues(t_DocFreqValueSource *self, PyObject *args);
            static PyObject *t_DocFreqValueSource_hashCode(t_DocFreqValueSource *self, PyObject *args);
            static PyObject *t_DocFreqValueSource_name(t_DocFreqValueSource *self);

            static PyMethodDef t_DocFreqValueSource__methods_[] = {
              DECLARE_METHOD(t_DocFreqValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DocFreqValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DocFreqValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_DocFreqValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_DocFreqValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_DocFreqValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_DocFreqValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_DocFreqValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DocFreqValueSource, t_DocFreqValueSource, ::org::apache::lucene::queries::function::ValueSource, DocFreqValueSource, t_DocFreqValueSource_init_, 0, 0, 0, 0, 0);

            void t_DocFreqValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(DocFreqValueSource), module, "DocFreqValueSource", 0);
            }

            void t_DocFreqValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DocFreqValueSource).tp_dict, "class_", make_descriptor(DocFreqValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DocFreqValueSource).tp_dict, "wrapfn_", make_descriptor(t_DocFreqValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DocFreqValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DocFreqValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DocFreqValueSource::initializeClass, 1)))
                return NULL;
              return t_DocFreqValueSource::wrap_Object(DocFreqValueSource(((t_DocFreqValueSource *) arg)->object.this$));
            }
            static PyObject *t_DocFreqValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DocFreqValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DocFreqValueSource_init_(t_DocFreqValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              DocFreqValueSource object((jobject) NULL);

              if (!parseArgs(args, "sssk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = DocFreqValueSource(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DocFreqValueSource_createWeight(t_DocFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(DocFreqValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_DocFreqValueSource_description(t_DocFreqValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DocFreqValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_DocFreqValueSource_equals(t_DocFreqValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DocFreqValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_DocFreqValueSource_getValues(t_DocFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DocFreqValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_DocFreqValueSource_hashCode(t_DocFreqValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DocFreqValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_DocFreqValueSource_name(t_DocFreqValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/CorePlusExtensionsParser.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/queryparser/classic/QueryParser.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *CorePlusExtensionsParser::class$ = NULL;
          jmethodID *CorePlusExtensionsParser::mids$ = NULL;
          bool CorePlusExtensionsParser::live$ = false;

          jclass CorePlusExtensionsParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/CorePlusExtensionsParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_64322899] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/queryparser/classic/QueryParser;)V");
              mids$[mid_init$_d77cc89a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CorePlusExtensionsParser::CorePlusExtensionsParser(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::queryparser::classic::QueryParser & a1) : ::org::apache::lucene::queryparser::xml::CoreParser(env->newObject(initializeClass, &mids$, mid_init$_64322899, a0.this$, a1.this$)) {}

          CorePlusExtensionsParser::CorePlusExtensionsParser(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::queryparser::xml::CoreParser(env->newObject(initializeClass, &mids$, mid_init$_d77cc89a, a0.this$, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_CorePlusExtensionsParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CorePlusExtensionsParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CorePlusExtensionsParser_init_(t_CorePlusExtensionsParser *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_CorePlusExtensionsParser__methods_[] = {
            DECLARE_METHOD(t_CorePlusExtensionsParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CorePlusExtensionsParser, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CorePlusExtensionsParser, t_CorePlusExtensionsParser, ::org::apache::lucene::queryparser::xml::CoreParser, CorePlusExtensionsParser, t_CorePlusExtensionsParser_init_, 0, 0, 0, 0, 0);

          void t_CorePlusExtensionsParser::install(PyObject *module)
          {
            installType(&PY_TYPE(CorePlusExtensionsParser), module, "CorePlusExtensionsParser", 0);
          }

          void t_CorePlusExtensionsParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CorePlusExtensionsParser).tp_dict, "class_", make_descriptor(CorePlusExtensionsParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CorePlusExtensionsParser).tp_dict, "wrapfn_", make_descriptor(t_CorePlusExtensionsParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CorePlusExtensionsParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CorePlusExtensionsParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CorePlusExtensionsParser::initializeClass, 1)))
              return NULL;
            return t_CorePlusExtensionsParser::wrap_Object(CorePlusExtensionsParser(((t_CorePlusExtensionsParser *) arg)->object.this$));
          }
          static PyObject *t_CorePlusExtensionsParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CorePlusExtensionsParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CorePlusExtensionsParser_init_(t_CorePlusExtensionsParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::org::apache::lucene::queryparser::classic::QueryParser a1((jobject) NULL);
                CorePlusExtensionsParser object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::queryparser::classic::QueryParser::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CorePlusExtensionsParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                CorePlusExtensionsParser object((jobject) NULL);

                if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CorePlusExtensionsParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/DistributionLL.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *DistributionLL::class$ = NULL;
          jmethodID *DistributionLL::mids$ = NULL;
          bool DistributionLL::live$ = false;

          jclass DistributionLL::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/DistributionLL");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_63482206] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DistributionLL::DistributionLL() : ::org::apache::lucene::search::similarities::Distribution(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat DistributionLL::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String DistributionLL::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_DistributionLL_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DistributionLL_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DistributionLL_init_(t_DistributionLL *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DistributionLL_score(t_DistributionLL *self, PyObject *args);
          static PyObject *t_DistributionLL_toString(t_DistributionLL *self, PyObject *args);

          static PyMethodDef t_DistributionLL__methods_[] = {
            DECLARE_METHOD(t_DistributionLL, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DistributionLL, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DistributionLL, score, METH_VARARGS),
            DECLARE_METHOD(t_DistributionLL, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DistributionLL, t_DistributionLL, ::org::apache::lucene::search::similarities::Distribution, DistributionLL, t_DistributionLL_init_, 0, 0, 0, 0, 0);

          void t_DistributionLL::install(PyObject *module)
          {
            installType(&PY_TYPE(DistributionLL), module, "DistributionLL", 0);
          }

          void t_DistributionLL::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DistributionLL).tp_dict, "class_", make_descriptor(DistributionLL::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DistributionLL).tp_dict, "wrapfn_", make_descriptor(t_DistributionLL::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DistributionLL).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DistributionLL_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DistributionLL::initializeClass, 1)))
              return NULL;
            return t_DistributionLL::wrap_Object(DistributionLL(((t_DistributionLL *) arg)->object.this$));
          }
          static PyObject *t_DistributionLL_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DistributionLL::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DistributionLL_init_(t_DistributionLL *self, PyObject *args, PyObject *kwds)
          {
            DistributionLL object((jobject) NULL);

            INT_CALL(object = DistributionLL());
            self->object = object;

            return 0;
          }

          static PyObject *t_DistributionLL_score(t_DistributionLL *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.score(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DistributionLL), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_DistributionLL_toString(t_DistributionLL *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(DistributionLL), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tr/ApostropheFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {

          ::java::lang::Class *ApostropheFilter::class$ = NULL;
          jmethodID *ApostropheFilter::mids$ = NULL;
          bool ApostropheFilter::live$ = false;

          jclass ApostropheFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tr/ApostropheFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ApostropheFilter::ApostropheFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean ApostropheFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {
          static PyObject *t_ApostropheFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ApostropheFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ApostropheFilter_init_(t_ApostropheFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ApostropheFilter_incrementToken(t_ApostropheFilter *self, PyObject *args);

          static PyMethodDef t_ApostropheFilter__methods_[] = {
            DECLARE_METHOD(t_ApostropheFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ApostropheFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ApostropheFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ApostropheFilter, t_ApostropheFilter, ::org::apache::lucene::analysis::TokenFilter, ApostropheFilter, t_ApostropheFilter_init_, 0, 0, 0, 0, 0);

          void t_ApostropheFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ApostropheFilter), module, "ApostropheFilter", 0);
          }

          void t_ApostropheFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ApostropheFilter).tp_dict, "class_", make_descriptor(ApostropheFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ApostropheFilter).tp_dict, "wrapfn_", make_descriptor(t_ApostropheFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ApostropheFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ApostropheFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ApostropheFilter::initializeClass, 1)))
              return NULL;
            return t_ApostropheFilter::wrap_Object(ApostropheFilter(((t_ApostropheFilter *) arg)->object.this$));
          }
          static PyObject *t_ApostropheFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ApostropheFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ApostropheFilter_init_(t_ApostropheFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ApostropheFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ApostropheFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ApostropheFilter_incrementToken(t_ApostropheFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ApostropheFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/FuzzyQueryNodeBuilder.h"
#include "org/apache/lucene/search/FuzzyQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *FuzzyQueryNodeBuilder::class$ = NULL;
              jmethodID *FuzzyQueryNodeBuilder::mids$ = NULL;
              bool FuzzyQueryNodeBuilder::live$ = false;

              jclass FuzzyQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/FuzzyQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_0622d624] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/FuzzyQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FuzzyQueryNodeBuilder::FuzzyQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::FuzzyQuery FuzzyQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::FuzzyQuery(env->callObjectMethod(this$, mids$[mid_build_0622d624], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_FuzzyQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FuzzyQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FuzzyQueryNodeBuilder_init_(t_FuzzyQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FuzzyQueryNodeBuilder_build(t_FuzzyQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_FuzzyQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_FuzzyQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FuzzyQueryNodeBuilder, t_FuzzyQueryNodeBuilder, ::java::lang::Object, FuzzyQueryNodeBuilder, t_FuzzyQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_FuzzyQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(FuzzyQueryNodeBuilder), module, "FuzzyQueryNodeBuilder", 0);
              }

              void t_FuzzyQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNodeBuilder).tp_dict, "class_", make_descriptor(FuzzyQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_FuzzyQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FuzzyQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FuzzyQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_FuzzyQueryNodeBuilder::wrap_Object(FuzzyQueryNodeBuilder(((t_FuzzyQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_FuzzyQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FuzzyQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FuzzyQueryNodeBuilder_init_(t_FuzzyQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                FuzzyQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = FuzzyQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_FuzzyQueryNodeBuilder_build(t_FuzzyQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::FuzzyQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_FuzzyQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IOUtils.h"
#include "java/io/Reader.h"
#include "java/io/Closeable.h"
#include "java/lang/Iterable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/File.h"
#include "java/lang/Throwable.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IOUtils::class$ = NULL;
        jmethodID *IOUtils::mids$ = NULL;
        bool IOUtils::live$ = false;
        ::java::lang::String *IOUtils::UTF_8 = NULL;

        jclass IOUtils::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IOUtils");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_d1cac205] = env->getStaticMethodID(cls, "close", "(Ljava/lang/Iterable;)V");
            mids$[mid_close_ddf1c8f2] = env->getStaticMethodID(cls, "close", "([Ljava/io/Closeable;)V");
            mids$[mid_closeWhileHandlingException_d1cac205] = env->getStaticMethodID(cls, "closeWhileHandlingException", "(Ljava/lang/Iterable;)V");
            mids$[mid_closeWhileHandlingException_ddf1c8f2] = env->getStaticMethodID(cls, "closeWhileHandlingException", "([Ljava/io/Closeable;)V");
            mids$[mid_copy_ffd62126] = env->getStaticMethodID(cls, "copy", "(Ljava/io/File;Ljava/io/File;)V");
            mids$[mid_deleteFilesIgnoringExceptions_d7029dd8] = env->getStaticMethodID(cls, "deleteFilesIgnoringExceptions", "(Lorg/apache/lucene/store/Directory;[Ljava/lang/String;)V");
            mids$[mid_fsync_9e00f624] = env->getStaticMethodID(cls, "fsync", "(Ljava/io/File;Z)V");
            mids$[mid_reThrow_c5ec8ca4] = env->getStaticMethodID(cls, "reThrow", "(Ljava/lang/Throwable;)V");
            mids$[mid_reThrowUnchecked_c5ec8ca4] = env->getStaticMethodID(cls, "reThrowUnchecked", "(Ljava/lang/Throwable;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            UTF_8 = new ::java::lang::String(env->getStaticObjectField(cls, "UTF_8", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void IOUtils::close(const ::java::lang::Iterable & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_close_d1cac205], a0.this$);
        }

        void IOUtils::close(const JArray< ::java::io::Closeable > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_close_ddf1c8f2], a0.this$);
        }

        void IOUtils::closeWhileHandlingException(const ::java::lang::Iterable & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_closeWhileHandlingException_d1cac205], a0.this$);
        }

        void IOUtils::closeWhileHandlingException(const JArray< ::java::io::Closeable > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_closeWhileHandlingException_ddf1c8f2], a0.this$);
        }

        void IOUtils::copy(const ::java::io::File & a0, const ::java::io::File & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_copy_ffd62126], a0.this$, a1.this$);
        }

        void IOUtils::deleteFilesIgnoringExceptions(const ::org::apache::lucene::store::Directory & a0, const JArray< ::java::lang::String > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_deleteFilesIgnoringExceptions_d7029dd8], a0.this$, a1.this$);
        }

        void IOUtils::fsync(const ::java::io::File & a0, jboolean a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_fsync_9e00f624], a0.this$, a1);
        }

        void IOUtils::reThrow(const ::java::lang::Throwable & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_reThrow_c5ec8ca4], a0.this$);
        }

        void IOUtils::reThrowUnchecked(const ::java::lang::Throwable & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_reThrowUnchecked_c5ec8ca4], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IOUtils_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOUtils_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOUtils_close(PyTypeObject *type, PyObject *args);
        static PyObject *t_IOUtils_closeWhileHandlingException(PyTypeObject *type, PyObject *args);
        static PyObject *t_IOUtils_copy(PyTypeObject *type, PyObject *args);
        static PyObject *t_IOUtils_deleteFilesIgnoringExceptions(PyTypeObject *type, PyObject *args);
        static PyObject *t_IOUtils_fsync(PyTypeObject *type, PyObject *args);
        static PyObject *t_IOUtils_reThrow(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOUtils_reThrowUnchecked(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_IOUtils__methods_[] = {
          DECLARE_METHOD(t_IOUtils, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, close, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, closeWhileHandlingException, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, copy, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, deleteFilesIgnoringExceptions, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, fsync, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, reThrow, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, reThrowUnchecked, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IOUtils, t_IOUtils, ::java::lang::Object, IOUtils, abstract_init, 0, 0, 0, 0, 0);

        void t_IOUtils::install(PyObject *module)
        {
          installType(&PY_TYPE(IOUtils), module, "IOUtils", 0);
        }

        void t_IOUtils::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IOUtils).tp_dict, "class_", make_descriptor(IOUtils::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IOUtils).tp_dict, "wrapfn_", make_descriptor(t_IOUtils::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IOUtils).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IOUtils::initializeClass);
          PyDict_SetItemString(PY_TYPE(IOUtils).tp_dict, "UTF_8", make_descriptor(j2p(*IOUtils::UTF_8)));
        }

        static PyObject *t_IOUtils_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IOUtils::initializeClass, 1)))
            return NULL;
          return t_IOUtils::wrap_Object(IOUtils(((t_IOUtils *) arg)->object.this$));
        }
        static PyObject *t_IOUtils_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IOUtils::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IOUtils_close(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::IOUtils::close(a0));
                Py_RETURN_NONE;
              }
            }
            {
              JArray< ::java::io::Closeable > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::java::io::Closeable::initializeClass, &a0))
              {
                OBJ_CALL(::org::apache::lucene::util::IOUtils::close(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "close", args);
          return NULL;
        }

        static PyObject *t_IOUtils_closeWhileHandlingException(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::IOUtils::closeWhileHandlingException(a0));
                Py_RETURN_NONE;
              }
            }
            {
              JArray< ::java::io::Closeable > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::java::io::Closeable::initializeClass, &a0))
              {
                OBJ_CALL(::org::apache::lucene::util::IOUtils::closeWhileHandlingException(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "closeWhileHandlingException", args);
          return NULL;
        }

        static PyObject *t_IOUtils_copy(PyTypeObject *type, PyObject *args)
        {
          ::java::io::File a0((jobject) NULL);
          ::java::io::File a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::java::io::File::initializeClass, ::java::io::File::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::org::apache::lucene::util::IOUtils::copy(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "copy", args);
          return NULL;
        }

        static PyObject *t_IOUtils_deleteFilesIgnoringExceptions(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);

          if (!parseArgs(args, "k[s", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::org::apache::lucene::util::IOUtils::deleteFilesIgnoringExceptions(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "deleteFilesIgnoringExceptions", args);
          return NULL;
        }

        static PyObject *t_IOUtils_fsync(PyTypeObject *type, PyObject *args)
        {
          ::java::io::File a0((jobject) NULL);
          jboolean a1;

          if (!parseArgs(args, "kZ", ::java::io::File::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::org::apache::lucene::util::IOUtils::fsync(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "fsync", args);
          return NULL;
        }

        static PyObject *t_IOUtils_reThrow(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::Throwable a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::util::IOUtils::reThrow(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "reThrow", arg);
          return NULL;
        }

        static PyObject *t_IOUtils_reThrowUnchecked(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::Throwable a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::util::IOUtils::reThrowUnchecked(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "reThrowUnchecked", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Row.h"
#include "java/lang/Class.h"
#include "java/io/DataOutput.h"
#include "java/io/IOException.h"
#include "java/lang/Character.h"
#include "java/io/PrintStream.h"
#include "java/io/DataInput.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Row::class$ = NULL;
      jmethodID *Row::mids$ = NULL;
      bool Row::live$ = false;

      jclass Row::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Row");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_init$_e051d6a6] = env->getMethodID(cls, "<init>", "(Ljava/io/DataInput;)V");
          mids$[mid_getCells_54c6a179] = env->getMethodID(cls, "getCells", "()I");
          mids$[mid_getCellsPnt_54c6a179] = env->getMethodID(cls, "getCellsPnt", "()I");
          mids$[mid_getCellsVal_54c6a179] = env->getMethodID(cls, "getCellsVal", "()I");
          mids$[mid_getCmd_35927258] = env->getMethodID(cls, "getCmd", "(Ljava/lang/Character;)I");
          mids$[mid_getCnt_35927258] = env->getMethodID(cls, "getCnt", "(Ljava/lang/Character;)I");
          mids$[mid_getRef_35927258] = env->getMethodID(cls, "getRef", "(Ljava/lang/Character;)I");
          mids$[mid_print_1b7c898b] = env->getMethodID(cls, "print", "(Ljava/io/PrintStream;)V");
          mids$[mid_setCmd_d2bbdccf] = env->getMethodID(cls, "setCmd", "(Ljava/lang/Character;I)V");
          mids$[mid_setRef_d2bbdccf] = env->getMethodID(cls, "setRef", "(Ljava/lang/Character;I)V");
          mids$[mid_store_cfb051e6] = env->getMethodID(cls, "store", "(Ljava/io/DataOutput;)V");
          mids$[mid_uniformCmd_bb0c7660] = env->getMethodID(cls, "uniformCmd", "(Z)I");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Row::Row() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      Row::Row(const ::java::io::DataInput & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e051d6a6, a0.this$)) {}

      jint Row::getCells() const
      {
        return env->callIntMethod(this$, mids$[mid_getCells_54c6a179]);
      }

      jint Row::getCellsPnt() const
      {
        return env->callIntMethod(this$, mids$[mid_getCellsPnt_54c6a179]);
      }

      jint Row::getCellsVal() const
      {
        return env->callIntMethod(this$, mids$[mid_getCellsVal_54c6a179]);
      }

      jint Row::getCmd(const ::java::lang::Character & a0) const
      {
        return env->callIntMethod(this$, mids$[mid_getCmd_35927258], a0.this$);
      }

      jint Row::getCnt(const ::java::lang::Character & a0) const
      {
        return env->callIntMethod(this$, mids$[mid_getCnt_35927258], a0.this$);
      }

      jint Row::getRef(const ::java::lang::Character & a0) const
      {
        return env->callIntMethod(this$, mids$[mid_getRef_35927258], a0.this$);
      }

      void Row::print(const ::java::io::PrintStream & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_print_1b7c898b], a0.this$);
      }

      void Row::setCmd(const ::java::lang::Character & a0, jint a1) const
      {
        env->callVoidMethod(this$, mids$[mid_setCmd_d2bbdccf], a0.this$, a1);
      }

      void Row::setRef(const ::java::lang::Character & a0, jint a1) const
      {
        env->callVoidMethod(this$, mids$[mid_setRef_d2bbdccf], a0.this$, a1);
      }

      void Row::store(const ::java::io::DataOutput & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_store_cfb051e6], a0.this$);
      }

      jint Row::uniformCmd(jboolean a0) const
      {
        return env->callIntMethod(this$, mids$[mid_uniformCmd_bb0c7660], a0);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Row_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Row_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Row_init_(t_Row *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Row_getCells(t_Row *self);
      static PyObject *t_Row_getCellsPnt(t_Row *self);
      static PyObject *t_Row_getCellsVal(t_Row *self);
      static PyObject *t_Row_getCmd(t_Row *self, PyObject *arg);
      static PyObject *t_Row_getCnt(t_Row *self, PyObject *arg);
      static PyObject *t_Row_getRef(t_Row *self, PyObject *arg);
      static PyObject *t_Row_print(t_Row *self, PyObject *arg);
      static PyObject *t_Row_setCmd(t_Row *self, PyObject *args);
      static PyObject *t_Row_setRef(t_Row *self, PyObject *args);
      static PyObject *t_Row_store(t_Row *self, PyObject *arg);
      static PyObject *t_Row_uniformCmd(t_Row *self, PyObject *arg);
      static PyObject *t_Row_get__cells(t_Row *self, void *data);
      static PyObject *t_Row_get__cellsPnt(t_Row *self, void *data);
      static PyObject *t_Row_get__cellsVal(t_Row *self, void *data);
      static PyGetSetDef t_Row__fields_[] = {
        DECLARE_GET_FIELD(t_Row, cells),
        DECLARE_GET_FIELD(t_Row, cellsPnt),
        DECLARE_GET_FIELD(t_Row, cellsVal),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_Row__methods_[] = {
        DECLARE_METHOD(t_Row, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Row, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Row, getCells, METH_NOARGS),
        DECLARE_METHOD(t_Row, getCellsPnt, METH_NOARGS),
        DECLARE_METHOD(t_Row, getCellsVal, METH_NOARGS),
        DECLARE_METHOD(t_Row, getCmd, METH_O),
        DECLARE_METHOD(t_Row, getCnt, METH_O),
        DECLARE_METHOD(t_Row, getRef, METH_O),
        DECLARE_METHOD(t_Row, print, METH_O),
        DECLARE_METHOD(t_Row, setCmd, METH_VARARGS),
        DECLARE_METHOD(t_Row, setRef, METH_VARARGS),
        DECLARE_METHOD(t_Row, store, METH_O),
        DECLARE_METHOD(t_Row, uniformCmd, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Row, t_Row, ::java::lang::Object, Row, t_Row_init_, 0, 0, t_Row__fields_, 0, 0);

      void t_Row::install(PyObject *module)
      {
        installType(&PY_TYPE(Row), module, "Row", 0);
      }

      void t_Row::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Row).tp_dict, "class_", make_descriptor(Row::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Row).tp_dict, "wrapfn_", make_descriptor(t_Row::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Row).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Row_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Row::initializeClass, 1)))
          return NULL;
        return t_Row::wrap_Object(Row(((t_Row *) arg)->object.this$));
      }
      static PyObject *t_Row_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Row::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Row_init_(t_Row *self, PyObject *args, PyObject *kwds)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            Row object((jobject) NULL);

            INT_CALL(object = Row());
            self->object = object;
            break;
          }
          goto err;
         case 1:
          {
            ::java::io::DataInput a0((jobject) NULL);
            Row object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::DataInput::initializeClass, &a0))
            {
              INT_CALL(object = Row(a0));
              self->object = object;
              break;
            }
          }
         default:
         err:
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_Row_getCells(t_Row *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCells());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_Row_getCellsPnt(t_Row *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCellsPnt());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_Row_getCellsVal(t_Row *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCellsVal());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_Row_getCmd(t_Row *self, PyObject *arg)
      {
        ::java::lang::Character a0((jobject) NULL);
        jint result;

        if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Character), &a0))
        {
          OBJ_CALL(result = self->object.getCmd(a0));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "getCmd", arg);
        return NULL;
      }

      static PyObject *t_Row_getCnt(t_Row *self, PyObject *arg)
      {
        ::java::lang::Character a0((jobject) NULL);
        jint result;

        if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Character), &a0))
        {
          OBJ_CALL(result = self->object.getCnt(a0));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "getCnt", arg);
        return NULL;
      }

      static PyObject *t_Row_getRef(t_Row *self, PyObject *arg)
      {
        ::java::lang::Character a0((jobject) NULL);
        jint result;

        if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Character), &a0))
        {
          OBJ_CALL(result = self->object.getRef(a0));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "getRef", arg);
        return NULL;
      }

      static PyObject *t_Row_print(t_Row *self, PyObject *arg)
      {
        ::java::io::PrintStream a0((jobject) NULL);

        if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
        {
          OBJ_CALL(self->object.print(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "print", arg);
        return NULL;
      }

      static PyObject *t_Row_setCmd(t_Row *self, PyObject *args)
      {
        ::java::lang::Character a0((jobject) NULL);
        jint a1;

        if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(Character), &a0, &a1))
        {
          OBJ_CALL(self->object.setCmd(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setCmd", args);
        return NULL;
      }

      static PyObject *t_Row_setRef(t_Row *self, PyObject *args)
      {
        ::java::lang::Character a0((jobject) NULL);
        jint a1;

        if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(Character), &a0, &a1))
        {
          OBJ_CALL(self->object.setRef(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setRef", args);
        return NULL;
      }

      static PyObject *t_Row_store(t_Row *self, PyObject *arg)
      {
        ::java::io::DataOutput a0((jobject) NULL);

        if (!parseArg(arg, "k", ::java::io::DataOutput::initializeClass, &a0))
        {
          OBJ_CALL(self->object.store(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "store", arg);
        return NULL;
      }

      static PyObject *t_Row_uniformCmd(t_Row *self, PyObject *arg)
      {
        jboolean a0;
        jint result;

        if (!parseArg(arg, "Z", &a0))
        {
          OBJ_CALL(result = self->object.uniformCmd(a0));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "uniformCmd", arg);
        return NULL;
      }

      static PyObject *t_Row_get__cells(t_Row *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCells());
        return PyInt_FromLong((long) value);
      }

      static PyObject *t_Row_get__cellsPnt(t_Row *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCellsPnt());
        return PyInt_FromLong((long) value);
      }

      static PyObject *t_Row_get__cellsVal(t_Row *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCellsVal());
        return PyInt_FromLong((long) value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/FieldCacheSanityChecker$InsanityType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *FieldCacheSanityChecker$InsanityType::class$ = NULL;
        jmethodID *FieldCacheSanityChecker$InsanityType::mids$ = NULL;
        bool FieldCacheSanityChecker$InsanityType::live$ = false;
        FieldCacheSanityChecker$InsanityType *FieldCacheSanityChecker$InsanityType::EXPECTED = NULL;
        FieldCacheSanityChecker$InsanityType *FieldCacheSanityChecker$InsanityType::SUBREADER = NULL;
        FieldCacheSanityChecker$InsanityType *FieldCacheSanityChecker$InsanityType::VALUEMISMATCH = NULL;

        jclass FieldCacheSanityChecker$InsanityType::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/FieldCacheSanityChecker$InsanityType");

            mids$ = new jmethodID[max_mid];
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EXPECTED = new FieldCacheSanityChecker$InsanityType(env->getStaticObjectField(cls, "EXPECTED", "Lorg/apache/lucene/util/FieldCacheSanityChecker$InsanityType;"));
            SUBREADER = new FieldCacheSanityChecker$InsanityType(env->getStaticObjectField(cls, "SUBREADER", "Lorg/apache/lucene/util/FieldCacheSanityChecker$InsanityType;"));
            VALUEMISMATCH = new FieldCacheSanityChecker$InsanityType(env->getStaticObjectField(cls, "VALUEMISMATCH", "Lorg/apache/lucene/util/FieldCacheSanityChecker$InsanityType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String FieldCacheSanityChecker$InsanityType::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_FieldCacheSanityChecker$InsanityType_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheSanityChecker$InsanityType_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheSanityChecker$InsanityType_toString(t_FieldCacheSanityChecker$InsanityType *self, PyObject *args);

        static PyMethodDef t_FieldCacheSanityChecker$InsanityType__methods_[] = {
          DECLARE_METHOD(t_FieldCacheSanityChecker$InsanityType, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheSanityChecker$InsanityType, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheSanityChecker$InsanityType, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCacheSanityChecker$InsanityType, t_FieldCacheSanityChecker$InsanityType, ::java::lang::Object, FieldCacheSanityChecker$InsanityType, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldCacheSanityChecker$InsanityType::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCacheSanityChecker$InsanityType), module, "FieldCacheSanityChecker$InsanityType", 0);
        }

        void t_FieldCacheSanityChecker$InsanityType::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$InsanityType).tp_dict, "class_", make_descriptor(FieldCacheSanityChecker$InsanityType::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$InsanityType).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheSanityChecker$InsanityType::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$InsanityType).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldCacheSanityChecker$InsanityType::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$InsanityType).tp_dict, "EXPECTED", make_descriptor(t_FieldCacheSanityChecker$InsanityType::wrap_Object(*FieldCacheSanityChecker$InsanityType::EXPECTED)));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$InsanityType).tp_dict, "SUBREADER", make_descriptor(t_FieldCacheSanityChecker$InsanityType::wrap_Object(*FieldCacheSanityChecker$InsanityType::SUBREADER)));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$InsanityType).tp_dict, "VALUEMISMATCH", make_descriptor(t_FieldCacheSanityChecker$InsanityType::wrap_Object(*FieldCacheSanityChecker$InsanityType::VALUEMISMATCH)));
        }

        static PyObject *t_FieldCacheSanityChecker$InsanityType_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCacheSanityChecker$InsanityType::initializeClass, 1)))
            return NULL;
          return t_FieldCacheSanityChecker$InsanityType::wrap_Object(FieldCacheSanityChecker$InsanityType(((t_FieldCacheSanityChecker$InsanityType *) arg)->object.this$));
        }
        static PyObject *t_FieldCacheSanityChecker$InsanityType_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCacheSanityChecker$InsanityType::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCacheSanityChecker$InsanityType_toString(t_FieldCacheSanityChecker$InsanityType *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FieldCacheSanityChecker$InsanityType), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace parser {

              ::java::lang::Class *EscapeQuerySyntax$Type::class$ = NULL;
              jmethodID *EscapeQuerySyntax$Type::mids$ = NULL;
              bool EscapeQuerySyntax$Type::live$ = false;
              EscapeQuerySyntax$Type *EscapeQuerySyntax$Type::NORMAL = NULL;
              EscapeQuerySyntax$Type *EscapeQuerySyntax$Type::STRING = NULL;

              jclass EscapeQuerySyntax$Type::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_valueOf_870295fe] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type;");
                  mids$[mid_values_4eb00ec4] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  NORMAL = new EscapeQuerySyntax$Type(env->getStaticObjectField(cls, "NORMAL", "Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type;"));
                  STRING = new EscapeQuerySyntax$Type(env->getStaticObjectField(cls, "STRING", "Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              EscapeQuerySyntax$Type EscapeQuerySyntax$Type::valueOf(const ::java::lang::String & a0)
              {
                jclass cls = env->getClass(initializeClass);
                return EscapeQuerySyntax$Type(env->callStaticObjectMethod(cls, mids$[mid_valueOf_870295fe], a0.this$));
              }

              JArray< EscapeQuerySyntax$Type > EscapeQuerySyntax$Type::values()
              {
                jclass cls = env->getClass(initializeClass);
                return JArray< EscapeQuerySyntax$Type >(env->callStaticObjectMethod(cls, mids$[mid_values_4eb00ec4]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace parser {
              static PyObject *t_EscapeQuerySyntax$Type_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_EscapeQuerySyntax$Type_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_EscapeQuerySyntax$Type_of_(t_EscapeQuerySyntax$Type *self, PyObject *args);
              static PyObject *t_EscapeQuerySyntax$Type_valueOf(PyTypeObject *type, PyObject *args);
              static PyObject *t_EscapeQuerySyntax$Type_values(PyTypeObject *type);
              static PyObject *t_EscapeQuerySyntax$Type_get__parameters_(t_EscapeQuerySyntax$Type *self, void *data);
              static PyGetSetDef t_EscapeQuerySyntax$Type__fields_[] = {
                DECLARE_GET_FIELD(t_EscapeQuerySyntax$Type, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_EscapeQuerySyntax$Type__methods_[] = {
                DECLARE_METHOD(t_EscapeQuerySyntax$Type, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntax$Type, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntax$Type, of_, METH_VARARGS),
                DECLARE_METHOD(t_EscapeQuerySyntax$Type, valueOf, METH_VARARGS | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntax$Type, values, METH_NOARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(EscapeQuerySyntax$Type, t_EscapeQuerySyntax$Type, ::java::lang::Enum, EscapeQuerySyntax$Type, abstract_init, 0, 0, t_EscapeQuerySyntax$Type__fields_, 0, 0);
              PyObject *t_EscapeQuerySyntax$Type::wrap_Object(const EscapeQuerySyntax$Type& object, PyTypeObject *p0)
              {
                PyObject *obj = t_EscapeQuerySyntax$Type::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_EscapeQuerySyntax$Type *self = (t_EscapeQuerySyntax$Type *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_EscapeQuerySyntax$Type::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_EscapeQuerySyntax$Type::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_EscapeQuerySyntax$Type *self = (t_EscapeQuerySyntax$Type *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_EscapeQuerySyntax$Type::install(PyObject *module)
              {
                installType(&PY_TYPE(EscapeQuerySyntax$Type), module, "EscapeQuerySyntax$Type", 0);
              }

              void t_EscapeQuerySyntax$Type::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax$Type).tp_dict, "class_", make_descriptor(EscapeQuerySyntax$Type::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax$Type).tp_dict, "wrapfn_", make_descriptor(t_EscapeQuerySyntax$Type::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax$Type).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(EscapeQuerySyntax$Type::initializeClass);
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax$Type).tp_dict, "NORMAL", make_descriptor(t_EscapeQuerySyntax$Type::wrap_Object(*EscapeQuerySyntax$Type::NORMAL)));
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax$Type).tp_dict, "STRING", make_descriptor(t_EscapeQuerySyntax$Type::wrap_Object(*EscapeQuerySyntax$Type::STRING)));
              }

              static PyObject *t_EscapeQuerySyntax$Type_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, EscapeQuerySyntax$Type::initializeClass, 1)))
                  return NULL;
                return t_EscapeQuerySyntax$Type::wrap_Object(EscapeQuerySyntax$Type(((t_EscapeQuerySyntax$Type *) arg)->object.this$));
              }
              static PyObject *t_EscapeQuerySyntax$Type_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, EscapeQuerySyntax$Type::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_EscapeQuerySyntax$Type_of_(t_EscapeQuerySyntax$Type *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_EscapeQuerySyntax$Type_valueOf(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::String a0((jobject) NULL);
                EscapeQuerySyntax$Type result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type::valueOf(a0));
                  return t_EscapeQuerySyntax$Type::wrap_Object(result);
                }

                return callSuper(type, "valueOf", args, 2);
              }

              static PyObject *t_EscapeQuerySyntax$Type_values(PyTypeObject *type)
              {
                JArray< EscapeQuerySyntax$Type > result((jobject) NULL);
                OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type::values());
                return JArray<jobject>(result.this$).wrap(t_EscapeQuerySyntax$Type::wrap_jobject);
              }
              static PyObject *t_EscapeQuerySyntax$Type_get__parameters_(t_EscapeQuerySyntax$Type *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/std31/StandardTokenizerImpl31.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std31 {

            ::java::lang::Class *StandardTokenizerImpl31::class$ = NULL;
            jmethodID *StandardTokenizerImpl31::mids$ = NULL;
            bool StandardTokenizerImpl31::live$ = false;
            jint StandardTokenizerImpl31::HANGUL_TYPE = (jint) 0;
            jint StandardTokenizerImpl31::HIRAGANA_TYPE = (jint) 0;
            jint StandardTokenizerImpl31::IDEOGRAPHIC_TYPE = (jint) 0;
            jint StandardTokenizerImpl31::KATAKANA_TYPE = (jint) 0;
            jint StandardTokenizerImpl31::NUMERIC_TYPE = (jint) 0;
            jint StandardTokenizerImpl31::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
            jint StandardTokenizerImpl31::WORD_TYPE = (jint) 0;
            jint StandardTokenizerImpl31::YYEOF = (jint) 0;
            jint StandardTokenizerImpl31::YYINITIAL = (jint) 0;

            jclass StandardTokenizerImpl31::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/std31/StandardTokenizerImpl31");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
                mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
                mids$[mid_setBufferSize_39c7bd3c] = env->getMethodID(cls, "setBufferSize", "(I)V");
                mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
                mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
                HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
                IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
                KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
                NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
                SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
                WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
                YYEOF = env->getStaticIntField(cls, "YYEOF");
                YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            StandardTokenizerImpl31::StandardTokenizerImpl31(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

            jint StandardTokenizerImpl31::getNextToken() const
            {
              return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
            }

            void StandardTokenizerImpl31::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
            }

            void StandardTokenizerImpl31::setBufferSize(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setBufferSize_39c7bd3c], a0);
            }

            void StandardTokenizerImpl31::yybegin(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
            }

            jint StandardTokenizerImpl31::yychar() const
            {
              return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
            }

            jchar StandardTokenizerImpl31::yycharat(jint a0) const
            {
              return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
            }

            void StandardTokenizerImpl31::yyclose() const
            {
              env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
            }

            jint StandardTokenizerImpl31::yylength() const
            {
              return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
            }

            void StandardTokenizerImpl31::yypushback(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
            }

            void StandardTokenizerImpl31::yyreset(const ::java::io::Reader & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
            }

            jint StandardTokenizerImpl31::yystate() const
            {
              return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
            }

            ::java::lang::String StandardTokenizerImpl31::yytext() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std31 {
            static PyObject *t_StandardTokenizerImpl31_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl31_instance_(PyTypeObject *type, PyObject *arg);
            static int t_StandardTokenizerImpl31_init_(t_StandardTokenizerImpl31 *self, PyObject *args, PyObject *kwds);
            static PyObject *t_StandardTokenizerImpl31_getNextToken(t_StandardTokenizerImpl31 *self);
            static PyObject *t_StandardTokenizerImpl31_getText(t_StandardTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl31_setBufferSize(t_StandardTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl31_yybegin(t_StandardTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl31_yychar(t_StandardTokenizerImpl31 *self);
            static PyObject *t_StandardTokenizerImpl31_yycharat(t_StandardTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl31_yyclose(t_StandardTokenizerImpl31 *self);
            static PyObject *t_StandardTokenizerImpl31_yylength(t_StandardTokenizerImpl31 *self);
            static PyObject *t_StandardTokenizerImpl31_yypushback(t_StandardTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl31_yyreset(t_StandardTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl31_yystate(t_StandardTokenizerImpl31 *self);
            static PyObject *t_StandardTokenizerImpl31_yytext(t_StandardTokenizerImpl31 *self);
            static int t_StandardTokenizerImpl31_set__bufferSize(t_StandardTokenizerImpl31 *self, PyObject *arg, void *data);
            static PyObject *t_StandardTokenizerImpl31_get__nextToken(t_StandardTokenizerImpl31 *self, void *data);
            static PyGetSetDef t_StandardTokenizerImpl31__fields_[] = {
              DECLARE_SET_FIELD(t_StandardTokenizerImpl31, bufferSize),
              DECLARE_GET_FIELD(t_StandardTokenizerImpl31, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_StandardTokenizerImpl31__methods_[] = {
              DECLARE_METHOD(t_StandardTokenizerImpl31, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardTokenizerImpl31, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardTokenizerImpl31, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl31, getText, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl31, setBufferSize, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yybegin, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yychar, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yycharat, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yyclose, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yylength, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yypushback, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yyreset, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yystate, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yytext, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(StandardTokenizerImpl31, t_StandardTokenizerImpl31, ::java::lang::Object, StandardTokenizerImpl31, t_StandardTokenizerImpl31_init_, 0, 0, t_StandardTokenizerImpl31__fields_, 0, 0);

            void t_StandardTokenizerImpl31::install(PyObject *module)
            {
              installType(&PY_TYPE(StandardTokenizerImpl31), module, "StandardTokenizerImpl31", 0);
            }

            void t_StandardTokenizerImpl31::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "class_", make_descriptor(StandardTokenizerImpl31::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "wrapfn_", make_descriptor(t_StandardTokenizerImpl31::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(StandardTokenizerImpl31::initializeClass);
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "HANGUL_TYPE", make_descriptor(StandardTokenizerImpl31::HANGUL_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "HIRAGANA_TYPE", make_descriptor(StandardTokenizerImpl31::HIRAGANA_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(StandardTokenizerImpl31::IDEOGRAPHIC_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "KATAKANA_TYPE", make_descriptor(StandardTokenizerImpl31::KATAKANA_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "NUMERIC_TYPE", make_descriptor(StandardTokenizerImpl31::NUMERIC_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(StandardTokenizerImpl31::SOUTH_EAST_ASIAN_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "WORD_TYPE", make_descriptor(StandardTokenizerImpl31::WORD_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "YYEOF", make_descriptor(StandardTokenizerImpl31::YYEOF));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "YYINITIAL", make_descriptor(StandardTokenizerImpl31::YYINITIAL));
            }

            static PyObject *t_StandardTokenizerImpl31_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, StandardTokenizerImpl31::initializeClass, 1)))
                return NULL;
              return t_StandardTokenizerImpl31::wrap_Object(StandardTokenizerImpl31(((t_StandardTokenizerImpl31 *) arg)->object.this$));
            }
            static PyObject *t_StandardTokenizerImpl31_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, StandardTokenizerImpl31::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_StandardTokenizerImpl31_init_(t_StandardTokenizerImpl31 *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::Reader a0((jobject) NULL);
              StandardTokenizerImpl31 object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                INT_CALL(object = StandardTokenizerImpl31(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_StandardTokenizerImpl31_getNextToken(t_StandardTokenizerImpl31 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNextToken());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl31_getText(t_StandardTokenizerImpl31 *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
              {
                OBJ_CALL(self->object.getText(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "getText", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl31_setBufferSize(t_StandardTokenizerImpl31 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setBufferSize(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setBufferSize", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl31_yybegin(t_StandardTokenizerImpl31 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yybegin(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl31_yychar(t_StandardTokenizerImpl31 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yychar());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl31_yycharat(t_StandardTokenizerImpl31 *self, PyObject *arg)
            {
              jint a0;
              jchar result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.yycharat(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl31_yyclose(t_StandardTokenizerImpl31 *self)
            {
              OBJ_CALL(self->object.yyclose());
              Py_RETURN_NONE;
            }

            static PyObject *t_StandardTokenizerImpl31_yylength(t_StandardTokenizerImpl31 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yylength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl31_yypushback(t_StandardTokenizerImpl31 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yypushback(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl31_yyreset(t_StandardTokenizerImpl31 *self, PyObject *arg)
            {
              ::java::io::Reader a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
              {
                OBJ_CALL(self->object.yyreset(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl31_yystate(t_StandardTokenizerImpl31 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yystate());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl31_yytext(t_StandardTokenizerImpl31 *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.yytext());
              return j2p(result);
            }

            static int t_StandardTokenizerImpl31_set__bufferSize(t_StandardTokenizerImpl31 *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setBufferSize(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "bufferSize", arg);
              return -1;
            }

            static PyObject *t_StandardTokenizerImpl31_get__nextToken(t_StandardTokenizerImpl31 *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNextToken());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *AnalyzerQueryNodeProcessor::class$ = NULL;
              jmethodID *AnalyzerQueryNodeProcessor::mids$ = NULL;
              bool AnalyzerQueryNodeProcessor::live$ = false;

              jclass AnalyzerQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              AnalyzerQueryNodeProcessor::AnalyzerQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode AnalyzerQueryNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_AnalyzerQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AnalyzerQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_AnalyzerQueryNodeProcessor_init_(t_AnalyzerQueryNodeProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_AnalyzerQueryNodeProcessor_process(t_AnalyzerQueryNodeProcessor *self, PyObject *args);

              static PyMethodDef t_AnalyzerQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_AnalyzerQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AnalyzerQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AnalyzerQueryNodeProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(AnalyzerQueryNodeProcessor, t_AnalyzerQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, AnalyzerQueryNodeProcessor, t_AnalyzerQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_AnalyzerQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(AnalyzerQueryNodeProcessor), module, "AnalyzerQueryNodeProcessor", 0);
              }

              void t_AnalyzerQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(AnalyzerQueryNodeProcessor).tp_dict, "class_", make_descriptor(AnalyzerQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(AnalyzerQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_AnalyzerQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(AnalyzerQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AnalyzerQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AnalyzerQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_AnalyzerQueryNodeProcessor::wrap_Object(AnalyzerQueryNodeProcessor(((t_AnalyzerQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_AnalyzerQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AnalyzerQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_AnalyzerQueryNodeProcessor_init_(t_AnalyzerQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                AnalyzerQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = AnalyzerQueryNodeProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_AnalyzerQueryNodeProcessor_process(t_AnalyzerQueryNodeProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(AnalyzerQueryNodeProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/MultiPhraseQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *MultiPhraseQueryNode::class$ = NULL;
              jmethodID *MultiPhraseQueryNode::mids$ = NULL;
              bool MultiPhraseQueryNode::live$ = false;

              jclass MultiPhraseQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/MultiPhraseQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MultiPhraseQueryNode::MultiPhraseQueryNode() : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode MultiPhraseQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::java::lang::CharSequence MultiPhraseQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              void MultiPhraseQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              ::java::lang::CharSequence MultiPhraseQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String MultiPhraseQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_MultiPhraseQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MultiPhraseQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MultiPhraseQueryNode_init_(t_MultiPhraseQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_MultiPhraseQueryNode_cloneTree(t_MultiPhraseQueryNode *self, PyObject *args);
              static PyObject *t_MultiPhraseQueryNode_getField(t_MultiPhraseQueryNode *self);
              static PyObject *t_MultiPhraseQueryNode_setField(t_MultiPhraseQueryNode *self, PyObject *arg);
              static PyObject *t_MultiPhraseQueryNode_toQueryString(t_MultiPhraseQueryNode *self, PyObject *args);
              static PyObject *t_MultiPhraseQueryNode_toString(t_MultiPhraseQueryNode *self, PyObject *args);
              static PyObject *t_MultiPhraseQueryNode_get__field(t_MultiPhraseQueryNode *self, void *data);
              static int t_MultiPhraseQueryNode_set__field(t_MultiPhraseQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_MultiPhraseQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_MultiPhraseQueryNode, field),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_MultiPhraseQueryNode__methods_[] = {
                DECLARE_METHOD(t_MultiPhraseQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MultiPhraseQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MultiPhraseQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_MultiPhraseQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_MultiPhraseQueryNode, setField, METH_O),
                DECLARE_METHOD(t_MultiPhraseQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_MultiPhraseQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MultiPhraseQueryNode, t_MultiPhraseQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, MultiPhraseQueryNode, t_MultiPhraseQueryNode_init_, 0, 0, t_MultiPhraseQueryNode__fields_, 0, 0);

              void t_MultiPhraseQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(MultiPhraseQueryNode), module, "MultiPhraseQueryNode", 0);
              }

              void t_MultiPhraseQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MultiPhraseQueryNode).tp_dict, "class_", make_descriptor(MultiPhraseQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MultiPhraseQueryNode).tp_dict, "wrapfn_", make_descriptor(t_MultiPhraseQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MultiPhraseQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MultiPhraseQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MultiPhraseQueryNode::initializeClass, 1)))
                  return NULL;
                return t_MultiPhraseQueryNode::wrap_Object(MultiPhraseQueryNode(((t_MultiPhraseQueryNode *) arg)->object.this$));
              }
              static PyObject *t_MultiPhraseQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MultiPhraseQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MultiPhraseQueryNode_init_(t_MultiPhraseQueryNode *self, PyObject *args, PyObject *kwds)
              {
                MultiPhraseQueryNode object((jobject) NULL);

                INT_CALL(object = MultiPhraseQueryNode());
                self->object = object;

                return 0;
              }

              static PyObject *t_MultiPhraseQueryNode_cloneTree(t_MultiPhraseQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(MultiPhraseQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_MultiPhraseQueryNode_getField(t_MultiPhraseQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_MultiPhraseQueryNode_setField(t_MultiPhraseQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_MultiPhraseQueryNode_toQueryString(t_MultiPhraseQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(MultiPhraseQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_MultiPhraseQueryNode_toString(t_MultiPhraseQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(MultiPhraseQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_MultiPhraseQueryNode_get__field(t_MultiPhraseQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_MultiPhraseQueryNode_set__field(t_MultiPhraseQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MultiValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MultiValueSource::class$ = NULL;
            jmethodID *MultiValueSource::mids$ = NULL;
            bool MultiValueSource::live$ = false;

            jclass MultiValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MultiValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_dimension_54c6a179] = env->getMethodID(cls, "dimension", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MultiValueSource::MultiValueSource() : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            jint MultiValueSource::dimension() const
            {
              return env->callIntMethod(this$, mids$[mid_dimension_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MultiValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MultiValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MultiValueSource_init_(t_MultiValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MultiValueSource_dimension(t_MultiValueSource *self);

            static PyMethodDef t_MultiValueSource__methods_[] = {
              DECLARE_METHOD(t_MultiValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiValueSource, dimension, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MultiValueSource, t_MultiValueSource, ::org::apache::lucene::queries::function::ValueSource, MultiValueSource, t_MultiValueSource_init_, 0, 0, 0, 0, 0);

            void t_MultiValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(MultiValueSource), module, "MultiValueSource", 0);
            }

            void t_MultiValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MultiValueSource).tp_dict, "class_", make_descriptor(MultiValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MultiValueSource).tp_dict, "wrapfn_", make_descriptor(t_MultiValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MultiValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MultiValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MultiValueSource::initializeClass, 1)))
                return NULL;
              return t_MultiValueSource::wrap_Object(MultiValueSource(((t_MultiValueSource *) arg)->object.this$));
            }
            static PyObject *t_MultiValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MultiValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MultiValueSource_init_(t_MultiValueSource *self, PyObject *args, PyObject *kwds)
            {
              MultiValueSource object((jobject) NULL);

              INT_CALL(object = MultiValueSource());
              self->object = object;

              return 0;
            }

            static PyObject *t_MultiValueSource_dimension(t_MultiValueSource *self)
            {
              jint result;
              OBJ_CALL(result = self->object.dimension());
              return PyInt_FromLong((long) result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/CharSequenceOutputs.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *CharSequenceOutputs::class$ = NULL;
          jmethodID *CharSequenceOutputs::mids$ = NULL;
          bool CharSequenceOutputs::live$ = false;

          jclass CharSequenceOutputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/CharSequenceOutputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_8f9b8d9f] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/CharsRef;Lorg/apache/lucene/util/CharsRef;)Lorg/apache/lucene/util/CharsRef;");
              mids$[mid_common_8f9b8d9f] = env->getMethodID(cls, "common", "(Lorg/apache/lucene/util/CharsRef;Lorg/apache/lucene/util/CharsRef;)Lorg/apache/lucene/util/CharsRef;");
              mids$[mid_getNoOutput_399267bb] = env->getMethodID(cls, "getNoOutput", "()Lorg/apache/lucene/util/CharsRef;");
              mids$[mid_getSingleton_b8f978d1] = env->getStaticMethodID(cls, "getSingleton", "()Lorg/apache/lucene/util/fst/CharSequenceOutputs;");
              mids$[mid_outputToString_ea1848b1] = env->getMethodID(cls, "outputToString", "(Lorg/apache/lucene/util/CharsRef;)Ljava/lang/String;");
              mids$[mid_ramBytesUsed_ee7999da] = env->getMethodID(cls, "ramBytesUsed", "(Lorg/apache/lucene/util/CharsRef;)J");
              mids$[mid_read_cbeddd00] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/util/CharsRef;");
              mids$[mid_skipOutput_f5d6a551] = env->getMethodID(cls, "skipOutput", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_subtract_8f9b8d9f] = env->getMethodID(cls, "subtract", "(Lorg/apache/lucene/util/CharsRef;Lorg/apache/lucene/util/CharsRef;)Lorg/apache/lucene/util/CharsRef;");
              mids$[mid_write_9a0fad97] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/util/CharsRef;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::CharsRef CharSequenceOutputs::add(const ::org::apache::lucene::util::CharsRef & a0, const ::org::apache::lucene::util::CharsRef & a1) const
          {
            return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_add_8f9b8d9f], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::CharsRef CharSequenceOutputs::common(const ::org::apache::lucene::util::CharsRef & a0, const ::org::apache::lucene::util::CharsRef & a1) const
          {
            return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_common_8f9b8d9f], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::CharsRef CharSequenceOutputs::getNoOutput() const
          {
            return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_getNoOutput_399267bb]));
          }

          CharSequenceOutputs CharSequenceOutputs::getSingleton()
          {
            jclass cls = env->getClass(initializeClass);
            return CharSequenceOutputs(env->callStaticObjectMethod(cls, mids$[mid_getSingleton_b8f978d1]));
          }

          ::java::lang::String CharSequenceOutputs::outputToString(const ::org::apache::lucene::util::CharsRef & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_ea1848b1], a0.this$));
          }

          jlong CharSequenceOutputs::ramBytesUsed(const ::org::apache::lucene::util::CharsRef & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_ee7999da], a0.this$);
          }

          ::org::apache::lucene::util::CharsRef CharSequenceOutputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_read_cbeddd00], a0.this$));
          }

          void CharSequenceOutputs::skipOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skipOutput_f5d6a551], a0.this$);
          }

          ::org::apache::lucene::util::CharsRef CharSequenceOutputs::subtract(const ::org::apache::lucene::util::CharsRef & a0, const ::org::apache::lucene::util::CharsRef & a1) const
          {
            return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_subtract_8f9b8d9f], a0.this$, a1.this$));
          }

          void CharSequenceOutputs::write(const ::org::apache::lucene::util::CharsRef & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_9a0fad97], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_CharSequenceOutputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharSequenceOutputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharSequenceOutputs_of_(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_add(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_common(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_getNoOutput(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_getSingleton(PyTypeObject *type);
          static PyObject *t_CharSequenceOutputs_outputToString(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_ramBytesUsed(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_read(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_skipOutput(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_subtract(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_write(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_get__noOutput(t_CharSequenceOutputs *self, void *data);
          static PyObject *t_CharSequenceOutputs_get__singleton(t_CharSequenceOutputs *self, void *data);
          static PyObject *t_CharSequenceOutputs_get__parameters_(t_CharSequenceOutputs *self, void *data);
          static PyGetSetDef t_CharSequenceOutputs__fields_[] = {
            DECLARE_GET_FIELD(t_CharSequenceOutputs, noOutput),
            DECLARE_GET_FIELD(t_CharSequenceOutputs, singleton),
            DECLARE_GET_FIELD(t_CharSequenceOutputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharSequenceOutputs__methods_[] = {
            DECLARE_METHOD(t_CharSequenceOutputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharSequenceOutputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharSequenceOutputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, add, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, common, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, getNoOutput, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, getSingleton, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_CharSequenceOutputs, outputToString, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, read, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, skipOutput, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharSequenceOutputs, t_CharSequenceOutputs, ::org::apache::lucene::util::fst::Outputs, CharSequenceOutputs, abstract_init, 0, 0, t_CharSequenceOutputs__fields_, 0, 0);
          PyObject *t_CharSequenceOutputs::wrap_Object(const CharSequenceOutputs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharSequenceOutputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharSequenceOutputs *self = (t_CharSequenceOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_CharSequenceOutputs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharSequenceOutputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharSequenceOutputs *self = (t_CharSequenceOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_CharSequenceOutputs::install(PyObject *module)
          {
            installType(&PY_TYPE(CharSequenceOutputs), module, "CharSequenceOutputs", 0);
          }

          void t_CharSequenceOutputs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharSequenceOutputs).tp_dict, "class_", make_descriptor(CharSequenceOutputs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharSequenceOutputs).tp_dict, "wrapfn_", make_descriptor(t_CharSequenceOutputs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharSequenceOutputs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharSequenceOutputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharSequenceOutputs::initializeClass, 1)))
              return NULL;
            return t_CharSequenceOutputs::wrap_Object(CharSequenceOutputs(((t_CharSequenceOutputs *) arg)->object.this$));
          }
          static PyObject *t_CharSequenceOutputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharSequenceOutputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharSequenceOutputs_of_(t_CharSequenceOutputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_CharSequenceOutputs_add(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRef a1((jobject) NULL);
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::CharsRef::initializeClass, ::org::apache::lucene::util::CharsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CharSequenceOutputs), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_common(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRef a1((jobject) NULL);
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::CharsRef::initializeClass, ::org::apache::lucene::util::CharsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CharSequenceOutputs), (PyObject *) self, "common", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_getNoOutput(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNoOutput());
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CharSequenceOutputs), (PyObject *) self, "getNoOutput", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_getSingleton(PyTypeObject *type)
          {
            CharSequenceOutputs result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::fst::CharSequenceOutputs::getSingleton());
            return t_CharSequenceOutputs::wrap_Object(result);
          }

          static PyObject *t_CharSequenceOutputs_outputToString(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::CharsRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(CharSequenceOutputs), (PyObject *) self, "outputToString", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_ramBytesUsed(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::util::CharsRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.ramBytesUsed(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(CharSequenceOutputs), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_read(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CharSequenceOutputs), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_skipOutput(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.skipOutput(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharSequenceOutputs), (PyObject *) self, "skipOutput", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_subtract(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRef a1((jobject) NULL);
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::CharsRef::initializeClass, ::org::apache::lucene::util::CharsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CharSequenceOutputs), (PyObject *) self, "subtract", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_write(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::CharsRef::initializeClass, ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharSequenceOutputs), (PyObject *) self, "write", args, 2);
          }
          static PyObject *t_CharSequenceOutputs_get__parameters_(t_CharSequenceOutputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_CharSequenceOutputs_get__noOutput(t_CharSequenceOutputs *self, void *data)
          {
            ::org::apache::lucene::util::CharsRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::org::apache::lucene::util::t_CharsRef::wrap_Object(value);
          }

          static PyObject *t_CharSequenceOutputs_get__singleton(t_CharSequenceOutputs *self, void *data)
          {
            CharSequenceOutputs value((jobject) NULL);
            OBJ_CALL(value = self->object.getSingleton());
            return t_CharSequenceOutputs::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *TokenOffsetPayloadTokenFilter::class$ = NULL;
          jmethodID *TokenOffsetPayloadTokenFilter::mids$ = NULL;
          bool TokenOffsetPayloadTokenFilter::live$ = false;

          jclass TokenOffsetPayloadTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenOffsetPayloadTokenFilter::TokenOffsetPayloadTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean TokenOffsetPayloadTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_TokenOffsetPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenOffsetPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenOffsetPayloadTokenFilter_init_(t_TokenOffsetPayloadTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenOffsetPayloadTokenFilter_incrementToken(t_TokenOffsetPayloadTokenFilter *self, PyObject *args);

          static PyMethodDef t_TokenOffsetPayloadTokenFilter__methods_[] = {
            DECLARE_METHOD(t_TokenOffsetPayloadTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenOffsetPayloadTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenOffsetPayloadTokenFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenOffsetPayloadTokenFilter, t_TokenOffsetPayloadTokenFilter, ::org::apache::lucene::analysis::TokenFilter, TokenOffsetPayloadTokenFilter, t_TokenOffsetPayloadTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_TokenOffsetPayloadTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenOffsetPayloadTokenFilter), module, "TokenOffsetPayloadTokenFilter", 0);
          }

          void t_TokenOffsetPayloadTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenOffsetPayloadTokenFilter).tp_dict, "class_", make_descriptor(TokenOffsetPayloadTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenOffsetPayloadTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_TokenOffsetPayloadTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenOffsetPayloadTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenOffsetPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenOffsetPayloadTokenFilter::initializeClass, 1)))
              return NULL;
            return t_TokenOffsetPayloadTokenFilter::wrap_Object(TokenOffsetPayloadTokenFilter(((t_TokenOffsetPayloadTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_TokenOffsetPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenOffsetPayloadTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenOffsetPayloadTokenFilter_init_(t_TokenOffsetPayloadTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            TokenOffsetPayloadTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = TokenOffsetPayloadTokenFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenOffsetPayloadTokenFilter_incrementToken(t_TokenOffsetPayloadTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TokenOffsetPayloadTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/vectorhighlight/BoundaryScanner.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *ScoreOrderFragmentsBuilder::class$ = NULL;
          jmethodID *ScoreOrderFragmentsBuilder::mids$ = NULL;
          bool ScoreOrderFragmentsBuilder::live$ = false;

          jclass ScoreOrderFragmentsBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_7f580ee7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/vectorhighlight/BoundaryScanner;)V");
              mids$[mid_init$_60fab432] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;[Ljava/lang/String;)V");
              mids$[mid_init$_b03db8ab] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/vectorhighlight/BoundaryScanner;)V");
              mids$[mid_getWeightedFragInfoList_4f378251] = env->getMethodID(cls, "getWeightedFragInfoList", "(Ljava/util/List;)Ljava/util/List;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScoreOrderFragmentsBuilder::ScoreOrderFragmentsBuilder() : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ScoreOrderFragmentsBuilder::ScoreOrderFragmentsBuilder(const ::org::apache::lucene::search::vectorhighlight::BoundaryScanner & a0) : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_7f580ee7, a0.this$)) {}

          ScoreOrderFragmentsBuilder::ScoreOrderFragmentsBuilder(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1) : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_60fab432, a0.this$, a1.this$)) {}

          ScoreOrderFragmentsBuilder::ScoreOrderFragmentsBuilder(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::search::vectorhighlight::BoundaryScanner & a2) : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_b03db8ab, a0.this$, a1.this$, a2.this$)) {}

          ::java::util::List ScoreOrderFragmentsBuilder::getWeightedFragInfoList(const ::java::util::List & a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getWeightedFragInfoList_4f378251], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder$ScoreComparator.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_ScoreOrderFragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScoreOrderFragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ScoreOrderFragmentsBuilder_init_(t_ScoreOrderFragmentsBuilder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ScoreOrderFragmentsBuilder_getWeightedFragInfoList(t_ScoreOrderFragmentsBuilder *self, PyObject *args);

          static PyMethodDef t_ScoreOrderFragmentsBuilder__methods_[] = {
            DECLARE_METHOD(t_ScoreOrderFragmentsBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScoreOrderFragmentsBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScoreOrderFragmentsBuilder, getWeightedFragInfoList, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ScoreOrderFragmentsBuilder, t_ScoreOrderFragmentsBuilder, ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder, ScoreOrderFragmentsBuilder, t_ScoreOrderFragmentsBuilder_init_, 0, 0, 0, 0, 0);

          void t_ScoreOrderFragmentsBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(ScoreOrderFragmentsBuilder), module, "ScoreOrderFragmentsBuilder", 0);
            PyDict_SetItemString(PY_TYPE(ScoreOrderFragmentsBuilder).tp_dict, "ScoreComparator", make_descriptor(&PY_TYPE(ScoreOrderFragmentsBuilder$ScoreComparator)));
          }

          void t_ScoreOrderFragmentsBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ScoreOrderFragmentsBuilder).tp_dict, "class_", make_descriptor(ScoreOrderFragmentsBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ScoreOrderFragmentsBuilder).tp_dict, "wrapfn_", make_descriptor(t_ScoreOrderFragmentsBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ScoreOrderFragmentsBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ScoreOrderFragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScoreOrderFragmentsBuilder::initializeClass, 1)))
              return NULL;
            return t_ScoreOrderFragmentsBuilder::wrap_Object(ScoreOrderFragmentsBuilder(((t_ScoreOrderFragmentsBuilder *) arg)->object.this$));
          }
          static PyObject *t_ScoreOrderFragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScoreOrderFragmentsBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ScoreOrderFragmentsBuilder_init_(t_ScoreOrderFragmentsBuilder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ScoreOrderFragmentsBuilder object((jobject) NULL);

                INT_CALL(object = ScoreOrderFragmentsBuilder());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::search::vectorhighlight::BoundaryScanner a0((jobject) NULL);
                ScoreOrderFragmentsBuilder object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::vectorhighlight::BoundaryScanner::initializeClass, &a0))
                {
                  INT_CALL(object = ScoreOrderFragmentsBuilder(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                ScoreOrderFragmentsBuilder object((jobject) NULL);

                if (!parseArgs(args, "[s[s", &a0, &a1))
                {
                  INT_CALL(object = ScoreOrderFragmentsBuilder(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::BoundaryScanner a2((jobject) NULL);
                ScoreOrderFragmentsBuilder object((jobject) NULL);

                if (!parseArgs(args, "[s[sk", ::org::apache::lucene::search::vectorhighlight::BoundaryScanner::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ScoreOrderFragmentsBuilder(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ScoreOrderFragmentsBuilder_getWeightedFragInfoList(t_ScoreOrderFragmentsBuilder *self, PyObject *args)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.getWeightedFragInfoList(a0));
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldFragList$WeightedFragInfo));
            }

            return callSuper(&PY_TYPE(ScoreOrderFragmentsBuilder), (PyObject *) self, "getWeightedFragInfoList", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/BlockGroupingCollector.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/grouping/TopGroups.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *BlockGroupingCollector::class$ = NULL;
          jmethodID *BlockGroupingCollector::mids$ = NULL;
          bool BlockGroupingCollector::live$ = false;

          jclass BlockGroupingCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/BlockGroupingCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_418a7963] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Sort;IZLorg/apache/lucene/search/Filter;)V");
              mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
              mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
              mids$[mid_getTopGroups_79cd6253] = env->getMethodID(cls, "getTopGroups", "(Lorg/apache/lucene/search/Sort;IIIZ)Lorg/apache/lucene/search/grouping/TopGroups;");
              mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
              mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockGroupingCollector::BlockGroupingCollector(const ::org::apache::lucene::search::Sort & a0, jint a1, jboolean a2, const ::org::apache::lucene::search::Filter & a3) : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_418a7963, a0.this$, a1, a2, a3.this$)) {}

          jboolean BlockGroupingCollector::acceptsDocsOutOfOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
          }

          void BlockGroupingCollector::collect(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
          }

          ::org::apache::lucene::search::grouping::TopGroups BlockGroupingCollector::getTopGroups(const ::org::apache::lucene::search::Sort & a0, jint a1, jint a2, jint a3, jboolean a4) const
          {
            return ::org::apache::lucene::search::grouping::TopGroups(env->callObjectMethod(this$, mids$[mid_getTopGroups_79cd6253], a0.this$, a1, a2, a3, a4));
          }

          void BlockGroupingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
          }

          void BlockGroupingCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_BlockGroupingCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockGroupingCollector_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockGroupingCollector_init_(t_BlockGroupingCollector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BlockGroupingCollector_acceptsDocsOutOfOrder(t_BlockGroupingCollector *self, PyObject *args);
          static PyObject *t_BlockGroupingCollector_collect(t_BlockGroupingCollector *self, PyObject *args);
          static PyObject *t_BlockGroupingCollector_getTopGroups(t_BlockGroupingCollector *self, PyObject *args);
          static PyObject *t_BlockGroupingCollector_setNextReader(t_BlockGroupingCollector *self, PyObject *args);
          static PyObject *t_BlockGroupingCollector_setScorer(t_BlockGroupingCollector *self, PyObject *args);
          static int t_BlockGroupingCollector_set__nextReader(t_BlockGroupingCollector *self, PyObject *arg, void *data);
          static int t_BlockGroupingCollector_set__scorer(t_BlockGroupingCollector *self, PyObject *arg, void *data);
          static PyGetSetDef t_BlockGroupingCollector__fields_[] = {
            DECLARE_SET_FIELD(t_BlockGroupingCollector, nextReader),
            DECLARE_SET_FIELD(t_BlockGroupingCollector, scorer),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BlockGroupingCollector__methods_[] = {
            DECLARE_METHOD(t_BlockGroupingCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockGroupingCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockGroupingCollector, acceptsDocsOutOfOrder, METH_VARARGS),
            DECLARE_METHOD(t_BlockGroupingCollector, collect, METH_VARARGS),
            DECLARE_METHOD(t_BlockGroupingCollector, getTopGroups, METH_VARARGS),
            DECLARE_METHOD(t_BlockGroupingCollector, setNextReader, METH_VARARGS),
            DECLARE_METHOD(t_BlockGroupingCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BlockGroupingCollector, t_BlockGroupingCollector, ::org::apache::lucene::search::Collector, BlockGroupingCollector, t_BlockGroupingCollector_init_, 0, 0, t_BlockGroupingCollector__fields_, 0, 0);

          void t_BlockGroupingCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockGroupingCollector), module, "BlockGroupingCollector", 0);
          }

          void t_BlockGroupingCollector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BlockGroupingCollector).tp_dict, "class_", make_descriptor(BlockGroupingCollector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BlockGroupingCollector).tp_dict, "wrapfn_", make_descriptor(t_BlockGroupingCollector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BlockGroupingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockGroupingCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockGroupingCollector::initializeClass, 1)))
              return NULL;
            return t_BlockGroupingCollector::wrap_Object(BlockGroupingCollector(((t_BlockGroupingCollector *) arg)->object.this$));
          }
          static PyObject *t_BlockGroupingCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockGroupingCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockGroupingCollector_init_(t_BlockGroupingCollector *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Sort a0((jobject) NULL);
            jint a1;
            jboolean a2;
            ::org::apache::lucene::search::Filter a3((jobject) NULL);
            BlockGroupingCollector object((jobject) NULL);

            if (!parseArgs(args, "kIZk", ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = BlockGroupingCollector(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BlockGroupingCollector_acceptsDocsOutOfOrder(t_BlockGroupingCollector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(BlockGroupingCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
          }

          static PyObject *t_BlockGroupingCollector_collect(t_BlockGroupingCollector *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.collect(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BlockGroupingCollector), (PyObject *) self, "collect", args, 2);
          }

          static PyObject *t_BlockGroupingCollector_getTopGroups(t_BlockGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Sort a0((jobject) NULL);
            jint a1;
            jint a2;
            jint a3;
            jboolean a4;
            ::org::apache::lucene::search::grouping::TopGroups result((jobject) NULL);

            if (!parseArgs(args, "kIIIZ", ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.getTopGroups(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::search::grouping::t_TopGroups::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getTopGroups", args);
            return NULL;
          }

          static PyObject *t_BlockGroupingCollector_setNextReader(t_BlockGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setNextReader(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BlockGroupingCollector), (PyObject *) self, "setNextReader", args, 2);
          }

          static PyObject *t_BlockGroupingCollector_setScorer(t_BlockGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorer a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BlockGroupingCollector), (PyObject *) self, "setScorer", args, 2);
          }

          static int t_BlockGroupingCollector_set__nextReader(t_BlockGroupingCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
              {
                INT_CALL(self->object.setNextReader(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
            return -1;
          }

          static int t_BlockGroupingCollector_set__scorer(t_BlockGroupingCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/ElisionFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/ElisionFilter.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *ElisionFilterFactory::class$ = NULL;
          jmethodID *ElisionFilterFactory::mids$ = NULL;
          bool ElisionFilterFactory::live$ = false;

          jclass ElisionFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/ElisionFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_94c1814f] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/util/ElisionFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ElisionFilterFactory::ElisionFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::util::ElisionFilter ElisionFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::util::ElisionFilter(env->callObjectMethod(this$, mids$[mid_create_94c1814f], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory ElisionFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }

          void ElisionFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_ElisionFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ElisionFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ElisionFilterFactory_init_(t_ElisionFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ElisionFilterFactory_create(t_ElisionFilterFactory *self, PyObject *args);
          static PyObject *t_ElisionFilterFactory_getMultiTermComponent(t_ElisionFilterFactory *self);
          static PyObject *t_ElisionFilterFactory_inform(t_ElisionFilterFactory *self, PyObject *arg);
          static PyObject *t_ElisionFilterFactory_get__multiTermComponent(t_ElisionFilterFactory *self, void *data);
          static PyGetSetDef t_ElisionFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_ElisionFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ElisionFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ElisionFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ElisionFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ElisionFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_ElisionFilterFactory, getMultiTermComponent, METH_NOARGS),
            DECLARE_METHOD(t_ElisionFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ElisionFilterFactory, t_ElisionFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ElisionFilterFactory, t_ElisionFilterFactory_init_, 0, 0, t_ElisionFilterFactory__fields_, 0, 0);

          void t_ElisionFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ElisionFilterFactory), module, "ElisionFilterFactory", 0);
          }

          void t_ElisionFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ElisionFilterFactory).tp_dict, "class_", make_descriptor(ElisionFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ElisionFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ElisionFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ElisionFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ElisionFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ElisionFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ElisionFilterFactory::wrap_Object(ElisionFilterFactory(((t_ElisionFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ElisionFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ElisionFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ElisionFilterFactory_init_(t_ElisionFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ElisionFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ElisionFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ElisionFilterFactory_create(t_ElisionFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::util::ElisionFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::util::t_ElisionFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ElisionFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_ElisionFilterFactory_getMultiTermComponent(t_ElisionFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_ElisionFilterFactory_inform(t_ElisionFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_ElisionFilterFactory_get__multiTermComponent(t_ElisionFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/BufferedUpdatesStream$ApplyDeletesResult.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *BufferedUpdatesStream$ApplyDeletesResult::class$ = NULL;
        jmethodID *BufferedUpdatesStream$ApplyDeletesResult::mids$ = NULL;
        jfieldID *BufferedUpdatesStream$ApplyDeletesResult::fids$ = NULL;
        bool BufferedUpdatesStream$ApplyDeletesResult::live$ = false;

        jclass BufferedUpdatesStream$ApplyDeletesResult::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/BufferedUpdatesStream$ApplyDeletesResult");

            fids$ = new jfieldID[max_fid];
            fids$[fid_allDeleted] = env->getFieldID(cls, "allDeleted", "Ljava/util/List;");
            fids$[fid_anyDeletes] = env->getFieldID(cls, "anyDeletes", "Z");
            fids$[fid_gen] = env->getFieldID(cls, "gen", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::List BufferedUpdatesStream$ApplyDeletesResult::_get_allDeleted() const
        {
          return ::java::util::List(env->getObjectField(this$, fids$[fid_allDeleted]));
        }

        jboolean BufferedUpdatesStream$ApplyDeletesResult::_get_anyDeletes() const
        {
          return env->getBooleanField(this$, fids$[fid_anyDeletes]);
        }

        jlong BufferedUpdatesStream$ApplyDeletesResult::_get_gen() const
        {
          return env->getLongField(this$, fids$[fid_gen]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_get__allDeleted(t_BufferedUpdatesStream$ApplyDeletesResult *self, void *data);
        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_get__anyDeletes(t_BufferedUpdatesStream$ApplyDeletesResult *self, void *data);
        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_get__gen(t_BufferedUpdatesStream$ApplyDeletesResult *self, void *data);

        static PyGetSetDef t_BufferedUpdatesStream$ApplyDeletesResult__fields_[] = {
          DECLARE_GET_FIELD(t_BufferedUpdatesStream$ApplyDeletesResult, allDeleted),
          DECLARE_GET_FIELD(t_BufferedUpdatesStream$ApplyDeletesResult, anyDeletes),
          DECLARE_GET_FIELD(t_BufferedUpdatesStream$ApplyDeletesResult, gen),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BufferedUpdatesStream$ApplyDeletesResult__methods_[] = {
          DECLARE_METHOD(t_BufferedUpdatesStream$ApplyDeletesResult, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedUpdatesStream$ApplyDeletesResult, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BufferedUpdatesStream$ApplyDeletesResult, t_BufferedUpdatesStream$ApplyDeletesResult, ::java::lang::Object, BufferedUpdatesStream$ApplyDeletesResult, abstract_init, 0, 0, t_BufferedUpdatesStream$ApplyDeletesResult__fields_, 0, 0);

        void t_BufferedUpdatesStream$ApplyDeletesResult::install(PyObject *module)
        {
          installType(&PY_TYPE(BufferedUpdatesStream$ApplyDeletesResult), module, "BufferedUpdatesStream$ApplyDeletesResult", 0);
        }

        void t_BufferedUpdatesStream$ApplyDeletesResult::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BufferedUpdatesStream$ApplyDeletesResult).tp_dict, "class_", make_descriptor(BufferedUpdatesStream$ApplyDeletesResult::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BufferedUpdatesStream$ApplyDeletesResult).tp_dict, "wrapfn_", make_descriptor(t_BufferedUpdatesStream$ApplyDeletesResult::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BufferedUpdatesStream$ApplyDeletesResult).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BufferedUpdatesStream$ApplyDeletesResult::initializeClass, 1)))
            return NULL;
          return t_BufferedUpdatesStream$ApplyDeletesResult::wrap_Object(BufferedUpdatesStream$ApplyDeletesResult(((t_BufferedUpdatesStream$ApplyDeletesResult *) arg)->object.this$));
        }
        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BufferedUpdatesStream$ApplyDeletesResult::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_get__allDeleted(t_BufferedUpdatesStream$ApplyDeletesResult *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object._get_allDeleted());
          return ::java::util::t_List::wrap_Object(value);
        }

        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_get__anyDeletes(t_BufferedUpdatesStream$ApplyDeletesResult *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_anyDeletes());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_get__gen(t_BufferedUpdatesStream$ApplyDeletesResult *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_gen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/PairOutputs.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/fst/PairOutputs$Pair.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *PairOutputs::class$ = NULL;
          jmethodID *PairOutputs::mids$ = NULL;
          bool PairOutputs::live$ = false;

          jclass PairOutputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/PairOutputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_32f3530a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/Outputs;Lorg/apache/lucene/util/fst/Outputs;)V");
              mids$[mid_add_f30532b1] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/fst/PairOutputs$Pair;Lorg/apache/lucene/util/fst/PairOutputs$Pair;)Lorg/apache/lucene/util/fst/PairOutputs$Pair;");
              mids$[mid_common_f30532b1] = env->getMethodID(cls, "common", "(Lorg/apache/lucene/util/fst/PairOutputs$Pair;Lorg/apache/lucene/util/fst/PairOutputs$Pair;)Lorg/apache/lucene/util/fst/PairOutputs$Pair;");
              mids$[mid_getNoOutput_02379231] = env->getMethodID(cls, "getNoOutput", "()Lorg/apache/lucene/util/fst/PairOutputs$Pair;");
              mids$[mid_newPair_b457b73d] = env->getMethodID(cls, "newPair", "(Ljava/lang/Object;Ljava/lang/Object;)Lorg/apache/lucene/util/fst/PairOutputs$Pair;");
              mids$[mid_outputToString_93c1f663] = env->getMethodID(cls, "outputToString", "(Lorg/apache/lucene/util/fst/PairOutputs$Pair;)Ljava/lang/String;");
              mids$[mid_ramBytesUsed_53ec2f78] = env->getMethodID(cls, "ramBytesUsed", "(Lorg/apache/lucene/util/fst/PairOutputs$Pair;)J");
              mids$[mid_read_49c65b36] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/util/fst/PairOutputs$Pair;");
              mids$[mid_skipOutput_f5d6a551] = env->getMethodID(cls, "skipOutput", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_subtract_f30532b1] = env->getMethodID(cls, "subtract", "(Lorg/apache/lucene/util/fst/PairOutputs$Pair;Lorg/apache/lucene/util/fst/PairOutputs$Pair;)Lorg/apache/lucene/util/fst/PairOutputs$Pair;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_write_3e3045f1] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/util/fst/PairOutputs$Pair;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PairOutputs::PairOutputs(const ::org::apache::lucene::util::fst::Outputs & a0, const ::org::apache::lucene::util::fst::Outputs & a1) : ::org::apache::lucene::util::fst::Outputs(env->newObject(initializeClass, &mids$, mid_init$_32f3530a, a0.this$, a1.this$)) {}

          ::org::apache::lucene::util::fst::PairOutputs$Pair PairOutputs::add(const ::org::apache::lucene::util::fst::PairOutputs$Pair & a0, const ::org::apache::lucene::util::fst::PairOutputs$Pair & a1) const
          {
            return ::org::apache::lucene::util::fst::PairOutputs$Pair(env->callObjectMethod(this$, mids$[mid_add_f30532b1], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::fst::PairOutputs$Pair PairOutputs::common(const ::org::apache::lucene::util::fst::PairOutputs$Pair & a0, const ::org::apache::lucene::util::fst::PairOutputs$Pair & a1) const
          {
            return ::org::apache::lucene::util::fst::PairOutputs$Pair(env->callObjectMethod(this$, mids$[mid_common_f30532b1], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::fst::PairOutputs$Pair PairOutputs::getNoOutput() const
          {
            return ::org::apache::lucene::util::fst::PairOutputs$Pair(env->callObjectMethod(this$, mids$[mid_getNoOutput_02379231]));
          }

          ::org::apache::lucene::util::fst::PairOutputs$Pair PairOutputs::newPair(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::org::apache::lucene::util::fst::PairOutputs$Pair(env->callObjectMethod(this$, mids$[mid_newPair_b457b73d], a0.this$, a1.this$));
          }

          ::java::lang::String PairOutputs::outputToString(const ::org::apache::lucene::util::fst::PairOutputs$Pair & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_93c1f663], a0.this$));
          }

          jlong PairOutputs::ramBytesUsed(const ::org::apache::lucene::util::fst::PairOutputs$Pair & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_53ec2f78], a0.this$);
          }

          ::org::apache::lucene::util::fst::PairOutputs$Pair PairOutputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::org::apache::lucene::util::fst::PairOutputs$Pair(env->callObjectMethod(this$, mids$[mid_read_49c65b36], a0.this$));
          }

          void PairOutputs::skipOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skipOutput_f5d6a551], a0.this$);
          }

          ::org::apache::lucene::util::fst::PairOutputs$Pair PairOutputs::subtract(const ::org::apache::lucene::util::fst::PairOutputs$Pair & a0, const ::org::apache::lucene::util::fst::PairOutputs$Pair & a1) const
          {
            return ::org::apache::lucene::util::fst::PairOutputs$Pair(env->callObjectMethod(this$, mids$[mid_subtract_f30532b1], a0.this$, a1.this$));
          }

          ::java::lang::String PairOutputs::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          void PairOutputs::write(const ::org::apache::lucene::util::fst::PairOutputs$Pair & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_3e3045f1], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_PairOutputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PairOutputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PairOutputs_of_(t_PairOutputs *self, PyObject *args);
          static int t_PairOutputs_init_(t_PairOutputs *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PairOutputs_add(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_common(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_getNoOutput(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_newPair(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_outputToString(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_ramBytesUsed(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_read(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_skipOutput(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_subtract(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_toString(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_write(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_get__noOutput(t_PairOutputs *self, void *data);
          static PyObject *t_PairOutputs_get__parameters_(t_PairOutputs *self, void *data);
          static PyGetSetDef t_PairOutputs__fields_[] = {
            DECLARE_GET_FIELD(t_PairOutputs, noOutput),
            DECLARE_GET_FIELD(t_PairOutputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PairOutputs__methods_[] = {
            DECLARE_METHOD(t_PairOutputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PairOutputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PairOutputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, add, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, common, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, getNoOutput, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, newPair, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, outputToString, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, read, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, skipOutput, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, toString, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PairOutputs, t_PairOutputs, ::org::apache::lucene::util::fst::Outputs, PairOutputs, t_PairOutputs_init_, 0, 0, t_PairOutputs__fields_, 0, 0);
          PyObject *t_PairOutputs::wrap_Object(const PairOutputs& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_PairOutputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PairOutputs *self = (t_PairOutputs *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_PairOutputs::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_PairOutputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PairOutputs *self = (t_PairOutputs *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_PairOutputs::install(PyObject *module)
          {
            installType(&PY_TYPE(PairOutputs), module, "PairOutputs", 0);
            PyDict_SetItemString(PY_TYPE(PairOutputs).tp_dict, "Pair", make_descriptor(&PY_TYPE(PairOutputs$Pair)));
          }

          void t_PairOutputs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PairOutputs).tp_dict, "class_", make_descriptor(PairOutputs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PairOutputs).tp_dict, "wrapfn_", make_descriptor(t_PairOutputs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PairOutputs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PairOutputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PairOutputs::initializeClass, 1)))
              return NULL;
            return t_PairOutputs::wrap_Object(PairOutputs(((t_PairOutputs *) arg)->object.this$));
          }
          static PyObject *t_PairOutputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PairOutputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PairOutputs_of_(t_PairOutputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_PairOutputs_init_(t_PairOutputs *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::Outputs a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::Outputs a1((jobject) NULL);
            PyTypeObject **p1;
            PairOutputs object((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::Outputs::initializeClass, ::org::apache::lucene::util::fst::Outputs::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_Outputs::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_Outputs::parameters_))
            {
              INT_CALL(object = PairOutputs(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PairOutputs_add(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::PairOutputs$Pair a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::PairOutputs$Pair result((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_PairOutputs_common(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::PairOutputs$Pair a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::PairOutputs$Pair result((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "common", args, 2);
          }

          static PyObject *t_PairOutputs_getNoOutput(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNoOutput());
              return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "getNoOutput", args, 2);
          }

          static PyObject *t_PairOutputs_newPair(t_PairOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::org::apache::lucene::util::fst::PairOutputs$Pair result((jobject) NULL);

            if (!parseArgs(args, "OO", self->parameters[0], self->parameters[1], &a0, &a1))
            {
              OBJ_CALL(result = self->object.newPair(a0, a1));
              return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            PyErr_SetArgsError((PyObject *) self, "newPair", args);
            return NULL;
          }

          static PyObject *t_PairOutputs_outputToString(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "outputToString", args, 2);
          }

          static PyObject *t_PairOutputs_ramBytesUsed(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair a0((jobject) NULL);
            PyTypeObject **p0;
            jlong result;

            if (!parseArgs(args, "K", ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_))
            {
              OBJ_CALL(result = self->object.ramBytesUsed(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_PairOutputs_read(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::fst::PairOutputs$Pair result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_PairOutputs_skipOutput(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.skipOutput(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "skipOutput", args, 2);
          }

          static PyObject *t_PairOutputs_subtract(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::PairOutputs$Pair a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::PairOutputs$Pair result((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "subtract", args, 2);
          }

          static PyObject *t_PairOutputs_toString(t_PairOutputs *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_PairOutputs_write(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "Kk", ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "write", args, 2);
          }
          static PyObject *t_PairOutputs_get__parameters_(t_PairOutputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_PairOutputs_get__noOutput(t_PairOutputs *self, void *data)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LambdaDF.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LambdaDF::class$ = NULL;
          jmethodID *LambdaDF::mids$ = NULL;
          bool LambdaDF::live$ = false;

          jclass LambdaDF::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LambdaDF");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_eddc6641] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_lambda_cb225ea0] = env->getMethodID(cls, "lambda", "(Lorg/apache/lucene/search/similarities/BasicStats;)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LambdaDF::LambdaDF() : ::org::apache::lucene::search::similarities::Lambda(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation LambdaDF::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_eddc6641], a0.this$));
          }

          jfloat LambdaDF::lambda(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_lambda_cb225ea0], a0.this$);
          }

          ::java::lang::String LambdaDF::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LambdaDF_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LambdaDF_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LambdaDF_init_(t_LambdaDF *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LambdaDF_explain(t_LambdaDF *self, PyObject *args);
          static PyObject *t_LambdaDF_lambda(t_LambdaDF *self, PyObject *args);
          static PyObject *t_LambdaDF_toString(t_LambdaDF *self, PyObject *args);

          static PyMethodDef t_LambdaDF__methods_[] = {
            DECLARE_METHOD(t_LambdaDF, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LambdaDF, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LambdaDF, explain, METH_VARARGS),
            DECLARE_METHOD(t_LambdaDF, lambda, METH_VARARGS),
            DECLARE_METHOD(t_LambdaDF, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LambdaDF, t_LambdaDF, ::org::apache::lucene::search::similarities::Lambda, LambdaDF, t_LambdaDF_init_, 0, 0, 0, 0, 0);

          void t_LambdaDF::install(PyObject *module)
          {
            installType(&PY_TYPE(LambdaDF), module, "LambdaDF", 0);
          }

          void t_LambdaDF::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LambdaDF).tp_dict, "class_", make_descriptor(LambdaDF::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LambdaDF).tp_dict, "wrapfn_", make_descriptor(t_LambdaDF::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LambdaDF).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LambdaDF_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LambdaDF::initializeClass, 1)))
              return NULL;
            return t_LambdaDF::wrap_Object(LambdaDF(((t_LambdaDF *) arg)->object.this$));
          }
          static PyObject *t_LambdaDF_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LambdaDF::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LambdaDF_init_(t_LambdaDF *self, PyObject *args, PyObject *kwds)
          {
            LambdaDF object((jobject) NULL);

            INT_CALL(object = LambdaDF());
            self->object = object;

            return 0;
          }

          static PyObject *t_LambdaDF_explain(t_LambdaDF *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.explain(a0));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LambdaDF), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_LambdaDF_lambda(t_LambdaDF *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.lambda(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(LambdaDF), (PyObject *) self, "lambda", args, 2);
          }

          static PyObject *t_LambdaDF_toString(t_LambdaDF *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LambdaDF), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/ConstantScoreQueryBuilder.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilderFactory.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *ConstantScoreQueryBuilder::class$ = NULL;
            jmethodID *ConstantScoreQueryBuilder::mids$ = NULL;
            bool ConstantScoreQueryBuilder::live$ = false;

            jclass ConstantScoreQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/ConstantScoreQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_08e51f07] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/FilterBuilderFactory;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ConstantScoreQueryBuilder::ConstantScoreQueryBuilder(const ::org::apache::lucene::queryparser::xml::FilterBuilderFactory & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_08e51f07, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_ConstantScoreQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ConstantScoreQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ConstantScoreQueryBuilder_init_(t_ConstantScoreQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_ConstantScoreQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_ConstantScoreQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ConstantScoreQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ConstantScoreQueryBuilder, t_ConstantScoreQueryBuilder, ::java::lang::Object, ConstantScoreQueryBuilder, t_ConstantScoreQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_ConstantScoreQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(ConstantScoreQueryBuilder), module, "ConstantScoreQueryBuilder", 0);
            }

            void t_ConstantScoreQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ConstantScoreQueryBuilder).tp_dict, "class_", make_descriptor(ConstantScoreQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ConstantScoreQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_ConstantScoreQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ConstantScoreQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ConstantScoreQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ConstantScoreQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_ConstantScoreQueryBuilder::wrap_Object(ConstantScoreQueryBuilder(((t_ConstantScoreQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_ConstantScoreQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ConstantScoreQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ConstantScoreQueryBuilder_init_(t_ConstantScoreQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::FilterBuilderFactory a0((jobject) NULL);
              ConstantScoreQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::FilterBuilderFactory::initializeClass, &a0))
              {
                INT_CALL(object = ConstantScoreQueryBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OfflineSorter$ByteSequencesReader.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/io/File.h"
#include "java/io/DataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OfflineSorter$ByteSequencesReader::class$ = NULL;
        jmethodID *OfflineSorter$ByteSequencesReader::mids$ = NULL;
        bool OfflineSorter$ByteSequencesReader::live$ = false;

        jclass OfflineSorter$ByteSequencesReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OfflineSorter$ByteSequencesReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
            mids$[mid_init$_e051d6a6] = env->getMethodID(cls, "<init>", "(Ljava/io/DataInput;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_read_dab10e7e] = env->getMethodID(cls, "read", "()[B");
            mids$[mid_read_96c112d0] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/util/BytesRefBuilder;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OfflineSorter$ByteSequencesReader::OfflineSorter$ByteSequencesReader(const ::java::io::File & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

        OfflineSorter$ByteSequencesReader::OfflineSorter$ByteSequencesReader(const ::java::io::DataInput & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e051d6a6, a0.this$)) {}

        void OfflineSorter$ByteSequencesReader::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        JArray< jbyte > OfflineSorter$ByteSequencesReader::read() const
        {
          return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_read_dab10e7e]));
        }

        jboolean OfflineSorter$ByteSequencesReader::read(const ::org::apache::lucene::util::BytesRefBuilder & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_read_96c112d0], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OfflineSorter$ByteSequencesReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OfflineSorter$ByteSequencesReader_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OfflineSorter$ByteSequencesReader_init_(t_OfflineSorter$ByteSequencesReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OfflineSorter$ByteSequencesReader_close(t_OfflineSorter$ByteSequencesReader *self);
        static PyObject *t_OfflineSorter$ByteSequencesReader_read(t_OfflineSorter$ByteSequencesReader *self, PyObject *args);

        static PyMethodDef t_OfflineSorter$ByteSequencesReader__methods_[] = {
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesReader, close, METH_NOARGS),
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesReader, read, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OfflineSorter$ByteSequencesReader, t_OfflineSorter$ByteSequencesReader, ::java::lang::Object, OfflineSorter$ByteSequencesReader, t_OfflineSorter$ByteSequencesReader_init_, 0, 0, 0, 0, 0);

        void t_OfflineSorter$ByteSequencesReader::install(PyObject *module)
        {
          installType(&PY_TYPE(OfflineSorter$ByteSequencesReader), module, "OfflineSorter$ByteSequencesReader", 0);
        }

        void t_OfflineSorter$ByteSequencesReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OfflineSorter$ByteSequencesReader).tp_dict, "class_", make_descriptor(OfflineSorter$ByteSequencesReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OfflineSorter$ByteSequencesReader).tp_dict, "wrapfn_", make_descriptor(t_OfflineSorter$ByteSequencesReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OfflineSorter$ByteSequencesReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OfflineSorter$ByteSequencesReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OfflineSorter$ByteSequencesReader::initializeClass, 1)))
            return NULL;
          return t_OfflineSorter$ByteSequencesReader::wrap_Object(OfflineSorter$ByteSequencesReader(((t_OfflineSorter$ByteSequencesReader *) arg)->object.this$));
        }
        static PyObject *t_OfflineSorter$ByteSequencesReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OfflineSorter$ByteSequencesReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OfflineSorter$ByteSequencesReader_init_(t_OfflineSorter$ByteSequencesReader *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::File a0((jobject) NULL);
              OfflineSorter$ByteSequencesReader object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                INT_CALL(object = OfflineSorter$ByteSequencesReader(a0));
                self->object = object;
                break;
              }
            }
            {
              ::java::io::DataInput a0((jobject) NULL);
              OfflineSorter$ByteSequencesReader object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::DataInput::initializeClass, &a0))
              {
                INT_CALL(object = OfflineSorter$ByteSequencesReader(a0));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OfflineSorter$ByteSequencesReader_close(t_OfflineSorter$ByteSequencesReader *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_OfflineSorter$ByteSequencesReader_read(t_OfflineSorter$ByteSequencesReader *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              JArray< jbyte > result((jobject) NULL);
              OBJ_CALL(result = self->object.read());
              return result.wrap();
            }
            break;
           case 1:
            {
              ::org::apache::lucene::util::BytesRefBuilder a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRefBuilder::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.read(a0));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "read", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/HyphenationTree.h"
#include "java/util/ArrayList.h"
#include "org/apache/lucene/analysis/compound/hyphenation/Hyphenation.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/io/File.h"
#include "java/lang/Object.h"
#include "java/io/PrintStream.h"
#include "org/apache/lucene/analysis/compound/hyphenation/PatternConsumer.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *HyphenationTree::class$ = NULL;
            jmethodID *HyphenationTree::mids$ = NULL;
            bool HyphenationTree::live$ = false;

            jclass HyphenationTree::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/HyphenationTree");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_addClass_5fdc3f48] = env->getMethodID(cls, "addClass", "(Ljava/lang/String;)V");
                mids$[mid_addException_069f7243] = env->getMethodID(cls, "addException", "(Ljava/lang/String;Ljava/util/ArrayList;)V");
                mids$[mid_addPattern_4a264742] = env->getMethodID(cls, "addPattern", "(Ljava/lang/String;Ljava/lang/String;)V");
                mids$[mid_findPattern_97a5258f] = env->getMethodID(cls, "findPattern", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_hyphenate_b8db7bec] = env->getMethodID(cls, "hyphenate", "(Ljava/lang/String;II)Lorg/apache/lucene/analysis/compound/hyphenation/Hyphenation;");
                mids$[mid_hyphenate_bc347fb6] = env->getMethodID(cls, "hyphenate", "([CIIII)Lorg/apache/lucene/analysis/compound/hyphenation/Hyphenation;");
                mids$[mid_loadPatterns_c3dacf57] = env->getMethodID(cls, "loadPatterns", "(Ljava/io/File;)V");
                mids$[mid_printStats_1b7c898b] = env->getMethodID(cls, "printStats", "(Ljava/io/PrintStream;)V");
                mids$[mid_getValues_b4292e98] = env->getMethodID(cls, "getValues", "(I)[B");
                mids$[mid_unpackValues_141401b3] = env->getMethodID(cls, "unpackValues", "(I)Ljava/lang/String;");
                mids$[mid_hstrcmp_aa5dc2ed] = env->getMethodID(cls, "hstrcmp", "([CI[CI)I");
                mids$[mid_packValues_5fdc3f57] = env->getMethodID(cls, "packValues", "(Ljava/lang/String;)I");
                mids$[mid_searchPatterns_fa7f9f9d] = env->getMethodID(cls, "searchPatterns", "([CI[B)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            HyphenationTree::HyphenationTree() : ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            void HyphenationTree::addClass(const ::java::lang::String & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addClass_5fdc3f48], a0.this$);
            }

            void HyphenationTree::addException(const ::java::lang::String & a0, const ::java::util::ArrayList & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addException_069f7243], a0.this$, a1.this$);
            }

            void HyphenationTree::addPattern(const ::java::lang::String & a0, const ::java::lang::String & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addPattern_4a264742], a0.this$, a1.this$);
            }

            ::java::lang::String HyphenationTree::findPattern(const ::java::lang::String & a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_findPattern_97a5258f], a0.this$));
            }

            ::org::apache::lucene::analysis::compound::hyphenation::Hyphenation HyphenationTree::hyphenate(const ::java::lang::String & a0, jint a1, jint a2) const
            {
              return ::org::apache::lucene::analysis::compound::hyphenation::Hyphenation(env->callObjectMethod(this$, mids$[mid_hyphenate_b8db7bec], a0.this$, a1, a2));
            }

            ::org::apache::lucene::analysis::compound::hyphenation::Hyphenation HyphenationTree::hyphenate(const JArray< jchar > & a0, jint a1, jint a2, jint a3, jint a4) const
            {
              return ::org::apache::lucene::analysis::compound::hyphenation::Hyphenation(env->callObjectMethod(this$, mids$[mid_hyphenate_bc347fb6], a0.this$, a1, a2, a3, a4));
            }

            void HyphenationTree::loadPatterns(const ::java::io::File & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_loadPatterns_c3dacf57], a0.this$);
            }

            void HyphenationTree::printStats(const ::java::io::PrintStream & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_printStats_1b7c898b], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_HyphenationTree_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_HyphenationTree_instance_(PyTypeObject *type, PyObject *arg);
            static int t_HyphenationTree_init_(t_HyphenationTree *self, PyObject *args, PyObject *kwds);
            static PyObject *t_HyphenationTree_addClass(t_HyphenationTree *self, PyObject *arg);
            static PyObject *t_HyphenationTree_addException(t_HyphenationTree *self, PyObject *args);
            static PyObject *t_HyphenationTree_addPattern(t_HyphenationTree *self, PyObject *args);
            static PyObject *t_HyphenationTree_findPattern(t_HyphenationTree *self, PyObject *arg);
            static PyObject *t_HyphenationTree_hyphenate(t_HyphenationTree *self, PyObject *args);
            static PyObject *t_HyphenationTree_loadPatterns(t_HyphenationTree *self, PyObject *arg);
            static PyObject *t_HyphenationTree_printStats(t_HyphenationTree *self, PyObject *args);

            static PyMethodDef t_HyphenationTree__methods_[] = {
              DECLARE_METHOD(t_HyphenationTree, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_HyphenationTree, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_HyphenationTree, addClass, METH_O),
              DECLARE_METHOD(t_HyphenationTree, addException, METH_VARARGS),
              DECLARE_METHOD(t_HyphenationTree, addPattern, METH_VARARGS),
              DECLARE_METHOD(t_HyphenationTree, findPattern, METH_O),
              DECLARE_METHOD(t_HyphenationTree, hyphenate, METH_VARARGS),
              DECLARE_METHOD(t_HyphenationTree, loadPatterns, METH_O),
              DECLARE_METHOD(t_HyphenationTree, printStats, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(HyphenationTree, t_HyphenationTree, ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree, HyphenationTree, t_HyphenationTree_init_, 0, 0, 0, 0, 0);

            void t_HyphenationTree::install(PyObject *module)
            {
              installType(&PY_TYPE(HyphenationTree), module, "HyphenationTree", 0);
            }

            void t_HyphenationTree::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(HyphenationTree).tp_dict, "class_", make_descriptor(HyphenationTree::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(HyphenationTree).tp_dict, "wrapfn_", make_descriptor(t_HyphenationTree::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(HyphenationTree).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_HyphenationTree_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, HyphenationTree::initializeClass, 1)))
                return NULL;
              return t_HyphenationTree::wrap_Object(HyphenationTree(((t_HyphenationTree *) arg)->object.this$));
            }
            static PyObject *t_HyphenationTree_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, HyphenationTree::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_HyphenationTree_init_(t_HyphenationTree *self, PyObject *args, PyObject *kwds)
            {
              HyphenationTree object((jobject) NULL);

              INT_CALL(object = HyphenationTree());
              self->object = object;

              return 0;
            }

            static PyObject *t_HyphenationTree_addClass(t_HyphenationTree *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(self->object.addClass(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addClass", arg);
              return NULL;
            }

            static PyObject *t_HyphenationTree_addException(t_HyphenationTree *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::ArrayList a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "sK", ::java::util::ArrayList::initializeClass, &a0, &a1, &p1, ::java::util::t_ArrayList::parameters_))
              {
                OBJ_CALL(self->object.addException(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addException", args);
              return NULL;
            }

            static PyObject *t_HyphenationTree_addPattern(t_HyphenationTree *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(self->object.addPattern(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addPattern", args);
              return NULL;
            }

            static PyObject *t_HyphenationTree_findPattern(t_HyphenationTree *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.findPattern(a0));
                return j2p(result);
              }

              PyErr_SetArgsError((PyObject *) self, "findPattern", arg);
              return NULL;
            }

            static PyObject *t_HyphenationTree_hyphenate(t_HyphenationTree *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 3:
                {
                  ::java::lang::String a0((jobject) NULL);
                  jint a1;
                  jint a2;
                  ::org::apache::lucene::analysis::compound::hyphenation::Hyphenation result((jobject) NULL);

                  if (!parseArgs(args, "sII", &a0, &a1, &a2))
                  {
                    OBJ_CALL(result = self->object.hyphenate(a0, a1, a2));
                    return ::org::apache::lucene::analysis::compound::hyphenation::t_Hyphenation::wrap_Object(result);
                  }
                }
                break;
               case 5:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint a1;
                  jint a2;
                  jint a3;
                  jint a4;
                  ::org::apache::lucene::analysis::compound::hyphenation::Hyphenation result((jobject) NULL);

                  if (!parseArgs(args, "[CIIII", &a0, &a1, &a2, &a3, &a4))
                  {
                    OBJ_CALL(result = self->object.hyphenate(a0, a1, a2, a3, a4));
                    return ::org::apache::lucene::analysis::compound::hyphenation::t_Hyphenation::wrap_Object(result);
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "hyphenate", args);
              return NULL;
            }

            static PyObject *t_HyphenationTree_loadPatterns(t_HyphenationTree *self, PyObject *arg)
            {
              ::java::io::File a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::File::initializeClass, &a0))
              {
                OBJ_CALL(self->object.loadPatterns(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "loadPatterns", arg);
              return NULL;
            }

            static PyObject *t_HyphenationTree_printStats(t_HyphenationTree *self, PyObject *args)
            {
              ::java::io::PrintStream a0((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::PrintStream::initializeClass, &a0))
              {
                OBJ_CALL(self->object.printStats(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(HyphenationTree), (PyObject *) self, "printStats", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/QueryParser.h"
#include "java/util/ArrayList.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/parser/QueryParserTokenManager.h"
#include "org/apache/lucene/queryparser/surround/parser/QueryParserConstants.h"
#include "org/apache/lucene/queryparser/surround/parser/ParseException.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/surround/parser/CharStream.h"
#include "org/apache/lucene/queryparser/surround/parser/Token.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *QueryParser::class$ = NULL;
            jmethodID *QueryParser::mids$ = NULL;
            jfieldID *QueryParser::fids$ = NULL;
            bool QueryParser::live$ = false;

            jclass QueryParser::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/QueryParser");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_c0dff4ef] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/parser/QueryParserTokenManager;)V");
                mids$[mid_init$_5bfa6473] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/parser/CharStream;)V");
                mids$[mid_AndQuery_26528772] = env->getMethodID(cls, "AndQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_FieldsQuery_26528772] = env->getMethodID(cls, "FieldsQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_FieldsQueryList_87851566] = env->getMethodID(cls, "FieldsQueryList", "()Ljava/util/List;");
                mids$[mid_NQuery_26528772] = env->getMethodID(cls, "NQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_NotQuery_26528772] = env->getMethodID(cls, "NotQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_OptionalFields_21eb51b0] = env->getMethodID(cls, "OptionalFields", "()Ljava/util/ArrayList;");
                mids$[mid_OptionalWeights_5e4f727f] = env->getMethodID(cls, "OptionalWeights", "(Lorg/apache/lucene/queryparser/surround/query/SrndQuery;)V");
                mids$[mid_OrQuery_26528772] = env->getMethodID(cls, "OrQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_PrefixOperatorQuery_26528772] = env->getMethodID(cls, "PrefixOperatorQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_PrimaryQuery_26528772] = env->getMethodID(cls, "PrimaryQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_ReInit_c0dff4ef] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/surround/parser/QueryParserTokenManager;)V");
                mids$[mid_ReInit_5bfa6473] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/surround/parser/CharStream;)V");
                mids$[mid_SimpleTerm_26528772] = env->getMethodID(cls, "SimpleTerm", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_TopSrndQuery_26528772] = env->getMethodID(cls, "TopSrndQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_WQuery_26528772] = env->getMethodID(cls, "WQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_disable_tracing_54c6a166] = env->getMethodID(cls, "disable_tracing", "()V");
                mids$[mid_enable_tracing_54c6a166] = env->getMethodID(cls, "enable_tracing", "()V");
                mids$[mid_generateParseException_dc2be8ae] = env->getMethodID(cls, "generateParseException", "()Lorg/apache/lucene/queryparser/surround/parser/ParseException;");
                mids$[mid_getNextToken_353aefd6] = env->getMethodID(cls, "getNextToken", "()Lorg/apache/lucene/queryparser/surround/parser/Token;");
                mids$[mid_getToken_1162c488] = env->getMethodID(cls, "getToken", "(I)Lorg/apache/lucene/queryparser/surround/parser/Token;");
                mids$[mid_parse_eb9ff21c] = env->getStaticMethodID(cls, "parse", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_parse2_eb9ff21c] = env->getMethodID(cls, "parse2", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_getOpDistance_5fdc3f57] = env->getStaticMethodID(cls, "getOpDistance", "(Ljava/lang/String;)I");
                mids$[mid_getPrefixQuery_484af57f] = env->getMethodID(cls, "getPrefixQuery", "(Ljava/lang/String;Z)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_getFieldsQuery_4e036592] = env->getMethodID(cls, "getFieldsQuery", "(Lorg/apache/lucene/queryparser/surround/query/SrndQuery;Ljava/util/ArrayList;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_getOrQuery_685e421b] = env->getMethodID(cls, "getOrQuery", "(Ljava/util/List;ZLorg/apache/lucene/queryparser/surround/parser/Token;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_getAndQuery_685e421b] = env->getMethodID(cls, "getAndQuery", "(Ljava/util/List;ZLorg/apache/lucene/queryparser/surround/parser/Token;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_getNotQuery_3a2a55ec] = env->getMethodID(cls, "getNotQuery", "(Ljava/util/List;Lorg/apache/lucene/queryparser/surround/parser/Token;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_checkDistanceSubQueries_657c42bd] = env->getStaticMethodID(cls, "checkDistanceSubQueries", "(Lorg/apache/lucene/queryparser/surround/query/DistanceQuery;Ljava/lang/String;)V");
                mids$[mid_getDistanceQuery_b401ccf2] = env->getMethodID(cls, "getDistanceQuery", "(Ljava/util/List;ZLorg/apache/lucene/queryparser/surround/parser/Token;Z)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_getTermQuery_484af57f] = env->getMethodID(cls, "getTermQuery", "(Ljava/lang/String;Z)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_allowedSuffix_5fdc3f44] = env->getMethodID(cls, "allowedSuffix", "(Ljava/lang/String;)Z");
                mids$[mid_allowedTruncation_5fdc3f44] = env->getMethodID(cls, "allowedTruncation", "(Ljava/lang/String;)Z");
                mids$[mid_getTruncQuery_eb9ff21c] = env->getMethodID(cls, "getTruncQuery", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");

                fids$ = new jfieldID[max_fid];
                fids$[fid_jj_nt] = env->getFieldID(cls, "jj_nt", "Lorg/apache/lucene/queryparser/surround/parser/Token;");
                fids$[fid_token] = env->getFieldID(cls, "token", "Lorg/apache/lucene/queryparser/surround/parser/Token;");
                fids$[fid_token_source] = env->getFieldID(cls, "token_source", "Lorg/apache/lucene/queryparser/surround/parser/QueryParserTokenManager;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryParser::QueryParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            QueryParser::QueryParser(const ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c0dff4ef, a0.this$)) {}

            QueryParser::QueryParser(const ::org::apache::lucene::queryparser::surround::parser::CharStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5bfa6473, a0.this$)) {}

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::AndQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_AndQuery_26528772]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::FieldsQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_FieldsQuery_26528772]));
            }

            ::java::util::List QueryParser::FieldsQueryList() const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_FieldsQueryList_87851566]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::NQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_NQuery_26528772]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::NotQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_NotQuery_26528772]));
            }

            ::java::util::ArrayList QueryParser::OptionalFields() const
            {
              return ::java::util::ArrayList(env->callObjectMethod(this$, mids$[mid_OptionalFields_21eb51b0]));
            }

            void QueryParser::OptionalWeights(const ::org::apache::lucene::queryparser::surround::query::SrndQuery & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_OptionalWeights_5e4f727f], a0.this$);
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::OrQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_OrQuery_26528772]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::PrefixOperatorQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_PrefixOperatorQuery_26528772]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::PrimaryQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_PrimaryQuery_26528772]));
            }

            void QueryParser::ReInit(const ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_ReInit_c0dff4ef], a0.this$);
            }

            void QueryParser::ReInit(const ::org::apache::lucene::queryparser::surround::parser::CharStream & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_ReInit_5bfa6473], a0.this$);
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::SimpleTerm() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_SimpleTerm_26528772]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::TopSrndQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_TopSrndQuery_26528772]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::WQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_WQuery_26528772]));
            }

            void QueryParser::disable_tracing() const
            {
              env->callVoidMethod(this$, mids$[mid_disable_tracing_54c6a166]);
            }

            void QueryParser::enable_tracing() const
            {
              env->callVoidMethod(this$, mids$[mid_enable_tracing_54c6a166]);
            }

            ::org::apache::lucene::queryparser::surround::parser::ParseException QueryParser::generateParseException() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::ParseException(env->callObjectMethod(this$, mids$[mid_generateParseException_dc2be8ae]));
            }

            ::org::apache::lucene::queryparser::surround::parser::Token QueryParser::getNextToken() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::Token(env->callObjectMethod(this$, mids$[mid_getNextToken_353aefd6]));
            }

            ::org::apache::lucene::queryparser::surround::parser::Token QueryParser::getToken(jint a0) const
            {
              return ::org::apache::lucene::queryparser::surround::parser::Token(env->callObjectMethod(this$, mids$[mid_getToken_1162c488], a0));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::parse(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callStaticObjectMethod(cls, mids$[mid_parse_eb9ff21c], a0.this$));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::parse2(const ::java::lang::String & a0) const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_parse2_eb9ff21c], a0.this$));
            }

            ::org::apache::lucene::queryparser::surround::parser::Token QueryParser::_get_jj_nt() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::Token(env->getObjectField(this$, fids$[fid_jj_nt]));
            }

            void QueryParser::_set_jj_nt(const ::org::apache::lucene::queryparser::surround::parser::Token & a0) const
            {
              env->setObjectField(this$, fids$[fid_jj_nt], a0.this$);
            }

            ::org::apache::lucene::queryparser::surround::parser::Token QueryParser::_get_token() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::Token(env->getObjectField(this$, fids$[fid_token]));
            }

            void QueryParser::_set_token(const ::org::apache::lucene::queryparser::surround::parser::Token & a0) const
            {
              env->setObjectField(this$, fids$[fid_token], a0.this$);
            }

            ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager QueryParser::_get_token_source() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager(env->getObjectField(this$, fids$[fid_token_source]));
            }

            void QueryParser::_set_token_source(const ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager & a0) const
            {
              env->setObjectField(this$, fids$[fid_token_source], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_QueryParser_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParser_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryParser_init_(t_QueryParser *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryParser_AndQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_FieldsQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_FieldsQueryList(t_QueryParser *self);
            static PyObject *t_QueryParser_NQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_NotQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_OptionalFields(t_QueryParser *self);
            static PyObject *t_QueryParser_OptionalWeights(t_QueryParser *self, PyObject *arg);
            static PyObject *t_QueryParser_OrQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_PrefixOperatorQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_PrimaryQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_ReInit(t_QueryParser *self, PyObject *args);
            static PyObject *t_QueryParser_SimpleTerm(t_QueryParser *self);
            static PyObject *t_QueryParser_TopSrndQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_WQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_disable_tracing(t_QueryParser *self);
            static PyObject *t_QueryParser_enable_tracing(t_QueryParser *self);
            static PyObject *t_QueryParser_generateParseException(t_QueryParser *self);
            static PyObject *t_QueryParser_getNextToken(t_QueryParser *self);
            static PyObject *t_QueryParser_getToken(t_QueryParser *self, PyObject *arg);
            static PyObject *t_QueryParser_parse(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParser_parse2(t_QueryParser *self, PyObject *arg);
            static PyObject *t_QueryParser_get__jj_nt(t_QueryParser *self, void *data);
            static int t_QueryParser_set__jj_nt(t_QueryParser *self, PyObject *arg, void *data);
            static PyObject *t_QueryParser_get__token(t_QueryParser *self, void *data);
            static int t_QueryParser_set__token(t_QueryParser *self, PyObject *arg, void *data);
            static PyObject *t_QueryParser_get__token_source(t_QueryParser *self, void *data);
            static int t_QueryParser_set__token_source(t_QueryParser *self, PyObject *arg, void *data);

            static PyObject *t_QueryParser_get__nextToken(t_QueryParser *self, void *data);
            static PyGetSetDef t_QueryParser__fields_[] = {
              DECLARE_GETSET_FIELD(t_QueryParser, jj_nt),
              DECLARE_GETSET_FIELD(t_QueryParser, token),
              DECLARE_GETSET_FIELD(t_QueryParser, token_source),
              DECLARE_GET_FIELD(t_QueryParser, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryParser__methods_[] = {
              DECLARE_METHOD(t_QueryParser, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParser, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParser, AndQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, FieldsQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, FieldsQueryList, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, NQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, NotQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, OptionalFields, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, OptionalWeights, METH_O),
              DECLARE_METHOD(t_QueryParser, OrQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, PrefixOperatorQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, PrimaryQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, ReInit, METH_VARARGS),
              DECLARE_METHOD(t_QueryParser, SimpleTerm, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, TopSrndQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, WQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, disable_tracing, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, enable_tracing, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, generateParseException, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, getToken, METH_O),
              DECLARE_METHOD(t_QueryParser, parse, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParser, parse2, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryParser, t_QueryParser, ::java::lang::Object, QueryParser, t_QueryParser_init_, 0, 0, t_QueryParser__fields_, 0, 0);

            void t_QueryParser::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryParser), module, "QueryParser", 0);
            }

            void t_QueryParser::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryParser).tp_dict, "class_", make_descriptor(QueryParser::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryParser).tp_dict, "wrapfn_", make_descriptor(t_QueryParser::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryParser_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryParser::initializeClass, 1)))
                return NULL;
              return t_QueryParser::wrap_Object(QueryParser(((t_QueryParser *) arg)->object.this$));
            }
            static PyObject *t_QueryParser_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryParser::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryParser_init_(t_QueryParser *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  QueryParser object((jobject) NULL);

                  INT_CALL(object = QueryParser());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager a0((jobject) NULL);
                  QueryParser object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryParser(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::queryparser::surround::parser::CharStream a0((jobject) NULL);
                  QueryParser object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::surround::parser::CharStream::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryParser(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryParser_AndQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.AndQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_FieldsQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.FieldsQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_FieldsQueryList(t_QueryParser *self)
            {
              ::java::util::List result((jobject) NULL);
              OBJ_CALL(result = self->object.FieldsQueryList());
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::queryparser::surround::query::PY_TYPE(SrndQuery));
            }

            static PyObject *t_QueryParser_NQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.NQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_NotQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.NotQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_OptionalFields(t_QueryParser *self)
            {
              ::java::util::ArrayList result((jobject) NULL);
              OBJ_CALL(result = self->object.OptionalFields());
              return ::java::util::t_ArrayList::wrap_Object(result, &::java::lang::PY_TYPE(String));
            }

            static PyObject *t_QueryParser_OptionalWeights(t_QueryParser *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::query::SrndQuery::initializeClass, &a0))
              {
                OBJ_CALL(self->object.OptionalWeights(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "OptionalWeights", arg);
              return NULL;
            }

            static PyObject *t_QueryParser_OrQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.OrQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_PrefixOperatorQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.PrefixOperatorQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_PrimaryQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.PrimaryQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_ReInit(t_QueryParser *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager a0((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager::initializeClass, &a0))
                  {
                    OBJ_CALL(self->object.ReInit(a0));
                    Py_RETURN_NONE;
                  }
                }
                {
                  ::org::apache::lucene::queryparser::surround::parser::CharStream a0((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::surround::parser::CharStream::initializeClass, &a0))
                  {
                    OBJ_CALL(self->object.ReInit(a0));
                    Py_RETURN_NONE;
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "ReInit", args);
              return NULL;
            }

            static PyObject *t_QueryParser_SimpleTerm(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.SimpleTerm());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_TopSrndQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.TopSrndQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_WQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.WQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_disable_tracing(t_QueryParser *self)
            {
              OBJ_CALL(self->object.disable_tracing());
              Py_RETURN_NONE;
            }

            static PyObject *t_QueryParser_enable_tracing(t_QueryParser *self)
            {
              OBJ_CALL(self->object.enable_tracing());
              Py_RETURN_NONE;
            }

            static PyObject *t_QueryParser_generateParseException(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::parser::ParseException result((jobject) NULL);
              OBJ_CALL(result = self->object.generateParseException());
              return ::org::apache::lucene::queryparser::surround::parser::t_ParseException::wrap_Object(result);
            }

            static PyObject *t_QueryParser_getNextToken(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token result((jobject) NULL);
              OBJ_CALL(result = self->object.getNextToken());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(result);
            }

            static PyObject *t_QueryParser_getToken(t_QueryParser *self, PyObject *arg)
            {
              jint a0;
              ::org::apache::lucene::queryparser::surround::parser::Token result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getToken(a0));
                return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getToken", arg);
              return NULL;
            }

            static PyObject *t_QueryParser_parse(PyTypeObject *type, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::queryparser::surround::parser::QueryParser::parse(a0));
                return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
              }

              PyErr_SetArgsError(type, "parse", arg);
              return NULL;
            }

            static PyObject *t_QueryParser_parse2(t_QueryParser *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.parse2(a0));
                return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "parse2", arg);
              return NULL;
            }

            static PyObject *t_QueryParser_get__jj_nt(t_QueryParser *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              OBJ_CALL(value = self->object._get_jj_nt());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(value);
            }
            static int t_QueryParser_set__jj_nt(t_QueryParser *self, PyObject *arg, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::parser::Token::initializeClass, &value))
              {
                INT_CALL(self->object._set_jj_nt(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "jj_nt", arg);
              return -1;
            }

            static PyObject *t_QueryParser_get__token(t_QueryParser *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              OBJ_CALL(value = self->object._get_token());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(value);
            }
            static int t_QueryParser_set__token(t_QueryParser *self, PyObject *arg, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::parser::Token::initializeClass, &value))
              {
                INT_CALL(self->object._set_token(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "token", arg);
              return -1;
            }

            static PyObject *t_QueryParser_get__token_source(t_QueryParser *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager value((jobject) NULL);
              OBJ_CALL(value = self->object._get_token_source());
              return ::org::apache::lucene::queryparser::surround::parser::t_QueryParserTokenManager::wrap_Object(value);
            }
            static int t_QueryParser_set__token_source(t_QueryParser *self, PyObject *arg, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager::initializeClass, &value))
              {
                INT_CALL(self->object._set_token_source(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "token_source", arg);
              return -1;
            }

            static PyObject *t_QueryParser_get__nextToken(t_QueryParser *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              OBJ_CALL(value = self->object.getNextToken());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/LockVerifyServer.h"
#include "java/lang/Exception.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *LockVerifyServer::class$ = NULL;
        jmethodID *LockVerifyServer::mids$ = NULL;
        bool LockVerifyServer::live$ = false;

        jclass LockVerifyServer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/LockVerifyServer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LockVerifyServer::LockVerifyServer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void LockVerifyServer::main(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_LockVerifyServer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LockVerifyServer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LockVerifyServer_init_(t_LockVerifyServer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LockVerifyServer_main(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_LockVerifyServer__methods_[] = {
          DECLARE_METHOD(t_LockVerifyServer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockVerifyServer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockVerifyServer, main, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LockVerifyServer, t_LockVerifyServer, ::java::lang::Object, LockVerifyServer, t_LockVerifyServer_init_, 0, 0, 0, 0, 0);

        void t_LockVerifyServer::install(PyObject *module)
        {
          installType(&PY_TYPE(LockVerifyServer), module, "LockVerifyServer", 0);
        }

        void t_LockVerifyServer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LockVerifyServer).tp_dict, "class_", make_descriptor(LockVerifyServer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LockVerifyServer).tp_dict, "wrapfn_", make_descriptor(t_LockVerifyServer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LockVerifyServer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LockVerifyServer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LockVerifyServer::initializeClass, 1)))
            return NULL;
          return t_LockVerifyServer::wrap_Object(LockVerifyServer(((t_LockVerifyServer *) arg)->object.this$));
        }
        static PyObject *t_LockVerifyServer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LockVerifyServer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LockVerifyServer_init_(t_LockVerifyServer *self, PyObject *args, PyObject *kwds)
        {
          LockVerifyServer object((jobject) NULL);

          INT_CALL(object = LockVerifyServer());
          self->object = object;

          return 0;
        }

        static PyObject *t_LockVerifyServer_main(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::java::lang::String > a0((jobject) NULL);

          if (!parseArg(arg, "[s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::store::LockVerifyServer::main(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "main", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKAnalyzer.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKAnalyzer::class$ = NULL;
          jmethodID *CJKAnalyzer::mids$ = NULL;
          bool CJKAnalyzer::live$ = false;
          ::java::lang::String *CJKAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass CJKAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKAnalyzer::CJKAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          CJKAnalyzer::CJKAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          CJKAnalyzer::CJKAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          CJKAnalyzer::CJKAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet CJKAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKAnalyzer_init_(t_CJKAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_CJKAnalyzer_get__defaultStopSet(t_CJKAnalyzer *self, void *data);
          static PyGetSetDef t_CJKAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_CJKAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CJKAnalyzer__methods_[] = {
            DECLARE_METHOD(t_CJKAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CJKAnalyzer, t_CJKAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, CJKAnalyzer, t_CJKAnalyzer_init_, 0, 0, t_CJKAnalyzer__fields_, 0, 0);

          void t_CJKAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKAnalyzer), module, "CJKAnalyzer", 0);
          }

          void t_CJKAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CJKAnalyzer).tp_dict, "class_", make_descriptor(CJKAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CJKAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_CJKAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CJKAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CJKAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(CJKAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*CJKAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_CJKAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKAnalyzer::initializeClass, 1)))
              return NULL;
            return t_CJKAnalyzer::wrap_Object(CJKAnalyzer(((t_CJKAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_CJKAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKAnalyzer_init_(t_CJKAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                CJKAnalyzer object((jobject) NULL);

                INT_CALL(object = CJKAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                CJKAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = CJKAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                CJKAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = CJKAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                CJKAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = CJKAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::cjk::CJKAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_CJKAnalyzer_get__defaultStopSet(t_CJKAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonList.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Class.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/ListIterator.h"
#include "java/util/List.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonList::class$ = NULL;
        jmethodID *PythonList::mids$ = NULL;
        bool PythonList::live$ = false;

        jclass PythonList::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonList");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_290588e2] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
            mids$[mid_add_f7cd74a4] = env->getMethodID(cls, "add", "(ILjava/lang/Object;)V");
            mids$[mid_addAll_9bfb3701] = env->getMethodID(cls, "addAll", "(Ljava/util/Collection;)Z");
            mids$[mid_addAll_006cd2b7] = env->getMethodID(cls, "addAll", "(ILjava/util/Collection;)Z");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
            mids$[mid_containsAll_9bfb3701] = env->getMethodID(cls, "containsAll", "(Ljava/util/Collection;)Z");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_get_29be6a55] = env->getMethodID(cls, "get", "(I)Ljava/lang/Object;");
            mids$[mid_indexOf_290588f1] = env->getMethodID(cls, "indexOf", "(Ljava/lang/Object;)I");
            mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_lastIndexOf_290588f1] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/Object;)I");
            mids$[mid_listIterator_b5be4e14] = env->getMethodID(cls, "listIterator", "()Ljava/util/ListIterator;");
            mids$[mid_listIterator_4145ee6a] = env->getMethodID(cls, "listIterator", "(I)Ljava/util/ListIterator;");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_remove_29be6a55] = env->getMethodID(cls, "remove", "(I)Ljava/lang/Object;");
            mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
            mids$[mid_removeAll_9bfb3701] = env->getMethodID(cls, "removeAll", "(Ljava/util/Collection;)Z");
            mids$[mid_retainAll_9bfb3701] = env->getMethodID(cls, "retainAll", "(Ljava/util/Collection;)Z");
            mids$[mid_set_211591b1] = env->getMethodID(cls, "set", "(ILjava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_subList_6bc635fe] = env->getMethodID(cls, "subList", "(II)Ljava/util/List;");
            mids$[mid_toArray_94e49c77] = env->getMethodID(cls, "toArray", "()[Ljava/lang/Object;");
            mids$[mid_toArray_ae67dbcf] = env->getMethodID(cls, "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonList::PythonList() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean PythonList::equals(const ::java::lang::Object & a0) const
        {
          return env->callNonvirtualBooleanMethod(this$, (jclass) ::java::lang::Object::class$->this$, ::java::lang::Object::mids$[::java::lang::Object::mid_equals_290588e2], a0.this$);
        }

        void PythonList::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        ::java::util::ListIterator PythonList::listIterator() const
        {
          return ::java::util::ListIterator(env->callObjectMethod(this$, mids$[mid_listIterator_b5be4e14]));
        }

        jlong PythonList::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonList::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }

        ::java::lang::Object PythonList::remove(jint a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_remove_29be6a55], a0));
        }

        jboolean PythonList::remove(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_remove_290588e2], a0.this$);
        }

        ::java::util::List PythonList::subList(jint a0, jint a1) const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_subList_6bc635fe], a0, a1));
        }

        JArray< ::java::lang::Object > PythonList::toArray(const JArray< ::java::lang::Object > & a0) const
        {
          return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_ae67dbcf], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonList_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonList_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonList_init_(t_PythonList *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonList_equals(t_PythonList *self, PyObject *args);
        static PyObject *t_PythonList_finalize(t_PythonList *self);
        static PyObject *t_PythonList_listIterator(t_PythonList *self);
        static PyObject *t_PythonList_pythonExtension(t_PythonList *self, PyObject *args);
        static PyObject *t_PythonList_remove(t_PythonList *self, PyObject *args);
        static PyObject *t_PythonList_subList(t_PythonList *self, PyObject *args);
        static PyObject *t_PythonList_toArray(t_PythonList *self, PyObject *arg);
        static jboolean JNICALL t_PythonList_add0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonList_add1(JNIEnv *jenv, jobject jobj, jint a0, jobject a1);
        static jboolean JNICALL t_PythonList_addAll2(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonList_addAll3(JNIEnv *jenv, jobject jobj, jint a0, jobject a1);
        static void JNICALL t_PythonList_clear4(JNIEnv *jenv, jobject jobj);
        static jboolean JNICALL t_PythonList_contains5(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonList_containsAll6(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonList_equals7(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonList_get8(JNIEnv *jenv, jobject jobj, jint a0);
        static jint JNICALL t_PythonList_indexOf9(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonList_isEmpty10(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonList_iterator11(JNIEnv *jenv, jobject jobj);
        static jint JNICALL t_PythonList_lastIndexOf12(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonList_listIterator13(JNIEnv *jenv, jobject jobj, jint a0);
        static void JNICALL t_PythonList_pythonDecRef14(JNIEnv *jenv, jobject jobj);
        static jboolean JNICALL t_PythonList_removeAll15(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonList_retainAll16(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonList_set17(JNIEnv *jenv, jobject jobj, jint a0, jobject a1);
        static jint JNICALL t_PythonList_size18(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonList_toArray19(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonList_get__self(t_PythonList *self, void *data);
        static PyGetSetDef t_PythonList__fields_[] = {
          DECLARE_GET_FIELD(t_PythonList, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonList__methods_[] = {
          DECLARE_METHOD(t_PythonList, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonList, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonList, equals, METH_VARARGS),
          DECLARE_METHOD(t_PythonList, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonList, listIterator, METH_NOARGS),
          DECLARE_METHOD(t_PythonList, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonList, remove, METH_VARARGS),
          DECLARE_METHOD(t_PythonList, subList, METH_VARARGS),
          DECLARE_METHOD(t_PythonList, toArray, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonList, t_PythonList, ::java::lang::Object, PythonList, t_PythonList_init_, get_extension_iterator, 0, t_PythonList__fields_, 0, 0);

        void t_PythonList::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonList), module, "PythonList", 1);
        }

        void t_PythonList::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonList).tp_dict, "class_", make_descriptor(PythonList::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonList).tp_dict, "wrapfn_", make_descriptor(t_PythonList::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonList).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonList::initializeClass);
          JNINativeMethod methods[] = {
            { "add", "(Ljava/lang/Object;)Z", (void *) t_PythonList_add0 },
            { "add", "(ILjava/lang/Object;)V", (void *) t_PythonList_add1 },
            { "addAll", "(Ljava/util/Collection;)Z", (void *) t_PythonList_addAll2 },
            { "addAll", "(ILjava/util/Collection;)Z", (void *) t_PythonList_addAll3 },
            { "clear", "()V", (void *) t_PythonList_clear4 },
            { "contains", "(Ljava/lang/Object;)Z", (void *) t_PythonList_contains5 },
            { "containsAll", "(Ljava/util/Collection;)Z", (void *) t_PythonList_containsAll6 },
            { "equals", "(Ljava/lang/Object;)Z", (void *) t_PythonList_equals7 },
            { "get", "(I)Ljava/lang/Object;", (void *) t_PythonList_get8 },
            { "indexOf", "(Ljava/lang/Object;)I", (void *) t_PythonList_indexOf9 },
            { "isEmpty", "()Z", (void *) t_PythonList_isEmpty10 },
            { "iterator", "()Ljava/util/Iterator;", (void *) t_PythonList_iterator11 },
            { "lastIndexOf", "(Ljava/lang/Object;)I", (void *) t_PythonList_lastIndexOf12 },
            { "listIterator", "(I)Ljava/util/ListIterator;", (void *) t_PythonList_listIterator13 },
            { "pythonDecRef", "()V", (void *) t_PythonList_pythonDecRef14 },
            { "removeAll", "(Ljava/util/Collection;)Z", (void *) t_PythonList_removeAll15 },
            { "retainAll", "(Ljava/util/Collection;)Z", (void *) t_PythonList_retainAll16 },
            { "set", "(ILjava/lang/Object;)Ljava/lang/Object;", (void *) t_PythonList_set17 },
            { "size", "()I", (void *) t_PythonList_size18 },
            { "toArray", "()[Ljava/lang/Object;", (void *) t_PythonList_toArray19 },
          };
          env->registerNatives(cls, methods, 20);
        }

        static PyObject *t_PythonList_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonList::initializeClass, 1)))
            return NULL;
          return t_PythonList::wrap_Object(PythonList(((t_PythonList *) arg)->object.this$));
        }
        static PyObject *t_PythonList_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonList::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonList_init_(t_PythonList *self, PyObject *args, PyObject *kwds)
        {
          PythonList object((jobject) NULL);

          INT_CALL(object = PythonList());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonList_equals(t_PythonList *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PythonList), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PythonList_finalize(t_PythonList *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonList_listIterator(t_PythonList *self)
        {
          ::java::util::ListIterator result((jobject) NULL);
          OBJ_CALL(result = self->object.listIterator());
          return ::java::util::t_ListIterator::wrap_Object(result);
        }

        static PyObject *t_PythonList_pythonExtension(t_PythonList *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonList_remove(t_PythonList *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.remove(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }
            }
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.remove(a0));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "remove", args);
          return NULL;
        }

        static PyObject *t_PythonList_subList(t_PythonList *self, PyObject *args)
        {
          jint a0;
          jint a1;
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.subList(a0, a1));
            return ::java::util::t_List::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "subList", args);
          return NULL;
        }

        static PyObject *t_PythonList_toArray(t_PythonList *self, PyObject *arg)
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArg(arg, "[o", &a0))
          {
            OBJ_CALL(result = self->object.toArray(a0));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }

          PyErr_SetArgsError((PyObject *) self, "toArray", arg);
          return NULL;
        }

        static jboolean JNICALL t_PythonList_add0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "add", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("add", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonList_add1(JNIEnv *jenv, jobject jobj, jint a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o1 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a1));
          PyObject *result = PyObject_CallMethod(obj, "add", "iO", (int) a0, o1);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jboolean JNICALL t_PythonList_addAll2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "addAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("addAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonList_addAll3(JNIEnv *jenv, jobject jobj, jint a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o1 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a1));
          PyObject *result = PyObject_CallMethod(obj, "addAll", "iO", (int) a0, o1);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("addAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonList_clear4(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "clear", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jboolean JNICALL t_PythonList_contains5(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "contains", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("contains", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonList_containsAll6(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "containsAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("containsAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonList_equals7(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "equals", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("equals", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jobject JNICALL t_PythonList_get8(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::lang::Object value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "get", "i", (int) a0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "o", &value))
          {
            throwTypeError("get", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static jint JNICALL t_PythonList_indexOf9(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "indexOf", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("indexOf", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static jboolean JNICALL t_PythonList_isEmpty10(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "isEmpty", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("isEmpty", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jobject JNICALL t_PythonList_iterator11(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::util::Iterator value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "iterator", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::java::util::Iterator::initializeClass, &value))
          {
            throwTypeError("iterator", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static jint JNICALL t_PythonList_lastIndexOf12(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "lastIndexOf", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("lastIndexOf", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static jobject JNICALL t_PythonList_listIterator13(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::util::ListIterator value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "listIterator", "i", (int) a0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::java::util::ListIterator::initializeClass, &value))
          {
            throwTypeError("listIterator", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonList_pythonDecRef14(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jboolean JNICALL t_PythonList_removeAll15(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "removeAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("removeAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonList_retainAll16(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "retainAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("retainAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jobject JNICALL t_PythonList_set17(JNIEnv *jenv, jobject jobj, jint a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::lang::Object value((jobject) NULL);
          PyObject *o1 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a1));
          PyObject *result = PyObject_CallMethod(obj, "set", "iO", (int) a0, o1);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "o", &value))
          {
            throwTypeError("set", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static jint JNICALL t_PythonList_size18(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *result = PyObject_CallMethod(obj, "size", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("size", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static jobject JNICALL t_PythonList_toArray19(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          JArray< ::java::lang::Object > value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "toArray", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "[o", &value))
          {
            throwTypeError("toArray", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonList_get__self(t_PythonList *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/SlowCollatedTermRangeFilter.h"
#include "java/text/Collator.h"
#include "org/apache/lucene/sandbox/queries/SlowCollatedTermRangeQuery.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *SlowCollatedTermRangeFilter::class$ = NULL;
          jmethodID *SlowCollatedTermRangeFilter::mids$ = NULL;
          bool SlowCollatedTermRangeFilter::live$ = false;

          jclass SlowCollatedTermRangeFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/SlowCollatedTermRangeFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ad38c2c0] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZLjava/text/Collator;)V");
              mids$[mid_getCollator_44b7fa29] = env->getMethodID(cls, "getCollator", "()Ljava/text/Collator;");
              mids$[mid_getLowerTerm_14c7b5c5] = env->getMethodID(cls, "getLowerTerm", "()Ljava/lang/String;");
              mids$[mid_getUpperTerm_14c7b5c5] = env->getMethodID(cls, "getUpperTerm", "()Ljava/lang/String;");
              mids$[mid_includesLower_54c6a16a] = env->getMethodID(cls, "includesLower", "()Z");
              mids$[mid_includesUpper_54c6a16a] = env->getMethodID(cls, "includesUpper", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SlowCollatedTermRangeFilter::SlowCollatedTermRangeFilter(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4, const ::java::text::Collator & a5) : ::org::apache::lucene::search::MultiTermQueryWrapperFilter(env->newObject(initializeClass, &mids$, mid_init$_ad38c2c0, a0.this$, a1.this$, a2.this$, a3, a4, a5.this$)) {}

          ::java::text::Collator SlowCollatedTermRangeFilter::getCollator() const
          {
            return ::java::text::Collator(env->callObjectMethod(this$, mids$[mid_getCollator_44b7fa29]));
          }

          ::java::lang::String SlowCollatedTermRangeFilter::getLowerTerm() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLowerTerm_14c7b5c5]));
          }

          ::java::lang::String SlowCollatedTermRangeFilter::getUpperTerm() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getUpperTerm_14c7b5c5]));
          }

          jboolean SlowCollatedTermRangeFilter::includesLower() const
          {
            return env->callBooleanMethod(this$, mids$[mid_includesLower_54c6a16a]);
          }

          jboolean SlowCollatedTermRangeFilter::includesUpper() const
          {
            return env->callBooleanMethod(this$, mids$[mid_includesUpper_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_SlowCollatedTermRangeFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SlowCollatedTermRangeFilter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SlowCollatedTermRangeFilter_of_(t_SlowCollatedTermRangeFilter *self, PyObject *args);
          static int t_SlowCollatedTermRangeFilter_init_(t_SlowCollatedTermRangeFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SlowCollatedTermRangeFilter_getCollator(t_SlowCollatedTermRangeFilter *self);
          static PyObject *t_SlowCollatedTermRangeFilter_getLowerTerm(t_SlowCollatedTermRangeFilter *self);
          static PyObject *t_SlowCollatedTermRangeFilter_getUpperTerm(t_SlowCollatedTermRangeFilter *self);
          static PyObject *t_SlowCollatedTermRangeFilter_includesLower(t_SlowCollatedTermRangeFilter *self);
          static PyObject *t_SlowCollatedTermRangeFilter_includesUpper(t_SlowCollatedTermRangeFilter *self);
          static PyObject *t_SlowCollatedTermRangeFilter_get__collator(t_SlowCollatedTermRangeFilter *self, void *data);
          static PyObject *t_SlowCollatedTermRangeFilter_get__lowerTerm(t_SlowCollatedTermRangeFilter *self, void *data);
          static PyObject *t_SlowCollatedTermRangeFilter_get__upperTerm(t_SlowCollatedTermRangeFilter *self, void *data);
          static PyObject *t_SlowCollatedTermRangeFilter_get__parameters_(t_SlowCollatedTermRangeFilter *self, void *data);
          static PyGetSetDef t_SlowCollatedTermRangeFilter__fields_[] = {
            DECLARE_GET_FIELD(t_SlowCollatedTermRangeFilter, collator),
            DECLARE_GET_FIELD(t_SlowCollatedTermRangeFilter, lowerTerm),
            DECLARE_GET_FIELD(t_SlowCollatedTermRangeFilter, upperTerm),
            DECLARE_GET_FIELD(t_SlowCollatedTermRangeFilter, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SlowCollatedTermRangeFilter__methods_[] = {
            DECLARE_METHOD(t_SlowCollatedTermRangeFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowCollatedTermRangeFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowCollatedTermRangeFilter, of_, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeFilter, getCollator, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeFilter, getLowerTerm, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeFilter, getUpperTerm, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeFilter, includesLower, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeFilter, includesUpper, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SlowCollatedTermRangeFilter, t_SlowCollatedTermRangeFilter, ::org::apache::lucene::search::MultiTermQueryWrapperFilter, SlowCollatedTermRangeFilter, t_SlowCollatedTermRangeFilter_init_, 0, 0, t_SlowCollatedTermRangeFilter__fields_, 0, 0);
          PyObject *t_SlowCollatedTermRangeFilter::wrap_Object(const SlowCollatedTermRangeFilter& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SlowCollatedTermRangeFilter::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SlowCollatedTermRangeFilter *self = (t_SlowCollatedTermRangeFilter *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SlowCollatedTermRangeFilter::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SlowCollatedTermRangeFilter::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SlowCollatedTermRangeFilter *self = (t_SlowCollatedTermRangeFilter *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SlowCollatedTermRangeFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SlowCollatedTermRangeFilter), module, "SlowCollatedTermRangeFilter", 0);
          }

          void t_SlowCollatedTermRangeFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeFilter).tp_dict, "class_", make_descriptor(SlowCollatedTermRangeFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeFilter).tp_dict, "wrapfn_", make_descriptor(t_SlowCollatedTermRangeFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SlowCollatedTermRangeFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SlowCollatedTermRangeFilter::initializeClass, 1)))
              return NULL;
            return t_SlowCollatedTermRangeFilter::wrap_Object(SlowCollatedTermRangeFilter(((t_SlowCollatedTermRangeFilter *) arg)->object.this$));
          }
          static PyObject *t_SlowCollatedTermRangeFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SlowCollatedTermRangeFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SlowCollatedTermRangeFilter_of_(t_SlowCollatedTermRangeFilter *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SlowCollatedTermRangeFilter_init_(t_SlowCollatedTermRangeFilter *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jboolean a3;
            jboolean a4;
            ::java::text::Collator a5((jobject) NULL);
            SlowCollatedTermRangeFilter object((jobject) NULL);

            if (!parseArgs(args, "sssZZk", ::java::text::Collator::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              INT_CALL(object = SlowCollatedTermRangeFilter(a0, a1, a2, a3, a4, a5));
              self->object = object;
              self->parameters[0] = &::org::apache::lucene::sandbox::queries::PY_TYPE(SlowCollatedTermRangeQuery);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SlowCollatedTermRangeFilter_getCollator(t_SlowCollatedTermRangeFilter *self)
          {
            ::java::text::Collator result((jobject) NULL);
            OBJ_CALL(result = self->object.getCollator());
            return ::java::text::t_Collator::wrap_Object(result);
          }

          static PyObject *t_SlowCollatedTermRangeFilter_getLowerTerm(t_SlowCollatedTermRangeFilter *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getLowerTerm());
            return j2p(result);
          }

          static PyObject *t_SlowCollatedTermRangeFilter_getUpperTerm(t_SlowCollatedTermRangeFilter *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getUpperTerm());
            return j2p(result);
          }

          static PyObject *t_SlowCollatedTermRangeFilter_includesLower(t_SlowCollatedTermRangeFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.includesLower());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SlowCollatedTermRangeFilter_includesUpper(t_SlowCollatedTermRangeFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.includesUpper());
            Py_RETURN_BOOL(result);
          }
          static PyObject *t_SlowCollatedTermRangeFilter_get__parameters_(t_SlowCollatedTermRangeFilter *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_SlowCollatedTermRangeFilter_get__collator(t_SlowCollatedTermRangeFilter *self, void *data)
          {
            ::java::text::Collator value((jobject) NULL);
            OBJ_CALL(value = self->object.getCollator());
            return ::java::text::t_Collator::wrap_Object(value);
          }

          static PyObject *t_SlowCollatedTermRangeFilter_get__lowerTerm(t_SlowCollatedTermRangeFilter *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getLowerTerm());
            return j2p(value);
          }

          static PyObject *t_SlowCollatedTermRangeFilter_get__upperTerm(t_SlowCollatedTermRangeFilter *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getUpperTerm());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState$OrdRange.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {

          ::java::lang::Class *SortedSetDocValuesReaderState$OrdRange::class$ = NULL;
          jmethodID *SortedSetDocValuesReaderState$OrdRange::mids$ = NULL;
          jfieldID *SortedSetDocValuesReaderState$OrdRange::fids$ = NULL;
          bool SortedSetDocValuesReaderState$OrdRange::live$ = false;

          jclass SortedSetDocValuesReaderState$OrdRange::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState$OrdRange");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_end] = env->getFieldID(cls, "end", "I");
              fids$[fid_start] = env->getFieldID(cls, "start", "I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedSetDocValuesReaderState$OrdRange::SortedSetDocValuesReaderState$OrdRange(jint a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

          jint SortedSetDocValuesReaderState$OrdRange::_get_end() const
          {
            return env->getIntField(this$, fids$[fid_end]);
          }

          jint SortedSetDocValuesReaderState$OrdRange::_get_start() const
          {
            return env->getIntField(this$, fids$[fid_start]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {
          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SortedSetDocValuesReaderState$OrdRange_init_(t_SortedSetDocValuesReaderState$OrdRange *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_get__end(t_SortedSetDocValuesReaderState$OrdRange *self, void *data);
          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_get__start(t_SortedSetDocValuesReaderState$OrdRange *self, void *data);

          static PyGetSetDef t_SortedSetDocValuesReaderState$OrdRange__fields_[] = {
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState$OrdRange, end),
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState$OrdRange, start),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SortedSetDocValuesReaderState$OrdRange__methods_[] = {
            DECLARE_METHOD(t_SortedSetDocValuesReaderState$OrdRange, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState$OrdRange, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedSetDocValuesReaderState$OrdRange, t_SortedSetDocValuesReaderState$OrdRange, ::java::lang::Object, SortedSetDocValuesReaderState$OrdRange, t_SortedSetDocValuesReaderState$OrdRange_init_, 0, 0, t_SortedSetDocValuesReaderState$OrdRange__fields_, 0, 0);

          void t_SortedSetDocValuesReaderState$OrdRange::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedSetDocValuesReaderState$OrdRange), module, "SortedSetDocValuesReaderState$OrdRange", 0);
          }

          void t_SortedSetDocValuesReaderState$OrdRange::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesReaderState$OrdRange).tp_dict, "class_", make_descriptor(SortedSetDocValuesReaderState$OrdRange::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesReaderState$OrdRange).tp_dict, "wrapfn_", make_descriptor(t_SortedSetDocValuesReaderState$OrdRange::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesReaderState$OrdRange).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedSetDocValuesReaderState$OrdRange::initializeClass, 1)))
              return NULL;
            return t_SortedSetDocValuesReaderState$OrdRange::wrap_Object(SortedSetDocValuesReaderState$OrdRange(((t_SortedSetDocValuesReaderState$OrdRange *) arg)->object.this$));
          }
          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedSetDocValuesReaderState$OrdRange::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SortedSetDocValuesReaderState$OrdRange_init_(t_SortedSetDocValuesReaderState$OrdRange *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            SortedSetDocValuesReaderState$OrdRange object((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              INT_CALL(object = SortedSetDocValuesReaderState$OrdRange(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_get__end(t_SortedSetDocValuesReaderState$OrdRange *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_end());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_get__start(t_SortedSetDocValuesReaderState$OrdRange *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_start());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/PorterStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/en/PorterStemFilter.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *PorterStemFilterFactory::class$ = NULL;
          jmethodID *PorterStemFilterFactory::mids$ = NULL;
          bool PorterStemFilterFactory::live$ = false;

          jclass PorterStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/PorterStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_520ef479] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/en/PorterStemFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PorterStemFilterFactory::PorterStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::en::PorterStemFilter PorterStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::en::PorterStemFilter(env->callObjectMethod(this$, mids$[mid_create_520ef479], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_PorterStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PorterStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PorterStemFilterFactory_init_(t_PorterStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PorterStemFilterFactory_create(t_PorterStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_PorterStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PorterStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PorterStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PorterStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PorterStemFilterFactory, t_PorterStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, PorterStemFilterFactory, t_PorterStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_PorterStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PorterStemFilterFactory), module, "PorterStemFilterFactory", 0);
          }

          void t_PorterStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PorterStemFilterFactory).tp_dict, "class_", make_descriptor(PorterStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PorterStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PorterStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PorterStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PorterStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PorterStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PorterStemFilterFactory::wrap_Object(PorterStemFilterFactory(((t_PorterStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PorterStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PorterStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PorterStemFilterFactory_init_(t_PorterStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PorterStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PorterStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PorterStemFilterFactory_create(t_PorterStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::en::PorterStemFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::en::t_PorterStemFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PorterStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocsEnum$EnumWithSlice.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/ReaderSlice.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocsEnum$EnumWithSlice::class$ = NULL;
        jmethodID *MultiDocsEnum$EnumWithSlice::mids$ = NULL;
        jfieldID *MultiDocsEnum$EnumWithSlice::fids$ = NULL;
        bool MultiDocsEnum$EnumWithSlice::live$ = false;

        jclass MultiDocsEnum$EnumWithSlice::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocsEnum$EnumWithSlice");

            mids$ = new jmethodID[max_mid];
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docsEnum] = env->getFieldID(cls, "docsEnum", "Lorg/apache/lucene/index/DocsEnum;");
            fids$[fid_slice] = env->getFieldID(cls, "slice", "Lorg/apache/lucene/index/ReaderSlice;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String MultiDocsEnum$EnumWithSlice::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::org::apache::lucene::index::DocsEnum MultiDocsEnum$EnumWithSlice::_get_docsEnum() const
        {
          return ::org::apache::lucene::index::DocsEnum(env->getObjectField(this$, fids$[fid_docsEnum]));
        }

        void MultiDocsEnum$EnumWithSlice::_set_docsEnum(const ::org::apache::lucene::index::DocsEnum & a0) const
        {
          env->setObjectField(this$, fids$[fid_docsEnum], a0.this$);
        }

        ::org::apache::lucene::index::ReaderSlice MultiDocsEnum$EnumWithSlice::_get_slice() const
        {
          return ::org::apache::lucene::index::ReaderSlice(env->getObjectField(this$, fids$[fid_slice]));
        }

        void MultiDocsEnum$EnumWithSlice::_set_slice(const ::org::apache::lucene::index::ReaderSlice & a0) const
        {
          env->setObjectField(this$, fids$[fid_slice], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocsEnum$EnumWithSlice_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocsEnum$EnumWithSlice_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocsEnum$EnumWithSlice_toString(t_MultiDocsEnum$EnumWithSlice *self, PyObject *args);
        static PyObject *t_MultiDocsEnum$EnumWithSlice_get__docsEnum(t_MultiDocsEnum$EnumWithSlice *self, void *data);
        static int t_MultiDocsEnum$EnumWithSlice_set__docsEnum(t_MultiDocsEnum$EnumWithSlice *self, PyObject *arg, void *data);
        static PyObject *t_MultiDocsEnum$EnumWithSlice_get__slice(t_MultiDocsEnum$EnumWithSlice *self, void *data);
        static int t_MultiDocsEnum$EnumWithSlice_set__slice(t_MultiDocsEnum$EnumWithSlice *self, PyObject *arg, void *data);

        static PyGetSetDef t_MultiDocsEnum$EnumWithSlice__fields_[] = {
          DECLARE_GETSET_FIELD(t_MultiDocsEnum$EnumWithSlice, docsEnum),
          DECLARE_GETSET_FIELD(t_MultiDocsEnum$EnumWithSlice, slice),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiDocsEnum$EnumWithSlice__methods_[] = {
          DECLARE_METHOD(t_MultiDocsEnum$EnumWithSlice, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocsEnum$EnumWithSlice, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocsEnum$EnumWithSlice, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiDocsEnum$EnumWithSlice, t_MultiDocsEnum$EnumWithSlice, ::java::lang::Object, MultiDocsEnum$EnumWithSlice, abstract_init, 0, 0, t_MultiDocsEnum$EnumWithSlice__fields_, 0, 0);

        void t_MultiDocsEnum$EnumWithSlice::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocsEnum$EnumWithSlice), module, "MultiDocsEnum$EnumWithSlice", 0);
        }

        void t_MultiDocsEnum$EnumWithSlice::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiDocsEnum$EnumWithSlice).tp_dict, "class_", make_descriptor(MultiDocsEnum$EnumWithSlice::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiDocsEnum$EnumWithSlice).tp_dict, "wrapfn_", make_descriptor(t_MultiDocsEnum$EnumWithSlice::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiDocsEnum$EnumWithSlice).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocsEnum$EnumWithSlice_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocsEnum$EnumWithSlice::initializeClass, 1)))
            return NULL;
          return t_MultiDocsEnum$EnumWithSlice::wrap_Object(MultiDocsEnum$EnumWithSlice(((t_MultiDocsEnum$EnumWithSlice *) arg)->object.this$));
        }
        static PyObject *t_MultiDocsEnum$EnumWithSlice_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocsEnum$EnumWithSlice::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiDocsEnum$EnumWithSlice_toString(t_MultiDocsEnum$EnumWithSlice *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MultiDocsEnum$EnumWithSlice), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MultiDocsEnum$EnumWithSlice_get__docsEnum(t_MultiDocsEnum$EnumWithSlice *self, void *data)
        {
          ::org::apache::lucene::index::DocsEnum value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docsEnum());
          return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(value);
        }
        static int t_MultiDocsEnum$EnumWithSlice_set__docsEnum(t_MultiDocsEnum$EnumWithSlice *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::DocsEnum value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::DocsEnum::initializeClass, &value))
          {
            INT_CALL(self->object._set_docsEnum(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docsEnum", arg);
          return -1;
        }

        static PyObject *t_MultiDocsEnum$EnumWithSlice_get__slice(t_MultiDocsEnum$EnumWithSlice *self, void *data)
        {
          ::org::apache::lucene::index::ReaderSlice value((jobject) NULL);
          OBJ_CALL(value = self->object._get_slice());
          return ::org::apache::lucene::index::t_ReaderSlice::wrap_Object(value);
        }
        static int t_MultiDocsEnum$EnumWithSlice_set__slice(t_MultiDocsEnum$EnumWithSlice *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::ReaderSlice value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::ReaderSlice::initializeClass, &value))
          {
            INT_CALL(self->object._set_slice(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "slice", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/SimpleFieldFragList.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *SimpleFieldFragList::class$ = NULL;
          jmethodID *SimpleFieldFragList::mids$ = NULL;
          bool SimpleFieldFragList::live$ = false;

          jclass SimpleFieldFragList::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/SimpleFieldFragList");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_add_21fbeb2b] = env->getMethodID(cls, "add", "(IILjava/util/List;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleFieldFragList::SimpleFieldFragList(jint a0) : ::org::apache::lucene::search::vectorhighlight::FieldFragList(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          void SimpleFieldFragList::add(jint a0, jint a1, const ::java::util::List & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_add_21fbeb2b], a0, a1, a2.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_SimpleFieldFragList_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleFieldFragList_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleFieldFragList_init_(t_SimpleFieldFragList *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleFieldFragList_add(t_SimpleFieldFragList *self, PyObject *args);

          static PyMethodDef t_SimpleFieldFragList__methods_[] = {
            DECLARE_METHOD(t_SimpleFieldFragList, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFieldFragList, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFieldFragList, add, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleFieldFragList, t_SimpleFieldFragList, ::org::apache::lucene::search::vectorhighlight::FieldFragList, SimpleFieldFragList, t_SimpleFieldFragList_init_, 0, 0, 0, 0, 0);

          void t_SimpleFieldFragList::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleFieldFragList), module, "SimpleFieldFragList", 0);
          }

          void t_SimpleFieldFragList::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleFieldFragList).tp_dict, "class_", make_descriptor(SimpleFieldFragList::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleFieldFragList).tp_dict, "wrapfn_", make_descriptor(t_SimpleFieldFragList::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleFieldFragList).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleFieldFragList_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleFieldFragList::initializeClass, 1)))
              return NULL;
            return t_SimpleFieldFragList::wrap_Object(SimpleFieldFragList(((t_SimpleFieldFragList *) arg)->object.this$));
          }
          static PyObject *t_SimpleFieldFragList_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleFieldFragList::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleFieldFragList_init_(t_SimpleFieldFragList *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            SimpleFieldFragList object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = SimpleFieldFragList(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleFieldFragList_add(t_SimpleFieldFragList *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::java::util::List a2((jobject) NULL);
            PyTypeObject **p2;

            if (!parseArgs(args, "IIK", ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(self->object.add(a0, a1, a2));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SimpleFieldFragList), (PyObject *) self, "add", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/AnalyzerWrapper.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *AnalyzerWrapper::class$ = NULL;
        jmethodID *AnalyzerWrapper::mids$ = NULL;
        bool AnalyzerWrapper::live$ = false;

        jclass AnalyzerWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/AnalyzerWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getOffsetGap_5fdc3f57] = env->getMethodID(cls, "getOffsetGap", "(Ljava/lang/String;)I");
            mids$[mid_getPositionIncrementGap_5fdc3f57] = env->getMethodID(cls, "getPositionIncrementGap", "(Ljava/lang/String;)I");
            mids$[mid_initReader_d8fb1c81] = env->getMethodID(cls, "initReader", "(Ljava/lang/String;Ljava/io/Reader;)Ljava/io/Reader;");
            mids$[mid_getWrappedAnalyzer_29a2299f] = env->getMethodID(cls, "getWrappedAnalyzer", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer;");
            mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_wrapComponents_46d74455] = env->getMethodID(cls, "wrapComponents", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_wrapReader_d8fb1c81] = env->getMethodID(cls, "wrapReader", "(Ljava/lang/String;Ljava/io/Reader;)Ljava/io/Reader;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint AnalyzerWrapper::getOffsetGap(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getOffsetGap_5fdc3f57], a0.this$);
        }

        jint AnalyzerWrapper::getPositionIncrementGap(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getPositionIncrementGap_5fdc3f57], a0.this$);
        }

        ::java::io::Reader AnalyzerWrapper::initReader(const ::java::lang::String & a0, const ::java::io::Reader & a1) const
        {
          return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_initReader_d8fb1c81], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_AnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AnalyzerWrapper_getOffsetGap(t_AnalyzerWrapper *self, PyObject *args);
        static PyObject *t_AnalyzerWrapper_getPositionIncrementGap(t_AnalyzerWrapper *self, PyObject *args);
        static PyObject *t_AnalyzerWrapper_initReader(t_AnalyzerWrapper *self, PyObject *args);

        static PyMethodDef t_AnalyzerWrapper__methods_[] = {
          DECLARE_METHOD(t_AnalyzerWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AnalyzerWrapper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AnalyzerWrapper, getOffsetGap, METH_VARARGS),
          DECLARE_METHOD(t_AnalyzerWrapper, getPositionIncrementGap, METH_VARARGS),
          DECLARE_METHOD(t_AnalyzerWrapper, initReader, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AnalyzerWrapper, t_AnalyzerWrapper, ::org::apache::lucene::analysis::Analyzer, AnalyzerWrapper, abstract_init, 0, 0, 0, 0, 0);

        void t_AnalyzerWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(AnalyzerWrapper), module, "AnalyzerWrapper", 0);
        }

        void t_AnalyzerWrapper::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AnalyzerWrapper).tp_dict, "class_", make_descriptor(AnalyzerWrapper::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AnalyzerWrapper).tp_dict, "wrapfn_", make_descriptor(t_AnalyzerWrapper::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AnalyzerWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AnalyzerWrapper::initializeClass, 1)))
            return NULL;
          return t_AnalyzerWrapper::wrap_Object(AnalyzerWrapper(((t_AnalyzerWrapper *) arg)->object.this$));
        }
        static PyObject *t_AnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AnalyzerWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_AnalyzerWrapper_getOffsetGap(t_AnalyzerWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getOffsetGap(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(AnalyzerWrapper), (PyObject *) self, "getOffsetGap", args, 2);
        }

        static PyObject *t_AnalyzerWrapper_getPositionIncrementGap(t_AnalyzerWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getPositionIncrementGap(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(AnalyzerWrapper), (PyObject *) self, "getPositionIncrementGap", args, 2);
        }

        static PyObject *t_AnalyzerWrapper_initReader(t_AnalyzerWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::io::Reader a1((jobject) NULL);
          ::java::io::Reader result((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::io::Reader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.initReader(a0, a1));
            return ::java::io::t_Reader::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "initReader", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/TokenMgrError.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *TokenMgrError::class$ = NULL;
            jmethodID *TokenMgrError::mids$ = NULL;
            bool TokenMgrError::live$ = false;

            jclass TokenMgrError::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/TokenMgrError");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
                mids$[mid_init$_8aaeec67] = env->getMethodID(cls, "<init>", "(ZIIILjava/lang/String;CI)V");
                mids$[mid_getMessage_14c7b5c5] = env->getMethodID(cls, "getMessage", "()Ljava/lang/String;");
                mids$[mid_addEscapes_97a5258f] = env->getStaticMethodID(cls, "addEscapes", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_LexicalError_e888c5f6] = env->getStaticMethodID(cls, "LexicalError", "(ZIIILjava/lang/String;C)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TokenMgrError::TokenMgrError() : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            TokenMgrError::TokenMgrError(const ::java::lang::String & a0, jint a1) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

            TokenMgrError::TokenMgrError(jboolean a0, jint a1, jint a2, jint a3, const ::java::lang::String & a4, jchar a5, jint a6) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_8aaeec67, a0, a1, a2, a3, a4.this$, a5, a6)) {}

            ::java::lang::String TokenMgrError::getMessage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMessage_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_TokenMgrError_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TokenMgrError_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TokenMgrError_init_(t_TokenMgrError *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TokenMgrError_getMessage(t_TokenMgrError *self, PyObject *args);
            static PyObject *t_TokenMgrError_get__message(t_TokenMgrError *self, void *data);
            static PyGetSetDef t_TokenMgrError__fields_[] = {
              DECLARE_GET_FIELD(t_TokenMgrError, message),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TokenMgrError__methods_[] = {
              DECLARE_METHOD(t_TokenMgrError, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TokenMgrError, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TokenMgrError, getMessage, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TokenMgrError, t_TokenMgrError, ::java::lang::Error, TokenMgrError, t_TokenMgrError_init_, 0, 0, t_TokenMgrError__fields_, 0, 0);

            void t_TokenMgrError::install(PyObject *module)
            {
              installType(&PY_TYPE(TokenMgrError), module, "TokenMgrError", 0);
            }

            void t_TokenMgrError::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "class_", make_descriptor(TokenMgrError::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "wrapfn_", make_descriptor(t_TokenMgrError::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TokenMgrError_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TokenMgrError::initializeClass, 1)))
                return NULL;
              return t_TokenMgrError::wrap_Object(TokenMgrError(((t_TokenMgrError *) arg)->object.this$));
            }
            static PyObject *t_TokenMgrError_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TokenMgrError::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TokenMgrError_init_(t_TokenMgrError *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  TokenMgrError object((jobject) NULL);

                  INT_CALL(object = TokenMgrError());
                  self->object = object;
                  break;
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  jint a1;
                  TokenMgrError object((jobject) NULL);

                  if (!parseArgs(args, "sI", &a0, &a1))
                  {
                    INT_CALL(object = TokenMgrError(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 7:
                {
                  jboolean a0;
                  jint a1;
                  jint a2;
                  jint a3;
                  ::java::lang::String a4((jobject) NULL);
                  jchar a5;
                  jint a6;
                  TokenMgrError object((jobject) NULL);

                  if (!parseArgs(args, "ZIIIsCI", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                  {
                    INT_CALL(object = TokenMgrError(a0, a1, a2, a3, a4, a5, a6));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TokenMgrError_getMessage(t_TokenMgrError *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getMessage());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(TokenMgrError), (PyObject *) self, "getMessage", args, 2);
            }

            static PyObject *t_TokenMgrError_get__message(t_TokenMgrError *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getMessage());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/store/DataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *PostingsReaderBase::class$ = NULL;
        jmethodID *PostingsReaderBase::mids$ = NULL;
        bool PostingsReaderBase::live$ = false;

        jclass PostingsReaderBase::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/PostingsReaderBase");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_decodeTerm_0d1f34e8] = env->getMethodID(cls, "decodeTerm", "([JLorg/apache/lucene/store/DataInput;Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Z)V");
            mids$[mid_docs_4cca8a9c] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_docsAndPositions_3ae1ca58] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_init_0441f0b2] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/store/IndexInput;)V");
            mids$[mid_newTermState_9f93879c] = env->getMethodID(cls, "newTermState", "()Lorg/apache/lucene/codecs/BlockTermState;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void PostingsReaderBase::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        void PostingsReaderBase::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void PostingsReaderBase::decodeTerm(const JArray< jlong > & a0, const ::org::apache::lucene::store::DataInput & a1, const ::org::apache::lucene::index::FieldInfo & a2, const ::org::apache::lucene::codecs::BlockTermState & a3, jboolean a4) const
        {
          env->callVoidMethod(this$, mids$[mid_decodeTerm_0d1f34e8], a0.this$, a1.this$, a2.this$, a3.this$, a4);
        }

        ::org::apache::lucene::index::DocsEnum PostingsReaderBase::docs(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::BlockTermState & a1, const ::org::apache::lucene::util::Bits & a2, const ::org::apache::lucene::index::DocsEnum & a3, jint a4) const
        {
          return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_4cca8a9c], a0.this$, a1.this$, a2.this$, a3.this$, a4));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum PostingsReaderBase::docsAndPositions(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::BlockTermState & a1, const ::org::apache::lucene::util::Bits & a2, const ::org::apache::lucene::index::DocsAndPositionsEnum & a3, jint a4) const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_3ae1ca58], a0.this$, a1.this$, a2.this$, a3.this$, a4));
        }

        void PostingsReaderBase::init(const ::org::apache::lucene::store::IndexInput & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_init_0441f0b2], a0.this$);
        }

        ::org::apache::lucene::codecs::BlockTermState PostingsReaderBase::newTermState() const
        {
          return ::org::apache::lucene::codecs::BlockTermState(env->callObjectMethod(this$, mids$[mid_newTermState_9f93879c]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_PostingsReaderBase_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsReaderBase_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsReaderBase_checkIntegrity(t_PostingsReaderBase *self);
        static PyObject *t_PostingsReaderBase_close(t_PostingsReaderBase *self);
        static PyObject *t_PostingsReaderBase_decodeTerm(t_PostingsReaderBase *self, PyObject *args);
        static PyObject *t_PostingsReaderBase_docs(t_PostingsReaderBase *self, PyObject *args);
        static PyObject *t_PostingsReaderBase_docsAndPositions(t_PostingsReaderBase *self, PyObject *args);
        static PyObject *t_PostingsReaderBase_init(t_PostingsReaderBase *self, PyObject *arg);
        static PyObject *t_PostingsReaderBase_newTermState(t_PostingsReaderBase *self);

        static PyMethodDef t_PostingsReaderBase__methods_[] = {
          DECLARE_METHOD(t_PostingsReaderBase, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsReaderBase, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsReaderBase, checkIntegrity, METH_NOARGS),
          DECLARE_METHOD(t_PostingsReaderBase, close, METH_NOARGS),
          DECLARE_METHOD(t_PostingsReaderBase, decodeTerm, METH_VARARGS),
          DECLARE_METHOD(t_PostingsReaderBase, docs, METH_VARARGS),
          DECLARE_METHOD(t_PostingsReaderBase, docsAndPositions, METH_VARARGS),
          DECLARE_METHOD(t_PostingsReaderBase, init, METH_O),
          DECLARE_METHOD(t_PostingsReaderBase, newTermState, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PostingsReaderBase, t_PostingsReaderBase, ::java::lang::Object, PostingsReaderBase, abstract_init, 0, 0, 0, 0, 0);

        void t_PostingsReaderBase::install(PyObject *module)
        {
          installType(&PY_TYPE(PostingsReaderBase), module, "PostingsReaderBase", 0);
        }

        void t_PostingsReaderBase::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PostingsReaderBase).tp_dict, "class_", make_descriptor(PostingsReaderBase::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PostingsReaderBase).tp_dict, "wrapfn_", make_descriptor(t_PostingsReaderBase::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PostingsReaderBase).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PostingsReaderBase_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PostingsReaderBase::initializeClass, 1)))
            return NULL;
          return t_PostingsReaderBase::wrap_Object(PostingsReaderBase(((t_PostingsReaderBase *) arg)->object.this$));
        }
        static PyObject *t_PostingsReaderBase_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PostingsReaderBase::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PostingsReaderBase_checkIntegrity(t_PostingsReaderBase *self)
        {
          OBJ_CALL(self->object.checkIntegrity());
          Py_RETURN_NONE;
        }

        static PyObject *t_PostingsReaderBase_close(t_PostingsReaderBase *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_PostingsReaderBase_decodeTerm(t_PostingsReaderBase *self, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          ::org::apache::lucene::store::DataInput a1((jobject) NULL);
          ::org::apache::lucene::index::FieldInfo a2((jobject) NULL);
          ::org::apache::lucene::codecs::BlockTermState a3((jobject) NULL);
          jboolean a4;

          if (!parseArgs(args, "[JkkkZ", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(self->object.decodeTerm(a0, a1, a2, a3, a4));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "decodeTerm", args);
          return NULL;
        }

        static PyObject *t_PostingsReaderBase_docs(t_PostingsReaderBase *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::codecs::BlockTermState a1((jobject) NULL);
          ::org::apache::lucene::util::Bits a2((jobject) NULL);
          ::org::apache::lucene::index::DocsEnum a3((jobject) NULL);
          jint a4;
          ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkkkI", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = self->object.docs(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "docs", args);
          return NULL;
        }

        static PyObject *t_PostingsReaderBase_docsAndPositions(t_PostingsReaderBase *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::codecs::BlockTermState a1((jobject) NULL);
          ::org::apache::lucene::util::Bits a2((jobject) NULL);
          ::org::apache::lucene::index::DocsAndPositionsEnum a3((jobject) NULL);
          jint a4;
          ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkkkI", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "docsAndPositions", args);
          return NULL;
        }

        static PyObject *t_PostingsReaderBase_init(t_PostingsReaderBase *self, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexInput a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
          {
            OBJ_CALL(self->object.init(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "init", arg);
          return NULL;
        }

        static PyObject *t_PostingsReaderBase_newTermState(t_PostingsReaderBase *self)
        {
          ::org::apache::lucene::codecs::BlockTermState result((jobject) NULL);
          OBJ_CALL(result = self->object.newTermState());
          return ::org::apache::lucene::codecs::t_BlockTermState::wrap_Object(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RecyclingIntBlockAllocator.h"
#include "org/apache/lucene/util/Counter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RecyclingIntBlockAllocator::class$ = NULL;
        jmethodID *RecyclingIntBlockAllocator::mids$ = NULL;
        bool RecyclingIntBlockAllocator::live$ = false;
        jint RecyclingIntBlockAllocator::DEFAULT_BUFFERED_BLOCKS = (jint) 0;

        jclass RecyclingIntBlockAllocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RecyclingIntBlockAllocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
            mids$[mid_init$_bdd89aab] = env->getMethodID(cls, "<init>", "(IILorg/apache/lucene/util/Counter;)V");
            mids$[mid_bytesUsed_54c6a17a] = env->getMethodID(cls, "bytesUsed", "()J");
            mids$[mid_freeBlocks_39c7bd23] = env->getMethodID(cls, "freeBlocks", "(I)I");
            mids$[mid_getIntBlock_dab10e75] = env->getMethodID(cls, "getIntBlock", "()[I");
            mids$[mid_maxBufferedBlocks_54c6a179] = env->getMethodID(cls, "maxBufferedBlocks", "()I");
            mids$[mid_numBufferedBlocks_54c6a179] = env->getMethodID(cls, "numBufferedBlocks", "()I");
            mids$[mid_recycleIntBlocks_9f62f13c] = env->getMethodID(cls, "recycleIntBlocks", "([[III)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_BUFFERED_BLOCKS = env->getStaticIntField(cls, "DEFAULT_BUFFERED_BLOCKS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RecyclingIntBlockAllocator::RecyclingIntBlockAllocator() : ::org::apache::lucene::util::IntBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        RecyclingIntBlockAllocator::RecyclingIntBlockAllocator(jint a0, jint a1) : ::org::apache::lucene::util::IntBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

        RecyclingIntBlockAllocator::RecyclingIntBlockAllocator(jint a0, jint a1, const ::org::apache::lucene::util::Counter & a2) : ::org::apache::lucene::util::IntBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_bdd89aab, a0, a1, a2.this$)) {}

        jlong RecyclingIntBlockAllocator::bytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_bytesUsed_54c6a17a]);
        }

        jint RecyclingIntBlockAllocator::freeBlocks(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_freeBlocks_39c7bd23], a0);
        }

        JArray< jint > RecyclingIntBlockAllocator::getIntBlock() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getIntBlock_dab10e75]));
        }

        jint RecyclingIntBlockAllocator::maxBufferedBlocks() const
        {
          return env->callIntMethod(this$, mids$[mid_maxBufferedBlocks_54c6a179]);
        }

        jint RecyclingIntBlockAllocator::numBufferedBlocks() const
        {
          return env->callIntMethod(this$, mids$[mid_numBufferedBlocks_54c6a179]);
        }

        void RecyclingIntBlockAllocator::recycleIntBlocks(const JArray< JArray< jint > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleIntBlocks_9f62f13c], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RecyclingIntBlockAllocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RecyclingIntBlockAllocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RecyclingIntBlockAllocator_init_(t_RecyclingIntBlockAllocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RecyclingIntBlockAllocator_bytesUsed(t_RecyclingIntBlockAllocator *self);
        static PyObject *t_RecyclingIntBlockAllocator_freeBlocks(t_RecyclingIntBlockAllocator *self, PyObject *arg);
        static PyObject *t_RecyclingIntBlockAllocator_getIntBlock(t_RecyclingIntBlockAllocator *self, PyObject *args);
        static PyObject *t_RecyclingIntBlockAllocator_maxBufferedBlocks(t_RecyclingIntBlockAllocator *self);
        static PyObject *t_RecyclingIntBlockAllocator_numBufferedBlocks(t_RecyclingIntBlockAllocator *self);
        static PyObject *t_RecyclingIntBlockAllocator_recycleIntBlocks(t_RecyclingIntBlockAllocator *self, PyObject *args);
        static PyObject *t_RecyclingIntBlockAllocator_get__intBlock(t_RecyclingIntBlockAllocator *self, void *data);
        static PyGetSetDef t_RecyclingIntBlockAllocator__fields_[] = {
          DECLARE_GET_FIELD(t_RecyclingIntBlockAllocator, intBlock),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RecyclingIntBlockAllocator__methods_[] = {
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, bytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, freeBlocks, METH_O),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, getIntBlock, METH_VARARGS),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, maxBufferedBlocks, METH_NOARGS),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, numBufferedBlocks, METH_NOARGS),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, recycleIntBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RecyclingIntBlockAllocator, t_RecyclingIntBlockAllocator, ::org::apache::lucene::util::IntBlockPool$Allocator, RecyclingIntBlockAllocator, t_RecyclingIntBlockAllocator_init_, 0, 0, t_RecyclingIntBlockAllocator__fields_, 0, 0);

        void t_RecyclingIntBlockAllocator::install(PyObject *module)
        {
          installType(&PY_TYPE(RecyclingIntBlockAllocator), module, "RecyclingIntBlockAllocator", 0);
        }

        void t_RecyclingIntBlockAllocator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RecyclingIntBlockAllocator).tp_dict, "class_", make_descriptor(RecyclingIntBlockAllocator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RecyclingIntBlockAllocator).tp_dict, "wrapfn_", make_descriptor(t_RecyclingIntBlockAllocator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RecyclingIntBlockAllocator).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(RecyclingIntBlockAllocator::initializeClass);
          PyDict_SetItemString(PY_TYPE(RecyclingIntBlockAllocator).tp_dict, "DEFAULT_BUFFERED_BLOCKS", make_descriptor(RecyclingIntBlockAllocator::DEFAULT_BUFFERED_BLOCKS));
        }

        static PyObject *t_RecyclingIntBlockAllocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RecyclingIntBlockAllocator::initializeClass, 1)))
            return NULL;
          return t_RecyclingIntBlockAllocator::wrap_Object(RecyclingIntBlockAllocator(((t_RecyclingIntBlockAllocator *) arg)->object.this$));
        }
        static PyObject *t_RecyclingIntBlockAllocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RecyclingIntBlockAllocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RecyclingIntBlockAllocator_init_(t_RecyclingIntBlockAllocator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              RecyclingIntBlockAllocator object((jobject) NULL);

              INT_CALL(object = RecyclingIntBlockAllocator());
              self->object = object;
              break;
            }
            goto err;
           case 2:
            {
              jint a0;
              jint a1;
              RecyclingIntBlockAllocator object((jobject) NULL);

              if (!parseArgs(args, "II", &a0, &a1))
              {
                INT_CALL(object = RecyclingIntBlockAllocator(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              jint a0;
              jint a1;
              ::org::apache::lucene::util::Counter a2((jobject) NULL);
              RecyclingIntBlockAllocator object((jobject) NULL);

              if (!parseArgs(args, "IIk", ::org::apache::lucene::util::Counter::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = RecyclingIntBlockAllocator(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RecyclingIntBlockAllocator_bytesUsed(t_RecyclingIntBlockAllocator *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.bytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RecyclingIntBlockAllocator_freeBlocks(t_RecyclingIntBlockAllocator *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.freeBlocks(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "freeBlocks", arg);
          return NULL;
        }

        static PyObject *t_RecyclingIntBlockAllocator_getIntBlock(t_RecyclingIntBlockAllocator *self, PyObject *args)
        {
          JArray< jint > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getIntBlock());
            return result.wrap();
          }

          return callSuper(&PY_TYPE(RecyclingIntBlockAllocator), (PyObject *) self, "getIntBlock", args, 2);
        }

        static PyObject *t_RecyclingIntBlockAllocator_maxBufferedBlocks(t_RecyclingIntBlockAllocator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.maxBufferedBlocks());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_RecyclingIntBlockAllocator_numBufferedBlocks(t_RecyclingIntBlockAllocator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numBufferedBlocks());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_RecyclingIntBlockAllocator_recycleIntBlocks(t_RecyclingIntBlockAllocator *self, PyObject *args)
        {
          JArray< JArray< jint > > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[[III", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.recycleIntBlocks(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RecyclingIntBlockAllocator), (PyObject *) self, "recycleIntBlocks", args, 2);
        }

        static PyObject *t_RecyclingIntBlockAllocator_get__intBlock(t_RecyclingIntBlockAllocator *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object.getIntBlock());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/DoubleDocValuesField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *DoubleDocValuesField::class$ = NULL;
        jmethodID *DoubleDocValuesField::mids$ = NULL;
        bool DoubleDocValuesField::live$ = false;

        jclass DoubleDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/DoubleDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_493fce5f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;D)V");
            mids$[mid_setDoubleValue_5d1c7645] = env->getMethodID(cls, "setDoubleValue", "(D)V");
            mids$[mid_setLongValue_0ee6df2f] = env->getMethodID(cls, "setLongValue", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DoubleDocValuesField::DoubleDocValuesField(const ::java::lang::String & a0, jdouble a1) : ::org::apache::lucene::document::NumericDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_493fce5f, a0.this$, a1)) {}

        void DoubleDocValuesField::setDoubleValue(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDoubleValue_5d1c7645], a0);
        }

        void DoubleDocValuesField::setLongValue(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLongValue_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_DoubleDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DoubleDocValuesField_init_(t_DoubleDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DoubleDocValuesField_setDoubleValue(t_DoubleDocValuesField *self, PyObject *args);
        static PyObject *t_DoubleDocValuesField_setLongValue(t_DoubleDocValuesField *self, PyObject *args);
        static int t_DoubleDocValuesField_set__doubleValue(t_DoubleDocValuesField *self, PyObject *arg, void *data);
        static int t_DoubleDocValuesField_set__longValue(t_DoubleDocValuesField *self, PyObject *arg, void *data);
        static PyGetSetDef t_DoubleDocValuesField__fields_[] = {
          DECLARE_SET_FIELD(t_DoubleDocValuesField, doubleValue),
          DECLARE_SET_FIELD(t_DoubleDocValuesField, longValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DoubleDocValuesField__methods_[] = {
          DECLARE_METHOD(t_DoubleDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleDocValuesField, setDoubleValue, METH_VARARGS),
          DECLARE_METHOD(t_DoubleDocValuesField, setLongValue, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DoubleDocValuesField, t_DoubleDocValuesField, ::org::apache::lucene::document::NumericDocValuesField, DoubleDocValuesField, t_DoubleDocValuesField_init_, 0, 0, t_DoubleDocValuesField__fields_, 0, 0);

        void t_DoubleDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(DoubleDocValuesField), module, "DoubleDocValuesField", 0);
        }

        void t_DoubleDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DoubleDocValuesField).tp_dict, "class_", make_descriptor(DoubleDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DoubleDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_DoubleDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DoubleDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DoubleDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DoubleDocValuesField::initializeClass, 1)))
            return NULL;
          return t_DoubleDocValuesField::wrap_Object(DoubleDocValuesField(((t_DoubleDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_DoubleDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DoubleDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DoubleDocValuesField_init_(t_DoubleDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jdouble a1;
          DoubleDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sD", &a0, &a1))
          {
            INT_CALL(object = DoubleDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DoubleDocValuesField_setDoubleValue(t_DoubleDocValuesField *self, PyObject *args)
        {
          jdouble a0;

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(self->object.setDoubleValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DoubleDocValuesField), (PyObject *) self, "setDoubleValue", args, 2);
        }

        static PyObject *t_DoubleDocValuesField_setLongValue(t_DoubleDocValuesField *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.setLongValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DoubleDocValuesField), (PyObject *) self, "setLongValue", args, 2);
        }

        static int t_DoubleDocValuesField_set__doubleValue(t_DoubleDocValuesField *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setDoubleValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "doubleValue", arg);
          return -1;
        }

        static int t_DoubleDocValuesField_set__longValue(t_DoubleDocValuesField *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setLongValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "longValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/MatchAllDocsQueryNodeBuilder.h"
#include "org/apache/lucene/search/MatchAllDocsQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *MatchAllDocsQueryNodeBuilder::class$ = NULL;
              jmethodID *MatchAllDocsQueryNodeBuilder::mids$ = NULL;
              bool MatchAllDocsQueryNodeBuilder::live$ = false;

              jclass MatchAllDocsQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/MatchAllDocsQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_94b64688] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/MatchAllDocsQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MatchAllDocsQueryNodeBuilder::MatchAllDocsQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::MatchAllDocsQuery MatchAllDocsQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::MatchAllDocsQuery(env->callObjectMethod(this$, mids$[mid_build_94b64688], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_MatchAllDocsQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MatchAllDocsQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MatchAllDocsQueryNodeBuilder_init_(t_MatchAllDocsQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_MatchAllDocsQueryNodeBuilder_build(t_MatchAllDocsQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_MatchAllDocsQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_MatchAllDocsQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchAllDocsQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchAllDocsQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MatchAllDocsQueryNodeBuilder, t_MatchAllDocsQueryNodeBuilder, ::java::lang::Object, MatchAllDocsQueryNodeBuilder, t_MatchAllDocsQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_MatchAllDocsQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(MatchAllDocsQueryNodeBuilder), module, "MatchAllDocsQueryNodeBuilder", 0);
              }

              void t_MatchAllDocsQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNodeBuilder).tp_dict, "class_", make_descriptor(MatchAllDocsQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_MatchAllDocsQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MatchAllDocsQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MatchAllDocsQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_MatchAllDocsQueryNodeBuilder::wrap_Object(MatchAllDocsQueryNodeBuilder(((t_MatchAllDocsQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_MatchAllDocsQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MatchAllDocsQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MatchAllDocsQueryNodeBuilder_init_(t_MatchAllDocsQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                MatchAllDocsQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = MatchAllDocsQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_MatchAllDocsQueryNodeBuilder_build(t_MatchAllDocsQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::MatchAllDocsQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_MatchAllDocsQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CorruptIndexException.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CorruptIndexException::class$ = NULL;
        jmethodID *CorruptIndexException::mids$ = NULL;
        bool CorruptIndexException::live$ = false;

        jclass CorruptIndexException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CorruptIndexException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CorruptIndexException::CorruptIndexException(const ::java::lang::String & a0) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        CorruptIndexException::CorruptIndexException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CorruptIndexException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CorruptIndexException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CorruptIndexException_init_(t_CorruptIndexException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_CorruptIndexException__methods_[] = {
          DECLARE_METHOD(t_CorruptIndexException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CorruptIndexException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CorruptIndexException, t_CorruptIndexException, ::java::io::IOException, CorruptIndexException, t_CorruptIndexException_init_, 0, 0, 0, 0, 0);

        void t_CorruptIndexException::install(PyObject *module)
        {
          installType(&PY_TYPE(CorruptIndexException), module, "CorruptIndexException", 0);
        }

        void t_CorruptIndexException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CorruptIndexException).tp_dict, "class_", make_descriptor(CorruptIndexException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CorruptIndexException).tp_dict, "wrapfn_", make_descriptor(t_CorruptIndexException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CorruptIndexException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CorruptIndexException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CorruptIndexException::initializeClass, 1)))
            return NULL;
          return t_CorruptIndexException::wrap_Object(CorruptIndexException(((t_CorruptIndexException *) arg)->object.this$));
        }
        static PyObject *t_CorruptIndexException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CorruptIndexException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CorruptIndexException_init_(t_CorruptIndexException *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              CorruptIndexException object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = CorruptIndexException(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Throwable a1((jobject) NULL);
              CorruptIndexException object((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
              {
                INT_CALL(object = CorruptIndexException(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyMergeUtils.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyMergeUtils::class$ = NULL;
          jmethodID *TaxonomyMergeUtils::mids$ = NULL;
          bool TaxonomyMergeUtils::live$ = false;

          jclass TaxonomyMergeUtils::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyMergeUtils");

              mids$ = new jmethodID[max_mid];
              mids$[mid_merge_71f3e5f1] = env->getStaticMethodID(cls, "merge", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap;Lorg/apache/lucene/index/IndexWriter;Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter;Lorg/apache/lucene/facet/FacetsConfig;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void TaxonomyMergeUtils::merge(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter$OrdinalMap & a2, const ::org::apache::lucene::index::IndexWriter & a3, const ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter & a4, const ::org::apache::lucene::facet::FacetsConfig & a5)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_merge_71f3e5f1], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyMergeUtils_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyMergeUtils_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyMergeUtils_merge(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_TaxonomyMergeUtils__methods_[] = {
            DECLARE_METHOD(t_TaxonomyMergeUtils, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyMergeUtils, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyMergeUtils, merge, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyMergeUtils, t_TaxonomyMergeUtils, ::java::lang::Object, TaxonomyMergeUtils, abstract_init, 0, 0, 0, 0, 0);

          void t_TaxonomyMergeUtils::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyMergeUtils), module, "TaxonomyMergeUtils", 0);
          }

          void t_TaxonomyMergeUtils::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyMergeUtils).tp_dict, "class_", make_descriptor(TaxonomyMergeUtils::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyMergeUtils).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyMergeUtils::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyMergeUtils).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyMergeUtils_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyMergeUtils::initializeClass, 1)))
              return NULL;
            return t_TaxonomyMergeUtils::wrap_Object(TaxonomyMergeUtils(((t_TaxonomyMergeUtils *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyMergeUtils_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyMergeUtils::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TaxonomyMergeUtils_merge(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::store::Directory a1((jobject) NULL);
            ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter$OrdinalMap a2((jobject) NULL);
            ::org::apache::lucene::index::IndexWriter a3((jobject) NULL);
            ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter a4((jobject) NULL);
            ::org::apache::lucene::facet::FacetsConfig a5((jobject) NULL);

            if (!parseArgs(args, "kkkkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter$OrdinalMap::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              OBJ_CALL(::org::apache::lucene::facet::taxonomy::TaxonomyMergeUtils::merge(a0, a1, a2, a3, a4, a5));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "merge", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanOrBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanOrBuilder::class$ = NULL;
            jmethodID *SpanOrBuilder::mids$ = NULL;
            bool SpanOrBuilder::live$ = false;

            jclass SpanOrBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanOrBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d9ca31a9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/builders/SpanQueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanOrBuilder::SpanOrBuilder(const ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder & a0) : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_d9ca31a9, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanOrBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanOrBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanOrBuilder_init_(t_SpanOrBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanOrBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanOrBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanOrBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanOrBuilder, t_SpanOrBuilder, ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase, SpanOrBuilder, t_SpanOrBuilder_init_, 0, 0, 0, 0, 0);

            void t_SpanOrBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanOrBuilder), module, "SpanOrBuilder", 0);
            }

            void t_SpanOrBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanOrBuilder).tp_dict, "class_", make_descriptor(SpanOrBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanOrBuilder).tp_dict, "wrapfn_", make_descriptor(t_SpanOrBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanOrBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanOrBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanOrBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanOrBuilder::wrap_Object(SpanOrBuilder(((t_SpanOrBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanOrBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanOrBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanOrBuilder_init_(t_SpanOrBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder a0((jobject) NULL);
              SpanOrBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = SpanOrBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Rescorer.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Rescorer::class$ = NULL;
        jmethodID *Rescorer::mids$ = NULL;
        bool Rescorer::live$ = false;

        jclass Rescorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Rescorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_explain_2b38e623] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Explanation;I)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_rescore_bd3343d7] = env->getMethodID(cls, "rescore", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;I)Lorg/apache/lucene/search/TopDocs;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Rescorer::Rescorer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::Explanation Rescorer::explain(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Explanation & a1, jint a2) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_2b38e623], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::TopDocs Rescorer::rescore(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::TopDocs & a1, jint a2) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_rescore_bd3343d7], a0.this$, a1.this$, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Rescorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Rescorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Rescorer_init_(t_Rescorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Rescorer_explain(t_Rescorer *self, PyObject *args);
        static PyObject *t_Rescorer_rescore(t_Rescorer *self, PyObject *args);

        static PyMethodDef t_Rescorer__methods_[] = {
          DECLARE_METHOD(t_Rescorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Rescorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Rescorer, explain, METH_VARARGS),
          DECLARE_METHOD(t_Rescorer, rescore, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Rescorer, t_Rescorer, ::java::lang::Object, Rescorer, t_Rescorer_init_, 0, 0, 0, 0, 0);

        void t_Rescorer::install(PyObject *module)
        {
          installType(&PY_TYPE(Rescorer), module, "Rescorer", 0);
        }

        void t_Rescorer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Rescorer).tp_dict, "class_", make_descriptor(Rescorer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Rescorer).tp_dict, "wrapfn_", make_descriptor(t_Rescorer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Rescorer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Rescorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Rescorer::initializeClass, 1)))
            return NULL;
          return t_Rescorer::wrap_Object(Rescorer(((t_Rescorer *) arg)->object.this$));
        }
        static PyObject *t_Rescorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Rescorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Rescorer_init_(t_Rescorer *self, PyObject *args, PyObject *kwds)
        {
          Rescorer object((jobject) NULL);

          INT_CALL(object = Rescorer());
          self->object = object;

          return 0;
        }

        static PyObject *t_Rescorer_explain(t_Rescorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Explanation a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::search::Explanation result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Explanation::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.explain(a0, a1, a2));
            return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "explain", args);
          return NULL;
        }

        static PyObject *t_Rescorer_rescore(t_Rescorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::TopDocs a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::search::TopDocs result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.rescore(a0, a1, a2));
            return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "rescore", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Comparable.h"
#include "java/lang/Cloneable.h"
#include "java/util/Comparator.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRef::class$ = NULL;
        jmethodID *BytesRef::mids$ = NULL;
        jfieldID *BytesRef::fids$ = NULL;
        bool BytesRef::live$ = false;
        JArray< jbyte > *BytesRef::EMPTY_BYTES = NULL;

        jclass BytesRef::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRef");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_a8afc64a] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;)V");
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_49b4f12b] = env->getMethodID(cls, "<init>", "([B)V");
            mids$[mid_init$_86f4435f] = env->getMethodID(cls, "<init>", "([BII)V");
            mids$[mid_append_7bc03dc4] = env->getMethodID(cls, "append", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_bytesEquals_7bc03dc8] = env->getMethodID(cls, "bytesEquals", "(Lorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_clone_4ae19461] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_compareTo_7bc03ddb] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_copyBytes_7bc03dc4] = env->getMethodID(cls, "copyBytes", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_copyChars_a8afc64a] = env->getMethodID(cls, "copyChars", "(Ljava/lang/CharSequence;)V");
            mids$[mid_deepCopyOf_21e43cb7] = env->getStaticMethodID(cls, "deepCopyOf", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getUTF8SortedAsUTF16Comparator_5a7ff2fc] = env->getStaticMethodID(cls, "getUTF8SortedAsUTF16Comparator", "()Ljava/util/Comparator;");
            mids$[mid_getUTF8SortedAsUnicodeComparator_5a7ff2fc] = env->getStaticMethodID(cls, "getUTF8SortedAsUnicodeComparator", "()Ljava/util/Comparator;");
            mids$[mid_grow_39c7bd3c] = env->getMethodID(cls, "grow", "(I)V");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isValid_54c6a16a] = env->getMethodID(cls, "isValid", "()Z");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_utf8ToString_14c7b5c5] = env->getMethodID(cls, "utf8ToString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_bytes] = env->getFieldID(cls, "bytes", "[B");
            fids$[fid_length] = env->getFieldID(cls, "length", "I");
            fids$[fid_offset] = env->getFieldID(cls, "offset", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY_BYTES = new JArray< jbyte >(env->getStaticObjectField(cls, "EMPTY_BYTES", "[B"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BytesRef::BytesRef() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        BytesRef::BytesRef(const ::java::lang::CharSequence & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a8afc64a, a0.this$)) {}

        BytesRef::BytesRef(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        BytesRef::BytesRef(const JArray< jbyte > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_49b4f12b, a0.this$)) {}

        BytesRef::BytesRef(const JArray< jbyte > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_86f4435f, a0.this$, a1, a2)) {}

        void BytesRef::append(const BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_append_7bc03dc4], a0.this$);
        }

        jboolean BytesRef::bytesEquals(const BytesRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_bytesEquals_7bc03dc8], a0.this$);
        }

        BytesRef BytesRef::clone() const
        {
          return BytesRef(env->callObjectMethod(this$, mids$[mid_clone_4ae19461]));
        }

        jint BytesRef::compareTo(const BytesRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTo_7bc03ddb], a0.this$);
        }

        void BytesRef::copyBytes(const BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyBytes_7bc03dc4], a0.this$);
        }

        void BytesRef::copyChars(const ::java::lang::CharSequence & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyChars_a8afc64a], a0.this$);
        }

        BytesRef BytesRef::deepCopyOf(const BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return BytesRef(env->callStaticObjectMethod(cls, mids$[mid_deepCopyOf_21e43cb7], a0.this$));
        }

        jboolean BytesRef::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::util::Comparator BytesRef::getUTF8SortedAsUTF16Comparator()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_getUTF8SortedAsUTF16Comparator_5a7ff2fc]));
        }

        ::java::util::Comparator BytesRef::getUTF8SortedAsUnicodeComparator()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_getUTF8SortedAsUnicodeComparator_5a7ff2fc]));
        }

        void BytesRef::grow(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_grow_39c7bd3c], a0);
        }

        jint BytesRef::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean BytesRef::isValid() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isValid_54c6a16a]);
        }

        ::java::lang::String BytesRef::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::String BytesRef::utf8ToString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_utf8ToString_14c7b5c5]));
        }

        JArray< jbyte > BytesRef::_get_bytes() const
        {
          return JArray< jbyte >(env->getObjectField(this$, fids$[fid_bytes]));
        }

        void BytesRef::_set_bytes(const JArray< jbyte > & a0) const
        {
          env->setObjectField(this$, fids$[fid_bytes], a0.this$);
        }

        jint BytesRef::_get_length() const
        {
          return env->getIntField(this$, fids$[fid_length]);
        }

        void BytesRef::_set_length(jint a0) const
        {
          env->setIntField(this$, fids$[fid_length], a0);
        }

        jint BytesRef::_get_offset() const
        {
          return env->getIntField(this$, fids$[fid_offset]);
        }

        void BytesRef::_set_offset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_offset], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRef_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRef_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BytesRef_init_(t_BytesRef *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BytesRef_append(t_BytesRef *self, PyObject *arg);
        static PyObject *t_BytesRef_bytesEquals(t_BytesRef *self, PyObject *arg);
        static PyObject *t_BytesRef_clone(t_BytesRef *self);
        static PyObject *t_BytesRef_compareTo(t_BytesRef *self, PyObject *arg);
        static PyObject *t_BytesRef_copyBytes(t_BytesRef *self, PyObject *arg);
        static PyObject *t_BytesRef_copyChars(t_BytesRef *self, PyObject *arg);
        static PyObject *t_BytesRef_deepCopyOf(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRef_equals(t_BytesRef *self, PyObject *args);
        static PyObject *t_BytesRef_getUTF8SortedAsUTF16Comparator(PyTypeObject *type);
        static PyObject *t_BytesRef_getUTF8SortedAsUnicodeComparator(PyTypeObject *type);
        static PyObject *t_BytesRef_grow(t_BytesRef *self, PyObject *arg);
        static PyObject *t_BytesRef_hashCode(t_BytesRef *self, PyObject *args);
        static PyObject *t_BytesRef_isValid(t_BytesRef *self);
        static PyObject *t_BytesRef_toString(t_BytesRef *self, PyObject *args);
        static PyObject *t_BytesRef_utf8ToString(t_BytesRef *self);
        static PyObject *t_BytesRef_get__bytes(t_BytesRef *self, void *data);
        static int t_BytesRef_set__bytes(t_BytesRef *self, PyObject *arg, void *data);
        static PyObject *t_BytesRef_get__length(t_BytesRef *self, void *data);
        static int t_BytesRef_set__length(t_BytesRef *self, PyObject *arg, void *data);
        static PyObject *t_BytesRef_get__offset(t_BytesRef *self, void *data);
        static int t_BytesRef_set__offset(t_BytesRef *self, PyObject *arg, void *data);

        static PyObject *t_BytesRef_get__uTF8SortedAsUTF16Comparator(t_BytesRef *self, void *data);
        static PyObject *t_BytesRef_get__uTF8SortedAsUnicodeComparator(t_BytesRef *self, void *data);
        static PyObject *t_BytesRef_get__valid(t_BytesRef *self, void *data);
        static PyGetSetDef t_BytesRef__fields_[] = {
          DECLARE_GETSET_FIELD(t_BytesRef, bytes),
          DECLARE_GETSET_FIELD(t_BytesRef, length),
          DECLARE_GETSET_FIELD(t_BytesRef, offset),
          DECLARE_GET_FIELD(t_BytesRef, uTF8SortedAsUTF16Comparator),
          DECLARE_GET_FIELD(t_BytesRef, uTF8SortedAsUnicodeComparator),
          DECLARE_GET_FIELD(t_BytesRef, valid),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BytesRef__methods_[] = {
          DECLARE_METHOD(t_BytesRef, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRef, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRef, append, METH_O),
          DECLARE_METHOD(t_BytesRef, bytesEquals, METH_O),
          DECLARE_METHOD(t_BytesRef, clone, METH_NOARGS),
          DECLARE_METHOD(t_BytesRef, compareTo, METH_O),
          DECLARE_METHOD(t_BytesRef, copyBytes, METH_O),
          DECLARE_METHOD(t_BytesRef, copyChars, METH_O),
          DECLARE_METHOD(t_BytesRef, deepCopyOf, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRef, equals, METH_VARARGS),
          DECLARE_METHOD(t_BytesRef, getUTF8SortedAsUTF16Comparator, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_BytesRef, getUTF8SortedAsUnicodeComparator, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_BytesRef, grow, METH_O),
          DECLARE_METHOD(t_BytesRef, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_BytesRef, isValid, METH_NOARGS),
          DECLARE_METHOD(t_BytesRef, toString, METH_VARARGS),
          DECLARE_METHOD(t_BytesRef, utf8ToString, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BytesRef, t_BytesRef, ::java::lang::Object, BytesRef, t_BytesRef_init_, 0, 0, t_BytesRef__fields_, 0, 0);

        void t_BytesRef::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRef), module, "BytesRef", 0);
        }

        void t_BytesRef::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BytesRef).tp_dict, "class_", make_descriptor(BytesRef::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BytesRef).tp_dict, "wrapfn_", make_descriptor(t_BytesRef::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BytesRef).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(BytesRef::initializeClass);
          PyDict_SetItemString(PY_TYPE(BytesRef).tp_dict, "EMPTY_BYTES", make_descriptor(BytesRef::EMPTY_BYTES->wrap()));
        }

        static PyObject *t_BytesRef_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRef::initializeClass, 1)))
            return NULL;
          return t_BytesRef::wrap_Object(BytesRef(((t_BytesRef *) arg)->object.this$));
        }
        static PyObject *t_BytesRef_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRef::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BytesRef_init_(t_BytesRef *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              BytesRef object((jobject) NULL);

              INT_CALL(object = BytesRef());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              BytesRef object((jobject) NULL);

              if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                INT_CALL(object = BytesRef(a0));
                self->object = object;
                break;
              }
            }
            {
              jint a0;
              BytesRef object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = BytesRef(a0));
                self->object = object;
                break;
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);
              BytesRef object((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                INT_CALL(object = BytesRef(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              BytesRef object((jobject) NULL);

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                INT_CALL(object = BytesRef(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BytesRef_append(t_BytesRef *self, PyObject *arg)
        {
          BytesRef a0((jobject) NULL);

          if (!parseArg(arg, "k", BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.append(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "append", arg);
          return NULL;
        }

        static PyObject *t_BytesRef_bytesEquals(t_BytesRef *self, PyObject *arg)
        {
          BytesRef a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.bytesEquals(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "bytesEquals", arg);
          return NULL;
        }

        static PyObject *t_BytesRef_clone(t_BytesRef *self)
        {
          BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_BytesRef_compareTo(t_BytesRef *self, PyObject *arg)
        {
          BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.compareTo(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
          return NULL;
        }

        static PyObject *t_BytesRef_copyBytes(t_BytesRef *self, PyObject *arg)
        {
          BytesRef a0((jobject) NULL);

          if (!parseArg(arg, "k", BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyBytes(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyBytes", arg);
          return NULL;
        }

        static PyObject *t_BytesRef_copyChars(t_BytesRef *self, PyObject *arg)
        {
          ::java::lang::CharSequence a0((jobject) NULL);

          if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
          {
            OBJ_CALL(self->object.copyChars(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyChars", arg);
          return NULL;
        }

        static PyObject *t_BytesRef_deepCopyOf(PyTypeObject *type, PyObject *arg)
        {
          BytesRef a0((jobject) NULL);
          BytesRef result((jobject) NULL);

          if (!parseArg(arg, "k", BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BytesRef::deepCopyOf(a0));
            return t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "deepCopyOf", arg);
          return NULL;
        }

        static PyObject *t_BytesRef_equals(t_BytesRef *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(BytesRef), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_BytesRef_getUTF8SortedAsUTF16Comparator(PyTypeObject *type)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::BytesRef::getUTF8SortedAsUTF16Comparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_BytesRef_getUTF8SortedAsUnicodeComparator(PyTypeObject *type)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::BytesRef::getUTF8SortedAsUnicodeComparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_BytesRef_grow(t_BytesRef *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.grow(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "grow", arg);
          return NULL;
        }

        static PyObject *t_BytesRef_hashCode(t_BytesRef *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BytesRef), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_BytesRef_isValid(t_BytesRef *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isValid());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_BytesRef_toString(t_BytesRef *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(BytesRef), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_BytesRef_utf8ToString(t_BytesRef *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.utf8ToString());
          return j2p(result);
        }

        static PyObject *t_BytesRef_get__bytes(t_BytesRef *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_bytes());
          return value.wrap();
        }
        static int t_BytesRef_set__bytes(t_BytesRef *self, PyObject *arg, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          if (!parseArg(arg, "[B", &value))
          {
            INT_CALL(self->object._set_bytes(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "bytes", arg);
          return -1;
        }

        static PyObject *t_BytesRef_get__length(t_BytesRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_length());
          return PyInt_FromLong((long) value);
        }
        static int t_BytesRef_set__length(t_BytesRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_length(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "length", arg);
          return -1;
        }

        static PyObject *t_BytesRef_get__offset(t_BytesRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_offset());
          return PyInt_FromLong((long) value);
        }
        static int t_BytesRef_set__offset(t_BytesRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_offset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "offset", arg);
          return -1;
        }

        static PyObject *t_BytesRef_get__uTF8SortedAsUTF16Comparator(t_BytesRef *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getUTF8SortedAsUTF16Comparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_BytesRef_get__uTF8SortedAsUnicodeComparator(t_BytesRef *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getUTF8SortedAsUnicodeComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_BytesRef_get__valid(t_BytesRef *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isValid());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Version::class$ = NULL;
        jmethodID *Version::mids$ = NULL;
        jfieldID *Version::fids$ = NULL;
        bool Version::live$ = false;
        Version *Version::LATEST = NULL;
        Version *Version::LUCENE_30 = NULL;
        Version *Version::LUCENE_31 = NULL;
        Version *Version::LUCENE_32 = NULL;
        Version *Version::LUCENE_33 = NULL;
        Version *Version::LUCENE_34 = NULL;
        Version *Version::LUCENE_35 = NULL;
        Version *Version::LUCENE_36 = NULL;
        Version *Version::LUCENE_3_0 = NULL;
        Version *Version::LUCENE_3_0_0 = NULL;
        Version *Version::LUCENE_3_1 = NULL;
        Version *Version::LUCENE_3_1_0 = NULL;
        Version *Version::LUCENE_3_2 = NULL;
        Version *Version::LUCENE_3_2_0 = NULL;
        Version *Version::LUCENE_3_3 = NULL;
        Version *Version::LUCENE_3_3_0 = NULL;
        Version *Version::LUCENE_3_4 = NULL;
        Version *Version::LUCENE_3_4_0 = NULL;
        Version *Version::LUCENE_3_5 = NULL;
        Version *Version::LUCENE_3_5_0 = NULL;
        Version *Version::LUCENE_3_6 = NULL;
        Version *Version::LUCENE_3_6_0 = NULL;
        Version *Version::LUCENE_40 = NULL;
        Version *Version::LUCENE_41 = NULL;
        Version *Version::LUCENE_42 = NULL;
        Version *Version::LUCENE_43 = NULL;
        Version *Version::LUCENE_44 = NULL;
        Version *Version::LUCENE_45 = NULL;
        Version *Version::LUCENE_46 = NULL;
        Version *Version::LUCENE_47 = NULL;
        Version *Version::LUCENE_48 = NULL;
        Version *Version::LUCENE_4_0 = NULL;
        Version *Version::LUCENE_4_0_0 = NULL;
        Version *Version::LUCENE_4_0_0_ALPHA = NULL;
        Version *Version::LUCENE_4_0_0_BETA = NULL;
        Version *Version::LUCENE_4_1 = NULL;
        Version *Version::LUCENE_4_10_0 = NULL;
        Version *Version::LUCENE_4_10_1 = NULL;
        Version *Version::LUCENE_4_1_0 = NULL;
        Version *Version::LUCENE_4_2 = NULL;
        Version *Version::LUCENE_4_2_0 = NULL;
        Version *Version::LUCENE_4_2_1 = NULL;
        Version *Version::LUCENE_4_3 = NULL;
        Version *Version::LUCENE_4_3_0 = NULL;
        Version *Version::LUCENE_4_3_1 = NULL;
        Version *Version::LUCENE_4_4 = NULL;
        Version *Version::LUCENE_4_4_0 = NULL;
        Version *Version::LUCENE_4_5 = NULL;
        Version *Version::LUCENE_4_5_0 = NULL;
        Version *Version::LUCENE_4_5_1 = NULL;
        Version *Version::LUCENE_4_6 = NULL;
        Version *Version::LUCENE_4_6_0 = NULL;
        Version *Version::LUCENE_4_6_1 = NULL;
        Version *Version::LUCENE_4_7 = NULL;
        Version *Version::LUCENE_4_7_0 = NULL;
        Version *Version::LUCENE_4_7_1 = NULL;
        Version *Version::LUCENE_4_7_2 = NULL;
        Version *Version::LUCENE_4_8 = NULL;
        Version *Version::LUCENE_4_8_0 = NULL;
        Version *Version::LUCENE_4_8_1 = NULL;
        Version *Version::LUCENE_4_9 = NULL;
        Version *Version::LUCENE_4_9_0 = NULL;
        Version *Version::LUCENE_4_9_1 = NULL;
        Version *Version::LUCENE_CURRENT = NULL;

        jclass Version::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Version");

            mids$ = new jmethodID[max_mid];
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_onOrAfter_0d96cf3f] = env->getMethodID(cls, "onOrAfter", "(Lorg/apache/lucene/util/Version;)Z");
            mids$[mid_parse_54fbdb70] = env->getStaticMethodID(cls, "parse", "(Ljava/lang/String;)Lorg/apache/lucene/util/Version;");
            mids$[mid_parseLeniently_54fbdb70] = env->getStaticMethodID(cls, "parseLeniently", "(Ljava/lang/String;)Lorg/apache/lucene/util/Version;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_bugfix] = env->getFieldID(cls, "bugfix", "I");
            fids$[fid_major] = env->getFieldID(cls, "major", "I");
            fids$[fid_minor] = env->getFieldID(cls, "minor", "I");
            fids$[fid_prerelease] = env->getFieldID(cls, "prerelease", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            LATEST = new Version(env->getStaticObjectField(cls, "LATEST", "Lorg/apache/lucene/util/Version;"));
            LUCENE_30 = new Version(env->getStaticObjectField(cls, "LUCENE_30", "Lorg/apache/lucene/util/Version;"));
            LUCENE_31 = new Version(env->getStaticObjectField(cls, "LUCENE_31", "Lorg/apache/lucene/util/Version;"));
            LUCENE_32 = new Version(env->getStaticObjectField(cls, "LUCENE_32", "Lorg/apache/lucene/util/Version;"));
            LUCENE_33 = new Version(env->getStaticObjectField(cls, "LUCENE_33", "Lorg/apache/lucene/util/Version;"));
            LUCENE_34 = new Version(env->getStaticObjectField(cls, "LUCENE_34", "Lorg/apache/lucene/util/Version;"));
            LUCENE_35 = new Version(env->getStaticObjectField(cls, "LUCENE_35", "Lorg/apache/lucene/util/Version;"));
            LUCENE_36 = new Version(env->getStaticObjectField(cls, "LUCENE_36", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_0 = new Version(env->getStaticObjectField(cls, "LUCENE_3_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_0_0 = new Version(env->getStaticObjectField(cls, "LUCENE_3_0_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_1 = new Version(env->getStaticObjectField(cls, "LUCENE_3_1", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_1_0 = new Version(env->getStaticObjectField(cls, "LUCENE_3_1_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_2 = new Version(env->getStaticObjectField(cls, "LUCENE_3_2", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_2_0 = new Version(env->getStaticObjectField(cls, "LUCENE_3_2_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_3 = new Version(env->getStaticObjectField(cls, "LUCENE_3_3", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_3_0 = new Version(env->getStaticObjectField(cls, "LUCENE_3_3_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_4 = new Version(env->getStaticObjectField(cls, "LUCENE_3_4", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_4_0 = new Version(env->getStaticObjectField(cls, "LUCENE_3_4_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_5 = new Version(env->getStaticObjectField(cls, "LUCENE_3_5", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_5_0 = new Version(env->getStaticObjectField(cls, "LUCENE_3_5_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_6 = new Version(env->getStaticObjectField(cls, "LUCENE_3_6", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_6_0 = new Version(env->getStaticObjectField(cls, "LUCENE_3_6_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_40 = new Version(env->getStaticObjectField(cls, "LUCENE_40", "Lorg/apache/lucene/util/Version;"));
            LUCENE_41 = new Version(env->getStaticObjectField(cls, "LUCENE_41", "Lorg/apache/lucene/util/Version;"));
            LUCENE_42 = new Version(env->getStaticObjectField(cls, "LUCENE_42", "Lorg/apache/lucene/util/Version;"));
            LUCENE_43 = new Version(env->getStaticObjectField(cls, "LUCENE_43", "Lorg/apache/lucene/util/Version;"));
            LUCENE_44 = new Version(env->getStaticObjectField(cls, "LUCENE_44", "Lorg/apache/lucene/util/Version;"));
            LUCENE_45 = new Version(env->getStaticObjectField(cls, "LUCENE_45", "Lorg/apache/lucene/util/Version;"));
            LUCENE_46 = new Version(env->getStaticObjectField(cls, "LUCENE_46", "Lorg/apache/lucene/util/Version;"));
            LUCENE_47 = new Version(env->getStaticObjectField(cls, "LUCENE_47", "Lorg/apache/lucene/util/Version;"));
            LUCENE_48 = new Version(env->getStaticObjectField(cls, "LUCENE_48", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_0 = new Version(env->getStaticObjectField(cls, "LUCENE_4_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_0_0 = new Version(env->getStaticObjectField(cls, "LUCENE_4_0_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_0_0_ALPHA = new Version(env->getStaticObjectField(cls, "LUCENE_4_0_0_ALPHA", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_0_0_BETA = new Version(env->getStaticObjectField(cls, "LUCENE_4_0_0_BETA", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_1 = new Version(env->getStaticObjectField(cls, "LUCENE_4_1", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_10_0 = new Version(env->getStaticObjectField(cls, "LUCENE_4_10_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_10_1 = new Version(env->getStaticObjectField(cls, "LUCENE_4_10_1", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_1_0 = new Version(env->getStaticObjectField(cls, "LUCENE_4_1_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_2 = new Version(env->getStaticObjectField(cls, "LUCENE_4_2", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_2_0 = new Version(env->getStaticObjectField(cls, "LUCENE_4_2_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_2_1 = new Version(env->getStaticObjectField(cls, "LUCENE_4_2_1", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_3 = new Version(env->getStaticObjectField(cls, "LUCENE_4_3", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_3_0 = new Version(env->getStaticObjectField(cls, "LUCENE_4_3_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_3_1 = new Version(env->getStaticObjectField(cls, "LUCENE_4_3_1", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_4 = new Version(env->getStaticObjectField(cls, "LUCENE_4_4", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_4_0 = new Version(env->getStaticObjectField(cls, "LUCENE_4_4_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_5 = new Version(env->getStaticObjectField(cls, "LUCENE_4_5", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_5_0 = new Version(env->getStaticObjectField(cls, "LUCENE_4_5_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_5_1 = new Version(env->getStaticObjectField(cls, "LUCENE_4_5_1", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_6 = new Version(env->getStaticObjectField(cls, "LUCENE_4_6", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_6_0 = new Version(env->getStaticObjectField(cls, "LUCENE_4_6_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_6_1 = new Version(env->getStaticObjectField(cls, "LUCENE_4_6_1", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_7 = new Version(env->getStaticObjectField(cls, "LUCENE_4_7", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_7_0 = new Version(env->getStaticObjectField(cls, "LUCENE_4_7_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_7_1 = new Version(env->getStaticObjectField(cls, "LUCENE_4_7_1", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_7_2 = new Version(env->getStaticObjectField(cls, "LUCENE_4_7_2", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_8 = new Version(env->getStaticObjectField(cls, "LUCENE_4_8", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_8_0 = new Version(env->getStaticObjectField(cls, "LUCENE_4_8_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_8_1 = new Version(env->getStaticObjectField(cls, "LUCENE_4_8_1", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_9 = new Version(env->getStaticObjectField(cls, "LUCENE_4_9", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_9_0 = new Version(env->getStaticObjectField(cls, "LUCENE_4_9_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_9_1 = new Version(env->getStaticObjectField(cls, "LUCENE_4_9_1", "Lorg/apache/lucene/util/Version;"));
            LUCENE_CURRENT = new Version(env->getStaticObjectField(cls, "LUCENE_CURRENT", "Lorg/apache/lucene/util/Version;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean Version::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint Version::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean Version::onOrAfter(const Version & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_onOrAfter_0d96cf3f], a0.this$);
        }

        Version Version::parse(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Version(env->callStaticObjectMethod(cls, mids$[mid_parse_54fbdb70], a0.this$));
        }

        Version Version::parseLeniently(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Version(env->callStaticObjectMethod(cls, mids$[mid_parseLeniently_54fbdb70], a0.this$));
        }

        ::java::lang::String Version::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jint Version::_get_bugfix() const
        {
          return env->getIntField(this$, fids$[fid_bugfix]);
        }

        jint Version::_get_major() const
        {
          return env->getIntField(this$, fids$[fid_major]);
        }

        jint Version::_get_minor() const
        {
          return env->getIntField(this$, fids$[fid_minor]);
        }

        jint Version::_get_prerelease() const
        {
          return env->getIntField(this$, fids$[fid_prerelease]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Version_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Version_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Version_equals(t_Version *self, PyObject *args);
        static PyObject *t_Version_hashCode(t_Version *self, PyObject *args);
        static PyObject *t_Version_onOrAfter(t_Version *self, PyObject *arg);
        static PyObject *t_Version_parse(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Version_parseLeniently(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Version_toString(t_Version *self, PyObject *args);
        static PyObject *t_Version_get__bugfix(t_Version *self, void *data);
        static PyObject *t_Version_get__major(t_Version *self, void *data);
        static PyObject *t_Version_get__minor(t_Version *self, void *data);
        static PyObject *t_Version_get__prerelease(t_Version *self, void *data);

        static PyGetSetDef t_Version__fields_[] = {
          DECLARE_GET_FIELD(t_Version, bugfix),
          DECLARE_GET_FIELD(t_Version, major),
          DECLARE_GET_FIELD(t_Version, minor),
          DECLARE_GET_FIELD(t_Version, prerelease),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Version__methods_[] = {
          DECLARE_METHOD(t_Version, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Version, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Version, equals, METH_VARARGS),
          DECLARE_METHOD(t_Version, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_Version, onOrAfter, METH_O),
          DECLARE_METHOD(t_Version, parse, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Version, parseLeniently, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Version, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Version, t_Version, ::java::lang::Object, Version, abstract_init, 0, 0, t_Version__fields_, 0, 0);

        void t_Version::install(PyObject *module)
        {
          installType(&PY_TYPE(Version), module, "Version", 0);
        }

        void t_Version::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "class_", make_descriptor(Version::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "wrapfn_", make_descriptor(t_Version::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Version::initializeClass);
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LATEST", make_descriptor(t_Version::wrap_Object(*Version::LATEST)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_30", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_30)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_31", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_31)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_32", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_32)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_33", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_33)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_34", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_34)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_35", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_35)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_36", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_36)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_0)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_0_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_0_0)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_1", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_1)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_1_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_1_0)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_2", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_2)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_2_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_2_0)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_3", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_3)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_3_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_3_0)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_4", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_4)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_4_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_4_0)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_5", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_5)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_5_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_5_0)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_6", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_6)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_6_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_6_0)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_40", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_40)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_41", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_41)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_42", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_42)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_43", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_43)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_44", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_44)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_45", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_45)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_46", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_46)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_47", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_47)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_48", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_48)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_0)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_0_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_0_0)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_0_0_ALPHA", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_0_0_ALPHA)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_0_0_BETA", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_0_0_BETA)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_1", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_1)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_10_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_10_0)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_10_1", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_10_1)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_1_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_1_0)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_2", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_2)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_2_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_2_0)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_2_1", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_2_1)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_3", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_3)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_3_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_3_0)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_3_1", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_3_1)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_4", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_4)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_4_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_4_0)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_5", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_5)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_5_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_5_0)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_5_1", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_5_1)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_6", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_6)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_6_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_6_0)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_6_1", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_6_1)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_7", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_7)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_7_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_7_0)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_7_1", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_7_1)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_7_2", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_7_2)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_8", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_8)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_8_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_8_0)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_8_1", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_8_1)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_9", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_9)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_9_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_9_0)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_9_1", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_9_1)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_CURRENT", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_CURRENT)));
        }

        static PyObject *t_Version_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Version::initializeClass, 1)))
            return NULL;
          return t_Version::wrap_Object(Version(((t_Version *) arg)->object.this$));
        }
        static PyObject *t_Version_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Version::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Version_equals(t_Version *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(Version), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Version_hashCode(t_Version *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(Version), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Version_onOrAfter(t_Version *self, PyObject *arg)
        {
          Version a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", Version::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.onOrAfter(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "onOrAfter", arg);
          return NULL;
        }

        static PyObject *t_Version_parse(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          Version result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::Version::parse(a0));
            return t_Version::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "parse", arg);
          return NULL;
        }

        static PyObject *t_Version_parseLeniently(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          Version result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::Version::parseLeniently(a0));
            return t_Version::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "parseLeniently", arg);
          return NULL;
        }

        static PyObject *t_Version_toString(t_Version *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(Version), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Version_get__bugfix(t_Version *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_bugfix());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_Version_get__major(t_Version *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_major());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_Version_get__minor(t_Version *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_minor());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_Version_get__prerelease(t_Version *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_prerelease());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortRescorer.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortRescorer::class$ = NULL;
        jmethodID *SortRescorer::mids$ = NULL;
        bool SortRescorer::live$ = false;

        jclass SortRescorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortRescorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a6044f56] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Sort;)V");
            mids$[mid_explain_2b38e623] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Explanation;I)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_rescore_bd3343d7] = env->getMethodID(cls, "rescore", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;I)Lorg/apache/lucene/search/TopDocs;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortRescorer::SortRescorer(const ::org::apache::lucene::search::Sort & a0) : ::org::apache::lucene::search::Rescorer(env->newObject(initializeClass, &mids$, mid_init$_a6044f56, a0.this$)) {}

        ::org::apache::lucene::search::Explanation SortRescorer::explain(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Explanation & a1, jint a2) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_2b38e623], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::TopDocs SortRescorer::rescore(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::TopDocs & a1, jint a2) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_rescore_bd3343d7], a0.this$, a1.this$, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortRescorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortRescorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortRescorer_init_(t_SortRescorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SortRescorer_explain(t_SortRescorer *self, PyObject *args);
        static PyObject *t_SortRescorer_rescore(t_SortRescorer *self, PyObject *args);

        static PyMethodDef t_SortRescorer__methods_[] = {
          DECLARE_METHOD(t_SortRescorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortRescorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortRescorer, explain, METH_VARARGS),
          DECLARE_METHOD(t_SortRescorer, rescore, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortRescorer, t_SortRescorer, ::org::apache::lucene::search::Rescorer, SortRescorer, t_SortRescorer_init_, 0, 0, 0, 0, 0);

        void t_SortRescorer::install(PyObject *module)
        {
          installType(&PY_TYPE(SortRescorer), module, "SortRescorer", 0);
        }

        void t_SortRescorer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortRescorer).tp_dict, "class_", make_descriptor(SortRescorer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortRescorer).tp_dict, "wrapfn_", make_descriptor(t_SortRescorer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortRescorer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SortRescorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortRescorer::initializeClass, 1)))
            return NULL;
          return t_SortRescorer::wrap_Object(SortRescorer(((t_SortRescorer *) arg)->object.this$));
        }
        static PyObject *t_SortRescorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortRescorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortRescorer_init_(t_SortRescorer *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Sort a0((jobject) NULL);
          SortRescorer object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Sort::initializeClass, &a0))
          {
            INT_CALL(object = SortRescorer(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SortRescorer_explain(t_SortRescorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Explanation a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::search::Explanation result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Explanation::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.explain(a0, a1, a2));
            return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SortRescorer), (PyObject *) self, "explain", args, 2);
        }

        static PyObject *t_SortRescorer_rescore(t_SortRescorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::TopDocs a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::search::TopDocs result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.rescore(a0, a1, a2));
            return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SortRescorer), (PyObject *) self, "rescore", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfoReader.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene3x {

          ::java::lang::Class *Lucene3xSegmentInfoReader::class$ = NULL;
          jmethodID *Lucene3xSegmentInfoReader::mids$ = NULL;
          bool Lucene3xSegmentInfoReader::live$ = false;

          jclass Lucene3xSegmentInfoReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfoReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_read_ff05cda4] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/index/SegmentInfo;");
              mids$[mid_readLegacyInfos_1ebc3dab] = env->getStaticMethodID(cls, "readLegacyInfos", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/IndexInput;I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene3xSegmentInfoReader::Lucene3xSegmentInfoReader() : ::org::apache::lucene::codecs::SegmentInfoReader(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::index::SegmentInfo Lucene3xSegmentInfoReader::read(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::index::SegmentInfo(env->callObjectMethod(this$, mids$[mid_read_ff05cda4], a0.this$, a1.this$, a2.this$));
          }

          void Lucene3xSegmentInfoReader::readLegacyInfos(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::store::IndexInput & a2, jint a3)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_readLegacyInfos_1ebc3dab], a0.this$, a1.this$, a2.this$, a3);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene3x {
          static PyObject *t_Lucene3xSegmentInfoReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene3xSegmentInfoReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene3xSegmentInfoReader_init_(t_Lucene3xSegmentInfoReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene3xSegmentInfoReader_read(t_Lucene3xSegmentInfoReader *self, PyObject *args);
          static PyObject *t_Lucene3xSegmentInfoReader_readLegacyInfos(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_Lucene3xSegmentInfoReader__methods_[] = {
            DECLARE_METHOD(t_Lucene3xSegmentInfoReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoReader, read, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoReader, readLegacyInfos, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene3xSegmentInfoReader, t_Lucene3xSegmentInfoReader, ::org::apache::lucene::codecs::SegmentInfoReader, Lucene3xSegmentInfoReader, t_Lucene3xSegmentInfoReader_init_, 0, 0, 0, 0, 0);

          void t_Lucene3xSegmentInfoReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene3xSegmentInfoReader), module, "Lucene3xSegmentInfoReader", 0);
          }

          void t_Lucene3xSegmentInfoReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoReader).tp_dict, "class_", make_descriptor(Lucene3xSegmentInfoReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoReader).tp_dict, "wrapfn_", make_descriptor(t_Lucene3xSegmentInfoReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene3xSegmentInfoReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene3xSegmentInfoReader::initializeClass, 1)))
              return NULL;
            return t_Lucene3xSegmentInfoReader::wrap_Object(Lucene3xSegmentInfoReader(((t_Lucene3xSegmentInfoReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene3xSegmentInfoReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene3xSegmentInfoReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene3xSegmentInfoReader_init_(t_Lucene3xSegmentInfoReader *self, PyObject *args, PyObject *kwds)
          {
            Lucene3xSegmentInfoReader object((jobject) NULL);

            INT_CALL(object = Lucene3xSegmentInfoReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene3xSegmentInfoReader_read(t_Lucene3xSegmentInfoReader *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo result((jobject) NULL);

            if (!parseArgs(args, "ksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.read(a0, a1, a2));
              return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xSegmentInfoReader), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_Lucene3xSegmentInfoReader_readLegacyInfos(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
            ::org::apache::lucene::store::Directory a1((jobject) NULL);
            ::org::apache::lucene::store::IndexInput a2((jobject) NULL);
            jint a3;

            if (!parseArgs(args, "kkkI", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(::org::apache::lucene::codecs::lucene3x::Lucene3xSegmentInfoReader::readLegacyInfos(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "readLegacyInfos", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/AnyQueryNode.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *AnyQueryNode::class$ = NULL;
              jmethodID *AnyQueryNode::mids$ = NULL;
              bool AnyQueryNode::live$ = false;

              jclass AnyQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/AnyQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_0236cab3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;Ljava/lang/CharSequence;I)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getFieldAsString_14c7b5c5] = env->getMethodID(cls, "getFieldAsString", "()Ljava/lang/String;");
                  mids$[mid_getMinimumMatchingElements_54c6a179] = env->getMethodID(cls, "getMinimumMatchingElements", "()I");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              AnyQueryNode::AnyQueryNode(const ::java::util::List & a0, const ::java::lang::CharSequence & a1, jint a2) : ::org::apache::lucene::queryparser::flexible::core::nodes::AndQueryNode(env->newObject(initializeClass, &mids$, mid_init$_0236cab3, a0.this$, a1.this$, a2)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode AnyQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::java::lang::CharSequence AnyQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              ::java::lang::String AnyQueryNode::getFieldAsString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldAsString_14c7b5c5]));
              }

              jint AnyQueryNode::getMinimumMatchingElements() const
              {
                return env->callIntMethod(this$, mids$[mid_getMinimumMatchingElements_54c6a179]);
              }

              void AnyQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              ::java::lang::CharSequence AnyQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String AnyQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_AnyQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AnyQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_AnyQueryNode_init_(t_AnyQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_AnyQueryNode_cloneTree(t_AnyQueryNode *self, PyObject *args);
              static PyObject *t_AnyQueryNode_getField(t_AnyQueryNode *self);
              static PyObject *t_AnyQueryNode_getFieldAsString(t_AnyQueryNode *self);
              static PyObject *t_AnyQueryNode_getMinimumMatchingElements(t_AnyQueryNode *self);
              static PyObject *t_AnyQueryNode_setField(t_AnyQueryNode *self, PyObject *arg);
              static PyObject *t_AnyQueryNode_toQueryString(t_AnyQueryNode *self, PyObject *args);
              static PyObject *t_AnyQueryNode_toString(t_AnyQueryNode *self, PyObject *args);
              static PyObject *t_AnyQueryNode_get__field(t_AnyQueryNode *self, void *data);
              static int t_AnyQueryNode_set__field(t_AnyQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_AnyQueryNode_get__fieldAsString(t_AnyQueryNode *self, void *data);
              static PyObject *t_AnyQueryNode_get__minimumMatchingElements(t_AnyQueryNode *self, void *data);
              static PyGetSetDef t_AnyQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_AnyQueryNode, field),
                DECLARE_GET_FIELD(t_AnyQueryNode, fieldAsString),
                DECLARE_GET_FIELD(t_AnyQueryNode, minimumMatchingElements),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_AnyQueryNode__methods_[] = {
                DECLARE_METHOD(t_AnyQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AnyQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AnyQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_AnyQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_AnyQueryNode, getFieldAsString, METH_NOARGS),
                DECLARE_METHOD(t_AnyQueryNode, getMinimumMatchingElements, METH_NOARGS),
                DECLARE_METHOD(t_AnyQueryNode, setField, METH_O),
                DECLARE_METHOD(t_AnyQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_AnyQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(AnyQueryNode, t_AnyQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::AndQueryNode, AnyQueryNode, t_AnyQueryNode_init_, 0, 0, t_AnyQueryNode__fields_, 0, 0);

              void t_AnyQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(AnyQueryNode), module, "AnyQueryNode", 0);
              }

              void t_AnyQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(AnyQueryNode).tp_dict, "class_", make_descriptor(AnyQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(AnyQueryNode).tp_dict, "wrapfn_", make_descriptor(t_AnyQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(AnyQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AnyQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AnyQueryNode::initializeClass, 1)))
                  return NULL;
                return t_AnyQueryNode::wrap_Object(AnyQueryNode(((t_AnyQueryNode *) arg)->object.this$));
              }
              static PyObject *t_AnyQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AnyQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_AnyQueryNode_init_(t_AnyQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::CharSequence a1((jobject) NULL);
                jint a2;
                AnyQueryNode object((jobject) NULL);

                if (!parseArgs(args, "KOI", ::java::util::List::initializeClass, &::java::lang::PY_TYPE(CharSequence), &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2))
                {
                  INT_CALL(object = AnyQueryNode(a0, a1, a2));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_AnyQueryNode_cloneTree(t_AnyQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(AnyQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_AnyQueryNode_getField(t_AnyQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_AnyQueryNode_getFieldAsString(t_AnyQueryNode *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.getFieldAsString());
                return j2p(result);
              }

              static PyObject *t_AnyQueryNode_getMinimumMatchingElements(t_AnyQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getMinimumMatchingElements());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_AnyQueryNode_setField(t_AnyQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_AnyQueryNode_toQueryString(t_AnyQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(AnyQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_AnyQueryNode_toString(t_AnyQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(AnyQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_AnyQueryNode_get__field(t_AnyQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_AnyQueryNode_set__field(t_AnyQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_AnyQueryNode_get__fieldAsString(t_AnyQueryNode *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getFieldAsString());
                return j2p(value);
              }

              static PyObject *t_AnyQueryNode_get__minimumMatchingElements(t_AnyQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getMinimumMatchingElements());
                return PyInt_FromLong((long) value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortField$Type.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortField$Type::class$ = NULL;
        jmethodID *SortField$Type::mids$ = NULL;
        bool SortField$Type::live$ = false;
        SortField$Type *SortField$Type::BYTE = NULL;
        SortField$Type *SortField$Type::BYTES = NULL;
        SortField$Type *SortField$Type::CUSTOM = NULL;
        SortField$Type *SortField$Type::DOC = NULL;
        SortField$Type *SortField$Type::DOUBLE = NULL;
        SortField$Type *SortField$Type::FLOAT = NULL;
        SortField$Type *SortField$Type::INT = NULL;
        SortField$Type *SortField$Type::LONG = NULL;
        SortField$Type *SortField$Type::REWRITEABLE = NULL;
        SortField$Type *SortField$Type::SCORE = NULL;
        SortField$Type *SortField$Type::SHORT = NULL;
        SortField$Type *SortField$Type::STRING = NULL;
        SortField$Type *SortField$Type::STRING_VAL = NULL;

        jclass SortField$Type::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortField$Type");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_3d40a53b] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/SortField$Type;");
            mids$[mid_values_05ae94bd] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/SortField$Type;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            BYTE = new SortField$Type(env->getStaticObjectField(cls, "BYTE", "Lorg/apache/lucene/search/SortField$Type;"));
            BYTES = new SortField$Type(env->getStaticObjectField(cls, "BYTES", "Lorg/apache/lucene/search/SortField$Type;"));
            CUSTOM = new SortField$Type(env->getStaticObjectField(cls, "CUSTOM", "Lorg/apache/lucene/search/SortField$Type;"));
            DOC = new SortField$Type(env->getStaticObjectField(cls, "DOC", "Lorg/apache/lucene/search/SortField$Type;"));
            DOUBLE = new SortField$Type(env->getStaticObjectField(cls, "DOUBLE", "Lorg/apache/lucene/search/SortField$Type;"));
            FLOAT = new SortField$Type(env->getStaticObjectField(cls, "FLOAT", "Lorg/apache/lucene/search/SortField$Type;"));
            INT = new SortField$Type(env->getStaticObjectField(cls, "INT", "Lorg/apache/lucene/search/SortField$Type;"));
            LONG = new SortField$Type(env->getStaticObjectField(cls, "LONG", "Lorg/apache/lucene/search/SortField$Type;"));
            REWRITEABLE = new SortField$Type(env->getStaticObjectField(cls, "REWRITEABLE", "Lorg/apache/lucene/search/SortField$Type;"));
            SCORE = new SortField$Type(env->getStaticObjectField(cls, "SCORE", "Lorg/apache/lucene/search/SortField$Type;"));
            SHORT = new SortField$Type(env->getStaticObjectField(cls, "SHORT", "Lorg/apache/lucene/search/SortField$Type;"));
            STRING = new SortField$Type(env->getStaticObjectField(cls, "STRING", "Lorg/apache/lucene/search/SortField$Type;"));
            STRING_VAL = new SortField$Type(env->getStaticObjectField(cls, "STRING_VAL", "Lorg/apache/lucene/search/SortField$Type;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortField$Type SortField$Type::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return SortField$Type(env->callStaticObjectMethod(cls, mids$[mid_valueOf_3d40a53b], a0.this$));
        }

        JArray< SortField$Type > SortField$Type::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< SortField$Type >(env->callStaticObjectMethod(cls, mids$[mid_values_05ae94bd]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortField$Type_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortField$Type_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortField$Type_of_(t_SortField$Type *self, PyObject *args);
        static PyObject *t_SortField$Type_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_SortField$Type_values(PyTypeObject *type);
        static PyObject *t_SortField$Type_get__parameters_(t_SortField$Type *self, void *data);
        static PyGetSetDef t_SortField$Type__fields_[] = {
          DECLARE_GET_FIELD(t_SortField$Type, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortField$Type__methods_[] = {
          DECLARE_METHOD(t_SortField$Type, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortField$Type, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortField$Type, of_, METH_VARARGS),
          DECLARE_METHOD(t_SortField$Type, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SortField$Type, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortField$Type, t_SortField$Type, ::java::lang::Enum, SortField$Type, abstract_init, 0, 0, t_SortField$Type__fields_, 0, 0);
        PyObject *t_SortField$Type::wrap_Object(const SortField$Type& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SortField$Type::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SortField$Type *self = (t_SortField$Type *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SortField$Type::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SortField$Type::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SortField$Type *self = (t_SortField$Type *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SortField$Type::install(PyObject *module)
        {
          installType(&PY_TYPE(SortField$Type), module, "SortField$Type", 0);
        }

        void t_SortField$Type::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "class_", make_descriptor(SortField$Type::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "wrapfn_", make_descriptor(t_SortField$Type::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SortField$Type::initializeClass);
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "BYTE", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::BYTE)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "BYTES", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::BYTES)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "CUSTOM", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::CUSTOM)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "DOC", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::DOC)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "DOUBLE", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::DOUBLE)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "FLOAT", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::FLOAT)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "INT", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::INT)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "LONG", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::LONG)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "REWRITEABLE", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::REWRITEABLE)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "SCORE", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::SCORE)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "SHORT", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::SHORT)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "STRING", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::STRING)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "STRING_VAL", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::STRING_VAL)));
        }

        static PyObject *t_SortField$Type_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortField$Type::initializeClass, 1)))
            return NULL;
          return t_SortField$Type::wrap_Object(SortField$Type(((t_SortField$Type *) arg)->object.this$));
        }
        static PyObject *t_SortField$Type_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortField$Type::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SortField$Type_of_(t_SortField$Type *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_SortField$Type_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          SortField$Type result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::SortField$Type::valueOf(a0));
            return t_SortField$Type::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_SortField$Type_values(PyTypeObject *type)
        {
          JArray< SortField$Type > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::SortField$Type::values());
          return JArray<jobject>(result.this$).wrap(t_SortField$Type::wrap_jobject);
        }
        static PyObject *t_SortField$Type_get__parameters_(t_SortField$Type *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/SingleInstanceLockFactory.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *SingleInstanceLockFactory::class$ = NULL;
        jmethodID *SingleInstanceLockFactory::mids$ = NULL;
        bool SingleInstanceLockFactory::live$ = false;

        jclass SingleInstanceLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/SingleInstanceLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SingleInstanceLockFactory::SingleInstanceLockFactory() : ::org::apache::lucene::store::LockFactory(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void SingleInstanceLockFactory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        ::org::apache::lucene::store::Lock SingleInstanceLockFactory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_SingleInstanceLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SingleInstanceLockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SingleInstanceLockFactory_init_(t_SingleInstanceLockFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SingleInstanceLockFactory_clearLock(t_SingleInstanceLockFactory *self, PyObject *args);
        static PyObject *t_SingleInstanceLockFactory_makeLock(t_SingleInstanceLockFactory *self, PyObject *args);

        static PyMethodDef t_SingleInstanceLockFactory__methods_[] = {
          DECLARE_METHOD(t_SingleInstanceLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SingleInstanceLockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SingleInstanceLockFactory, clearLock, METH_VARARGS),
          DECLARE_METHOD(t_SingleInstanceLockFactory, makeLock, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SingleInstanceLockFactory, t_SingleInstanceLockFactory, ::org::apache::lucene::store::LockFactory, SingleInstanceLockFactory, t_SingleInstanceLockFactory_init_, 0, 0, 0, 0, 0);

        void t_SingleInstanceLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(SingleInstanceLockFactory), module, "SingleInstanceLockFactory", 0);
        }

        void t_SingleInstanceLockFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SingleInstanceLockFactory).tp_dict, "class_", make_descriptor(SingleInstanceLockFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SingleInstanceLockFactory).tp_dict, "wrapfn_", make_descriptor(t_SingleInstanceLockFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SingleInstanceLockFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SingleInstanceLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SingleInstanceLockFactory::initializeClass, 1)))
            return NULL;
          return t_SingleInstanceLockFactory::wrap_Object(SingleInstanceLockFactory(((t_SingleInstanceLockFactory *) arg)->object.this$));
        }
        static PyObject *t_SingleInstanceLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SingleInstanceLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SingleInstanceLockFactory_init_(t_SingleInstanceLockFactory *self, PyObject *args, PyObject *kwds)
        {
          SingleInstanceLockFactory object((jobject) NULL);

          INT_CALL(object = SingleInstanceLockFactory());
          self->object = object;

          return 0;
        }

        static PyObject *t_SingleInstanceLockFactory_clearLock(t_SingleInstanceLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SingleInstanceLockFactory), (PyObject *) self, "clearLock", args, 2);
        }

        static PyObject *t_SingleInstanceLockFactory_makeLock(t_SingleInstanceLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SingleInstanceLockFactory), (PyObject *) self, "makeLock", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocsEnum.h"
#include "org/apache/lucene/index/MultiTermsEnum.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/MultiDocsEnum$EnumWithSlice.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocsEnum::class$ = NULL;
        jmethodID *MultiDocsEnum::mids$ = NULL;
        bool MultiDocsEnum::live$ = false;

        jclass MultiDocsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7d44bb06] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/MultiTermsEnum;I)V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_canReuse_4fe73d2c] = env->getMethodID(cls, "canReuse", "(Lorg/apache/lucene/index/MultiTermsEnum;)Z");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
            mids$[mid_getNumSubs_54c6a179] = env->getMethodID(cls, "getNumSubs", "()I");
            mids$[mid_getSubs_1bdfab69] = env->getMethodID(cls, "getSubs", "()[Lorg/apache/lucene/index/MultiDocsEnum$EnumWithSlice;");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiDocsEnum::MultiDocsEnum(const ::org::apache::lucene::index::MultiTermsEnum & a0, jint a1) : ::org::apache::lucene::index::DocsEnum(env->newObject(initializeClass, &mids$, mid_init$_7d44bb06, a0.this$, a1)) {}

        jint MultiDocsEnum::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        jboolean MultiDocsEnum::canReuse(const ::org::apache::lucene::index::MultiTermsEnum & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_canReuse_4fe73d2c], a0.this$);
        }

        jlong MultiDocsEnum::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint MultiDocsEnum::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint MultiDocsEnum::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
        }

        jint MultiDocsEnum::getNumSubs() const
        {
          return env->callIntMethod(this$, mids$[mid_getNumSubs_54c6a179]);
        }

        JArray< ::org::apache::lucene::index::MultiDocsEnum$EnumWithSlice > MultiDocsEnum::getSubs() const
        {
          return JArray< ::org::apache::lucene::index::MultiDocsEnum$EnumWithSlice >(env->callObjectMethod(this$, mids$[mid_getSubs_1bdfab69]));
        }

        jint MultiDocsEnum::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }

        ::java::lang::String MultiDocsEnum::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiDocsEnum_init_(t_MultiDocsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiDocsEnum_advance(t_MultiDocsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsEnum_canReuse(t_MultiDocsEnum *self, PyObject *arg);
        static PyObject *t_MultiDocsEnum_cost(t_MultiDocsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsEnum_docID(t_MultiDocsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsEnum_freq(t_MultiDocsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsEnum_getNumSubs(t_MultiDocsEnum *self);
        static PyObject *t_MultiDocsEnum_getSubs(t_MultiDocsEnum *self);
        static PyObject *t_MultiDocsEnum_nextDoc(t_MultiDocsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsEnum_toString(t_MultiDocsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsEnum_get__numSubs(t_MultiDocsEnum *self, void *data);
        static PyObject *t_MultiDocsEnum_get__subs(t_MultiDocsEnum *self, void *data);
        static PyGetSetDef t_MultiDocsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_MultiDocsEnum, numSubs),
          DECLARE_GET_FIELD(t_MultiDocsEnum, subs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiDocsEnum__methods_[] = {
          DECLARE_METHOD(t_MultiDocsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocsEnum, advance, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsEnum, canReuse, METH_O),
          DECLARE_METHOD(t_MultiDocsEnum, cost, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsEnum, docID, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsEnum, freq, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsEnum, getNumSubs, METH_NOARGS),
          DECLARE_METHOD(t_MultiDocsEnum, getSubs, METH_NOARGS),
          DECLARE_METHOD(t_MultiDocsEnum, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsEnum, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiDocsEnum, t_MultiDocsEnum, ::org::apache::lucene::index::DocsEnum, MultiDocsEnum, t_MultiDocsEnum_init_, 0, 0, t_MultiDocsEnum__fields_, 0, 0);

        void t_MultiDocsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocsEnum), module, "MultiDocsEnum", 0);
          PyDict_SetItemString(PY_TYPE(MultiDocsEnum).tp_dict, "EnumWithSlice", make_descriptor(&PY_TYPE(MultiDocsEnum$EnumWithSlice)));
        }

        void t_MultiDocsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiDocsEnum).tp_dict, "class_", make_descriptor(MultiDocsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiDocsEnum).tp_dict, "wrapfn_", make_descriptor(t_MultiDocsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiDocsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocsEnum::initializeClass, 1)))
            return NULL;
          return t_MultiDocsEnum::wrap_Object(MultiDocsEnum(((t_MultiDocsEnum *) arg)->object.this$));
        }
        static PyObject *t_MultiDocsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiDocsEnum_init_(t_MultiDocsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::MultiTermsEnum a0((jobject) NULL);
          jint a1;
          MultiDocsEnum object((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::MultiTermsEnum::initializeClass, &a0, &a1))
          {
            INT_CALL(object = MultiDocsEnum(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiDocsEnum_advance(t_MultiDocsEnum *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsEnum), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_MultiDocsEnum_canReuse(t_MultiDocsEnum *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MultiTermsEnum a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MultiTermsEnum::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.canReuse(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "canReuse", arg);
          return NULL;
        }

        static PyObject *t_MultiDocsEnum_cost(t_MultiDocsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiDocsEnum), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_MultiDocsEnum_docID(t_MultiDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsEnum), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_MultiDocsEnum_freq(t_MultiDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.freq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsEnum), (PyObject *) self, "freq", args, 2);
        }

        static PyObject *t_MultiDocsEnum_getNumSubs(t_MultiDocsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getNumSubs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MultiDocsEnum_getSubs(t_MultiDocsEnum *self)
        {
          JArray< ::org::apache::lucene::index::MultiDocsEnum$EnumWithSlice > result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubs());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_MultiDocsEnum$EnumWithSlice::wrap_jobject);
        }

        static PyObject *t_MultiDocsEnum_nextDoc(t_MultiDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsEnum), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_MultiDocsEnum_toString(t_MultiDocsEnum *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MultiDocsEnum), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MultiDocsEnum_get__numSubs(t_MultiDocsEnum *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getNumSubs());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_MultiDocsEnum_get__subs(t_MultiDocsEnum *self, void *data)
        {
          JArray< ::org::apache::lucene::index::MultiDocsEnum$EnumWithSlice > value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubs());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_MultiDocsEnum$EnumWithSlice::wrap_jobject);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo$SubInfo.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldFragList$WeightedFragInfo::class$ = NULL;
          jmethodID *FieldFragList$WeightedFragInfo::mids$ = NULL;
          bool FieldFragList$WeightedFragInfo::live$ = false;

          jclass FieldFragList$WeightedFragInfo::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_efced3c4] = env->getMethodID(cls, "<init>", "(IILjava/util/List;F)V");
              mids$[mid_getEndOffset_54c6a179] = env->getMethodID(cls, "getEndOffset", "()I");
              mids$[mid_getStartOffset_54c6a179] = env->getMethodID(cls, "getStartOffset", "()I");
              mids$[mid_getSubInfos_87851566] = env->getMethodID(cls, "getSubInfos", "()Ljava/util/List;");
              mids$[mid_getTotalBoost_54c6a176] = env->getMethodID(cls, "getTotalBoost", "()F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldFragList$WeightedFragInfo::FieldFragList$WeightedFragInfo(jint a0, jint a1, const ::java::util::List & a2, jfloat a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_efced3c4, a0, a1, a2.this$, a3)) {}

          jint FieldFragList$WeightedFragInfo::getEndOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndOffset_54c6a179]);
          }

          jint FieldFragList$WeightedFragInfo::getStartOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getStartOffset_54c6a179]);
          }

          ::java::util::List FieldFragList$WeightedFragInfo::getSubInfos() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getSubInfos_87851566]));
          }

          jfloat FieldFragList$WeightedFragInfo::getTotalBoost() const
          {
            return env->callFloatMethod(this$, mids$[mid_getTotalBoost_54c6a176]);
          }

          ::java::lang::String FieldFragList$WeightedFragInfo::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldFragList$WeightedFragInfo_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldFragList$WeightedFragInfo_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldFragList$WeightedFragInfo_init_(t_FieldFragList$WeightedFragInfo *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldFragList$WeightedFragInfo_getEndOffset(t_FieldFragList$WeightedFragInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo_getStartOffset(t_FieldFragList$WeightedFragInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo_getSubInfos(t_FieldFragList$WeightedFragInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo_getTotalBoost(t_FieldFragList$WeightedFragInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo_toString(t_FieldFragList$WeightedFragInfo *self, PyObject *args);
          static PyObject *t_FieldFragList$WeightedFragInfo_get__endOffset(t_FieldFragList$WeightedFragInfo *self, void *data);
          static PyObject *t_FieldFragList$WeightedFragInfo_get__startOffset(t_FieldFragList$WeightedFragInfo *self, void *data);
          static PyObject *t_FieldFragList$WeightedFragInfo_get__subInfos(t_FieldFragList$WeightedFragInfo *self, void *data);
          static PyObject *t_FieldFragList$WeightedFragInfo_get__totalBoost(t_FieldFragList$WeightedFragInfo *self, void *data);
          static PyGetSetDef t_FieldFragList$WeightedFragInfo__fields_[] = {
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo, endOffset),
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo, startOffset),
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo, subInfos),
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo, totalBoost),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldFragList$WeightedFragInfo__methods_[] = {
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, getEndOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, getStartOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, getSubInfos, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, getTotalBoost, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldFragList$WeightedFragInfo, t_FieldFragList$WeightedFragInfo, ::java::lang::Object, FieldFragList$WeightedFragInfo, t_FieldFragList$WeightedFragInfo_init_, 0, 0, t_FieldFragList$WeightedFragInfo__fields_, 0, 0);

          void t_FieldFragList$WeightedFragInfo::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldFragList$WeightedFragInfo), module, "FieldFragList$WeightedFragInfo", 0);
            PyDict_SetItemString(PY_TYPE(FieldFragList$WeightedFragInfo).tp_dict, "SubInfo", make_descriptor(&PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo)));
          }

          void t_FieldFragList$WeightedFragInfo::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldFragList$WeightedFragInfo).tp_dict, "class_", make_descriptor(FieldFragList$WeightedFragInfo::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldFragList$WeightedFragInfo).tp_dict, "wrapfn_", make_descriptor(t_FieldFragList$WeightedFragInfo::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldFragList$WeightedFragInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldFragList$WeightedFragInfo::initializeClass, 1)))
              return NULL;
            return t_FieldFragList$WeightedFragInfo::wrap_Object(FieldFragList$WeightedFragInfo(((t_FieldFragList$WeightedFragInfo *) arg)->object.this$));
          }
          static PyObject *t_FieldFragList$WeightedFragInfo_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldFragList$WeightedFragInfo::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldFragList$WeightedFragInfo_init_(t_FieldFragList$WeightedFragInfo *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            ::java::util::List a2((jobject) NULL);
            PyTypeObject **p2;
            jfloat a3;
            FieldFragList$WeightedFragInfo object((jobject) NULL);

            if (!parseArgs(args, "IIKF", ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_, &a3))
            {
              INT_CALL(object = FieldFragList$WeightedFragInfo(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_getEndOffset(t_FieldFragList$WeightedFragInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_getStartOffset(t_FieldFragList$WeightedFragInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStartOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_getSubInfos(t_FieldFragList$WeightedFragInfo *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getSubInfos());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo));
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_getTotalBoost(t_FieldFragList$WeightedFragInfo *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getTotalBoost());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_toString(t_FieldFragList$WeightedFragInfo *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FieldFragList$WeightedFragInfo), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_get__endOffset(t_FieldFragList$WeightedFragInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_get__startOffset(t_FieldFragList$WeightedFragInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStartOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_get__subInfos(t_FieldFragList$WeightedFragInfo *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getSubInfos());
            return ::java::util::t_List::wrap_Object(value);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_get__totalBoost(t_FieldFragList$WeightedFragInfo *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getTotalBoost());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$postfix_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$postfix_return::class$ = NULL;
          jmethodID *JavascriptParser$postfix_return::mids$ = NULL;
          bool JavascriptParser$postfix_return::live$ = false;

          jclass JavascriptParser$postfix_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$postfix_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$postfix_return::JavascriptParser$postfix_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$postfix_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$postfix_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$postfix_return_init_(t_JavascriptParser$postfix_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$postfix_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$postfix_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$postfix_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$postfix_return, t_JavascriptParser$postfix_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$postfix_return, t_JavascriptParser$postfix_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$postfix_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$postfix_return), module, "JavascriptParser$postfix_return", 0);
          }

          void t_JavascriptParser$postfix_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$postfix_return).tp_dict, "class_", make_descriptor(JavascriptParser$postfix_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$postfix_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$postfix_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$postfix_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$postfix_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$postfix_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$postfix_return::wrap_Object(JavascriptParser$postfix_return(((t_JavascriptParser$postfix_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$postfix_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$postfix_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$postfix_return_init_(t_JavascriptParser$postfix_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$postfix_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$postfix_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/PostingsWriterBase.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *PostingsWriterBase::class$ = NULL;
        jmethodID *PostingsWriterBase::mids$ = NULL;
        bool PostingsWriterBase::live$ = false;

        jclass PostingsWriterBase::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/PostingsWriterBase");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_encodeTerm_1ec2f80c] = env->getMethodID(cls, "encodeTerm", "([JLorg/apache/lucene/store/DataOutput;Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Z)V");
            mids$[mid_finishTerm_47bdc871] = env->getMethodID(cls, "finishTerm", "(Lorg/apache/lucene/codecs/BlockTermState;)V");
            mids$[mid_init_faad620a] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/store/IndexOutput;)V");
            mids$[mid_newTermState_9f93879c] = env->getMethodID(cls, "newTermState", "()Lorg/apache/lucene/codecs/BlockTermState;");
            mids$[mid_setField_5f0ccd17] = env->getMethodID(cls, "setField", "(Lorg/apache/lucene/index/FieldInfo;)I");
            mids$[mid_startTerm_54c6a166] = env->getMethodID(cls, "startTerm", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void PostingsWriterBase::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void PostingsWriterBase::encodeTerm(const JArray< jlong > & a0, const ::org::apache::lucene::store::DataOutput & a1, const ::org::apache::lucene::index::FieldInfo & a2, const ::org::apache::lucene::codecs::BlockTermState & a3, jboolean a4) const
        {
          env->callVoidMethod(this$, mids$[mid_encodeTerm_1ec2f80c], a0.this$, a1.this$, a2.this$, a3.this$, a4);
        }

        void PostingsWriterBase::finishTerm(const ::org::apache::lucene::codecs::BlockTermState & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_finishTerm_47bdc871], a0.this$);
        }

        void PostingsWriterBase::init(const ::org::apache::lucene::store::IndexOutput & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_init_faad620a], a0.this$);
        }

        ::org::apache::lucene::codecs::BlockTermState PostingsWriterBase::newTermState() const
        {
          return ::org::apache::lucene::codecs::BlockTermState(env->callObjectMethod(this$, mids$[mid_newTermState_9f93879c]));
        }

        jint PostingsWriterBase::setField(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_setField_5f0ccd17], a0.this$);
        }

        void PostingsWriterBase::startTerm() const
        {
          env->callVoidMethod(this$, mids$[mid_startTerm_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_PostingsWriterBase_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsWriterBase_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsWriterBase_close(t_PostingsWriterBase *self);
        static PyObject *t_PostingsWriterBase_encodeTerm(t_PostingsWriterBase *self, PyObject *args);
        static PyObject *t_PostingsWriterBase_finishTerm(t_PostingsWriterBase *self, PyObject *arg);
        static PyObject *t_PostingsWriterBase_init(t_PostingsWriterBase *self, PyObject *arg);
        static PyObject *t_PostingsWriterBase_newTermState(t_PostingsWriterBase *self);
        static PyObject *t_PostingsWriterBase_setField(t_PostingsWriterBase *self, PyObject *arg);
        static PyObject *t_PostingsWriterBase_startTerm(t_PostingsWriterBase *self);
        static int t_PostingsWriterBase_set__field(t_PostingsWriterBase *self, PyObject *arg, void *data);
        static PyGetSetDef t_PostingsWriterBase__fields_[] = {
          DECLARE_SET_FIELD(t_PostingsWriterBase, field),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PostingsWriterBase__methods_[] = {
          DECLARE_METHOD(t_PostingsWriterBase, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsWriterBase, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsWriterBase, close, METH_NOARGS),
          DECLARE_METHOD(t_PostingsWriterBase, encodeTerm, METH_VARARGS),
          DECLARE_METHOD(t_PostingsWriterBase, finishTerm, METH_O),
          DECLARE_METHOD(t_PostingsWriterBase, init, METH_O),
          DECLARE_METHOD(t_PostingsWriterBase, newTermState, METH_NOARGS),
          DECLARE_METHOD(t_PostingsWriterBase, setField, METH_O),
          DECLARE_METHOD(t_PostingsWriterBase, startTerm, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PostingsWriterBase, t_PostingsWriterBase, ::org::apache::lucene::codecs::PostingsConsumer, PostingsWriterBase, abstract_init, 0, 0, t_PostingsWriterBase__fields_, 0, 0);

        void t_PostingsWriterBase::install(PyObject *module)
        {
          installType(&PY_TYPE(PostingsWriterBase), module, "PostingsWriterBase", 0);
        }

        void t_PostingsWriterBase::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PostingsWriterBase).tp_dict, "class_", make_descriptor(PostingsWriterBase::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PostingsWriterBase).tp_dict, "wrapfn_", make_descriptor(t_PostingsWriterBase::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PostingsWriterBase).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PostingsWriterBase_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PostingsWriterBase::initializeClass, 1)))
            return NULL;
          return t_PostingsWriterBase::wrap_Object(PostingsWriterBase(((t_PostingsWriterBase *) arg)->object.this$));
        }
        static PyObject *t_PostingsWriterBase_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PostingsWriterBase::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PostingsWriterBase_close(t_PostingsWriterBase *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_PostingsWriterBase_encodeTerm(t_PostingsWriterBase *self, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          ::org::apache::lucene::store::DataOutput a1((jobject) NULL);
          ::org::apache::lucene::index::FieldInfo a2((jobject) NULL);
          ::org::apache::lucene::codecs::BlockTermState a3((jobject) NULL);
          jboolean a4;

          if (!parseArgs(args, "[JkkkZ", ::org::apache::lucene::store::DataOutput::initializeClass, ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(self->object.encodeTerm(a0, a1, a2, a3, a4));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "encodeTerm", args);
          return NULL;
        }

        static PyObject *t_PostingsWriterBase_finishTerm(t_PostingsWriterBase *self, PyObject *arg)
        {
          ::org::apache::lucene::codecs::BlockTermState a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0))
          {
            OBJ_CALL(self->object.finishTerm(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "finishTerm", arg);
          return NULL;
        }

        static PyObject *t_PostingsWriterBase_init(t_PostingsWriterBase *self, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexOutput a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexOutput::initializeClass, &a0))
          {
            OBJ_CALL(self->object.init(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "init", arg);
          return NULL;
        }

        static PyObject *t_PostingsWriterBase_newTermState(t_PostingsWriterBase *self)
        {
          ::org::apache::lucene::codecs::BlockTermState result((jobject) NULL);
          OBJ_CALL(result = self->object.newTermState());
          return ::org::apache::lucene::codecs::t_BlockTermState::wrap_Object(result);
        }

        static PyObject *t_PostingsWriterBase_setField(t_PostingsWriterBase *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setField(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "setField", arg);
          return NULL;
        }

        static PyObject *t_PostingsWriterBase_startTerm(t_PostingsWriterBase *self)
        {
          OBJ_CALL(self->object.startTerm());
          Py_RETURN_NONE;
        }

        static int t_PostingsWriterBase_set__field(t_PostingsWriterBase *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::FieldInfo value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &value))
            {
              INT_CALL(self->object.setField(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "field", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternCaptureGroupTokenFilter.h"
#include "java/util/regex/Pattern.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternCaptureGroupTokenFilter::class$ = NULL;
          jmethodID *PatternCaptureGroupTokenFilter::mids$ = NULL;
          bool PatternCaptureGroupTokenFilter::live$ = false;

          jclass PatternCaptureGroupTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternCaptureGroupTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d6bd0c49] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Z[Ljava/util/regex/Pattern;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternCaptureGroupTokenFilter::PatternCaptureGroupTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jboolean a1, const JArray< ::java::util::regex::Pattern > & a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d6bd0c49, a0.this$, a1, a2.this$)) {}

          jboolean PatternCaptureGroupTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void PatternCaptureGroupTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternCaptureGroupTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternCaptureGroupTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternCaptureGroupTokenFilter_init_(t_PatternCaptureGroupTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternCaptureGroupTokenFilter_incrementToken(t_PatternCaptureGroupTokenFilter *self, PyObject *args);
          static PyObject *t_PatternCaptureGroupTokenFilter_reset(t_PatternCaptureGroupTokenFilter *self, PyObject *args);

          static PyMethodDef t_PatternCaptureGroupTokenFilter__methods_[] = {
            DECLARE_METHOD(t_PatternCaptureGroupTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternCaptureGroupTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternCaptureGroupTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_PatternCaptureGroupTokenFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternCaptureGroupTokenFilter, t_PatternCaptureGroupTokenFilter, ::org::apache::lucene::analysis::TokenFilter, PatternCaptureGroupTokenFilter, t_PatternCaptureGroupTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_PatternCaptureGroupTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternCaptureGroupTokenFilter), module, "PatternCaptureGroupTokenFilter", 0);
          }

          void t_PatternCaptureGroupTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternCaptureGroupTokenFilter).tp_dict, "class_", make_descriptor(PatternCaptureGroupTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternCaptureGroupTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_PatternCaptureGroupTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternCaptureGroupTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternCaptureGroupTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternCaptureGroupTokenFilter::initializeClass, 1)))
              return NULL;
            return t_PatternCaptureGroupTokenFilter::wrap_Object(PatternCaptureGroupTokenFilter(((t_PatternCaptureGroupTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_PatternCaptureGroupTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternCaptureGroupTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternCaptureGroupTokenFilter_init_(t_PatternCaptureGroupTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            jboolean a1;
            JArray< ::java::util::regex::Pattern > a2((jobject) NULL);
            PatternCaptureGroupTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kZ[k", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::regex::Pattern::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = PatternCaptureGroupTokenFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternCaptureGroupTokenFilter_incrementToken(t_PatternCaptureGroupTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PatternCaptureGroupTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_PatternCaptureGroupTokenFilter_reset(t_PatternCaptureGroupTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PatternCaptureGroupTokenFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40PostingsFormat::class$ = NULL;
          jmethodID *Lucene40PostingsFormat::mids$ = NULL;
          bool Lucene40PostingsFormat::live$ = false;

          jclass Lucene40PostingsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsConsumer_a15793c6] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/FieldsConsumer;");
              mids$[mid_fieldsProducer_c86c62bc] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/FieldsProducer;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40PostingsFormat::Lucene40PostingsFormat() : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::FieldsConsumer Lucene40PostingsFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_a15793c6], a0.this$));
          }

          ::org::apache::lucene::codecs::FieldsProducer Lucene40PostingsFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_c86c62bc], a0.this$));
          }

          ::java::lang::String Lucene40PostingsFormat::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40PostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40PostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40PostingsFormat_init_(t_Lucene40PostingsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40PostingsFormat_fieldsConsumer(t_Lucene40PostingsFormat *self, PyObject *args);
          static PyObject *t_Lucene40PostingsFormat_fieldsProducer(t_Lucene40PostingsFormat *self, PyObject *args);
          static PyObject *t_Lucene40PostingsFormat_toString(t_Lucene40PostingsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene40PostingsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40PostingsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40PostingsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40PostingsFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsFormat, fieldsProducer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsFormat, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40PostingsFormat, t_Lucene40PostingsFormat, ::org::apache::lucene::codecs::PostingsFormat, Lucene40PostingsFormat, t_Lucene40PostingsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene40PostingsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40PostingsFormat), module, "Lucene40PostingsFormat", 0);
          }

          void t_Lucene40PostingsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsFormat).tp_dict, "class_", make_descriptor(Lucene40PostingsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40PostingsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40PostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40PostingsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40PostingsFormat::wrap_Object(Lucene40PostingsFormat(((t_Lucene40PostingsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40PostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40PostingsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40PostingsFormat_init_(t_Lucene40PostingsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40PostingsFormat object((jobject) NULL);

            INT_CALL(object = Lucene40PostingsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40PostingsFormat_fieldsConsumer(t_Lucene40PostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_FieldsConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_Lucene40PostingsFormat_fieldsProducer(t_Lucene40PostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }

          static PyObject *t_Lucene40PostingsFormat_toString(t_Lucene40PostingsFormat *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsFormat), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/SuggestWordQueue.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *SuggestWordQueue::class$ = NULL;
          jmethodID *SuggestWordQueue::mids$ = NULL;
          bool SuggestWordQueue::live$ = false;
          ::java::util::Comparator *SuggestWordQueue::DEFAULT_COMPARATOR = NULL;

          jclass SuggestWordQueue::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/SuggestWordQueue");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_init$_4ba868a3] = env->getMethodID(cls, "<init>", "(ILjava/util/Comparator;)V");
              mids$[mid_lessThan_2e903be2] = env->getMethodID(cls, "lessThan", "(Lorg/apache/lucene/search/spell/SuggestWord;Lorg/apache/lucene/search/spell/SuggestWord;)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_COMPARATOR = new ::java::util::Comparator(env->getStaticObjectField(cls, "DEFAULT_COMPARATOR", "Ljava/util/Comparator;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SuggestWordQueue::SuggestWordQueue(jint a0) : ::org::apache::lucene::util::PriorityQueue(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          SuggestWordQueue::SuggestWordQueue(jint a0, const ::java::util::Comparator & a1) : ::org::apache::lucene::util::PriorityQueue(env->newObject(initializeClass, &mids$, mid_init$_4ba868a3, a0, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_SuggestWordQueue_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestWordQueue_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestWordQueue_of_(t_SuggestWordQueue *self, PyObject *args);
          static int t_SuggestWordQueue_init_(t_SuggestWordQueue *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SuggestWordQueue_get__parameters_(t_SuggestWordQueue *self, void *data);
          static PyGetSetDef t_SuggestWordQueue__fields_[] = {
            DECLARE_GET_FIELD(t_SuggestWordQueue, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SuggestWordQueue__methods_[] = {
            DECLARE_METHOD(t_SuggestWordQueue, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWordQueue, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWordQueue, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SuggestWordQueue, t_SuggestWordQueue, ::org::apache::lucene::util::PriorityQueue, SuggestWordQueue, t_SuggestWordQueue_init_, 0, 0, t_SuggestWordQueue__fields_, 0, 0);
          PyObject *t_SuggestWordQueue::wrap_Object(const SuggestWordQueue& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SuggestWordQueue::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SuggestWordQueue *self = (t_SuggestWordQueue *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SuggestWordQueue::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SuggestWordQueue::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SuggestWordQueue *self = (t_SuggestWordQueue *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SuggestWordQueue::install(PyObject *module)
          {
            installType(&PY_TYPE(SuggestWordQueue), module, "SuggestWordQueue", 0);
          }

          void t_SuggestWordQueue::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SuggestWordQueue).tp_dict, "class_", make_descriptor(SuggestWordQueue::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SuggestWordQueue).tp_dict, "wrapfn_", make_descriptor(t_SuggestWordQueue::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SuggestWordQueue).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SuggestWordQueue::initializeClass);
            PyDict_SetItemString(PY_TYPE(SuggestWordQueue).tp_dict, "DEFAULT_COMPARATOR", make_descriptor(::java::util::t_Comparator::wrap_Object(*SuggestWordQueue::DEFAULT_COMPARATOR)));
          }

          static PyObject *t_SuggestWordQueue_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SuggestWordQueue::initializeClass, 1)))
              return NULL;
            return t_SuggestWordQueue::wrap_Object(SuggestWordQueue(((t_SuggestWordQueue *) arg)->object.this$));
          }
          static PyObject *t_SuggestWordQueue_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SuggestWordQueue::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SuggestWordQueue_of_(t_SuggestWordQueue *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SuggestWordQueue_init_(t_SuggestWordQueue *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                SuggestWordQueue object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = SuggestWordQueue(a0));
                  self->object = object;
                  self->parameters[0] = &::org::apache::lucene::search::spell::PY_TYPE(SuggestWord);
                  break;
                }
              }
              goto err;
             case 2:
              {
                jint a0;
                ::java::util::Comparator a1((jobject) NULL);
                PyTypeObject **p1;
                SuggestWordQueue object((jobject) NULL);

                if (!parseArgs(args, "IK", ::java::util::Comparator::initializeClass, &a0, &a1, &p1, ::java::util::t_Comparator::parameters_))
                {
                  INT_CALL(object = SuggestWordQueue(a0, a1));
                  self->object = object;
                  self->parameters[0] = &::org::apache::lucene::search::spell::PY_TYPE(SuggestWord);
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_SuggestWordQueue_get__parameters_(t_SuggestWordQueue *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Trie.h"
#include "org/egothor/stemmer/Row.h"
#include "java/lang/Class.h"
#include "java/io/DataOutput.h"
#include "java/lang/CharSequence.h"
#include "java/util/List.h"
#include "java/io/PrintStream.h"
#include "org/egothor/stemmer/Reduce.h"
#include "java/io/DataInput.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Trie::class$ = NULL;
      jmethodID *Trie::mids$ = NULL;
      bool Trie::live$ = false;

      jclass Trie::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Trie");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
          mids$[mid_init$_e051d6a6] = env->getMethodID(cls, "<init>", "(Ljava/io/DataInput;)V");
          mids$[mid_init$_ed85fe83] = env->getMethodID(cls, "<init>", "(ZILjava/util/List;Ljava/util/List;)V");
          mids$[mid_getAll_2fa560b3] = env->getMethodID(cls, "getAll", "(Ljava/lang/CharSequence;)[Ljava/lang/CharSequence;");
          mids$[mid_getCells_54c6a179] = env->getMethodID(cls, "getCells", "()I");
          mids$[mid_getCellsPnt_54c6a179] = env->getMethodID(cls, "getCellsPnt", "()I");
          mids$[mid_getCellsVal_54c6a179] = env->getMethodID(cls, "getCellsVal", "()I");
          mids$[mid_getFully_856f5013] = env->getMethodID(cls, "getFully", "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;");
          mids$[mid_getLastOnPath_856f5013] = env->getMethodID(cls, "getLastOnPath", "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;");
          mids$[mid_printInfo_bd6af9ff] = env->getMethodID(cls, "printInfo", "(Ljava/io/PrintStream;Ljava/lang/CharSequence;)V");
          mids$[mid_reduce_6ee87cd1] = env->getMethodID(cls, "reduce", "(Lorg/egothor/stemmer/Reduce;)Lorg/egothor/stemmer/Trie;");
          mids$[mid_store_cfb051e6] = env->getMethodID(cls, "store", "(Ljava/io/DataOutput;)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Trie::Trie(jboolean a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

      Trie::Trie(const ::java::io::DataInput & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e051d6a6, a0.this$)) {}

      Trie::Trie(jboolean a0, jint a1, const ::java::util::List & a2, const ::java::util::List & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ed85fe83, a0, a1, a2.this$, a3.this$)) {}

      JArray< ::java::lang::CharSequence > Trie::getAll(const ::java::lang::CharSequence & a0) const
      {
        return JArray< ::java::lang::CharSequence >(env->callObjectMethod(this$, mids$[mid_getAll_2fa560b3], a0.this$));
      }

      jint Trie::getCells() const
      {
        return env->callIntMethod(this$, mids$[mid_getCells_54c6a179]);
      }

      jint Trie::getCellsPnt() const
      {
        return env->callIntMethod(this$, mids$[mid_getCellsPnt_54c6a179]);
      }

      jint Trie::getCellsVal() const
      {
        return env->callIntMethod(this$, mids$[mid_getCellsVal_54c6a179]);
      }

      ::java::lang::CharSequence Trie::getFully(const ::java::lang::CharSequence & a0) const
      {
        return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getFully_856f5013], a0.this$));
      }

      ::java::lang::CharSequence Trie::getLastOnPath(const ::java::lang::CharSequence & a0) const
      {
        return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getLastOnPath_856f5013], a0.this$));
      }

      void Trie::printInfo(const ::java::io::PrintStream & a0, const ::java::lang::CharSequence & a1) const
      {
        env->callVoidMethod(this$, mids$[mid_printInfo_bd6af9ff], a0.this$, a1.this$);
      }

      Trie Trie::reduce(const ::org::egothor::stemmer::Reduce & a0) const
      {
        return Trie(env->callObjectMethod(this$, mids$[mid_reduce_6ee87cd1], a0.this$));
      }

      void Trie::store(const ::java::io::DataOutput & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_store_cfb051e6], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Trie_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Trie_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Trie_init_(t_Trie *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Trie_getAll(t_Trie *self, PyObject *arg);
      static PyObject *t_Trie_getCells(t_Trie *self);
      static PyObject *t_Trie_getCellsPnt(t_Trie *self);
      static PyObject *t_Trie_getCellsVal(t_Trie *self);
      static PyObject *t_Trie_getFully(t_Trie *self, PyObject *arg);
      static PyObject *t_Trie_getLastOnPath(t_Trie *self, PyObject *arg);
      static PyObject *t_Trie_printInfo(t_Trie *self, PyObject *args);
      static PyObject *t_Trie_reduce(t_Trie *self, PyObject *arg);
      static PyObject *t_Trie_store(t_Trie *self, PyObject *arg);
      static PyObject *t_Trie_get__cells(t_Trie *self, void *data);
      static PyObject *t_Trie_get__cellsPnt(t_Trie *self, void *data);
      static PyObject *t_Trie_get__cellsVal(t_Trie *self, void *data);
      static PyGetSetDef t_Trie__fields_[] = {
        DECLARE_GET_FIELD(t_Trie, cells),
        DECLARE_GET_FIELD(t_Trie, cellsPnt),
        DECLARE_GET_FIELD(t_Trie, cellsVal),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_Trie__methods_[] = {
        DECLARE_METHOD(t_Trie, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Trie, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Trie, getAll, METH_O),
        DECLARE_METHOD(t_Trie, getCells, METH_NOARGS),
        DECLARE_METHOD(t_Trie, getCellsPnt, METH_NOARGS),
        DECLARE_METHOD(t_Trie, getCellsVal, METH_NOARGS),
        DECLARE_METHOD(t_Trie, getFully, METH_O),
        DECLARE_METHOD(t_Trie, getLastOnPath, METH_O),
        DECLARE_METHOD(t_Trie, printInfo, METH_VARARGS),
        DECLARE_METHOD(t_Trie, reduce, METH_O),
        DECLARE_METHOD(t_Trie, store, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Trie, t_Trie, ::java::lang::Object, Trie, t_Trie_init_, 0, 0, t_Trie__fields_, 0, 0);

      void t_Trie::install(PyObject *module)
      {
        installType(&PY_TYPE(Trie), module, "Trie", 0);
      }

      void t_Trie::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Trie).tp_dict, "class_", make_descriptor(Trie::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Trie).tp_dict, "wrapfn_", make_descriptor(t_Trie::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Trie).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Trie_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Trie::initializeClass, 1)))
          return NULL;
        return t_Trie::wrap_Object(Trie(((t_Trie *) arg)->object.this$));
      }
      static PyObject *t_Trie_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Trie::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Trie_init_(t_Trie *self, PyObject *args, PyObject *kwds)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            jboolean a0;
            Trie object((jobject) NULL);

            if (!parseArgs(args, "Z", &a0))
            {
              INT_CALL(object = Trie(a0));
              self->object = object;
              break;
            }
          }
          {
            ::java::io::DataInput a0((jobject) NULL);
            Trie object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::DataInput::initializeClass, &a0))
            {
              INT_CALL(object = Trie(a0));
              self->object = object;
              break;
            }
          }
          goto err;
         case 4:
          {
            jboolean a0;
            jint a1;
            ::java::util::List a2((jobject) NULL);
            PyTypeObject **p2;
            ::java::util::List a3((jobject) NULL);
            PyTypeObject **p3;
            Trie object((jobject) NULL);

            if (!parseArgs(args, "ZIKK", ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_, &a3, &p3, ::java::util::t_List::parameters_))
            {
              INT_CALL(object = Trie(a0, a1, a2, a3));
              self->object = object;
              break;
            }
          }
         default:
         err:
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_Trie_getAll(t_Trie *self, PyObject *arg)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        JArray< ::java::lang::CharSequence > result((jobject) NULL);

        if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getAll(a0));
          return JArray<jobject>(result.this$).wrap(::java::lang::t_CharSequence::wrap_jobject);
        }

        PyErr_SetArgsError((PyObject *) self, "getAll", arg);
        return NULL;
      }

      static PyObject *t_Trie_getCells(t_Trie *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCells());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_Trie_getCellsPnt(t_Trie *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCellsPnt());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_Trie_getCellsVal(t_Trie *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCellsVal());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_Trie_getFully(t_Trie *self, PyObject *arg)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence result((jobject) NULL);

        if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getFully(a0));
          return ::java::lang::t_CharSequence::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "getFully", arg);
        return NULL;
      }

      static PyObject *t_Trie_getLastOnPath(t_Trie *self, PyObject *arg)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence result((jobject) NULL);

        if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getLastOnPath(a0));
          return ::java::lang::t_CharSequence::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "getLastOnPath", arg);
        return NULL;
      }

      static PyObject *t_Trie_printInfo(t_Trie *self, PyObject *args)
      {
        ::java::io::PrintStream a0((jobject) NULL);
        ::java::lang::CharSequence a1((jobject) NULL);

        if (!parseArgs(args, "kO", ::java::io::PrintStream::initializeClass, &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
        {
          OBJ_CALL(self->object.printInfo(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "printInfo", args);
        return NULL;
      }

      static PyObject *t_Trie_reduce(t_Trie *self, PyObject *arg)
      {
        ::org::egothor::stemmer::Reduce a0((jobject) NULL);
        Trie result((jobject) NULL);

        if (!parseArg(arg, "k", ::org::egothor::stemmer::Reduce::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.reduce(a0));
          return t_Trie::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "reduce", arg);
        return NULL;
      }

      static PyObject *t_Trie_store(t_Trie *self, PyObject *arg)
      {
        ::java::io::DataOutput a0((jobject) NULL);

        if (!parseArg(arg, "k", ::java::io::DataOutput::initializeClass, &a0))
        {
          OBJ_CALL(self->object.store(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "store", arg);
        return NULL;
      }

      static PyObject *t_Trie_get__cells(t_Trie *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCells());
        return PyInt_FromLong((long) value);
      }

      static PyObject *t_Trie_get__cellsPnt(t_Trie *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCellsPnt());
        return PyInt_FromLong((long) value);
      }

      static PyObject *t_Trie_get__cellsVal(t_Trie *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCellsVal());
        return PyInt_FromLong((long) value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/ItalianStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *ItalianStemmer::class$ = NULL;
        jmethodID *ItalianStemmer::mids$ = NULL;
        bool ItalianStemmer::live$ = false;

        jclass ItalianStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/ItalianStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ItalianStemmer::ItalianStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean ItalianStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint ItalianStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean ItalianStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_ItalianStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ItalianStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ItalianStemmer_init_(t_ItalianStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ItalianStemmer_equals(t_ItalianStemmer *self, PyObject *args);
        static PyObject *t_ItalianStemmer_hashCode(t_ItalianStemmer *self, PyObject *args);
        static PyObject *t_ItalianStemmer_stem(t_ItalianStemmer *self, PyObject *args);

        static PyMethodDef t_ItalianStemmer__methods_[] = {
          DECLARE_METHOD(t_ItalianStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ItalianStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ItalianStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_ItalianStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_ItalianStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ItalianStemmer, t_ItalianStemmer, ::org::tartarus::snowball::SnowballProgram, ItalianStemmer, t_ItalianStemmer_init_, 0, 0, 0, 0, 0);

        void t_ItalianStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(ItalianStemmer), module, "ItalianStemmer", 0);
        }

        void t_ItalianStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ItalianStemmer).tp_dict, "class_", make_descriptor(ItalianStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ItalianStemmer).tp_dict, "wrapfn_", make_descriptor(t_ItalianStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ItalianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ItalianStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ItalianStemmer::initializeClass, 1)))
            return NULL;
          return t_ItalianStemmer::wrap_Object(ItalianStemmer(((t_ItalianStemmer *) arg)->object.this$));
        }
        static PyObject *t_ItalianStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ItalianStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ItalianStemmer_init_(t_ItalianStemmer *self, PyObject *args, PyObject *kwds)
        {
          ItalianStemmer object((jobject) NULL);

          INT_CALL(object = ItalianStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_ItalianStemmer_equals(t_ItalianStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(ItalianStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_ItalianStemmer_hashCode(t_ItalianStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ItalianStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_ItalianStemmer_stem(t_ItalianStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(ItalianStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *DuplicateFilter$KeepMode::class$ = NULL;
          jmethodID *DuplicateFilter$KeepMode::mids$ = NULL;
          bool DuplicateFilter$KeepMode::live$ = false;
          DuplicateFilter$KeepMode *DuplicateFilter$KeepMode::KM_USE_FIRST_OCCURRENCE = NULL;
          DuplicateFilter$KeepMode *DuplicateFilter$KeepMode::KM_USE_LAST_OCCURRENCE = NULL;

          jclass DuplicateFilter$KeepMode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_06462cf5] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode;");
              mids$[mid_values_3fb3ce7b] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              KM_USE_FIRST_OCCURRENCE = new DuplicateFilter$KeepMode(env->getStaticObjectField(cls, "KM_USE_FIRST_OCCURRENCE", "Lorg/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode;"));
              KM_USE_LAST_OCCURRENCE = new DuplicateFilter$KeepMode(env->getStaticObjectField(cls, "KM_USE_LAST_OCCURRENCE", "Lorg/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DuplicateFilter$KeepMode DuplicateFilter$KeepMode::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return DuplicateFilter$KeepMode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_06462cf5], a0.this$));
          }

          JArray< DuplicateFilter$KeepMode > DuplicateFilter$KeepMode::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< DuplicateFilter$KeepMode >(env->callStaticObjectMethod(cls, mids$[mid_values_3fb3ce7b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_DuplicateFilter$KeepMode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DuplicateFilter$KeepMode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DuplicateFilter$KeepMode_of_(t_DuplicateFilter$KeepMode *self, PyObject *args);
          static PyObject *t_DuplicateFilter$KeepMode_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_DuplicateFilter$KeepMode_values(PyTypeObject *type);
          static PyObject *t_DuplicateFilter$KeepMode_get__parameters_(t_DuplicateFilter$KeepMode *self, void *data);
          static PyGetSetDef t_DuplicateFilter$KeepMode__fields_[] = {
            DECLARE_GET_FIELD(t_DuplicateFilter$KeepMode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DuplicateFilter$KeepMode__methods_[] = {
            DECLARE_METHOD(t_DuplicateFilter$KeepMode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DuplicateFilter$KeepMode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DuplicateFilter$KeepMode, of_, METH_VARARGS),
            DECLARE_METHOD(t_DuplicateFilter$KeepMode, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_DuplicateFilter$KeepMode, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DuplicateFilter$KeepMode, t_DuplicateFilter$KeepMode, ::java::lang::Enum, DuplicateFilter$KeepMode, abstract_init, 0, 0, t_DuplicateFilter$KeepMode__fields_, 0, 0);
          PyObject *t_DuplicateFilter$KeepMode::wrap_Object(const DuplicateFilter$KeepMode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_DuplicateFilter$KeepMode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_DuplicateFilter$KeepMode *self = (t_DuplicateFilter$KeepMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_DuplicateFilter$KeepMode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_DuplicateFilter$KeepMode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_DuplicateFilter$KeepMode *self = (t_DuplicateFilter$KeepMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_DuplicateFilter$KeepMode::install(PyObject *module)
          {
            installType(&PY_TYPE(DuplicateFilter$KeepMode), module, "DuplicateFilter$KeepMode", 0);
          }

          void t_DuplicateFilter$KeepMode::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$KeepMode).tp_dict, "class_", make_descriptor(DuplicateFilter$KeepMode::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$KeepMode).tp_dict, "wrapfn_", make_descriptor(t_DuplicateFilter$KeepMode::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$KeepMode).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(DuplicateFilter$KeepMode::initializeClass);
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$KeepMode).tp_dict, "KM_USE_FIRST_OCCURRENCE", make_descriptor(t_DuplicateFilter$KeepMode::wrap_Object(*DuplicateFilter$KeepMode::KM_USE_FIRST_OCCURRENCE)));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$KeepMode).tp_dict, "KM_USE_LAST_OCCURRENCE", make_descriptor(t_DuplicateFilter$KeepMode::wrap_Object(*DuplicateFilter$KeepMode::KM_USE_LAST_OCCURRENCE)));
          }

          static PyObject *t_DuplicateFilter$KeepMode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DuplicateFilter$KeepMode::initializeClass, 1)))
              return NULL;
            return t_DuplicateFilter$KeepMode::wrap_Object(DuplicateFilter$KeepMode(((t_DuplicateFilter$KeepMode *) arg)->object.this$));
          }
          static PyObject *t_DuplicateFilter$KeepMode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DuplicateFilter$KeepMode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_DuplicateFilter$KeepMode_of_(t_DuplicateFilter$KeepMode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_DuplicateFilter$KeepMode_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            DuplicateFilter$KeepMode result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode::valueOf(a0));
              return t_DuplicateFilter$KeepMode::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_DuplicateFilter$KeepMode_values(PyTypeObject *type)
          {
            JArray< DuplicateFilter$KeepMode > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode::values());
            return JArray<jobject>(result.this$).wrap(t_DuplicateFilter$KeepMode::wrap_jobject);
          }
          static PyObject *t_DuplicateFilter$KeepMode_get__parameters_(t_DuplicateFilter$KeepMode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/BulkScorer.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Weight::class$ = NULL;
        jmethodID *Weight::mids$ = NULL;
        bool Weight::live$ = false;

        jclass Weight::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Weight");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_bulkScorer_33d2aa29] = env->getMethodID(cls, "bulkScorer", "(Lorg/apache/lucene/index/AtomicReaderContext;ZLorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/BulkScorer;");
            mids$[mid_explain_6ad94adc] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/index/AtomicReaderContext;I)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_getQuery_97e3851a] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_getValueForNormalization_54c6a176] = env->getMethodID(cls, "getValueForNormalization", "()F");
            mids$[mid_normalize_f1b0c004] = env->getMethodID(cls, "normalize", "(FF)V");
            mids$[mid_scorer_3869ad24] = env->getMethodID(cls, "scorer", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/Scorer;");
            mids$[mid_scoresDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "scoresDocsOutOfOrder", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Weight::Weight() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::BulkScorer Weight::bulkScorer(const ::org::apache::lucene::index::AtomicReaderContext & a0, jboolean a1, const ::org::apache::lucene::util::Bits & a2) const
        {
          return ::org::apache::lucene::search::BulkScorer(env->callObjectMethod(this$, mids$[mid_bulkScorer_33d2aa29], a0.this$, a1, a2.this$));
        }

        ::org::apache::lucene::search::Explanation Weight::explain(const ::org::apache::lucene::index::AtomicReaderContext & a0, jint a1) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_6ad94adc], a0.this$, a1));
        }

        ::org::apache::lucene::search::Query Weight::getQuery() const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_97e3851a]));
        }

        jfloat Weight::getValueForNormalization() const
        {
          return env->callFloatMethod(this$, mids$[mid_getValueForNormalization_54c6a176]);
        }

        void Weight::normalize(jfloat a0, jfloat a1) const
        {
          env->callVoidMethod(this$, mids$[mid_normalize_f1b0c004], a0, a1);
        }

        ::org::apache::lucene::search::Scorer Weight::scorer(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::Scorer(env->callObjectMethod(this$, mids$[mid_scorer_3869ad24], a0.this$, a1.this$));
        }

        jboolean Weight::scoresDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_scoresDocsOutOfOrder_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Weight_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Weight_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Weight_init_(t_Weight *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Weight_bulkScorer(t_Weight *self, PyObject *args);
        static PyObject *t_Weight_explain(t_Weight *self, PyObject *args);
        static PyObject *t_Weight_getQuery(t_Weight *self);
        static PyObject *t_Weight_getValueForNormalization(t_Weight *self);
        static PyObject *t_Weight_normalize(t_Weight *self, PyObject *args);
        static PyObject *t_Weight_scorer(t_Weight *self, PyObject *args);
        static PyObject *t_Weight_scoresDocsOutOfOrder(t_Weight *self);
        static PyObject *t_Weight_get__query(t_Weight *self, void *data);
        static PyObject *t_Weight_get__valueForNormalization(t_Weight *self, void *data);
        static PyGetSetDef t_Weight__fields_[] = {
          DECLARE_GET_FIELD(t_Weight, query),
          DECLARE_GET_FIELD(t_Weight, valueForNormalization),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Weight__methods_[] = {
          DECLARE_METHOD(t_Weight, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Weight, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Weight, bulkScorer, METH_VARARGS),
          DECLARE_METHOD(t_Weight, explain, METH_VARARGS),
          DECLARE_METHOD(t_Weight, getQuery, METH_NOARGS),
          DECLARE_METHOD(t_Weight, getValueForNormalization, METH_NOARGS),
          DECLARE_METHOD(t_Weight, normalize, METH_VARARGS),
          DECLARE_METHOD(t_Weight, scorer, METH_VARARGS),
          DECLARE_METHOD(t_Weight, scoresDocsOutOfOrder, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Weight, t_Weight, ::java::lang::Object, Weight, t_Weight_init_, 0, 0, t_Weight__fields_, 0, 0);

        void t_Weight::install(PyObject *module)
        {
          installType(&PY_TYPE(Weight), module, "Weight", 0);
        }

        void t_Weight::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Weight).tp_dict, "class_", make_descriptor(Weight::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Weight).tp_dict, "wrapfn_", make_descriptor(t_Weight::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Weight).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Weight_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Weight::initializeClass, 1)))
            return NULL;
          return t_Weight::wrap_Object(Weight(((t_Weight *) arg)->object.this$));
        }
        static PyObject *t_Weight_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Weight::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Weight_init_(t_Weight *self, PyObject *args, PyObject *kwds)
        {
          Weight object((jobject) NULL);

          INT_CALL(object = Weight());
          self->object = object;

          return 0;
        }

        static PyObject *t_Weight_bulkScorer(t_Weight *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          jboolean a1;
          ::org::apache::lucene::util::Bits a2((jobject) NULL);
          ::org::apache::lucene::search::BulkScorer result((jobject) NULL);

          if (!parseArgs(args, "kZk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.bulkScorer(a0, a1, a2));
            return ::org::apache::lucene::search::t_BulkScorer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "bulkScorer", args);
          return NULL;
        }

        static PyObject *t_Weight_explain(t_Weight *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::search::Explanation result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.explain(a0, a1));
            return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "explain", args);
          return NULL;
        }

        static PyObject *t_Weight_getQuery(t_Weight *self)
        {
          ::org::apache::lucene::search::Query result((jobject) NULL);
          OBJ_CALL(result = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(result);
        }

        static PyObject *t_Weight_getValueForNormalization(t_Weight *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getValueForNormalization());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_Weight_normalize(t_Weight *self, PyObject *args)
        {
          jfloat a0;
          jfloat a1;

          if (!parseArgs(args, "FF", &a0, &a1))
          {
            OBJ_CALL(self->object.normalize(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "normalize", args);
          return NULL;
        }

        static PyObject *t_Weight_scorer(t_Weight *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::Scorer result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.scorer(a0, a1));
            return ::org::apache::lucene::search::t_Scorer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "scorer", args);
          return NULL;
        }

        static PyObject *t_Weight_scoresDocsOutOfOrder(t_Weight *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.scoresDocsOutOfOrder());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Weight_get__query(t_Weight *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }

        static PyObject *t_Weight_get__valueForNormalization(t_Weight *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getValueForNormalization());
          return PyFloat_FromDouble((double) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanOrQuery.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/TermContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanOrQuery::class$ = NULL;
          jmethodID *SpanOrQuery::mids$ = NULL;
          bool SpanOrQuery::live$ = false;

          jclass SpanOrQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanOrQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_272f3877] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/spans/SpanQuery;)V");
              mids$[mid_addClause_056c1897] = env->getMethodID(cls, "addClause", "(Lorg/apache/lucene/search/spans/SpanQuery;)V");
              mids$[mid_clone_4d61402f] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/spans/SpanOrQuery;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getClauses_19569402] = env->getMethodID(cls, "getClauses", "()[Lorg/apache/lucene/search/spans/SpanQuery;");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getSpans_f003cb44] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanOrQuery::SpanOrQuery(const JArray< ::org::apache::lucene::search::spans::SpanQuery > & a0) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_272f3877, a0.this$)) {}

          void SpanOrQuery::addClause(const ::org::apache::lucene::search::spans::SpanQuery & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_addClause_056c1897], a0.this$);
          }

          SpanOrQuery SpanOrQuery::clone() const
          {
            return SpanOrQuery(env->callObjectMethod(this$, mids$[mid_clone_4d61402f]));
          }

          jboolean SpanOrQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void SpanOrQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          JArray< ::org::apache::lucene::search::spans::SpanQuery > SpanOrQuery::getClauses() const
          {
            return JArray< ::org::apache::lucene::search::spans::SpanQuery >(env->callObjectMethod(this$, mids$[mid_getClauses_19569402]));
          }

          ::java::lang::String SpanOrQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::search::spans::Spans SpanOrQuery::getSpans(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::util::Map & a2) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_f003cb44], a0.this$, a1.this$, a2.this$));
          }

          jint SpanOrQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query SpanOrQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          ::java::lang::String SpanOrQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanOrQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanOrQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanOrQuery_init_(t_SpanOrQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanOrQuery_addClause(t_SpanOrQuery *self, PyObject *arg);
          static PyObject *t_SpanOrQuery_clone(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_equals(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_extractTerms(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_getClauses(t_SpanOrQuery *self);
          static PyObject *t_SpanOrQuery_getField(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_getSpans(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_hashCode(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_rewrite(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_toString(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_get__clauses(t_SpanOrQuery *self, void *data);
          static PyObject *t_SpanOrQuery_get__field(t_SpanOrQuery *self, void *data);
          static PyGetSetDef t_SpanOrQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanOrQuery, clauses),
            DECLARE_GET_FIELD(t_SpanOrQuery, field),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanOrQuery__methods_[] = {
            DECLARE_METHOD(t_SpanOrQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanOrQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanOrQuery, addClause, METH_O),
            DECLARE_METHOD(t_SpanOrQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, getClauses, METH_NOARGS),
            DECLARE_METHOD(t_SpanOrQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanOrQuery, t_SpanOrQuery, ::org::apache::lucene::search::spans::SpanQuery, SpanOrQuery, t_SpanOrQuery_init_, 0, 0, t_SpanOrQuery__fields_, 0, 0);

          void t_SpanOrQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanOrQuery), module, "SpanOrQuery", 0);
          }

          void t_SpanOrQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanOrQuery).tp_dict, "class_", make_descriptor(SpanOrQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanOrQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanOrQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanOrQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanOrQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanOrQuery::initializeClass, 1)))
              return NULL;
            return t_SpanOrQuery::wrap_Object(SpanOrQuery(((t_SpanOrQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanOrQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanOrQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanOrQuery_init_(t_SpanOrQuery *self, PyObject *args, PyObject *kwds)
          {
            JArray< ::org::apache::lucene::search::spans::SpanQuery > a0((jobject) NULL);
            SpanOrQuery object((jobject) NULL);

            if (!parseArgs(args, "[k", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0))
            {
              INT_CALL(object = SpanOrQuery(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanOrQuery_addClause(t_SpanOrQuery *self, PyObject *arg)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0))
            {
              OBJ_CALL(self->object.addClause(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addClause", arg);
            return NULL;
          }

          static PyObject *t_SpanOrQuery_clone(t_SpanOrQuery *self, PyObject *args)
          {
            SpanOrQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_SpanOrQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanOrQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_SpanOrQuery_equals(t_SpanOrQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanOrQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanOrQuery_extractTerms(t_SpanOrQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SpanOrQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_SpanOrQuery_getClauses(t_SpanOrQuery *self)
          {
            JArray< ::org::apache::lucene::search::spans::SpanQuery > result((jobject) NULL);
            OBJ_CALL(result = self->object.getClauses());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spans::t_SpanQuery::wrap_jobject);
          }

          static PyObject *t_SpanOrQuery_getField(t_SpanOrQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanOrQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_SpanOrQuery_getSpans(t_SpanOrQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanOrQuery), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_SpanOrQuery_hashCode(t_SpanOrQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanOrQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanOrQuery_rewrite(t_SpanOrQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanOrQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_SpanOrQuery_toString(t_SpanOrQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanOrQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SpanOrQuery_get__clauses(t_SpanOrQuery *self, void *data)
          {
            JArray< ::org::apache::lucene::search::spans::SpanQuery > value((jobject) NULL);
            OBJ_CALL(value = self->object.getClauses());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::spans::t_SpanQuery::wrap_jobject);
          }

          static PyObject *t_SpanOrQuery_get__field(t_SpanOrQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/TermFreqIterator$TermFreqIteratorWrapper.h"
#include "org/apache/lucene/search/spell/TermFreqIterator.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *TermFreqIterator$TermFreqIteratorWrapper::class$ = NULL;
          jmethodID *TermFreqIterator$TermFreqIteratorWrapper::mids$ = NULL;
          bool TermFreqIterator$TermFreqIteratorWrapper::live$ = false;

          jclass TermFreqIterator$TermFreqIteratorWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/TermFreqIterator$TermFreqIteratorWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_506719fa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BytesRefIterator;)V");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TermFreqIterator$TermFreqIteratorWrapper::TermFreqIterator$TermFreqIteratorWrapper(const ::org::apache::lucene::util::BytesRefIterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_506719fa, a0.this$)) {}

          ::java::util::Comparator TermFreqIterator$TermFreqIteratorWrapper::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          ::org::apache::lucene::util::BytesRef TermFreqIterator$TermFreqIteratorWrapper::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
          }

          jlong TermFreqIterator$TermFreqIteratorWrapper::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TermFreqIterator$TermFreqIteratorWrapper_init_(t_TermFreqIterator$TermFreqIteratorWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_getComparator(t_TermFreqIterator$TermFreqIteratorWrapper *self);
          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_next(t_TermFreqIterator$TermFreqIteratorWrapper *self);
          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_weight(t_TermFreqIterator$TermFreqIteratorWrapper *self);
          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_get__comparator(t_TermFreqIterator$TermFreqIteratorWrapper *self, void *data);
          static PyGetSetDef t_TermFreqIterator$TermFreqIteratorWrapper__fields_[] = {
            DECLARE_GET_FIELD(t_TermFreqIterator$TermFreqIteratorWrapper, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TermFreqIterator$TermFreqIteratorWrapper__methods_[] = {
            DECLARE_METHOD(t_TermFreqIterator$TermFreqIteratorWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermFreqIterator$TermFreqIteratorWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermFreqIterator$TermFreqIteratorWrapper, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_TermFreqIterator$TermFreqIteratorWrapper, next, METH_NOARGS),
            DECLARE_METHOD(t_TermFreqIterator$TermFreqIteratorWrapper, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TermFreqIterator$TermFreqIteratorWrapper, t_TermFreqIterator$TermFreqIteratorWrapper, ::java::lang::Object, TermFreqIterator$TermFreqIteratorWrapper, t_TermFreqIterator$TermFreqIteratorWrapper_init_, PyObject_SelfIter, ((PyObject *(*)(t_TermFreqIterator$TermFreqIteratorWrapper *)) get_next< t_TermFreqIterator$TermFreqIteratorWrapper,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_TermFreqIterator$TermFreqIteratorWrapper__fields_, 0, 0);

          void t_TermFreqIterator$TermFreqIteratorWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(TermFreqIterator$TermFreqIteratorWrapper), module, "TermFreqIterator$TermFreqIteratorWrapper", 0);
          }

          void t_TermFreqIterator$TermFreqIteratorWrapper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TermFreqIterator$TermFreqIteratorWrapper).tp_dict, "class_", make_descriptor(TermFreqIterator$TermFreqIteratorWrapper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TermFreqIterator$TermFreqIteratorWrapper).tp_dict, "wrapfn_", make_descriptor(t_TermFreqIterator$TermFreqIteratorWrapper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TermFreqIterator$TermFreqIteratorWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TermFreqIterator$TermFreqIteratorWrapper::initializeClass, 1)))
              return NULL;
            return t_TermFreqIterator$TermFreqIteratorWrapper::wrap_Object(TermFreqIterator$TermFreqIteratorWrapper(((t_TermFreqIterator$TermFreqIteratorWrapper *) arg)->object.this$));
          }
          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TermFreqIterator$TermFreqIteratorWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TermFreqIterator$TermFreqIteratorWrapper_init_(t_TermFreqIterator$TermFreqIteratorWrapper *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::BytesRefIterator a0((jobject) NULL);
            TermFreqIterator$TermFreqIteratorWrapper object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRefIterator::initializeClass, &a0))
            {
              INT_CALL(object = TermFreqIterator$TermFreqIteratorWrapper(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_getComparator(t_TermFreqIterator$TermFreqIteratorWrapper *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_next(t_TermFreqIterator$TermFreqIteratorWrapper *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_weight(t_TermFreqIterator$TermFreqIteratorWrapper *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_get__comparator(t_TermFreqIterator$TermFreqIteratorWrapper *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/JaroWinklerDistance.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *JaroWinklerDistance::class$ = NULL;
          jmethodID *JaroWinklerDistance::mids$ = NULL;
          bool JaroWinklerDistance::live$ = false;

          jclass JaroWinklerDistance::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/JaroWinklerDistance");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getDistance_4a264752] = env->getMethodID(cls, "getDistance", "(Ljava/lang/String;Ljava/lang/String;)F");
              mids$[mid_getThreshold_54c6a176] = env->getMethodID(cls, "getThreshold", "()F");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setThreshold_06298cab] = env->getMethodID(cls, "setThreshold", "(F)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JaroWinklerDistance::JaroWinklerDistance() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean JaroWinklerDistance::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jfloat JaroWinklerDistance::getDistance(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_getDistance_4a264752], a0.this$, a1.this$);
          }

          jfloat JaroWinklerDistance::getThreshold() const
          {
            return env->callFloatMethod(this$, mids$[mid_getThreshold_54c6a176]);
          }

          jint JaroWinklerDistance::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void JaroWinklerDistance::setThreshold(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setThreshold_06298cab], a0);
          }

          ::java::lang::String JaroWinklerDistance::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_JaroWinklerDistance_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JaroWinklerDistance_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JaroWinklerDistance_init_(t_JaroWinklerDistance *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JaroWinklerDistance_equals(t_JaroWinklerDistance *self, PyObject *args);
          static PyObject *t_JaroWinklerDistance_getDistance(t_JaroWinklerDistance *self, PyObject *args);
          static PyObject *t_JaroWinklerDistance_getThreshold(t_JaroWinklerDistance *self);
          static PyObject *t_JaroWinklerDistance_hashCode(t_JaroWinklerDistance *self, PyObject *args);
          static PyObject *t_JaroWinklerDistance_setThreshold(t_JaroWinklerDistance *self, PyObject *arg);
          static PyObject *t_JaroWinklerDistance_toString(t_JaroWinklerDistance *self, PyObject *args);
          static PyObject *t_JaroWinklerDistance_get__threshold(t_JaroWinklerDistance *self, void *data);
          static int t_JaroWinklerDistance_set__threshold(t_JaroWinklerDistance *self, PyObject *arg, void *data);
          static PyGetSetDef t_JaroWinklerDistance__fields_[] = {
            DECLARE_GETSET_FIELD(t_JaroWinklerDistance, threshold),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_JaroWinklerDistance__methods_[] = {
            DECLARE_METHOD(t_JaroWinklerDistance, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JaroWinklerDistance, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JaroWinklerDistance, equals, METH_VARARGS),
            DECLARE_METHOD(t_JaroWinklerDistance, getDistance, METH_VARARGS),
            DECLARE_METHOD(t_JaroWinklerDistance, getThreshold, METH_NOARGS),
            DECLARE_METHOD(t_JaroWinklerDistance, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_JaroWinklerDistance, setThreshold, METH_O),
            DECLARE_METHOD(t_JaroWinklerDistance, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JaroWinklerDistance, t_JaroWinklerDistance, ::java::lang::Object, JaroWinklerDistance, t_JaroWinklerDistance_init_, 0, 0, t_JaroWinklerDistance__fields_, 0, 0);

          void t_JaroWinklerDistance::install(PyObject *module)
          {
            installType(&PY_TYPE(JaroWinklerDistance), module, "JaroWinklerDistance", 0);
          }

          void t_JaroWinklerDistance::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JaroWinklerDistance).tp_dict, "class_", make_descriptor(JaroWinklerDistance::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JaroWinklerDistance).tp_dict, "wrapfn_", make_descriptor(t_JaroWinklerDistance::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JaroWinklerDistance).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JaroWinklerDistance_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JaroWinklerDistance::initializeClass, 1)))
              return NULL;
            return t_JaroWinklerDistance::wrap_Object(JaroWinklerDistance(((t_JaroWinklerDistance *) arg)->object.this$));
          }
          static PyObject *t_JaroWinklerDistance_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JaroWinklerDistance::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JaroWinklerDistance_init_(t_JaroWinklerDistance *self, PyObject *args, PyObject *kwds)
          {
            JaroWinklerDistance object((jobject) NULL);

            INT_CALL(object = JaroWinklerDistance());
            self->object = object;

            return 0;
          }

          static PyObject *t_JaroWinklerDistance_equals(t_JaroWinklerDistance *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(JaroWinklerDistance), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_JaroWinklerDistance_getDistance(t_JaroWinklerDistance *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDistance", args);
            return NULL;
          }

          static PyObject *t_JaroWinklerDistance_getThreshold(t_JaroWinklerDistance *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getThreshold());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_JaroWinklerDistance_hashCode(t_JaroWinklerDistance *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(JaroWinklerDistance), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_JaroWinklerDistance_setThreshold(t_JaroWinklerDistance *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setThreshold(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setThreshold", arg);
            return NULL;
          }

          static PyObject *t_JaroWinklerDistance_toString(t_JaroWinklerDistance *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(JaroWinklerDistance), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_JaroWinklerDistance_get__threshold(t_JaroWinklerDistance *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getThreshold());
            return PyFloat_FromDouble((double) value);
          }
          static int t_JaroWinklerDistance_set__threshold(t_JaroWinklerDistance *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setThreshold(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "threshold", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/ByteVector.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *ByteVector::class$ = NULL;
            jmethodID *ByteVector::mids$ = NULL;
            bool ByteVector::live$ = false;

            jclass ByteVector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/ByteVector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_49b4f12b] = env->getMethodID(cls, "<init>", "([B)V");
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_init$_b8354c43] = env->getMethodID(cls, "<init>", "([BI)V");
                mids$[mid_alloc_39c7bd23] = env->getMethodID(cls, "alloc", "(I)I");
                mids$[mid_capacity_54c6a179] = env->getMethodID(cls, "capacity", "()I");
                mids$[mid_get_39c7bd28] = env->getMethodID(cls, "get", "(I)B");
                mids$[mid_getArray_dab10e7e] = env->getMethodID(cls, "getArray", "()[B");
                mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
                mids$[mid_put_58d0da5d] = env->getMethodID(cls, "put", "(IB)V");
                mids$[mid_trimToSize_54c6a166] = env->getMethodID(cls, "trimToSize", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ByteVector::ByteVector() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            ByteVector::ByteVector(const JArray< jbyte > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_49b4f12b, a0.this$)) {}

            ByteVector::ByteVector(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

            ByteVector::ByteVector(const JArray< jbyte > & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b8354c43, a0.this$, a1)) {}

            jint ByteVector::alloc(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_alloc_39c7bd23], a0);
            }

            jint ByteVector::capacity() const
            {
              return env->callIntMethod(this$, mids$[mid_capacity_54c6a179]);
            }

            jbyte ByteVector::get(jint a0) const
            {
              return env->callByteMethod(this$, mids$[mid_get_39c7bd28], a0);
            }

            JArray< jbyte > ByteVector::getArray() const
            {
              return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getArray_dab10e7e]));
            }

            jint ByteVector::length() const
            {
              return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
            }

            void ByteVector::put(jint a0, jbyte a1) const
            {
              env->callVoidMethod(this$, mids$[mid_put_58d0da5d], a0, a1);
            }

            void ByteVector::trimToSize() const
            {
              env->callVoidMethod(this$, mids$[mid_trimToSize_54c6a166]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_ByteVector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ByteVector_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ByteVector_init_(t_ByteVector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ByteVector_alloc(t_ByteVector *self, PyObject *arg);
            static PyObject *t_ByteVector_capacity(t_ByteVector *self);
            static PyObject *t_ByteVector_get(t_ByteVector *self, PyObject *arg);
            static PyObject *t_ByteVector_getArray(t_ByteVector *self);
            static PyObject *t_ByteVector_length(t_ByteVector *self);
            static PyObject *t_ByteVector_put(t_ByteVector *self, PyObject *args);
            static PyObject *t_ByteVector_trimToSize(t_ByteVector *self);
            static PyObject *t_ByteVector_get__array(t_ByteVector *self, void *data);
            static PyGetSetDef t_ByteVector__fields_[] = {
              DECLARE_GET_FIELD(t_ByteVector, array),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ByteVector__methods_[] = {
              DECLARE_METHOD(t_ByteVector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ByteVector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ByteVector, alloc, METH_O),
              DECLARE_METHOD(t_ByteVector, capacity, METH_NOARGS),
              DECLARE_METHOD(t_ByteVector, get, METH_O),
              DECLARE_METHOD(t_ByteVector, getArray, METH_NOARGS),
              DECLARE_METHOD(t_ByteVector, length, METH_NOARGS),
              DECLARE_METHOD(t_ByteVector, put, METH_VARARGS),
              DECLARE_METHOD(t_ByteVector, trimToSize, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ByteVector, t_ByteVector, ::java::lang::Object, ByteVector, t_ByteVector_init_, 0, 0, t_ByteVector__fields_, 0, 0);

            void t_ByteVector::install(PyObject *module)
            {
              installType(&PY_TYPE(ByteVector), module, "ByteVector", 0);
            }

            void t_ByteVector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ByteVector).tp_dict, "class_", make_descriptor(ByteVector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ByteVector).tp_dict, "wrapfn_", make_descriptor(t_ByteVector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ByteVector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ByteVector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ByteVector::initializeClass, 1)))
                return NULL;
              return t_ByteVector::wrap_Object(ByteVector(((t_ByteVector *) arg)->object.this$));
            }
            static PyObject *t_ByteVector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ByteVector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ByteVector_init_(t_ByteVector *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  ByteVector object((jobject) NULL);

                  INT_CALL(object = ByteVector());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  JArray< jbyte > a0((jobject) NULL);
                  ByteVector object((jobject) NULL);

                  if (!parseArgs(args, "[B", &a0))
                  {
                    INT_CALL(object = ByteVector(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  jint a0;
                  ByteVector object((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    INT_CALL(object = ByteVector(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  JArray< jbyte > a0((jobject) NULL);
                  jint a1;
                  ByteVector object((jobject) NULL);

                  if (!parseArgs(args, "[BI", &a0, &a1))
                  {
                    INT_CALL(object = ByteVector(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ByteVector_alloc(t_ByteVector *self, PyObject *arg)
            {
              jint a0;
              jint result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.alloc(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "alloc", arg);
              return NULL;
            }

            static PyObject *t_ByteVector_capacity(t_ByteVector *self)
            {
              jint result;
              OBJ_CALL(result = self->object.capacity());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_ByteVector_get(t_ByteVector *self, PyObject *arg)
            {
              jint a0;
              jbyte result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_ByteVector_getArray(t_ByteVector *self)
            {
              JArray< jbyte > result((jobject) NULL);
              OBJ_CALL(result = self->object.getArray());
              return result.wrap();
            }

            static PyObject *t_ByteVector_length(t_ByteVector *self)
            {
              jint result;
              OBJ_CALL(result = self->object.length());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_ByteVector_put(t_ByteVector *self, PyObject *args)
            {
              jint a0;
              jbyte a1;

              if (!parseArgs(args, "IB", &a0, &a1))
              {
                OBJ_CALL(self->object.put(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "put", args);
              return NULL;
            }

            static PyObject *t_ByteVector_trimToSize(t_ByteVector *self)
            {
              OBJ_CALL(self->object.trimToSize());
              Py_RETURN_NONE;
            }

            static PyObject *t_ByteVector_get__array(t_ByteVector *self, void *data)
            {
              JArray< jbyte > value((jobject) NULL);
              OBJ_CALL(value = self->object.getArray());
              return value.wrap();
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/grouping/TopGroups.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractSecondPassGroupingCollector::class$ = NULL;
          jmethodID *AbstractSecondPassGroupingCollector::mids$ = NULL;
          bool AbstractSecondPassGroupingCollector::live$ = false;

          jclass AbstractSecondPassGroupingCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e70f2194] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;Lorg/apache/lucene/search/Sort;Lorg/apache/lucene/search/Sort;IZZZ)V");
              mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
              mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
              mids$[mid_getTopGroups_f6dd2ce2] = env->getMethodID(cls, "getTopGroups", "(I)Lorg/apache/lucene/search/grouping/TopGroups;");
              mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
              mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
              mids$[mid_retrieveGroup_e4de8d52] = env->getMethodID(cls, "retrieveGroup", "(I)Lorg/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector$SearchGroupDocs;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractSecondPassGroupingCollector::AbstractSecondPassGroupingCollector(const ::java::util::Collection & a0, const ::org::apache::lucene::search::Sort & a1, const ::org::apache::lucene::search::Sort & a2, jint a3, jboolean a4, jboolean a5, jboolean a6) : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_e70f2194, a0.this$, a1.this$, a2.this$, a3, a4, a5, a6)) {}

          jboolean AbstractSecondPassGroupingCollector::acceptsDocsOutOfOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
          }

          void AbstractSecondPassGroupingCollector::collect(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
          }

          ::org::apache::lucene::search::grouping::TopGroups AbstractSecondPassGroupingCollector::getTopGroups(jint a0) const
          {
            return ::org::apache::lucene::search::grouping::TopGroups(env->callObjectMethod(this$, mids$[mid_getTopGroups_f6dd2ce2], a0));
          }

          void AbstractSecondPassGroupingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
          }

          void AbstractSecondPassGroupingCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractSecondPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractSecondPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractSecondPassGroupingCollector_of_(t_AbstractSecondPassGroupingCollector *self, PyObject *args);
          static int t_AbstractSecondPassGroupingCollector_init_(t_AbstractSecondPassGroupingCollector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractSecondPassGroupingCollector_acceptsDocsOutOfOrder(t_AbstractSecondPassGroupingCollector *self, PyObject *args);
          static PyObject *t_AbstractSecondPassGroupingCollector_collect(t_AbstractSecondPassGroupingCollector *self, PyObject *args);
          static PyObject *t_AbstractSecondPassGroupingCollector_getTopGroups(t_AbstractSecondPassGroupingCollector *self, PyObject *arg);
          static PyObject *t_AbstractSecondPassGroupingCollector_setNextReader(t_AbstractSecondPassGroupingCollector *self, PyObject *args);
          static PyObject *t_AbstractSecondPassGroupingCollector_setScorer(t_AbstractSecondPassGroupingCollector *self, PyObject *args);
          static int t_AbstractSecondPassGroupingCollector_set__nextReader(t_AbstractSecondPassGroupingCollector *self, PyObject *arg, void *data);
          static int t_AbstractSecondPassGroupingCollector_set__scorer(t_AbstractSecondPassGroupingCollector *self, PyObject *arg, void *data);
          static PyObject *t_AbstractSecondPassGroupingCollector_get__parameters_(t_AbstractSecondPassGroupingCollector *self, void *data);
          static PyGetSetDef t_AbstractSecondPassGroupingCollector__fields_[] = {
            DECLARE_SET_FIELD(t_AbstractSecondPassGroupingCollector, nextReader),
            DECLARE_SET_FIELD(t_AbstractSecondPassGroupingCollector, scorer),
            DECLARE_GET_FIELD(t_AbstractSecondPassGroupingCollector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractSecondPassGroupingCollector__methods_[] = {
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector, of_, METH_VARARGS),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector, acceptsDocsOutOfOrder, METH_VARARGS),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector, collect, METH_VARARGS),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector, getTopGroups, METH_O),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector, setNextReader, METH_VARARGS),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractSecondPassGroupingCollector, t_AbstractSecondPassGroupingCollector, ::org::apache::lucene::search::Collector, AbstractSecondPassGroupingCollector, t_AbstractSecondPassGroupingCollector_init_, 0, 0, t_AbstractSecondPassGroupingCollector__fields_, 0, 0);
          PyObject *t_AbstractSecondPassGroupingCollector::wrap_Object(const AbstractSecondPassGroupingCollector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractSecondPassGroupingCollector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractSecondPassGroupingCollector *self = (t_AbstractSecondPassGroupingCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractSecondPassGroupingCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractSecondPassGroupingCollector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractSecondPassGroupingCollector *self = (t_AbstractSecondPassGroupingCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractSecondPassGroupingCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractSecondPassGroupingCollector), module, "AbstractSecondPassGroupingCollector", 0);
          }

          void t_AbstractSecondPassGroupingCollector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractSecondPassGroupingCollector).tp_dict, "class_", make_descriptor(AbstractSecondPassGroupingCollector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractSecondPassGroupingCollector).tp_dict, "wrapfn_", make_descriptor(t_AbstractSecondPassGroupingCollector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractSecondPassGroupingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractSecondPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractSecondPassGroupingCollector::initializeClass, 1)))
              return NULL;
            return t_AbstractSecondPassGroupingCollector::wrap_Object(AbstractSecondPassGroupingCollector(((t_AbstractSecondPassGroupingCollector *) arg)->object.this$));
          }
          static PyObject *t_AbstractSecondPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractSecondPassGroupingCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractSecondPassGroupingCollector_of_(t_AbstractSecondPassGroupingCollector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_AbstractSecondPassGroupingCollector_init_(t_AbstractSecondPassGroupingCollector *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::search::Sort a1((jobject) NULL);
            ::org::apache::lucene::search::Sort a2((jobject) NULL);
            jint a3;
            jboolean a4;
            jboolean a5;
            jboolean a6;
            AbstractSecondPassGroupingCollector object((jobject) NULL);

            if (!parseArgs(args, "KkkIZZZ", ::java::util::Collection::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              INT_CALL(object = AbstractSecondPassGroupingCollector(a0, a1, a2, a3, a4, a5, a6));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AbstractSecondPassGroupingCollector_acceptsDocsOutOfOrder(t_AbstractSecondPassGroupingCollector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractSecondPassGroupingCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
          }

          static PyObject *t_AbstractSecondPassGroupingCollector_collect(t_AbstractSecondPassGroupingCollector *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.collect(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractSecondPassGroupingCollector), (PyObject *) self, "collect", args, 2);
          }

          static PyObject *t_AbstractSecondPassGroupingCollector_getTopGroups(t_AbstractSecondPassGroupingCollector *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::search::grouping::TopGroups result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getTopGroups(a0));
              return ::org::apache::lucene::search::grouping::t_TopGroups::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "getTopGroups", arg);
            return NULL;
          }

          static PyObject *t_AbstractSecondPassGroupingCollector_setNextReader(t_AbstractSecondPassGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setNextReader(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractSecondPassGroupingCollector), (PyObject *) self, "setNextReader", args, 2);
          }

          static PyObject *t_AbstractSecondPassGroupingCollector_setScorer(t_AbstractSecondPassGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorer a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractSecondPassGroupingCollector), (PyObject *) self, "setScorer", args, 2);
          }
          static PyObject *t_AbstractSecondPassGroupingCollector_get__parameters_(t_AbstractSecondPassGroupingCollector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_AbstractSecondPassGroupingCollector_set__nextReader(t_AbstractSecondPassGroupingCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
              {
                INT_CALL(self->object.setNextReader(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
            return -1;
          }

          static int t_AbstractSecondPassGroupingCollector_set__scorer(t_AbstractSecondPassGroupingCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/MergeState.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingTermVectorsWriter::class$ = NULL;
          jmethodID *CompressingTermVectorsWriter::mids$ = NULL;
          bool CompressingTermVectorsWriter::live$ = false;

          jclass CompressingTermVectorsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_999e6287] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;Ljava/lang/String;Lorg/apache/lucene/codecs/compressing/CompressionMode;I)V");
              mids$[mid_abort_54c6a166] = env->getMethodID(cls, "abort", "()V");
              mids$[mid_addPosition_ffd34a92] = env->getMethodID(cls, "addPosition", "(IIILorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_addProx_395d0aa2] = env->getMethodID(cls, "addProx", "(ILorg/apache/lucene/store/DataInput;Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_finish_48f050c2] = env->getMethodID(cls, "finish", "(Lorg/apache/lucene/index/FieldInfos;I)V");
              mids$[mid_finishDocument_54c6a166] = env->getMethodID(cls, "finishDocument", "()V");
              mids$[mid_finishField_54c6a166] = env->getMethodID(cls, "finishField", "()V");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_merge_fd0cfdeb] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;)I");
              mids$[mid_startDocument_39c7bd3c] = env->getMethodID(cls, "startDocument", "(I)V");
              mids$[mid_startField_07c4def5] = env->getMethodID(cls, "startField", "(Lorg/apache/lucene/index/FieldInfo;IZZZ)V");
              mids$[mid_startTerm_738fc2ce] = env->getMethodID(cls, "startTerm", "(Lorg/apache/lucene/util/BytesRef;I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompressingTermVectorsWriter::CompressingTermVectorsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::java::lang::String & a2, const ::org::apache::lucene::store::IOContext & a3, const ::java::lang::String & a4, const ::org::apache::lucene::codecs::compressing::CompressionMode & a5, jint a6) : ::org::apache::lucene::codecs::TermVectorsWriter(env->newObject(initializeClass, &mids$, mid_init$_999e6287, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$, a6)) {}

          void CompressingTermVectorsWriter::abort() const
          {
            env->callVoidMethod(this$, mids$[mid_abort_54c6a166]);
          }

          void CompressingTermVectorsWriter::addPosition(jint a0, jint a1, jint a2, const ::org::apache::lucene::util::BytesRef & a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addPosition_ffd34a92], a0, a1, a2, a3.this$);
          }

          void CompressingTermVectorsWriter::addProx(jint a0, const ::org::apache::lucene::store::DataInput & a1, const ::org::apache::lucene::store::DataInput & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_addProx_395d0aa2], a0, a1.this$, a2.this$);
          }

          void CompressingTermVectorsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void CompressingTermVectorsWriter::finish(const ::org::apache::lucene::index::FieldInfos & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_finish_48f050c2], a0.this$, a1);
          }

          void CompressingTermVectorsWriter::finishDocument() const
          {
            env->callVoidMethod(this$, mids$[mid_finishDocument_54c6a166]);
          }

          void CompressingTermVectorsWriter::finishField() const
          {
            env->callVoidMethod(this$, mids$[mid_finishField_54c6a166]);
          }

          ::java::util::Comparator CompressingTermVectorsWriter::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          jint CompressingTermVectorsWriter::merge(const ::org::apache::lucene::index::MergeState & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_merge_fd0cfdeb], a0.this$);
          }

          void CompressingTermVectorsWriter::startDocument(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_startDocument_39c7bd3c], a0);
          }

          void CompressingTermVectorsWriter::startField(const ::org::apache::lucene::index::FieldInfo & a0, jint a1, jboolean a2, jboolean a3, jboolean a4) const
          {
            env->callVoidMethod(this$, mids$[mid_startField_07c4def5], a0.this$, a1, a2, a3, a4);
          }

          void CompressingTermVectorsWriter::startTerm(const ::org::apache::lucene::util::BytesRef & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_startTerm_738fc2ce], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingTermVectorsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingTermVectorsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CompressingTermVectorsWriter_init_(t_CompressingTermVectorsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CompressingTermVectorsWriter_abort(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_addPosition(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_addProx(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_close(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_finish(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_finishDocument(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_finishField(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_getComparator(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_merge(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_startDocument(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_startField(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_startTerm(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_get__comparator(t_CompressingTermVectorsWriter *self, void *data);
          static PyGetSetDef t_CompressingTermVectorsWriter__fields_[] = {
            DECLARE_GET_FIELD(t_CompressingTermVectorsWriter, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CompressingTermVectorsWriter__methods_[] = {
            DECLARE_METHOD(t_CompressingTermVectorsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, abort, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, addPosition, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, addProx, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, finish, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, finishDocument, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, finishField, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, getComparator, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, merge, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, startDocument, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, startField, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, startTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressingTermVectorsWriter, t_CompressingTermVectorsWriter, ::org::apache::lucene::codecs::TermVectorsWriter, CompressingTermVectorsWriter, t_CompressingTermVectorsWriter_init_, 0, 0, t_CompressingTermVectorsWriter__fields_, 0, 0);

          void t_CompressingTermVectorsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingTermVectorsWriter), module, "CompressingTermVectorsWriter", 0);
          }

          void t_CompressingTermVectorsWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsWriter).tp_dict, "class_", make_descriptor(CompressingTermVectorsWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsWriter).tp_dict, "wrapfn_", make_descriptor(t_CompressingTermVectorsWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingTermVectorsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingTermVectorsWriter::initializeClass, 1)))
              return NULL;
            return t_CompressingTermVectorsWriter::wrap_Object(CompressingTermVectorsWriter(((t_CompressingTermVectorsWriter *) arg)->object.this$));
          }
          static PyObject *t_CompressingTermVectorsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingTermVectorsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CompressingTermVectorsWriter_init_(t_CompressingTermVectorsWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::java::lang::String a4((jobject) NULL);
            ::org::apache::lucene::codecs::compressing::CompressionMode a5((jobject) NULL);
            jint a6;
            CompressingTermVectorsWriter object((jobject) NULL);

            if (!parseArgs(args, "kkskskI", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, ::org::apache::lucene::codecs::compressing::CompressionMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              INT_CALL(object = CompressingTermVectorsWriter(a0, a1, a2, a3, a4, a5, a6));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CompressingTermVectorsWriter_abort(t_CompressingTermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.abort());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "abort", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_addPosition(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef a3((jobject) NULL);

            if (!parseArgs(args, "IIIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.addPosition(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "addPosition", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_addProx(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::store::DataInput a1((jobject) NULL);
            ::org::apache::lucene::store::DataInput a2((jobject) NULL);

            if (!parseArgs(args, "Ikk", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.addProx(a0, a1, a2));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "addProx", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_close(t_CompressingTermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_finish(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfos a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.finish(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "finish", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_finishDocument(t_CompressingTermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.finishDocument());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "finishDocument", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_finishField(t_CompressingTermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.finishField());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "finishField", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_getComparator(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            ::java::util::Comparator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "getComparator", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_merge(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::MergeState a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.merge(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "merge", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_startDocument(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.startDocument(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "startDocument", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_startField(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            jint a1;
            jboolean a2;
            jboolean a3;
            jboolean a4;

            if (!parseArgs(args, "kIZZZ", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.startField(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "startField", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_startTerm(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.startTerm(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "startTerm", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_get__comparator(t_CompressingTermVectorsWriter *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "java/util/Locale.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace util {

              ::java::lang::Class *UnescapedCharSequence::class$ = NULL;
              jmethodID *UnescapedCharSequence::mids$ = NULL;
              bool UnescapedCharSequence::live$ = false;

              jclass UnescapedCharSequence::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_a8afc64a] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_init$_225aaf87] = env->getMethodID(cls, "<init>", "([C[ZII)V");
                  mids$[mid_charAt_39c7bd29] = env->getMethodID(cls, "charAt", "(I)C");
                  mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
                  mids$[mid_subSequence_f88dfd57] = env->getMethodID(cls, "subSequence", "(II)Ljava/lang/CharSequence;");
                  mids$[mid_toLowerCase_0df08ccc] = env->getStaticMethodID(cls, "toLowerCase", "(Ljava/lang/CharSequence;Ljava/util/Locale;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                  mids$[mid_toStringEscaped_14c7b5c5] = env->getMethodID(cls, "toStringEscaped", "()Ljava/lang/String;");
                  mids$[mid_toStringEscaped_c783d655] = env->getMethodID(cls, "toStringEscaped", "([C)Ljava/lang/String;");
                  mids$[mid_wasEscaped_39c7bd30] = env->getMethodID(cls, "wasEscaped", "(I)Z");
                  mids$[mid_wasEscaped_2fbf15ac] = env->getStaticMethodID(cls, "wasEscaped", "(Ljava/lang/CharSequence;I)Z");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              UnescapedCharSequence::UnescapedCharSequence(const ::java::lang::CharSequence & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a8afc64a, a0.this$)) {}

              UnescapedCharSequence::UnescapedCharSequence(const JArray< jchar > & a0, const JArray< jboolean > & a1, jint a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_225aaf87, a0.this$, a1.this$, a2, a3)) {}

              jchar UnescapedCharSequence::charAt(jint a0) const
              {
                return env->callCharMethod(this$, mids$[mid_charAt_39c7bd29], a0);
              }

              jint UnescapedCharSequence::length() const
              {
                return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
              }

              ::java::lang::CharSequence UnescapedCharSequence::subSequence(jint a0, jint a1) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_subSequence_f88dfd57], a0, a1));
              }

              ::java::lang::CharSequence UnescapedCharSequence::toLowerCase(const ::java::lang::CharSequence & a0, const ::java::util::Locale & a1)
              {
                jclass cls = env->getClass(initializeClass);
                return ::java::lang::CharSequence(env->callStaticObjectMethod(cls, mids$[mid_toLowerCase_0df08ccc], a0.this$, a1.this$));
              }

              ::java::lang::String UnescapedCharSequence::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }

              ::java::lang::String UnescapedCharSequence::toStringEscaped() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringEscaped_14c7b5c5]));
              }

              ::java::lang::String UnescapedCharSequence::toStringEscaped(const JArray< jchar > & a0) const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringEscaped_c783d655], a0.this$));
              }

              jboolean UnescapedCharSequence::wasEscaped(jint a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_wasEscaped_39c7bd30], a0);
              }

              jboolean UnescapedCharSequence::wasEscaped(const ::java::lang::CharSequence & a0, jint a1)
              {
                jclass cls = env->getClass(initializeClass);
                return env->callStaticBooleanMethod(cls, mids$[mid_wasEscaped_2fbf15ac], a0.this$, a1);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace util {
              static PyObject *t_UnescapedCharSequence_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_UnescapedCharSequence_instance_(PyTypeObject *type, PyObject *arg);
              static int t_UnescapedCharSequence_init_(t_UnescapedCharSequence *self, PyObject *args, PyObject *kwds);
              static PyObject *t_UnescapedCharSequence_charAt(t_UnescapedCharSequence *self, PyObject *arg);
              static PyObject *t_UnescapedCharSequence_length(t_UnescapedCharSequence *self);
              static PyObject *t_UnescapedCharSequence_subSequence(t_UnescapedCharSequence *self, PyObject *args);
              static PyObject *t_UnescapedCharSequence_toLowerCase(PyTypeObject *type, PyObject *args);
              static PyObject *t_UnescapedCharSequence_toString(t_UnescapedCharSequence *self, PyObject *args);
              static PyObject *t_UnescapedCharSequence_toStringEscaped(t_UnescapedCharSequence *self, PyObject *args);
              static PyObject *t_UnescapedCharSequence_wasEscaped(t_UnescapedCharSequence *self, PyObject *arg);
              static PyObject *t_UnescapedCharSequence_wasEscaped_(PyTypeObject *type, PyObject *args);

              static PyMethodDef t_UnescapedCharSequence__methods_[] = {
                DECLARE_METHOD(t_UnescapedCharSequence, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_UnescapedCharSequence, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_UnescapedCharSequence, charAt, METH_O),
                DECLARE_METHOD(t_UnescapedCharSequence, length, METH_NOARGS),
                DECLARE_METHOD(t_UnescapedCharSequence, subSequence, METH_VARARGS),
                DECLARE_METHOD(t_UnescapedCharSequence, toLowerCase, METH_VARARGS | METH_CLASS),
                DECLARE_METHOD(t_UnescapedCharSequence, toString, METH_VARARGS),
                DECLARE_METHOD(t_UnescapedCharSequence, toStringEscaped, METH_VARARGS),
                DECLARE_METHOD(t_UnescapedCharSequence, wasEscaped, METH_O),
                DECLARE_METHOD(t_UnescapedCharSequence, wasEscaped_, METH_VARARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(UnescapedCharSequence, t_UnescapedCharSequence, ::java::lang::Object, UnescapedCharSequence, t_UnescapedCharSequence_init_, 0, 0, 0, 0, 0);

              void t_UnescapedCharSequence::install(PyObject *module)
              {
                installType(&PY_TYPE(UnescapedCharSequence), module, "UnescapedCharSequence", 0);
              }

              void t_UnescapedCharSequence::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(UnescapedCharSequence).tp_dict, "class_", make_descriptor(UnescapedCharSequence::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(UnescapedCharSequence).tp_dict, "wrapfn_", make_descriptor(t_UnescapedCharSequence::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(UnescapedCharSequence).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_UnescapedCharSequence_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, UnescapedCharSequence::initializeClass, 1)))
                  return NULL;
                return t_UnescapedCharSequence::wrap_Object(UnescapedCharSequence(((t_UnescapedCharSequence *) arg)->object.this$));
              }
              static PyObject *t_UnescapedCharSequence_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, UnescapedCharSequence::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_UnescapedCharSequence_init_(t_UnescapedCharSequence *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    UnescapedCharSequence object((jobject) NULL);

                    if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                    {
                      INT_CALL(object = UnescapedCharSequence(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 4:
                  {
                    JArray< jchar > a0((jobject) NULL);
                    JArray< jboolean > a1((jobject) NULL);
                    jint a2;
                    jint a3;
                    UnescapedCharSequence object((jobject) NULL);

                    if (!parseArgs(args, "[C[ZII", &a0, &a1, &a2, &a3))
                    {
                      INT_CALL(object = UnescapedCharSequence(a0, a1, a2, a3));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_UnescapedCharSequence_charAt(t_UnescapedCharSequence *self, PyObject *arg)
              {
                jint a0;
                jchar result;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.charAt(a0));
                  return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                }

                PyErr_SetArgsError((PyObject *) self, "charAt", arg);
                return NULL;
              }

              static PyObject *t_UnescapedCharSequence_length(t_UnescapedCharSequence *self)
              {
                jint result;
                OBJ_CALL(result = self->object.length());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_UnescapedCharSequence_subSequence(t_UnescapedCharSequence *self, PyObject *args)
              {
                jint a0;
                jint a1;
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.subSequence(a0, a1));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "subSequence", args);
                return NULL;
              }

              static PyObject *t_UnescapedCharSequence_toLowerCase(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::util::Locale a1((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "Ok", &::java::lang::PY_TYPE(CharSequence), ::java::util::Locale::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::util::UnescapedCharSequence::toLowerCase(a0, a1));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                PyErr_SetArgsError(type, "toLowerCase", args);
                return NULL;
              }

              static PyObject *t_UnescapedCharSequence_toString(t_UnescapedCharSequence *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(UnescapedCharSequence), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_UnescapedCharSequence_toStringEscaped(t_UnescapedCharSequence *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    ::java::lang::String result((jobject) NULL);
                    OBJ_CALL(result = self->object.toStringEscaped());
                    return j2p(result);
                  }
                  break;
                 case 1:
                  {
                    JArray< jchar > a0((jobject) NULL);
                    ::java::lang::String result((jobject) NULL);

                    if (!parseArgs(args, "[C", &a0))
                    {
                      OBJ_CALL(result = self->object.toStringEscaped(a0));
                      return j2p(result);
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "toStringEscaped", args);
                return NULL;
              }

              static PyObject *t_UnescapedCharSequence_wasEscaped(t_UnescapedCharSequence *self, PyObject *arg)
              {
                jint a0;
                jboolean result;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.wasEscaped(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "wasEscaped", arg);
                return NULL;
              }

              static PyObject *t_UnescapedCharSequence_wasEscaped_(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jint a1;
                jboolean result;

                if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::util::UnescapedCharSequence::wasEscaped(a0, a1));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError(type, "wasEscaped_", args);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/ClassicFilterFactory.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *ClassicFilterFactory::class$ = NULL;
          jmethodID *ClassicFilterFactory::mids$ = NULL;
          bool ClassicFilterFactory::live$ = false;

          jclass ClassicFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/ClassicFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_2969f76d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ClassicFilterFactory::ClassicFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter ClassicFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_2969f76d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_ClassicFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ClassicFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ClassicFilterFactory_init_(t_ClassicFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ClassicFilterFactory_create(t_ClassicFilterFactory *self, PyObject *args);

          static PyMethodDef t_ClassicFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ClassicFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ClassicFilterFactory, t_ClassicFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ClassicFilterFactory, t_ClassicFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ClassicFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ClassicFilterFactory), module, "ClassicFilterFactory", 0);
          }

          void t_ClassicFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ClassicFilterFactory).tp_dict, "class_", make_descriptor(ClassicFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ClassicFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ClassicFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ClassicFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ClassicFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ClassicFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ClassicFilterFactory::wrap_Object(ClassicFilterFactory(((t_ClassicFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ClassicFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ClassicFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ClassicFilterFactory_init_(t_ClassicFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ClassicFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ClassicFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ClassicFilterFactory_create(t_ClassicFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ClassicFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/es/SpanishLightStemFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {

          ::java::lang::Class *SpanishLightStemFilterFactory::class$ = NULL;
          jmethodID *SpanishLightStemFilterFactory::mids$ = NULL;
          bool SpanishLightStemFilterFactory::live$ = false;

          jclass SpanishLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/es/SpanishLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanishLightStemFilterFactory::SpanishLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream SpanishLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {
          static PyObject *t_SpanishLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanishLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanishLightStemFilterFactory_init_(t_SpanishLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanishLightStemFilterFactory_create(t_SpanishLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_SpanishLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_SpanishLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanishLightStemFilterFactory, t_SpanishLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, SpanishLightStemFilterFactory, t_SpanishLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_SpanishLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanishLightStemFilterFactory), module, "SpanishLightStemFilterFactory", 0);
          }

          void t_SpanishLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanishLightStemFilterFactory).tp_dict, "class_", make_descriptor(SpanishLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanishLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_SpanishLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanishLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanishLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanishLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_SpanishLightStemFilterFactory::wrap_Object(SpanishLightStemFilterFactory(((t_SpanishLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_SpanishLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanishLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanishLightStemFilterFactory_init_(t_SpanishLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SpanishLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SpanishLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanishLightStemFilterFactory_create(t_SpanishLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanishLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *AtomicReaderContext::class$ = NULL;
        jmethodID *AtomicReaderContext::mids$ = NULL;
        jfieldID *AtomicReaderContext::fids$ = NULL;
        bool AtomicReaderContext::live$ = false;

        jclass AtomicReaderContext::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/AtomicReaderContext");

            mids$ = new jmethodID[max_mid];
            mids$[mid_children_87851566] = env->getMethodID(cls, "children", "()Ljava/util/List;");
            mids$[mid_leaves_87851566] = env->getMethodID(cls, "leaves", "()Ljava/util/List;");
            mids$[mid_reader_dea1bc38] = env->getMethodID(cls, "reader", "()Lorg/apache/lucene/index/AtomicReader;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docBase] = env->getFieldID(cls, "docBase", "I");
            fids$[fid_ord] = env->getFieldID(cls, "ord", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::List AtomicReaderContext::children() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_children_87851566]));
        }

        ::java::util::List AtomicReaderContext::leaves() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_leaves_87851566]));
        }

        ::org::apache::lucene::index::AtomicReader AtomicReaderContext::reader() const
        {
          return ::org::apache::lucene::index::AtomicReader(env->callObjectMethod(this$, mids$[mid_reader_dea1bc38]));
        }

        jint AtomicReaderContext::_get_docBase() const
        {
          return env->getIntField(this$, fids$[fid_docBase]);
        }

        jint AtomicReaderContext::_get_ord() const
        {
          return env->getIntField(this$, fids$[fid_ord]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_AtomicReaderContext_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AtomicReaderContext_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AtomicReaderContext_children(t_AtomicReaderContext *self, PyObject *args);
        static PyObject *t_AtomicReaderContext_leaves(t_AtomicReaderContext *self, PyObject *args);
        static PyObject *t_AtomicReaderContext_reader(t_AtomicReaderContext *self, PyObject *args);
        static PyObject *t_AtomicReaderContext_get__docBase(t_AtomicReaderContext *self, void *data);
        static PyObject *t_AtomicReaderContext_get__ord(t_AtomicReaderContext *self, void *data);

        static PyGetSetDef t_AtomicReaderContext__fields_[] = {
          DECLARE_GET_FIELD(t_AtomicReaderContext, docBase),
          DECLARE_GET_FIELD(t_AtomicReaderContext, ord),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_AtomicReaderContext__methods_[] = {
          DECLARE_METHOD(t_AtomicReaderContext, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AtomicReaderContext, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AtomicReaderContext, children, METH_VARARGS),
          DECLARE_METHOD(t_AtomicReaderContext, leaves, METH_VARARGS),
          DECLARE_METHOD(t_AtomicReaderContext, reader, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AtomicReaderContext, t_AtomicReaderContext, ::org::apache::lucene::index::IndexReaderContext, AtomicReaderContext, abstract_init, 0, 0, t_AtomicReaderContext__fields_, 0, 0);

        void t_AtomicReaderContext::install(PyObject *module)
        {
          installType(&PY_TYPE(AtomicReaderContext), module, "AtomicReaderContext", 0);
        }

        void t_AtomicReaderContext::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AtomicReaderContext).tp_dict, "class_", make_descriptor(AtomicReaderContext::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AtomicReaderContext).tp_dict, "wrapfn_", make_descriptor(t_AtomicReaderContext::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AtomicReaderContext).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AtomicReaderContext_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AtomicReaderContext::initializeClass, 1)))
            return NULL;
          return t_AtomicReaderContext::wrap_Object(AtomicReaderContext(((t_AtomicReaderContext *) arg)->object.this$));
        }
        static PyObject *t_AtomicReaderContext_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AtomicReaderContext::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_AtomicReaderContext_children(t_AtomicReaderContext *self, PyObject *args)
        {
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.children());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(IndexReaderContext));
          }

          return callSuper(&PY_TYPE(AtomicReaderContext), (PyObject *) self, "children", args, 2);
        }

        static PyObject *t_AtomicReaderContext_leaves(t_AtomicReaderContext *self, PyObject *args)
        {
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.leaves());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(AtomicReaderContext));
          }

          return callSuper(&PY_TYPE(AtomicReaderContext), (PyObject *) self, "leaves", args, 2);
        }

        static PyObject *t_AtomicReaderContext_reader(t_AtomicReaderContext *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.reader());
            return ::org::apache::lucene::index::t_AtomicReader::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(AtomicReaderContext), (PyObject *) self, "reader", args, 2);
        }

        static PyObject *t_AtomicReaderContext_get__docBase(t_AtomicReaderContext *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docBase());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_AtomicReaderContext_get__ord(t_AtomicReaderContext *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_ord());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/NormValueSource.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *NormValueSource::class$ = NULL;
            jmethodID *NormValueSource::mids$ = NULL;
            bool NormValueSource::live$ = false;

            jclass NormValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/NormValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            NormValueSource::NormValueSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            void NormValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String NormValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean NormValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues NormValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint NormValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String NormValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_NormValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NormValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_NormValueSource_init_(t_NormValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_NormValueSource_createWeight(t_NormValueSource *self, PyObject *args);
            static PyObject *t_NormValueSource_description(t_NormValueSource *self, PyObject *args);
            static PyObject *t_NormValueSource_equals(t_NormValueSource *self, PyObject *args);
            static PyObject *t_NormValueSource_getValues(t_NormValueSource *self, PyObject *args);
            static PyObject *t_NormValueSource_hashCode(t_NormValueSource *self, PyObject *args);
            static PyObject *t_NormValueSource_name(t_NormValueSource *self);

            static PyMethodDef t_NormValueSource__methods_[] = {
              DECLARE_METHOD(t_NormValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NormValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NormValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_NormValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_NormValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_NormValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_NormValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_NormValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NormValueSource, t_NormValueSource, ::org::apache::lucene::queries::function::ValueSource, NormValueSource, t_NormValueSource_init_, 0, 0, 0, 0, 0);

            void t_NormValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(NormValueSource), module, "NormValueSource", 0);
            }

            void t_NormValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NormValueSource).tp_dict, "class_", make_descriptor(NormValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NormValueSource).tp_dict, "wrapfn_", make_descriptor(t_NormValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NormValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NormValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NormValueSource::initializeClass, 1)))
                return NULL;
              return t_NormValueSource::wrap_Object(NormValueSource(((t_NormValueSource *) arg)->object.this$));
            }
            static PyObject *t_NormValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NormValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_NormValueSource_init_(t_NormValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              NormValueSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = NormValueSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_NormValueSource_createWeight(t_NormValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(NormValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_NormValueSource_description(t_NormValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(NormValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_NormValueSource_equals(t_NormValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(NormValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_NormValueSource_getValues(t_NormValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(NormValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_NormValueSource_hashCode(t_NormValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(NormValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_NormValueSource_name(t_NormValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermIndexStatus.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/codecs/blocktree/Stats.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$TermIndexStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$TermIndexStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$TermIndexStatus::fids$ = NULL;
        bool CheckIndex$Status$TermIndexStatus::live$ = false;

        jclass CheckIndex$Status$TermIndexStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$TermIndexStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_blockTreeStats] = env->getFieldID(cls, "blockTreeStats", "Ljava/util/Map;");
            fids$[fid_delTermCount] = env->getFieldID(cls, "delTermCount", "J");
            fids$[fid_error] = env->getFieldID(cls, "error", "Ljava/lang/Throwable;");
            fids$[fid_termCount] = env->getFieldID(cls, "termCount", "J");
            fids$[fid_totFreq] = env->getFieldID(cls, "totFreq", "J");
            fids$[fid_totPos] = env->getFieldID(cls, "totPos", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Map CheckIndex$Status$TermIndexStatus::_get_blockTreeStats() const
        {
          return ::java::util::Map(env->getObjectField(this$, fids$[fid_blockTreeStats]));
        }

        void CheckIndex$Status$TermIndexStatus::_set_blockTreeStats(const ::java::util::Map & a0) const
        {
          env->setObjectField(this$, fids$[fid_blockTreeStats], a0.this$);
        }

        jlong CheckIndex$Status$TermIndexStatus::_get_delTermCount() const
        {
          return env->getLongField(this$, fids$[fid_delTermCount]);
        }

        void CheckIndex$Status$TermIndexStatus::_set_delTermCount(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_delTermCount], a0);
        }

        ::java::lang::Throwable CheckIndex$Status$TermIndexStatus::_get_error() const
        {
          return ::java::lang::Throwable(env->getObjectField(this$, fids$[fid_error]));
        }

        void CheckIndex$Status$TermIndexStatus::_set_error(const ::java::lang::Throwable & a0) const
        {
          env->setObjectField(this$, fids$[fid_error], a0.this$);
        }

        jlong CheckIndex$Status$TermIndexStatus::_get_termCount() const
        {
          return env->getLongField(this$, fids$[fid_termCount]);
        }

        void CheckIndex$Status$TermIndexStatus::_set_termCount(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_termCount], a0);
        }

        jlong CheckIndex$Status$TermIndexStatus::_get_totFreq() const
        {
          return env->getLongField(this$, fids$[fid_totFreq]);
        }

        void CheckIndex$Status$TermIndexStatus::_set_totFreq(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totFreq], a0);
        }

        jlong CheckIndex$Status$TermIndexStatus::_get_totPos() const
        {
          return env->getLongField(this$, fids$[fid_totPos]);
        }

        void CheckIndex$Status$TermIndexStatus::_set_totPos(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totPos], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$TermIndexStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__blockTreeStats(t_CheckIndex$Status$TermIndexStatus *self, void *data);
        static int t_CheckIndex$Status$TermIndexStatus_set__blockTreeStats(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__delTermCount(t_CheckIndex$Status$TermIndexStatus *self, void *data);
        static int t_CheckIndex$Status$TermIndexStatus_set__delTermCount(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__error(t_CheckIndex$Status$TermIndexStatus *self, void *data);
        static int t_CheckIndex$Status$TermIndexStatus_set__error(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__termCount(t_CheckIndex$Status$TermIndexStatus *self, void *data);
        static int t_CheckIndex$Status$TermIndexStatus_set__termCount(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__totFreq(t_CheckIndex$Status$TermIndexStatus *self, void *data);
        static int t_CheckIndex$Status$TermIndexStatus_set__totFreq(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__totPos(t_CheckIndex$Status$TermIndexStatus *self, void *data);
        static int t_CheckIndex$Status$TermIndexStatus_set__totPos(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$TermIndexStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermIndexStatus, blockTreeStats),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermIndexStatus, delTermCount),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermIndexStatus, error),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermIndexStatus, termCount),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermIndexStatus, totFreq),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermIndexStatus, totPos),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$TermIndexStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$TermIndexStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$TermIndexStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CheckIndex$Status$TermIndexStatus, t_CheckIndex$Status$TermIndexStatus, ::java::lang::Object, CheckIndex$Status$TermIndexStatus, abstract_init, 0, 0, t_CheckIndex$Status$TermIndexStatus__fields_, 0, 0);

        void t_CheckIndex$Status$TermIndexStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$TermIndexStatus), module, "CheckIndex$Status$TermIndexStatus", 0);
        }

        void t_CheckIndex$Status$TermIndexStatus::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$TermIndexStatus).tp_dict, "class_", make_descriptor(CheckIndex$Status$TermIndexStatus::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$TermIndexStatus).tp_dict, "wrapfn_", make_descriptor(t_CheckIndex$Status$TermIndexStatus::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$TermIndexStatus).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$TermIndexStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$TermIndexStatus::wrap_Object(CheckIndex$Status$TermIndexStatus(((t_CheckIndex$Status$TermIndexStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$TermIndexStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$TermIndexStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__blockTreeStats(t_CheckIndex$Status$TermIndexStatus *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object._get_blockTreeStats());
          return ::java::util::t_Map::wrap_Object(value);
        }
        static int t_CheckIndex$Status$TermIndexStatus_set__blockTreeStats(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
          {
            INT_CALL(self->object._set_blockTreeStats(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "blockTreeStats", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__delTermCount(t_CheckIndex$Status$TermIndexStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_delTermCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$TermIndexStatus_set__delTermCount(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_delTermCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "delTermCount", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__error(t_CheckIndex$Status$TermIndexStatus *self, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          OBJ_CALL(value = self->object._get_error());
          return ::java::lang::t_Throwable::wrap_Object(value);
        }
        static int t_CheckIndex$Status$TermIndexStatus_set__error(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &value))
          {
            INT_CALL(self->object._set_error(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "error", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__termCount(t_CheckIndex$Status$TermIndexStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_termCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$TermIndexStatus_set__termCount(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_termCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "termCount", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__totFreq(t_CheckIndex$Status$TermIndexStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$TermIndexStatus_set__totFreq(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totFreq(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totFreq", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__totPos(t_CheckIndex$Status$TermIndexStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totPos());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$TermIndexStatus_set__totPos(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totPos(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totPos", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/PayloadSpanUtil.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *PayloadSpanUtil::class$ = NULL;
          jmethodID *PayloadSpanUtil::mids$ = NULL;
          bool PayloadSpanUtil::live$ = false;

          jclass PayloadSpanUtil::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/PayloadSpanUtil");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4df5686b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReaderContext;)V");
              mids$[mid_getPayloadsForQuery_3971ce9f] = env->getMethodID(cls, "getPayloadsForQuery", "(Lorg/apache/lucene/search/Query;)Ljava/util/Collection;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PayloadSpanUtil::PayloadSpanUtil(const ::org::apache::lucene::index::IndexReaderContext & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4df5686b, a0.this$)) {}

          ::java::util::Collection PayloadSpanUtil::getPayloadsForQuery(const ::org::apache::lucene::search::Query & a0) const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getPayloadsForQuery_3971ce9f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_PayloadSpanUtil_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadSpanUtil_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PayloadSpanUtil_init_(t_PayloadSpanUtil *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PayloadSpanUtil_getPayloadsForQuery(t_PayloadSpanUtil *self, PyObject *arg);

          static PyMethodDef t_PayloadSpanUtil__methods_[] = {
            DECLARE_METHOD(t_PayloadSpanUtil, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadSpanUtil, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadSpanUtil, getPayloadsForQuery, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadSpanUtil, t_PayloadSpanUtil, ::java::lang::Object, PayloadSpanUtil, t_PayloadSpanUtil_init_, 0, 0, 0, 0, 0);

          void t_PayloadSpanUtil::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadSpanUtil), module, "PayloadSpanUtil", 0);
          }

          void t_PayloadSpanUtil::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadSpanUtil).tp_dict, "class_", make_descriptor(PayloadSpanUtil::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadSpanUtil).tp_dict, "wrapfn_", make_descriptor(t_PayloadSpanUtil::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadSpanUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadSpanUtil_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadSpanUtil::initializeClass, 1)))
              return NULL;
            return t_PayloadSpanUtil::wrap_Object(PayloadSpanUtil(((t_PayloadSpanUtil *) arg)->object.this$));
          }
          static PyObject *t_PayloadSpanUtil_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadSpanUtil::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PayloadSpanUtil_init_(t_PayloadSpanUtil *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
            PayloadSpanUtil object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReaderContext::initializeClass, &a0))
            {
              INT_CALL(object = PayloadSpanUtil(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PayloadSpanUtil_getPayloadsForQuery(t_PayloadSpanUtil *self, PyObject *arg)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::java::util::Collection result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getPayloadsForQuery(a0));
              return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(Object));
            }

            PyErr_SetArgsError((PyObject *) self, "getPayloadsForQuery", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiStemFilter::class$ = NULL;
          jmethodID *HindiStemFilter::mids$ = NULL;
          bool HindiStemFilter::live$ = false;

          jclass HindiStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiStemFilter::HindiStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean HindiStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiStemFilter_init_(t_HindiStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiStemFilter_incrementToken(t_HindiStemFilter *self, PyObject *args);

          static PyMethodDef t_HindiStemFilter__methods_[] = {
            DECLARE_METHOD(t_HindiStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HindiStemFilter, t_HindiStemFilter, ::org::apache::lucene::analysis::TokenFilter, HindiStemFilter, t_HindiStemFilter_init_, 0, 0, 0, 0, 0);

          void t_HindiStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiStemFilter), module, "HindiStemFilter", 0);
          }

          void t_HindiStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HindiStemFilter).tp_dict, "class_", make_descriptor(HindiStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HindiStemFilter).tp_dict, "wrapfn_", make_descriptor(t_HindiStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HindiStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HindiStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiStemFilter::initializeClass, 1)))
              return NULL;
            return t_HindiStemFilter::wrap_Object(HindiStemFilter(((t_HindiStemFilter *) arg)->object.this$));
          }
          static PyObject *t_HindiStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiStemFilter_init_(t_HindiStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            HindiStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = HindiStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HindiStemFilter_incrementToken(t_HindiStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(HindiStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sv/SwedishLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {

          ::java::lang::Class *SwedishLightStemmer::class$ = NULL;
          jmethodID *SwedishLightStemmer::mids$ = NULL;
          bool SwedishLightStemmer::live$ = false;

          jclass SwedishLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sv/SwedishLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SwedishLightStemmer::SwedishLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint SwedishLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {
          static PyObject *t_SwedishLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SwedishLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SwedishLightStemmer_init_(t_SwedishLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SwedishLightStemmer_stem(t_SwedishLightStemmer *self, PyObject *args);

          static PyMethodDef t_SwedishLightStemmer__methods_[] = {
            DECLARE_METHOD(t_SwedishLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SwedishLightStemmer, t_SwedishLightStemmer, ::java::lang::Object, SwedishLightStemmer, t_SwedishLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_SwedishLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(SwedishLightStemmer), module, "SwedishLightStemmer", 0);
          }

          void t_SwedishLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SwedishLightStemmer).tp_dict, "class_", make_descriptor(SwedishLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SwedishLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_SwedishLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SwedishLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SwedishLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SwedishLightStemmer::initializeClass, 1)))
              return NULL;
            return t_SwedishLightStemmer::wrap_Object(SwedishLightStemmer(((t_SwedishLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_SwedishLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SwedishLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SwedishLightStemmer_init_(t_SwedishLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            SwedishLightStemmer object((jobject) NULL);

            INT_CALL(object = SwedishLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_SwedishLightStemmer_stem(t_SwedishLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModel.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModel::class$ = NULL;
          jmethodID *BasicModel::mids$ = NULL;
          bool BasicModel::live$ = false;

          jclass BasicModel::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModel");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_05d4946a] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;F)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModel::BasicModel() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation BasicModel::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_05d4946a], a0.this$, a1));
          }

          jfloat BasicModel::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String BasicModel::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModel_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModel_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModel_init_(t_BasicModel *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModel_explain(t_BasicModel *self, PyObject *args);
          static PyObject *t_BasicModel_score(t_BasicModel *self, PyObject *args);
          static PyObject *t_BasicModel_toString(t_BasicModel *self, PyObject *args);

          static PyMethodDef t_BasicModel__methods_[] = {
            DECLARE_METHOD(t_BasicModel, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModel, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModel, explain, METH_VARARGS),
            DECLARE_METHOD(t_BasicModel, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModel, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicModel, t_BasicModel, ::java::lang::Object, BasicModel, t_BasicModel_init_, 0, 0, 0, 0, 0);

          void t_BasicModel::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModel), module, "BasicModel", 0);
          }

          void t_BasicModel::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicModel).tp_dict, "class_", make_descriptor(BasicModel::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicModel).tp_dict, "wrapfn_", make_descriptor(t_BasicModel::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicModel).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModel_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModel::initializeClass, 1)))
              return NULL;
            return t_BasicModel::wrap_Object(BasicModel(((t_BasicModel *) arg)->object.this$));
          }
          static PyObject *t_BasicModel_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModel::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModel_init_(t_BasicModel *self, PyObject *args, PyObject *kwds)
          {
            BasicModel object((jobject) NULL);

            INT_CALL(object = BasicModel());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModel_explain(t_BasicModel *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", args);
            return NULL;
          }

          static PyObject *t_BasicModel_score(t_BasicModel *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "score", args);
            return NULL;
          }

          static PyObject *t_BasicModel_toString(t_BasicModel *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BasicModel), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/BasqueStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *BasqueStemmer::class$ = NULL;
        jmethodID *BasqueStemmer::mids$ = NULL;
        bool BasqueStemmer::live$ = false;

        jclass BasqueStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/BasqueStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BasqueStemmer::BasqueStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean BasqueStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint BasqueStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean BasqueStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_BasqueStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BasqueStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BasqueStemmer_init_(t_BasqueStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BasqueStemmer_equals(t_BasqueStemmer *self, PyObject *args);
        static PyObject *t_BasqueStemmer_hashCode(t_BasqueStemmer *self, PyObject *args);
        static PyObject *t_BasqueStemmer_stem(t_BasqueStemmer *self, PyObject *args);

        static PyMethodDef t_BasqueStemmer__methods_[] = {
          DECLARE_METHOD(t_BasqueStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BasqueStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BasqueStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_BasqueStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_BasqueStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BasqueStemmer, t_BasqueStemmer, ::org::tartarus::snowball::SnowballProgram, BasqueStemmer, t_BasqueStemmer_init_, 0, 0, 0, 0, 0);

        void t_BasqueStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(BasqueStemmer), module, "BasqueStemmer", 0);
        }

        void t_BasqueStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BasqueStemmer).tp_dict, "class_", make_descriptor(BasqueStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BasqueStemmer).tp_dict, "wrapfn_", make_descriptor(t_BasqueStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BasqueStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BasqueStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BasqueStemmer::initializeClass, 1)))
            return NULL;
          return t_BasqueStemmer::wrap_Object(BasqueStemmer(((t_BasqueStemmer *) arg)->object.this$));
        }
        static PyObject *t_BasqueStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BasqueStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BasqueStemmer_init_(t_BasqueStemmer *self, PyObject *args, PyObject *kwds)
        {
          BasqueStemmer object((jobject) NULL);

          INT_CALL(object = BasqueStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_BasqueStemmer_equals(t_BasqueStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(BasqueStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_BasqueStemmer_hashCode(t_BasqueStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BasqueStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_BasqueStemmer_stem(t_BasqueStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(BasqueStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FilteredDocIdSetIterator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FilteredDocIdSetIterator::class$ = NULL;
        jmethodID *FilteredDocIdSetIterator::mids$ = NULL;
        bool FilteredDocIdSetIterator::live$ = false;

        jclass FilteredDocIdSetIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FilteredDocIdSetIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c2b5607d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_match_39c7bd30] = env->getMethodID(cls, "match", "(I)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilteredDocIdSetIterator::FilteredDocIdSetIterator(const ::org::apache::lucene::search::DocIdSetIterator & a0) : ::org::apache::lucene::search::DocIdSetIterator(env->newObject(initializeClass, &mids$, mid_init$_c2b5607d, a0.this$)) {}

        jint FilteredDocIdSetIterator::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        jlong FilteredDocIdSetIterator::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint FilteredDocIdSetIterator::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint FilteredDocIdSetIterator::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FilteredDocIdSetIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilteredDocIdSetIterator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilteredDocIdSetIterator_init_(t_FilteredDocIdSetIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilteredDocIdSetIterator_advance(t_FilteredDocIdSetIterator *self, PyObject *args);
        static PyObject *t_FilteredDocIdSetIterator_cost(t_FilteredDocIdSetIterator *self, PyObject *args);
        static PyObject *t_FilteredDocIdSetIterator_docID(t_FilteredDocIdSetIterator *self, PyObject *args);
        static PyObject *t_FilteredDocIdSetIterator_nextDoc(t_FilteredDocIdSetIterator *self, PyObject *args);

        static PyMethodDef t_FilteredDocIdSetIterator__methods_[] = {
          DECLARE_METHOD(t_FilteredDocIdSetIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredDocIdSetIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredDocIdSetIterator, advance, METH_VARARGS),
          DECLARE_METHOD(t_FilteredDocIdSetIterator, cost, METH_VARARGS),
          DECLARE_METHOD(t_FilteredDocIdSetIterator, docID, METH_VARARGS),
          DECLARE_METHOD(t_FilteredDocIdSetIterator, nextDoc, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilteredDocIdSetIterator, t_FilteredDocIdSetIterator, ::org::apache::lucene::search::DocIdSetIterator, FilteredDocIdSetIterator, t_FilteredDocIdSetIterator_init_, 0, 0, 0, 0, 0);

        void t_FilteredDocIdSetIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(FilteredDocIdSetIterator), module, "FilteredDocIdSetIterator", 0);
        }

        void t_FilteredDocIdSetIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilteredDocIdSetIterator).tp_dict, "class_", make_descriptor(FilteredDocIdSetIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilteredDocIdSetIterator).tp_dict, "wrapfn_", make_descriptor(t_FilteredDocIdSetIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilteredDocIdSetIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilteredDocIdSetIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilteredDocIdSetIterator::initializeClass, 1)))
            return NULL;
          return t_FilteredDocIdSetIterator::wrap_Object(FilteredDocIdSetIterator(((t_FilteredDocIdSetIterator *) arg)->object.this$));
        }
        static PyObject *t_FilteredDocIdSetIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilteredDocIdSetIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilteredDocIdSetIterator_init_(t_FilteredDocIdSetIterator *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);
          FilteredDocIdSetIterator object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
          {
            INT_CALL(object = FilteredDocIdSetIterator(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilteredDocIdSetIterator_advance(t_FilteredDocIdSetIterator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilteredDocIdSetIterator), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_FilteredDocIdSetIterator_cost(t_FilteredDocIdSetIterator *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilteredDocIdSetIterator), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_FilteredDocIdSetIterator_docID(t_FilteredDocIdSetIterator *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilteredDocIdSetIterator), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_FilteredDocIdSetIterator_nextDoc(t_FilteredDocIdSetIterator *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilteredDocIdSetIterator), (PyObject *) self, "nextDoc", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparatorSource.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparatorSource::class$ = NULL;
        jmethodID *FieldComparatorSource::mids$ = NULL;
        bool FieldComparatorSource::live$ = false;

        jclass FieldComparatorSource::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparatorSource");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_newComparator_0c7e6c91] = env->getMethodID(cls, "newComparator", "(Ljava/lang/String;IIZ)Lorg/apache/lucene/search/FieldComparator;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparatorSource::FieldComparatorSource() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::FieldComparator FieldComparatorSource::newComparator(const ::java::lang::String & a0, jint a1, jint a2, jboolean a3) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_newComparator_0c7e6c91], a0.this$, a1, a2, a3));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparatorSource_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparatorSource_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldComparatorSource_init_(t_FieldComparatorSource *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparatorSource_newComparator(t_FieldComparatorSource *self, PyObject *args);

        static PyMethodDef t_FieldComparatorSource__methods_[] = {
          DECLARE_METHOD(t_FieldComparatorSource, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparatorSource, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparatorSource, newComparator, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparatorSource, t_FieldComparatorSource, ::java::lang::Object, FieldComparatorSource, t_FieldComparatorSource_init_, 0, 0, 0, 0, 0);

        void t_FieldComparatorSource::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparatorSource), module, "FieldComparatorSource", 0);
        }

        void t_FieldComparatorSource::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparatorSource).tp_dict, "class_", make_descriptor(FieldComparatorSource::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparatorSource).tp_dict, "wrapfn_", make_descriptor(t_FieldComparatorSource::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparatorSource).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparatorSource_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparatorSource::initializeClass, 1)))
            return NULL;
          return t_FieldComparatorSource::wrap_Object(FieldComparatorSource(((t_FieldComparatorSource *) arg)->object.this$));
        }
        static PyObject *t_FieldComparatorSource_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparatorSource::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldComparatorSource_init_(t_FieldComparatorSource *self, PyObject *args, PyObject *kwds)
        {
          FieldComparatorSource object((jobject) NULL);

          INT_CALL(object = FieldComparatorSource());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldComparatorSource_newComparator(t_FieldComparatorSource *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jint a2;
          jboolean a3;
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "sIIZ", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.newComparator(a0, a1, a2, a3));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "newComparator", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MultiFunction.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/List.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MultiFunction::class$ = NULL;
            jmethodID *MultiFunction::mids$ = NULL;
            bool MultiFunction::live$ = false;

            jclass MultiFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MultiFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_description_4a33a010] = env->getStaticMethodID(cls, "description", "(Ljava/lang/String;Ljava/util/List;)Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_toString_6f3fdb48] = env->getStaticMethodID(cls, "toString", "(Ljava/lang/String;[Lorg/apache/lucene/queries/function/FunctionValues;I)Ljava/lang/String;");
                mids$[mid_valsArr_4dc40b54] = env->getStaticMethodID(cls, "valsArr", "(Ljava/util/List;Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)[Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MultiFunction::MultiFunction(const ::java::util::List & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

            void MultiFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String MultiFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            ::java::lang::String MultiFunction::description(const ::java::lang::String & a0, const ::java::util::List & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_description_4a33a010], a0.this$, a1.this$));
            }

            jboolean MultiFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jint MultiFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String MultiFunction::toString(const ::java::lang::String & a0, const JArray< ::org::apache::lucene::queries::function::FunctionValues > & a1, jint a2)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_6f3fdb48], a0.this$, a1.this$, a2));
            }

            JArray< ::org::apache::lucene::queries::function::FunctionValues > MultiFunction::valsArr(const ::java::util::List & a0, const ::java::util::Map & a1, const ::org::apache::lucene::index::AtomicReaderContext & a2)
            {
              jclass cls = env->getClass(initializeClass);
              return JArray< ::org::apache::lucene::queries::function::FunctionValues >(env->callStaticObjectMethod(cls, mids$[mid_valsArr_4dc40b54], a0.this$, a1.this$, a2.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MultiFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MultiFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MultiFunction_init_(t_MultiFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MultiFunction_createWeight(t_MultiFunction *self, PyObject *args);
            static PyObject *t_MultiFunction_description(t_MultiFunction *self, PyObject *args);
            static PyObject *t_MultiFunction_description_(PyTypeObject *type, PyObject *args);
            static PyObject *t_MultiFunction_equals(t_MultiFunction *self, PyObject *args);
            static PyObject *t_MultiFunction_hashCode(t_MultiFunction *self, PyObject *args);
            static PyObject *t_MultiFunction_toString(PyTypeObject *type, PyObject *args);
            static PyObject *t_MultiFunction_valsArr(PyTypeObject *type, PyObject *args);

            static PyMethodDef t_MultiFunction__methods_[] = {
              DECLARE_METHOD(t_MultiFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_MultiFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_MultiFunction, description_, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_MultiFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_MultiFunction, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_MultiFunction, toString, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_MultiFunction, valsArr, METH_VARARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MultiFunction, t_MultiFunction, ::org::apache::lucene::queries::function::ValueSource, MultiFunction, t_MultiFunction_init_, 0, 0, 0, 0, 0);

            void t_MultiFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(MultiFunction), module, "MultiFunction", 0);
            }

            void t_MultiFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MultiFunction).tp_dict, "class_", make_descriptor(MultiFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MultiFunction).tp_dict, "wrapfn_", make_descriptor(t_MultiFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MultiFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MultiFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MultiFunction::initializeClass, 1)))
                return NULL;
              return t_MultiFunction::wrap_Object(MultiFunction(((t_MultiFunction *) arg)->object.this$));
            }
            static PyObject *t_MultiFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MultiFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MultiFunction_init_(t_MultiFunction *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              MultiFunction object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                INT_CALL(object = MultiFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_MultiFunction_createWeight(t_MultiFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(MultiFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_MultiFunction_description(t_MultiFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(MultiFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_MultiFunction_description_(PyTypeObject *type, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::List a1((jobject) NULL);
              PyTypeObject **p1;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "sK", ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::queries::function::valuesource::MultiFunction::description(a0, a1));
                return j2p(result);
              }

              PyErr_SetArgsError(type, "description_", args);
              return NULL;
            }

            static PyObject *t_MultiFunction_equals(t_MultiFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(MultiFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_MultiFunction_hashCode(t_MultiFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(MultiFunction), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_MultiFunction_toString(PyTypeObject *type, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::org::apache::lucene::queries::function::FunctionValues > a1((jobject) NULL);
              jint a2;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "s[kI", ::org::apache::lucene::queries::function::FunctionValues::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::queries::function::valuesource::MultiFunction::toString(a0, a1, a2));
                return j2p(result);
              }

              return callSuper(type, "toString", args, 2);
            }

            static PyObject *t_MultiFunction_valsArr(PyTypeObject *type, PyObject *args)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::util::Map a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::index::AtomicReaderContext a2((jobject) NULL);
              JArray< ::org::apache::lucene::queries::function::FunctionValues > result((jobject) NULL);

              if (!parseArgs(args, "KKk", ::java::util::List::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_Map::parameters_, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::queries::function::valuesource::MultiFunction::valsArr(a0, a1, a2));
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::queries::function::t_FunctionValues::wrap_jobject);
              }

              PyErr_SetArgsError(type, "valsArr", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Builder$UnCompiledNode.h"
#include "org/apache/lucene/util/fst/Builder.h"
#include "org/apache/lucene/util/fst/Builder$Arc.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Builder$UnCompiledNode::class$ = NULL;
          jmethodID *Builder$UnCompiledNode::mids$ = NULL;
          jfieldID *Builder$UnCompiledNode::fids$ = NULL;
          bool Builder$UnCompiledNode::live$ = false;

          jclass Builder$UnCompiledNode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Builder$UnCompiledNode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_343134b4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/Builder;I)V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_getLastOutput_29be6a55] = env->getMethodID(cls, "getLastOutput", "(I)Ljava/lang/Object;");
              mids$[mid_isCompiled_54c6a16a] = env->getMethodID(cls, "isCompiled", "()Z");
              mids$[mid_prependOutput_290588ee] = env->getMethodID(cls, "prependOutput", "(Ljava/lang/Object;)V");
              mids$[mid_setLastOutput_f7cd74a4] = env->getMethodID(cls, "setLastOutput", "(ILjava/lang/Object;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_arcs] = env->getFieldID(cls, "arcs", "[Lorg/apache/lucene/util/fst/Builder$Arc;");
              fids$[fid_depth] = env->getFieldID(cls, "depth", "I");
              fids$[fid_inputCount] = env->getFieldID(cls, "inputCount", "J");
              fids$[fid_isFinal] = env->getFieldID(cls, "isFinal", "Z");
              fids$[fid_numArcs] = env->getFieldID(cls, "numArcs", "I");
              fids$[fid_output] = env->getFieldID(cls, "output", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Builder$UnCompiledNode::Builder$UnCompiledNode(const ::org::apache::lucene::util::fst::Builder & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_343134b4, a0.this$, a1)) {}

          void Builder$UnCompiledNode::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          ::java::lang::Object Builder$UnCompiledNode::getLastOutput(jint a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getLastOutput_29be6a55], a0));
          }

          jboolean Builder$UnCompiledNode::isCompiled() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isCompiled_54c6a16a]);
          }

          void Builder$UnCompiledNode::prependOutput(const ::java::lang::Object & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_prependOutput_290588ee], a0.this$);
          }

          void Builder$UnCompiledNode::setLastOutput(jint a0, const ::java::lang::Object & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setLastOutput_f7cd74a4], a0, a1.this$);
          }

          JArray< ::org::apache::lucene::util::fst::Builder$Arc > Builder$UnCompiledNode::_get_arcs() const
          {
            return JArray< ::org::apache::lucene::util::fst::Builder$Arc >(env->getObjectField(this$, fids$[fid_arcs]));
          }

          void Builder$UnCompiledNode::_set_arcs(const JArray< ::org::apache::lucene::util::fst::Builder$Arc > & a0) const
          {
            env->setObjectField(this$, fids$[fid_arcs], a0.this$);
          }

          jint Builder$UnCompiledNode::_get_depth() const
          {
            return env->getIntField(this$, fids$[fid_depth]);
          }

          jlong Builder$UnCompiledNode::_get_inputCount() const
          {
            return env->getLongField(this$, fids$[fid_inputCount]);
          }

          void Builder$UnCompiledNode::_set_inputCount(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_inputCount], a0);
          }

          jboolean Builder$UnCompiledNode::_get_isFinal() const
          {
            return env->getBooleanField(this$, fids$[fid_isFinal]);
          }

          void Builder$UnCompiledNode::_set_isFinal(jboolean a0) const
          {
            env->setBooleanField(this$, fids$[fid_isFinal], a0);
          }

          jint Builder$UnCompiledNode::_get_numArcs() const
          {
            return env->getIntField(this$, fids$[fid_numArcs]);
          }

          void Builder$UnCompiledNode::_set_numArcs(jint a0) const
          {
            env->setIntField(this$, fids$[fid_numArcs], a0);
          }

          ::java::lang::Object Builder$UnCompiledNode::_get_output() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output]));
          }

          void Builder$UnCompiledNode::_set_output(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_output], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Builder$UnCompiledNode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder$UnCompiledNode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder$UnCompiledNode_of_(t_Builder$UnCompiledNode *self, PyObject *args);
          static int t_Builder$UnCompiledNode_init_(t_Builder$UnCompiledNode *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Builder$UnCompiledNode_clear(t_Builder$UnCompiledNode *self);
          static PyObject *t_Builder$UnCompiledNode_getLastOutput(t_Builder$UnCompiledNode *self, PyObject *arg);
          static PyObject *t_Builder$UnCompiledNode_isCompiled(t_Builder$UnCompiledNode *self);
          static PyObject *t_Builder$UnCompiledNode_prependOutput(t_Builder$UnCompiledNode *self, PyObject *arg);
          static PyObject *t_Builder$UnCompiledNode_setLastOutput(t_Builder$UnCompiledNode *self, PyObject *args);
          static PyObject *t_Builder$UnCompiledNode_get__arcs(t_Builder$UnCompiledNode *self, void *data);
          static int t_Builder$UnCompiledNode_set__arcs(t_Builder$UnCompiledNode *self, PyObject *arg, void *data);
          static PyObject *t_Builder$UnCompiledNode_get__depth(t_Builder$UnCompiledNode *self, void *data);
          static PyObject *t_Builder$UnCompiledNode_get__inputCount(t_Builder$UnCompiledNode *self, void *data);
          static int t_Builder$UnCompiledNode_set__inputCount(t_Builder$UnCompiledNode *self, PyObject *arg, void *data);
          static PyObject *t_Builder$UnCompiledNode_get__isFinal(t_Builder$UnCompiledNode *self, void *data);
          static int t_Builder$UnCompiledNode_set__isFinal(t_Builder$UnCompiledNode *self, PyObject *arg, void *data);
          static PyObject *t_Builder$UnCompiledNode_get__numArcs(t_Builder$UnCompiledNode *self, void *data);
          static int t_Builder$UnCompiledNode_set__numArcs(t_Builder$UnCompiledNode *self, PyObject *arg, void *data);
          static PyObject *t_Builder$UnCompiledNode_get__output(t_Builder$UnCompiledNode *self, void *data);
          static int t_Builder$UnCompiledNode_set__output(t_Builder$UnCompiledNode *self, PyObject *arg, void *data);

          static PyObject *t_Builder$UnCompiledNode_get__compiled(t_Builder$UnCompiledNode *self, void *data);
          static PyObject *t_Builder$UnCompiledNode_get__parameters_(t_Builder$UnCompiledNode *self, void *data);
          static PyGetSetDef t_Builder$UnCompiledNode__fields_[] = {
            DECLARE_GETSET_FIELD(t_Builder$UnCompiledNode, arcs),
            DECLARE_GET_FIELD(t_Builder$UnCompiledNode, depth),
            DECLARE_GETSET_FIELD(t_Builder$UnCompiledNode, inputCount),
            DECLARE_GETSET_FIELD(t_Builder$UnCompiledNode, isFinal),
            DECLARE_GETSET_FIELD(t_Builder$UnCompiledNode, numArcs),
            DECLARE_GETSET_FIELD(t_Builder$UnCompiledNode, output),
            DECLARE_GET_FIELD(t_Builder$UnCompiledNode, compiled),
            DECLARE_GET_FIELD(t_Builder$UnCompiledNode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Builder$UnCompiledNode__methods_[] = {
            DECLARE_METHOD(t_Builder$UnCompiledNode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder$UnCompiledNode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder$UnCompiledNode, of_, METH_VARARGS),
            DECLARE_METHOD(t_Builder$UnCompiledNode, clear, METH_NOARGS),
            DECLARE_METHOD(t_Builder$UnCompiledNode, getLastOutput, METH_O),
            DECLARE_METHOD(t_Builder$UnCompiledNode, isCompiled, METH_NOARGS),
            DECLARE_METHOD(t_Builder$UnCompiledNode, prependOutput, METH_O),
            DECLARE_METHOD(t_Builder$UnCompiledNode, setLastOutput, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Builder$UnCompiledNode, t_Builder$UnCompiledNode, ::java::lang::Object, Builder$UnCompiledNode, t_Builder$UnCompiledNode_init_, 0, 0, t_Builder$UnCompiledNode__fields_, 0, 0);
          PyObject *t_Builder$UnCompiledNode::wrap_Object(const Builder$UnCompiledNode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder$UnCompiledNode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder$UnCompiledNode *self = (t_Builder$UnCompiledNode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Builder$UnCompiledNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder$UnCompiledNode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder$UnCompiledNode *self = (t_Builder$UnCompiledNode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Builder$UnCompiledNode::install(PyObject *module)
          {
            installType(&PY_TYPE(Builder$UnCompiledNode), module, "Builder$UnCompiledNode", 0);
          }

          void t_Builder$UnCompiledNode::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Builder$UnCompiledNode).tp_dict, "class_", make_descriptor(Builder$UnCompiledNode::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Builder$UnCompiledNode).tp_dict, "wrapfn_", make_descriptor(t_Builder$UnCompiledNode::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Builder$UnCompiledNode).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Builder$UnCompiledNode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Builder$UnCompiledNode::initializeClass, 1)))
              return NULL;
            return t_Builder$UnCompiledNode::wrap_Object(Builder$UnCompiledNode(((t_Builder$UnCompiledNode *) arg)->object.this$));
          }
          static PyObject *t_Builder$UnCompiledNode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Builder$UnCompiledNode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Builder$UnCompiledNode_of_(t_Builder$UnCompiledNode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Builder$UnCompiledNode_init_(t_Builder$UnCompiledNode *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::Builder a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            Builder$UnCompiledNode object((jobject) NULL);

            if (!parseArgs(args, "KI", ::org::apache::lucene::util::fst::Builder::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_Builder::parameters_, &a1))
            {
              INT_CALL(object = Builder$UnCompiledNode(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Builder$UnCompiledNode_clear(t_Builder$UnCompiledNode *self)
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          static PyObject *t_Builder$UnCompiledNode_getLastOutput(t_Builder$UnCompiledNode *self, PyObject *arg)
          {
            jint a0;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getLastOutput(a0));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getLastOutput", arg);
            return NULL;
          }

          static PyObject *t_Builder$UnCompiledNode_isCompiled(t_Builder$UnCompiledNode *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isCompiled());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_Builder$UnCompiledNode_prependOutput(t_Builder$UnCompiledNode *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);

            if (!parseArg(arg, "O", self->parameters[0], &a0))
            {
              OBJ_CALL(self->object.prependOutput(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "prependOutput", arg);
            return NULL;
          }

          static PyObject *t_Builder$UnCompiledNode_setLastOutput(t_Builder$UnCompiledNode *self, PyObject *args)
          {
            jint a0;
            ::java::lang::Object a1((jobject) NULL);

            if (!parseArgs(args, "IO", self->parameters[0], &a0, &a1))
            {
              OBJ_CALL(self->object.setLastOutput(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setLastOutput", args);
            return NULL;
          }
          static PyObject *t_Builder$UnCompiledNode_get__parameters_(t_Builder$UnCompiledNode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Builder$UnCompiledNode_get__arcs(t_Builder$UnCompiledNode *self, void *data)
          {
            JArray< ::org::apache::lucene::util::fst::Builder$Arc > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_arcs());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::util::fst::t_Builder$Arc::wrap_jobject);
          }
          static int t_Builder$UnCompiledNode_set__arcs(t_Builder$UnCompiledNode *self, PyObject *arg, void *data)
          {
            JArray< ::org::apache::lucene::util::fst::Builder$Arc > value((jobject) NULL);
            if (!parseArg(arg, "[k", ::org::apache::lucene::util::fst::Builder$Arc::initializeClass, &value))
            {
              INT_CALL(self->object._set_arcs(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "arcs", arg);
            return -1;
          }

          static PyObject *t_Builder$UnCompiledNode_get__depth(t_Builder$UnCompiledNode *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_depth());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_Builder$UnCompiledNode_get__inputCount(t_Builder$UnCompiledNode *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_inputCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Builder$UnCompiledNode_set__inputCount(t_Builder$UnCompiledNode *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_inputCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "inputCount", arg);
            return -1;
          }

          static PyObject *t_Builder$UnCompiledNode_get__isFinal(t_Builder$UnCompiledNode *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_isFinal());
            Py_RETURN_BOOL(value);
          }
          static int t_Builder$UnCompiledNode_set__isFinal(t_Builder$UnCompiledNode *self, PyObject *arg, void *data)
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object._set_isFinal(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "isFinal", arg);
            return -1;
          }

          static PyObject *t_Builder$UnCompiledNode_get__numArcs(t_Builder$UnCompiledNode *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_numArcs());
            return PyInt_FromLong((long) value);
          }
          static int t_Builder$UnCompiledNode_set__numArcs(t_Builder$UnCompiledNode *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_numArcs(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "numArcs", arg);
            return -1;
          }

          static PyObject *t_Builder$UnCompiledNode_get__output(t_Builder$UnCompiledNode *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_Builder$UnCompiledNode_set__output(t_Builder$UnCompiledNode *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_output(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "output", arg);
            return -1;
          }

          static PyObject *t_Builder$UnCompiledNode_get__compiled(t_Builder$UnCompiledNode *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isCompiled());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseStemmer::class$ = NULL;
          jmethodID *PortugueseStemmer::mids$ = NULL;
          bool PortugueseStemmer::live$ = false;

          jclass PortugueseStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseStemmer::PortugueseStemmer() : ::org::apache::lucene::analysis::pt::RSLPStemmerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint PortugueseStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseStemmer_init_(t_PortugueseStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseStemmer_stem(t_PortugueseStemmer *self, PyObject *args);

          static PyMethodDef t_PortugueseStemmer__methods_[] = {
            DECLARE_METHOD(t_PortugueseStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseStemmer, t_PortugueseStemmer, ::org::apache::lucene::analysis::pt::RSLPStemmerBase, PortugueseStemmer, t_PortugueseStemmer_init_, 0, 0, 0, 0, 0);

          void t_PortugueseStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseStemmer), module, "PortugueseStemmer", 0);
          }

          void t_PortugueseStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseStemmer).tp_dict, "class_", make_descriptor(PortugueseStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseStemmer).tp_dict, "wrapfn_", make_descriptor(t_PortugueseStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseStemmer::initializeClass, 1)))
              return NULL;
            return t_PortugueseStemmer::wrap_Object(PortugueseStemmer(((t_PortugueseStemmer *) arg)->object.this$));
          }
          static PyObject *t_PortugueseStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseStemmer_init_(t_PortugueseStemmer *self, PyObject *args, PyObject *kwds)
          {
            PortugueseStemmer object((jobject) NULL);

            INT_CALL(object = PortugueseStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_PortugueseStemmer_stem(t_PortugueseStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermVectorStatus.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$TermVectorStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$TermVectorStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$TermVectorStatus::fids$ = NULL;
        bool CheckIndex$Status$TermVectorStatus::live$ = false;

        jclass CheckIndex$Status$TermVectorStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$TermVectorStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docCount] = env->getFieldID(cls, "docCount", "I");
            fids$[fid_error] = env->getFieldID(cls, "error", "Ljava/lang/Throwable;");
            fids$[fid_totVectors] = env->getFieldID(cls, "totVectors", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint CheckIndex$Status$TermVectorStatus::_get_docCount() const
        {
          return env->getIntField(this$, fids$[fid_docCount]);
        }

        void CheckIndex$Status$TermVectorStatus::_set_docCount(jint a0) const
        {
          env->setIntField(this$, fids$[fid_docCount], a0);
        }

        ::java::lang::Throwable CheckIndex$Status$TermVectorStatus::_get_error() const
        {
          return ::java::lang::Throwable(env->getObjectField(this$, fids$[fid_error]));
        }

        void CheckIndex$Status$TermVectorStatus::_set_error(const ::java::lang::Throwable & a0) const
        {
          env->setObjectField(this$, fids$[fid_error], a0.this$);
        }

        jlong CheckIndex$Status$TermVectorStatus::_get_totVectors() const
        {
          return env->getLongField(this$, fids$[fid_totVectors]);
        }

        void CheckIndex$Status$TermVectorStatus::_set_totVectors(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totVectors], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$TermVectorStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$TermVectorStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$TermVectorStatus_get__docCount(t_CheckIndex$Status$TermVectorStatus *self, void *data);
        static int t_CheckIndex$Status$TermVectorStatus_set__docCount(t_CheckIndex$Status$TermVectorStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermVectorStatus_get__error(t_CheckIndex$Status$TermVectorStatus *self, void *data);
        static int t_CheckIndex$Status$TermVectorStatus_set__error(t_CheckIndex$Status$TermVectorStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermVectorStatus_get__totVectors(t_CheckIndex$Status$TermVectorStatus *self, void *data);
        static int t_CheckIndex$Status$TermVectorStatus_set__totVectors(t_CheckIndex$Status$TermVectorStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$TermVectorStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermVectorStatus, docCount),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermVectorStatus, error),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermVectorStatus, totVectors),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$TermVectorStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$TermVectorStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$TermVectorStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CheckIndex$Status$TermVectorStatus, t_CheckIndex$Status$TermVectorStatus, ::java::lang::Object, CheckIndex$Status$TermVectorStatus, abstract_init, 0, 0, t_CheckIndex$Status$TermVectorStatus__fields_, 0, 0);

        void t_CheckIndex$Status$TermVectorStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$TermVectorStatus), module, "CheckIndex$Status$TermVectorStatus", 0);
        }

        void t_CheckIndex$Status$TermVectorStatus::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$TermVectorStatus).tp_dict, "class_", make_descriptor(CheckIndex$Status$TermVectorStatus::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$TermVectorStatus).tp_dict, "wrapfn_", make_descriptor(t_CheckIndex$Status$TermVectorStatus::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$TermVectorStatus).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$TermVectorStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$TermVectorStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$TermVectorStatus::wrap_Object(CheckIndex$Status$TermVectorStatus(((t_CheckIndex$Status$TermVectorStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$TermVectorStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$TermVectorStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$TermVectorStatus_get__docCount(t_CheckIndex$Status$TermVectorStatus *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docCount());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status$TermVectorStatus_set__docCount(t_CheckIndex$Status$TermVectorStatus *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_docCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docCount", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermVectorStatus_get__error(t_CheckIndex$Status$TermVectorStatus *self, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          OBJ_CALL(value = self->object._get_error());
          return ::java::lang::t_Throwable::wrap_Object(value);
        }
        static int t_CheckIndex$Status$TermVectorStatus_set__error(t_CheckIndex$Status$TermVectorStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &value))
          {
            INT_CALL(self->object._set_error(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "error", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermVectorStatus_get__totVectors(t_CheckIndex$Status$TermVectorStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totVectors());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$TermVectorStatus_set__totVectors(t_CheckIndex$Status$TermVectorStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totVectors(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totVectors", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfigListener.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfig.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {

              ::java::lang::Class *QueryConfigHandler::class$ = NULL;
              jmethodID *QueryConfigHandler::mids$ = NULL;
              bool QueryConfigHandler::live$ = false;

              jclass QueryConfigHandler::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_addFieldConfigListener_cafa3927] = env->getMethodID(cls, "addFieldConfigListener", "(Lorg/apache/lucene/queryparser/flexible/core/config/FieldConfigListener;)V");
                  mids$[mid_getFieldConfig_081010e4] = env->getMethodID(cls, "getFieldConfig", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/flexible/core/config/FieldConfig;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              QueryConfigHandler::QueryConfigHandler() : ::org::apache::lucene::queryparser::flexible::core::config::AbstractQueryConfig(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              void QueryConfigHandler::addFieldConfigListener(const ::org::apache::lucene::queryparser::flexible::core::config::FieldConfigListener & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_addFieldConfigListener_cafa3927], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig QueryConfigHandler::getFieldConfig(const ::java::lang::String & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig(env->callObjectMethod(this$, mids$[mid_getFieldConfig_081010e4], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {
              static PyObject *t_QueryConfigHandler_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryConfigHandler_instance_(PyTypeObject *type, PyObject *arg);
              static int t_QueryConfigHandler_init_(t_QueryConfigHandler *self, PyObject *args, PyObject *kwds);
              static PyObject *t_QueryConfigHandler_addFieldConfigListener(t_QueryConfigHandler *self, PyObject *arg);
              static PyObject *t_QueryConfigHandler_getFieldConfig(t_QueryConfigHandler *self, PyObject *arg);

              static PyMethodDef t_QueryConfigHandler__methods_[] = {
                DECLARE_METHOD(t_QueryConfigHandler, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryConfigHandler, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryConfigHandler, addFieldConfigListener, METH_O),
                DECLARE_METHOD(t_QueryConfigHandler, getFieldConfig, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryConfigHandler, t_QueryConfigHandler, ::org::apache::lucene::queryparser::flexible::core::config::AbstractQueryConfig, QueryConfigHandler, t_QueryConfigHandler_init_, 0, 0, 0, 0, 0);

              void t_QueryConfigHandler::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryConfigHandler), module, "QueryConfigHandler", 0);
              }

              void t_QueryConfigHandler::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryConfigHandler).tp_dict, "class_", make_descriptor(QueryConfigHandler::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryConfigHandler).tp_dict, "wrapfn_", make_descriptor(t_QueryConfigHandler::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryConfigHandler).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryConfigHandler_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryConfigHandler::initializeClass, 1)))
                  return NULL;
                return t_QueryConfigHandler::wrap_Object(QueryConfigHandler(((t_QueryConfigHandler *) arg)->object.this$));
              }
              static PyObject *t_QueryConfigHandler_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryConfigHandler::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_QueryConfigHandler_init_(t_QueryConfigHandler *self, PyObject *args, PyObject *kwds)
              {
                QueryConfigHandler object((jobject) NULL);

                INT_CALL(object = QueryConfigHandler());
                self->object = object;

                return 0;
              }

              static PyObject *t_QueryConfigHandler_addFieldConfigListener(t_QueryConfigHandler *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::FieldConfigListener a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::FieldConfigListener::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.addFieldConfigListener(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "addFieldConfigListener", arg);
                return NULL;
              }

              static PyObject *t_QueryConfigHandler_getFieldConfig(t_QueryConfigHandler *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig result((jobject) NULL);

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(result = self->object.getFieldConfig(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::config::t_FieldConfig::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "getFieldConfig", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeError.h"
#include "org/apache/lucene/queryparser/flexible/messages/NLSException.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {

            ::java::lang::Class *QueryNodeError::class$ = NULL;
            jmethodID *QueryNodeError::mids$ = NULL;
            bool QueryNodeError::live$ = false;

            jclass QueryNodeError::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/QueryNodeError");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
                mids$[mid_init$_1dde9d59] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;)V");
                mids$[mid_init$_41dcc0ed] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;Ljava/lang/Throwable;)V");
                mids$[mid_getMessageObject_1bceed44] = env->getMethodID(cls, "getMessageObject", "()Lorg/apache/lucene/queryparser/flexible/messages/Message;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryNodeError::QueryNodeError(const ::java::lang::Throwable & a0) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

            QueryNodeError::QueryNodeError(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_1dde9d59, a0.this$)) {}

            QueryNodeError::QueryNodeError(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0, const ::java::lang::Throwable & a1) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_41dcc0ed, a0.this$, a1.this$)) {}

            ::org::apache::lucene::queryparser::flexible::messages::Message QueryNodeError::getMessageObject() const
            {
              return ::org::apache::lucene::queryparser::flexible::messages::Message(env->callObjectMethod(this$, mids$[mid_getMessageObject_1bceed44]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            static PyObject *t_QueryNodeError_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryNodeError_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryNodeError_init_(t_QueryNodeError *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryNodeError_getMessageObject(t_QueryNodeError *self);
            static PyObject *t_QueryNodeError_get__messageObject(t_QueryNodeError *self, void *data);
            static PyGetSetDef t_QueryNodeError__fields_[] = {
              DECLARE_GET_FIELD(t_QueryNodeError, messageObject),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryNodeError__methods_[] = {
              DECLARE_METHOD(t_QueryNodeError, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryNodeError, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryNodeError, getMessageObject, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryNodeError, t_QueryNodeError, ::java::lang::Error, QueryNodeError, t_QueryNodeError_init_, 0, 0, t_QueryNodeError__fields_, 0, 0);

            void t_QueryNodeError::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryNodeError), module, "QueryNodeError", 0);
            }

            void t_QueryNodeError::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryNodeError).tp_dict, "class_", make_descriptor(QueryNodeError::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryNodeError).tp_dict, "wrapfn_", make_descriptor(t_QueryNodeError::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryNodeError).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryNodeError_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryNodeError::initializeClass, 1)))
                return NULL;
              return t_QueryNodeError::wrap_Object(QueryNodeError(((t_QueryNodeError *) arg)->object.this$));
            }
            static PyObject *t_QueryNodeError_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryNodeError::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryNodeError_init_(t_QueryNodeError *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::Throwable a0((jobject) NULL);
                  QueryNodeError object((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryNodeError(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                  QueryNodeError object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryNodeError(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                  ::java::lang::Throwable a1((jobject) NULL);
                  QueryNodeError object((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, ::java::lang::Throwable::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = QueryNodeError(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryNodeError_getMessageObject(t_QueryNodeError *self)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message result((jobject) NULL);
              OBJ_CALL(result = self->object.getMessageObject());
              return ::org::apache::lucene::queryparser::flexible::messages::t_Message::wrap_Object(result);
            }

            static PyObject *t_QueryNodeError_get__messageObject(t_QueryNodeError *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message value((jobject) NULL);
              OBJ_CALL(value = self->object.getMessageObject());
              return ::org::apache::lucene::queryparser::flexible::messages::t_Message::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/DoubleBarrelLRUCache$CloneableKey.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *DoubleBarrelLRUCache$CloneableKey::class$ = NULL;
        jmethodID *DoubleBarrelLRUCache$CloneableKey::mids$ = NULL;
        bool DoubleBarrelLRUCache$CloneableKey::live$ = false;

        jclass DoubleBarrelLRUCache$CloneableKey::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/DoubleBarrelLRUCache$CloneableKey");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clone_233cec6c] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/DoubleBarrelLRUCache$CloneableKey;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DoubleBarrelLRUCache$CloneableKey::DoubleBarrelLRUCache$CloneableKey() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        DoubleBarrelLRUCache$CloneableKey DoubleBarrelLRUCache$CloneableKey::clone() const
        {
          return DoubleBarrelLRUCache$CloneableKey(env->callObjectMethod(this$, mids$[mid_clone_233cec6c]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_of_(t_DoubleBarrelLRUCache$CloneableKey *self, PyObject *args);
        static int t_DoubleBarrelLRUCache$CloneableKey_init_(t_DoubleBarrelLRUCache$CloneableKey *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_clone(t_DoubleBarrelLRUCache$CloneableKey *self);
        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_get__parameters_(t_DoubleBarrelLRUCache$CloneableKey *self, void *data);
        static PyGetSetDef t_DoubleBarrelLRUCache$CloneableKey__fields_[] = {
          DECLARE_GET_FIELD(t_DoubleBarrelLRUCache$CloneableKey, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DoubleBarrelLRUCache$CloneableKey__methods_[] = {
          DECLARE_METHOD(t_DoubleBarrelLRUCache$CloneableKey, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleBarrelLRUCache$CloneableKey, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleBarrelLRUCache$CloneableKey, of_, METH_VARARGS),
          DECLARE_METHOD(t_DoubleBarrelLRUCache$CloneableKey, clone, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DoubleBarrelLRUCache$CloneableKey, t_DoubleBarrelLRUCache$CloneableKey, ::java::lang::Object, DoubleBarrelLRUCache$CloneableKey, t_DoubleBarrelLRUCache$CloneableKey_init_, 0, 0, t_DoubleBarrelLRUCache$CloneableKey__fields_, 0, 0);
        PyObject *t_DoubleBarrelLRUCache$CloneableKey::wrap_Object(const DoubleBarrelLRUCache$CloneableKey& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_DoubleBarrelLRUCache$CloneableKey::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DoubleBarrelLRUCache$CloneableKey *self = (t_DoubleBarrelLRUCache$CloneableKey *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        PyObject *t_DoubleBarrelLRUCache$CloneableKey::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_DoubleBarrelLRUCache$CloneableKey::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DoubleBarrelLRUCache$CloneableKey *self = (t_DoubleBarrelLRUCache$CloneableKey *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        void t_DoubleBarrelLRUCache$CloneableKey::install(PyObject *module)
        {
          installType(&PY_TYPE(DoubleBarrelLRUCache$CloneableKey), module, "DoubleBarrelLRUCache$CloneableKey", 0);
        }

        void t_DoubleBarrelLRUCache$CloneableKey::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DoubleBarrelLRUCache$CloneableKey).tp_dict, "class_", make_descriptor(DoubleBarrelLRUCache$CloneableKey::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DoubleBarrelLRUCache$CloneableKey).tp_dict, "wrapfn_", make_descriptor(t_DoubleBarrelLRUCache$CloneableKey::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DoubleBarrelLRUCache$CloneableKey).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DoubleBarrelLRUCache$CloneableKey::initializeClass, 1)))
            return NULL;
          return t_DoubleBarrelLRUCache$CloneableKey::wrap_Object(DoubleBarrelLRUCache$CloneableKey(((t_DoubleBarrelLRUCache$CloneableKey *) arg)->object.this$));
        }
        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DoubleBarrelLRUCache$CloneableKey::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_of_(t_DoubleBarrelLRUCache$CloneableKey *self, PyObject *args)
        {
          if (!parseArg(args, "T", 2, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_DoubleBarrelLRUCache$CloneableKey_init_(t_DoubleBarrelLRUCache$CloneableKey *self, PyObject *args, PyObject *kwds)
        {
          DoubleBarrelLRUCache$CloneableKey object((jobject) NULL);

          INT_CALL(object = DoubleBarrelLRUCache$CloneableKey());
          self->object = object;

          return 0;
        }

        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_clone(t_DoubleBarrelLRUCache$CloneableKey *self)
        {
          DoubleBarrelLRUCache$CloneableKey result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_DoubleBarrelLRUCache$CloneableKey::wrap_Object(result);
        }
        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_get__parameters_(t_DoubleBarrelLRUCache$CloneableKey *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *StemmerOverrideFilterFactory::class$ = NULL;
          jmethodID *StemmerOverrideFilterFactory::mids$ = NULL;
          bool StemmerOverrideFilterFactory::live$ = false;

          jclass StemmerOverrideFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_isIgnoreCase_54c6a16a] = env->getMethodID(cls, "isIgnoreCase", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StemmerOverrideFilterFactory::StemmerOverrideFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream StemmerOverrideFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          void StemmerOverrideFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }

          jboolean StemmerOverrideFilterFactory::isIgnoreCase() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIgnoreCase_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_StemmerOverrideFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StemmerOverrideFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StemmerOverrideFilterFactory_init_(t_StemmerOverrideFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StemmerOverrideFilterFactory_create(t_StemmerOverrideFilterFactory *self, PyObject *args);
          static PyObject *t_StemmerOverrideFilterFactory_inform(t_StemmerOverrideFilterFactory *self, PyObject *arg);
          static PyObject *t_StemmerOverrideFilterFactory_isIgnoreCase(t_StemmerOverrideFilterFactory *self);
          static PyObject *t_StemmerOverrideFilterFactory_get__ignoreCase(t_StemmerOverrideFilterFactory *self, void *data);
          static PyGetSetDef t_StemmerOverrideFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_StemmerOverrideFilterFactory, ignoreCase),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StemmerOverrideFilterFactory__methods_[] = {
            DECLARE_METHOD(t_StemmerOverrideFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_StemmerOverrideFilterFactory, inform, METH_O),
            DECLARE_METHOD(t_StemmerOverrideFilterFactory, isIgnoreCase, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StemmerOverrideFilterFactory, t_StemmerOverrideFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, StemmerOverrideFilterFactory, t_StemmerOverrideFilterFactory_init_, 0, 0, t_StemmerOverrideFilterFactory__fields_, 0, 0);

          void t_StemmerOverrideFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(StemmerOverrideFilterFactory), module, "StemmerOverrideFilterFactory", 0);
          }

          void t_StemmerOverrideFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilterFactory).tp_dict, "class_", make_descriptor(StemmerOverrideFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_StemmerOverrideFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StemmerOverrideFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StemmerOverrideFilterFactory::initializeClass, 1)))
              return NULL;
            return t_StemmerOverrideFilterFactory::wrap_Object(StemmerOverrideFilterFactory(((t_StemmerOverrideFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_StemmerOverrideFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StemmerOverrideFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StemmerOverrideFilterFactory_init_(t_StemmerOverrideFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            StemmerOverrideFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = StemmerOverrideFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StemmerOverrideFilterFactory_create(t_StemmerOverrideFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(StemmerOverrideFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_StemmerOverrideFilterFactory_inform(t_StemmerOverrideFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_StemmerOverrideFilterFactory_isIgnoreCase(t_StemmerOverrideFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isIgnoreCase());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_StemmerOverrideFilterFactory_get__ignoreCase(t_StemmerOverrideFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isIgnoreCase());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cz/CzechAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {

          ::java::lang::Class *CzechAnalyzer::class$ = NULL;
          jmethodID *CzechAnalyzer::mids$ = NULL;
          bool CzechAnalyzer::live$ = false;
          ::java::lang::String *CzechAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass CzechAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cz/CzechAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_3ea629c6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CzechAnalyzer::CzechAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          CzechAnalyzer::CzechAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          CzechAnalyzer::CzechAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          CzechAnalyzer::CzechAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_3ea629c6, a0.this$, a1.this$)) {}

          CzechAnalyzer::CzechAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          CzechAnalyzer::CzechAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet CzechAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {
          static PyObject *t_CzechAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CzechAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CzechAnalyzer_init_(t_CzechAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CzechAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_CzechAnalyzer_get__defaultStopSet(t_CzechAnalyzer *self, void *data);
          static PyGetSetDef t_CzechAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_CzechAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CzechAnalyzer__methods_[] = {
            DECLARE_METHOD(t_CzechAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CzechAnalyzer, t_CzechAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, CzechAnalyzer, t_CzechAnalyzer_init_, 0, 0, t_CzechAnalyzer__fields_, 0, 0);

          void t_CzechAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(CzechAnalyzer), module, "CzechAnalyzer", 0);
          }

          void t_CzechAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CzechAnalyzer).tp_dict, "class_", make_descriptor(CzechAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CzechAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_CzechAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CzechAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CzechAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(CzechAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*CzechAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_CzechAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CzechAnalyzer::initializeClass, 1)))
              return NULL;
            return t_CzechAnalyzer::wrap_Object(CzechAnalyzer(((t_CzechAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_CzechAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CzechAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CzechAnalyzer_init_(t_CzechAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                CzechAnalyzer object((jobject) NULL);

                INT_CALL(object = CzechAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                CzechAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = CzechAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                CzechAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = CzechAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                CzechAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = CzechAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                CzechAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = CzechAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                CzechAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = CzechAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CzechAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::cz::CzechAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_CzechAnalyzer_get__defaultStopSet(t_CzechAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/OpaqueQueryNode.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *OpaqueQueryNode::class$ = NULL;
              jmethodID *OpaqueQueryNode::mids$ = NULL;
              bool OpaqueQueryNode::live$ = false;

              jclass OpaqueQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/OpaqueQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_db1d05ae] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getSchema_e0adba2f] = env->getMethodID(cls, "getSchema", "()Ljava/lang/CharSequence;");
                  mids$[mid_getValue_e0adba2f] = env->getMethodID(cls, "getValue", "()Ljava/lang/CharSequence;");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              OpaqueQueryNode::OpaqueQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_db1d05ae, a0.this$, a1.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode OpaqueQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::java::lang::CharSequence OpaqueQueryNode::getSchema() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getSchema_e0adba2f]));
              }

              ::java::lang::CharSequence OpaqueQueryNode::getValue() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getValue_e0adba2f]));
              }

              ::java::lang::CharSequence OpaqueQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String OpaqueQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_OpaqueQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_OpaqueQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_OpaqueQueryNode_init_(t_OpaqueQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_OpaqueQueryNode_cloneTree(t_OpaqueQueryNode *self, PyObject *args);
              static PyObject *t_OpaqueQueryNode_getSchema(t_OpaqueQueryNode *self);
              static PyObject *t_OpaqueQueryNode_getValue(t_OpaqueQueryNode *self);
              static PyObject *t_OpaqueQueryNode_toQueryString(t_OpaqueQueryNode *self, PyObject *args);
              static PyObject *t_OpaqueQueryNode_toString(t_OpaqueQueryNode *self, PyObject *args);
              static PyObject *t_OpaqueQueryNode_get__schema(t_OpaqueQueryNode *self, void *data);
              static PyObject *t_OpaqueQueryNode_get__value(t_OpaqueQueryNode *self, void *data);
              static PyGetSetDef t_OpaqueQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_OpaqueQueryNode, schema),
                DECLARE_GET_FIELD(t_OpaqueQueryNode, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_OpaqueQueryNode__methods_[] = {
                DECLARE_METHOD(t_OpaqueQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_OpaqueQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_OpaqueQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_OpaqueQueryNode, getSchema, METH_NOARGS),
                DECLARE_METHOD(t_OpaqueQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_OpaqueQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_OpaqueQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(OpaqueQueryNode, t_OpaqueQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, OpaqueQueryNode, t_OpaqueQueryNode_init_, 0, 0, t_OpaqueQueryNode__fields_, 0, 0);

              void t_OpaqueQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(OpaqueQueryNode), module, "OpaqueQueryNode", 0);
              }

              void t_OpaqueQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(OpaqueQueryNode).tp_dict, "class_", make_descriptor(OpaqueQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(OpaqueQueryNode).tp_dict, "wrapfn_", make_descriptor(t_OpaqueQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(OpaqueQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_OpaqueQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, OpaqueQueryNode::initializeClass, 1)))
                  return NULL;
                return t_OpaqueQueryNode::wrap_Object(OpaqueQueryNode(((t_OpaqueQueryNode *) arg)->object.this$));
              }
              static PyObject *t_OpaqueQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, OpaqueQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_OpaqueQueryNode_init_(t_OpaqueQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                OpaqueQueryNode object((jobject) NULL);

                if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                {
                  INT_CALL(object = OpaqueQueryNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_OpaqueQueryNode_cloneTree(t_OpaqueQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(OpaqueQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_OpaqueQueryNode_getSchema(t_OpaqueQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getSchema());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_OpaqueQueryNode_getValue(t_OpaqueQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getValue());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_OpaqueQueryNode_toQueryString(t_OpaqueQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(OpaqueQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_OpaqueQueryNode_toString(t_OpaqueQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(OpaqueQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_OpaqueQueryNode_get__schema(t_OpaqueQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getSchema());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }

              static PyObject *t_OpaqueQueryNode_get__value(t_OpaqueQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getValue());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/KeywordTokenizerFactory.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/analysis/core/KeywordTokenizer.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *KeywordTokenizerFactory::class$ = NULL;
          jmethodID *KeywordTokenizerFactory::mids$ = NULL;
          bool KeywordTokenizerFactory::live$ = false;

          jclass KeywordTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/KeywordTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_4e6458a0] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/core/KeywordTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordTokenizerFactory::KeywordTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::core::KeywordTokenizer KeywordTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::core::KeywordTokenizer(env->callObjectMethod(this$, mids$[mid_create_4e6458a0], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_KeywordTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordTokenizerFactory_init_(t_KeywordTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeywordTokenizerFactory_create(t_KeywordTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_KeywordTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_KeywordTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordTokenizerFactory, t_KeywordTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, KeywordTokenizerFactory, t_KeywordTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_KeywordTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordTokenizerFactory), module, "KeywordTokenizerFactory", 0);
          }

          void t_KeywordTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordTokenizerFactory).tp_dict, "class_", make_descriptor(KeywordTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_KeywordTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeywordTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_KeywordTokenizerFactory::wrap_Object(KeywordTokenizerFactory(((t_KeywordTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_KeywordTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordTokenizerFactory_init_(t_KeywordTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            KeywordTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = KeywordTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeywordTokenizerFactory_create(t_KeywordTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::core::KeywordTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::core::t_KeywordTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(KeywordTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *WordBreakSpellChecker$BreakSuggestionSortMethod::class$ = NULL;
          jmethodID *WordBreakSpellChecker$BreakSuggestionSortMethod::mids$ = NULL;
          bool WordBreakSpellChecker$BreakSuggestionSortMethod::live$ = false;
          WordBreakSpellChecker$BreakSuggestionSortMethod *WordBreakSpellChecker$BreakSuggestionSortMethod::NUM_CHANGES_THEN_MAX_FREQUENCY = NULL;
          WordBreakSpellChecker$BreakSuggestionSortMethod *WordBreakSpellChecker$BreakSuggestionSortMethod::NUM_CHANGES_THEN_SUMMED_FREQUENCY = NULL;

          jclass WordBreakSpellChecker$BreakSuggestionSortMethod::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_771dff8d] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod;");
              mids$[mid_values_39c0a317] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              NUM_CHANGES_THEN_MAX_FREQUENCY = new WordBreakSpellChecker$BreakSuggestionSortMethod(env->getStaticObjectField(cls, "NUM_CHANGES_THEN_MAX_FREQUENCY", "Lorg/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod;"));
              NUM_CHANGES_THEN_SUMMED_FREQUENCY = new WordBreakSpellChecker$BreakSuggestionSortMethod(env->getStaticObjectField(cls, "NUM_CHANGES_THEN_SUMMED_FREQUENCY", "Lorg/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WordBreakSpellChecker$BreakSuggestionSortMethod WordBreakSpellChecker$BreakSuggestionSortMethod::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return WordBreakSpellChecker$BreakSuggestionSortMethod(env->callStaticObjectMethod(cls, mids$[mid_valueOf_771dff8d], a0.this$));
          }

          JArray< WordBreakSpellChecker$BreakSuggestionSortMethod > WordBreakSpellChecker$BreakSuggestionSortMethod::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< WordBreakSpellChecker$BreakSuggestionSortMethod >(env->callStaticObjectMethod(cls, mids$[mid_values_39c0a317]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_of_(t_WordBreakSpellChecker$BreakSuggestionSortMethod *self, PyObject *args);
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_values(PyTypeObject *type);
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_get__parameters_(t_WordBreakSpellChecker$BreakSuggestionSortMethod *self, void *data);
          static PyGetSetDef t_WordBreakSpellChecker$BreakSuggestionSortMethod__fields_[] = {
            DECLARE_GET_FIELD(t_WordBreakSpellChecker$BreakSuggestionSortMethod, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_WordBreakSpellChecker$BreakSuggestionSortMethod__methods_[] = {
            DECLARE_METHOD(t_WordBreakSpellChecker$BreakSuggestionSortMethod, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordBreakSpellChecker$BreakSuggestionSortMethod, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordBreakSpellChecker$BreakSuggestionSortMethod, of_, METH_VARARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker$BreakSuggestionSortMethod, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_WordBreakSpellChecker$BreakSuggestionSortMethod, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod, t_WordBreakSpellChecker$BreakSuggestionSortMethod, ::java::lang::Enum, WordBreakSpellChecker$BreakSuggestionSortMethod, abstract_init, 0, 0, t_WordBreakSpellChecker$BreakSuggestionSortMethod__fields_, 0, 0);
          PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_Object(const WordBreakSpellChecker$BreakSuggestionSortMethod& object, PyTypeObject *p0)
          {
            PyObject *obj = t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_WordBreakSpellChecker$BreakSuggestionSortMethod *self = (t_WordBreakSpellChecker$BreakSuggestionSortMethod *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_WordBreakSpellChecker$BreakSuggestionSortMethod *self = (t_WordBreakSpellChecker$BreakSuggestionSortMethod *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_WordBreakSpellChecker$BreakSuggestionSortMethod::install(PyObject *module)
          {
            installType(&PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod), module, "WordBreakSpellChecker$BreakSuggestionSortMethod", 0);
          }

          void t_WordBreakSpellChecker$BreakSuggestionSortMethod::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod).tp_dict, "class_", make_descriptor(WordBreakSpellChecker$BreakSuggestionSortMethod::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod).tp_dict, "wrapfn_", make_descriptor(t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(WordBreakSpellChecker$BreakSuggestionSortMethod::initializeClass);
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod).tp_dict, "NUM_CHANGES_THEN_MAX_FREQUENCY", make_descriptor(t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_Object(*WordBreakSpellChecker$BreakSuggestionSortMethod::NUM_CHANGES_THEN_MAX_FREQUENCY)));
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod).tp_dict, "NUM_CHANGES_THEN_SUMMED_FREQUENCY", make_descriptor(t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_Object(*WordBreakSpellChecker$BreakSuggestionSortMethod::NUM_CHANGES_THEN_SUMMED_FREQUENCY)));
          }

          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordBreakSpellChecker$BreakSuggestionSortMethod::initializeClass, 1)))
              return NULL;
            return t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_Object(WordBreakSpellChecker$BreakSuggestionSortMethod(((t_WordBreakSpellChecker$BreakSuggestionSortMethod *) arg)->object.this$));
          }
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordBreakSpellChecker$BreakSuggestionSortMethod::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_of_(t_WordBreakSpellChecker$BreakSuggestionSortMethod *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            WordBreakSpellChecker$BreakSuggestionSortMethod result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::spell::WordBreakSpellChecker$BreakSuggestionSortMethod::valueOf(a0));
              return t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_values(PyTypeObject *type)
          {
            JArray< WordBreakSpellChecker$BreakSuggestionSortMethod > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::search::spell::WordBreakSpellChecker$BreakSuggestionSortMethod::values());
            return JArray<jobject>(result.this$).wrap(t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_jobject);
          }
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_get__parameters_(t_WordBreakSpellChecker$BreakSuggestionSortMethod *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/UnicodeUtil.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *UnicodeUtil::class$ = NULL;
        jmethodID *UnicodeUtil::mids$ = NULL;
        bool UnicodeUtil::live$ = false;
        ::org::apache::lucene::util::BytesRef *UnicodeUtil::BIG_TERM = NULL;
        jint UnicodeUtil::MAX_UTF8_BYTES_PER_CHAR = (jint) 0;
        jint UnicodeUtil::UNI_REPLACEMENT_CHAR = (jint) 0;
        jint UnicodeUtil::UNI_SUR_HIGH_END = (jint) 0;
        jint UnicodeUtil::UNI_SUR_HIGH_START = (jint) 0;
        jint UnicodeUtil::UNI_SUR_LOW_END = (jint) 0;
        jint UnicodeUtil::UNI_SUR_LOW_START = (jint) 0;

        jclass UnicodeUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/UnicodeUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_UTF16toUTF8_51e3d628] = env->getStaticMethodID(cls, "UTF16toUTF8", "(Ljava/lang/CharSequence;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_UTF16toUTF8_da269d78] = env->getStaticMethodID(cls, "UTF16toUTF8", "(Ljava/lang/CharSequence;II[B)I");
            mids$[mid_UTF16toUTF8_bdf4c01c] = env->getStaticMethodID(cls, "UTF16toUTF8", "([CII[B)I");
            mids$[mid_UTF8toUTF16_5b2f2c58] = env->getStaticMethodID(cls, "UTF8toUTF16", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/CharsRef;)V");
            mids$[mid_UTF8toUTF16_e5122d2f] = env->getStaticMethodID(cls, "UTF8toUTF16", "(Lorg/apache/lucene/util/BytesRef;[C)I");
            mids$[mid_UTF8toUTF16_1d0ef3c8] = env->getStaticMethodID(cls, "UTF8toUTF16", "([BII[C)I");
            mids$[mid_UTF8toUTF32_e315de19] = env->getStaticMethodID(cls, "UTF8toUTF32", "(Lorg/apache/lucene/util/BytesRef;[I)I");
            mids$[mid_codePointCount_7bc03ddb] = env->getStaticMethodID(cls, "codePointCount", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_newString_3ade3c03] = env->getStaticMethodID(cls, "newString", "([III)Ljava/lang/String;");
            mids$[mid_toHexString_97a5258f] = env->getStaticMethodID(cls, "toHexString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_validUTF16String_a8afc646] = env->getStaticMethodID(cls, "validUTF16String", "(Ljava/lang/CharSequence;)Z");
            mids$[mid_validUTF16String_ec6430f8] = env->getStaticMethodID(cls, "validUTF16String", "([CI)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            BIG_TERM = new ::org::apache::lucene::util::BytesRef(env->getStaticObjectField(cls, "BIG_TERM", "Lorg/apache/lucene/util/BytesRef;"));
            MAX_UTF8_BYTES_PER_CHAR = env->getStaticIntField(cls, "MAX_UTF8_BYTES_PER_CHAR");
            UNI_REPLACEMENT_CHAR = env->getStaticIntField(cls, "UNI_REPLACEMENT_CHAR");
            UNI_SUR_HIGH_END = env->getStaticIntField(cls, "UNI_SUR_HIGH_END");
            UNI_SUR_HIGH_START = env->getStaticIntField(cls, "UNI_SUR_HIGH_START");
            UNI_SUR_LOW_END = env->getStaticIntField(cls, "UNI_SUR_LOW_END");
            UNI_SUR_LOW_START = env->getStaticIntField(cls, "UNI_SUR_LOW_START");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void UnicodeUtil::UTF16toUTF8(const ::java::lang::CharSequence & a0, const ::org::apache::lucene::util::BytesRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_UTF16toUTF8_51e3d628], a0.this$, a1.this$);
        }

        jint UnicodeUtil::UTF16toUTF8(const ::java::lang::CharSequence & a0, jint a1, jint a2, const JArray< jbyte > & a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_UTF16toUTF8_da269d78], a0.this$, a1, a2, a3.this$);
        }

        jint UnicodeUtil::UTF16toUTF8(const JArray< jchar > & a0, jint a1, jint a2, const JArray< jbyte > & a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_UTF16toUTF8_bdf4c01c], a0.this$, a1, a2, a3.this$);
        }

        void UnicodeUtil::UTF8toUTF16(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::CharsRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_UTF8toUTF16_5b2f2c58], a0.this$, a1.this$);
        }

        jint UnicodeUtil::UTF8toUTF16(const ::org::apache::lucene::util::BytesRef & a0, const JArray< jchar > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_UTF8toUTF16_e5122d2f], a0.this$, a1.this$);
        }

        jint UnicodeUtil::UTF8toUTF16(const JArray< jbyte > & a0, jint a1, jint a2, const JArray< jchar > & a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_UTF8toUTF16_1d0ef3c8], a0.this$, a1, a2, a3.this$);
        }

        jint UnicodeUtil::UTF8toUTF32(const ::org::apache::lucene::util::BytesRef & a0, const JArray< jint > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_UTF8toUTF32_e315de19], a0.this$, a1.this$);
        }

        jint UnicodeUtil::codePointCount(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_codePointCount_7bc03ddb], a0.this$);
        }

        ::java::lang::String UnicodeUtil::newString(const JArray< jint > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_newString_3ade3c03], a0.this$, a1, a2));
        }

        ::java::lang::String UnicodeUtil::toHexString(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toHexString_97a5258f], a0.this$));
        }

        jboolean UnicodeUtil::validUTF16String(const ::java::lang::CharSequence & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_validUTF16String_a8afc646], a0.this$);
        }

        jboolean UnicodeUtil::validUTF16String(const JArray< jchar > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_validUTF16String_ec6430f8], a0.this$, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_UnicodeUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_UnicodeUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_UnicodeUtil_UTF16toUTF8(PyTypeObject *type, PyObject *args);
        static PyObject *t_UnicodeUtil_UTF8toUTF16(PyTypeObject *type, PyObject *args);
        static PyObject *t_UnicodeUtil_UTF8toUTF32(PyTypeObject *type, PyObject *args);
        static PyObject *t_UnicodeUtil_codePointCount(PyTypeObject *type, PyObject *arg);
        static PyObject *t_UnicodeUtil_newString(PyTypeObject *type, PyObject *args);
        static PyObject *t_UnicodeUtil_toHexString(PyTypeObject *type, PyObject *arg);
        static PyObject *t_UnicodeUtil_validUTF16String(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_UnicodeUtil__methods_[] = {
          DECLARE_METHOD(t_UnicodeUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, UTF16toUTF8, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, UTF8toUTF16, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, UTF8toUTF32, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, codePointCount, METH_O | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, newString, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, toHexString, METH_O | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, validUTF16String, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(UnicodeUtil, t_UnicodeUtil, ::java::lang::Object, UnicodeUtil, abstract_init, 0, 0, 0, 0, 0);

        void t_UnicodeUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(UnicodeUtil), module, "UnicodeUtil", 0);
        }

        void t_UnicodeUtil::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "class_", make_descriptor(UnicodeUtil::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "wrapfn_", make_descriptor(t_UnicodeUtil::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(UnicodeUtil::initializeClass);
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "BIG_TERM", make_descriptor(::org::apache::lucene::util::t_BytesRef::wrap_Object(*UnicodeUtil::BIG_TERM)));
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "MAX_UTF8_BYTES_PER_CHAR", make_descriptor(UnicodeUtil::MAX_UTF8_BYTES_PER_CHAR));
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "UNI_REPLACEMENT_CHAR", make_descriptor(UnicodeUtil::UNI_REPLACEMENT_CHAR));
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "UNI_SUR_HIGH_END", make_descriptor(UnicodeUtil::UNI_SUR_HIGH_END));
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "UNI_SUR_HIGH_START", make_descriptor(UnicodeUtil::UNI_SUR_HIGH_START));
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "UNI_SUR_LOW_END", make_descriptor(UnicodeUtil::UNI_SUR_LOW_END));
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "UNI_SUR_LOW_START", make_descriptor(UnicodeUtil::UNI_SUR_LOW_START));
        }

        static PyObject *t_UnicodeUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, UnicodeUtil::initializeClass, 1)))
            return NULL;
          return t_UnicodeUtil::wrap_Object(UnicodeUtil(((t_UnicodeUtil *) arg)->object.this$));
        }
        static PyObject *t_UnicodeUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, UnicodeUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_UnicodeUtil_UTF16toUTF8(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);

              if (!parseArgs(args, "Ok", &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(::org::apache::lucene::util::UnicodeUtil::UTF16toUTF8(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 4:
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< jbyte > a3((jobject) NULL);
              jint result;

              if (!parseArgs(args, "OII[B", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::UTF16toUTF8(a0, a1, a2, a3));
                return PyInt_FromLong((long) result);
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< jbyte > a3((jobject) NULL);
              jint result;

              if (!parseArgs(args, "[CII[B", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::UTF16toUTF8(a0, a1, a2, a3));
                return PyInt_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError(type, "UTF16toUTF8", args);
          return NULL;
        }

        static PyObject *t_UnicodeUtil_UTF8toUTF16(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::util::CharsRef a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::CharsRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(::org::apache::lucene::util::UnicodeUtil::UTF8toUTF16(a0, a1));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              JArray< jchar > a1((jobject) NULL);
              jint result;

              if (!parseArgs(args, "k[C", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::UTF8toUTF16(a0, a1));
                return PyInt_FromLong((long) result);
              }
            }
            break;
           case 4:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< jchar > a3((jobject) NULL);
              jint result;

              if (!parseArgs(args, "[BII[C", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::UTF8toUTF16(a0, a1, a2, a3));
                return PyInt_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError(type, "UTF8toUTF16", args);
          return NULL;
        }

        static PyObject *t_UnicodeUtil_UTF8toUTF32(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          JArray< jint > a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "k[I", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::UTF8toUTF32(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "UTF8toUTF32", args);
          return NULL;
        }

        static PyObject *t_UnicodeUtil_codePointCount(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::codePointCount(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "codePointCount", arg);
          return NULL;
        }

        static PyObject *t_UnicodeUtil_newString(PyTypeObject *type, PyObject *args)
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[III", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::newString(a0, a1, a2));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "newString", args);
          return NULL;
        }

        static PyObject *t_UnicodeUtil_toHexString(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::toHexString(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "toHexString", arg);
          return NULL;
        }

        static PyObject *t_UnicodeUtil_validUTF16String(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::validUTF16String(a0));
                Py_RETURN_BOOL(result);
              }
            }
            break;
           case 2:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jboolean result;

              if (!parseArgs(args, "[CI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::validUTF16String(a0, a1));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError(type, "validUTF16String", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseLightStemFilter::class$ = NULL;
          jmethodID *PortugueseLightStemFilter::mids$ = NULL;
          bool PortugueseLightStemFilter::live$ = false;

          jclass PortugueseLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseLightStemFilter::PortugueseLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean PortugueseLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseLightStemFilter_init_(t_PortugueseLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseLightStemFilter_incrementToken(t_PortugueseLightStemFilter *self, PyObject *args);

          static PyMethodDef t_PortugueseLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_PortugueseLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseLightStemFilter, t_PortugueseLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, PortugueseLightStemFilter, t_PortugueseLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_PortugueseLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseLightStemFilter), module, "PortugueseLightStemFilter", 0);
          }

          void t_PortugueseLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemFilter).tp_dict, "class_", make_descriptor(PortugueseLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_PortugueseLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_PortugueseLightStemFilter::wrap_Object(PortugueseLightStemFilter(((t_PortugueseLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_PortugueseLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseLightStemFilter_init_(t_PortugueseLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            PortugueseLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = PortugueseLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseLightStemFilter_incrementToken(t_PortugueseLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PortugueseLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$primary_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$primary_return::class$ = NULL;
          jmethodID *JavascriptParser$primary_return::mids$ = NULL;
          bool JavascriptParser$primary_return::live$ = false;

          jclass JavascriptParser$primary_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$primary_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$primary_return::JavascriptParser$primary_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$primary_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$primary_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$primary_return_init_(t_JavascriptParser$primary_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$primary_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$primary_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$primary_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$primary_return, t_JavascriptParser$primary_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$primary_return, t_JavascriptParser$primary_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$primary_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$primary_return), module, "JavascriptParser$primary_return", 0);
          }

          void t_JavascriptParser$primary_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$primary_return).tp_dict, "class_", make_descriptor(JavascriptParser$primary_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$primary_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$primary_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$primary_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$primary_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$primary_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$primary_return::wrap_Object(JavascriptParser$primary_return(((t_JavascriptParser$primary_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$primary_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$primary_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$primary_return_init_(t_JavascriptParser$primary_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$primary_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$primary_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *TokenMgrError::class$ = NULL;
              jmethodID *TokenMgrError::mids$ = NULL;
              bool TokenMgrError::live$ = false;

              jclass TokenMgrError::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
                  mids$[mid_init$_8aaeec67] = env->getMethodID(cls, "<init>", "(ZIIILjava/lang/String;CI)V");
                  mids$[mid_getMessage_14c7b5c5] = env->getMethodID(cls, "getMessage", "()Ljava/lang/String;");
                  mids$[mid_addEscapes_97a5258f] = env->getStaticMethodID(cls, "addEscapes", "(Ljava/lang/String;)Ljava/lang/String;");
                  mids$[mid_LexicalError_e888c5f6] = env->getStaticMethodID(cls, "LexicalError", "(ZIIILjava/lang/String;C)Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              TokenMgrError::TokenMgrError() : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              TokenMgrError::TokenMgrError(const ::java::lang::String & a0, jint a1) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

              TokenMgrError::TokenMgrError(jboolean a0, jint a1, jint a2, jint a3, const ::java::lang::String & a4, jchar a5, jint a6) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_8aaeec67, a0, a1, a2, a3, a4.this$, a5, a6)) {}

              ::java::lang::String TokenMgrError::getMessage() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMessage_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_TokenMgrError_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TokenMgrError_instance_(PyTypeObject *type, PyObject *arg);
              static int t_TokenMgrError_init_(t_TokenMgrError *self, PyObject *args, PyObject *kwds);
              static PyObject *t_TokenMgrError_getMessage(t_TokenMgrError *self, PyObject *args);
              static PyObject *t_TokenMgrError_get__message(t_TokenMgrError *self, void *data);
              static PyGetSetDef t_TokenMgrError__fields_[] = {
                DECLARE_GET_FIELD(t_TokenMgrError, message),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_TokenMgrError__methods_[] = {
                DECLARE_METHOD(t_TokenMgrError, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TokenMgrError, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TokenMgrError, getMessage, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(TokenMgrError, t_TokenMgrError, ::java::lang::Error, TokenMgrError, t_TokenMgrError_init_, 0, 0, t_TokenMgrError__fields_, 0, 0);

              void t_TokenMgrError::install(PyObject *module)
              {
                installType(&PY_TYPE(TokenMgrError), module, "TokenMgrError", 0);
              }

              void t_TokenMgrError::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "class_", make_descriptor(TokenMgrError::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "wrapfn_", make_descriptor(t_TokenMgrError::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_TokenMgrError_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, TokenMgrError::initializeClass, 1)))
                  return NULL;
                return t_TokenMgrError::wrap_Object(TokenMgrError(((t_TokenMgrError *) arg)->object.this$));
              }
              static PyObject *t_TokenMgrError_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, TokenMgrError::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_TokenMgrError_init_(t_TokenMgrError *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    TokenMgrError object((jobject) NULL);

                    INT_CALL(object = TokenMgrError());
                    self->object = object;
                    break;
                  }
                  goto err;
                 case 2:
                  {
                    ::java::lang::String a0((jobject) NULL);
                    jint a1;
                    TokenMgrError object((jobject) NULL);

                    if (!parseArgs(args, "sI", &a0, &a1))
                    {
                      INT_CALL(object = TokenMgrError(a0, a1));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 7:
                  {
                    jboolean a0;
                    jint a1;
                    jint a2;
                    jint a3;
                    ::java::lang::String a4((jobject) NULL);
                    jchar a5;
                    jint a6;
                    TokenMgrError object((jobject) NULL);

                    if (!parseArgs(args, "ZIIIsCI", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                    {
                      INT_CALL(object = TokenMgrError(a0, a1, a2, a3, a4, a5, a6));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_TokenMgrError_getMessage(t_TokenMgrError *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.getMessage());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(TokenMgrError), (PyObject *) self, "getMessage", args, 2);
              }

              static PyObject *t_TokenMgrError_get__message(t_TokenMgrError *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getMessage());
                return j2p(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/OffsetLimitTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *OffsetLimitTokenFilter::class$ = NULL;
          jmethodID *OffsetLimitTokenFilter::mids$ = NULL;
          bool OffsetLimitTokenFilter::live$ = false;

          jclass OffsetLimitTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/OffsetLimitTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OffsetLimitTokenFilter::OffsetLimitTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          jboolean OffsetLimitTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void OffsetLimitTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_OffsetLimitTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OffsetLimitTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OffsetLimitTokenFilter_init_(t_OffsetLimitTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OffsetLimitTokenFilter_incrementToken(t_OffsetLimitTokenFilter *self, PyObject *args);
          static PyObject *t_OffsetLimitTokenFilter_reset(t_OffsetLimitTokenFilter *self, PyObject *args);

          static PyMethodDef t_OffsetLimitTokenFilter__methods_[] = {
            DECLARE_METHOD(t_OffsetLimitTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetLimitTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetLimitTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_OffsetLimitTokenFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(OffsetLimitTokenFilter, t_OffsetLimitTokenFilter, ::org::apache::lucene::analysis::TokenFilter, OffsetLimitTokenFilter, t_OffsetLimitTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_OffsetLimitTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(OffsetLimitTokenFilter), module, "OffsetLimitTokenFilter", 0);
          }

          void t_OffsetLimitTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(OffsetLimitTokenFilter).tp_dict, "class_", make_descriptor(OffsetLimitTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(OffsetLimitTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_OffsetLimitTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(OffsetLimitTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OffsetLimitTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OffsetLimitTokenFilter::initializeClass, 1)))
              return NULL;
            return t_OffsetLimitTokenFilter::wrap_Object(OffsetLimitTokenFilter(((t_OffsetLimitTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_OffsetLimitTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OffsetLimitTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OffsetLimitTokenFilter_init_(t_OffsetLimitTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            jint a1;
            OffsetLimitTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              INT_CALL(object = OffsetLimitTokenFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_OffsetLimitTokenFilter_incrementToken(t_OffsetLimitTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(OffsetLimitTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_OffsetLimitTokenFilter_reset(t_OffsetLimitTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(OffsetLimitTokenFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/Automata.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *Automata::class$ = NULL;
          jmethodID *Automata::mids$ = NULL;
          bool Automata::live$ = false;

          jclass Automata::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/Automata");

              mids$ = new jmethodID[max_mid];
              mids$[mid_appendAnyChar_7813f815] = env->getStaticMethodID(cls, "appendAnyChar", "(Lorg/apache/lucene/util/automaton/Automaton;I)I");
              mids$[mid_appendChar_c32b0597] = env->getStaticMethodID(cls, "appendChar", "(Lorg/apache/lucene/util/automaton/Automaton;II)I");
              mids$[mid_makeAnyChar_9b0d5999] = env->getStaticMethodID(cls, "makeAnyChar", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeAnyString_9b0d5999] = env->getStaticMethodID(cls, "makeAnyString", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeChar_d5b8a843] = env->getStaticMethodID(cls, "makeChar", "(I)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeCharRange_42dcb2dd] = env->getStaticMethodID(cls, "makeCharRange", "(II)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeEmpty_9b0d5999] = env->getStaticMethodID(cls, "makeEmpty", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeEmptyString_9b0d5999] = env->getStaticMethodID(cls, "makeEmptyString", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeInterval_86ba9f2f] = env->getStaticMethodID(cls, "makeInterval", "(III)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeString_af13056f] = env->getStaticMethodID(cls, "makeString", "(Ljava/lang/String;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeString_1c95d487] = env->getStaticMethodID(cls, "makeString", "([III)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeStringUnion_40d33194] = env->getStaticMethodID(cls, "makeStringUnion", "(Ljava/util/Collection;)Lorg/apache/lucene/util/automaton/Automaton;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint Automata::appendAnyChar(const ::org::apache::lucene::util::automaton::Automaton & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_appendAnyChar_7813f815], a0.this$, a1);
          }

          jint Automata::appendChar(const ::org::apache::lucene::util::automaton::Automaton & a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_appendChar_c32b0597], a0.this$, a1, a2);
          }

          ::org::apache::lucene::util::automaton::Automaton Automata::makeAnyChar()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeAnyChar_9b0d5999]));
          }

          ::org::apache::lucene::util::automaton::Automaton Automata::makeAnyString()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeAnyString_9b0d5999]));
          }

          ::org::apache::lucene::util::automaton::Automaton Automata::makeChar(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeChar_d5b8a843], a0));
          }

          ::org::apache::lucene::util::automaton::Automaton Automata::makeCharRange(jint a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeCharRange_42dcb2dd], a0, a1));
          }

          ::org::apache::lucene::util::automaton::Automaton Automata::makeEmpty()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeEmpty_9b0d5999]));
          }

          ::org::apache::lucene::util::automaton::Automaton Automata::makeEmptyString()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeEmptyString_9b0d5999]));
          }

          ::org::apache::lucene::util::automaton::Automaton Automata::makeInterval(jint a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeInterval_86ba9f2f], a0, a1, a2));
          }

          ::org::apache::lucene::util::automaton::Automaton Automata::makeString(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeString_af13056f], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton Automata::makeString(const JArray< jint > & a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeString_1c95d487], a0.this$, a1, a2));
          }

          ::org::apache::lucene::util::automaton::Automaton Automata::makeStringUnion(const ::java::util::Collection & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeStringUnion_40d33194], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_Automata_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Automata_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Automata_appendAnyChar(PyTypeObject *type, PyObject *args);
          static PyObject *t_Automata_appendChar(PyTypeObject *type, PyObject *args);
          static PyObject *t_Automata_makeAnyChar(PyTypeObject *type);
          static PyObject *t_Automata_makeAnyString(PyTypeObject *type);
          static PyObject *t_Automata_makeChar(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Automata_makeCharRange(PyTypeObject *type, PyObject *args);
          static PyObject *t_Automata_makeEmpty(PyTypeObject *type);
          static PyObject *t_Automata_makeEmptyString(PyTypeObject *type);
          static PyObject *t_Automata_makeInterval(PyTypeObject *type, PyObject *args);
          static PyObject *t_Automata_makeString(PyTypeObject *type, PyObject *args);
          static PyObject *t_Automata_makeStringUnion(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_Automata__methods_[] = {
            DECLARE_METHOD(t_Automata, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automata, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automata, appendAnyChar, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Automata, appendChar, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Automata, makeAnyChar, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_Automata, makeAnyString, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_Automata, makeChar, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automata, makeCharRange, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Automata, makeEmpty, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_Automata, makeEmptyString, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_Automata, makeInterval, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Automata, makeString, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Automata, makeStringUnion, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Automata, t_Automata, ::java::lang::Object, Automata, abstract_init, 0, 0, 0, 0, 0);

          void t_Automata::install(PyObject *module)
          {
            installType(&PY_TYPE(Automata), module, "Automata", 0);
          }

          void t_Automata::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Automata).tp_dict, "class_", make_descriptor(Automata::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Automata).tp_dict, "wrapfn_", make_descriptor(t_Automata::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Automata).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Automata_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Automata::initializeClass, 1)))
              return NULL;
            return t_Automata::wrap_Object(Automata(((t_Automata *) arg)->object.this$));
          }
          static PyObject *t_Automata_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Automata::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Automata_appendAnyChar(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automata::appendAnyChar(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "appendAnyChar", args);
            return NULL;
          }

          static PyObject *t_Automata_appendChar(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jint a1;
            jint a2;
            jint result;

            if (!parseArgs(args, "kII", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automata::appendChar(a0, a1, a2));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "appendChar", args);
            return NULL;
          }

          static PyObject *t_Automata_makeAnyChar(PyTypeObject *type)
          {
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automata::makeAnyChar());
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          static PyObject *t_Automata_makeAnyString(PyTypeObject *type)
          {
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automata::makeAnyString());
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          static PyObject *t_Automata_makeChar(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automata::makeChar(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "makeChar", arg);
            return NULL;
          }

          static PyObject *t_Automata_makeCharRange(PyTypeObject *type, PyObject *args)
          {
            jint a0;
            jint a1;
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automata::makeCharRange(a0, a1));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "makeCharRange", args);
            return NULL;
          }

          static PyObject *t_Automata_makeEmpty(PyTypeObject *type)
          {
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automata::makeEmpty());
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          static PyObject *t_Automata_makeEmptyString(PyTypeObject *type)
          {
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automata::makeEmptyString());
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          static PyObject *t_Automata_makeInterval(PyTypeObject *type, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArgs(args, "III", &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automata::makeInterval(a0, a1, a2));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "makeInterval", args);
            return NULL;
          }

          static PyObject *t_Automata_makeString(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automata::makeString(a0));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                JArray< jint > a0((jobject) NULL);
                jint a1;
                jint a2;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "[III", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automata::makeString(a0, a1, a2));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "makeString", args);
            return NULL;
          }

          static PyObject *t_Automata_makeStringUnion(PyTypeObject *type, PyObject *arg)
          {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automata::makeStringUnion(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "makeStringUnion", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/ByteArrayDataInput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *ByteArrayDataInput::class$ = NULL;
        jmethodID *ByteArrayDataInput::mids$ = NULL;
        bool ByteArrayDataInput::live$ = false;

        jclass ByteArrayDataInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/ByteArrayDataInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_49b4f12b] = env->getMethodID(cls, "<init>", "([B)V");
            mids$[mid_init$_86f4435f] = env->getMethodID(cls, "<init>", "([BII)V");
            mids$[mid_eof_54c6a16a] = env->getMethodID(cls, "eof", "()Z");
            mids$[mid_getPosition_54c6a179] = env->getMethodID(cls, "getPosition", "()I");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
            mids$[mid_readByte_54c6a172] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readBytes_86f4435f] = env->getMethodID(cls, "readBytes", "([BII)V");
            mids$[mid_readInt_54c6a179] = env->getMethodID(cls, "readInt", "()I");
            mids$[mid_readLong_54c6a17a] = env->getMethodID(cls, "readLong", "()J");
            mids$[mid_readShort_54c6a163] = env->getMethodID(cls, "readShort", "()S");
            mids$[mid_readVInt_54c6a179] = env->getMethodID(cls, "readVInt", "()I");
            mids$[mid_readVLong_54c6a17a] = env->getMethodID(cls, "readVLong", "()J");
            mids$[mid_reset_49b4f12b] = env->getMethodID(cls, "reset", "([B)V");
            mids$[mid_reset_86f4435f] = env->getMethodID(cls, "reset", "([BII)V");
            mids$[mid_rewind_54c6a166] = env->getMethodID(cls, "rewind", "()V");
            mids$[mid_setPosition_39c7bd3c] = env->getMethodID(cls, "setPosition", "(I)V");
            mids$[mid_skipBytes_0ee6df2f] = env->getMethodID(cls, "skipBytes", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteArrayDataInput::ByteArrayDataInput() : ::org::apache::lucene::store::DataInput(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ByteArrayDataInput::ByteArrayDataInput(const JArray< jbyte > & a0) : ::org::apache::lucene::store::DataInput(env->newObject(initializeClass, &mids$, mid_init$_49b4f12b, a0.this$)) {}

        ByteArrayDataInput::ByteArrayDataInput(const JArray< jbyte > & a0, jint a1, jint a2) : ::org::apache::lucene::store::DataInput(env->newObject(initializeClass, &mids$, mid_init$_86f4435f, a0.this$, a1, a2)) {}

        jboolean ByteArrayDataInput::eof() const
        {
          return env->callBooleanMethod(this$, mids$[mid_eof_54c6a16a]);
        }

        jint ByteArrayDataInput::getPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_getPosition_54c6a179]);
        }

        jint ByteArrayDataInput::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }

        jbyte ByteArrayDataInput::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_54c6a172]);
        }

        void ByteArrayDataInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_86f4435f], a0.this$, a1, a2);
        }

        jint ByteArrayDataInput::readInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_54c6a179]);
        }

        jlong ByteArrayDataInput::readLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readLong_54c6a17a]);
        }

        jshort ByteArrayDataInput::readShort() const
        {
          return env->callShortMethod(this$, mids$[mid_readShort_54c6a163]);
        }

        jint ByteArrayDataInput::readVInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readVInt_54c6a179]);
        }

        jlong ByteArrayDataInput::readVLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readVLong_54c6a17a]);
        }

        void ByteArrayDataInput::reset(const JArray< jbyte > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_49b4f12b], a0.this$);
        }

        void ByteArrayDataInput::reset(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_86f4435f], a0.this$, a1, a2);
        }

        void ByteArrayDataInput::rewind() const
        {
          env->callVoidMethod(this$, mids$[mid_rewind_54c6a166]);
        }

        void ByteArrayDataInput::setPosition(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setPosition_39c7bd3c], a0);
        }

        void ByteArrayDataInput::skipBytes(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_skipBytes_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_ByteArrayDataInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteArrayDataInput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteArrayDataInput_init_(t_ByteArrayDataInput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteArrayDataInput_eof(t_ByteArrayDataInput *self);
        static PyObject *t_ByteArrayDataInput_getPosition(t_ByteArrayDataInput *self);
        static PyObject *t_ByteArrayDataInput_length(t_ByteArrayDataInput *self);
        static PyObject *t_ByteArrayDataInput_readByte(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_readBytes(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_readInt(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_readLong(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_readShort(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_readVInt(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_readVLong(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_reset(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_rewind(t_ByteArrayDataInput *self);
        static PyObject *t_ByteArrayDataInput_setPosition(t_ByteArrayDataInput *self, PyObject *arg);
        static PyObject *t_ByteArrayDataInput_skipBytes(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_get__position(t_ByteArrayDataInput *self, void *data);
        static int t_ByteArrayDataInput_set__position(t_ByteArrayDataInput *self, PyObject *arg, void *data);
        static PyGetSetDef t_ByteArrayDataInput__fields_[] = {
          DECLARE_GETSET_FIELD(t_ByteArrayDataInput, position),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ByteArrayDataInput__methods_[] = {
          DECLARE_METHOD(t_ByteArrayDataInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteArrayDataInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteArrayDataInput, eof, METH_NOARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, getPosition, METH_NOARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, length, METH_NOARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readByte, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readInt, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readLong, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readShort, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readVInt, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readVLong, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, reset, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, rewind, METH_NOARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, setPosition, METH_O),
          DECLARE_METHOD(t_ByteArrayDataInput, skipBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ByteArrayDataInput, t_ByteArrayDataInput, ::org::apache::lucene::store::DataInput, ByteArrayDataInput, t_ByteArrayDataInput_init_, 0, 0, t_ByteArrayDataInput__fields_, 0, 0);

        void t_ByteArrayDataInput::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteArrayDataInput), module, "ByteArrayDataInput", 0);
        }

        void t_ByteArrayDataInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ByteArrayDataInput).tp_dict, "class_", make_descriptor(ByteArrayDataInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ByteArrayDataInput).tp_dict, "wrapfn_", make_descriptor(t_ByteArrayDataInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ByteArrayDataInput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteArrayDataInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteArrayDataInput::initializeClass, 1)))
            return NULL;
          return t_ByteArrayDataInput::wrap_Object(ByteArrayDataInput(((t_ByteArrayDataInput *) arg)->object.this$));
        }
        static PyObject *t_ByteArrayDataInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteArrayDataInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteArrayDataInput_init_(t_ByteArrayDataInput *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ByteArrayDataInput object((jobject) NULL);

              INT_CALL(object = ByteArrayDataInput());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);
              ByteArrayDataInput object((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                INT_CALL(object = ByteArrayDataInput(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              ByteArrayDataInput object((jobject) NULL);

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                INT_CALL(object = ByteArrayDataInput(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteArrayDataInput_eof(t_ByteArrayDataInput *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.eof());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_ByteArrayDataInput_getPosition(t_ByteArrayDataInput *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPosition());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_ByteArrayDataInput_length(t_ByteArrayDataInput *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_ByteArrayDataInput_readByte(t_ByteArrayDataInput *self, PyObject *args)
        {
          jbyte result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readByte());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readByte", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_readBytes(t_ByteArrayDataInput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.readBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readBytes", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_readInt(t_ByteArrayDataInput *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readInt());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readInt", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_readLong(t_ByteArrayDataInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readLong());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readLong", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_readShort(t_ByteArrayDataInput *self, PyObject *args)
        {
          jshort result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readShort());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readShort", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_readVInt(t_ByteArrayDataInput *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readVInt());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readVInt", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_readVLong(t_ByteArrayDataInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readVLong());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readVLong", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_reset(t_ByteArrayDataInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(self->object.reset(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.reset(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "reset", args);
          return NULL;
        }

        static PyObject *t_ByteArrayDataInput_rewind(t_ByteArrayDataInput *self)
        {
          OBJ_CALL(self->object.rewind());
          Py_RETURN_NONE;
        }

        static PyObject *t_ByteArrayDataInput_setPosition(t_ByteArrayDataInput *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setPosition(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setPosition", arg);
          return NULL;
        }

        static PyObject *t_ByteArrayDataInput_skipBytes(t_ByteArrayDataInput *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.skipBytes(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ByteArrayDataInput), (PyObject *) self, "skipBytes", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_get__position(t_ByteArrayDataInput *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPosition());
          return PyInt_FromLong((long) value);
        }
        static int t_ByteArrayDataInput_set__position(t_ByteArrayDataInput *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setPosition(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "position", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/SortedNumericDocValuesField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *SortedNumericDocValuesField::class$ = NULL;
        jmethodID *SortedNumericDocValuesField::mids$ = NULL;
        bool SortedNumericDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *SortedNumericDocValuesField::TYPE = NULL;

        jclass SortedNumericDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/SortedNumericDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4372eed5] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedNumericDocValuesField::SortedNumericDocValuesField(const ::java::lang::String & a0, jlong a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_4372eed5, a0.this$, a1)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_SortedNumericDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortedNumericDocValuesField_init_(t_SortedNumericDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_SortedNumericDocValuesField__methods_[] = {
          DECLARE_METHOD(t_SortedNumericDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedNumericDocValuesField, t_SortedNumericDocValuesField, ::org::apache::lucene::document::Field, SortedNumericDocValuesField, t_SortedNumericDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_SortedNumericDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedNumericDocValuesField), module, "SortedNumericDocValuesField", 0);
        }

        void t_SortedNumericDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedNumericDocValuesField).tp_dict, "class_", make_descriptor(SortedNumericDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedNumericDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_SortedNumericDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedNumericDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SortedNumericDocValuesField::initializeClass);
          PyDict_SetItemString(PY_TYPE(SortedNumericDocValuesField).tp_dict, "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*SortedNumericDocValuesField::TYPE)));
        }

        static PyObject *t_SortedNumericDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedNumericDocValuesField::initializeClass, 1)))
            return NULL;
          return t_SortedNumericDocValuesField::wrap_Object(SortedNumericDocValuesField(((t_SortedNumericDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_SortedNumericDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedNumericDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortedNumericDocValuesField_init_(t_SortedNumericDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          SortedNumericDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sJ", &a0, &a1))
          {
            INT_CALL(object = SortedNumericDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "java/text/NumberFormat.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Number.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *NumericQueryNode::class$ = NULL;
              jmethodID *NumericQueryNode::mids$ = NULL;
              bool NumericQueryNode::live$ = false;

              jclass NumericQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_42c517e2] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/Number;Ljava/text/NumberFormat;)V");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getNumberFormat_6b701965] = env->getMethodID(cls, "getNumberFormat", "()Ljava/text/NumberFormat;");
                  mids$[mid_getValue_ee47e3e1] = env->getMethodID(cls, "getValue", "()Ljava/lang/Number;");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_setNumberFormat_d2d1ba24] = env->getMethodID(cls, "setNumberFormat", "(Ljava/text/NumberFormat;)V");
                  mids$[mid_setValue_948ebebc] = env->getMethodID(cls, "setValue", "(Ljava/lang/Number;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                  mids$[mid_getTermEscaped_99b8dfe1] = env->getMethodID(cls, "getTermEscaped", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NumericQueryNode::NumericQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::Number & a1, const ::java::text::NumberFormat & a2) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_42c517e2, a0.this$, a1.this$, a2.this$)) {}

              ::java::lang::CharSequence NumericQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              ::java::text::NumberFormat NumericQueryNode::getNumberFormat() const
              {
                return ::java::text::NumberFormat(env->callObjectMethod(this$, mids$[mid_getNumberFormat_6b701965]));
              }

              ::java::lang::Number NumericQueryNode::getValue() const
              {
                return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getValue_ee47e3e1]));
              }

              void NumericQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              void NumericQueryNode::setNumberFormat(const ::java::text::NumberFormat & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setNumberFormat_d2d1ba24], a0.this$);
              }

              void NumericQueryNode::setValue(const ::java::lang::Number & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setValue_948ebebc], a0.this$);
              }

              ::java::lang::CharSequence NumericQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String NumericQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_NumericQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumericQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NumericQueryNode_init_(t_NumericQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_NumericQueryNode_getField(t_NumericQueryNode *self);
              static PyObject *t_NumericQueryNode_getNumberFormat(t_NumericQueryNode *self);
              static PyObject *t_NumericQueryNode_getValue(t_NumericQueryNode *self);
              static PyObject *t_NumericQueryNode_setField(t_NumericQueryNode *self, PyObject *arg);
              static PyObject *t_NumericQueryNode_setNumberFormat(t_NumericQueryNode *self, PyObject *arg);
              static PyObject *t_NumericQueryNode_setValue(t_NumericQueryNode *self, PyObject *arg);
              static PyObject *t_NumericQueryNode_toQueryString(t_NumericQueryNode *self, PyObject *args);
              static PyObject *t_NumericQueryNode_toString(t_NumericQueryNode *self, PyObject *args);
              static PyObject *t_NumericQueryNode_get__field(t_NumericQueryNode *self, void *data);
              static int t_NumericQueryNode_set__field(t_NumericQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_NumericQueryNode_get__numberFormat(t_NumericQueryNode *self, void *data);
              static int t_NumericQueryNode_set__numberFormat(t_NumericQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_NumericQueryNode_get__value(t_NumericQueryNode *self, void *data);
              static int t_NumericQueryNode_set__value(t_NumericQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_NumericQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_NumericQueryNode, field),
                DECLARE_GETSET_FIELD(t_NumericQueryNode, numberFormat),
                DECLARE_GETSET_FIELD(t_NumericQueryNode, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_NumericQueryNode__methods_[] = {
                DECLARE_METHOD(t_NumericQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_NumericQueryNode, getNumberFormat, METH_NOARGS),
                DECLARE_METHOD(t_NumericQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_NumericQueryNode, setField, METH_O),
                DECLARE_METHOD(t_NumericQueryNode, setNumberFormat, METH_O),
                DECLARE_METHOD(t_NumericQueryNode, setValue, METH_O),
                DECLARE_METHOD(t_NumericQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_NumericQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NumericQueryNode, t_NumericQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, NumericQueryNode, t_NumericQueryNode_init_, 0, 0, t_NumericQueryNode__fields_, 0, 0);

              void t_NumericQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(NumericQueryNode), module, "NumericQueryNode", 0);
              }

              void t_NumericQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NumericQueryNode).tp_dict, "class_", make_descriptor(NumericQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NumericQueryNode).tp_dict, "wrapfn_", make_descriptor(t_NumericQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NumericQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NumericQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NumericQueryNode::initializeClass, 1)))
                  return NULL;
                return t_NumericQueryNode::wrap_Object(NumericQueryNode(((t_NumericQueryNode *) arg)->object.this$));
              }
              static PyObject *t_NumericQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NumericQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NumericQueryNode_init_(t_NumericQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::Number a1((jobject) NULL);
                ::java::text::NumberFormat a2((jobject) NULL);
                NumericQueryNode object((jobject) NULL);

                if (!parseArgs(args, "OOk", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(Number), ::java::text::NumberFormat::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = NumericQueryNode(a0, a1, a2));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_NumericQueryNode_getField(t_NumericQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_NumericQueryNode_getNumberFormat(t_NumericQueryNode *self)
              {
                ::java::text::NumberFormat result((jobject) NULL);
                OBJ_CALL(result = self->object.getNumberFormat());
                return ::java::text::t_NumberFormat::wrap_Object(result);
              }

              static PyObject *t_NumericQueryNode_getValue(t_NumericQueryNode *self)
              {
                ::java::lang::Number result((jobject) NULL);
                OBJ_CALL(result = self->object.getValue());
                return ::java::lang::t_Number::wrap_Object(result);
              }

              static PyObject *t_NumericQueryNode_setField(t_NumericQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_NumericQueryNode_setNumberFormat(t_NumericQueryNode *self, PyObject *arg)
              {
                ::java::text::NumberFormat a0((jobject) NULL);

                if (!parseArg(arg, "k", ::java::text::NumberFormat::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setNumberFormat(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setNumberFormat", arg);
                return NULL;
              }

              static PyObject *t_NumericQueryNode_setValue(t_NumericQueryNode *self, PyObject *arg)
              {
                ::java::lang::Number a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Number), &a0))
                {
                  OBJ_CALL(self->object.setValue(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setValue", arg);
                return NULL;
              }

              static PyObject *t_NumericQueryNode_toQueryString(t_NumericQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(NumericQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_NumericQueryNode_toString(t_NumericQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(NumericQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_NumericQueryNode_get__field(t_NumericQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_NumericQueryNode_set__field(t_NumericQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_NumericQueryNode_get__numberFormat(t_NumericQueryNode *self, void *data)
              {
                ::java::text::NumberFormat value((jobject) NULL);
                OBJ_CALL(value = self->object.getNumberFormat());
                return ::java::text::t_NumberFormat::wrap_Object(value);
              }
              static int t_NumericQueryNode_set__numberFormat(t_NumericQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::text::NumberFormat value((jobject) NULL);
                  if (!parseArg(arg, "k", ::java::text::NumberFormat::initializeClass, &value))
                  {
                    INT_CALL(self->object.setNumberFormat(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "numberFormat", arg);
                return -1;
              }

              static PyObject *t_NumericQueryNode_get__value(t_NumericQueryNode *self, void *data)
              {
                ::java::lang::Number value((jobject) NULL);
                OBJ_CALL(value = self->object.getValue());
                return ::java::lang::t_Number::wrap_Object(value);
              }
              static int t_NumericQueryNode_set__value(t_NumericQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::Number value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Number), &value))
                  {
                    INT_CALL(self->object.setValue(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "value", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/DocTermOrds.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *DocTermOrds::class$ = NULL;
        jmethodID *DocTermOrds::mids$ = NULL;
        bool DocTermOrds::live$ = false;
        jint DocTermOrds::DEFAULT_INDEX_INTERVAL_BITS = (jint) 0;

        jclass DocTermOrds::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/DocTermOrds");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5230fbcf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/AtomicReader;Lorg/apache/lucene/util/Bits;Ljava/lang/String;)V");
            mids$[mid_init$_ba2c6033] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/AtomicReader;Lorg/apache/lucene/util/Bits;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_init$_69c8f813] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/AtomicReader;Lorg/apache/lucene/util/Bits;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;I)V");
            mids$[mid_init$_6c95794f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/AtomicReader;Lorg/apache/lucene/util/Bits;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;II)V");
            mids$[mid_getOrdTermsEnum_e7b033b0] = env->getMethodID(cls, "getOrdTermsEnum", "(Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
            mids$[mid_iterator_e09eae6c] = env->getMethodID(cls, "iterator", "(Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_lookupTerm_fc839edf] = env->getMethodID(cls, "lookupTerm", "(Lorg/apache/lucene/index/TermsEnum;I)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_numTerms_54c6a179] = env->getMethodID(cls, "numTerms", "()I");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_uninvert_728f7de9] = env->getMethodID(cls, "uninvert", "(Lorg/apache/lucene/index/AtomicReader;Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_visitTerm_619ad8a4] = env->getMethodID(cls, "visitTerm", "(Lorg/apache/lucene/index/TermsEnum;I)V");
            mids$[mid_setActualDocFreq_d8d154a6] = env->getMethodID(cls, "setActualDocFreq", "(II)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_INDEX_INTERVAL_BITS = env->getStaticIntField(cls, "DEFAULT_INDEX_INTERVAL_BITS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocTermOrds::DocTermOrds(const ::org::apache::lucene::index::AtomicReader & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5230fbcf, a0.this$, a1.this$, a2.this$)) {}

        DocTermOrds::DocTermOrds(const ::org::apache::lucene::index::AtomicReader & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ba2c6033, a0.this$, a1.this$, a2.this$, a3.this$)) {}

        DocTermOrds::DocTermOrds(const ::org::apache::lucene::index::AtomicReader & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3, jint a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_69c8f813, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

        DocTermOrds::DocTermOrds(const ::org::apache::lucene::index::AtomicReader & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3, jint a4, jint a5) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6c95794f, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5)) {}

        ::org::apache::lucene::index::TermsEnum DocTermOrds::getOrdTermsEnum(const ::org::apache::lucene::index::AtomicReader & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_getOrdTermsEnum_e7b033b0], a0.this$));
        }

        jboolean DocTermOrds::isEmpty() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
        }

        ::org::apache::lucene::index::SortedSetDocValues DocTermOrds::iterator(const ::org::apache::lucene::index::AtomicReader & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_iterator_e09eae6c], a0.this$));
        }

        ::org::apache::lucene::util::BytesRef DocTermOrds::lookupTerm(const ::org::apache::lucene::index::TermsEnum & a0, jint a1) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_lookupTerm_fc839edf], a0.this$, a1));
        }

        jint DocTermOrds::numTerms() const
        {
          return env->callIntMethod(this$, mids$[mid_numTerms_54c6a179]);
        }

        jlong DocTermOrds::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_DocTermOrds_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocTermOrds_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocTermOrds_init_(t_DocTermOrds *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocTermOrds_getOrdTermsEnum(t_DocTermOrds *self, PyObject *arg);
        static PyObject *t_DocTermOrds_isEmpty(t_DocTermOrds *self);
        static PyObject *t_DocTermOrds_iterator(t_DocTermOrds *self, PyObject *arg);
        static PyObject *t_DocTermOrds_lookupTerm(t_DocTermOrds *self, PyObject *args);
        static PyObject *t_DocTermOrds_numTerms(t_DocTermOrds *self);
        static PyObject *t_DocTermOrds_ramBytesUsed(t_DocTermOrds *self);
        static PyObject *t_DocTermOrds_get__empty(t_DocTermOrds *self, void *data);
        static PyGetSetDef t_DocTermOrds__fields_[] = {
          DECLARE_GET_FIELD(t_DocTermOrds, empty),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocTermOrds__methods_[] = {
          DECLARE_METHOD(t_DocTermOrds, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocTermOrds, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocTermOrds, getOrdTermsEnum, METH_O),
          DECLARE_METHOD(t_DocTermOrds, isEmpty, METH_NOARGS),
          DECLARE_METHOD(t_DocTermOrds, iterator, METH_O),
          DECLARE_METHOD(t_DocTermOrds, lookupTerm, METH_VARARGS),
          DECLARE_METHOD(t_DocTermOrds, numTerms, METH_NOARGS),
          DECLARE_METHOD(t_DocTermOrds, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocTermOrds, t_DocTermOrds, ::java::lang::Object, DocTermOrds, t_DocTermOrds_init_, 0, 0, t_DocTermOrds__fields_, 0, 0);

        void t_DocTermOrds::install(PyObject *module)
        {
          installType(&PY_TYPE(DocTermOrds), module, "DocTermOrds", 0);
        }

        void t_DocTermOrds::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocTermOrds).tp_dict, "class_", make_descriptor(DocTermOrds::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocTermOrds).tp_dict, "wrapfn_", make_descriptor(t_DocTermOrds::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocTermOrds).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DocTermOrds::initializeClass);
          PyDict_SetItemString(PY_TYPE(DocTermOrds).tp_dict, "DEFAULT_INDEX_INTERVAL_BITS", make_descriptor(DocTermOrds::DEFAULT_INDEX_INTERVAL_BITS));
        }

        static PyObject *t_DocTermOrds_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocTermOrds::initializeClass, 1)))
            return NULL;
          return t_DocTermOrds::wrap_Object(DocTermOrds(((t_DocTermOrds *) arg)->object.this$));
        }
        static PyObject *t_DocTermOrds_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocTermOrds::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocTermOrds_init_(t_DocTermOrds *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              DocTermOrds object((jobject) NULL);

              if (!parseArgs(args, "kks", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = DocTermOrds(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              DocTermOrds object((jobject) NULL);

              if (!parseArgs(args, "kksk", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = DocTermOrds(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            goto err;
           case 5:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              jint a4;
              DocTermOrds object((jobject) NULL);

              if (!parseArgs(args, "kkskI", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = DocTermOrds(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
            goto err;
           case 6:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              jint a4;
              jint a5;
              DocTermOrds object((jobject) NULL);

              if (!parseArgs(args, "kkskII", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                INT_CALL(object = DocTermOrds(a0, a1, a2, a3, a4, a5));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DocTermOrds_getOrdTermsEnum(t_DocTermOrds *self, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getOrdTermsEnum(a0));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getOrdTermsEnum", arg);
          return NULL;
        }

        static PyObject *t_DocTermOrds_isEmpty(t_DocTermOrds *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isEmpty());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_DocTermOrds_iterator(t_DocTermOrds *self, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.iterator(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "iterator", arg);
          return NULL;
        }

        static PyObject *t_DocTermOrds_lookupTerm(t_DocTermOrds *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.lookupTerm(a0, a1));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "lookupTerm", args);
          return NULL;
        }

        static PyObject *t_DocTermOrds_numTerms(t_DocTermOrds *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numTerms());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DocTermOrds_ramBytesUsed(t_DocTermOrds *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_DocTermOrds_get__empty(t_DocTermOrds *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isEmpty());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "java/io/IOException.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *FieldsProducer::class$ = NULL;
        jmethodID *FieldsProducer::mids$ = NULL;
        bool FieldsProducer::live$ = false;

        jclass FieldsProducer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/FieldsProducer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void FieldsProducer::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        void FieldsProducer::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_FieldsProducer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldsProducer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldsProducer_checkIntegrity(t_FieldsProducer *self);
        static PyObject *t_FieldsProducer_close(t_FieldsProducer *self);

        static PyMethodDef t_FieldsProducer__methods_[] = {
          DECLARE_METHOD(t_FieldsProducer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldsProducer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldsProducer, checkIntegrity, METH_NOARGS),
          DECLARE_METHOD(t_FieldsProducer, close, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldsProducer, t_FieldsProducer, ::org::apache::lucene::index::Fields, FieldsProducer, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldsProducer::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldsProducer), module, "FieldsProducer", 0);
        }

        void t_FieldsProducer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldsProducer).tp_dict, "class_", make_descriptor(FieldsProducer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldsProducer).tp_dict, "wrapfn_", make_descriptor(t_FieldsProducer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldsProducer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldsProducer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldsProducer::initializeClass, 1)))
            return NULL;
          return t_FieldsProducer::wrap_Object(FieldsProducer(((t_FieldsProducer *) arg)->object.this$));
        }
        static PyObject *t_FieldsProducer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldsProducer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldsProducer_checkIntegrity(t_FieldsProducer *self)
        {
          OBJ_CALL(self->object.checkIntegrity());
          Py_RETURN_NONE;
        }

        static PyObject *t_FieldsProducer_close(t_FieldsProducer *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/nl/DutchStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/HashMap.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/nl/DutchStemmer.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace nl {

          ::java::lang::Class *DutchStemFilter::class$ = NULL;
          jmethodID *DutchStemFilter::mids$ = NULL;
          bool DutchStemFilter::live$ = false;

          jclass DutchStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/nl/DutchStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_d492dbba] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/util/Map;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_setStemDictionary_70cdf88c] = env->getMethodID(cls, "setStemDictionary", "(Ljava/util/HashMap;)V");
              mids$[mid_setStemmer_b66a40d3] = env->getMethodID(cls, "setStemmer", "(Lorg/apache/lucene/analysis/nl/DutchStemmer;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DutchStemFilter::DutchStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          DutchStemFilter::DutchStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::util::Map & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d492dbba, a0.this$, a1.this$)) {}

          jboolean DutchStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void DutchStemFilter::setStemDictionary(const ::java::util::HashMap & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setStemDictionary_70cdf88c], a0.this$);
          }

          void DutchStemFilter::setStemmer(const ::org::apache::lucene::analysis::nl::DutchStemmer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setStemmer_b66a40d3], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace nl {
          static PyObject *t_DutchStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DutchStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DutchStemFilter_init_(t_DutchStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DutchStemFilter_incrementToken(t_DutchStemFilter *self, PyObject *args);
          static PyObject *t_DutchStemFilter_setStemDictionary(t_DutchStemFilter *self, PyObject *arg);
          static PyObject *t_DutchStemFilter_setStemmer(t_DutchStemFilter *self, PyObject *arg);
          static int t_DutchStemFilter_set__stemDictionary(t_DutchStemFilter *self, PyObject *arg, void *data);
          static int t_DutchStemFilter_set__stemmer(t_DutchStemFilter *self, PyObject *arg, void *data);
          static PyGetSetDef t_DutchStemFilter__fields_[] = {
            DECLARE_SET_FIELD(t_DutchStemFilter, stemDictionary),
            DECLARE_SET_FIELD(t_DutchStemFilter, stemmer),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DutchStemFilter__methods_[] = {
            DECLARE_METHOD(t_DutchStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DutchStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DutchStemFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_DutchStemFilter, setStemDictionary, METH_O),
            DECLARE_METHOD(t_DutchStemFilter, setStemmer, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DutchStemFilter, t_DutchStemFilter, ::org::apache::lucene::analysis::TokenFilter, DutchStemFilter, t_DutchStemFilter_init_, 0, 0, t_DutchStemFilter__fields_, 0, 0);

          void t_DutchStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(DutchStemFilter), module, "DutchStemFilter", 0);
          }

          void t_DutchStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DutchStemFilter).tp_dict, "class_", make_descriptor(DutchStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DutchStemFilter).tp_dict, "wrapfn_", make_descriptor(t_DutchStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DutchStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DutchStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DutchStemFilter::initializeClass, 1)))
              return NULL;
            return t_DutchStemFilter::wrap_Object(DutchStemFilter(((t_DutchStemFilter *) arg)->object.this$));
          }
          static PyObject *t_DutchStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DutchStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DutchStemFilter_init_(t_DutchStemFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                DutchStemFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = DutchStemFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                DutchStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
                {
                  INT_CALL(object = DutchStemFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DutchStemFilter_incrementToken(t_DutchStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(DutchStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_DutchStemFilter_setStemDictionary(t_DutchStemFilter *self, PyObject *arg)
          {
            ::java::util::HashMap a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::HashMap::initializeClass, &a0, &p0, ::java::util::t_HashMap::parameters_))
            {
              OBJ_CALL(self->object.setStemDictionary(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStemDictionary", arg);
            return NULL;
          }

          static PyObject *t_DutchStemFilter_setStemmer(t_DutchStemFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::nl::DutchStemmer a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::nl::DutchStemmer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setStemmer(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStemmer", arg);
            return NULL;
          }

          static int t_DutchStemFilter_set__stemDictionary(t_DutchStemFilter *self, PyObject *arg, void *data)
          {
            {
              ::java::util::HashMap value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::HashMap::initializeClass, &value))
              {
                INT_CALL(self->object.setStemDictionary(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "stemDictionary", arg);
            return -1;
          }

          static int t_DutchStemFilter_set__stemmer(t_DutchStemFilter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::nl::DutchStemmer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::nl::DutchStemmer::initializeClass, &value))
              {
                INT_CALL(self->object.setStemmer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "stemmer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/NormalizationH2.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *NormalizationH2::class$ = NULL;
          jmethodID *NormalizationH2::mids$ = NULL;
          bool NormalizationH2::live$ = false;

          jclass NormalizationH2::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/NormalizationH2");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_getC_54c6a176] = env->getMethodID(cls, "getC", "()F");
              mids$[mid_tfn_63482206] = env->getMethodID(cls, "tfn", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NormalizationH2::NormalizationH2() : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          NormalizationH2::NormalizationH2(jfloat a0) : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          jfloat NormalizationH2::getC() const
          {
            return env->callFloatMethod(this$, mids$[mid_getC_54c6a176]);
          }

          jfloat NormalizationH2::tfn(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_tfn_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String NormalizationH2::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_NormalizationH2_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NormalizationH2_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NormalizationH2_init_(t_NormalizationH2 *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NormalizationH2_getC(t_NormalizationH2 *self);
          static PyObject *t_NormalizationH2_tfn(t_NormalizationH2 *self, PyObject *args);
          static PyObject *t_NormalizationH2_toString(t_NormalizationH2 *self, PyObject *args);
          static PyObject *t_NormalizationH2_get__c(t_NormalizationH2 *self, void *data);
          static PyGetSetDef t_NormalizationH2__fields_[] = {
            DECLARE_GET_FIELD(t_NormalizationH2, c),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NormalizationH2__methods_[] = {
            DECLARE_METHOD(t_NormalizationH2, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationH2, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationH2, getC, METH_NOARGS),
            DECLARE_METHOD(t_NormalizationH2, tfn, METH_VARARGS),
            DECLARE_METHOD(t_NormalizationH2, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NormalizationH2, t_NormalizationH2, ::org::apache::lucene::search::similarities::Normalization, NormalizationH2, t_NormalizationH2_init_, 0, 0, t_NormalizationH2__fields_, 0, 0);

          void t_NormalizationH2::install(PyObject *module)
          {
            installType(&PY_TYPE(NormalizationH2), module, "NormalizationH2", 0);
          }

          void t_NormalizationH2::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NormalizationH2).tp_dict, "class_", make_descriptor(NormalizationH2::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NormalizationH2).tp_dict, "wrapfn_", make_descriptor(t_NormalizationH2::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NormalizationH2).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NormalizationH2_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NormalizationH2::initializeClass, 1)))
              return NULL;
            return t_NormalizationH2::wrap_Object(NormalizationH2(((t_NormalizationH2 *) arg)->object.this$));
          }
          static PyObject *t_NormalizationH2_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NormalizationH2::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NormalizationH2_init_(t_NormalizationH2 *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                NormalizationH2 object((jobject) NULL);

                INT_CALL(object = NormalizationH2());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jfloat a0;
                NormalizationH2 object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = NormalizationH2(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NormalizationH2_getC(t_NormalizationH2 *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getC());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_NormalizationH2_tfn(t_NormalizationH2 *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.tfn(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(NormalizationH2), (PyObject *) self, "tfn", args, 2);
          }

          static PyObject *t_NormalizationH2_toString(t_NormalizationH2 *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(NormalizationH2), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_NormalizationH2_get__c(t_NormalizationH2 *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getC());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonShortParser.h"
#include "org/apache/lucene/search/FieldCache$ShortParser.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonShortParser::class$ = NULL;
        jmethodID *PythonShortParser::mids$ = NULL;
        bool PythonShortParser::live$ = false;

        jclass PythonShortParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonShortParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_parseShort_7bc03dc1] = env->getMethodID(cls, "parseShort", "(Lorg/apache/lucene/util/BytesRef;)S");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_termsEnum_fb3ac14e] = env->getMethodID(cls, "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonShortParser::PythonShortParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonShortParser::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonShortParser::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonShortParser::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonShortParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonShortParser_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonShortParser_init_(t_PythonShortParser *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonShortParser_finalize(t_PythonShortParser *self);
        static PyObject *t_PythonShortParser_pythonExtension(t_PythonShortParser *self, PyObject *args);
        static jshort JNICALL t_PythonShortParser_parseShort0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonShortParser_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonShortParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonShortParser_get__self(t_PythonShortParser *self, void *data);
        static PyGetSetDef t_PythonShortParser__fields_[] = {
          DECLARE_GET_FIELD(t_PythonShortParser, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonShortParser__methods_[] = {
          DECLARE_METHOD(t_PythonShortParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonShortParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonShortParser, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonShortParser, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonShortParser, t_PythonShortParser, ::java::lang::Object, PythonShortParser, t_PythonShortParser_init_, 0, 0, t_PythonShortParser__fields_, 0, 0);

        void t_PythonShortParser::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonShortParser), module, "PythonShortParser", 1);
        }

        void t_PythonShortParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonShortParser).tp_dict, "class_", make_descriptor(PythonShortParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonShortParser).tp_dict, "wrapfn_", make_descriptor(t_PythonShortParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonShortParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonShortParser::initializeClass);
          JNINativeMethod methods[] = {
            { "parseShort", "(Lorg/apache/lucene/util/BytesRef;)S", (void *) t_PythonShortParser_parseShort0 },
            { "pythonDecRef", "()V", (void *) t_PythonShortParser_pythonDecRef1 },
            { "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;", (void *) t_PythonShortParser_termsEnum2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonShortParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonShortParser::initializeClass, 1)))
            return NULL;
          return t_PythonShortParser::wrap_Object(PythonShortParser(((t_PythonShortParser *) arg)->object.this$));
        }
        static PyObject *t_PythonShortParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonShortParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonShortParser_init_(t_PythonShortParser *self, PyObject *args, PyObject *kwds)
        {
          PythonShortParser object((jobject) NULL);

          INT_CALL(object = PythonShortParser());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonShortParser_finalize(t_PythonShortParser *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonShortParser_pythonExtension(t_PythonShortParser *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jshort JNICALL t_PythonShortParser_parseShort0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonShortParser::mids$[PythonShortParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jshort value;
          PyObject *o0 = ::org::apache::lucene::util::t_BytesRef::wrap_Object(::org::apache::lucene::util::BytesRef(a0));
          PyObject *result = PyObject_CallMethod(obj, "parseShort", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "S", &value))
          {
            throwTypeError("parseShort", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jshort) 0;
        }

        static void JNICALL t_PythonShortParser_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonShortParser::mids$[PythonShortParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonShortParser::mids$[PythonShortParser::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jobject JNICALL t_PythonShortParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonShortParser::mids$[PythonShortParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::index::TermsEnum value((jobject) NULL);
          PyObject *o0 = ::org::apache::lucene::index::t_Terms::wrap_Object(::org::apache::lucene::index::Terms(a0));
          PyObject *result = PyObject_CallMethod(obj, "termsEnum", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &value))
          {
            throwTypeError("termsEnum", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonShortParser_get__self(t_PythonShortParser *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/TypeAttributeImpl.h"
#include "java/lang/String.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/tokenattributes/TypeAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *TypeAttributeImpl::class$ = NULL;
          jmethodID *TypeAttributeImpl::mids$ = NULL;
          bool TypeAttributeImpl::live$ = false;

          jclass TypeAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/TypeAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setType_5fdc3f48] = env->getMethodID(cls, "setType", "(Ljava/lang/String;)V");
              mids$[mid_type_14c7b5c5] = env->getMethodID(cls, "type", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TypeAttributeImpl::TypeAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          TypeAttributeImpl::TypeAttributeImpl(const ::java::lang::String & a0) : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          void TypeAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          void TypeAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jboolean TypeAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint TypeAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void TypeAttributeImpl::setType(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setType_5fdc3f48], a0.this$);
          }

          ::java::lang::String TypeAttributeImpl::type() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_type_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_TypeAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TypeAttributeImpl_init_(t_TypeAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TypeAttributeImpl_clear(t_TypeAttributeImpl *self, PyObject *args);
          static PyObject *t_TypeAttributeImpl_copyTo(t_TypeAttributeImpl *self, PyObject *args);
          static PyObject *t_TypeAttributeImpl_equals(t_TypeAttributeImpl *self, PyObject *args);
          static PyObject *t_TypeAttributeImpl_hashCode(t_TypeAttributeImpl *self, PyObject *args);
          static PyObject *t_TypeAttributeImpl_setType(t_TypeAttributeImpl *self, PyObject *arg);
          static PyObject *t_TypeAttributeImpl_type(t_TypeAttributeImpl *self);

          static PyMethodDef t_TypeAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_TypeAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_TypeAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_TypeAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_TypeAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_TypeAttributeImpl, setType, METH_O),
            DECLARE_METHOD(t_TypeAttributeImpl, type, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TypeAttributeImpl, t_TypeAttributeImpl, ::org::apache::lucene::util::AttributeImpl, TypeAttributeImpl, t_TypeAttributeImpl_init_, 0, 0, 0, 0, 0);

          void t_TypeAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(TypeAttributeImpl), module, "TypeAttributeImpl", 0);
          }

          void t_TypeAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TypeAttributeImpl).tp_dict, "class_", make_descriptor(TypeAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TypeAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_TypeAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TypeAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TypeAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TypeAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_TypeAttributeImpl::wrap_Object(TypeAttributeImpl(((t_TypeAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_TypeAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TypeAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TypeAttributeImpl_init_(t_TypeAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                TypeAttributeImpl object((jobject) NULL);

                INT_CALL(object = TypeAttributeImpl());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                TypeAttributeImpl object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = TypeAttributeImpl(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TypeAttributeImpl_clear(t_TypeAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(TypeAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_TypeAttributeImpl_copyTo(t_TypeAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(TypeAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_TypeAttributeImpl_equals(t_TypeAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TypeAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_TypeAttributeImpl_hashCode(t_TypeAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(TypeAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_TypeAttributeImpl_setType(t_TypeAttributeImpl *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setType(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setType", arg);
            return NULL;
          }

          static PyObject *t_TypeAttributeImpl_type(t_TypeAttributeImpl *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.type());
            return j2p(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/th/ThaiWordFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {

          ::java::lang::Class *ThaiWordFilter::class$ = NULL;
          jmethodID *ThaiWordFilter::mids$ = NULL;
          bool ThaiWordFilter::live$ = false;
          jboolean ThaiWordFilter::DBBI_AVAILABLE = (jboolean) 0;

          jclass ThaiWordFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/th/ThaiWordFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DBBI_AVAILABLE = env->getStaticBooleanField(cls, "DBBI_AVAILABLE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ThaiWordFilter::ThaiWordFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          ThaiWordFilter::ThaiWordFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          jboolean ThaiWordFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void ThaiWordFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {
          static PyObject *t_ThaiWordFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ThaiWordFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ThaiWordFilter_init_(t_ThaiWordFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ThaiWordFilter_incrementToken(t_ThaiWordFilter *self, PyObject *args);
          static PyObject *t_ThaiWordFilter_reset(t_ThaiWordFilter *self, PyObject *args);

          static PyMethodDef t_ThaiWordFilter__methods_[] = {
            DECLARE_METHOD(t_ThaiWordFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiWordFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiWordFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ThaiWordFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ThaiWordFilter, t_ThaiWordFilter, ::org::apache::lucene::analysis::TokenFilter, ThaiWordFilter, t_ThaiWordFilter_init_, 0, 0, 0, 0, 0);

          void t_ThaiWordFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ThaiWordFilter), module, "ThaiWordFilter", 0);
          }

          void t_ThaiWordFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ThaiWordFilter).tp_dict, "class_", make_descriptor(ThaiWordFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ThaiWordFilter).tp_dict, "wrapfn_", make_descriptor(t_ThaiWordFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ThaiWordFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ThaiWordFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(ThaiWordFilter).tp_dict, "DBBI_AVAILABLE", make_descriptor(ThaiWordFilter::DBBI_AVAILABLE));
          }

          static PyObject *t_ThaiWordFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ThaiWordFilter::initializeClass, 1)))
              return NULL;
            return t_ThaiWordFilter::wrap_Object(ThaiWordFilter(((t_ThaiWordFilter *) arg)->object.this$));
          }
          static PyObject *t_ThaiWordFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ThaiWordFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ThaiWordFilter_init_(t_ThaiWordFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ThaiWordFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = ThaiWordFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ThaiWordFilter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ThaiWordFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ThaiWordFilter_incrementToken(t_ThaiWordFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ThaiWordFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ThaiWordFilter_reset(t_ThaiWordFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ThaiWordFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/document/Document.h"
#include "org/apache/lucene/facet/FacetsConfig$DimConfig.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyWriter.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *FacetsConfig::class$ = NULL;
        jmethodID *FacetsConfig::mids$ = NULL;
        bool FacetsConfig::live$ = false;
        ::org::apache::lucene::facet::FacetsConfig$DimConfig *FacetsConfig::DEFAULT_DIM_CONFIG = NULL;
        ::java::lang::String *FacetsConfig::DEFAULT_INDEX_FIELD_NAME = NULL;

        jclass FacetsConfig::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/FacetsConfig");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_build_4faaf947] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/document/Document;)Lorg/apache/lucene/document/Document;");
            mids$[mid_build_ae4aef7e] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyWriter;Lorg/apache/lucene/document/Document;)Lorg/apache/lucene/document/Document;");
            mids$[mid_getDimConfig_7d95dc61] = env->getMethodID(cls, "getDimConfig", "(Ljava/lang/String;)Lorg/apache/lucene/facet/FacetsConfig$DimConfig;");
            mids$[mid_getDimConfigs_db60befd] = env->getMethodID(cls, "getDimConfigs", "()Ljava/util/Map;");
            mids$[mid_pathToString_1034289b] = env->getStaticMethodID(cls, "pathToString", "([Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_pathToString_64aeb14d] = env->getStaticMethodID(cls, "pathToString", "([Ljava/lang/String;I)Ljava/lang/String;");
            mids$[mid_pathToString_05f95d9d] = env->getStaticMethodID(cls, "pathToString", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_setHierarchical_f3691645] = env->getMethodID(cls, "setHierarchical", "(Ljava/lang/String;Z)V");
            mids$[mid_setIndexFieldName_4a264742] = env->getMethodID(cls, "setIndexFieldName", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_setMultiValued_f3691645] = env->getMethodID(cls, "setMultiValued", "(Ljava/lang/String;Z)V");
            mids$[mid_setRequireDimCount_f3691645] = env->getMethodID(cls, "setRequireDimCount", "(Ljava/lang/String;Z)V");
            mids$[mid_stringToPath_1f6a174f] = env->getStaticMethodID(cls, "stringToPath", "(Ljava/lang/String;)[Ljava/lang/String;");
            mids$[mid_getDefaultDimConfig_d06bca2f] = env->getMethodID(cls, "getDefaultDimConfig", "()Lorg/apache/lucene/facet/FacetsConfig$DimConfig;");
            mids$[mid_dedupAndEncode_14756a33] = env->getMethodID(cls, "dedupAndEncode", "(Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/BytesRef;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_DIM_CONFIG = new ::org::apache::lucene::facet::FacetsConfig$DimConfig(env->getStaticObjectField(cls, "DEFAULT_DIM_CONFIG", "Lorg/apache/lucene/facet/FacetsConfig$DimConfig;"));
            DEFAULT_INDEX_FIELD_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_INDEX_FIELD_NAME", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FacetsConfig::FacetsConfig() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::document::Document FacetsConfig::build(const ::org::apache::lucene::document::Document & a0) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_build_4faaf947], a0.this$));
        }

        ::org::apache::lucene::document::Document FacetsConfig::build(const ::org::apache::lucene::facet::taxonomy::TaxonomyWriter & a0, const ::org::apache::lucene::document::Document & a1) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_build_ae4aef7e], a0.this$, a1.this$));
        }

        ::org::apache::lucene::facet::FacetsConfig$DimConfig FacetsConfig::getDimConfig(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::facet::FacetsConfig$DimConfig(env->callObjectMethod(this$, mids$[mid_getDimConfig_7d95dc61], a0.this$));
        }

        ::java::util::Map FacetsConfig::getDimConfigs() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getDimConfigs_db60befd]));
        }

        ::java::lang::String FacetsConfig::pathToString(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_pathToString_1034289b], a0.this$));
        }

        ::java::lang::String FacetsConfig::pathToString(const JArray< ::java::lang::String > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_pathToString_64aeb14d], a0.this$, a1));
        }

        ::java::lang::String FacetsConfig::pathToString(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_pathToString_05f95d9d], a0.this$, a1.this$));
        }

        void FacetsConfig::setHierarchical(const ::java::lang::String & a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setHierarchical_f3691645], a0.this$, a1);
        }

        void FacetsConfig::setIndexFieldName(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setIndexFieldName_4a264742], a0.this$, a1.this$);
        }

        void FacetsConfig::setMultiValued(const ::java::lang::String & a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setMultiValued_f3691645], a0.this$, a1);
        }

        void FacetsConfig::setRequireDimCount(const ::java::lang::String & a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setRequireDimCount_f3691645], a0.this$, a1);
        }

        JArray< ::java::lang::String > FacetsConfig::stringToPath(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< ::java::lang::String >(env->callStaticObjectMethod(cls, mids$[mid_stringToPath_1f6a174f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_FacetsConfig_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetsConfig_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FacetsConfig_init_(t_FacetsConfig *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FacetsConfig_build(t_FacetsConfig *self, PyObject *args);
        static PyObject *t_FacetsConfig_getDimConfig(t_FacetsConfig *self, PyObject *arg);
        static PyObject *t_FacetsConfig_getDimConfigs(t_FacetsConfig *self);
        static PyObject *t_FacetsConfig_pathToString(PyTypeObject *type, PyObject *args);
        static PyObject *t_FacetsConfig_setHierarchical(t_FacetsConfig *self, PyObject *args);
        static PyObject *t_FacetsConfig_setIndexFieldName(t_FacetsConfig *self, PyObject *args);
        static PyObject *t_FacetsConfig_setMultiValued(t_FacetsConfig *self, PyObject *args);
        static PyObject *t_FacetsConfig_setRequireDimCount(t_FacetsConfig *self, PyObject *args);
        static PyObject *t_FacetsConfig_stringToPath(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetsConfig_get__dimConfigs(t_FacetsConfig *self, void *data);
        static PyGetSetDef t_FacetsConfig__fields_[] = {
          DECLARE_GET_FIELD(t_FacetsConfig, dimConfigs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FacetsConfig__methods_[] = {
          DECLARE_METHOD(t_FacetsConfig, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsConfig, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsConfig, build, METH_VARARGS),
          DECLARE_METHOD(t_FacetsConfig, getDimConfig, METH_O),
          DECLARE_METHOD(t_FacetsConfig, getDimConfigs, METH_NOARGS),
          DECLARE_METHOD(t_FacetsConfig, pathToString, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FacetsConfig, setHierarchical, METH_VARARGS),
          DECLARE_METHOD(t_FacetsConfig, setIndexFieldName, METH_VARARGS),
          DECLARE_METHOD(t_FacetsConfig, setMultiValued, METH_VARARGS),
          DECLARE_METHOD(t_FacetsConfig, setRequireDimCount, METH_VARARGS),
          DECLARE_METHOD(t_FacetsConfig, stringToPath, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FacetsConfig, t_FacetsConfig, ::java::lang::Object, FacetsConfig, t_FacetsConfig_init_, 0, 0, t_FacetsConfig__fields_, 0, 0);

        void t_FacetsConfig::install(PyObject *module)
        {
          installType(&PY_TYPE(FacetsConfig), module, "FacetsConfig", 0);
          PyDict_SetItemString(PY_TYPE(FacetsConfig).tp_dict, "DimConfig", make_descriptor(&PY_TYPE(FacetsConfig$DimConfig)));
        }

        void t_FacetsConfig::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FacetsConfig).tp_dict, "class_", make_descriptor(FacetsConfig::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FacetsConfig).tp_dict, "wrapfn_", make_descriptor(t_FacetsConfig::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FacetsConfig).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FacetsConfig::initializeClass);
          PyDict_SetItemString(PY_TYPE(FacetsConfig).tp_dict, "DEFAULT_DIM_CONFIG", make_descriptor(::org::apache::lucene::facet::t_FacetsConfig$DimConfig::wrap_Object(*FacetsConfig::DEFAULT_DIM_CONFIG)));
          PyDict_SetItemString(PY_TYPE(FacetsConfig).tp_dict, "DEFAULT_INDEX_FIELD_NAME", make_descriptor(j2p(*FacetsConfig::DEFAULT_INDEX_FIELD_NAME)));
        }

        static PyObject *t_FacetsConfig_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FacetsConfig::initializeClass, 1)))
            return NULL;
          return t_FacetsConfig::wrap_Object(FacetsConfig(((t_FacetsConfig *) arg)->object.this$));
        }
        static PyObject *t_FacetsConfig_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FacetsConfig::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FacetsConfig_init_(t_FacetsConfig *self, PyObject *args, PyObject *kwds)
        {
          FacetsConfig object((jobject) NULL);

          INT_CALL(object = FacetsConfig());
          self->object = object;

          return 0;
        }

        static PyObject *t_FacetsConfig_build(t_FacetsConfig *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::document::Document a0((jobject) NULL);
              ::org::apache::lucene::document::Document result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::document::Document::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.build(a0));
                return ::org::apache::lucene::document::t_Document::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::facet::taxonomy::TaxonomyWriter a0((jobject) NULL);
              ::org::apache::lucene::document::Document a1((jobject) NULL);
              ::org::apache::lucene::document::Document result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::facet::taxonomy::TaxonomyWriter::initializeClass, ::org::apache::lucene::document::Document::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.build(a0, a1));
                return ::org::apache::lucene::document::t_Document::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "build", args);
          return NULL;
        }

        static PyObject *t_FacetsConfig_getDimConfig(t_FacetsConfig *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::facet::FacetsConfig$DimConfig result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDimConfig(a0));
            return ::org::apache::lucene::facet::t_FacetsConfig$DimConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDimConfig", arg);
          return NULL;
        }

        static PyObject *t_FacetsConfig_getDimConfigs(t_FacetsConfig *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getDimConfigs());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::org::apache::lucene::facet::PY_TYPE(FacetsConfig$DimConfig));
        }

        static PyObject *t_FacetsConfig_pathToString(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::lang::String > a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "[s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsConfig::pathToString(a0));
                return j2p(result);
              }
            }
            break;
           case 2:
            {
              JArray< ::java::lang::String > a0((jobject) NULL);
              jint a1;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "[sI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsConfig::pathToString(a0, a1));
                return j2p(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::java::lang::String > a1((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "s[s", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsConfig::pathToString(a0, a1));
                return j2p(result);
              }
            }
          }

          PyErr_SetArgsError(type, "pathToString", args);
          return NULL;
        }

        static PyObject *t_FacetsConfig_setHierarchical(t_FacetsConfig *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean a1;

          if (!parseArgs(args, "sZ", &a0, &a1))
          {
            OBJ_CALL(self->object.setHierarchical(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setHierarchical", args);
          return NULL;
        }

        static PyObject *t_FacetsConfig_setIndexFieldName(t_FacetsConfig *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.setIndexFieldName(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexFieldName", args);
          return NULL;
        }

        static PyObject *t_FacetsConfig_setMultiValued(t_FacetsConfig *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean a1;

          if (!parseArgs(args, "sZ", &a0, &a1))
          {
            OBJ_CALL(self->object.setMultiValued(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMultiValued", args);
          return NULL;
        }

        static PyObject *t_FacetsConfig_setRequireDimCount(t_FacetsConfig *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean a1;

          if (!parseArgs(args, "sZ", &a0, &a1))
          {
            OBJ_CALL(self->object.setRequireDimCount(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setRequireDimCount", args);
          return NULL;
        }

        static PyObject *t_FacetsConfig_stringToPath(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::facet::FacetsConfig::stringToPath(a0));
            return JArray<jstring>(result.this$).wrap();
          }

          PyErr_SetArgsError(type, "stringToPath", arg);
          return NULL;
        }

        static PyObject *t_FacetsConfig_get__dimConfigs(t_FacetsConfig *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getDimConfigs());
          return ::java::util::t_Map::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/Decompressor.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/Cloneable.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/store/DataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *Decompressor::class$ = NULL;
          jmethodID *Decompressor::mids$ = NULL;
          bool Decompressor::live$ = false;

          jclass Decompressor::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/Decompressor");

              mids$ = new jmethodID[max_mid];
              mids$[mid_clone_7b8f1b1d] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/compressing/Decompressor;");
              mids$[mid_decompress_3188de91] = env->getMethodID(cls, "decompress", "(Lorg/apache/lucene/store/DataInput;IIILorg/apache/lucene/util/BytesRef;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Decompressor Decompressor::clone() const
          {
            return Decompressor(env->callObjectMethod(this$, mids$[mid_clone_7b8f1b1d]));
          }

          void Decompressor::decompress(const ::org::apache::lucene::store::DataInput & a0, jint a1, jint a2, jint a3, const ::org::apache::lucene::util::BytesRef & a4) const
          {
            env->callVoidMethod(this$, mids$[mid_decompress_3188de91], a0.this$, a1, a2, a3, a4.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_Decompressor_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Decompressor_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Decompressor_clone(t_Decompressor *self);
          static PyObject *t_Decompressor_decompress(t_Decompressor *self, PyObject *args);

          static PyMethodDef t_Decompressor__methods_[] = {
            DECLARE_METHOD(t_Decompressor, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Decompressor, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Decompressor, clone, METH_NOARGS),
            DECLARE_METHOD(t_Decompressor, decompress, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Decompressor, t_Decompressor, ::java::lang::Object, Decompressor, abstract_init, 0, 0, 0, 0, 0);

          void t_Decompressor::install(PyObject *module)
          {
            installType(&PY_TYPE(Decompressor), module, "Decompressor", 0);
          }

          void t_Decompressor::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Decompressor).tp_dict, "class_", make_descriptor(Decompressor::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Decompressor).tp_dict, "wrapfn_", make_descriptor(t_Decompressor::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Decompressor).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Decompressor_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Decompressor::initializeClass, 1)))
              return NULL;
            return t_Decompressor::wrap_Object(Decompressor(((t_Decompressor *) arg)->object.this$));
          }
          static PyObject *t_Decompressor_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Decompressor::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Decompressor_clone(t_Decompressor *self)
          {
            Decompressor result((jobject) NULL);
            OBJ_CALL(result = self->object.clone());
            return t_Decompressor::wrap_Object(result);
          }

          static PyObject *t_Decompressor_decompress(t_Decompressor *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            jint a1;
            jint a2;
            jint a3;
            ::org::apache::lucene::util::BytesRef a4((jobject) NULL);

            if (!parseArgs(args, "kIIIk", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.decompress(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "decompress", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilderFactory.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanQueryBuilderFactory::class$ = NULL;
            jmethodID *SpanQueryBuilderFactory::mids$ = NULL;
            bool SpanQueryBuilderFactory::live$ = false;

            jclass SpanQueryBuilderFactory::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanQueryBuilderFactory");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_addBuilder_0aaa7d83] = env->getMethodID(cls, "addBuilder", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/xml/builders/SpanQueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanQueryBuilderFactory::SpanQueryBuilderFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            void SpanQueryBuilderFactory::addBuilder(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addBuilder_0aaa7d83], a0.this$, a1.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanQueryBuilderFactory_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanQueryBuilderFactory_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanQueryBuilderFactory_init_(t_SpanQueryBuilderFactory *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SpanQueryBuilderFactory_addBuilder(t_SpanQueryBuilderFactory *self, PyObject *args);

            static PyMethodDef t_SpanQueryBuilderFactory__methods_[] = {
              DECLARE_METHOD(t_SpanQueryBuilderFactory, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanQueryBuilderFactory, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanQueryBuilderFactory, addBuilder, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanQueryBuilderFactory, t_SpanQueryBuilderFactory, ::java::lang::Object, SpanQueryBuilderFactory, t_SpanQueryBuilderFactory_init_, 0, 0, 0, 0, 0);

            void t_SpanQueryBuilderFactory::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanQueryBuilderFactory), module, "SpanQueryBuilderFactory", 0);
            }

            void t_SpanQueryBuilderFactory::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanQueryBuilderFactory).tp_dict, "class_", make_descriptor(SpanQueryBuilderFactory::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanQueryBuilderFactory).tp_dict, "wrapfn_", make_descriptor(t_SpanQueryBuilderFactory::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanQueryBuilderFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanQueryBuilderFactory_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanQueryBuilderFactory::initializeClass, 1)))
                return NULL;
              return t_SpanQueryBuilderFactory::wrap_Object(SpanQueryBuilderFactory(((t_SpanQueryBuilderFactory *) arg)->object.this$));
            }
            static PyObject *t_SpanQueryBuilderFactory_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanQueryBuilderFactory::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanQueryBuilderFactory_init_(t_SpanQueryBuilderFactory *self, PyObject *args, PyObject *kwds)
            {
              SpanQueryBuilderFactory object((jobject) NULL);

              INT_CALL(object = SpanQueryBuilderFactory());
              self->object = object;

              return 0;
            }

            static PyObject *t_SpanQueryBuilderFactory_addBuilder(t_SpanQueryBuilderFactory *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder a1((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.addBuilder(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addBuilder", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues$DocTermsIndexException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *DocTermsIndexDocValues$DocTermsIndexException::class$ = NULL;
            jmethodID *DocTermsIndexDocValues$DocTermsIndexException::mids$ = NULL;
            bool DocTermsIndexDocValues$DocTermsIndexException::live$ = false;

            jclass DocTermsIndexDocValues$DocTermsIndexException::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues$DocTermsIndexException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_df97be8c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/RuntimeException;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DocTermsIndexDocValues$DocTermsIndexException::DocTermsIndexDocValues$DocTermsIndexException(const ::java::lang::String & a0, const ::java::lang::RuntimeException & a1) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_df97be8c, a0.this$, a1.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_DocTermsIndexDocValues$DocTermsIndexException_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DocTermsIndexDocValues$DocTermsIndexException_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DocTermsIndexDocValues$DocTermsIndexException_init_(t_DocTermsIndexDocValues$DocTermsIndexException *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_DocTermsIndexDocValues$DocTermsIndexException__methods_[] = {
              DECLARE_METHOD(t_DocTermsIndexDocValues$DocTermsIndexException, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DocTermsIndexDocValues$DocTermsIndexException, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DocTermsIndexDocValues$DocTermsIndexException, t_DocTermsIndexDocValues$DocTermsIndexException, ::java::lang::RuntimeException, DocTermsIndexDocValues$DocTermsIndexException, t_DocTermsIndexDocValues$DocTermsIndexException_init_, 0, 0, 0, 0, 0);

            void t_DocTermsIndexDocValues$DocTermsIndexException::install(PyObject *module)
            {
              installType(&PY_TYPE(DocTermsIndexDocValues$DocTermsIndexException), module, "DocTermsIndexDocValues$DocTermsIndexException", 0);
            }

            void t_DocTermsIndexDocValues$DocTermsIndexException::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DocTermsIndexDocValues$DocTermsIndexException).tp_dict, "class_", make_descriptor(DocTermsIndexDocValues$DocTermsIndexException::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DocTermsIndexDocValues$DocTermsIndexException).tp_dict, "wrapfn_", make_descriptor(t_DocTermsIndexDocValues$DocTermsIndexException::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DocTermsIndexDocValues$DocTermsIndexException).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DocTermsIndexDocValues$DocTermsIndexException_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DocTermsIndexDocValues$DocTermsIndexException::initializeClass, 1)))
                return NULL;
              return t_DocTermsIndexDocValues$DocTermsIndexException::wrap_Object(DocTermsIndexDocValues$DocTermsIndexException(((t_DocTermsIndexDocValues$DocTermsIndexException *) arg)->object.this$));
            }
            static PyObject *t_DocTermsIndexDocValues$DocTermsIndexException_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DocTermsIndexDocValues$DocTermsIndexException::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DocTermsIndexDocValues$DocTermsIndexException_init_(t_DocTermsIndexDocValues$DocTermsIndexException *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::RuntimeException a1((jobject) NULL);
              DocTermsIndexDocValues$DocTermsIndexException object((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::lang::RuntimeException::initializeClass, &a0, &a1))
              {
                INT_CALL(object = DocTermsIndexDocValues$DocTermsIndexException(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene46/Lucene46Codec.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {

          ::java::lang::Class *Lucene46Codec::class$ = NULL;
          jmethodID *Lucene46Codec::mids$ = NULL;
          bool Lucene46Codec::live$ = false;

          jclass Lucene46Codec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene46/Lucene46Codec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_getDocValuesFormatForField_36ef78ba] = env->getMethodID(cls, "getDocValuesFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_getPostingsFormatForField_19d2f1c6] = env->getMethodID(cls, "getPostingsFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene46Codec::Lucene46Codec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesFormat Lucene46Codec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene46Codec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
          }

          ::org::apache::lucene::codecs::DocValuesFormat Lucene46Codec::getDocValuesFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_getDocValuesFormatForField_36ef78ba], a0.this$));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene46Codec::getPostingsFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_getPostingsFormatForField_19d2f1c6], a0.this$));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene46Codec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene46Codec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene46Codec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene46Codec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene46Codec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene46Codec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {
          static PyObject *t_Lucene46Codec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene46Codec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene46Codec_init_(t_Lucene46Codec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene46Codec_docValuesFormat(t_Lucene46Codec *self, PyObject *args);
          static PyObject *t_Lucene46Codec_fieldInfosFormat(t_Lucene46Codec *self, PyObject *args);
          static PyObject *t_Lucene46Codec_getDocValuesFormatForField(t_Lucene46Codec *self, PyObject *arg);
          static PyObject *t_Lucene46Codec_getPostingsFormatForField(t_Lucene46Codec *self, PyObject *arg);
          static PyObject *t_Lucene46Codec_liveDocsFormat(t_Lucene46Codec *self, PyObject *args);
          static PyObject *t_Lucene46Codec_normsFormat(t_Lucene46Codec *self, PyObject *args);
          static PyObject *t_Lucene46Codec_postingsFormat(t_Lucene46Codec *self, PyObject *args);
          static PyObject *t_Lucene46Codec_segmentInfoFormat(t_Lucene46Codec *self, PyObject *args);
          static PyObject *t_Lucene46Codec_storedFieldsFormat(t_Lucene46Codec *self, PyObject *args);
          static PyObject *t_Lucene46Codec_termVectorsFormat(t_Lucene46Codec *self, PyObject *args);

          static PyMethodDef t_Lucene46Codec__methods_[] = {
            DECLARE_METHOD(t_Lucene46Codec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46Codec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46Codec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46Codec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46Codec, getDocValuesFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene46Codec, getPostingsFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene46Codec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46Codec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46Codec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46Codec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46Codec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46Codec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene46Codec, t_Lucene46Codec, ::org::apache::lucene::codecs::Codec, Lucene46Codec, t_Lucene46Codec_init_, 0, 0, 0, 0, 0);

          void t_Lucene46Codec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene46Codec), module, "Lucene46Codec", 0);
          }

          void t_Lucene46Codec::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene46Codec).tp_dict, "class_", make_descriptor(Lucene46Codec::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene46Codec).tp_dict, "wrapfn_", make_descriptor(t_Lucene46Codec::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene46Codec).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene46Codec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene46Codec::initializeClass, 1)))
              return NULL;
            return t_Lucene46Codec::wrap_Object(Lucene46Codec(((t_Lucene46Codec *) arg)->object.this$));
          }
          static PyObject *t_Lucene46Codec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene46Codec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene46Codec_init_(t_Lucene46Codec *self, PyObject *args, PyObject *kwds)
          {
            Lucene46Codec object((jobject) NULL);

            INT_CALL(object = Lucene46Codec());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene46Codec_docValuesFormat(t_Lucene46Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46Codec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene46Codec_fieldInfosFormat(t_Lucene46Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46Codec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene46Codec_getDocValuesFormatForField(t_Lucene46Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getDocValuesFormatForField(a0));
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDocValuesFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene46Codec_getPostingsFormatForField(t_Lucene46Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPostingsFormatForField(a0));
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPostingsFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene46Codec_liveDocsFormat(t_Lucene46Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46Codec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene46Codec_normsFormat(t_Lucene46Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46Codec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene46Codec_postingsFormat(t_Lucene46Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46Codec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene46Codec_segmentInfoFormat(t_Lucene46Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46Codec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene46Codec_storedFieldsFormat(t_Lucene46Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46Codec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene46Codec_termVectorsFormat(t_Lucene46Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46Codec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/BlockPackedReader.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *BlockPackedReader::class$ = NULL;
          jmethodID *BlockPackedReader::mids$ = NULL;
          bool BlockPackedReader::live$ = false;

          jclass BlockPackedReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/BlockPackedReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f9e6aacc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/IndexInput;IIJZ)V");
              mids$[mid_get_0ee6df33] = env->getMethodID(cls, "get", "(J)J");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockPackedReader::BlockPackedReader(const ::org::apache::lucene::store::IndexInput & a0, jint a1, jint a2, jlong a3, jboolean a4) : ::org::apache::lucene::util::LongValues(env->newObject(initializeClass, &mids$, mid_init$_f9e6aacc, a0.this$, a1, a2, a3, a4)) {}

          jlong BlockPackedReader::get(jlong a0) const
          {
            return env->callLongMethod(this$, mids$[mid_get_0ee6df33], a0);
          }

          jlong BlockPackedReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_BlockPackedReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockPackedReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockPackedReader_init_(t_BlockPackedReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BlockPackedReader_get(t_BlockPackedReader *self, PyObject *args);
          static PyObject *t_BlockPackedReader_ramBytesUsed(t_BlockPackedReader *self);

          static PyMethodDef t_BlockPackedReader__methods_[] = {
            DECLARE_METHOD(t_BlockPackedReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockPackedReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockPackedReader, get, METH_VARARGS),
            DECLARE_METHOD(t_BlockPackedReader, ramBytesUsed, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BlockPackedReader, t_BlockPackedReader, ::org::apache::lucene::util::LongValues, BlockPackedReader, t_BlockPackedReader_init_, 0, 0, 0, 0, 0);

          void t_BlockPackedReader::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockPackedReader), module, "BlockPackedReader", 0);
          }

          void t_BlockPackedReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BlockPackedReader).tp_dict, "class_", make_descriptor(BlockPackedReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BlockPackedReader).tp_dict, "wrapfn_", make_descriptor(t_BlockPackedReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BlockPackedReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockPackedReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockPackedReader::initializeClass, 1)))
              return NULL;
            return t_BlockPackedReader::wrap_Object(BlockPackedReader(((t_BlockPackedReader *) arg)->object.this$));
          }
          static PyObject *t_BlockPackedReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockPackedReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockPackedReader_init_(t_BlockPackedReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
            jint a1;
            jint a2;
            jlong a3;
            jboolean a4;
            BlockPackedReader object((jobject) NULL);

            if (!parseArgs(args, "kIIJZ", ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = BlockPackedReader(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BlockPackedReader_get(t_BlockPackedReader *self, PyObject *args)
          {
            jlong a0;
            jlong result;

            if (!parseArgs(args, "J", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(BlockPackedReader), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_BlockPackedReader_ramBytesUsed(t_BlockPackedReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hy/ArmenianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hy {

          ::java::lang::Class *ArmenianAnalyzer::class$ = NULL;
          jmethodID *ArmenianAnalyzer::mids$ = NULL;
          bool ArmenianAnalyzer::live$ = false;
          ::java::lang::String *ArmenianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass ArmenianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hy/ArmenianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_3ea629c6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArmenianAnalyzer::ArmenianAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ArmenianAnalyzer::ArmenianAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          ArmenianAnalyzer::ArmenianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          ArmenianAnalyzer::ArmenianAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_3ea629c6, a0.this$, a1.this$)) {}

          ArmenianAnalyzer::ArmenianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          ArmenianAnalyzer::ArmenianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet ArmenianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hy {
          static PyObject *t_ArmenianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArmenianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArmenianAnalyzer_init_(t_ArmenianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArmenianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_ArmenianAnalyzer_get__defaultStopSet(t_ArmenianAnalyzer *self, void *data);
          static PyGetSetDef t_ArmenianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_ArmenianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ArmenianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_ArmenianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArmenianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArmenianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArmenianAnalyzer, t_ArmenianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, ArmenianAnalyzer, t_ArmenianAnalyzer_init_, 0, 0, t_ArmenianAnalyzer__fields_, 0, 0);

          void t_ArmenianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(ArmenianAnalyzer), module, "ArmenianAnalyzer", 0);
          }

          void t_ArmenianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArmenianAnalyzer).tp_dict, "class_", make_descriptor(ArmenianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArmenianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_ArmenianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArmenianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ArmenianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ArmenianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*ArmenianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_ArmenianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArmenianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_ArmenianAnalyzer::wrap_Object(ArmenianAnalyzer(((t_ArmenianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_ArmenianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArmenianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArmenianAnalyzer_init_(t_ArmenianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ArmenianAnalyzer object((jobject) NULL);

                INT_CALL(object = ArmenianAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ArmenianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ArmenianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ArmenianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = ArmenianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ArmenianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ArmenianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ArmenianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ArmenianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                ArmenianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ArmenianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArmenianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::hy::ArmenianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_ArmenianAnalyzer_get__defaultStopSet(t_ArmenianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/vectorhighlight/BoundaryScanner.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *SimpleFragmentsBuilder::class$ = NULL;
          jmethodID *SimpleFragmentsBuilder::mids$ = NULL;
          bool SimpleFragmentsBuilder::live$ = false;

          jclass SimpleFragmentsBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_7f580ee7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/vectorhighlight/BoundaryScanner;)V");
              mids$[mid_init$_60fab432] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;[Ljava/lang/String;)V");
              mids$[mid_init$_b03db8ab] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/vectorhighlight/BoundaryScanner;)V");
              mids$[mid_getWeightedFragInfoList_4f378251] = env->getMethodID(cls, "getWeightedFragInfoList", "(Ljava/util/List;)Ljava/util/List;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleFragmentsBuilder::SimpleFragmentsBuilder() : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          SimpleFragmentsBuilder::SimpleFragmentsBuilder(const ::org::apache::lucene::search::vectorhighlight::BoundaryScanner & a0) : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_7f580ee7, a0.this$)) {}

          SimpleFragmentsBuilder::SimpleFragmentsBuilder(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1) : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_60fab432, a0.this$, a1.this$)) {}

          SimpleFragmentsBuilder::SimpleFragmentsBuilder(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::search::vectorhighlight::BoundaryScanner & a2) : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_b03db8ab, a0.this$, a1.this$, a2.this$)) {}

          ::java::util::List SimpleFragmentsBuilder::getWeightedFragInfoList(const ::java::util::List & a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getWeightedFragInfoList_4f378251], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_SimpleFragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleFragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleFragmentsBuilder_init_(t_SimpleFragmentsBuilder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleFragmentsBuilder_getWeightedFragInfoList(t_SimpleFragmentsBuilder *self, PyObject *args);

          static PyMethodDef t_SimpleFragmentsBuilder__methods_[] = {
            DECLARE_METHOD(t_SimpleFragmentsBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFragmentsBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFragmentsBuilder, getWeightedFragInfoList, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleFragmentsBuilder, t_SimpleFragmentsBuilder, ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder, SimpleFragmentsBuilder, t_SimpleFragmentsBuilder_init_, 0, 0, 0, 0, 0);

          void t_SimpleFragmentsBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleFragmentsBuilder), module, "SimpleFragmentsBuilder", 0);
          }

          void t_SimpleFragmentsBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleFragmentsBuilder).tp_dict, "class_", make_descriptor(SimpleFragmentsBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleFragmentsBuilder).tp_dict, "wrapfn_", make_descriptor(t_SimpleFragmentsBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleFragmentsBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleFragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleFragmentsBuilder::initializeClass, 1)))
              return NULL;
            return t_SimpleFragmentsBuilder::wrap_Object(SimpleFragmentsBuilder(((t_SimpleFragmentsBuilder *) arg)->object.this$));
          }
          static PyObject *t_SimpleFragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleFragmentsBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleFragmentsBuilder_init_(t_SimpleFragmentsBuilder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                SimpleFragmentsBuilder object((jobject) NULL);

                INT_CALL(object = SimpleFragmentsBuilder());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::search::vectorhighlight::BoundaryScanner a0((jobject) NULL);
                SimpleFragmentsBuilder object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::vectorhighlight::BoundaryScanner::initializeClass, &a0))
                {
                  INT_CALL(object = SimpleFragmentsBuilder(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                SimpleFragmentsBuilder object((jobject) NULL);

                if (!parseArgs(args, "[s[s", &a0, &a1))
                {
                  INT_CALL(object = SimpleFragmentsBuilder(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::BoundaryScanner a2((jobject) NULL);
                SimpleFragmentsBuilder object((jobject) NULL);

                if (!parseArgs(args, "[s[sk", ::org::apache::lucene::search::vectorhighlight::BoundaryScanner::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SimpleFragmentsBuilder(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleFragmentsBuilder_getWeightedFragInfoList(t_SimpleFragmentsBuilder *self, PyObject *args)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.getWeightedFragInfoList(a0));
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldFragList$WeightedFragInfo));
            }

            return callSuper(&PY_TYPE(SimpleFragmentsBuilder), (PyObject *) self, "getWeightedFragInfoList", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortField.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/FieldComparatorSource.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "org/apache/lucene/search/SortField$Type.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/FieldCache$Parser.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortField::class$ = NULL;
        jmethodID *SortField::mids$ = NULL;
        jfieldID *SortField::fids$ = NULL;
        bool SortField::live$ = false;
        SortField *SortField::FIELD_DOC = NULL;
        SortField *SortField::FIELD_SCORE = NULL;
        ::java::lang::Object *SortField::STRING_FIRST = NULL;
        ::java::lang::Object *SortField::STRING_LAST = NULL;

        jclass SortField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a9ca3e5c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldComparatorSource;)V");
            mids$[mid_init$_b65c884e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;)V");
            mids$[mid_init$_37ee6f9c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$Parser;)V");
            mids$[mid_init$_3e864231] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldComparatorSource;Z)V");
            mids$[mid_init$_082cc791] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$Parser;Z)V");
            mids$[mid_init$_28dc1d67] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;Z)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getBytesComparator_5a7ff2fc] = env->getMethodID(cls, "getBytesComparator", "()Ljava/util/Comparator;");
            mids$[mid_getComparator_f38637f4] = env->getMethodID(cls, "getComparator", "(II)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_getComparatorSource_3ca10de3] = env->getMethodID(cls, "getComparatorSource", "()Lorg/apache/lucene/search/FieldComparatorSource;");
            mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
            mids$[mid_getParser_6ee4ab67] = env->getMethodID(cls, "getParser", "()Lorg/apache/lucene/search/FieldCache$Parser;");
            mids$[mid_getReverse_54c6a16a] = env->getMethodID(cls, "getReverse", "()Z");
            mids$[mid_getType_e5057cd5] = env->getMethodID(cls, "getType", "()Lorg/apache/lucene/search/SortField$Type;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_needsScores_54c6a16a] = env->getMethodID(cls, "needsScores", "()Z");
            mids$[mid_rewrite_da4dd7ac] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/SortField;");
            mids$[mid_setBytesComparator_6ffdd545] = env->getMethodID(cls, "setBytesComparator", "(Ljava/util/Comparator;)V");
            mids$[mid_setMissingValue_290588ee] = env->getMethodID(cls, "setMissingValue", "(Ljava/lang/Object;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_missingValue] = env->getFieldID(cls, "missingValue", "Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            FIELD_DOC = new SortField(env->getStaticObjectField(cls, "FIELD_DOC", "Lorg/apache/lucene/search/SortField;"));
            FIELD_SCORE = new SortField(env->getStaticObjectField(cls, "FIELD_SCORE", "Lorg/apache/lucene/search/SortField;"));
            STRING_FIRST = new ::java::lang::Object(env->getStaticObjectField(cls, "STRING_FIRST", "Ljava/lang/Object;"));
            STRING_LAST = new ::java::lang::Object(env->getStaticObjectField(cls, "STRING_LAST", "Ljava/lang/Object;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortField::SortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldComparatorSource & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a9ca3e5c, a0.this$, a1.this$)) {}

        SortField::SortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b65c884e, a0.this$, a1.this$)) {}

        SortField::SortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$Parser & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_37ee6f9c, a0.this$, a1.this$)) {}

        SortField::SortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldComparatorSource & a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3e864231, a0.this$, a1.this$, a2)) {}

        SortField::SortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$Parser & a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_082cc791, a0.this$, a1.this$, a2)) {}

        SortField::SortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_28dc1d67, a0.this$, a1.this$, a2)) {}

        jboolean SortField::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::util::Comparator SortField::getBytesComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getBytesComparator_5a7ff2fc]));
        }

        ::org::apache::lucene::search::FieldComparator SortField::getComparator(jint a0, jint a1) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_getComparator_f38637f4], a0, a1));
        }

        ::org::apache::lucene::search::FieldComparatorSource SortField::getComparatorSource() const
        {
          return ::org::apache::lucene::search::FieldComparatorSource(env->callObjectMethod(this$, mids$[mid_getComparatorSource_3ca10de3]));
        }

        ::java::lang::String SortField::getField() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
        }

        ::org::apache::lucene::search::FieldCache$Parser SortField::getParser() const
        {
          return ::org::apache::lucene::search::FieldCache$Parser(env->callObjectMethod(this$, mids$[mid_getParser_6ee4ab67]));
        }

        jboolean SortField::getReverse() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getReverse_54c6a16a]);
        }

        ::org::apache::lucene::search::SortField$Type SortField::getType() const
        {
          return ::org::apache::lucene::search::SortField$Type(env->callObjectMethod(this$, mids$[mid_getType_e5057cd5]));
        }

        jint SortField::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean SortField::needsScores() const
        {
          return env->callBooleanMethod(this$, mids$[mid_needsScores_54c6a16a]);
        }

        SortField SortField::rewrite(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return SortField(env->callObjectMethod(this$, mids$[mid_rewrite_da4dd7ac], a0.this$));
        }

        void SortField::setBytesComparator(const ::java::util::Comparator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBytesComparator_6ffdd545], a0.this$);
        }

        void SortField::setMissingValue(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMissingValue_290588ee], a0.this$);
        }

        ::java::lang::String SortField::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::Object SortField::_get_missingValue() const
        {
          return ::java::lang::Object(env->getObjectField(this$, fids$[fid_missingValue]));
        }

        void SortField::_set_missingValue(const ::java::lang::Object & a0) const
        {
          env->setObjectField(this$, fids$[fid_missingValue], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortField_init_(t_SortField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SortField_equals(t_SortField *self, PyObject *args);
        static PyObject *t_SortField_getBytesComparator(t_SortField *self);
        static PyObject *t_SortField_getComparator(t_SortField *self, PyObject *args);
        static PyObject *t_SortField_getComparatorSource(t_SortField *self);
        static PyObject *t_SortField_getField(t_SortField *self);
        static PyObject *t_SortField_getParser(t_SortField *self);
        static PyObject *t_SortField_getReverse(t_SortField *self);
        static PyObject *t_SortField_getType(t_SortField *self);
        static PyObject *t_SortField_hashCode(t_SortField *self, PyObject *args);
        static PyObject *t_SortField_needsScores(t_SortField *self);
        static PyObject *t_SortField_rewrite(t_SortField *self, PyObject *arg);
        static PyObject *t_SortField_setBytesComparator(t_SortField *self, PyObject *arg);
        static PyObject *t_SortField_setMissingValue(t_SortField *self, PyObject *arg);
        static PyObject *t_SortField_toString(t_SortField *self, PyObject *args);

        static PyObject *t_SortField_get__bytesComparator(t_SortField *self, void *data);
        static int t_SortField_set__bytesComparator(t_SortField *self, PyObject *arg, void *data);
        static PyObject *t_SortField_get__comparatorSource(t_SortField *self, void *data);
        static PyObject *t_SortField_get__field(t_SortField *self, void *data);
        static int t_SortField_set__missingValue(t_SortField *self, PyObject *arg, void *data);
        static PyObject *t_SortField_get__parser(t_SortField *self, void *data);
        static PyObject *t_SortField_get__reverse(t_SortField *self, void *data);
        static PyObject *t_SortField_get__type(t_SortField *self, void *data);
        static PyGetSetDef t_SortField__fields_[] = {
          DECLARE_GETSET_FIELD(t_SortField, bytesComparator),
          DECLARE_GET_FIELD(t_SortField, comparatorSource),
          DECLARE_GET_FIELD(t_SortField, field),
          DECLARE_SET_FIELD(t_SortField, missingValue),
          DECLARE_GET_FIELD(t_SortField, parser),
          DECLARE_GET_FIELD(t_SortField, reverse),
          DECLARE_GET_FIELD(t_SortField, type),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortField__methods_[] = {
          DECLARE_METHOD(t_SortField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortField, equals, METH_VARARGS),
          DECLARE_METHOD(t_SortField, getBytesComparator, METH_NOARGS),
          DECLARE_METHOD(t_SortField, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_SortField, getComparatorSource, METH_NOARGS),
          DECLARE_METHOD(t_SortField, getField, METH_NOARGS),
          DECLARE_METHOD(t_SortField, getParser, METH_NOARGS),
          DECLARE_METHOD(t_SortField, getReverse, METH_NOARGS),
          DECLARE_METHOD(t_SortField, getType, METH_NOARGS),
          DECLARE_METHOD(t_SortField, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_SortField, needsScores, METH_NOARGS),
          DECLARE_METHOD(t_SortField, rewrite, METH_O),
          DECLARE_METHOD(t_SortField, setBytesComparator, METH_O),
          DECLARE_METHOD(t_SortField, setMissingValue, METH_O),
          DECLARE_METHOD(t_SortField, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortField, t_SortField, ::java::lang::Object, SortField, t_SortField_init_, 0, 0, t_SortField__fields_, 0, 0);

        void t_SortField::install(PyObject *module)
        {
          installType(&PY_TYPE(SortField), module, "SortField", 0);
          PyDict_SetItemString(PY_TYPE(SortField).tp_dict, "Type", make_descriptor(&PY_TYPE(SortField$Type)));
        }

        void t_SortField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortField).tp_dict, "class_", make_descriptor(SortField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortField).tp_dict, "wrapfn_", make_descriptor(t_SortField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SortField::initializeClass);
          PyDict_SetItemString(PY_TYPE(SortField).tp_dict, "FIELD_DOC", make_descriptor(t_SortField::wrap_Object(*SortField::FIELD_DOC)));
          PyDict_SetItemString(PY_TYPE(SortField).tp_dict, "FIELD_SCORE", make_descriptor(t_SortField::wrap_Object(*SortField::FIELD_SCORE)));
          PyDict_SetItemString(PY_TYPE(SortField).tp_dict, "STRING_FIRST", make_descriptor(::java::lang::t_Object::wrap_Object(*SortField::STRING_FIRST)));
          PyDict_SetItemString(PY_TYPE(SortField).tp_dict, "STRING_LAST", make_descriptor(::java::lang::t_Object::wrap_Object(*SortField::STRING_LAST)));
        }

        static PyObject *t_SortField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortField::initializeClass, 1)))
            return NULL;
          return t_SortField::wrap_Object(SortField(((t_SortField *) arg)->object.this$));
        }
        static PyObject *t_SortField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortField_init_(t_SortField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldComparatorSource a1((jobject) NULL);
              SortField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::search::FieldComparatorSource::initializeClass, &a0, &a1))
              {
                INT_CALL(object = SortField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
              PyTypeObject **p1;
              SortField object((jobject) NULL);

              if (!parseArgs(args, "sK", ::org::apache::lucene::search::SortField$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_))
              {
                INT_CALL(object = SortField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$Parser a1((jobject) NULL);
              SortField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::search::FieldCache$Parser::initializeClass, &a0, &a1))
              {
                INT_CALL(object = SortField(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldComparatorSource a1((jobject) NULL);
              jboolean a2;
              SortField object((jobject) NULL);

              if (!parseArgs(args, "skZ", ::org::apache::lucene::search::FieldComparatorSource::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = SortField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$Parser a1((jobject) NULL);
              jboolean a2;
              SortField object((jobject) NULL);

              if (!parseArgs(args, "skZ", ::org::apache::lucene::search::FieldCache$Parser::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = SortField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              SortField object((jobject) NULL);

              if (!parseArgs(args, "sKZ", ::org::apache::lucene::search::SortField$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_, &a2))
              {
                INT_CALL(object = SortField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SortField_equals(t_SortField *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(SortField), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_SortField_getBytesComparator(t_SortField *self)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = self->object.getBytesComparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_SortField_getComparator(t_SortField *self, PyObject *args)
        {
          jint a0;
          jint a1;
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.getComparator(a0, a1));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getComparator", args);
          return NULL;
        }

        static PyObject *t_SortField_getComparatorSource(t_SortField *self)
        {
          ::org::apache::lucene::search::FieldComparatorSource result((jobject) NULL);
          OBJ_CALL(result = self->object.getComparatorSource());
          return ::org::apache::lucene::search::t_FieldComparatorSource::wrap_Object(result);
        }

        static PyObject *t_SortField_getField(t_SortField *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getField());
          return j2p(result);
        }

        static PyObject *t_SortField_getParser(t_SortField *self)
        {
          ::org::apache::lucene::search::FieldCache$Parser result((jobject) NULL);
          OBJ_CALL(result = self->object.getParser());
          return ::org::apache::lucene::search::t_FieldCache$Parser::wrap_Object(result);
        }

        static PyObject *t_SortField_getReverse(t_SortField *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getReverse());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_SortField_getType(t_SortField *self)
        {
          ::org::apache::lucene::search::SortField$Type result((jobject) NULL);
          OBJ_CALL(result = self->object.getType());
          return ::org::apache::lucene::search::t_SortField$Type::wrap_Object(result);
        }

        static PyObject *t_SortField_hashCode(t_SortField *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SortField), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_SortField_needsScores(t_SortField *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.needsScores());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_SortField_rewrite(t_SortField *self, PyObject *arg)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          SortField result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return t_SortField::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "rewrite", arg);
          return NULL;
        }

        static PyObject *t_SortField_setBytesComparator(t_SortField *self, PyObject *arg)
        {
          ::java::util::Comparator a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(self->object.setBytesComparator(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBytesComparator", arg);
          return NULL;
        }

        static PyObject *t_SortField_setMissingValue(t_SortField *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(self->object.setMissingValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMissingValue", arg);
          return NULL;
        }

        static PyObject *t_SortField_toString(t_SortField *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(SortField), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_SortField_get__bytesComparator(t_SortField *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getBytesComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }
        static int t_SortField_set__bytesComparator(t_SortField *self, PyObject *arg, void *data)
        {
          {
            ::java::util::Comparator value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::util::Comparator::initializeClass, &value))
            {
              INT_CALL(self->object.setBytesComparator(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bytesComparator", arg);
          return -1;
        }

        static PyObject *t_SortField_get__comparatorSource(t_SortField *self, void *data)
        {
          ::org::apache::lucene::search::FieldComparatorSource value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparatorSource());
          return ::org::apache::lucene::search::t_FieldComparatorSource::wrap_Object(value);
        }

        static PyObject *t_SortField_get__field(t_SortField *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getField());
          return j2p(value);
        }

        static int t_SortField_set__missingValue(t_SortField *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object.setMissingValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "missingValue", arg);
          return -1;
        }

        static PyObject *t_SortField_get__parser(t_SortField *self, void *data)
        {
          ::org::apache::lucene::search::FieldCache$Parser value((jobject) NULL);
          OBJ_CALL(value = self->object.getParser());
          return ::org::apache::lucene::search::t_FieldCache$Parser::wrap_Object(value);
        }

        static PyObject *t_SortField_get__reverse(t_SortField *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getReverse());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_SortField_get__type(t_SortField *self, void *data)
        {
          ::org::apache::lucene::search::SortField$Type value((jobject) NULL);
          OBJ_CALL(value = self->object.getType());
          return ::org::apache::lucene::search::t_SortField$Type::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40PostingsReader::class$ = NULL;
          jmethodID *Lucene40PostingsReader::mids$ = NULL;
          bool Lucene40PostingsReader::live$ = false;

          jclass Lucene40PostingsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40PostingsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b18a8355] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;Ljava/lang/String;)V");
              mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_decodeTerm_0d1f34e8] = env->getMethodID(cls, "decodeTerm", "([JLorg/apache/lucene/store/DataInput;Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Z)V");
              mids$[mid_docs_4cca8a9c] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
              mids$[mid_docsAndPositions_3ae1ca58] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
              mids$[mid_init_0441f0b2] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/store/IndexInput;)V");
              mids$[mid_newTermState_9f93879c] = env->getMethodID(cls, "newTermState", "()Lorg/apache/lucene/codecs/BlockTermState;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40PostingsReader::Lucene40PostingsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::FieldInfos & a1, const ::org::apache::lucene::index::SegmentInfo & a2, const ::org::apache::lucene::store::IOContext & a3, const ::java::lang::String & a4) : ::org::apache::lucene::codecs::PostingsReaderBase(env->newObject(initializeClass, &mids$, mid_init$_b18a8355, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}

          void Lucene40PostingsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
          }

          void Lucene40PostingsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void Lucene40PostingsReader::decodeTerm(const JArray< jlong > & a0, const ::org::apache::lucene::store::DataInput & a1, const ::org::apache::lucene::index::FieldInfo & a2, const ::org::apache::lucene::codecs::BlockTermState & a3, jboolean a4) const
          {
            env->callVoidMethod(this$, mids$[mid_decodeTerm_0d1f34e8], a0.this$, a1.this$, a2.this$, a3.this$, a4);
          }

          ::org::apache::lucene::index::DocsEnum Lucene40PostingsReader::docs(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::BlockTermState & a1, const ::org::apache::lucene::util::Bits & a2, const ::org::apache::lucene::index::DocsEnum & a3, jint a4) const
          {
            return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_4cca8a9c], a0.this$, a1.this$, a2.this$, a3.this$, a4));
          }

          ::org::apache::lucene::index::DocsAndPositionsEnum Lucene40PostingsReader::docsAndPositions(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::BlockTermState & a1, const ::org::apache::lucene::util::Bits & a2, const ::org::apache::lucene::index::DocsAndPositionsEnum & a3, jint a4) const
          {
            return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_3ae1ca58], a0.this$, a1.this$, a2.this$, a3.this$, a4));
          }

          void Lucene40PostingsReader::init(const ::org::apache::lucene::store::IndexInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_init_0441f0b2], a0.this$);
          }

          ::org::apache::lucene::codecs::BlockTermState Lucene40PostingsReader::newTermState() const
          {
            return ::org::apache::lucene::codecs::BlockTermState(env->callObjectMethod(this$, mids$[mid_newTermState_9f93879c]));
          }

          jlong Lucene40PostingsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40PostingsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40PostingsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40PostingsReader_init_(t_Lucene40PostingsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40PostingsReader_checkIntegrity(t_Lucene40PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene40PostingsReader_close(t_Lucene40PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene40PostingsReader_decodeTerm(t_Lucene40PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene40PostingsReader_docs(t_Lucene40PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene40PostingsReader_docsAndPositions(t_Lucene40PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene40PostingsReader_init(t_Lucene40PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene40PostingsReader_newTermState(t_Lucene40PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene40PostingsReader_ramBytesUsed(t_Lucene40PostingsReader *self, PyObject *args);

          static PyMethodDef t_Lucene40PostingsReader__methods_[] = {
            DECLARE_METHOD(t_Lucene40PostingsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40PostingsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40PostingsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsReader, decodeTerm, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsReader, docs, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsReader, docsAndPositions, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsReader, init, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsReader, newTermState, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsReader, ramBytesUsed, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40PostingsReader, t_Lucene40PostingsReader, ::org::apache::lucene::codecs::PostingsReaderBase, Lucene40PostingsReader, t_Lucene40PostingsReader_init_, 0, 0, 0, 0, 0);

          void t_Lucene40PostingsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40PostingsReader), module, "Lucene40PostingsReader", 0);
          }

          void t_Lucene40PostingsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsReader).tp_dict, "class_", make_descriptor(Lucene40PostingsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsReader).tp_dict, "wrapfn_", make_descriptor(t_Lucene40PostingsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40PostingsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40PostingsReader::initializeClass, 1)))
              return NULL;
            return t_Lucene40PostingsReader::wrap_Object(Lucene40PostingsReader(((t_Lucene40PostingsReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene40PostingsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40PostingsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40PostingsReader_init_(t_Lucene40PostingsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a1((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::java::lang::String a4((jobject) NULL);
            Lucene40PostingsReader object((jobject) NULL);

            if (!parseArgs(args, "kkkks", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = Lucene40PostingsReader(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene40PostingsReader_checkIntegrity(t_Lucene40PostingsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40PostingsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_Lucene40PostingsReader_close(t_Lucene40PostingsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40PostingsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene40PostingsReader_decodeTerm(t_Lucene40PostingsReader *self, PyObject *args)
          {
            JArray< jlong > a0((jobject) NULL);
            ::org::apache::lucene::store::DataInput a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfo a2((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a3((jobject) NULL);
            jboolean a4;

            if (!parseArgs(args, "[JkkkZ", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.decodeTerm(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40PostingsReader), (PyObject *) self, "decodeTerm", args, 2);
          }

          static PyObject *t_Lucene40PostingsReader_docs(t_Lucene40PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a1((jobject) NULL);
            ::org::apache::lucene::util::Bits a2((jobject) NULL);
            ::org::apache::lucene::index::DocsEnum a3((jobject) NULL);
            jint a4;
            ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

            if (!parseArgs(args, "kkkkI", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.docs(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsReader), (PyObject *) self, "docs", args, 2);
          }

          static PyObject *t_Lucene40PostingsReader_docsAndPositions(t_Lucene40PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a1((jobject) NULL);
            ::org::apache::lucene::util::Bits a2((jobject) NULL);
            ::org::apache::lucene::index::DocsAndPositionsEnum a3((jobject) NULL);
            jint a4;
            ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

            if (!parseArgs(args, "kkkkI", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsReader), (PyObject *) self, "docsAndPositions", args, 2);
          }

          static PyObject *t_Lucene40PostingsReader_init(t_Lucene40PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.init(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40PostingsReader), (PyObject *) self, "init", args, 2);
          }

          static PyObject *t_Lucene40PostingsReader_newTermState(t_Lucene40PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::BlockTermState result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.newTermState());
              return ::org::apache::lucene::codecs::t_BlockTermState::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsReader), (PyObject *) self, "newTermState", args, 2);
          }

          static PyObject *t_Lucene40PostingsReader_ramBytesUsed(t_Lucene40PostingsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocValues.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocValues::class$ = NULL;
        jmethodID *MultiDocValues::mids$ = NULL;
        bool MultiDocValues::live$ = false;

        jclass MultiDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getBinaryValues_03a34e9d] = env->getStaticMethodID(cls, "getBinaryValues", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getDocsWithField_cb5a3ee0] = env->getStaticMethodID(cls, "getDocsWithField", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getNormValues_e37a26c0] = env->getStaticMethodID(cls, "getNormValues", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getNumericValues_e37a26c0] = env->getStaticMethodID(cls, "getNumericValues", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSortedNumericValues_21f7b92b] = env->getStaticMethodID(cls, "getSortedNumericValues", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSetValues_0b5c63b6] = env->getStaticMethodID(cls, "getSortedSetValues", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getSortedValues_af349b19] = env->getStaticMethodID(cls, "getSortedValues", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::BinaryDocValues MultiDocValues::getBinaryValues(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::BinaryDocValues(env->callStaticObjectMethod(cls, mids$[mid_getBinaryValues_03a34e9d], a0.this$, a1.this$));
        }

        ::org::apache::lucene::util::Bits MultiDocValues::getDocsWithField(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Bits(env->callStaticObjectMethod(cls, mids$[mid_getDocsWithField_cb5a3ee0], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::NumericDocValues MultiDocValues::getNormValues(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_getNormValues_e37a26c0], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::NumericDocValues MultiDocValues::getNumericValues(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_getNumericValues_e37a26c0], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues MultiDocValues::getSortedNumericValues(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_getSortedNumericValues_21f7b92b], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues MultiDocValues::getSortedSetValues(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedSetDocValues(env->callStaticObjectMethod(cls, mids$[mid_getSortedSetValues_0b5c63b6], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedDocValues MultiDocValues::getSortedValues(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedDocValues(env->callStaticObjectMethod(cls, mids$[mid_getSortedValues_af349b19], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/MultiDocValues$MultiSortedSetDocValues.h"
#include "org/apache/lucene/index/MultiDocValues$MultiSortedDocValues.h"
#include "org/apache/lucene/index/MultiDocValues$OrdinalMap.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocValues_getBinaryValues(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiDocValues_getDocsWithField(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiDocValues_getNormValues(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiDocValues_getNumericValues(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiDocValues_getSortedNumericValues(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiDocValues_getSortedSetValues(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiDocValues_getSortedValues(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_MultiDocValues__methods_[] = {
          DECLARE_METHOD(t_MultiDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getBinaryValues, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getDocsWithField, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getNormValues, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getNumericValues, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getSortedNumericValues, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getSortedSetValues, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getSortedValues, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiDocValues, t_MultiDocValues, ::java::lang::Object, MultiDocValues, abstract_init, 0, 0, 0, 0, 0);

        void t_MultiDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocValues), module, "MultiDocValues", 0);
          PyDict_SetItemString(PY_TYPE(MultiDocValues).tp_dict, "MultiSortedSetDocValues", make_descriptor(&PY_TYPE(MultiDocValues$MultiSortedSetDocValues)));
          PyDict_SetItemString(PY_TYPE(MultiDocValues).tp_dict, "MultiSortedDocValues", make_descriptor(&PY_TYPE(MultiDocValues$MultiSortedDocValues)));
          PyDict_SetItemString(PY_TYPE(MultiDocValues).tp_dict, "OrdinalMap", make_descriptor(&PY_TYPE(MultiDocValues$OrdinalMap)));
        }

        void t_MultiDocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiDocValues).tp_dict, "class_", make_descriptor(MultiDocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiDocValues).tp_dict, "wrapfn_", make_descriptor(t_MultiDocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocValues::initializeClass, 1)))
            return NULL;
          return t_MultiDocValues::wrap_Object(MultiDocValues(((t_MultiDocValues *) arg)->object.this$));
        }
        static PyObject *t_MultiDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiDocValues_getBinaryValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getBinaryValues(a0, a1));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getBinaryValues", args);
          return NULL;
        }

        static PyObject *t_MultiDocValues_getDocsWithField(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getDocsWithField(a0, a1));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getDocsWithField", args);
          return NULL;
        }

        static PyObject *t_MultiDocValues_getNormValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getNormValues(a0, a1));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getNormValues", args);
          return NULL;
        }

        static PyObject *t_MultiDocValues_getNumericValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getNumericValues(a0, a1));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getNumericValues", args);
          return NULL;
        }

        static PyObject *t_MultiDocValues_getSortedNumericValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getSortedNumericValues(a0, a1));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSortedNumericValues", args);
          return NULL;
        }

        static PyObject *t_MultiDocValues_getSortedSetValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getSortedSetValues(a0, a1));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSortedSetValues", args);
          return NULL;
        }

        static PyObject *t_MultiDocValues_getSortedValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getSortedValues(a0, a1));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSortedValues", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicStemFilter::class$ = NULL;
          jmethodID *ArabicStemFilter::mids$ = NULL;
          bool ArabicStemFilter::live$ = false;

          jclass ArabicStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicStemFilter::ArabicStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean ArabicStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicStemFilter_init_(t_ArabicStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicStemFilter_incrementToken(t_ArabicStemFilter *self, PyObject *args);

          static PyMethodDef t_ArabicStemFilter__methods_[] = {
            DECLARE_METHOD(t_ArabicStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicStemFilter, t_ArabicStemFilter, ::org::apache::lucene::analysis::TokenFilter, ArabicStemFilter, t_ArabicStemFilter_init_, 0, 0, 0, 0, 0);

          void t_ArabicStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicStemFilter), module, "ArabicStemFilter", 0);
          }

          void t_ArabicStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicStemFilter).tp_dict, "class_", make_descriptor(ArabicStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicStemFilter).tp_dict, "wrapfn_", make_descriptor(t_ArabicStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ArabicStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicStemFilter::initializeClass, 1)))
              return NULL;
            return t_ArabicStemFilter::wrap_Object(ArabicStemFilter(((t_ArabicStemFilter *) arg)->object.this$));
          }
          static PyObject *t_ArabicStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicStemFilter_init_(t_ArabicStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ArabicStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ArabicStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArabicStemFilter_incrementToken(t_ArabicStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ArabicStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/CodepointCountFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/miscellaneous/CodepointCountFilter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *CodepointCountFilterFactory::class$ = NULL;
          jmethodID *CodepointCountFilterFactory::mids$ = NULL;
          bool CodepointCountFilterFactory::live$ = false;
          ::java::lang::String *CodepointCountFilterFactory::MAX_KEY = NULL;
          ::java::lang::String *CodepointCountFilterFactory::MIN_KEY = NULL;

          jclass CodepointCountFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/CodepointCountFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_0d6a0318] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/CodepointCountFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MAX_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MAX_KEY", "Ljava/lang/String;"));
              MIN_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MIN_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CodepointCountFilterFactory::CodepointCountFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::CodepointCountFilter CodepointCountFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::CodepointCountFilter(env->callObjectMethod(this$, mids$[mid_create_0d6a0318], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_CodepointCountFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CodepointCountFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CodepointCountFilterFactory_init_(t_CodepointCountFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CodepointCountFilterFactory_create(t_CodepointCountFilterFactory *self, PyObject *args);

          static PyMethodDef t_CodepointCountFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CodepointCountFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CodepointCountFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CodepointCountFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CodepointCountFilterFactory, t_CodepointCountFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, CodepointCountFilterFactory, t_CodepointCountFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_CodepointCountFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CodepointCountFilterFactory), module, "CodepointCountFilterFactory", 0);
          }

          void t_CodepointCountFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CodepointCountFilterFactory).tp_dict, "class_", make_descriptor(CodepointCountFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CodepointCountFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CodepointCountFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CodepointCountFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CodepointCountFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(CodepointCountFilterFactory).tp_dict, "MAX_KEY", make_descriptor(j2p(*CodepointCountFilterFactory::MAX_KEY)));
            PyDict_SetItemString(PY_TYPE(CodepointCountFilterFactory).tp_dict, "MIN_KEY", make_descriptor(j2p(*CodepointCountFilterFactory::MIN_KEY)));
          }

          static PyObject *t_CodepointCountFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CodepointCountFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CodepointCountFilterFactory::wrap_Object(CodepointCountFilterFactory(((t_CodepointCountFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CodepointCountFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CodepointCountFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CodepointCountFilterFactory_init_(t_CodepointCountFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CodepointCountFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CodepointCountFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CodepointCountFilterFactory_create(t_CodepointCountFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::CodepointCountFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_CodepointCountFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CodepointCountFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanMinimalStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanMinimalStemFilter::class$ = NULL;
          jmethodID *GermanMinimalStemFilter::mids$ = NULL;
          bool GermanMinimalStemFilter::live$ = false;

          jclass GermanMinimalStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanMinimalStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanMinimalStemFilter::GermanMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean GermanMinimalStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanMinimalStemFilter_init_(t_GermanMinimalStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanMinimalStemFilter_incrementToken(t_GermanMinimalStemFilter *self, PyObject *args);

          static PyMethodDef t_GermanMinimalStemFilter__methods_[] = {
            DECLARE_METHOD(t_GermanMinimalStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanMinimalStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanMinimalStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanMinimalStemFilter, t_GermanMinimalStemFilter, ::org::apache::lucene::analysis::TokenFilter, GermanMinimalStemFilter, t_GermanMinimalStemFilter_init_, 0, 0, 0, 0, 0);

          void t_GermanMinimalStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanMinimalStemFilter), module, "GermanMinimalStemFilter", 0);
          }

          void t_GermanMinimalStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemFilter).tp_dict, "class_", make_descriptor(GermanMinimalStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemFilter).tp_dict, "wrapfn_", make_descriptor(t_GermanMinimalStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanMinimalStemFilter::initializeClass, 1)))
              return NULL;
            return t_GermanMinimalStemFilter::wrap_Object(GermanMinimalStemFilter(((t_GermanMinimalStemFilter *) arg)->object.this$));
          }
          static PyObject *t_GermanMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanMinimalStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanMinimalStemFilter_init_(t_GermanMinimalStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GermanMinimalStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GermanMinimalStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanMinimalStemFilter_incrementToken(t_GermanMinimalStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(GermanMinimalStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/SwedishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *SwedishStemmer::class$ = NULL;
        jmethodID *SwedishStemmer::mids$ = NULL;
        bool SwedishStemmer::live$ = false;

        jclass SwedishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/SwedishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SwedishStemmer::SwedishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean SwedishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint SwedishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean SwedishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_SwedishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SwedishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SwedishStemmer_init_(t_SwedishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SwedishStemmer_equals(t_SwedishStemmer *self, PyObject *args);
        static PyObject *t_SwedishStemmer_hashCode(t_SwedishStemmer *self, PyObject *args);
        static PyObject *t_SwedishStemmer_stem(t_SwedishStemmer *self, PyObject *args);

        static PyMethodDef t_SwedishStemmer__methods_[] = {
          DECLARE_METHOD(t_SwedishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SwedishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SwedishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_SwedishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_SwedishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SwedishStemmer, t_SwedishStemmer, ::org::tartarus::snowball::SnowballProgram, SwedishStemmer, t_SwedishStemmer_init_, 0, 0, 0, 0, 0);

        void t_SwedishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(SwedishStemmer), module, "SwedishStemmer", 0);
        }

        void t_SwedishStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SwedishStemmer).tp_dict, "class_", make_descriptor(SwedishStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SwedishStemmer).tp_dict, "wrapfn_", make_descriptor(t_SwedishStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SwedishStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SwedishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SwedishStemmer::initializeClass, 1)))
            return NULL;
          return t_SwedishStemmer::wrap_Object(SwedishStemmer(((t_SwedishStemmer *) arg)->object.this$));
        }
        static PyObject *t_SwedishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SwedishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SwedishStemmer_init_(t_SwedishStemmer *self, PyObject *args, PyObject *kwds)
        {
          SwedishStemmer object((jobject) NULL);

          INT_CALL(object = SwedishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_SwedishStemmer_equals(t_SwedishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(SwedishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_SwedishStemmer_hashCode(t_SwedishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SwedishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_SwedishStemmer_stem(t_SwedishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(SwedishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKWidthFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKWidthFilter::class$ = NULL;
          jmethodID *CJKWidthFilter::mids$ = NULL;
          bool CJKWidthFilter::live$ = false;

          jclass CJKWidthFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKWidthFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKWidthFilter::CJKWidthFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean CJKWidthFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKWidthFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKWidthFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKWidthFilter_init_(t_CJKWidthFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKWidthFilter_incrementToken(t_CJKWidthFilter *self, PyObject *args);

          static PyMethodDef t_CJKWidthFilter__methods_[] = {
            DECLARE_METHOD(t_CJKWidthFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKWidthFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKWidthFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CJKWidthFilter, t_CJKWidthFilter, ::org::apache::lucene::analysis::TokenFilter, CJKWidthFilter, t_CJKWidthFilter_init_, 0, 0, 0, 0, 0);

          void t_CJKWidthFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKWidthFilter), module, "CJKWidthFilter", 0);
          }

          void t_CJKWidthFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CJKWidthFilter).tp_dict, "class_", make_descriptor(CJKWidthFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CJKWidthFilter).tp_dict, "wrapfn_", make_descriptor(t_CJKWidthFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CJKWidthFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CJKWidthFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKWidthFilter::initializeClass, 1)))
              return NULL;
            return t_CJKWidthFilter::wrap_Object(CJKWidthFilter(((t_CJKWidthFilter *) arg)->object.this$));
          }
          static PyObject *t_CJKWidthFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKWidthFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKWidthFilter_init_(t_CJKWidthFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            CJKWidthFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = CJKWidthFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKWidthFilter_incrementToken(t_CJKWidthFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CJKWidthFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/SmallFloat.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *SmallFloat::class$ = NULL;
        jmethodID *SmallFloat::mids$ = NULL;
        bool SmallFloat::live$ = false;

        jclass SmallFloat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/SmallFloat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_byte315ToFloat_b2271697] = env->getStaticMethodID(cls, "byte315ToFloat", "(B)F");
            mids$[mid_byte52ToFloat_b2271697] = env->getStaticMethodID(cls, "byte52ToFloat", "(B)F");
            mids$[mid_byteToFloat_277ea3d7] = env->getStaticMethodID(cls, "byteToFloat", "(BII)F");
            mids$[mid_floatToByte_c388dc8f] = env->getStaticMethodID(cls, "floatToByte", "(FII)B");
            mids$[mid_floatToByte315_06298cbf] = env->getStaticMethodID(cls, "floatToByte315", "(F)B");
            mids$[mid_floatToByte52_06298cbf] = env->getStaticMethodID(cls, "floatToByte52", "(F)B");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jfloat SmallFloat::byte315ToFloat(jbyte a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticFloatMethod(cls, mids$[mid_byte315ToFloat_b2271697], a0);
        }

        jfloat SmallFloat::byte52ToFloat(jbyte a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticFloatMethod(cls, mids$[mid_byte52ToFloat_b2271697], a0);
        }

        jfloat SmallFloat::byteToFloat(jbyte a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticFloatMethod(cls, mids$[mid_byteToFloat_277ea3d7], a0, a1, a2);
        }

        jbyte SmallFloat::floatToByte(jfloat a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticByteMethod(cls, mids$[mid_floatToByte_c388dc8f], a0, a1, a2);
        }

        jbyte SmallFloat::floatToByte315(jfloat a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticByteMethod(cls, mids$[mid_floatToByte315_06298cbf], a0);
        }

        jbyte SmallFloat::floatToByte52(jfloat a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticByteMethod(cls, mids$[mid_floatToByte52_06298cbf], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_SmallFloat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SmallFloat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SmallFloat_byte315ToFloat(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SmallFloat_byte52ToFloat(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SmallFloat_byteToFloat(PyTypeObject *type, PyObject *args);
        static PyObject *t_SmallFloat_floatToByte(PyTypeObject *type, PyObject *args);
        static PyObject *t_SmallFloat_floatToByte315(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SmallFloat_floatToByte52(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_SmallFloat__methods_[] = {
          DECLARE_METHOD(t_SmallFloat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, byte315ToFloat, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, byte52ToFloat, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, byteToFloat, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, floatToByte, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, floatToByte315, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, floatToByte52, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SmallFloat, t_SmallFloat, ::java::lang::Object, SmallFloat, abstract_init, 0, 0, 0, 0, 0);

        void t_SmallFloat::install(PyObject *module)
        {
          installType(&PY_TYPE(SmallFloat), module, "SmallFloat", 0);
        }

        void t_SmallFloat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SmallFloat).tp_dict, "class_", make_descriptor(SmallFloat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SmallFloat).tp_dict, "wrapfn_", make_descriptor(t_SmallFloat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SmallFloat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SmallFloat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SmallFloat::initializeClass, 1)))
            return NULL;
          return t_SmallFloat::wrap_Object(SmallFloat(((t_SmallFloat *) arg)->object.this$));
        }
        static PyObject *t_SmallFloat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SmallFloat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SmallFloat_byte315ToFloat(PyTypeObject *type, PyObject *arg)
        {
          jbyte a0;
          jfloat result;

          if (!parseArg(arg, "B", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SmallFloat::byte315ToFloat(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "byte315ToFloat", arg);
          return NULL;
        }

        static PyObject *t_SmallFloat_byte52ToFloat(PyTypeObject *type, PyObject *arg)
        {
          jbyte a0;
          jfloat result;

          if (!parseArg(arg, "B", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SmallFloat::byte52ToFloat(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "byte52ToFloat", arg);
          return NULL;
        }

        static PyObject *t_SmallFloat_byteToFloat(PyTypeObject *type, PyObject *args)
        {
          jbyte a0;
          jint a1;
          jint a2;
          jfloat result;

          if (!parseArgs(args, "BII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SmallFloat::byteToFloat(a0, a1, a2));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "byteToFloat", args);
          return NULL;
        }

        static PyObject *t_SmallFloat_floatToByte(PyTypeObject *type, PyObject *args)
        {
          jfloat a0;
          jint a1;
          jint a2;
          jbyte result;

          if (!parseArgs(args, "FII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SmallFloat::floatToByte(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "floatToByte", args);
          return NULL;
        }

        static PyObject *t_SmallFloat_floatToByte315(PyTypeObject *type, PyObject *arg)
        {
          jfloat a0;
          jbyte result;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SmallFloat::floatToByte315(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "floatToByte315", arg);
          return NULL;
        }

        static PyObject *t_SmallFloat_floatToByte52(PyTypeObject *type, PyObject *arg)
        {
          jfloat a0;
          jbyte result;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SmallFloat::floatToByte52(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "floatToByte52", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterFactory.h"
#include "org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *NumericPayloadTokenFilterFactory::class$ = NULL;
          jmethodID *NumericPayloadTokenFilterFactory::mids$ = NULL;
          bool NumericPayloadTokenFilterFactory::live$ = false;

          jclass NumericPayloadTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_21f7b18d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/payloads/NumericPayloadTokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NumericPayloadTokenFilterFactory::NumericPayloadTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::payloads::NumericPayloadTokenFilter NumericPayloadTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::payloads::NumericPayloadTokenFilter(env->callObjectMethod(this$, mids$[mid_create_21f7b18d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_NumericPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NumericPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NumericPayloadTokenFilterFactory_init_(t_NumericPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NumericPayloadTokenFilterFactory_create(t_NumericPayloadTokenFilterFactory *self, PyObject *args);

          static PyMethodDef t_NumericPayloadTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_NumericPayloadTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NumericPayloadTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NumericPayloadTokenFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NumericPayloadTokenFilterFactory, t_NumericPayloadTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, NumericPayloadTokenFilterFactory, t_NumericPayloadTokenFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_NumericPayloadTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(NumericPayloadTokenFilterFactory), module, "NumericPayloadTokenFilterFactory", 0);
          }

          void t_NumericPayloadTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NumericPayloadTokenFilterFactory).tp_dict, "class_", make_descriptor(NumericPayloadTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NumericPayloadTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_NumericPayloadTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NumericPayloadTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NumericPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NumericPayloadTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_NumericPayloadTokenFilterFactory::wrap_Object(NumericPayloadTokenFilterFactory(((t_NumericPayloadTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_NumericPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NumericPayloadTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NumericPayloadTokenFilterFactory_init_(t_NumericPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            NumericPayloadTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = NumericPayloadTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NumericPayloadTokenFilterFactory_create(t_NumericPayloadTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::payloads::NumericPayloadTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::payloads::t_NumericPayloadTokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NumericPayloadTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OfflineSorter$ByteSequencesWriter.h"
#include "java/io/Closeable.h"
#include "java/io/DataOutput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/io/File.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OfflineSorter$ByteSequencesWriter::class$ = NULL;
        jmethodID *OfflineSorter$ByteSequencesWriter::mids$ = NULL;
        bool OfflineSorter$ByteSequencesWriter::live$ = false;

        jclass OfflineSorter$ByteSequencesWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OfflineSorter$ByteSequencesWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
            mids$[mid_init$_cfb051e6] = env->getMethodID(cls, "<init>", "(Ljava/io/DataOutput;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_write_7bc03dc4] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_write_49b4f12b] = env->getMethodID(cls, "write", "([B)V");
            mids$[mid_write_86f4435f] = env->getMethodID(cls, "write", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OfflineSorter$ByteSequencesWriter::OfflineSorter$ByteSequencesWriter(const ::java::io::File & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

        OfflineSorter$ByteSequencesWriter::OfflineSorter$ByteSequencesWriter(const ::java::io::DataOutput & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cfb051e6, a0.this$)) {}

        void OfflineSorter$ByteSequencesWriter::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void OfflineSorter$ByteSequencesWriter::write(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_write_7bc03dc4], a0.this$);
        }

        void OfflineSorter$ByteSequencesWriter::write(const JArray< jbyte > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_write_49b4f12b], a0.this$);
        }

        void OfflineSorter$ByteSequencesWriter::write(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_write_86f4435f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OfflineSorter$ByteSequencesWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OfflineSorter$ByteSequencesWriter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OfflineSorter$ByteSequencesWriter_init_(t_OfflineSorter$ByteSequencesWriter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OfflineSorter$ByteSequencesWriter_close(t_OfflineSorter$ByteSequencesWriter *self);
        static PyObject *t_OfflineSorter$ByteSequencesWriter_write(t_OfflineSorter$ByteSequencesWriter *self, PyObject *args);

        static PyMethodDef t_OfflineSorter$ByteSequencesWriter__methods_[] = {
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesWriter, close, METH_NOARGS),
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesWriter, write, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OfflineSorter$ByteSequencesWriter, t_OfflineSorter$ByteSequencesWriter, ::java::lang::Object, OfflineSorter$ByteSequencesWriter, t_OfflineSorter$ByteSequencesWriter_init_, 0, 0, 0, 0, 0);

        void t_OfflineSorter$ByteSequencesWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(OfflineSorter$ByteSequencesWriter), module, "OfflineSorter$ByteSequencesWriter", 0);
        }

        void t_OfflineSorter$ByteSequencesWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OfflineSorter$ByteSequencesWriter).tp_dict, "class_", make_descriptor(OfflineSorter$ByteSequencesWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OfflineSorter$ByteSequencesWriter).tp_dict, "wrapfn_", make_descriptor(t_OfflineSorter$ByteSequencesWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OfflineSorter$ByteSequencesWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OfflineSorter$ByteSequencesWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OfflineSorter$ByteSequencesWriter::initializeClass, 1)))
            return NULL;
          return t_OfflineSorter$ByteSequencesWriter::wrap_Object(OfflineSorter$ByteSequencesWriter(((t_OfflineSorter$ByteSequencesWriter *) arg)->object.this$));
        }
        static PyObject *t_OfflineSorter$ByteSequencesWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OfflineSorter$ByteSequencesWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OfflineSorter$ByteSequencesWriter_init_(t_OfflineSorter$ByteSequencesWriter *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::File a0((jobject) NULL);
              OfflineSorter$ByteSequencesWriter object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                INT_CALL(object = OfflineSorter$ByteSequencesWriter(a0));
                self->object = object;
                break;
              }
            }
            {
              ::java::io::DataOutput a0((jobject) NULL);
              OfflineSorter$ByteSequencesWriter object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::DataOutput::initializeClass, &a0))
              {
                INT_CALL(object = OfflineSorter$ByteSequencesWriter(a0));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OfflineSorter$ByteSequencesWriter_close(t_OfflineSorter$ByteSequencesWriter *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_OfflineSorter$ByteSequencesWriter_write(t_OfflineSorter$ByteSequencesWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.write(a0));
                Py_RETURN_NONE;
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(self->object.write(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.write(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "write", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharacterUtils.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/util/CharacterUtils$CharacterBuffer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharacterUtils::class$ = NULL;
          jmethodID *CharacterUtils::mids$ = NULL;
          bool CharacterUtils::live$ = false;

          jclass CharacterUtils::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharacterUtils");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_codePointAt_2fbf15bf] = env->getMethodID(cls, "codePointAt", "(Ljava/lang/CharSequence;I)I");
              mids$[mid_codePointAt_6f0bb349] = env->getMethodID(cls, "codePointAt", "([CII)I");
              mids$[mid_codePointCount_a8afc655] = env->getMethodID(cls, "codePointCount", "(Ljava/lang/CharSequence;)I");
              mids$[mid_fill_4a603207] = env->getMethodID(cls, "fill", "(Lorg/apache/lucene/analysis/util/CharacterUtils$CharacterBuffer;Ljava/io/Reader;)Z");
              mids$[mid_fill_907fec5b] = env->getMethodID(cls, "fill", "(Lorg/apache/lucene/analysis/util/CharacterUtils$CharacterBuffer;Ljava/io/Reader;I)Z");
              mids$[mid_getInstance_2fcca481] = env->getStaticMethodID(cls, "getInstance", "()Lorg/apache/lucene/analysis/util/CharacterUtils;");
              mids$[mid_getInstance_c0e3b02e] = env->getStaticMethodID(cls, "getInstance", "(Lorg/apache/lucene/util/Version;)Lorg/apache/lucene/analysis/util/CharacterUtils;");
              mids$[mid_getJava4Instance_2fcca481] = env->getStaticMethodID(cls, "getJava4Instance", "()Lorg/apache/lucene/analysis/util/CharacterUtils;");
              mids$[mid_newCharacterBuffer_531f8606] = env->getStaticMethodID(cls, "newCharacterBuffer", "(I)Lorg/apache/lucene/analysis/util/CharacterUtils$CharacterBuffer;");
              mids$[mid_offsetByCodePoints_f453ace9] = env->getMethodID(cls, "offsetByCodePoints", "([CIIII)I");
              mids$[mid_toChars_4c08f211] = env->getMethodID(cls, "toChars", "([III[CI)I");
              mids$[mid_toCodePoints_625a1e21] = env->getMethodID(cls, "toCodePoints", "([CII[II)I");
              mids$[mid_toLowerCase_6f0bb356] = env->getMethodID(cls, "toLowerCase", "([CII)V");
              mids$[mid_toUpperCase_6f0bb356] = env->getMethodID(cls, "toUpperCase", "([CII)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharacterUtils::CharacterUtils() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint CharacterUtils::codePointAt(const ::java::lang::CharSequence & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_codePointAt_2fbf15bf], a0.this$, a1);
          }

          jint CharacterUtils::codePointAt(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callIntMethod(this$, mids$[mid_codePointAt_6f0bb349], a0.this$, a1, a2);
          }

          jint CharacterUtils::codePointCount(const ::java::lang::CharSequence & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_codePointCount_a8afc655], a0.this$);
          }

          jboolean CharacterUtils::fill(const ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer & a0, const ::java::io::Reader & a1) const
          {
            return env->callBooleanMethod(this$, mids$[mid_fill_4a603207], a0.this$, a1.this$);
          }

          jboolean CharacterUtils::fill(const ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer & a0, const ::java::io::Reader & a1, jint a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_fill_907fec5b], a0.this$, a1.this$, a2);
          }

          CharacterUtils CharacterUtils::getInstance()
          {
            jclass cls = env->getClass(initializeClass);
            return CharacterUtils(env->callStaticObjectMethod(cls, mids$[mid_getInstance_2fcca481]));
          }

          CharacterUtils CharacterUtils::getInstance(const ::org::apache::lucene::util::Version & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return CharacterUtils(env->callStaticObjectMethod(cls, mids$[mid_getInstance_c0e3b02e], a0.this$));
          }

          CharacterUtils CharacterUtils::getJava4Instance()
          {
            jclass cls = env->getClass(initializeClass);
            return CharacterUtils(env->callStaticObjectMethod(cls, mids$[mid_getJava4Instance_2fcca481]));
          }

          ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer CharacterUtils::newCharacterBuffer(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer(env->callStaticObjectMethod(cls, mids$[mid_newCharacterBuffer_531f8606], a0));
          }

          jint CharacterUtils::offsetByCodePoints(const JArray< jchar > & a0, jint a1, jint a2, jint a3, jint a4) const
          {
            return env->callIntMethod(this$, mids$[mid_offsetByCodePoints_f453ace9], a0.this$, a1, a2, a3, a4);
          }

          jint CharacterUtils::toChars(const JArray< jint > & a0, jint a1, jint a2, const JArray< jchar > & a3, jint a4) const
          {
            return env->callIntMethod(this$, mids$[mid_toChars_4c08f211], a0.this$, a1, a2, a3.this$, a4);
          }

          jint CharacterUtils::toCodePoints(const JArray< jchar > & a0, jint a1, jint a2, const JArray< jint > & a3, jint a4) const
          {
            return env->callIntMethod(this$, mids$[mid_toCodePoints_625a1e21], a0.this$, a1, a2, a3.this$, a4);
          }

          void CharacterUtils::toLowerCase(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_toLowerCase_6f0bb356], a0.this$, a1, a2);
          }

          void CharacterUtils::toUpperCase(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_toUpperCase_6f0bb356], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharacterUtils_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharacterUtils_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CharacterUtils_init_(t_CharacterUtils *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CharacterUtils_codePointAt(t_CharacterUtils *self, PyObject *args);
          static PyObject *t_CharacterUtils_codePointCount(t_CharacterUtils *self, PyObject *arg);
          static PyObject *t_CharacterUtils_fill(t_CharacterUtils *self, PyObject *args);
          static PyObject *t_CharacterUtils_getInstance(PyTypeObject *type, PyObject *args);
          static PyObject *t_CharacterUtils_getJava4Instance(PyTypeObject *type);
          static PyObject *t_CharacterUtils_newCharacterBuffer(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharacterUtils_offsetByCodePoints(t_CharacterUtils *self, PyObject *args);
          static PyObject *t_CharacterUtils_toChars(t_CharacterUtils *self, PyObject *args);
          static PyObject *t_CharacterUtils_toCodePoints(t_CharacterUtils *self, PyObject *args);
          static PyObject *t_CharacterUtils_toLowerCase(t_CharacterUtils *self, PyObject *args);
          static PyObject *t_CharacterUtils_toUpperCase(t_CharacterUtils *self, PyObject *args);
          static PyObject *t_CharacterUtils_get__instance(t_CharacterUtils *self, void *data);
          static PyObject *t_CharacterUtils_get__java4Instance(t_CharacterUtils *self, void *data);
          static PyGetSetDef t_CharacterUtils__fields_[] = {
            DECLARE_GET_FIELD(t_CharacterUtils, instance),
            DECLARE_GET_FIELD(t_CharacterUtils, java4Instance),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharacterUtils__methods_[] = {
            DECLARE_METHOD(t_CharacterUtils, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharacterUtils, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharacterUtils, codePointAt, METH_VARARGS),
            DECLARE_METHOD(t_CharacterUtils, codePointCount, METH_O),
            DECLARE_METHOD(t_CharacterUtils, fill, METH_VARARGS),
            DECLARE_METHOD(t_CharacterUtils, getInstance, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_CharacterUtils, getJava4Instance, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_CharacterUtils, newCharacterBuffer, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharacterUtils, offsetByCodePoints, METH_VARARGS),
            DECLARE_METHOD(t_CharacterUtils, toChars, METH_VARARGS),
            DECLARE_METHOD(t_CharacterUtils, toCodePoints, METH_VARARGS),
            DECLARE_METHOD(t_CharacterUtils, toLowerCase, METH_VARARGS),
            DECLARE_METHOD(t_CharacterUtils, toUpperCase, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharacterUtils, t_CharacterUtils, ::java::lang::Object, CharacterUtils, t_CharacterUtils_init_, 0, 0, t_CharacterUtils__fields_, 0, 0);

          void t_CharacterUtils::install(PyObject *module)
          {
            installType(&PY_TYPE(CharacterUtils), module, "CharacterUtils", 0);
            PyDict_SetItemString(PY_TYPE(CharacterUtils).tp_dict, "CharacterBuffer", make_descriptor(&PY_TYPE(CharacterUtils$CharacterBuffer)));
          }

          void t_CharacterUtils::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharacterUtils).tp_dict, "class_", make_descriptor(CharacterUtils::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharacterUtils).tp_dict, "wrapfn_", make_descriptor(t_CharacterUtils::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharacterUtils).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharacterUtils_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharacterUtils::initializeClass, 1)))
              return NULL;
            return t_CharacterUtils::wrap_Object(CharacterUtils(((t_CharacterUtils *) arg)->object.this$));
          }
          static PyObject *t_CharacterUtils_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharacterUtils::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CharacterUtils_init_(t_CharacterUtils *self, PyObject *args, PyObject *kwds)
          {
            CharacterUtils object((jobject) NULL);

            INT_CALL(object = CharacterUtils());
            self->object = object;

            return 0;
          }

          static PyObject *t_CharacterUtils_codePointAt(t_CharacterUtils *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jint a1;
                jint result;

                if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                {
                  OBJ_CALL(result = self->object.codePointAt(a0, a1));
                  return PyInt_FromLong((long) result);
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jint result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.codePointAt(a0, a1, a2));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "codePointAt", args);
            return NULL;
          }

          static PyObject *t_CharacterUtils_codePointCount(t_CharacterUtils *self, PyObject *arg)
          {
            ::java::lang::CharSequence a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
            {
              OBJ_CALL(result = self->object.codePointCount(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "codePointCount", arg);
            return NULL;
          }

          static PyObject *t_CharacterUtils_fill(t_CharacterUtils *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.fill(a0, a1));
                  Py_RETURN_BOOL(result);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                jboolean result;

                if (!parseArgs(args, "kkI", ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.fill(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "fill", args);
            return NULL;
          }

          static PyObject *t_CharacterUtils_getInstance(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                CharacterUtils result((jobject) NULL);
                OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharacterUtils::getInstance());
                return t_CharacterUtils::wrap_Object(result);
              }
              break;
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                CharacterUtils result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharacterUtils::getInstance(a0));
                  return t_CharacterUtils::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getInstance", args);
            return NULL;
          }

          static PyObject *t_CharacterUtils_getJava4Instance(PyTypeObject *type)
          {
            CharacterUtils result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharacterUtils::getJava4Instance());
            return t_CharacterUtils::wrap_Object(result);
          }

          static PyObject *t_CharacterUtils_newCharacterBuffer(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharacterUtils::newCharacterBuffer(a0));
              return ::org::apache::lucene::analysis::util::t_CharacterUtils$CharacterBuffer::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "newCharacterBuffer", arg);
            return NULL;
          }

          static PyObject *t_CharacterUtils_offsetByCodePoints(t_CharacterUtils *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            jint a3;
            jint a4;
            jint result;

            if (!parseArgs(args, "[CIIII", &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.offsetByCodePoints(a0, a1, a2, a3, a4));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "offsetByCodePoints", args);
            return NULL;
          }

          static PyObject *t_CharacterUtils_toChars(t_CharacterUtils *self, PyObject *args)
          {
            JArray< jint > a0((jobject) NULL);
            jint a1;
            jint a2;
            JArray< jchar > a3((jobject) NULL);
            jint a4;
            jint result;

            if (!parseArgs(args, "[III[CI", &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.toChars(a0, a1, a2, a3, a4));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "toChars", args);
            return NULL;
          }

          static PyObject *t_CharacterUtils_toCodePoints(t_CharacterUtils *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            JArray< jint > a3((jobject) NULL);
            jint a4;
            jint result;

            if (!parseArgs(args, "[CII[II", &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.toCodePoints(a0, a1, a2, a3, a4));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "toCodePoints", args);
            return NULL;
          }

          static PyObject *t_CharacterUtils_toLowerCase(t_CharacterUtils *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.toLowerCase(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "toLowerCase", args);
            return NULL;
          }

          static PyObject *t_CharacterUtils_toUpperCase(t_CharacterUtils *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.toUpperCase(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "toUpperCase", args);
            return NULL;
          }

          static PyObject *t_CharacterUtils_get__instance(t_CharacterUtils *self, void *data)
          {
            CharacterUtils value((jobject) NULL);
            OBJ_CALL(value = self->object.getInstance());
            return t_CharacterUtils::wrap_Object(value);
          }

          static PyObject *t_CharacterUtils_get__java4Instance(t_CharacterUtils *self, void *data)
          {
            CharacterUtils value((jobject) NULL);
            OBJ_CALL(value = self->object.getJava4Instance());
            return t_CharacterUtils::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LMSimilarity.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$CollectionModel.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LMSimilarity::class$ = NULL;
          jmethodID *LMSimilarity::mids$ = NULL;
          bool LMSimilarity::live$ = false;

          jclass LMSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LMSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_fb5c3f12] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/LMSimilarity$CollectionModel;)V");
              mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_explain_347d95f8] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Explanation;Lorg/apache/lucene/search/similarities/BasicStats;IFF)V");
              mids$[mid_newStats_5129800c] = env->getMethodID(cls, "newStats", "(Ljava/lang/String;F)Lorg/apache/lucene/search/similarities/BasicStats;");
              mids$[mid_fillBasicStats_c856a532] = env->getMethodID(cls, "fillBasicStats", "(Lorg/apache/lucene/search/similarities/BasicStats;Lorg/apache/lucene/search/CollectionStatistics;Lorg/apache/lucene/search/TermStatistics;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LMSimilarity::LMSimilarity() : ::org::apache::lucene::search::similarities::SimilarityBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          LMSimilarity::LMSimilarity(const ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel & a0) : ::org::apache::lucene::search::similarities::SimilarityBase(env->newObject(initializeClass, &mids$, mid_init$_fb5c3f12, a0.this$)) {}

          ::java::lang::String LMSimilarity::getName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
          }

          ::java::lang::String LMSimilarity::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$DefaultCollectionModel.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$LMStats.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LMSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LMSimilarity_init_(t_LMSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LMSimilarity_getName(t_LMSimilarity *self);
          static PyObject *t_LMSimilarity_toString(t_LMSimilarity *self, PyObject *args);
          static PyObject *t_LMSimilarity_get__name(t_LMSimilarity *self, void *data);
          static PyGetSetDef t_LMSimilarity__fields_[] = {
            DECLARE_GET_FIELD(t_LMSimilarity, name),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LMSimilarity__methods_[] = {
            DECLARE_METHOD(t_LMSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity, getName, METH_NOARGS),
            DECLARE_METHOD(t_LMSimilarity, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LMSimilarity, t_LMSimilarity, ::org::apache::lucene::search::similarities::SimilarityBase, LMSimilarity, t_LMSimilarity_init_, 0, 0, t_LMSimilarity__fields_, 0, 0);

          void t_LMSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(LMSimilarity), module, "LMSimilarity", 0);
            PyDict_SetItemString(PY_TYPE(LMSimilarity).tp_dict, "DefaultCollectionModel", make_descriptor(&PY_TYPE(LMSimilarity$DefaultCollectionModel)));
            PyDict_SetItemString(PY_TYPE(LMSimilarity).tp_dict, "CollectionModel", make_descriptor(&PY_TYPE(LMSimilarity$CollectionModel)));
            PyDict_SetItemString(PY_TYPE(LMSimilarity).tp_dict, "LMStats", make_descriptor(&PY_TYPE(LMSimilarity$LMStats)));
          }

          void t_LMSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LMSimilarity).tp_dict, "class_", make_descriptor(LMSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LMSimilarity).tp_dict, "wrapfn_", make_descriptor(t_LMSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LMSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LMSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LMSimilarity::initializeClass, 1)))
              return NULL;
            return t_LMSimilarity::wrap_Object(LMSimilarity(((t_LMSimilarity *) arg)->object.this$));
          }
          static PyObject *t_LMSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LMSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LMSimilarity_init_(t_LMSimilarity *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                LMSimilarity object((jobject) NULL);

                INT_CALL(object = LMSimilarity());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel a0((jobject) NULL);
                LMSimilarity object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel::initializeClass, &a0))
                {
                  INT_CALL(object = LMSimilarity(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LMSimilarity_getName(t_LMSimilarity *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getName());
            return j2p(result);
          }

          static PyObject *t_LMSimilarity_toString(t_LMSimilarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LMSimilarity), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_LMSimilarity_get__name(t_LMSimilarity *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/LogByteSizeMergePolicy.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *LogByteSizeMergePolicy::class$ = NULL;
        jmethodID *LogByteSizeMergePolicy::mids$ = NULL;
        bool LogByteSizeMergePolicy::live$ = false;
        jdouble LogByteSizeMergePolicy::DEFAULT_MAX_MERGE_MB = (jdouble) 0;
        jdouble LogByteSizeMergePolicy::DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE = (jdouble) 0;
        jdouble LogByteSizeMergePolicy::DEFAULT_MIN_MERGE_MB = (jdouble) 0;

        jclass LogByteSizeMergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/LogByteSizeMergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getMaxMergeMB_54c6a174] = env->getMethodID(cls, "getMaxMergeMB", "()D");
            mids$[mid_getMaxMergeMBForForcedMerge_54c6a174] = env->getMethodID(cls, "getMaxMergeMBForForcedMerge", "()D");
            mids$[mid_getMinMergeMB_54c6a174] = env->getMethodID(cls, "getMinMergeMB", "()D");
            mids$[mid_setMaxMergeMB_5d1c7645] = env->getMethodID(cls, "setMaxMergeMB", "(D)V");
            mids$[mid_setMaxMergeMBForForcedMerge_5d1c7645] = env->getMethodID(cls, "setMaxMergeMBForForcedMerge", "(D)V");
            mids$[mid_setMinMergeMB_5d1c7645] = env->getMethodID(cls, "setMinMergeMB", "(D)V");
            mids$[mid_size_5454cb07] = env->getMethodID(cls, "size", "(Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_MAX_MERGE_MB = env->getStaticDoubleField(cls, "DEFAULT_MAX_MERGE_MB");
            DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE = env->getStaticDoubleField(cls, "DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE");
            DEFAULT_MIN_MERGE_MB = env->getStaticDoubleField(cls, "DEFAULT_MIN_MERGE_MB");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LogByteSizeMergePolicy::LogByteSizeMergePolicy() : ::org::apache::lucene::index::LogMergePolicy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jdouble LogByteSizeMergePolicy::getMaxMergeMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMaxMergeMB_54c6a174]);
        }

        jdouble LogByteSizeMergePolicy::getMaxMergeMBForForcedMerge() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMaxMergeMBForForcedMerge_54c6a174]);
        }

        jdouble LogByteSizeMergePolicy::getMinMergeMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMinMergeMB_54c6a174]);
        }

        void LogByteSizeMergePolicy::setMaxMergeMB(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxMergeMB_5d1c7645], a0);
        }

        void LogByteSizeMergePolicy::setMaxMergeMBForForcedMerge(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxMergeMBForForcedMerge_5d1c7645], a0);
        }

        void LogByteSizeMergePolicy::setMinMergeMB(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMinMergeMB_5d1c7645], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_LogByteSizeMergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LogByteSizeMergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LogByteSizeMergePolicy_init_(t_LogByteSizeMergePolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LogByteSizeMergePolicy_getMaxMergeMB(t_LogByteSizeMergePolicy *self);
        static PyObject *t_LogByteSizeMergePolicy_getMaxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self);
        static PyObject *t_LogByteSizeMergePolicy_getMinMergeMB(t_LogByteSizeMergePolicy *self);
        static PyObject *t_LogByteSizeMergePolicy_setMaxMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg);
        static PyObject *t_LogByteSizeMergePolicy_setMaxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self, PyObject *arg);
        static PyObject *t_LogByteSizeMergePolicy_setMinMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg);
        static PyObject *t_LogByteSizeMergePolicy_get__maxMergeMB(t_LogByteSizeMergePolicy *self, void *data);
        static int t_LogByteSizeMergePolicy_set__maxMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_LogByteSizeMergePolicy_get__maxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self, void *data);
        static int t_LogByteSizeMergePolicy_set__maxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_LogByteSizeMergePolicy_get__minMergeMB(t_LogByteSizeMergePolicy *self, void *data);
        static int t_LogByteSizeMergePolicy_set__minMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg, void *data);
        static PyGetSetDef t_LogByteSizeMergePolicy__fields_[] = {
          DECLARE_GETSET_FIELD(t_LogByteSizeMergePolicy, maxMergeMB),
          DECLARE_GETSET_FIELD(t_LogByteSizeMergePolicy, maxMergeMBForForcedMerge),
          DECLARE_GETSET_FIELD(t_LogByteSizeMergePolicy, minMergeMB),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LogByteSizeMergePolicy__methods_[] = {
          DECLARE_METHOD(t_LogByteSizeMergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, getMaxMergeMB, METH_NOARGS),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, getMaxMergeMBForForcedMerge, METH_NOARGS),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, getMinMergeMB, METH_NOARGS),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, setMaxMergeMB, METH_O),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, setMaxMergeMBForForcedMerge, METH_O),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, setMinMergeMB, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LogByteSizeMergePolicy, t_LogByteSizeMergePolicy, ::org::apache::lucene::index::LogMergePolicy, LogByteSizeMergePolicy, t_LogByteSizeMergePolicy_init_, 0, 0, t_LogByteSizeMergePolicy__fields_, 0, 0);

        void t_LogByteSizeMergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(LogByteSizeMergePolicy), module, "LogByteSizeMergePolicy", 0);
        }

        void t_LogByteSizeMergePolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LogByteSizeMergePolicy).tp_dict, "class_", make_descriptor(LogByteSizeMergePolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LogByteSizeMergePolicy).tp_dict, "wrapfn_", make_descriptor(t_LogByteSizeMergePolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LogByteSizeMergePolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(LogByteSizeMergePolicy::initializeClass);
          PyDict_SetItemString(PY_TYPE(LogByteSizeMergePolicy).tp_dict, "DEFAULT_MAX_MERGE_MB", make_descriptor(LogByteSizeMergePolicy::DEFAULT_MAX_MERGE_MB));
          PyDict_SetItemString(PY_TYPE(LogByteSizeMergePolicy).tp_dict, "DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE", make_descriptor(LogByteSizeMergePolicy::DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE));
          PyDict_SetItemString(PY_TYPE(LogByteSizeMergePolicy).tp_dict, "DEFAULT_MIN_MERGE_MB", make_descriptor(LogByteSizeMergePolicy::DEFAULT_MIN_MERGE_MB));
        }

        static PyObject *t_LogByteSizeMergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LogByteSizeMergePolicy::initializeClass, 1)))
            return NULL;
          return t_LogByteSizeMergePolicy::wrap_Object(LogByteSizeMergePolicy(((t_LogByteSizeMergePolicy *) arg)->object.this$));
        }
        static PyObject *t_LogByteSizeMergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LogByteSizeMergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LogByteSizeMergePolicy_init_(t_LogByteSizeMergePolicy *self, PyObject *args, PyObject *kwds)
        {
          LogByteSizeMergePolicy object((jobject) NULL);

          INT_CALL(object = LogByteSizeMergePolicy());
          self->object = object;

          return 0;
        }

        static PyObject *t_LogByteSizeMergePolicy_getMaxMergeMB(t_LogByteSizeMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMaxMergeMB());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_LogByteSizeMergePolicy_getMaxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMaxMergeMBForForcedMerge());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_LogByteSizeMergePolicy_getMinMergeMB(t_LogByteSizeMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMinMergeMB());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_LogByteSizeMergePolicy_setMaxMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setMaxMergeMB(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergeMB", arg);
          return NULL;
        }

        static PyObject *t_LogByteSizeMergePolicy_setMaxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setMaxMergeMBForForcedMerge(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergeMBForForcedMerge", arg);
          return NULL;
        }

        static PyObject *t_LogByteSizeMergePolicy_setMinMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setMinMergeMB(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMinMergeMB", arg);
          return NULL;
        }

        static PyObject *t_LogByteSizeMergePolicy_get__maxMergeMB(t_LogByteSizeMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMaxMergeMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_LogByteSizeMergePolicy_set__maxMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMaxMergeMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxMergeMB", arg);
          return -1;
        }

        static PyObject *t_LogByteSizeMergePolicy_get__maxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMaxMergeMBForForcedMerge());
          return PyFloat_FromDouble((double) value);
        }
        static int t_LogByteSizeMergePolicy_set__maxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMaxMergeMBForForcedMerge(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxMergeMBForForcedMerge", arg);
          return -1;
        }

        static PyObject *t_LogByteSizeMergePolicy_get__minMergeMB(t_LogByteSizeMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMinMergeMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_LogByteSizeMergePolicy_set__minMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMinMergeMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "minMergeMB", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BooleanClause::class$ = NULL;
        jmethodID *BooleanClause::mids$ = NULL;
        bool BooleanClause::live$ = false;

        jclass BooleanClause::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BooleanClause");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_827be425] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/BooleanClause$Occur;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getOccur_157730ed] = env->getMethodID(cls, "getOccur", "()Lorg/apache/lucene/search/BooleanClause$Occur;");
            mids$[mid_getQuery_97e3851a] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isProhibited_54c6a16a] = env->getMethodID(cls, "isProhibited", "()Z");
            mids$[mid_isRequired_54c6a16a] = env->getMethodID(cls, "isRequired", "()Z");
            mids$[mid_setOccur_23bdc104] = env->getMethodID(cls, "setOccur", "(Lorg/apache/lucene/search/BooleanClause$Occur;)V");
            mids$[mid_setQuery_6e301113] = env->getMethodID(cls, "setQuery", "(Lorg/apache/lucene/search/Query;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BooleanClause::BooleanClause(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::BooleanClause$Occur & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_827be425, a0.this$, a1.this$)) {}

        jboolean BooleanClause::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::BooleanClause$Occur BooleanClause::getOccur() const
        {
          return ::org::apache::lucene::search::BooleanClause$Occur(env->callObjectMethod(this$, mids$[mid_getOccur_157730ed]));
        }

        ::org::apache::lucene::search::Query BooleanClause::getQuery() const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_97e3851a]));
        }

        jint BooleanClause::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean BooleanClause::isProhibited() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isProhibited_54c6a16a]);
        }

        jboolean BooleanClause::isRequired() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isRequired_54c6a16a]);
        }

        void BooleanClause::setOccur(const ::org::apache::lucene::search::BooleanClause$Occur & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setOccur_23bdc104], a0.this$);
        }

        void BooleanClause::setQuery(const ::org::apache::lucene::search::Query & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setQuery_6e301113], a0.this$);
        }

        ::java::lang::String BooleanClause::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BooleanClause_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanClause_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BooleanClause_init_(t_BooleanClause *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BooleanClause_equals(t_BooleanClause *self, PyObject *args);
        static PyObject *t_BooleanClause_getOccur(t_BooleanClause *self);
        static PyObject *t_BooleanClause_getQuery(t_BooleanClause *self);
        static PyObject *t_BooleanClause_hashCode(t_BooleanClause *self, PyObject *args);
        static PyObject *t_BooleanClause_isProhibited(t_BooleanClause *self);
        static PyObject *t_BooleanClause_isRequired(t_BooleanClause *self);
        static PyObject *t_BooleanClause_setOccur(t_BooleanClause *self, PyObject *arg);
        static PyObject *t_BooleanClause_setQuery(t_BooleanClause *self, PyObject *arg);
        static PyObject *t_BooleanClause_toString(t_BooleanClause *self, PyObject *args);
        static PyObject *t_BooleanClause_get__occur(t_BooleanClause *self, void *data);
        static int t_BooleanClause_set__occur(t_BooleanClause *self, PyObject *arg, void *data);
        static PyObject *t_BooleanClause_get__prohibited(t_BooleanClause *self, void *data);
        static PyObject *t_BooleanClause_get__query(t_BooleanClause *self, void *data);
        static int t_BooleanClause_set__query(t_BooleanClause *self, PyObject *arg, void *data);
        static PyObject *t_BooleanClause_get__required(t_BooleanClause *self, void *data);
        static PyGetSetDef t_BooleanClause__fields_[] = {
          DECLARE_GETSET_FIELD(t_BooleanClause, occur),
          DECLARE_GET_FIELD(t_BooleanClause, prohibited),
          DECLARE_GETSET_FIELD(t_BooleanClause, query),
          DECLARE_GET_FIELD(t_BooleanClause, required),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BooleanClause__methods_[] = {
          DECLARE_METHOD(t_BooleanClause, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanClause, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanClause, equals, METH_VARARGS),
          DECLARE_METHOD(t_BooleanClause, getOccur, METH_NOARGS),
          DECLARE_METHOD(t_BooleanClause, getQuery, METH_NOARGS),
          DECLARE_METHOD(t_BooleanClause, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_BooleanClause, isProhibited, METH_NOARGS),
          DECLARE_METHOD(t_BooleanClause, isRequired, METH_NOARGS),
          DECLARE_METHOD(t_BooleanClause, setOccur, METH_O),
          DECLARE_METHOD(t_BooleanClause, setQuery, METH_O),
          DECLARE_METHOD(t_BooleanClause, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BooleanClause, t_BooleanClause, ::java::lang::Object, BooleanClause, t_BooleanClause_init_, 0, 0, t_BooleanClause__fields_, 0, 0);

        void t_BooleanClause::install(PyObject *module)
        {
          installType(&PY_TYPE(BooleanClause), module, "BooleanClause", 0);
          PyDict_SetItemString(PY_TYPE(BooleanClause).tp_dict, "Occur", make_descriptor(&PY_TYPE(BooleanClause$Occur)));
        }

        void t_BooleanClause::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BooleanClause).tp_dict, "class_", make_descriptor(BooleanClause::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BooleanClause).tp_dict, "wrapfn_", make_descriptor(t_BooleanClause::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BooleanClause).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BooleanClause_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BooleanClause::initializeClass, 1)))
            return NULL;
          return t_BooleanClause::wrap_Object(BooleanClause(((t_BooleanClause *) arg)->object.this$));
        }
        static PyObject *t_BooleanClause_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BooleanClause::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BooleanClause_init_(t_BooleanClause *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          ::org::apache::lucene::search::BooleanClause$Occur a1((jobject) NULL);
          PyTypeObject **p1;
          BooleanClause object((jobject) NULL);

          if (!parseArgs(args, "kK", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_))
          {
            INT_CALL(object = BooleanClause(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BooleanClause_equals(t_BooleanClause *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(BooleanClause), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_BooleanClause_getOccur(t_BooleanClause *self)
        {
          ::org::apache::lucene::search::BooleanClause$Occur result((jobject) NULL);
          OBJ_CALL(result = self->object.getOccur());
          return ::org::apache::lucene::search::t_BooleanClause$Occur::wrap_Object(result);
        }

        static PyObject *t_BooleanClause_getQuery(t_BooleanClause *self)
        {
          ::org::apache::lucene::search::Query result((jobject) NULL);
          OBJ_CALL(result = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(result);
        }

        static PyObject *t_BooleanClause_hashCode(t_BooleanClause *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BooleanClause), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_BooleanClause_isProhibited(t_BooleanClause *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isProhibited());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_BooleanClause_isRequired(t_BooleanClause *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isRequired());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_BooleanClause_setOccur(t_BooleanClause *self, PyObject *arg)
        {
          ::org::apache::lucene::search::BooleanClause$Occur a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_))
          {
            OBJ_CALL(self->object.setOccur(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setOccur", arg);
          return NULL;
        }

        static PyObject *t_BooleanClause_setQuery(t_BooleanClause *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setQuery(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setQuery", arg);
          return NULL;
        }

        static PyObject *t_BooleanClause_toString(t_BooleanClause *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(BooleanClause), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_BooleanClause_get__occur(t_BooleanClause *self, void *data)
        {
          ::org::apache::lucene::search::BooleanClause$Occur value((jobject) NULL);
          OBJ_CALL(value = self->object.getOccur());
          return ::org::apache::lucene::search::t_BooleanClause$Occur::wrap_Object(value);
        }
        static int t_BooleanClause_set__occur(t_BooleanClause *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::BooleanClause$Occur value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &value))
            {
              INT_CALL(self->object.setOccur(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "occur", arg);
          return -1;
        }

        static PyObject *t_BooleanClause_get__prohibited(t_BooleanClause *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isProhibited());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_BooleanClause_get__query(t_BooleanClause *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }
        static int t_BooleanClause_set__query(t_BooleanClause *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Query value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              INT_CALL(self->object.setQuery(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "query", arg);
          return -1;
        }

        static PyObject *t_BooleanClause_get__required(t_BooleanClause *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isRequired());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/HungarianStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *HungarianStemmer::class$ = NULL;
        jmethodID *HungarianStemmer::mids$ = NULL;
        bool HungarianStemmer::live$ = false;

        jclass HungarianStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/HungarianStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        HungarianStemmer::HungarianStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean HungarianStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint HungarianStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean HungarianStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_HungarianStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_HungarianStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_HungarianStemmer_init_(t_HungarianStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_HungarianStemmer_equals(t_HungarianStemmer *self, PyObject *args);
        static PyObject *t_HungarianStemmer_hashCode(t_HungarianStemmer *self, PyObject *args);
        static PyObject *t_HungarianStemmer_stem(t_HungarianStemmer *self, PyObject *args);

        static PyMethodDef t_HungarianStemmer__methods_[] = {
          DECLARE_METHOD(t_HungarianStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_HungarianStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_HungarianStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_HungarianStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_HungarianStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(HungarianStemmer, t_HungarianStemmer, ::org::tartarus::snowball::SnowballProgram, HungarianStemmer, t_HungarianStemmer_init_, 0, 0, 0, 0, 0);

        void t_HungarianStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(HungarianStemmer), module, "HungarianStemmer", 0);
        }

        void t_HungarianStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(HungarianStemmer).tp_dict, "class_", make_descriptor(HungarianStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(HungarianStemmer).tp_dict, "wrapfn_", make_descriptor(t_HungarianStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(HungarianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_HungarianStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, HungarianStemmer::initializeClass, 1)))
            return NULL;
          return t_HungarianStemmer::wrap_Object(HungarianStemmer(((t_HungarianStemmer *) arg)->object.this$));
        }
        static PyObject *t_HungarianStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, HungarianStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_HungarianStemmer_init_(t_HungarianStemmer *self, PyObject *args, PyObject *kwds)
        {
          HungarianStemmer object((jobject) NULL);

          INT_CALL(object = HungarianStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_HungarianStemmer_equals(t_HungarianStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(HungarianStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_HungarianStemmer_hashCode(t_HungarianStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(HungarianStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_HungarianStemmer_stem(t_HungarianStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(HungarianStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/StoredFieldVisitor$Status.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *StoredFieldVisitor$Status::class$ = NULL;
        jmethodID *StoredFieldVisitor$Status::mids$ = NULL;
        bool StoredFieldVisitor$Status::live$ = false;
        StoredFieldVisitor$Status *StoredFieldVisitor$Status::NO = NULL;
        StoredFieldVisitor$Status *StoredFieldVisitor$Status::STOP = NULL;
        StoredFieldVisitor$Status *StoredFieldVisitor$Status::YES = NULL;

        jclass StoredFieldVisitor$Status::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/StoredFieldVisitor$Status");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_92de5032] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/index/StoredFieldVisitor$Status;");
            mids$[mid_values_fd94bdd0] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/index/StoredFieldVisitor$Status;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            NO = new StoredFieldVisitor$Status(env->getStaticObjectField(cls, "NO", "Lorg/apache/lucene/index/StoredFieldVisitor$Status;"));
            STOP = new StoredFieldVisitor$Status(env->getStaticObjectField(cls, "STOP", "Lorg/apache/lucene/index/StoredFieldVisitor$Status;"));
            YES = new StoredFieldVisitor$Status(env->getStaticObjectField(cls, "YES", "Lorg/apache/lucene/index/StoredFieldVisitor$Status;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        StoredFieldVisitor$Status StoredFieldVisitor$Status::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return StoredFieldVisitor$Status(env->callStaticObjectMethod(cls, mids$[mid_valueOf_92de5032], a0.this$));
        }

        JArray< StoredFieldVisitor$Status > StoredFieldVisitor$Status::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< StoredFieldVisitor$Status >(env->callStaticObjectMethod(cls, mids$[mid_values_fd94bdd0]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_StoredFieldVisitor$Status_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldVisitor$Status_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldVisitor$Status_of_(t_StoredFieldVisitor$Status *self, PyObject *args);
        static PyObject *t_StoredFieldVisitor$Status_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_StoredFieldVisitor$Status_values(PyTypeObject *type);
        static PyObject *t_StoredFieldVisitor$Status_get__parameters_(t_StoredFieldVisitor$Status *self, void *data);
        static PyGetSetDef t_StoredFieldVisitor$Status__fields_[] = {
          DECLARE_GET_FIELD(t_StoredFieldVisitor$Status, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_StoredFieldVisitor$Status__methods_[] = {
          DECLARE_METHOD(t_StoredFieldVisitor$Status, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldVisitor$Status, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldVisitor$Status, of_, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldVisitor$Status, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldVisitor$Status, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StoredFieldVisitor$Status, t_StoredFieldVisitor$Status, ::java::lang::Enum, StoredFieldVisitor$Status, abstract_init, 0, 0, t_StoredFieldVisitor$Status__fields_, 0, 0);
        PyObject *t_StoredFieldVisitor$Status::wrap_Object(const StoredFieldVisitor$Status& object, PyTypeObject *p0)
        {
          PyObject *obj = t_StoredFieldVisitor$Status::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_StoredFieldVisitor$Status *self = (t_StoredFieldVisitor$Status *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_StoredFieldVisitor$Status::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_StoredFieldVisitor$Status::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_StoredFieldVisitor$Status *self = (t_StoredFieldVisitor$Status *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_StoredFieldVisitor$Status::install(PyObject *module)
        {
          installType(&PY_TYPE(StoredFieldVisitor$Status), module, "StoredFieldVisitor$Status", 0);
        }

        void t_StoredFieldVisitor$Status::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor$Status).tp_dict, "class_", make_descriptor(StoredFieldVisitor$Status::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor$Status).tp_dict, "wrapfn_", make_descriptor(t_StoredFieldVisitor$Status::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor$Status).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(StoredFieldVisitor$Status::initializeClass);
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor$Status).tp_dict, "NO", make_descriptor(t_StoredFieldVisitor$Status::wrap_Object(*StoredFieldVisitor$Status::NO)));
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor$Status).tp_dict, "STOP", make_descriptor(t_StoredFieldVisitor$Status::wrap_Object(*StoredFieldVisitor$Status::STOP)));
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor$Status).tp_dict, "YES", make_descriptor(t_StoredFieldVisitor$Status::wrap_Object(*StoredFieldVisitor$Status::YES)));
        }

        static PyObject *t_StoredFieldVisitor$Status_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StoredFieldVisitor$Status::initializeClass, 1)))
            return NULL;
          return t_StoredFieldVisitor$Status::wrap_Object(StoredFieldVisitor$Status(((t_StoredFieldVisitor$Status *) arg)->object.this$));
        }
        static PyObject *t_StoredFieldVisitor$Status_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StoredFieldVisitor$Status::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_StoredFieldVisitor$Status_of_(t_StoredFieldVisitor$Status *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_StoredFieldVisitor$Status_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          StoredFieldVisitor$Status result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::StoredFieldVisitor$Status::valueOf(a0));
            return t_StoredFieldVisitor$Status::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_StoredFieldVisitor$Status_values(PyTypeObject *type)
        {
          JArray< StoredFieldVisitor$Status > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::StoredFieldVisitor$Status::values());
          return JArray<jobject>(result.this$).wrap(t_StoredFieldVisitor$Status::wrap_jobject);
        }
        static PyObject *t_StoredFieldVisitor$Status_get__parameters_(t_StoredFieldVisitor$Status *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiTermQuery::class$ = NULL;
        jmethodID *MultiTermQuery::mids$ = NULL;
        bool MultiTermQuery::live$ = false;
        ::org::apache::lucene::search::MultiTermQuery$RewriteMethod *MultiTermQuery::CONSTANT_SCORE_AUTO_REWRITE_DEFAULT = NULL;
        ::org::apache::lucene::search::MultiTermQuery$RewriteMethod *MultiTermQuery::CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE = NULL;
        ::org::apache::lucene::search::MultiTermQuery$RewriteMethod *MultiTermQuery::CONSTANT_SCORE_FILTER_REWRITE = NULL;
        ::org::apache::lucene::search::MultiTermQuery$RewriteMethod *MultiTermQuery::SCORING_BOOLEAN_QUERY_REWRITE = NULL;

        jclass MultiTermQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiTermQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
            mids$[mid_getRewriteMethod_8919154b] = env->getMethodID(cls, "getRewriteMethod", "()Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setRewriteMethod_c3c3909e] = env->getMethodID(cls, "setRewriteMethod", "(Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;)V");
            mids$[mid_getTermsEnum_67b5a29a] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_getTermsEnum_fb3ac14e] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            CONSTANT_SCORE_AUTO_REWRITE_DEFAULT = new ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->getStaticObjectField(cls, "CONSTANT_SCORE_AUTO_REWRITE_DEFAULT", "Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;"));
            CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE = new ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->getStaticObjectField(cls, "CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE", "Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;"));
            CONSTANT_SCORE_FILTER_REWRITE = new ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->getStaticObjectField(cls, "CONSTANT_SCORE_FILTER_REWRITE", "Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;"));
            SCORING_BOOLEAN_QUERY_REWRITE = new ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->getStaticObjectField(cls, "SCORING_BOOLEAN_QUERY_REWRITE", "Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTermQuery::MultiTermQuery(const ::java::lang::String & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        jboolean MultiTermQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::lang::String MultiTermQuery::getField() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
        }

        ::org::apache::lucene::search::MultiTermQuery$RewriteMethod MultiTermQuery::getRewriteMethod() const
        {
          return ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->callObjectMethod(this$, mids$[mid_getRewriteMethod_8919154b]));
        }

        jint MultiTermQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query MultiTermQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        void MultiTermQuery::setRewriteMethod(const ::org::apache::lucene::search::MultiTermQuery$RewriteMethod & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setRewriteMethod_c3c3909e], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/MultiTermQuery$ConstantScoreAutoRewrite.h"
#include "org/apache/lucene/search/MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite.h"
#include "org/apache/lucene/search/MultiTermQuery$TopTermsScoringBooleanQueryRewrite.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiTermQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiTermQuery_init_(t_MultiTermQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTermQuery_equals(t_MultiTermQuery *self, PyObject *args);
        static PyObject *t_MultiTermQuery_getField(t_MultiTermQuery *self);
        static PyObject *t_MultiTermQuery_getRewriteMethod(t_MultiTermQuery *self);
        static PyObject *t_MultiTermQuery_hashCode(t_MultiTermQuery *self, PyObject *args);
        static PyObject *t_MultiTermQuery_rewrite(t_MultiTermQuery *self, PyObject *args);
        static PyObject *t_MultiTermQuery_setRewriteMethod(t_MultiTermQuery *self, PyObject *arg);
        static PyObject *t_MultiTermQuery_get__field(t_MultiTermQuery *self, void *data);
        static PyObject *t_MultiTermQuery_get__rewriteMethod(t_MultiTermQuery *self, void *data);
        static int t_MultiTermQuery_set__rewriteMethod(t_MultiTermQuery *self, PyObject *arg, void *data);
        static PyGetSetDef t_MultiTermQuery__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTermQuery, field),
          DECLARE_GETSET_FIELD(t_MultiTermQuery, rewriteMethod),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTermQuery__methods_[] = {
          DECLARE_METHOD(t_MultiTermQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermQuery, getField, METH_NOARGS),
          DECLARE_METHOD(t_MultiTermQuery, getRewriteMethod, METH_NOARGS),
          DECLARE_METHOD(t_MultiTermQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermQuery, setRewriteMethod, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiTermQuery, t_MultiTermQuery, ::org::apache::lucene::search::Query, MultiTermQuery, t_MultiTermQuery_init_, 0, 0, t_MultiTermQuery__fields_, 0, 0);

        void t_MultiTermQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermQuery), module, "MultiTermQuery", 0);
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "ConstantScoreAutoRewrite", make_descriptor(&PY_TYPE(MultiTermQuery$ConstantScoreAutoRewrite)));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "TopTermsBoostOnlyBooleanQueryRewrite", make_descriptor(&PY_TYPE(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite)));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "TopTermsScoringBooleanQueryRewrite", make_descriptor(&PY_TYPE(MultiTermQuery$TopTermsScoringBooleanQueryRewrite)));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "RewriteMethod", make_descriptor(&PY_TYPE(MultiTermQuery$RewriteMethod)));
        }

        void t_MultiTermQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "class_", make_descriptor(MultiTermQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "wrapfn_", make_descriptor(t_MultiTermQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(MultiTermQuery::initializeClass);
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "CONSTANT_SCORE_AUTO_REWRITE_DEFAULT", make_descriptor(::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(*MultiTermQuery::CONSTANT_SCORE_AUTO_REWRITE_DEFAULT)));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE", make_descriptor(::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(*MultiTermQuery::CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE)));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "CONSTANT_SCORE_FILTER_REWRITE", make_descriptor(::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(*MultiTermQuery::CONSTANT_SCORE_FILTER_REWRITE)));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "SCORING_BOOLEAN_QUERY_REWRITE", make_descriptor(::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(*MultiTermQuery::SCORING_BOOLEAN_QUERY_REWRITE)));
        }

        static PyObject *t_MultiTermQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermQuery::initializeClass, 1)))
            return NULL;
          return t_MultiTermQuery::wrap_Object(MultiTermQuery(((t_MultiTermQuery *) arg)->object.this$));
        }
        static PyObject *t_MultiTermQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiTermQuery_init_(t_MultiTermQuery *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          MultiTermQuery object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = MultiTermQuery(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiTermQuery_equals(t_MultiTermQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MultiTermQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_MultiTermQuery_getField(t_MultiTermQuery *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getField());
          return j2p(result);
        }

        static PyObject *t_MultiTermQuery_getRewriteMethod(t_MultiTermQuery *self)
        {
          ::org::apache::lucene::search::MultiTermQuery$RewriteMethod result((jobject) NULL);
          OBJ_CALL(result = self->object.getRewriteMethod());
          return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(result);
        }

        static PyObject *t_MultiTermQuery_hashCode(t_MultiTermQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiTermQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_MultiTermQuery_rewrite(t_MultiTermQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTermQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_MultiTermQuery_setRewriteMethod(t_MultiTermQuery *self, PyObject *arg)
        {
          ::org::apache::lucene::search::MultiTermQuery$RewriteMethod a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setRewriteMethod(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setRewriteMethod", arg);
          return NULL;
        }

        static PyObject *t_MultiTermQuery_get__field(t_MultiTermQuery *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getField());
          return j2p(value);
        }

        static PyObject *t_MultiTermQuery_get__rewriteMethod(t_MultiTermQuery *self, void *data)
        {
          ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
          OBJ_CALL(value = self->object.getRewriteMethod());
          return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(value);
        }
        static int t_MultiTermQuery_set__rewriteMethod(t_MultiTermQuery *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &value))
            {
              INT_CALL(self->object.setRewriteMethod(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "rewriteMethod", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/NumericUtils$IntRangeBuilder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *NumericUtils$IntRangeBuilder::class$ = NULL;
        jmethodID *NumericUtils$IntRangeBuilder::mids$ = NULL;
        bool NumericUtils$IntRangeBuilder::live$ = false;

        jclass NumericUtils$IntRangeBuilder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/NumericUtils$IntRangeBuilder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_addRange_594e5ee6] = env->getMethodID(cls, "addRange", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_addRange_d3236aa4] = env->getMethodID(cls, "addRange", "(III)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NumericUtils$IntRangeBuilder::NumericUtils$IntRangeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void NumericUtils$IntRangeBuilder::addRange(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_addRange_594e5ee6], a0.this$, a1.this$);
        }

        void NumericUtils$IntRangeBuilder::addRange(jint a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_addRange_d3236aa4], a0, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_NumericUtils$IntRangeBuilder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils$IntRangeBuilder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NumericUtils$IntRangeBuilder_init_(t_NumericUtils$IntRangeBuilder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NumericUtils$IntRangeBuilder_addRange(t_NumericUtils$IntRangeBuilder *self, PyObject *args);

        static PyMethodDef t_NumericUtils$IntRangeBuilder__methods_[] = {
          DECLARE_METHOD(t_NumericUtils$IntRangeBuilder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils$IntRangeBuilder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils$IntRangeBuilder, addRange, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericUtils$IntRangeBuilder, t_NumericUtils$IntRangeBuilder, ::java::lang::Object, NumericUtils$IntRangeBuilder, t_NumericUtils$IntRangeBuilder_init_, 0, 0, 0, 0, 0);

        void t_NumericUtils$IntRangeBuilder::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericUtils$IntRangeBuilder), module, "NumericUtils$IntRangeBuilder", 0);
        }

        void t_NumericUtils$IntRangeBuilder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericUtils$IntRangeBuilder).tp_dict, "class_", make_descriptor(NumericUtils$IntRangeBuilder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericUtils$IntRangeBuilder).tp_dict, "wrapfn_", make_descriptor(t_NumericUtils$IntRangeBuilder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericUtils$IntRangeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NumericUtils$IntRangeBuilder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericUtils$IntRangeBuilder::initializeClass, 1)))
            return NULL;
          return t_NumericUtils$IntRangeBuilder::wrap_Object(NumericUtils$IntRangeBuilder(((t_NumericUtils$IntRangeBuilder *) arg)->object.this$));
        }
        static PyObject *t_NumericUtils$IntRangeBuilder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericUtils$IntRangeBuilder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NumericUtils$IntRangeBuilder_init_(t_NumericUtils$IntRangeBuilder *self, PyObject *args, PyObject *kwds)
        {
          NumericUtils$IntRangeBuilder object((jobject) NULL);

          INT_CALL(object = NumericUtils$IntRangeBuilder());
          self->object = object;

          return 0;
        }

        static PyObject *t_NumericUtils$IntRangeBuilder_addRange(t_NumericUtils$IntRangeBuilder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.addRange(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              jint a0;
              jint a1;
              jint a2;

              if (!parseArgs(args, "III", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.addRange(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addRange", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/TrackingDirectoryWrapper.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *TrackingDirectoryWrapper::class$ = NULL;
        jmethodID *TrackingDirectoryWrapper::mids$ = NULL;
        bool TrackingDirectoryWrapper::live$ = false;

        jclass TrackingDirectoryWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/TrackingDirectoryWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_2e261ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_copy_146bec62] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_getCreatedFiles_03e99967] = env->getMethodID(cls, "getCreatedFiles", "()Ljava/util/Set;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TrackingDirectoryWrapper::TrackingDirectoryWrapper(const ::org::apache::lucene::store::Directory & a0) : ::org::apache::lucene::store::FilterDirectory(env->newObject(initializeClass, &mids$, mid_init$_2e261ef2, a0.this$)) {}

        void TrackingDirectoryWrapper::copy(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_146bec62], a0.this$, a1.this$, a2.this$, a3.this$);
        }

        ::org::apache::lucene::store::IndexOutput TrackingDirectoryWrapper::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        void TrackingDirectoryWrapper::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_5fdc3f48], a0.this$);
        }

        ::java::util::Set TrackingDirectoryWrapper::getCreatedFiles() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getCreatedFiles_03e99967]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_TrackingDirectoryWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TrackingDirectoryWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TrackingDirectoryWrapper_init_(t_TrackingDirectoryWrapper *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TrackingDirectoryWrapper_copy(t_TrackingDirectoryWrapper *self, PyObject *args);
        static PyObject *t_TrackingDirectoryWrapper_createOutput(t_TrackingDirectoryWrapper *self, PyObject *args);
        static PyObject *t_TrackingDirectoryWrapper_deleteFile(t_TrackingDirectoryWrapper *self, PyObject *args);
        static PyObject *t_TrackingDirectoryWrapper_getCreatedFiles(t_TrackingDirectoryWrapper *self);
        static PyObject *t_TrackingDirectoryWrapper_get__createdFiles(t_TrackingDirectoryWrapper *self, void *data);
        static PyGetSetDef t_TrackingDirectoryWrapper__fields_[] = {
          DECLARE_GET_FIELD(t_TrackingDirectoryWrapper, createdFiles),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TrackingDirectoryWrapper__methods_[] = {
          DECLARE_METHOD(t_TrackingDirectoryWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TrackingDirectoryWrapper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TrackingDirectoryWrapper, copy, METH_VARARGS),
          DECLARE_METHOD(t_TrackingDirectoryWrapper, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_TrackingDirectoryWrapper, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_TrackingDirectoryWrapper, getCreatedFiles, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TrackingDirectoryWrapper, t_TrackingDirectoryWrapper, ::org::apache::lucene::store::FilterDirectory, TrackingDirectoryWrapper, t_TrackingDirectoryWrapper_init_, 0, 0, t_TrackingDirectoryWrapper__fields_, 0, 0);

        void t_TrackingDirectoryWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(TrackingDirectoryWrapper), module, "TrackingDirectoryWrapper", 0);
        }

        void t_TrackingDirectoryWrapper::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TrackingDirectoryWrapper).tp_dict, "class_", make_descriptor(TrackingDirectoryWrapper::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TrackingDirectoryWrapper).tp_dict, "wrapfn_", make_descriptor(t_TrackingDirectoryWrapper::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TrackingDirectoryWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TrackingDirectoryWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TrackingDirectoryWrapper::initializeClass, 1)))
            return NULL;
          return t_TrackingDirectoryWrapper::wrap_Object(TrackingDirectoryWrapper(((t_TrackingDirectoryWrapper *) arg)->object.this$));
        }
        static PyObject *t_TrackingDirectoryWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TrackingDirectoryWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TrackingDirectoryWrapper_init_(t_TrackingDirectoryWrapper *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          TrackingDirectoryWrapper object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            INT_CALL(object = TrackingDirectoryWrapper(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TrackingDirectoryWrapper_copy(t_TrackingDirectoryWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);

          if (!parseArgs(args, "kssk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.copy(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TrackingDirectoryWrapper), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_TrackingDirectoryWrapper_createOutput(t_TrackingDirectoryWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(TrackingDirectoryWrapper), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_TrackingDirectoryWrapper_deleteFile(t_TrackingDirectoryWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TrackingDirectoryWrapper), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_TrackingDirectoryWrapper_getCreatedFiles(t_TrackingDirectoryWrapper *self)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = self->object.getCreatedFiles());
          return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_TrackingDirectoryWrapper_get__createdFiles(t_TrackingDirectoryWrapper *self, void *data)
        {
          ::java::util::Set value((jobject) NULL);
          OBJ_CALL(value = self->object.getCreatedFiles());
          return ::java::util::t_Set::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/SynonymFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *SynonymFilterFactory::class$ = NULL;
          jmethodID *SynonymFilterFactory::mids$ = NULL;
          bool SynonymFilterFactory::live$ = false;

          jclass SynonymFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/SynonymFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SynonymFilterFactory::SynonymFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream SynonymFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          void SynonymFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_SynonymFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SynonymFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SynonymFilterFactory_init_(t_SynonymFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SynonymFilterFactory_create(t_SynonymFilterFactory *self, PyObject *args);
          static PyObject *t_SynonymFilterFactory_inform(t_SynonymFilterFactory *self, PyObject *arg);

          static PyMethodDef t_SynonymFilterFactory__methods_[] = {
            DECLARE_METHOD(t_SynonymFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_SynonymFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SynonymFilterFactory, t_SynonymFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, SynonymFilterFactory, t_SynonymFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_SynonymFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SynonymFilterFactory), module, "SynonymFilterFactory", 0);
          }

          void t_SynonymFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SynonymFilterFactory).tp_dict, "class_", make_descriptor(SynonymFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SynonymFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_SynonymFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SynonymFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SynonymFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SynonymFilterFactory::initializeClass, 1)))
              return NULL;
            return t_SynonymFilterFactory::wrap_Object(SynonymFilterFactory(((t_SynonymFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_SynonymFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SynonymFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SynonymFilterFactory_init_(t_SynonymFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SynonymFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SynonymFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SynonymFilterFactory_create(t_SynonymFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SynonymFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_SynonymFilterFactory_inform(t_SynonymFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$logical_or_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$logical_or_return::class$ = NULL;
          jmethodID *JavascriptParser$logical_or_return::mids$ = NULL;
          bool JavascriptParser$logical_or_return::live$ = false;

          jclass JavascriptParser$logical_or_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$logical_or_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$logical_or_return::JavascriptParser$logical_or_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$logical_or_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$logical_or_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$logical_or_return_init_(t_JavascriptParser$logical_or_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$logical_or_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$logical_or_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$logical_or_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$logical_or_return, t_JavascriptParser$logical_or_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$logical_or_return, t_JavascriptParser$logical_or_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$logical_or_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$logical_or_return), module, "JavascriptParser$logical_or_return", 0);
          }

          void t_JavascriptParser$logical_or_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$logical_or_return).tp_dict, "class_", make_descriptor(JavascriptParser$logical_or_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$logical_or_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$logical_or_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$logical_or_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$logical_or_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$logical_or_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$logical_or_return::wrap_Object(JavascriptParser$logical_or_return(((t_JavascriptParser$logical_or_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$logical_or_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$logical_or_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$logical_or_return_init_(t_JavascriptParser$logical_or_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$logical_or_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$logical_or_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
