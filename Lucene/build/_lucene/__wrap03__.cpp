#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *Lucene43EdgeNGramTokenizer::class$ = NULL;
          jmethodID *Lucene43EdgeNGramTokenizer::mids$ = NULL;
          bool Lucene43EdgeNGramTokenizer::live$ = false;
          jint Lucene43EdgeNGramTokenizer::DEFAULT_MAX_GRAM_SIZE = (jint) 0;
          jint Lucene43EdgeNGramTokenizer::DEFAULT_MIN_GRAM_SIZE = (jint) 0;
          ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side *Lucene43EdgeNGramTokenizer::DEFAULT_SIDE = NULL;

          jclass Lucene43EdgeNGramTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_92513554] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;II)V");
              mids$[mid_init$_47cfcf59] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;II)V");
              mids$[mid_init$_fb18a8f8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;II)V");
              mids$[mid_init$_0c87564f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;II)V");
              mids$[mid_init$_6fc4da21] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;Lorg/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side;II)V");
              mids$[mid_init$_9a7df2b7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;Ljava/lang/String;II)V");
              mids$[mid_init$_1623557f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;Lorg/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side;II)V");
              mids$[mid_init$_3a1c54b5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;Ljava/lang/String;II)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_GRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_GRAM_SIZE");
              DEFAULT_MIN_GRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_GRAM_SIZE");
              DEFAULT_SIDE = new ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side(env->getStaticObjectField(cls, "DEFAULT_SIDE", "Lorg/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene43EdgeNGramTokenizer::Lucene43EdgeNGramTokenizer(const ::java::io::Reader & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_92513554, a0.this$, a1, a2)) {}

          Lucene43EdgeNGramTokenizer::Lucene43EdgeNGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_47cfcf59, a0.this$, a1.this$, a2, a3)) {}

          Lucene43EdgeNGramTokenizer::Lucene43EdgeNGramTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_fb18a8f8, a0.this$, a1.this$, a2, a3)) {}

          Lucene43EdgeNGramTokenizer::Lucene43EdgeNGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2, jint a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_0c87564f, a0.this$, a1.this$, a2.this$, a3, a4)) {}

          Lucene43EdgeNGramTokenizer::Lucene43EdgeNGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1, const ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side & a2, jint a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_6fc4da21, a0.this$, a1.this$, a2.this$, a3, a4)) {}

          Lucene43EdgeNGramTokenizer::Lucene43EdgeNGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1, const ::java::lang::String & a2, jint a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_9a7df2b7, a0.this$, a1.this$, a2.this$, a3, a4)) {}

          Lucene43EdgeNGramTokenizer::Lucene43EdgeNGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2, const ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side & a3, jint a4, jint a5) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_1623557f, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5)) {}

          Lucene43EdgeNGramTokenizer::Lucene43EdgeNGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2, const ::java::lang::String & a3, jint a4, jint a5) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_3a1c54b5, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5)) {}

          void Lucene43EdgeNGramTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean Lucene43EdgeNGramTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void Lucene43EdgeNGramTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_Lucene43EdgeNGramTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene43EdgeNGramTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene43EdgeNGramTokenizer_init_(t_Lucene43EdgeNGramTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene43EdgeNGramTokenizer_end(t_Lucene43EdgeNGramTokenizer *self, PyObject *args);
          static PyObject *t_Lucene43EdgeNGramTokenizer_incrementToken(t_Lucene43EdgeNGramTokenizer *self, PyObject *args);
          static PyObject *t_Lucene43EdgeNGramTokenizer_reset(t_Lucene43EdgeNGramTokenizer *self, PyObject *args);

          static PyMethodDef t_Lucene43EdgeNGramTokenizer__methods_[] = {
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene43EdgeNGramTokenizer, t_Lucene43EdgeNGramTokenizer, ::org::apache::lucene::analysis::Tokenizer, Lucene43EdgeNGramTokenizer, t_Lucene43EdgeNGramTokenizer_init_, 0, 0, 0, 0, 0);

          void t_Lucene43EdgeNGramTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene43EdgeNGramTokenizer), module, "Lucene43EdgeNGramTokenizer", 0);
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer).tp_dict, "Side", make_descriptor(&PY_TYPE(Lucene43EdgeNGramTokenizer$Side)));
          }

          void t_Lucene43EdgeNGramTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer).tp_dict, "class_", make_descriptor(Lucene43EdgeNGramTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer).tp_dict, "wrapfn_", make_descriptor(t_Lucene43EdgeNGramTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene43EdgeNGramTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer).tp_dict, "DEFAULT_MAX_GRAM_SIZE", make_descriptor(Lucene43EdgeNGramTokenizer::DEFAULT_MAX_GRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer).tp_dict, "DEFAULT_MIN_GRAM_SIZE", make_descriptor(Lucene43EdgeNGramTokenizer::DEFAULT_MIN_GRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer).tp_dict, "DEFAULT_SIDE", make_descriptor(::org::apache::lucene::analysis::ngram::t_Lucene43EdgeNGramTokenizer$Side::wrap_Object(*Lucene43EdgeNGramTokenizer::DEFAULT_SIDE)));
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene43EdgeNGramTokenizer::initializeClass, 1)))
              return NULL;
            return t_Lucene43EdgeNGramTokenizer::wrap_Object(Lucene43EdgeNGramTokenizer(((t_Lucene43EdgeNGramTokenizer *) arg)->object.this$));
          }
          static PyObject *t_Lucene43EdgeNGramTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene43EdgeNGramTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene43EdgeNGramTokenizer_init_(t_Lucene43EdgeNGramTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                jint a2;
                Lucene43EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kII", ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = Lucene43EdgeNGramTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                jint a3;
                Lucene43EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkII", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = Lucene43EdgeNGramTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                jint a3;
                Lucene43EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkII", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = Lucene43EdgeNGramTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                jint a3;
                jint a4;
                Lucene43EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkkII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = Lucene43EdgeNGramTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side a2((jobject) NULL);
                PyTypeObject **p2;
                jint a3;
                jint a4;
                Lucene43EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkKII", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::ngram::t_Lucene43EdgeNGramTokenizer$Side::parameters_, &a3, &a4))
                {
                  INT_CALL(object = Lucene43EdgeNGramTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                jint a3;
                jint a4;
                Lucene43EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kksII", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = Lucene43EdgeNGramTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 6:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side a3((jobject) NULL);
                PyTypeObject **p3;
                jint a4;
                jint a5;
                Lucene43EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkkKII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::analysis::ngram::t_Lucene43EdgeNGramTokenizer$Side::parameters_, &a4, &a5))
                {
                  INT_CALL(object = Lucene43EdgeNGramTokenizer(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                jint a4;
                jint a5;
                Lucene43EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkksII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                {
                  INT_CALL(object = Lucene43EdgeNGramTokenizer(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer_end(t_Lucene43EdgeNGramTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene43EdgeNGramTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer_incrementToken(t_Lucene43EdgeNGramTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Lucene43EdgeNGramTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer_reset(t_Lucene43EdgeNGramTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene43EdgeNGramTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TwoPhaseCommitTool.h"
#include "org/apache/lucene/index/TwoPhaseCommit.h"
#include "org/apache/lucene/index/TwoPhaseCommitTool$PrepareCommitFailException.h"
#include "org/apache/lucene/index/TwoPhaseCommitTool$CommitFailException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TwoPhaseCommitTool::class$ = NULL;
        jmethodID *TwoPhaseCommitTool::mids$ = NULL;
        bool TwoPhaseCommitTool::live$ = false;

        jclass TwoPhaseCommitTool::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TwoPhaseCommitTool");

            mids$ = new jmethodID[max_mid];
            mids$[mid_execute_9f61f519] = env->getStaticMethodID(cls, "execute", "([Lorg/apache/lucene/index/TwoPhaseCommit;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TwoPhaseCommitTool::execute(const JArray< ::org::apache::lucene::index::TwoPhaseCommit > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_execute_9f61f519], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TwoPhaseCommitTool_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TwoPhaseCommitTool_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TwoPhaseCommitTool_execute(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_TwoPhaseCommitTool__methods_[] = {
          DECLARE_METHOD(t_TwoPhaseCommitTool, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TwoPhaseCommitTool, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TwoPhaseCommitTool, execute, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TwoPhaseCommitTool, t_TwoPhaseCommitTool, ::java::lang::Object, TwoPhaseCommitTool, abstract_init, 0, 0, 0, 0, 0);

        void t_TwoPhaseCommitTool::install(PyObject *module)
        {
          installType(&PY_TYPE(TwoPhaseCommitTool), module, "TwoPhaseCommitTool", 0);
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool).tp_dict, "CommitFailException", make_descriptor(&PY_TYPE(TwoPhaseCommitTool$CommitFailException)));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool).tp_dict, "PrepareCommitFailException", make_descriptor(&PY_TYPE(TwoPhaseCommitTool$PrepareCommitFailException)));
        }

        void t_TwoPhaseCommitTool::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool).tp_dict, "class_", make_descriptor(TwoPhaseCommitTool::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool).tp_dict, "wrapfn_", make_descriptor(t_TwoPhaseCommitTool::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TwoPhaseCommitTool_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TwoPhaseCommitTool::initializeClass, 1)))
            return NULL;
          return t_TwoPhaseCommitTool::wrap_Object(TwoPhaseCommitTool(((t_TwoPhaseCommitTool *) arg)->object.this$));
        }
        static PyObject *t_TwoPhaseCommitTool_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TwoPhaseCommitTool::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TwoPhaseCommitTool_execute(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::org::apache::lucene::index::TwoPhaseCommit > a0((jobject) NULL);

          if (!parseArg(arg, "[k", ::org::apache::lucene::index::TwoPhaseCommit::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::TwoPhaseCommitTool::execute(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "execute", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MinFloatFunction.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MinFloatFunction::class$ = NULL;
            jmethodID *MinFloatFunction::mids$ = NULL;
            bool MinFloatFunction::live$ = false;

            jclass MinFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MinFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ee9922ca] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_d2e34bb9] = env->getMethodID(cls, "func", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MinFloatFunction::MinFloatFunction(const JArray< ::org::apache::lucene::queries::function::ValueSource > & a0) : ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction(env->newObject(initializeClass, &mids$, mid_init$_ee9922ca, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MinFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MinFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MinFloatFunction_init_(t_MinFloatFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_MinFloatFunction__methods_[] = {
              DECLARE_METHOD(t_MinFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MinFloatFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MinFloatFunction, t_MinFloatFunction, ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction, MinFloatFunction, t_MinFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_MinFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(MinFloatFunction), module, "MinFloatFunction", 0);
            }

            void t_MinFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MinFloatFunction).tp_dict, "class_", make_descriptor(MinFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MinFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_MinFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MinFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MinFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MinFloatFunction::initializeClass, 1)))
                return NULL;
              return t_MinFloatFunction::wrap_Object(MinFloatFunction(((t_MinFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_MinFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MinFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MinFloatFunction_init_(t_MinFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              JArray< ::org::apache::lucene::queries::function::ValueSource > a0((jobject) NULL);
              MinFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = MinFloatFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *TermsFilterBuilder::class$ = NULL;
            jmethodID *TermsFilterBuilder::mids$ = NULL;
            bool TermsFilterBuilder::live$ = false;

            jclass TermsFilterBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermsFilterBuilder::TermsFilterBuilder(const ::org::apache::lucene::analysis::Analyzer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_TermsFilterBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermsFilterBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TermsFilterBuilder_init_(t_TermsFilterBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_TermsFilterBuilder__methods_[] = {
              DECLARE_METHOD(t_TermsFilterBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermsFilterBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermsFilterBuilder, t_TermsFilterBuilder, ::java::lang::Object, TermsFilterBuilder, t_TermsFilterBuilder_init_, 0, 0, 0, 0, 0);

            void t_TermsFilterBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(TermsFilterBuilder), module, "TermsFilterBuilder", 0);
            }

            void t_TermsFilterBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermsFilterBuilder).tp_dict, "class_", make_descriptor(TermsFilterBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermsFilterBuilder).tp_dict, "wrapfn_", make_descriptor(t_TermsFilterBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermsFilterBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermsFilterBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermsFilterBuilder::initializeClass, 1)))
                return NULL;
              return t_TermsFilterBuilder::wrap_Object(TermsFilterBuilder(((t_TermsFilterBuilder *) arg)->object.this$));
            }
            static PyObject *t_TermsFilterBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermsFilterBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TermsFilterBuilder_init_(t_TermsFilterBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
              TermsFilterBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
              {
                INT_CALL(object = TermsFilterBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerImpl.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *StandardTokenizerImpl::class$ = NULL;
          jmethodID *StandardTokenizerImpl::mids$ = NULL;
          bool StandardTokenizerImpl::live$ = false;
          jint StandardTokenizerImpl::HANGUL_TYPE = (jint) 0;
          jint StandardTokenizerImpl::HIRAGANA_TYPE = (jint) 0;
          jint StandardTokenizerImpl::IDEOGRAPHIC_TYPE = (jint) 0;
          jint StandardTokenizerImpl::KATAKANA_TYPE = (jint) 0;
          jint StandardTokenizerImpl::NUMERIC_TYPE = (jint) 0;
          jint StandardTokenizerImpl::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
          jint StandardTokenizerImpl::WORD_TYPE = (jint) 0;
          jint StandardTokenizerImpl::YYEOF = (jint) 0;
          jint StandardTokenizerImpl::YYINITIAL = (jint) 0;

          jclass StandardTokenizerImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/StandardTokenizerImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
              mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
              mids$[mid_setBufferSize_39c7bd3c] = env->getMethodID(cls, "setBufferSize", "(I)V");
              mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
              mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
              mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
              mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
              mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
              mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
              mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
              mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
              mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
              HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
              IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
              KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
              NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
              SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
              WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
              YYEOF = env->getStaticIntField(cls, "YYEOF");
              YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StandardTokenizerImpl::StandardTokenizerImpl(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          jint StandardTokenizerImpl::getNextToken() const
          {
            return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
          }

          void StandardTokenizerImpl::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
          }

          void StandardTokenizerImpl::setBufferSize(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setBufferSize_39c7bd3c], a0);
          }

          void StandardTokenizerImpl::yybegin(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
          }

          jint StandardTokenizerImpl::yychar() const
          {
            return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
          }

          jchar StandardTokenizerImpl::yycharat(jint a0) const
          {
            return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
          }

          void StandardTokenizerImpl::yyclose() const
          {
            env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
          }

          jint StandardTokenizerImpl::yylength() const
          {
            return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
          }

          void StandardTokenizerImpl::yypushback(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
          }

          void StandardTokenizerImpl::yyreset(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
          }

          jint StandardTokenizerImpl::yystate() const
          {
            return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
          }

          ::java::lang::String StandardTokenizerImpl::yytext() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_StandardTokenizerImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardTokenizerImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StandardTokenizerImpl_init_(t_StandardTokenizerImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StandardTokenizerImpl_getNextToken(t_StandardTokenizerImpl *self);
          static PyObject *t_StandardTokenizerImpl_getText(t_StandardTokenizerImpl *self, PyObject *arg);
          static PyObject *t_StandardTokenizerImpl_setBufferSize(t_StandardTokenizerImpl *self, PyObject *arg);
          static PyObject *t_StandardTokenizerImpl_yybegin(t_StandardTokenizerImpl *self, PyObject *arg);
          static PyObject *t_StandardTokenizerImpl_yychar(t_StandardTokenizerImpl *self);
          static PyObject *t_StandardTokenizerImpl_yycharat(t_StandardTokenizerImpl *self, PyObject *arg);
          static PyObject *t_StandardTokenizerImpl_yyclose(t_StandardTokenizerImpl *self);
          static PyObject *t_StandardTokenizerImpl_yylength(t_StandardTokenizerImpl *self);
          static PyObject *t_StandardTokenizerImpl_yypushback(t_StandardTokenizerImpl *self, PyObject *arg);
          static PyObject *t_StandardTokenizerImpl_yyreset(t_StandardTokenizerImpl *self, PyObject *arg);
          static PyObject *t_StandardTokenizerImpl_yystate(t_StandardTokenizerImpl *self);
          static PyObject *t_StandardTokenizerImpl_yytext(t_StandardTokenizerImpl *self);
          static int t_StandardTokenizerImpl_set__bufferSize(t_StandardTokenizerImpl *self, PyObject *arg, void *data);
          static PyObject *t_StandardTokenizerImpl_get__nextToken(t_StandardTokenizerImpl *self, void *data);
          static PyGetSetDef t_StandardTokenizerImpl__fields_[] = {
            DECLARE_SET_FIELD(t_StandardTokenizerImpl, bufferSize),
            DECLARE_GET_FIELD(t_StandardTokenizerImpl, nextToken),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StandardTokenizerImpl__methods_[] = {
            DECLARE_METHOD(t_StandardTokenizerImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizerImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizerImpl, getNextToken, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerImpl, getText, METH_O),
            DECLARE_METHOD(t_StandardTokenizerImpl, setBufferSize, METH_O),
            DECLARE_METHOD(t_StandardTokenizerImpl, yybegin, METH_O),
            DECLARE_METHOD(t_StandardTokenizerImpl, yychar, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerImpl, yycharat, METH_O),
            DECLARE_METHOD(t_StandardTokenizerImpl, yyclose, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerImpl, yylength, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerImpl, yypushback, METH_O),
            DECLARE_METHOD(t_StandardTokenizerImpl, yyreset, METH_O),
            DECLARE_METHOD(t_StandardTokenizerImpl, yystate, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerImpl, yytext, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StandardTokenizerImpl, t_StandardTokenizerImpl, ::java::lang::Object, StandardTokenizerImpl, t_StandardTokenizerImpl_init_, 0, 0, t_StandardTokenizerImpl__fields_, 0, 0);

          void t_StandardTokenizerImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(StandardTokenizerImpl), module, "StandardTokenizerImpl", 0);
          }

          void t_StandardTokenizerImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "class_", make_descriptor(StandardTokenizerImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "wrapfn_", make_descriptor(t_StandardTokenizerImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(StandardTokenizerImpl::initializeClass);
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "HANGUL_TYPE", make_descriptor(StandardTokenizerImpl::HANGUL_TYPE));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "HIRAGANA_TYPE", make_descriptor(StandardTokenizerImpl::HIRAGANA_TYPE));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(StandardTokenizerImpl::IDEOGRAPHIC_TYPE));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "KATAKANA_TYPE", make_descriptor(StandardTokenizerImpl::KATAKANA_TYPE));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "NUMERIC_TYPE", make_descriptor(StandardTokenizerImpl::NUMERIC_TYPE));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(StandardTokenizerImpl::SOUTH_EAST_ASIAN_TYPE));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "WORD_TYPE", make_descriptor(StandardTokenizerImpl::WORD_TYPE));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "YYEOF", make_descriptor(StandardTokenizerImpl::YYEOF));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "YYINITIAL", make_descriptor(StandardTokenizerImpl::YYINITIAL));
          }

          static PyObject *t_StandardTokenizerImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StandardTokenizerImpl::initializeClass, 1)))
              return NULL;
            return t_StandardTokenizerImpl::wrap_Object(StandardTokenizerImpl(((t_StandardTokenizerImpl *) arg)->object.this$));
          }
          static PyObject *t_StandardTokenizerImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StandardTokenizerImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StandardTokenizerImpl_init_(t_StandardTokenizerImpl *self, PyObject *args, PyObject *kwds)
          {
            ::java::io::Reader a0((jobject) NULL);
            StandardTokenizerImpl object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              INT_CALL(object = StandardTokenizerImpl(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StandardTokenizerImpl_getNextToken(t_StandardTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNextToken());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizerImpl_getText(t_StandardTokenizerImpl *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
            {
              OBJ_CALL(self->object.getText(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "getText", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerImpl_setBufferSize(t_StandardTokenizerImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setBufferSize(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setBufferSize", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerImpl_yybegin(t_StandardTokenizerImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.yybegin(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerImpl_yychar(t_StandardTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yychar());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizerImpl_yycharat(t_StandardTokenizerImpl *self, PyObject *arg)
          {
            jint a0;
            jchar result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.yycharat(a0));
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerImpl_yyclose(t_StandardTokenizerImpl *self)
          {
            OBJ_CALL(self->object.yyclose());
            Py_RETURN_NONE;
          }

          static PyObject *t_StandardTokenizerImpl_yylength(t_StandardTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yylength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizerImpl_yypushback(t_StandardTokenizerImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.yypushback(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerImpl_yyreset(t_StandardTokenizerImpl *self, PyObject *arg)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.yyreset(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerImpl_yystate(t_StandardTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yystate());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizerImpl_yytext(t_StandardTokenizerImpl *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.yytext());
            return j2p(result);
          }

          static int t_StandardTokenizerImpl_set__bufferSize(t_StandardTokenizerImpl *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setBufferSize(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "bufferSize", arg);
            return -1;
          }

          static PyObject *t_StandardTokenizerImpl_get__nextToken(t_StandardTokenizerImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNextToken());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/FieldCacheSource.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/FieldCache.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *FieldCacheSource::class$ = NULL;
            jmethodID *FieldCacheSource::mids$ = NULL;
            bool FieldCacheSource::live$ = false;

            jclass FieldCacheSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/FieldCacheSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
                mids$[mid_getFieldCache_a7c1cc27] = env->getMethodID(cls, "getFieldCache", "()Lorg/apache/lucene/search/FieldCache;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FieldCacheSource::FieldCacheSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            ::java::lang::String FieldCacheSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean FieldCacheSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::java::lang::String FieldCacheSource::getField() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
            }

            ::org::apache::lucene::search::FieldCache FieldCacheSource::getFieldCache() const
            {
              return ::org::apache::lucene::search::FieldCache(env->callObjectMethod(this$, mids$[mid_getFieldCache_a7c1cc27]));
            }

            jint FieldCacheSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_FieldCacheSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FieldCacheSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FieldCacheSource_init_(t_FieldCacheSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FieldCacheSource_description(t_FieldCacheSource *self, PyObject *args);
            static PyObject *t_FieldCacheSource_equals(t_FieldCacheSource *self, PyObject *args);
            static PyObject *t_FieldCacheSource_getField(t_FieldCacheSource *self);
            static PyObject *t_FieldCacheSource_getFieldCache(t_FieldCacheSource *self);
            static PyObject *t_FieldCacheSource_hashCode(t_FieldCacheSource *self, PyObject *args);
            static PyObject *t_FieldCacheSource_get__field(t_FieldCacheSource *self, void *data);
            static PyObject *t_FieldCacheSource_get__fieldCache(t_FieldCacheSource *self, void *data);
            static PyGetSetDef t_FieldCacheSource__fields_[] = {
              DECLARE_GET_FIELD(t_FieldCacheSource, field),
              DECLARE_GET_FIELD(t_FieldCacheSource, fieldCache),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FieldCacheSource__methods_[] = {
              DECLARE_METHOD(t_FieldCacheSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FieldCacheSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FieldCacheSource, description, METH_VARARGS),
              DECLARE_METHOD(t_FieldCacheSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_FieldCacheSource, getField, METH_NOARGS),
              DECLARE_METHOD(t_FieldCacheSource, getFieldCache, METH_NOARGS),
              DECLARE_METHOD(t_FieldCacheSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FieldCacheSource, t_FieldCacheSource, ::org::apache::lucene::queries::function::ValueSource, FieldCacheSource, t_FieldCacheSource_init_, 0, 0, t_FieldCacheSource__fields_, 0, 0);

            void t_FieldCacheSource::install(PyObject *module)
            {
              installType(&PY_TYPE(FieldCacheSource), module, "FieldCacheSource", 0);
            }

            void t_FieldCacheSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FieldCacheSource).tp_dict, "class_", make_descriptor(FieldCacheSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FieldCacheSource).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FieldCacheSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FieldCacheSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FieldCacheSource::initializeClass, 1)))
                return NULL;
              return t_FieldCacheSource::wrap_Object(FieldCacheSource(((t_FieldCacheSource *) arg)->object.this$));
            }
            static PyObject *t_FieldCacheSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FieldCacheSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FieldCacheSource_init_(t_FieldCacheSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              FieldCacheSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = FieldCacheSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FieldCacheSource_description(t_FieldCacheSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(FieldCacheSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_FieldCacheSource_equals(t_FieldCacheSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(FieldCacheSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_FieldCacheSource_getField(t_FieldCacheSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            static PyObject *t_FieldCacheSource_getFieldCache(t_FieldCacheSource *self)
            {
              ::org::apache::lucene::search::FieldCache result((jobject) NULL);
              OBJ_CALL(result = self->object.getFieldCache());
              return ::org::apache::lucene::search::t_FieldCache::wrap_Object(result);
            }

            static PyObject *t_FieldCacheSource_hashCode(t_FieldCacheSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(FieldCacheSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_FieldCacheSource_get__field(t_FieldCacheSource *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getField());
              return j2p(value);
            }

            static PyObject *t_FieldCacheSource_get__fieldCache(t_FieldCacheSource *self, void *data)
            {
              ::org::apache::lucene::search::FieldCache value((jobject) NULL);
              OBJ_CALL(value = self->object.getFieldCache());
              return ::org::apache::lucene::search::t_FieldCache::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterFields.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/util/Iterator.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterAtomicReader$FilterFields::class$ = NULL;
        jmethodID *FilterAtomicReader$FilterFields::mids$ = NULL;
        bool FilterAtomicReader$FilterFields::live$ = false;

        jclass FilterAtomicReader$FilterFields::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterAtomicReader$FilterFields");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a2a6a1f4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Fields;)V");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_terms_ee262ab4] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterAtomicReader$FilterFields::FilterAtomicReader$FilterFields(const ::org::apache::lucene::index::Fields & a0) : ::org::apache::lucene::index::Fields(env->newObject(initializeClass, &mids$, mid_init$_a2a6a1f4, a0.this$)) {}

        ::java::util::Iterator FilterAtomicReader$FilterFields::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        jint FilterAtomicReader$FilterFields::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        ::org::apache::lucene::index::Terms FilterAtomicReader$FilterFields::terms(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_ee262ab4], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterAtomicReader$FilterFields_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterAtomicReader$FilterFields_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterAtomicReader$FilterFields_init_(t_FilterAtomicReader$FilterFields *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterAtomicReader$FilterFields_iterator(t_FilterAtomicReader$FilterFields *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterFields_size(t_FilterAtomicReader$FilterFields *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterFields_terms(t_FilterAtomicReader$FilterFields *self, PyObject *args);

        static PyMethodDef t_FilterAtomicReader$FilterFields__methods_[] = {
          DECLARE_METHOD(t_FilterAtomicReader$FilterFields, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterFields, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterFields, iterator, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterFields, size, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterFields, terms, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterAtomicReader$FilterFields, t_FilterAtomicReader$FilterFields, ::org::apache::lucene::index::Fields, FilterAtomicReader$FilterFields, t_FilterAtomicReader$FilterFields_init_, ((PyObject *(*)(t_FilterAtomicReader$FilterFields *)) get_iterator< t_FilterAtomicReader$FilterFields >), 0, 0, 0, 0);

        void t_FilterAtomicReader$FilterFields::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterAtomicReader$FilterFields), module, "FilterAtomicReader$FilterFields", 0);
        }

        void t_FilterAtomicReader$FilterFields::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterFields).tp_dict, "class_", make_descriptor(FilterAtomicReader$FilterFields::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterFields).tp_dict, "wrapfn_", make_descriptor(t_FilterAtomicReader$FilterFields::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterFields).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterAtomicReader$FilterFields_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterAtomicReader$FilterFields::initializeClass, 1)))
            return NULL;
          return t_FilterAtomicReader$FilterFields::wrap_Object(FilterAtomicReader$FilterFields(((t_FilterAtomicReader$FilterFields *) arg)->object.this$));
        }
        static PyObject *t_FilterAtomicReader$FilterFields_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterAtomicReader$FilterFields::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterAtomicReader$FilterFields_init_(t_FilterAtomicReader$FilterFields *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Fields a0((jobject) NULL);
          FilterAtomicReader$FilterFields object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Fields::initializeClass, &a0))
          {
            INT_CALL(object = FilterAtomicReader$FilterFields(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterAtomicReader$FilterFields_iterator(t_FilterAtomicReader$FilterFields *self, PyObject *args)
        {
          ::java::util::Iterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::java::util::t_Iterator::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterFields), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterFields_size(t_FilterAtomicReader$FilterFields *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.size());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterFields), (PyObject *) self, "size", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterFields_terms(t_FilterAtomicReader$FilterFields *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.terms(a0));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterFields), (PyObject *) self, "terms", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Builder$Arc.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Builder$Arc::class$ = NULL;
          jmethodID *Builder$Arc::mids$ = NULL;
          jfieldID *Builder$Arc::fids$ = NULL;
          bool Builder$Arc::live$ = false;

          jclass Builder$Arc::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Builder$Arc");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_isFinal] = env->getFieldID(cls, "isFinal", "Z");
              fids$[fid_label] = env->getFieldID(cls, "label", "I");
              fids$[fid_nextFinalOutput] = env->getFieldID(cls, "nextFinalOutput", "Ljava/lang/Object;");
              fids$[fid_output] = env->getFieldID(cls, "output", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Builder$Arc::Builder$Arc() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean Builder$Arc::_get_isFinal() const
          {
            return env->getBooleanField(this$, fids$[fid_isFinal]);
          }

          void Builder$Arc::_set_isFinal(jboolean a0) const
          {
            env->setBooleanField(this$, fids$[fid_isFinal], a0);
          }

          jint Builder$Arc::_get_label() const
          {
            return env->getIntField(this$, fids$[fid_label]);
          }

          void Builder$Arc::_set_label(jint a0) const
          {
            env->setIntField(this$, fids$[fid_label], a0);
          }

          ::java::lang::Object Builder$Arc::_get_nextFinalOutput() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_nextFinalOutput]));
          }

          void Builder$Arc::_set_nextFinalOutput(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_nextFinalOutput], a0.this$);
          }

          ::java::lang::Object Builder$Arc::_get_output() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output]));
          }

          void Builder$Arc::_set_output(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_output], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Builder$Arc_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder$Arc_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder$Arc_of_(t_Builder$Arc *self, PyObject *args);
          static int t_Builder$Arc_init_(t_Builder$Arc *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Builder$Arc_get__isFinal(t_Builder$Arc *self, void *data);
          static int t_Builder$Arc_set__isFinal(t_Builder$Arc *self, PyObject *arg, void *data);
          static PyObject *t_Builder$Arc_get__label(t_Builder$Arc *self, void *data);
          static int t_Builder$Arc_set__label(t_Builder$Arc *self, PyObject *arg, void *data);
          static PyObject *t_Builder$Arc_get__nextFinalOutput(t_Builder$Arc *self, void *data);
          static int t_Builder$Arc_set__nextFinalOutput(t_Builder$Arc *self, PyObject *arg, void *data);
          static PyObject *t_Builder$Arc_get__output(t_Builder$Arc *self, void *data);
          static int t_Builder$Arc_set__output(t_Builder$Arc *self, PyObject *arg, void *data);

          static PyObject *t_Builder$Arc_get__parameters_(t_Builder$Arc *self, void *data);
          static PyGetSetDef t_Builder$Arc__fields_[] = {
            DECLARE_GETSET_FIELD(t_Builder$Arc, isFinal),
            DECLARE_GETSET_FIELD(t_Builder$Arc, label),
            DECLARE_GETSET_FIELD(t_Builder$Arc, nextFinalOutput),
            DECLARE_GETSET_FIELD(t_Builder$Arc, output),
            DECLARE_GET_FIELD(t_Builder$Arc, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Builder$Arc__methods_[] = {
            DECLARE_METHOD(t_Builder$Arc, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder$Arc, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder$Arc, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Builder$Arc, t_Builder$Arc, ::java::lang::Object, Builder$Arc, t_Builder$Arc_init_, 0, 0, t_Builder$Arc__fields_, 0, 0);
          PyObject *t_Builder$Arc::wrap_Object(const Builder$Arc& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder$Arc::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder$Arc *self = (t_Builder$Arc *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Builder$Arc::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder$Arc::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder$Arc *self = (t_Builder$Arc *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Builder$Arc::install(PyObject *module)
          {
            installType(&PY_TYPE(Builder$Arc), module, "Builder$Arc", 0);
          }

          void t_Builder$Arc::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Builder$Arc).tp_dict, "class_", make_descriptor(Builder$Arc::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Builder$Arc).tp_dict, "wrapfn_", make_descriptor(t_Builder$Arc::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Builder$Arc).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Builder$Arc_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Builder$Arc::initializeClass, 1)))
              return NULL;
            return t_Builder$Arc::wrap_Object(Builder$Arc(((t_Builder$Arc *) arg)->object.this$));
          }
          static PyObject *t_Builder$Arc_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Builder$Arc::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Builder$Arc_of_(t_Builder$Arc *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Builder$Arc_init_(t_Builder$Arc *self, PyObject *args, PyObject *kwds)
          {
            Builder$Arc object((jobject) NULL);

            INT_CALL(object = Builder$Arc());
            self->object = object;

            return 0;
          }
          static PyObject *t_Builder$Arc_get__parameters_(t_Builder$Arc *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Builder$Arc_get__isFinal(t_Builder$Arc *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_isFinal());
            Py_RETURN_BOOL(value);
          }
          static int t_Builder$Arc_set__isFinal(t_Builder$Arc *self, PyObject *arg, void *data)
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object._set_isFinal(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "isFinal", arg);
            return -1;
          }

          static PyObject *t_Builder$Arc_get__label(t_Builder$Arc *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_label());
            return PyInt_FromLong((long) value);
          }
          static int t_Builder$Arc_set__label(t_Builder$Arc *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_label(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "label", arg);
            return -1;
          }

          static PyObject *t_Builder$Arc_get__nextFinalOutput(t_Builder$Arc *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_nextFinalOutput());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_Builder$Arc_set__nextFinalOutput(t_Builder$Arc *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_nextFinalOutput(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "nextFinalOutput", arg);
            return -1;
          }

          static PyObject *t_Builder$Arc_get__output(t_Builder$Arc *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_Builder$Arc_set__output(t_Builder$Arc *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_output(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "output", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/DoubleDocValues.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/ValueSourceScorer.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *DoubleDocValues::class$ = NULL;
            jmethodID *DoubleDocValues::mids$ = NULL;
            bool DoubleDocValues::live$ = false;

            jclass DoubleDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/DoubleDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_boolVal_39c7bd30] = env->getMethodID(cls, "boolVal", "(I)Z");
                mids$[mid_byteVal_39c7bd28] = env->getMethodID(cls, "byteVal", "(I)B");
                mids$[mid_doubleVal_39c7bd2e] = env->getMethodID(cls, "doubleVal", "(I)D");
                mids$[mid_floatVal_39c7bd2c] = env->getMethodID(cls, "floatVal", "(I)F");
                mids$[mid_getRangeScorer_d201bc96] = env->getMethodID(cls, "getRangeScorer", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/queries/function/ValueSourceScorer;");
                mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_intVal_39c7bd23] = env->getMethodID(cls, "intVal", "(I)I");
                mids$[mid_longVal_39c7bd20] = env->getMethodID(cls, "longVal", "(I)J");
                mids$[mid_objectVal_29be6a55] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_shortVal_39c7bd39] = env->getMethodID(cls, "shortVal", "(I)S");
                mids$[mid_strVal_141401b3] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DoubleDocValues::DoubleDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            jboolean DoubleDocValues::boolVal(jint a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_boolVal_39c7bd30], a0);
            }

            jbyte DoubleDocValues::byteVal(jint a0) const
            {
              return env->callByteMethod(this$, mids$[mid_byteVal_39c7bd28], a0);
            }

            jdouble DoubleDocValues::doubleVal(jint a0) const
            {
              return env->callDoubleMethod(this$, mids$[mid_doubleVal_39c7bd2e], a0);
            }

            jfloat DoubleDocValues::floatVal(jint a0) const
            {
              return env->callFloatMethod(this$, mids$[mid_floatVal_39c7bd2c], a0);
            }

            ::org::apache::lucene::queries::function::ValueSourceScorer DoubleDocValues::getRangeScorer(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4) const
            {
              return ::org::apache::lucene::queries::function::ValueSourceScorer(env->callObjectMethod(this$, mids$[mid_getRangeScorer_d201bc96], a0.this$, a1.this$, a2.this$, a3, a4));
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller DoubleDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
            }

            jint DoubleDocValues::intVal(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_intVal_39c7bd23], a0);
            }

            jlong DoubleDocValues::longVal(jint a0) const
            {
              return env->callLongMethod(this$, mids$[mid_longVal_39c7bd20], a0);
            }

            ::java::lang::Object DoubleDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_29be6a55], a0));
            }

            jshort DoubleDocValues::shortVal(jint a0) const
            {
              return env->callShortMethod(this$, mids$[mid_shortVal_39c7bd39], a0);
            }

            ::java::lang::String DoubleDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_141401b3], a0));
            }

            ::java::lang::String DoubleDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_DoubleDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DoubleDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DoubleDocValues_init_(t_DoubleDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DoubleDocValues_boolVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_byteVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_doubleVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_floatVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_getRangeScorer(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_getValueFiller(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_intVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_longVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_objectVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_shortVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_strVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_toString(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_get__valueFiller(t_DoubleDocValues *self, void *data);
            static PyGetSetDef t_DoubleDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_DoubleDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DoubleDocValues__methods_[] = {
              DECLARE_METHOD(t_DoubleDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DoubleDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DoubleDocValues, boolVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, byteVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, doubleVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, floatVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, getRangeScorer, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, intVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, longVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, shortVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DoubleDocValues, t_DoubleDocValues, ::org::apache::lucene::queries::function::FunctionValues, DoubleDocValues, t_DoubleDocValues_init_, 0, 0, t_DoubleDocValues__fields_, 0, 0);

            void t_DoubleDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(DoubleDocValues), module, "DoubleDocValues", 0);
            }

            void t_DoubleDocValues::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DoubleDocValues).tp_dict, "class_", make_descriptor(DoubleDocValues::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DoubleDocValues).tp_dict, "wrapfn_", make_descriptor(t_DoubleDocValues::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DoubleDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DoubleDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DoubleDocValues::initializeClass, 1)))
                return NULL;
              return t_DoubleDocValues::wrap_Object(DoubleDocValues(((t_DoubleDocValues *) arg)->object.this$));
            }
            static PyObject *t_DoubleDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DoubleDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DoubleDocValues_init_(t_DoubleDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              DoubleDocValues object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = DoubleDocValues(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DoubleDocValues_boolVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.boolVal(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "boolVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_byteVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              jbyte result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.byteVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "byteVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_doubleVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              jdouble result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.doubleVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "doubleVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_floatVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              jfloat result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.floatVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "floatVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_getRangeScorer(t_DoubleDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              ::org::apache::lucene::queries::function::ValueSourceScorer result((jobject) NULL);

              if (!parseArgs(args, "kssZZ", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = self->object.getRangeScorer(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::queries::function::t_ValueSourceScorer::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "getRangeScorer", args, 2);
            }

            static PyObject *t_DoubleDocValues_getValueFiller(t_DoubleDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_DoubleDocValues_intVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.intVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "intVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_longVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              jlong result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.longVal(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "longVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_objectVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_shortVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              jshort result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.shortVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "shortVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_strVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_toString(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_DoubleDocValues_get__valueFiller(t_DoubleDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/LRUHashMap.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *LRUHashMap::class$ = NULL;
          jmethodID *LRUHashMap::mids$ = NULL;
          bool LRUHashMap::live$ = false;

          jclass LRUHashMap::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/LRUHashMap");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_clone_544babe9] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/facet/taxonomy/LRUHashMap;");
              mids$[mid_getMaxSize_54c6a179] = env->getMethodID(cls, "getMaxSize", "()I");
              mids$[mid_setMaxSize_39c7bd3c] = env->getMethodID(cls, "setMaxSize", "(I)V");
              mids$[mid_removeEldestEntry_8e61453a] = env->getMethodID(cls, "removeEldestEntry", "(Ljava/util/Map$Entry;)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LRUHashMap::LRUHashMap(jint a0) : ::java::util::LinkedHashMap(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          LRUHashMap LRUHashMap::clone() const
          {
            return LRUHashMap(env->callObjectMethod(this$, mids$[mid_clone_544babe9]));
          }

          jint LRUHashMap::getMaxSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxSize_54c6a179]);
          }

          void LRUHashMap::setMaxSize(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxSize_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_LRUHashMap_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LRUHashMap_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LRUHashMap_of_(t_LRUHashMap *self, PyObject *args);
          static int t_LRUHashMap_init_(t_LRUHashMap *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LRUHashMap_clone(t_LRUHashMap *self, PyObject *args);
          static PyObject *t_LRUHashMap_getMaxSize(t_LRUHashMap *self);
          static PyObject *t_LRUHashMap_setMaxSize(t_LRUHashMap *self, PyObject *arg);
          static PyObject *t_LRUHashMap_get__maxSize(t_LRUHashMap *self, void *data);
          static int t_LRUHashMap_set__maxSize(t_LRUHashMap *self, PyObject *arg, void *data);
          static PyObject *t_LRUHashMap_get__parameters_(t_LRUHashMap *self, void *data);
          static PyGetSetDef t_LRUHashMap__fields_[] = {
            DECLARE_GETSET_FIELD(t_LRUHashMap, maxSize),
            DECLARE_GET_FIELD(t_LRUHashMap, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LRUHashMap__methods_[] = {
            DECLARE_METHOD(t_LRUHashMap, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LRUHashMap, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LRUHashMap, of_, METH_VARARGS),
            DECLARE_METHOD(t_LRUHashMap, clone, METH_VARARGS),
            DECLARE_METHOD(t_LRUHashMap, getMaxSize, METH_NOARGS),
            DECLARE_METHOD(t_LRUHashMap, setMaxSize, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LRUHashMap, t_LRUHashMap, ::java::util::LinkedHashMap, LRUHashMap, t_LRUHashMap_init_, 0, 0, t_LRUHashMap__fields_, 0, 0);
          PyObject *t_LRUHashMap::wrap_Object(const LRUHashMap& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_LRUHashMap::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_LRUHashMap *self = (t_LRUHashMap *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_LRUHashMap::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_LRUHashMap::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_LRUHashMap *self = (t_LRUHashMap *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_LRUHashMap::install(PyObject *module)
          {
            installType(&PY_TYPE(LRUHashMap), module, "LRUHashMap", 0);
          }

          void t_LRUHashMap::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LRUHashMap).tp_dict, "class_", make_descriptor(LRUHashMap::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LRUHashMap).tp_dict, "wrapfn_", make_descriptor(t_LRUHashMap::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LRUHashMap).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LRUHashMap_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LRUHashMap::initializeClass, 1)))
              return NULL;
            return t_LRUHashMap::wrap_Object(LRUHashMap(((t_LRUHashMap *) arg)->object.this$));
          }
          static PyObject *t_LRUHashMap_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LRUHashMap::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_LRUHashMap_of_(t_LRUHashMap *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_LRUHashMap_init_(t_LRUHashMap *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            LRUHashMap object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = LRUHashMap(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LRUHashMap_clone(t_LRUHashMap *self, PyObject *args)
          {
            LRUHashMap result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_LRUHashMap::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            return callSuper(&PY_TYPE(LRUHashMap), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_LRUHashMap_getMaxSize(t_LRUHashMap *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_LRUHashMap_setMaxSize(t_LRUHashMap *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxSize(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxSize", arg);
            return NULL;
          }
          static PyObject *t_LRUHashMap_get__parameters_(t_LRUHashMap *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_LRUHashMap_get__maxSize(t_LRUHashMap *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxSize());
            return PyInt_FromLong((long) value);
          }
          static int t_LRUHashMap_set__maxSize(t_LRUHashMap *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxSize(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxSize", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/German2Stemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *German2Stemmer::class$ = NULL;
        jmethodID *German2Stemmer::mids$ = NULL;
        bool German2Stemmer::live$ = false;

        jclass German2Stemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/German2Stemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        German2Stemmer::German2Stemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean German2Stemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint German2Stemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean German2Stemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_German2Stemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_German2Stemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_German2Stemmer_init_(t_German2Stemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_German2Stemmer_equals(t_German2Stemmer *self, PyObject *args);
        static PyObject *t_German2Stemmer_hashCode(t_German2Stemmer *self, PyObject *args);
        static PyObject *t_German2Stemmer_stem(t_German2Stemmer *self, PyObject *args);

        static PyMethodDef t_German2Stemmer__methods_[] = {
          DECLARE_METHOD(t_German2Stemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_German2Stemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_German2Stemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_German2Stemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_German2Stemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(German2Stemmer, t_German2Stemmer, ::org::tartarus::snowball::SnowballProgram, German2Stemmer, t_German2Stemmer_init_, 0, 0, 0, 0, 0);

        void t_German2Stemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(German2Stemmer), module, "German2Stemmer", 0);
        }

        void t_German2Stemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(German2Stemmer).tp_dict, "class_", make_descriptor(German2Stemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(German2Stemmer).tp_dict, "wrapfn_", make_descriptor(t_German2Stemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(German2Stemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_German2Stemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, German2Stemmer::initializeClass, 1)))
            return NULL;
          return t_German2Stemmer::wrap_Object(German2Stemmer(((t_German2Stemmer *) arg)->object.this$));
        }
        static PyObject *t_German2Stemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, German2Stemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_German2Stemmer_init_(t_German2Stemmer *self, PyObject *args, PyObject *kwds)
        {
          German2Stemmer object((jobject) NULL);

          INT_CALL(object = German2Stemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_German2Stemmer_equals(t_German2Stemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(German2Stemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_German2Stemmer_hashCode(t_German2Stemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(German2Stemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_German2Stemmer_stem(t_German2Stemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(German2Stemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene46/Lucene46FieldInfosFormat.h"
#include "org/apache/lucene/codecs/FieldInfosWriter.h"
#include "org/apache/lucene/codecs/FieldInfosReader.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {

          ::java::lang::Class *Lucene46FieldInfosFormat::class$ = NULL;
          jmethodID *Lucene46FieldInfosFormat::mids$ = NULL;
          bool Lucene46FieldInfosFormat::live$ = false;

          jclass Lucene46FieldInfosFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene46/Lucene46FieldInfosFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getFieldInfosReader_6ecd5494] = env->getMethodID(cls, "getFieldInfosReader", "()Lorg/apache/lucene/codecs/FieldInfosReader;");
              mids$[mid_getFieldInfosWriter_211ffa60] = env->getMethodID(cls, "getFieldInfosWriter", "()Lorg/apache/lucene/codecs/FieldInfosWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene46FieldInfosFormat::Lucene46FieldInfosFormat() : ::org::apache::lucene::codecs::FieldInfosFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::FieldInfosReader Lucene46FieldInfosFormat::getFieldInfosReader() const
          {
            return ::org::apache::lucene::codecs::FieldInfosReader(env->callObjectMethod(this$, mids$[mid_getFieldInfosReader_6ecd5494]));
          }

          ::org::apache::lucene::codecs::FieldInfosWriter Lucene46FieldInfosFormat::getFieldInfosWriter() const
          {
            return ::org::apache::lucene::codecs::FieldInfosWriter(env->callObjectMethod(this$, mids$[mid_getFieldInfosWriter_211ffa60]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {
          static PyObject *t_Lucene46FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene46FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene46FieldInfosFormat_init_(t_Lucene46FieldInfosFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene46FieldInfosFormat_getFieldInfosReader(t_Lucene46FieldInfosFormat *self, PyObject *args);
          static PyObject *t_Lucene46FieldInfosFormat_getFieldInfosWriter(t_Lucene46FieldInfosFormat *self, PyObject *args);
          static PyObject *t_Lucene46FieldInfosFormat_get__fieldInfosReader(t_Lucene46FieldInfosFormat *self, void *data);
          static PyObject *t_Lucene46FieldInfosFormat_get__fieldInfosWriter(t_Lucene46FieldInfosFormat *self, void *data);
          static PyGetSetDef t_Lucene46FieldInfosFormat__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene46FieldInfosFormat, fieldInfosReader),
            DECLARE_GET_FIELD(t_Lucene46FieldInfosFormat, fieldInfosWriter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene46FieldInfosFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene46FieldInfosFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46FieldInfosFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46FieldInfosFormat, getFieldInfosReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46FieldInfosFormat, getFieldInfosWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene46FieldInfosFormat, t_Lucene46FieldInfosFormat, ::org::apache::lucene::codecs::FieldInfosFormat, Lucene46FieldInfosFormat, t_Lucene46FieldInfosFormat_init_, 0, 0, t_Lucene46FieldInfosFormat__fields_, 0, 0);

          void t_Lucene46FieldInfosFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene46FieldInfosFormat), module, "Lucene46FieldInfosFormat", 0);
          }

          void t_Lucene46FieldInfosFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene46FieldInfosFormat).tp_dict, "class_", make_descriptor(Lucene46FieldInfosFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene46FieldInfosFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene46FieldInfosFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene46FieldInfosFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene46FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene46FieldInfosFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene46FieldInfosFormat::wrap_Object(Lucene46FieldInfosFormat(((t_Lucene46FieldInfosFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene46FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene46FieldInfosFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene46FieldInfosFormat_init_(t_Lucene46FieldInfosFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene46FieldInfosFormat object((jobject) NULL);

            INT_CALL(object = Lucene46FieldInfosFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene46FieldInfosFormat_getFieldInfosReader(t_Lucene46FieldInfosFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getFieldInfosReader());
              return ::org::apache::lucene::codecs::t_FieldInfosReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46FieldInfosFormat), (PyObject *) self, "getFieldInfosReader", args, 2);
          }

          static PyObject *t_Lucene46FieldInfosFormat_getFieldInfosWriter(t_Lucene46FieldInfosFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosWriter result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getFieldInfosWriter());
              return ::org::apache::lucene::codecs::t_FieldInfosWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46FieldInfosFormat), (PyObject *) self, "getFieldInfosWriter", args, 2);
          }

          static PyObject *t_Lucene46FieldInfosFormat_get__fieldInfosReader(t_Lucene46FieldInfosFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::FieldInfosReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldInfosReader());
            return ::org::apache::lucene::codecs::t_FieldInfosReader::wrap_Object(value);
          }

          static PyObject *t_Lucene46FieldInfosFormat_get__fieldInfosWriter(t_Lucene46FieldInfosFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::FieldInfosWriter value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldInfosWriter());
            return ::org::apache::lucene::codecs::t_FieldInfosWriter::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/BinaryDocValuesField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *BinaryDocValuesField::class$ = NULL;
        jmethodID *BinaryDocValuesField::mids$ = NULL;
        bool BinaryDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *BinaryDocValuesField::TYPE = NULL;

        jclass BinaryDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/BinaryDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_43cce44e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BinaryDocValuesField::BinaryDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_43cce44e, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_BinaryDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BinaryDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BinaryDocValuesField_init_(t_BinaryDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_BinaryDocValuesField__methods_[] = {
          DECLARE_METHOD(t_BinaryDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BinaryDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BinaryDocValuesField, t_BinaryDocValuesField, ::org::apache::lucene::document::Field, BinaryDocValuesField, t_BinaryDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_BinaryDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(BinaryDocValuesField), module, "BinaryDocValuesField", 0);
        }

        void t_BinaryDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BinaryDocValuesField).tp_dict, "class_", make_descriptor(BinaryDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BinaryDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_BinaryDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BinaryDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(BinaryDocValuesField::initializeClass);
          PyDict_SetItemString(PY_TYPE(BinaryDocValuesField).tp_dict, "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*BinaryDocValuesField::TYPE)));
        }

        static PyObject *t_BinaryDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BinaryDocValuesField::initializeClass, 1)))
            return NULL;
          return t_BinaryDocValuesField::wrap_Object(BinaryDocValuesField(((t_BinaryDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_BinaryDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BinaryDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BinaryDocValuesField_init_(t_BinaryDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          BinaryDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            INT_CALL(object = BinaryDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/Analyzer$GlobalReuseStrategy.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *Analyzer$GlobalReuseStrategy::class$ = NULL;
        jmethodID *Analyzer$GlobalReuseStrategy::mids$ = NULL;
        bool Analyzer$GlobalReuseStrategy::live$ = false;

        jclass Analyzer$GlobalReuseStrategy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/Analyzer$GlobalReuseStrategy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getReusableComponents_19769f4a] = env->getMethodID(cls, "getReusableComponents", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_setReusableComponents_66577a3f] = env->getMethodID(cls, "setReusableComponents", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Analyzer$GlobalReuseStrategy::Analyzer$GlobalReuseStrategy() : ::org::apache::lucene::analysis::Analyzer$ReuseStrategy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents Analyzer$GlobalReuseStrategy::getReusableComponents(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents(env->callObjectMethod(this$, mids$[mid_getReusableComponents_19769f4a], a0.this$, a1.this$));
        }

        void Analyzer$GlobalReuseStrategy::setReusableComponents(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_setReusableComponents_66577a3f], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_Analyzer$GlobalReuseStrategy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Analyzer$GlobalReuseStrategy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Analyzer$GlobalReuseStrategy_init_(t_Analyzer$GlobalReuseStrategy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Analyzer$GlobalReuseStrategy_getReusableComponents(t_Analyzer$GlobalReuseStrategy *self, PyObject *args);
        static PyObject *t_Analyzer$GlobalReuseStrategy_setReusableComponents(t_Analyzer$GlobalReuseStrategy *self, PyObject *args);

        static PyMethodDef t_Analyzer$GlobalReuseStrategy__methods_[] = {
          DECLARE_METHOD(t_Analyzer$GlobalReuseStrategy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$GlobalReuseStrategy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$GlobalReuseStrategy, getReusableComponents, METH_VARARGS),
          DECLARE_METHOD(t_Analyzer$GlobalReuseStrategy, setReusableComponents, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Analyzer$GlobalReuseStrategy, t_Analyzer$GlobalReuseStrategy, ::org::apache::lucene::analysis::Analyzer$ReuseStrategy, Analyzer$GlobalReuseStrategy, t_Analyzer$GlobalReuseStrategy_init_, 0, 0, 0, 0, 0);

        void t_Analyzer$GlobalReuseStrategy::install(PyObject *module)
        {
          installType(&PY_TYPE(Analyzer$GlobalReuseStrategy), module, "Analyzer$GlobalReuseStrategy", 0);
        }

        void t_Analyzer$GlobalReuseStrategy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Analyzer$GlobalReuseStrategy).tp_dict, "class_", make_descriptor(Analyzer$GlobalReuseStrategy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Analyzer$GlobalReuseStrategy).tp_dict, "wrapfn_", make_descriptor(t_Analyzer$GlobalReuseStrategy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Analyzer$GlobalReuseStrategy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Analyzer$GlobalReuseStrategy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Analyzer$GlobalReuseStrategy::initializeClass, 1)))
            return NULL;
          return t_Analyzer$GlobalReuseStrategy::wrap_Object(Analyzer$GlobalReuseStrategy(((t_Analyzer$GlobalReuseStrategy *) arg)->object.this$));
        }
        static PyObject *t_Analyzer$GlobalReuseStrategy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Analyzer$GlobalReuseStrategy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Analyzer$GlobalReuseStrategy_init_(t_Analyzer$GlobalReuseStrategy *self, PyObject *args, PyObject *kwds)
        {
          Analyzer$GlobalReuseStrategy object((jobject) NULL);

          INT_CALL(object = Analyzer$GlobalReuseStrategy());
          self->object = object;

          return 0;
        }

        static PyObject *t_Analyzer$GlobalReuseStrategy_getReusableComponents(t_Analyzer$GlobalReuseStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getReusableComponents(a0, a1));
            return ::org::apache::lucene::analysis::t_Analyzer$TokenStreamComponents::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(Analyzer$GlobalReuseStrategy), (PyObject *) self, "getReusableComponents", args, 2);
        }

        static PyObject *t_Analyzer$GlobalReuseStrategy_setReusableComponents(t_Analyzer$GlobalReuseStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents a2((jobject) NULL);

          if (!parseArgs(args, "ksk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.setReusableComponents(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(Analyzer$GlobalReuseStrategy), (PyObject *) self, "setReusableComponents", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/TruncateTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *TruncateTokenFilter::class$ = NULL;
          jmethodID *TruncateTokenFilter::mids$ = NULL;
          bool TruncateTokenFilter::live$ = false;

          jclass TruncateTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/TruncateTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TruncateTokenFilter::TruncateTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          jboolean TruncateTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_TruncateTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TruncateTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TruncateTokenFilter_init_(t_TruncateTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TruncateTokenFilter_incrementToken(t_TruncateTokenFilter *self, PyObject *args);

          static PyMethodDef t_TruncateTokenFilter__methods_[] = {
            DECLARE_METHOD(t_TruncateTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TruncateTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TruncateTokenFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TruncateTokenFilter, t_TruncateTokenFilter, ::org::apache::lucene::analysis::TokenFilter, TruncateTokenFilter, t_TruncateTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_TruncateTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TruncateTokenFilter), module, "TruncateTokenFilter", 0);
          }

          void t_TruncateTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TruncateTokenFilter).tp_dict, "class_", make_descriptor(TruncateTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TruncateTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_TruncateTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TruncateTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TruncateTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TruncateTokenFilter::initializeClass, 1)))
              return NULL;
            return t_TruncateTokenFilter::wrap_Object(TruncateTokenFilter(((t_TruncateTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_TruncateTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TruncateTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TruncateTokenFilter_init_(t_TruncateTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            jint a1;
            TruncateTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              INT_CALL(object = TruncateTokenFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TruncateTokenFilter_incrementToken(t_TruncateTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TruncateTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergePolicy$MergeSpecification.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/MergePolicy$OneMerge.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergePolicy$MergeSpecification::class$ = NULL;
        jmethodID *MergePolicy$MergeSpecification::mids$ = NULL;
        jfieldID *MergePolicy$MergeSpecification::fids$ = NULL;
        bool MergePolicy$MergeSpecification::live$ = false;

        jclass MergePolicy$MergeSpecification::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergePolicy$MergeSpecification");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_54badd95] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/MergePolicy$OneMerge;)V");
            mids$[mid_segString_0451c495] = env->getMethodID(cls, "segString", "(Lorg/apache/lucene/store/Directory;)Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_merges] = env->getFieldID(cls, "merges", "Ljava/util/List;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergePolicy$MergeSpecification::MergePolicy$MergeSpecification() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void MergePolicy$MergeSpecification::add(const ::org::apache::lucene::index::MergePolicy$OneMerge & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_54badd95], a0.this$);
        }

        ::java::lang::String MergePolicy$MergeSpecification::segString(const ::org::apache::lucene::store::Directory & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_segString_0451c495], a0.this$));
        }

        ::java::util::List MergePolicy$MergeSpecification::_get_merges() const
        {
          return ::java::util::List(env->getObjectField(this$, fids$[fid_merges]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergePolicy$MergeSpecification_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy$MergeSpecification_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergePolicy$MergeSpecification_init_(t_MergePolicy$MergeSpecification *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergePolicy$MergeSpecification_add(t_MergePolicy$MergeSpecification *self, PyObject *arg);
        static PyObject *t_MergePolicy$MergeSpecification_segString(t_MergePolicy$MergeSpecification *self, PyObject *arg);
        static PyObject *t_MergePolicy$MergeSpecification_get__merges(t_MergePolicy$MergeSpecification *self, void *data);

        static PyGetSetDef t_MergePolicy$MergeSpecification__fields_[] = {
          DECLARE_GET_FIELD(t_MergePolicy$MergeSpecification, merges),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergePolicy$MergeSpecification__methods_[] = {
          DECLARE_METHOD(t_MergePolicy$MergeSpecification, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$MergeSpecification, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$MergeSpecification, add, METH_O),
          DECLARE_METHOD(t_MergePolicy$MergeSpecification, segString, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergePolicy$MergeSpecification, t_MergePolicy$MergeSpecification, ::java::lang::Object, MergePolicy$MergeSpecification, t_MergePolicy$MergeSpecification_init_, 0, 0, t_MergePolicy$MergeSpecification__fields_, 0, 0);

        void t_MergePolicy$MergeSpecification::install(PyObject *module)
        {
          installType(&PY_TYPE(MergePolicy$MergeSpecification), module, "MergePolicy$MergeSpecification", 0);
        }

        void t_MergePolicy$MergeSpecification::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeSpecification).tp_dict, "class_", make_descriptor(MergePolicy$MergeSpecification::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeSpecification).tp_dict, "wrapfn_", make_descriptor(t_MergePolicy$MergeSpecification::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeSpecification).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergePolicy$MergeSpecification_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergePolicy$MergeSpecification::initializeClass, 1)))
            return NULL;
          return t_MergePolicy$MergeSpecification::wrap_Object(MergePolicy$MergeSpecification(((t_MergePolicy$MergeSpecification *) arg)->object.this$));
        }
        static PyObject *t_MergePolicy$MergeSpecification_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergePolicy$MergeSpecification::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergePolicy$MergeSpecification_init_(t_MergePolicy$MergeSpecification *self, PyObject *args, PyObject *kwds)
        {
          MergePolicy$MergeSpecification object((jobject) NULL);

          INT_CALL(object = MergePolicy$MergeSpecification());
          self->object = object;

          return 0;
        }

        static PyObject *t_MergePolicy$MergeSpecification_add(t_MergePolicy$MergeSpecification *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergePolicy$OneMerge a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergePolicy$OneMerge::initializeClass, &a0))
          {
            OBJ_CALL(self->object.add(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$MergeSpecification_segString(t_MergePolicy$MergeSpecification *self, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.segString(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "segString", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$MergeSpecification_get__merges(t_MergePolicy$MergeSpecification *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object._get_merges());
          return ::java::util::t_List::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/BooleanSingleChildOptimizationQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *BooleanSingleChildOptimizationQueryNodeProcessor::class$ = NULL;
              jmethodID *BooleanSingleChildOptimizationQueryNodeProcessor::mids$ = NULL;
              bool BooleanSingleChildOptimizationQueryNodeProcessor::live$ = false;

              jclass BooleanSingleChildOptimizationQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/BooleanSingleChildOptimizationQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BooleanSingleChildOptimizationQueryNodeProcessor::BooleanSingleChildOptimizationQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_BooleanSingleChildOptimizationQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BooleanSingleChildOptimizationQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BooleanSingleChildOptimizationQueryNodeProcessor_init_(t_BooleanSingleChildOptimizationQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_BooleanSingleChildOptimizationQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_BooleanSingleChildOptimizationQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanSingleChildOptimizationQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BooleanSingleChildOptimizationQueryNodeProcessor, t_BooleanSingleChildOptimizationQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, BooleanSingleChildOptimizationQueryNodeProcessor, t_BooleanSingleChildOptimizationQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_BooleanSingleChildOptimizationQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(BooleanSingleChildOptimizationQueryNodeProcessor), module, "BooleanSingleChildOptimizationQueryNodeProcessor", 0);
              }

              void t_BooleanSingleChildOptimizationQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BooleanSingleChildOptimizationQueryNodeProcessor).tp_dict, "class_", make_descriptor(BooleanSingleChildOptimizationQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BooleanSingleChildOptimizationQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_BooleanSingleChildOptimizationQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BooleanSingleChildOptimizationQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BooleanSingleChildOptimizationQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BooleanSingleChildOptimizationQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_BooleanSingleChildOptimizationQueryNodeProcessor::wrap_Object(BooleanSingleChildOptimizationQueryNodeProcessor(((t_BooleanSingleChildOptimizationQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_BooleanSingleChildOptimizationQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BooleanSingleChildOptimizationQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BooleanSingleChildOptimizationQueryNodeProcessor_init_(t_BooleanSingleChildOptimizationQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                BooleanSingleChildOptimizationQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = BooleanSingleChildOptimizationQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$LongParser.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$LongParser::class$ = NULL;
        jmethodID *FieldCache$LongParser::mids$ = NULL;
        bool FieldCache$LongParser::live$ = false;

        jclass FieldCache$LongParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$LongParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_parseLong_7bc03dd8] = env->getMethodID(cls, "parseLong", "(Lorg/apache/lucene/util/BytesRef;)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong FieldCache$LongParser::parseLong(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_parseLong_7bc03dd8], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$LongParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$LongParser_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$LongParser_parseLong(t_FieldCache$LongParser *self, PyObject *arg);

        static PyMethodDef t_FieldCache$LongParser__methods_[] = {
          DECLARE_METHOD(t_FieldCache$LongParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$LongParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$LongParser, parseLong, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$LongParser, t_FieldCache$LongParser, ::org::apache::lucene::search::FieldCache$Parser, FieldCache$LongParser, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldCache$LongParser::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$LongParser), module, "FieldCache$LongParser", 0);
        }

        void t_FieldCache$LongParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$LongParser).tp_dict, "class_", make_descriptor(FieldCache$LongParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$LongParser).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$LongParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$LongParser).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$LongParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$LongParser::initializeClass, 1)))
            return NULL;
          return t_FieldCache$LongParser::wrap_Object(FieldCache$LongParser(((t_FieldCache$LongParser *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$LongParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$LongParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCache$LongParser_parseLong(t_FieldCache$LongParser *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.parseLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "parseLong", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/lang/Class.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *DirectoryReader::class$ = NULL;
        jmethodID *DirectoryReader::mids$ = NULL;
        bool DirectoryReader::live$ = false;
        jint DirectoryReader::DEFAULT_TERMS_INDEX_DIVISOR = (jint) 0;

        jclass DirectoryReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/DirectoryReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_directory_1f3934bb] = env->getMethodID(cls, "directory", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getIndexCommit_09307276] = env->getMethodID(cls, "getIndexCommit", "()Lorg/apache/lucene/index/IndexCommit;");
            mids$[mid_getVersion_54c6a17a] = env->getMethodID(cls, "getVersion", "()J");
            mids$[mid_indexExists_2e261efe] = env->getStaticMethodID(cls, "indexExists", "(Lorg/apache/lucene/store/Directory;)Z");
            mids$[mid_isCurrent_54c6a16a] = env->getMethodID(cls, "isCurrent", "()Z");
            mids$[mid_listCommits_a0981b9a] = env->getStaticMethodID(cls, "listCommits", "(Lorg/apache/lucene/store/Directory;)Ljava/util/List;");
            mids$[mid_open_109b8ac7] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/store/Directory;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_26fd6272] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/index/IndexCommit;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_e4ee522b] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/index/IndexWriter;Z)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_d7b74111] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/store/Directory;I)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_13bade12] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/index/IndexCommit;I)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_openIfChanged_5bb3c60f] = env->getStaticMethodID(cls, "openIfChanged", "(Lorg/apache/lucene/index/DirectoryReader;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_openIfChanged_bf41593a] = env->getStaticMethodID(cls, "openIfChanged", "(Lorg/apache/lucene/index/DirectoryReader;Lorg/apache/lucene/index/IndexCommit;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_openIfChanged_dbc531b7] = env->getStaticMethodID(cls, "openIfChanged", "(Lorg/apache/lucene/index/DirectoryReader;Lorg/apache/lucene/index/IndexWriter;Z)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doOpenIfChanged_1de06693] = env->getMethodID(cls, "doOpenIfChanged", "()Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doOpenIfChanged_26fd6272] = env->getMethodID(cls, "doOpenIfChanged", "(Lorg/apache/lucene/index/IndexCommit;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doOpenIfChanged_e4ee522b] = env->getMethodID(cls, "doOpenIfChanged", "(Lorg/apache/lucene/index/IndexWriter;Z)Lorg/apache/lucene/index/DirectoryReader;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_TERMS_INDEX_DIVISOR = env->getStaticIntField(cls, "DEFAULT_TERMS_INDEX_DIVISOR");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::store::Directory DirectoryReader::directory() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_directory_1f3934bb]));
        }

        ::org::apache::lucene::index::IndexCommit DirectoryReader::getIndexCommit() const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_getIndexCommit_09307276]));
        }

        jlong DirectoryReader::getVersion() const
        {
          return env->callLongMethod(this$, mids$[mid_getVersion_54c6a17a]);
        }

        jboolean DirectoryReader::indexExists(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_indexExists_2e261efe], a0.this$);
        }

        jboolean DirectoryReader::isCurrent() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCurrent_54c6a16a]);
        }

        ::java::util::List DirectoryReader::listCommits(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_listCommits_a0981b9a], a0.this$));
        }

        DirectoryReader DirectoryReader::open(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_109b8ac7], a0.this$));
        }

        DirectoryReader DirectoryReader::open(const ::org::apache::lucene::index::IndexCommit & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_26fd6272], a0.this$));
        }

        DirectoryReader DirectoryReader::open(const ::org::apache::lucene::index::IndexWriter & a0, jboolean a1)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_e4ee522b], a0.this$, a1));
        }

        DirectoryReader DirectoryReader::open(const ::org::apache::lucene::store::Directory & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_d7b74111], a0.this$, a1));
        }

        DirectoryReader DirectoryReader::open(const ::org::apache::lucene::index::IndexCommit & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_13bade12], a0.this$, a1));
        }

        DirectoryReader DirectoryReader::openIfChanged(const DirectoryReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_openIfChanged_5bb3c60f], a0.this$));
        }

        DirectoryReader DirectoryReader::openIfChanged(const DirectoryReader & a0, const ::org::apache::lucene::index::IndexCommit & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_openIfChanged_bf41593a], a0.this$, a1.this$));
        }

        DirectoryReader DirectoryReader::openIfChanged(const DirectoryReader & a0, const ::org::apache::lucene::index::IndexWriter & a1, jboolean a2)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_openIfChanged_dbc531b7], a0.this$, a1.this$, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_DirectoryReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DirectoryReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DirectoryReader_of_(t_DirectoryReader *self, PyObject *args);
        static PyObject *t_DirectoryReader_directory(t_DirectoryReader *self);
        static PyObject *t_DirectoryReader_getIndexCommit(t_DirectoryReader *self);
        static PyObject *t_DirectoryReader_getVersion(t_DirectoryReader *self);
        static PyObject *t_DirectoryReader_indexExists(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DirectoryReader_isCurrent(t_DirectoryReader *self);
        static PyObject *t_DirectoryReader_listCommits(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DirectoryReader_open(PyTypeObject *type, PyObject *args);
        static PyObject *t_DirectoryReader_openIfChanged(PyTypeObject *type, PyObject *args);
        static PyObject *t_DirectoryReader_get__current(t_DirectoryReader *self, void *data);
        static PyObject *t_DirectoryReader_get__indexCommit(t_DirectoryReader *self, void *data);
        static PyObject *t_DirectoryReader_get__version(t_DirectoryReader *self, void *data);
        static PyObject *t_DirectoryReader_get__parameters_(t_DirectoryReader *self, void *data);
        static PyGetSetDef t_DirectoryReader__fields_[] = {
          DECLARE_GET_FIELD(t_DirectoryReader, current),
          DECLARE_GET_FIELD(t_DirectoryReader, indexCommit),
          DECLARE_GET_FIELD(t_DirectoryReader, version),
          DECLARE_GET_FIELD(t_DirectoryReader, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DirectoryReader__methods_[] = {
          DECLARE_METHOD(t_DirectoryReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DirectoryReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DirectoryReader, of_, METH_VARARGS),
          DECLARE_METHOD(t_DirectoryReader, directory, METH_NOARGS),
          DECLARE_METHOD(t_DirectoryReader, getIndexCommit, METH_NOARGS),
          DECLARE_METHOD(t_DirectoryReader, getVersion, METH_NOARGS),
          DECLARE_METHOD(t_DirectoryReader, indexExists, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DirectoryReader, isCurrent, METH_NOARGS),
          DECLARE_METHOD(t_DirectoryReader, listCommits, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DirectoryReader, open, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DirectoryReader, openIfChanged, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DirectoryReader, t_DirectoryReader, ::org::apache::lucene::index::BaseCompositeReader, DirectoryReader, abstract_init, 0, 0, t_DirectoryReader__fields_, 0, 0);
        PyObject *t_DirectoryReader::wrap_Object(const DirectoryReader& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DirectoryReader::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DirectoryReader *self = (t_DirectoryReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_DirectoryReader::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DirectoryReader::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DirectoryReader *self = (t_DirectoryReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_DirectoryReader::install(PyObject *module)
        {
          installType(&PY_TYPE(DirectoryReader), module, "DirectoryReader", 0);
        }

        void t_DirectoryReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DirectoryReader).tp_dict, "class_", make_descriptor(DirectoryReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DirectoryReader).tp_dict, "wrapfn_", make_descriptor(t_DirectoryReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DirectoryReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DirectoryReader::initializeClass);
          PyDict_SetItemString(PY_TYPE(DirectoryReader).tp_dict, "DEFAULT_TERMS_INDEX_DIVISOR", make_descriptor(DirectoryReader::DEFAULT_TERMS_INDEX_DIVISOR));
        }

        static PyObject *t_DirectoryReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DirectoryReader::initializeClass, 1)))
            return NULL;
          return t_DirectoryReader::wrap_Object(DirectoryReader(((t_DirectoryReader *) arg)->object.this$));
        }
        static PyObject *t_DirectoryReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DirectoryReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DirectoryReader_of_(t_DirectoryReader *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_DirectoryReader_directory(t_DirectoryReader *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.directory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_DirectoryReader_getIndexCommit(t_DirectoryReader *self)
        {
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexCommit());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
        }

        static PyObject *t_DirectoryReader_getVersion(t_DirectoryReader *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getVersion());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_DirectoryReader_indexExists(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::indexExists(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "indexExists", arg);
          return NULL;
        }

        static PyObject *t_DirectoryReader_isCurrent(t_DirectoryReader *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isCurrent());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_DirectoryReader_listCommits(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::util::List result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::listCommits(a0));
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(IndexCommit));
          }

          PyErr_SetArgsError(type, "listCommits", arg);
          return NULL;
        }

        static PyObject *t_DirectoryReader_open(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::open(a0));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::open(a0));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
              jboolean a1;
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "kZ", ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::open(a0, a1));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              jint a1;
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::open(a0, a1));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);
              jint a1;
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::open(a0, a1));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
          }

          return callSuper(type, "open", args, 2);
        }

        static PyObject *t_DirectoryReader_openIfChanged(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              DirectoryReader a0((jobject) NULL);
              PyTypeObject **p0;
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "K", DirectoryReader::initializeClass, &a0, &p0, t_DirectoryReader::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::openIfChanged(a0));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              DirectoryReader a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::IndexCommit a1((jobject) NULL);
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "Kk", DirectoryReader::initializeClass, ::org::apache::lucene::index::IndexCommit::initializeClass, &a0, &p0, t_DirectoryReader::parameters_, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::openIfChanged(a0, a1));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              DirectoryReader a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::IndexWriter a1((jobject) NULL);
              jboolean a2;
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "KkZ", DirectoryReader::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &p0, t_DirectoryReader::parameters_, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::openIfChanged(a0, a1, a2));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "openIfChanged", args);
          return NULL;
        }
        static PyObject *t_DirectoryReader_get__parameters_(t_DirectoryReader *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_DirectoryReader_get__current(t_DirectoryReader *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCurrent());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_DirectoryReader_get__indexCommit(t_DirectoryReader *self, void *data)
        {
          ::org::apache::lucene::index::IndexCommit value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexCommit());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(value);
        }

        static PyObject *t_DirectoryReader_get__version(t_DirectoryReader *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getVersion());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/MappingCharFilterFactory.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *MappingCharFilterFactory::class$ = NULL;
          jmethodID *MappingCharFilterFactory::mids$ = NULL;
          bool MappingCharFilterFactory::live$ = false;

          jclass MappingCharFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/MappingCharFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6d741e4f] = env->getMethodID(cls, "create", "(Ljava/io/Reader;)Ljava/io/Reader;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_parseRules_c71ecf97] = env->getMethodID(cls, "parseRules", "(Ljava/util/List;Lorg/apache/lucene/analysis/charfilter/NormalizeCharMap$Builder;)V");
              mids$[mid_parseString_97a5258f] = env->getMethodID(cls, "parseString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MappingCharFilterFactory::MappingCharFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::CharFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::java::io::Reader MappingCharFilterFactory::create(const ::java::io::Reader & a0) const
          {
            return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_create_6d741e4f], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory MappingCharFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }

          void MappingCharFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_MappingCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MappingCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MappingCharFilterFactory_init_(t_MappingCharFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MappingCharFilterFactory_create(t_MappingCharFilterFactory *self, PyObject *args);
          static PyObject *t_MappingCharFilterFactory_getMultiTermComponent(t_MappingCharFilterFactory *self);
          static PyObject *t_MappingCharFilterFactory_inform(t_MappingCharFilterFactory *self, PyObject *arg);
          static PyObject *t_MappingCharFilterFactory_get__multiTermComponent(t_MappingCharFilterFactory *self, void *data);
          static PyGetSetDef t_MappingCharFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_MappingCharFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MappingCharFilterFactory__methods_[] = {
            DECLARE_METHOD(t_MappingCharFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MappingCharFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MappingCharFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_MappingCharFilterFactory, getMultiTermComponent, METH_NOARGS),
            DECLARE_METHOD(t_MappingCharFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MappingCharFilterFactory, t_MappingCharFilterFactory, ::org::apache::lucene::analysis::util::CharFilterFactory, MappingCharFilterFactory, t_MappingCharFilterFactory_init_, 0, 0, t_MappingCharFilterFactory__fields_, 0, 0);

          void t_MappingCharFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(MappingCharFilterFactory), module, "MappingCharFilterFactory", 0);
          }

          void t_MappingCharFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MappingCharFilterFactory).tp_dict, "class_", make_descriptor(MappingCharFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MappingCharFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_MappingCharFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MappingCharFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MappingCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MappingCharFilterFactory::initializeClass, 1)))
              return NULL;
            return t_MappingCharFilterFactory::wrap_Object(MappingCharFilterFactory(((t_MappingCharFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_MappingCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MappingCharFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MappingCharFilterFactory_init_(t_MappingCharFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            MappingCharFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = MappingCharFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MappingCharFilterFactory_create(t_MappingCharFilterFactory *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::java::io::Reader result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::java::io::t_Reader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MappingCharFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_MappingCharFilterFactory_getMultiTermComponent(t_MappingCharFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_MappingCharFilterFactory_inform(t_MappingCharFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_MappingCharFilterFactory_get__multiTermComponent(t_MappingCharFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiStemFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiStemFilterFactory::class$ = NULL;
          jmethodID *HindiStemFilterFactory::mids$ = NULL;
          bool HindiStemFilterFactory::live$ = false;

          jclass HindiStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiStemFilterFactory::HindiStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream HindiStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiStemFilterFactory_init_(t_HindiStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiStemFilterFactory_create(t_HindiStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_HindiStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HindiStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HindiStemFilterFactory, t_HindiStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, HindiStemFilterFactory, t_HindiStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_HindiStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiStemFilterFactory), module, "HindiStemFilterFactory", 0);
          }

          void t_HindiStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HindiStemFilterFactory).tp_dict, "class_", make_descriptor(HindiStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HindiStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_HindiStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HindiStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HindiStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HindiStemFilterFactory::wrap_Object(HindiStemFilterFactory(((t_HindiStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HindiStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiStemFilterFactory_init_(t_HindiStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HindiStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HindiStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HindiStemFilterFactory_create(t_HindiStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(HindiStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$ProximityType.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *ProximityQueryNode$ProximityType::class$ = NULL;
              jmethodID *ProximityQueryNode$ProximityType::mids$ = NULL;
              bool ProximityQueryNode$ProximityType::live$ = false;

              jclass ProximityQueryNode$ProximityType::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$ProximityType");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f6618874] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;)V");
                  mids$[mid_init$_4097b5f6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;I)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ProximityQueryNode$ProximityType::ProximityQueryNode$ProximityType(const ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f6618874, a0.this$)) {}

              ProximityQueryNode$ProximityType::ProximityQueryNode$ProximityType(const ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4097b5f6, a0.this$, a1)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_ProximityQueryNode$ProximityType_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ProximityQueryNode$ProximityType_instance_(PyTypeObject *type, PyObject *arg);
              static int t_ProximityQueryNode$ProximityType_init_(t_ProximityQueryNode$ProximityType *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_ProximityQueryNode$ProximityType__methods_[] = {
                DECLARE_METHOD(t_ProximityQueryNode$ProximityType, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ProximityQueryNode$ProximityType, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ProximityQueryNode$ProximityType, t_ProximityQueryNode$ProximityType, ::java::lang::Object, ProximityQueryNode$ProximityType, t_ProximityQueryNode$ProximityType_init_, 0, 0, 0, 0, 0);

              void t_ProximityQueryNode$ProximityType::install(PyObject *module)
              {
                installType(&PY_TYPE(ProximityQueryNode$ProximityType), module, "ProximityQueryNode$ProximityType", 0);
              }

              void t_ProximityQueryNode$ProximityType::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$ProximityType).tp_dict, "class_", make_descriptor(ProximityQueryNode$ProximityType::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$ProximityType).tp_dict, "wrapfn_", make_descriptor(t_ProximityQueryNode$ProximityType::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$ProximityType).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ProximityQueryNode$ProximityType_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ProximityQueryNode$ProximityType::initializeClass, 1)))
                  return NULL;
                return t_ProximityQueryNode$ProximityType::wrap_Object(ProximityQueryNode$ProximityType(((t_ProximityQueryNode$ProximityType *) arg)->object.this$));
              }
              static PyObject *t_ProximityQueryNode$ProximityType_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ProximityQueryNode$ProximityType::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_ProximityQueryNode$ProximityType_init_(t_ProximityQueryNode$ProximityType *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type a0((jobject) NULL);
                    PyTypeObject **p0;
                    ProximityQueryNode$ProximityType object((jobject) NULL);

                    if (!parseArgs(args, "K", ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::nodes::t_ProximityQueryNode$Type::parameters_))
                    {
                      INT_CALL(object = ProximityQueryNode$ProximityType(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 2:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type a0((jobject) NULL);
                    PyTypeObject **p0;
                    jint a1;
                    ProximityQueryNode$ProximityType object((jobject) NULL);

                    if (!parseArgs(args, "KI", ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::nodes::t_ProximityQueryNode$Type::parameters_, &a1))
                    {
                      INT_CALL(object = ProximityQueryNode$ProximityType(a0, a1));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/lang/Class.h"
#include "java/lang/Comparable.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntsRef::class$ = NULL;
        jmethodID *IntsRef::mids$ = NULL;
        jfieldID *IntsRef::fids$ = NULL;
        bool IntsRef::live$ = false;
        JArray< jint > *IntsRef::EMPTY_INTS = NULL;

        jclass IntsRef::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntsRef");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_3e1ea22c] = env->getMethodID(cls, "<init>", "([III)V");
            mids$[mid_clone_5b734841] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/IntsRef;");
            mids$[mid_compareTo_4defa0f7] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/util/IntsRef;)I");
            mids$[mid_copyInts_4defa0e8] = env->getMethodID(cls, "copyInts", "(Lorg/apache/lucene/util/IntsRef;)V");
            mids$[mid_deepCopyOf_44b4216f] = env->getStaticMethodID(cls, "deepCopyOf", "(Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_grow_39c7bd3c] = env->getMethodID(cls, "grow", "(I)V");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_intsEquals_4defa0e4] = env->getMethodID(cls, "intsEquals", "(Lorg/apache/lucene/util/IntsRef;)Z");
            mids$[mid_isValid_54c6a16a] = env->getMethodID(cls, "isValid", "()Z");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_ints] = env->getFieldID(cls, "ints", "[I");
            fids$[fid_length] = env->getFieldID(cls, "length", "I");
            fids$[fid_offset] = env->getFieldID(cls, "offset", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY_INTS = new JArray< jint >(env->getStaticObjectField(cls, "EMPTY_INTS", "[I"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntsRef::IntsRef() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        IntsRef::IntsRef(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        IntsRef::IntsRef(const JArray< jint > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3e1ea22c, a0.this$, a1, a2)) {}

        IntsRef IntsRef::clone() const
        {
          return IntsRef(env->callObjectMethod(this$, mids$[mid_clone_5b734841]));
        }

        jint IntsRef::compareTo(const IntsRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTo_4defa0f7], a0.this$);
        }

        void IntsRef::copyInts(const IntsRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyInts_4defa0e8], a0.this$);
        }

        IntsRef IntsRef::deepCopyOf(const IntsRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return IntsRef(env->callStaticObjectMethod(cls, mids$[mid_deepCopyOf_44b4216f], a0.this$));
        }

        jboolean IntsRef::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void IntsRef::grow(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_grow_39c7bd3c], a0);
        }

        jint IntsRef::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean IntsRef::intsEquals(const IntsRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_intsEquals_4defa0e4], a0.this$);
        }

        jboolean IntsRef::isValid() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isValid_54c6a16a]);
        }

        ::java::lang::String IntsRef::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        JArray< jint > IntsRef::_get_ints() const
        {
          return JArray< jint >(env->getObjectField(this$, fids$[fid_ints]));
        }

        void IntsRef::_set_ints(const JArray< jint > & a0) const
        {
          env->setObjectField(this$, fids$[fid_ints], a0.this$);
        }

        jint IntsRef::_get_length() const
        {
          return env->getIntField(this$, fids$[fid_length]);
        }

        void IntsRef::_set_length(jint a0) const
        {
          env->setIntField(this$, fids$[fid_length], a0);
        }

        jint IntsRef::_get_offset() const
        {
          return env->getIntField(this$, fids$[fid_offset]);
        }

        void IntsRef::_set_offset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_offset], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntsRef_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntsRef_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntsRef_init_(t_IntsRef *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntsRef_clone(t_IntsRef *self);
        static PyObject *t_IntsRef_compareTo(t_IntsRef *self, PyObject *arg);
        static PyObject *t_IntsRef_copyInts(t_IntsRef *self, PyObject *arg);
        static PyObject *t_IntsRef_deepCopyOf(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntsRef_equals(t_IntsRef *self, PyObject *args);
        static PyObject *t_IntsRef_grow(t_IntsRef *self, PyObject *arg);
        static PyObject *t_IntsRef_hashCode(t_IntsRef *self, PyObject *args);
        static PyObject *t_IntsRef_intsEquals(t_IntsRef *self, PyObject *arg);
        static PyObject *t_IntsRef_isValid(t_IntsRef *self);
        static PyObject *t_IntsRef_toString(t_IntsRef *self, PyObject *args);
        static PyObject *t_IntsRef_get__ints(t_IntsRef *self, void *data);
        static int t_IntsRef_set__ints(t_IntsRef *self, PyObject *arg, void *data);
        static PyObject *t_IntsRef_get__length(t_IntsRef *self, void *data);
        static int t_IntsRef_set__length(t_IntsRef *self, PyObject *arg, void *data);
        static PyObject *t_IntsRef_get__offset(t_IntsRef *self, void *data);
        static int t_IntsRef_set__offset(t_IntsRef *self, PyObject *arg, void *data);

        static PyObject *t_IntsRef_get__valid(t_IntsRef *self, void *data);
        static PyGetSetDef t_IntsRef__fields_[] = {
          DECLARE_GETSET_FIELD(t_IntsRef, ints),
          DECLARE_GETSET_FIELD(t_IntsRef, length),
          DECLARE_GETSET_FIELD(t_IntsRef, offset),
          DECLARE_GET_FIELD(t_IntsRef, valid),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IntsRef__methods_[] = {
          DECLARE_METHOD(t_IntsRef, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntsRef, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntsRef, clone, METH_NOARGS),
          DECLARE_METHOD(t_IntsRef, compareTo, METH_O),
          DECLARE_METHOD(t_IntsRef, copyInts, METH_O),
          DECLARE_METHOD(t_IntsRef, deepCopyOf, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntsRef, equals, METH_VARARGS),
          DECLARE_METHOD(t_IntsRef, grow, METH_O),
          DECLARE_METHOD(t_IntsRef, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_IntsRef, intsEquals, METH_O),
          DECLARE_METHOD(t_IntsRef, isValid, METH_NOARGS),
          DECLARE_METHOD(t_IntsRef, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntsRef, t_IntsRef, ::java::lang::Object, IntsRef, t_IntsRef_init_, 0, 0, t_IntsRef__fields_, 0, 0);

        void t_IntsRef::install(PyObject *module)
        {
          installType(&PY_TYPE(IntsRef), module, "IntsRef", 0);
        }

        void t_IntsRef::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntsRef).tp_dict, "class_", make_descriptor(IntsRef::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntsRef).tp_dict, "wrapfn_", make_descriptor(t_IntsRef::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntsRef).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IntsRef::initializeClass);
          PyDict_SetItemString(PY_TYPE(IntsRef).tp_dict, "EMPTY_INTS", make_descriptor(IntsRef::EMPTY_INTS->wrap()));
        }

        static PyObject *t_IntsRef_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntsRef::initializeClass, 1)))
            return NULL;
          return t_IntsRef::wrap_Object(IntsRef(((t_IntsRef *) arg)->object.this$));
        }
        static PyObject *t_IntsRef_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntsRef::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntsRef_init_(t_IntsRef *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              IntsRef object((jobject) NULL);

              INT_CALL(object = IntsRef());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              jint a0;
              IntsRef object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = IntsRef(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jint > a0((jobject) NULL);
              jint a1;
              jint a2;
              IntsRef object((jobject) NULL);

              if (!parseArgs(args, "[III", &a0, &a1, &a2))
              {
                INT_CALL(object = IntsRef(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IntsRef_clone(t_IntsRef *self)
        {
          IntsRef result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_IntsRef::wrap_Object(result);
        }

        static PyObject *t_IntsRef_compareTo(t_IntsRef *self, PyObject *arg)
        {
          IntsRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", IntsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.compareTo(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
          return NULL;
        }

        static PyObject *t_IntsRef_copyInts(t_IntsRef *self, PyObject *arg)
        {
          IntsRef a0((jobject) NULL);

          if (!parseArg(arg, "k", IntsRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyInts(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyInts", arg);
          return NULL;
        }

        static PyObject *t_IntsRef_deepCopyOf(PyTypeObject *type, PyObject *arg)
        {
          IntsRef a0((jobject) NULL);
          IntsRef result((jobject) NULL);

          if (!parseArg(arg, "k", IntsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::IntsRef::deepCopyOf(a0));
            return t_IntsRef::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "deepCopyOf", arg);
          return NULL;
        }

        static PyObject *t_IntsRef_equals(t_IntsRef *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(IntsRef), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_IntsRef_grow(t_IntsRef *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.grow(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "grow", arg);
          return NULL;
        }

        static PyObject *t_IntsRef_hashCode(t_IntsRef *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IntsRef), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_IntsRef_intsEquals(t_IntsRef *self, PyObject *arg)
        {
          IntsRef a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", IntsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.intsEquals(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "intsEquals", arg);
          return NULL;
        }

        static PyObject *t_IntsRef_isValid(t_IntsRef *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isValid());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IntsRef_toString(t_IntsRef *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(IntsRef), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_IntsRef_get__ints(t_IntsRef *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_ints());
          return value.wrap();
        }
        static int t_IntsRef_set__ints(t_IntsRef *self, PyObject *arg, void *data)
        {
          JArray< jint > value((jobject) NULL);
          if (!parseArg(arg, "[I", &value))
          {
            INT_CALL(self->object._set_ints(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "ints", arg);
          return -1;
        }

        static PyObject *t_IntsRef_get__length(t_IntsRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_length());
          return PyInt_FromLong((long) value);
        }
        static int t_IntsRef_set__length(t_IntsRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_length(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "length", arg);
          return -1;
        }

        static PyObject *t_IntsRef_get__offset(t_IntsRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_offset());
          return PyInt_FromLong((long) value);
        }
        static int t_IntsRef_set__offset(t_IntsRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_offset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "offset", arg);
          return -1;
        }

        static PyObject *t_IntsRef_get__valid(t_IntsRef *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isValid());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/RussianStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *RussianStemmer::class$ = NULL;
        jmethodID *RussianStemmer::mids$ = NULL;
        bool RussianStemmer::live$ = false;

        jclass RussianStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/RussianStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RussianStemmer::RussianStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean RussianStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint RussianStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean RussianStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_RussianStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RussianStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RussianStemmer_init_(t_RussianStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RussianStemmer_equals(t_RussianStemmer *self, PyObject *args);
        static PyObject *t_RussianStemmer_hashCode(t_RussianStemmer *self, PyObject *args);
        static PyObject *t_RussianStemmer_stem(t_RussianStemmer *self, PyObject *args);

        static PyMethodDef t_RussianStemmer__methods_[] = {
          DECLARE_METHOD(t_RussianStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RussianStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RussianStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_RussianStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_RussianStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RussianStemmer, t_RussianStemmer, ::org::tartarus::snowball::SnowballProgram, RussianStemmer, t_RussianStemmer_init_, 0, 0, 0, 0, 0);

        void t_RussianStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(RussianStemmer), module, "RussianStemmer", 0);
        }

        void t_RussianStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RussianStemmer).tp_dict, "class_", make_descriptor(RussianStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RussianStemmer).tp_dict, "wrapfn_", make_descriptor(t_RussianStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RussianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RussianStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RussianStemmer::initializeClass, 1)))
            return NULL;
          return t_RussianStemmer::wrap_Object(RussianStemmer(((t_RussianStemmer *) arg)->object.this$));
        }
        static PyObject *t_RussianStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RussianStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RussianStemmer_init_(t_RussianStemmer *self, PyObject *args, PyObject *kwds)
        {
          RussianStemmer object((jobject) NULL);

          INT_CALL(object = RussianStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_RussianStemmer_equals(t_RussianStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(RussianStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_RussianStemmer_hashCode(t_RussianStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(RussianStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_RussianStemmer_stem(t_RussianStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(RussianStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/codecs/FieldInfosWriter.h"
#include "org/apache/lucene/codecs/FieldInfosReader.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *FieldInfosFormat::class$ = NULL;
        jmethodID *FieldInfosFormat::mids$ = NULL;
        bool FieldInfosFormat::live$ = false;

        jclass FieldInfosFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/FieldInfosFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getFieldInfosReader_6ecd5494] = env->getMethodID(cls, "getFieldInfosReader", "()Lorg/apache/lucene/codecs/FieldInfosReader;");
            mids$[mid_getFieldInfosWriter_211ffa60] = env->getMethodID(cls, "getFieldInfosWriter", "()Lorg/apache/lucene/codecs/FieldInfosWriter;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::FieldInfosReader FieldInfosFormat::getFieldInfosReader() const
        {
          return ::org::apache::lucene::codecs::FieldInfosReader(env->callObjectMethod(this$, mids$[mid_getFieldInfosReader_6ecd5494]));
        }

        ::org::apache::lucene::codecs::FieldInfosWriter FieldInfosFormat::getFieldInfosWriter() const
        {
          return ::org::apache::lucene::codecs::FieldInfosWriter(env->callObjectMethod(this$, mids$[mid_getFieldInfosWriter_211ffa60]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfosFormat_getFieldInfosReader(t_FieldInfosFormat *self);
        static PyObject *t_FieldInfosFormat_getFieldInfosWriter(t_FieldInfosFormat *self);
        static PyObject *t_FieldInfosFormat_get__fieldInfosReader(t_FieldInfosFormat *self, void *data);
        static PyObject *t_FieldInfosFormat_get__fieldInfosWriter(t_FieldInfosFormat *self, void *data);
        static PyGetSetDef t_FieldInfosFormat__fields_[] = {
          DECLARE_GET_FIELD(t_FieldInfosFormat, fieldInfosReader),
          DECLARE_GET_FIELD(t_FieldInfosFormat, fieldInfosWriter),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldInfosFormat__methods_[] = {
          DECLARE_METHOD(t_FieldInfosFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfosFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfosFormat, getFieldInfosReader, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfosFormat, getFieldInfosWriter, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldInfosFormat, t_FieldInfosFormat, ::java::lang::Object, FieldInfosFormat, abstract_init, 0, 0, t_FieldInfosFormat__fields_, 0, 0);

        void t_FieldInfosFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInfosFormat), module, "FieldInfosFormat", 0);
        }

        void t_FieldInfosFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldInfosFormat).tp_dict, "class_", make_descriptor(FieldInfosFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldInfosFormat).tp_dict, "wrapfn_", make_descriptor(t_FieldInfosFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldInfosFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInfosFormat::initializeClass, 1)))
            return NULL;
          return t_FieldInfosFormat::wrap_Object(FieldInfosFormat(((t_FieldInfosFormat *) arg)->object.this$));
        }
        static PyObject *t_FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInfosFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldInfosFormat_getFieldInfosReader(t_FieldInfosFormat *self)
        {
          ::org::apache::lucene::codecs::FieldInfosReader result((jobject) NULL);
          OBJ_CALL(result = self->object.getFieldInfosReader());
          return ::org::apache::lucene::codecs::t_FieldInfosReader::wrap_Object(result);
        }

        static PyObject *t_FieldInfosFormat_getFieldInfosWriter(t_FieldInfosFormat *self)
        {
          ::org::apache::lucene::codecs::FieldInfosWriter result((jobject) NULL);
          OBJ_CALL(result = self->object.getFieldInfosWriter());
          return ::org::apache::lucene::codecs::t_FieldInfosWriter::wrap_Object(result);
        }

        static PyObject *t_FieldInfosFormat_get__fieldInfosReader(t_FieldInfosFormat *self, void *data)
        {
          ::org::apache::lucene::codecs::FieldInfosReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfosReader());
          return ::org::apache::lucene::codecs::t_FieldInfosReader::wrap_Object(value);
        }

        static PyObject *t_FieldInfosFormat_get__fieldInfosWriter(t_FieldInfosFormat *self, void *data)
        {
          ::org::apache::lucene::codecs::FieldInfosWriter value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfosWriter());
          return ::org::apache::lucene::codecs::t_FieldInfosWriter::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TokenStreamToTermAutomatonQuery.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/TermAutomatonQuery.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TokenStreamToTermAutomatonQuery::class$ = NULL;
        jmethodID *TokenStreamToTermAutomatonQuery::mids$ = NULL;
        bool TokenStreamToTermAutomatonQuery::live$ = false;

        jclass TokenStreamToTermAutomatonQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TokenStreamToTermAutomatonQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_setPreservePositionIncrements_bb0c767f] = env->getMethodID(cls, "setPreservePositionIncrements", "(Z)V");
            mids$[mid_toQuery_1f490eb9] = env->getMethodID(cls, "toQuery", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/search/TermAutomatonQuery;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TokenStreamToTermAutomatonQuery::TokenStreamToTermAutomatonQuery() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void TokenStreamToTermAutomatonQuery::setPreservePositionIncrements(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setPreservePositionIncrements_bb0c767f], a0);
        }

        ::org::apache::lucene::search::TermAutomatonQuery TokenStreamToTermAutomatonQuery::toQuery(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
        {
          return ::org::apache::lucene::search::TermAutomatonQuery(env->callObjectMethod(this$, mids$[mid_toQuery_1f490eb9], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TokenStreamToTermAutomatonQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TokenStreamToTermAutomatonQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TokenStreamToTermAutomatonQuery_init_(t_TokenStreamToTermAutomatonQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TokenStreamToTermAutomatonQuery_setPreservePositionIncrements(t_TokenStreamToTermAutomatonQuery *self, PyObject *arg);
        static PyObject *t_TokenStreamToTermAutomatonQuery_toQuery(t_TokenStreamToTermAutomatonQuery *self, PyObject *args);
        static int t_TokenStreamToTermAutomatonQuery_set__preservePositionIncrements(t_TokenStreamToTermAutomatonQuery *self, PyObject *arg, void *data);
        static PyGetSetDef t_TokenStreamToTermAutomatonQuery__fields_[] = {
          DECLARE_SET_FIELD(t_TokenStreamToTermAutomatonQuery, preservePositionIncrements),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TokenStreamToTermAutomatonQuery__methods_[] = {
          DECLARE_METHOD(t_TokenStreamToTermAutomatonQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenStreamToTermAutomatonQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenStreamToTermAutomatonQuery, setPreservePositionIncrements, METH_O),
          DECLARE_METHOD(t_TokenStreamToTermAutomatonQuery, toQuery, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TokenStreamToTermAutomatonQuery, t_TokenStreamToTermAutomatonQuery, ::java::lang::Object, TokenStreamToTermAutomatonQuery, t_TokenStreamToTermAutomatonQuery_init_, 0, 0, t_TokenStreamToTermAutomatonQuery__fields_, 0, 0);

        void t_TokenStreamToTermAutomatonQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(TokenStreamToTermAutomatonQuery), module, "TokenStreamToTermAutomatonQuery", 0);
        }

        void t_TokenStreamToTermAutomatonQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TokenStreamToTermAutomatonQuery).tp_dict, "class_", make_descriptor(TokenStreamToTermAutomatonQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TokenStreamToTermAutomatonQuery).tp_dict, "wrapfn_", make_descriptor(t_TokenStreamToTermAutomatonQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TokenStreamToTermAutomatonQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TokenStreamToTermAutomatonQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TokenStreamToTermAutomatonQuery::initializeClass, 1)))
            return NULL;
          return t_TokenStreamToTermAutomatonQuery::wrap_Object(TokenStreamToTermAutomatonQuery(((t_TokenStreamToTermAutomatonQuery *) arg)->object.this$));
        }
        static PyObject *t_TokenStreamToTermAutomatonQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TokenStreamToTermAutomatonQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TokenStreamToTermAutomatonQuery_init_(t_TokenStreamToTermAutomatonQuery *self, PyObject *args, PyObject *kwds)
        {
          TokenStreamToTermAutomatonQuery object((jobject) NULL);

          INT_CALL(object = TokenStreamToTermAutomatonQuery());
          self->object = object;

          return 0;
        }

        static PyObject *t_TokenStreamToTermAutomatonQuery_setPreservePositionIncrements(t_TokenStreamToTermAutomatonQuery *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setPreservePositionIncrements(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setPreservePositionIncrements", arg);
          return NULL;
        }

        static PyObject *t_TokenStreamToTermAutomatonQuery_toQuery(t_TokenStreamToTermAutomatonQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
          ::org::apache::lucene::search::TermAutomatonQuery result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.toQuery(a0, a1));
            return ::org::apache::lucene::search::t_TermAutomatonQuery::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "toQuery", args);
          return NULL;
        }

        static int t_TokenStreamToTermAutomatonQuery_set__preservePositionIncrements(t_TokenStreamToTermAutomatonQuery *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setPreservePositionIncrements(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "preservePositionIncrements", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/Token.h"
#include "org/apache/lucene/util/AttributeImpl.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/tokenattributes/PayloadAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/FlagsAttribute.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *Token::class$ = NULL;
        jmethodID *Token::mids$ = NULL;
        bool Token::live$ = false;
        ::org::apache::lucene::util::AttributeFactory *Token::TOKEN_ATTRIBUTE_FACTORY = NULL;

        jclass Token::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/Token");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
            mids$[mid_init$_6cc8d7e2] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;II)V");
            mids$[mid_init$_490a7ef0] = env->getMethodID(cls, "<init>", "(IILjava/lang/String;)V");
            mids$[mid_init$_d3236aa4] = env->getMethodID(cls, "<init>", "(III)V");
            mids$[mid_init$_734c49c6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;IILjava/lang/String;)V");
            mids$[mid_init$_b8e753a2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;III)V");
            mids$[mid_init$_f453acf6] = env->getMethodID(cls, "<init>", "([CIIII)V");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_clone_55852c17] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/Token;");
            mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getFlags_54c6a179] = env->getMethodID(cls, "getFlags", "()I");
            mids$[mid_getPayload_4ae19461] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_reflectWith_5f3f5102] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
            mids$[mid_reinit_4f6e7002] = env->getMethodID(cls, "reinit", "(Lorg/apache/lucene/analysis/Token;)V");
            mids$[mid_reinit_4b41519c] = env->getMethodID(cls, "reinit", "(Lorg/apache/lucene/analysis/Token;Ljava/lang/String;)V");
            mids$[mid_reinit_fca163e5] = env->getMethodID(cls, "reinit", "(Ljava/lang/String;II)Lorg/apache/lucene/analysis/Token;");
            mids$[mid_reinit_9e1b3a5a] = env->getMethodID(cls, "reinit", "(Lorg/apache/lucene/analysis/Token;[CII)V");
            mids$[mid_reinit_ca2a1773] = env->getMethodID(cls, "reinit", "(Ljava/lang/String;IILjava/lang/String;)Lorg/apache/lucene/analysis/Token;");
            mids$[mid_reinit_53bb4fe3] = env->getMethodID(cls, "reinit", "([CIIII)Lorg/apache/lucene/analysis/Token;");
            mids$[mid_reinit_d4354d15] = env->getMethodID(cls, "reinit", "(Ljava/lang/String;IIII)Lorg/apache/lucene/analysis/Token;");
            mids$[mid_reinit_4c56913b] = env->getMethodID(cls, "reinit", "(Ljava/lang/String;IIIILjava/lang/String;)Lorg/apache/lucene/analysis/Token;");
            mids$[mid_reinit_6aec2009] = env->getMethodID(cls, "reinit", "([CIIIILjava/lang/String;)Lorg/apache/lucene/analysis/Token;");
            mids$[mid_setFlags_39c7bd3c] = env->getMethodID(cls, "setFlags", "(I)V");
            mids$[mid_setPayload_7bc03dc4] = env->getMethodID(cls, "setPayload", "(Lorg/apache/lucene/util/BytesRef;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TOKEN_ATTRIBUTE_FACTORY = new ::org::apache::lucene::util::AttributeFactory(env->getStaticObjectField(cls, "TOKEN_ATTRIBUTE_FACTORY", "Lorg/apache/lucene/util/AttributeFactory;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Token::Token() : ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        Token::Token(jint a0, jint a1) : ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

        Token::Token(const ::java::lang::CharSequence & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_6cc8d7e2, a0.this$, a1, a2)) {}

        Token::Token(jint a0, jint a1, const ::java::lang::String & a2) : ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_490a7ef0, a0, a1, a2.this$)) {}

        Token::Token(jint a0, jint a1, jint a2) : ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_d3236aa4, a0, a1, a2)) {}

        Token::Token(const ::java::lang::String & a0, jint a1, jint a2, const ::java::lang::String & a3) : ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_734c49c6, a0.this$, a1, a2, a3.this$)) {}

        Token::Token(const ::java::lang::String & a0, jint a1, jint a2, jint a3) : ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_b8e753a2, a0.this$, a1, a2, a3)) {}

        Token::Token(const JArray< jchar > & a0, jint a1, jint a2, jint a3, jint a4) : ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_f453acf6, a0.this$, a1, a2, a3, a4)) {}

        void Token::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        Token Token::clone() const
        {
          return Token(env->callObjectMethod(this$, mids$[mid_clone_55852c17]));
        }

        void Token::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
        }

        jboolean Token::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint Token::getFlags() const
        {
          return env->callIntMethod(this$, mids$[mid_getFlags_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef Token::getPayload() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_4ae19461]));
        }

        jint Token::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        void Token::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reflectWith_5f3f5102], a0.this$);
        }

        void Token::reinit(const Token & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reinit_4f6e7002], a0.this$);
        }

        void Token::reinit(const Token & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_reinit_4b41519c], a0.this$, a1.this$);
        }

        Token Token::reinit(const ::java::lang::String & a0, jint a1, jint a2) const
        {
          return Token(env->callObjectMethod(this$, mids$[mid_reinit_fca163e5], a0.this$, a1, a2));
        }

        void Token::reinit(const Token & a0, const JArray< jchar > & a1, jint a2, jint a3) const
        {
          env->callVoidMethod(this$, mids$[mid_reinit_9e1b3a5a], a0.this$, a1.this$, a2, a3);
        }

        Token Token::reinit(const ::java::lang::String & a0, jint a1, jint a2, const ::java::lang::String & a3) const
        {
          return Token(env->callObjectMethod(this$, mids$[mid_reinit_ca2a1773], a0.this$, a1, a2, a3.this$));
        }

        Token Token::reinit(const JArray< jchar > & a0, jint a1, jint a2, jint a3, jint a4) const
        {
          return Token(env->callObjectMethod(this$, mids$[mid_reinit_53bb4fe3], a0.this$, a1, a2, a3, a4));
        }

        Token Token::reinit(const ::java::lang::String & a0, jint a1, jint a2, jint a3, jint a4) const
        {
          return Token(env->callObjectMethod(this$, mids$[mid_reinit_d4354d15], a0.this$, a1, a2, a3, a4));
        }

        Token Token::reinit(const ::java::lang::String & a0, jint a1, jint a2, jint a3, jint a4, const ::java::lang::String & a5) const
        {
          return Token(env->callObjectMethod(this$, mids$[mid_reinit_4c56913b], a0.this$, a1, a2, a3, a4, a5.this$));
        }

        Token Token::reinit(const JArray< jchar > & a0, jint a1, jint a2, jint a3, jint a4, const ::java::lang::String & a5) const
        {
          return Token(env->callObjectMethod(this$, mids$[mid_reinit_6aec2009], a0.this$, a1, a2, a3, a4, a5.this$));
        }

        void Token::setFlags(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setFlags_39c7bd3c], a0);
        }

        void Token::setPayload(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setPayload_7bc03dc4], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Token_clear(t_Token *self, PyObject *args);
        static PyObject *t_Token_clone(t_Token *self, PyObject *args);
        static PyObject *t_Token_copyTo(t_Token *self, PyObject *args);
        static PyObject *t_Token_equals(t_Token *self, PyObject *args);
        static PyObject *t_Token_getFlags(t_Token *self);
        static PyObject *t_Token_getPayload(t_Token *self);
        static PyObject *t_Token_hashCode(t_Token *self, PyObject *args);
        static PyObject *t_Token_reflectWith(t_Token *self, PyObject *args);
        static PyObject *t_Token_reinit(t_Token *self, PyObject *args);
        static PyObject *t_Token_setFlags(t_Token *self, PyObject *arg);
        static PyObject *t_Token_setPayload(t_Token *self, PyObject *arg);
        static PyObject *t_Token_get__flags(t_Token *self, void *data);
        static int t_Token_set__flags(t_Token *self, PyObject *arg, void *data);
        static PyObject *t_Token_get__payload(t_Token *self, void *data);
        static int t_Token_set__payload(t_Token *self, PyObject *arg, void *data);
        static PyGetSetDef t_Token__fields_[] = {
          DECLARE_GETSET_FIELD(t_Token, flags),
          DECLARE_GETSET_FIELD(t_Token, payload),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Token__methods_[] = {
          DECLARE_METHOD(t_Token, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Token, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Token, clear, METH_VARARGS),
          DECLARE_METHOD(t_Token, clone, METH_VARARGS),
          DECLARE_METHOD(t_Token, copyTo, METH_VARARGS),
          DECLARE_METHOD(t_Token, equals, METH_VARARGS),
          DECLARE_METHOD(t_Token, getFlags, METH_NOARGS),
          DECLARE_METHOD(t_Token, getPayload, METH_NOARGS),
          DECLARE_METHOD(t_Token, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_Token, reflectWith, METH_VARARGS),
          DECLARE_METHOD(t_Token, reinit, METH_VARARGS),
          DECLARE_METHOD(t_Token, setFlags, METH_O),
          DECLARE_METHOD(t_Token, setPayload, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Token, t_Token, ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl, Token, t_Token_init_, 0, 0, t_Token__fields_, 0, 0);

        void t_Token::install(PyObject *module)
        {
          installType(&PY_TYPE(Token), module, "Token", 0);
        }

        void t_Token::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Token).tp_dict, "class_", make_descriptor(Token::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Token).tp_dict, "wrapfn_", make_descriptor(t_Token::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Token).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Token::initializeClass);
          PyDict_SetItemString(PY_TYPE(Token).tp_dict, "TOKEN_ATTRIBUTE_FACTORY", make_descriptor(::org::apache::lucene::util::t_AttributeFactory::wrap_Object(*Token::TOKEN_ATTRIBUTE_FACTORY)));
        }

        static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Token::initializeClass, 1)))
            return NULL;
          return t_Token::wrap_Object(Token(((t_Token *) arg)->object.this$));
        }
        static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Token::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              Token object((jobject) NULL);

              INT_CALL(object = Token());
              self->object = object;
              break;
            }
            goto err;
           case 2:
            {
              jint a0;
              jint a1;
              Token object((jobject) NULL);

              if (!parseArgs(args, "II", &a0, &a1))
              {
                INT_CALL(object = Token(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              jint a1;
              jint a2;
              Token object((jobject) NULL);

              if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
              {
                INT_CALL(object = Token(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              jint a0;
              jint a1;
              ::java::lang::String a2((jobject) NULL);
              Token object((jobject) NULL);

              if (!parseArgs(args, "IIs", &a0, &a1, &a2))
              {
                INT_CALL(object = Token(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              jint a0;
              jint a1;
              jint a2;
              Token object((jobject) NULL);

              if (!parseArgs(args, "III", &a0, &a1, &a2))
              {
                INT_CALL(object = Token(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              ::java::lang::String a3((jobject) NULL);
              Token object((jobject) NULL);

              if (!parseArgs(args, "sIIs", &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = Token(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              Token object((jobject) NULL);

              if (!parseArgs(args, "sIII", &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = Token(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            goto err;
           case 5:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint a4;
              Token object((jobject) NULL);

              if (!parseArgs(args, "[CIIII", &a0, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = Token(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Token_clear(t_Token *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(Token), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_Token_clone(t_Token *self, PyObject *args)
        {
          Token result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_Token::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(Token), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_Token_copyTo(t_Token *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyTo(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(Token), (PyObject *) self, "copyTo", args, 2);
        }

        static PyObject *t_Token_equals(t_Token *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(Token), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Token_getFlags(t_Token *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getFlags());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_Token_getPayload(t_Token *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getPayload());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_Token_hashCode(t_Token *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(Token), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Token_reflectWith(t_Token *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
          {
            OBJ_CALL(self->object.reflectWith(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(Token), (PyObject *) self, "reflectWith", args, 2);
        }

        static PyObject *t_Token_reinit(t_Token *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              Token a0((jobject) NULL);

              if (!parseArgs(args, "k", Token::initializeClass, &a0))
              {
                OBJ_CALL(self->object.reinit(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              Token a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);

              if (!parseArgs(args, "ks", Token::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.reinit(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              Token result((jobject) NULL);

              if (!parseArgs(args, "sII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.reinit(a0, a1, a2));
                return t_Token::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              Token a0((jobject) NULL);
              JArray< jchar > a1((jobject) NULL);
              jint a2;
              jint a3;

              if (!parseArgs(args, "k[CII", Token::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(self->object.reinit(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              ::java::lang::String a3((jobject) NULL);
              Token result((jobject) NULL);

              if (!parseArgs(args, "sIIs", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.reinit(a0, a1, a2, a3));
                return t_Token::wrap_Object(result);
              }
            }
            break;
           case 5:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint a4;
              Token result((jobject) NULL);

              if (!parseArgs(args, "[CIIII", &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = self->object.reinit(a0, a1, a2, a3, a4));
                return t_Token::wrap_Object(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint a4;
              Token result((jobject) NULL);

              if (!parseArgs(args, "sIIII", &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = self->object.reinit(a0, a1, a2, a3, a4));
                return t_Token::wrap_Object(result);
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint a4;
              ::java::lang::String a5((jobject) NULL);
              Token result((jobject) NULL);

              if (!parseArgs(args, "sIIIIs", &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = self->object.reinit(a0, a1, a2, a3, a4, a5));
                return t_Token::wrap_Object(result);
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint a4;
              ::java::lang::String a5((jobject) NULL);
              Token result((jobject) NULL);

              if (!parseArgs(args, "[CIIIIs", &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = self->object.reinit(a0, a1, a2, a3, a4, a5));
                return t_Token::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "reinit", args);
          return NULL;
        }

        static PyObject *t_Token_setFlags(t_Token *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setFlags(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setFlags", arg);
          return NULL;
        }

        static PyObject *t_Token_setPayload(t_Token *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setPayload(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setPayload", arg);
          return NULL;
        }

        static PyObject *t_Token_get__flags(t_Token *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getFlags());
          return PyInt_FromLong((long) value);
        }
        static int t_Token_set__flags(t_Token *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setFlags(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "flags", arg);
          return -1;
        }

        static PyObject *t_Token_get__payload(t_Token *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getPayload());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
        static int t_Token_set__payload(t_Token *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setPayload(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "payload", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ConstNumberSource.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ConstNumberSource::class$ = NULL;
            jmethodID *ConstNumberSource::mids$ = NULL;
            bool ConstNumberSource::live$ = false;

            jclass ConstNumberSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ConstNumberSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_getBool_54c6a16a] = env->getMethodID(cls, "getBool", "()Z");
                mids$[mid_getDouble_54c6a174] = env->getMethodID(cls, "getDouble", "()D");
                mids$[mid_getFloat_54c6a176] = env->getMethodID(cls, "getFloat", "()F");
                mids$[mid_getInt_54c6a179] = env->getMethodID(cls, "getInt", "()I");
                mids$[mid_getLong_54c6a17a] = env->getMethodID(cls, "getLong", "()J");
                mids$[mid_getNumber_ee47e3e1] = env->getMethodID(cls, "getNumber", "()Ljava/lang/Number;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ConstNumberSource::ConstNumberSource() : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            jboolean ConstNumberSource::getBool() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getBool_54c6a16a]);
            }

            jdouble ConstNumberSource::getDouble() const
            {
              return env->callDoubleMethod(this$, mids$[mid_getDouble_54c6a174]);
            }

            jfloat ConstNumberSource::getFloat() const
            {
              return env->callFloatMethod(this$, mids$[mid_getFloat_54c6a176]);
            }

            jint ConstNumberSource::getInt() const
            {
              return env->callIntMethod(this$, mids$[mid_getInt_54c6a179]);
            }

            jlong ConstNumberSource::getLong() const
            {
              return env->callLongMethod(this$, mids$[mid_getLong_54c6a17a]);
            }

            ::java::lang::Number ConstNumberSource::getNumber() const
            {
              return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getNumber_ee47e3e1]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ConstNumberSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ConstNumberSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ConstNumberSource_init_(t_ConstNumberSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ConstNumberSource_getBool(t_ConstNumberSource *self);
            static PyObject *t_ConstNumberSource_getDouble(t_ConstNumberSource *self);
            static PyObject *t_ConstNumberSource_getFloat(t_ConstNumberSource *self);
            static PyObject *t_ConstNumberSource_getInt(t_ConstNumberSource *self);
            static PyObject *t_ConstNumberSource_getLong(t_ConstNumberSource *self);
            static PyObject *t_ConstNumberSource_getNumber(t_ConstNumberSource *self);
            static PyObject *t_ConstNumberSource_get__bool(t_ConstNumberSource *self, void *data);
            static PyObject *t_ConstNumberSource_get__double(t_ConstNumberSource *self, void *data);
            static PyObject *t_ConstNumberSource_get__float(t_ConstNumberSource *self, void *data);
            static PyObject *t_ConstNumberSource_get__int(t_ConstNumberSource *self, void *data);
            static PyObject *t_ConstNumberSource_get__long(t_ConstNumberSource *self, void *data);
            static PyObject *t_ConstNumberSource_get__number(t_ConstNumberSource *self, void *data);
            static PyGetSetDef t_ConstNumberSource__fields_[] = {
              DECLARE_GET_FIELD(t_ConstNumberSource, bool),
              DECLARE_GET_FIELD(t_ConstNumberSource, double),
              DECLARE_GET_FIELD(t_ConstNumberSource, float),
              DECLARE_GET_FIELD(t_ConstNumberSource, int),
              DECLARE_GET_FIELD(t_ConstNumberSource, long),
              DECLARE_GET_FIELD(t_ConstNumberSource, number),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ConstNumberSource__methods_[] = {
              DECLARE_METHOD(t_ConstNumberSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ConstNumberSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ConstNumberSource, getBool, METH_NOARGS),
              DECLARE_METHOD(t_ConstNumberSource, getDouble, METH_NOARGS),
              DECLARE_METHOD(t_ConstNumberSource, getFloat, METH_NOARGS),
              DECLARE_METHOD(t_ConstNumberSource, getInt, METH_NOARGS),
              DECLARE_METHOD(t_ConstNumberSource, getLong, METH_NOARGS),
              DECLARE_METHOD(t_ConstNumberSource, getNumber, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ConstNumberSource, t_ConstNumberSource, ::org::apache::lucene::queries::function::ValueSource, ConstNumberSource, t_ConstNumberSource_init_, 0, 0, t_ConstNumberSource__fields_, 0, 0);

            void t_ConstNumberSource::install(PyObject *module)
            {
              installType(&PY_TYPE(ConstNumberSource), module, "ConstNumberSource", 0);
            }

            void t_ConstNumberSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ConstNumberSource).tp_dict, "class_", make_descriptor(ConstNumberSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ConstNumberSource).tp_dict, "wrapfn_", make_descriptor(t_ConstNumberSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ConstNumberSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ConstNumberSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ConstNumberSource::initializeClass, 1)))
                return NULL;
              return t_ConstNumberSource::wrap_Object(ConstNumberSource(((t_ConstNumberSource *) arg)->object.this$));
            }
            static PyObject *t_ConstNumberSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ConstNumberSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ConstNumberSource_init_(t_ConstNumberSource *self, PyObject *args, PyObject *kwds)
            {
              ConstNumberSource object((jobject) NULL);

              INT_CALL(object = ConstNumberSource());
              self->object = object;

              return 0;
            }

            static PyObject *t_ConstNumberSource_getBool(t_ConstNumberSource *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.getBool());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_ConstNumberSource_getDouble(t_ConstNumberSource *self)
            {
              jdouble result;
              OBJ_CALL(result = self->object.getDouble());
              return PyFloat_FromDouble((double) result);
            }

            static PyObject *t_ConstNumberSource_getFloat(t_ConstNumberSource *self)
            {
              jfloat result;
              OBJ_CALL(result = self->object.getFloat());
              return PyFloat_FromDouble((double) result);
            }

            static PyObject *t_ConstNumberSource_getInt(t_ConstNumberSource *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getInt());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_ConstNumberSource_getLong(t_ConstNumberSource *self)
            {
              jlong result;
              OBJ_CALL(result = self->object.getLong());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            static PyObject *t_ConstNumberSource_getNumber(t_ConstNumberSource *self)
            {
              ::java::lang::Number result((jobject) NULL);
              OBJ_CALL(result = self->object.getNumber());
              return ::java::lang::t_Number::wrap_Object(result);
            }

            static PyObject *t_ConstNumberSource_get__bool(t_ConstNumberSource *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getBool());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_ConstNumberSource_get__double(t_ConstNumberSource *self, void *data)
            {
              jdouble value;
              OBJ_CALL(value = self->object.getDouble());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_ConstNumberSource_get__float(t_ConstNumberSource *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getFloat());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_ConstNumberSource_get__int(t_ConstNumberSource *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getInt());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_ConstNumberSource_get__long(t_ConstNumberSource *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getLong());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }

            static PyObject *t_ConstNumberSource_get__number(t_ConstNumberSource *self, void *data)
            {
              ::java::lang::Number value((jobject) NULL);
              OBJ_CALL(value = self->object.getNumber());
              return ::java::lang::t_Number::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Comparable.h"
#include "java/lang/Cloneable.h"
#include "java/util/Comparator.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *CharsRef::class$ = NULL;
        jmethodID *CharsRef::mids$ = NULL;
        jfieldID *CharsRef::fids$ = NULL;
        bool CharsRef::live$ = false;
        JArray< jchar > *CharsRef::EMPTY_CHARS = NULL;

        jclass CharsRef::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/CharsRef");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_6f0bb356] = env->getMethodID(cls, "<init>", "([CII)V");
            mids$[mid_append_6f0bb356] = env->getMethodID(cls, "append", "([CII)V");
            mids$[mid_charAt_39c7bd29] = env->getMethodID(cls, "charAt", "(I)C");
            mids$[mid_charsEquals_ee7999ca] = env->getMethodID(cls, "charsEquals", "(Lorg/apache/lucene/util/CharsRef;)Z");
            mids$[mid_clone_399267bb] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/CharsRef;");
            mids$[mid_compareTo_ee7999d9] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/util/CharsRef;)I");
            mids$[mid_copyChars_ee7999c6] = env->getMethodID(cls, "copyChars", "(Lorg/apache/lucene/util/CharsRef;)V");
            mids$[mid_copyChars_6f0bb356] = env->getMethodID(cls, "copyChars", "([CII)V");
            mids$[mid_deepCopyOf_abd75df7] = env->getStaticMethodID(cls, "deepCopyOf", "(Lorg/apache/lucene/util/CharsRef;)Lorg/apache/lucene/util/CharsRef;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getUTF16SortedAsUTF8Comparator_5a7ff2fc] = env->getStaticMethodID(cls, "getUTF16SortedAsUTF8Comparator", "()Ljava/util/Comparator;");
            mids$[mid_grow_39c7bd3c] = env->getMethodID(cls, "grow", "(I)V");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isValid_54c6a16a] = env->getMethodID(cls, "isValid", "()Z");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
            mids$[mid_subSequence_f88dfd57] = env->getMethodID(cls, "subSequence", "(II)Ljava/lang/CharSequence;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_chars] = env->getFieldID(cls, "chars", "[C");
            fids$[fid_length] = env->getFieldID(cls, "length", "I");
            fids$[fid_offset] = env->getFieldID(cls, "offset", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY_CHARS = new JArray< jchar >(env->getStaticObjectField(cls, "EMPTY_CHARS", "[C"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CharsRef::CharsRef() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        CharsRef::CharsRef(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        CharsRef::CharsRef(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        CharsRef::CharsRef(const JArray< jchar > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6f0bb356, a0.this$, a1, a2)) {}

        void CharsRef::append(const JArray< jchar > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_append_6f0bb356], a0.this$, a1, a2);
        }

        jchar CharsRef::charAt(jint a0) const
        {
          return env->callCharMethod(this$, mids$[mid_charAt_39c7bd29], a0);
        }

        jboolean CharsRef::charsEquals(const CharsRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_charsEquals_ee7999ca], a0.this$);
        }

        CharsRef CharsRef::clone() const
        {
          return CharsRef(env->callObjectMethod(this$, mids$[mid_clone_399267bb]));
        }

        jint CharsRef::compareTo(const CharsRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTo_ee7999d9], a0.this$);
        }

        void CharsRef::copyChars(const CharsRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyChars_ee7999c6], a0.this$);
        }

        void CharsRef::copyChars(const JArray< jchar > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_copyChars_6f0bb356], a0.this$, a1, a2);
        }

        CharsRef CharsRef::deepCopyOf(const CharsRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return CharsRef(env->callStaticObjectMethod(cls, mids$[mid_deepCopyOf_abd75df7], a0.this$));
        }

        jboolean CharsRef::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::util::Comparator CharsRef::getUTF16SortedAsUTF8Comparator()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_getUTF16SortedAsUTF8Comparator_5a7ff2fc]));
        }

        void CharsRef::grow(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_grow_39c7bd3c], a0);
        }

        jint CharsRef::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean CharsRef::isValid() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isValid_54c6a16a]);
        }

        jint CharsRef::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }

        ::java::lang::CharSequence CharsRef::subSequence(jint a0, jint a1) const
        {
          return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_subSequence_f88dfd57], a0, a1));
        }

        ::java::lang::String CharsRef::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        JArray< jchar > CharsRef::_get_chars() const
        {
          return JArray< jchar >(env->getObjectField(this$, fids$[fid_chars]));
        }

        void CharsRef::_set_chars(const JArray< jchar > & a0) const
        {
          env->setObjectField(this$, fids$[fid_chars], a0.this$);
        }

        jint CharsRef::_get_length() const
        {
          return env->getIntField(this$, fids$[fid_length]);
        }

        void CharsRef::_set_length(jint a0) const
        {
          env->setIntField(this$, fids$[fid_length], a0);
        }

        jint CharsRef::_get_offset() const
        {
          return env->getIntField(this$, fids$[fid_offset]);
        }

        void CharsRef::_set_offset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_offset], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_CharsRef_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharsRef_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CharsRef_init_(t_CharsRef *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CharsRef_append(t_CharsRef *self, PyObject *args);
        static PyObject *t_CharsRef_charAt(t_CharsRef *self, PyObject *arg);
        static PyObject *t_CharsRef_charsEquals(t_CharsRef *self, PyObject *arg);
        static PyObject *t_CharsRef_clone(t_CharsRef *self);
        static PyObject *t_CharsRef_compareTo(t_CharsRef *self, PyObject *arg);
        static PyObject *t_CharsRef_copyChars(t_CharsRef *self, PyObject *args);
        static PyObject *t_CharsRef_deepCopyOf(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharsRef_equals(t_CharsRef *self, PyObject *args);
        static PyObject *t_CharsRef_getUTF16SortedAsUTF8Comparator(PyTypeObject *type);
        static PyObject *t_CharsRef_grow(t_CharsRef *self, PyObject *arg);
        static PyObject *t_CharsRef_hashCode(t_CharsRef *self, PyObject *args);
        static PyObject *t_CharsRef_isValid(t_CharsRef *self);
        static PyObject *t_CharsRef_length(t_CharsRef *self);
        static PyObject *t_CharsRef_subSequence(t_CharsRef *self, PyObject *args);
        static PyObject *t_CharsRef_toString(t_CharsRef *self, PyObject *args);
        static PyObject *t_CharsRef_get__chars(t_CharsRef *self, void *data);
        static int t_CharsRef_set__chars(t_CharsRef *self, PyObject *arg, void *data);
        static PyObject *t_CharsRef_get__length(t_CharsRef *self, void *data);
        static int t_CharsRef_set__length(t_CharsRef *self, PyObject *arg, void *data);
        static PyObject *t_CharsRef_get__offset(t_CharsRef *self, void *data);
        static int t_CharsRef_set__offset(t_CharsRef *self, PyObject *arg, void *data);

        static PyObject *t_CharsRef_get__uTF16SortedAsUTF8Comparator(t_CharsRef *self, void *data);
        static PyObject *t_CharsRef_get__valid(t_CharsRef *self, void *data);
        static PyGetSetDef t_CharsRef__fields_[] = {
          DECLARE_GETSET_FIELD(t_CharsRef, chars),
          DECLARE_GETSET_FIELD(t_CharsRef, length),
          DECLARE_GETSET_FIELD(t_CharsRef, offset),
          DECLARE_GET_FIELD(t_CharsRef, uTF16SortedAsUTF8Comparator),
          DECLARE_GET_FIELD(t_CharsRef, valid),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CharsRef__methods_[] = {
          DECLARE_METHOD(t_CharsRef, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharsRef, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharsRef, append, METH_VARARGS),
          DECLARE_METHOD(t_CharsRef, charAt, METH_O),
          DECLARE_METHOD(t_CharsRef, charsEquals, METH_O),
          DECLARE_METHOD(t_CharsRef, clone, METH_NOARGS),
          DECLARE_METHOD(t_CharsRef, compareTo, METH_O),
          DECLARE_METHOD(t_CharsRef, copyChars, METH_VARARGS),
          DECLARE_METHOD(t_CharsRef, deepCopyOf, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharsRef, equals, METH_VARARGS),
          DECLARE_METHOD(t_CharsRef, getUTF16SortedAsUTF8Comparator, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_CharsRef, grow, METH_O),
          DECLARE_METHOD(t_CharsRef, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_CharsRef, isValid, METH_NOARGS),
          DECLARE_METHOD(t_CharsRef, length, METH_NOARGS),
          DECLARE_METHOD(t_CharsRef, subSequence, METH_VARARGS),
          DECLARE_METHOD(t_CharsRef, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CharsRef, t_CharsRef, ::java::lang::Object, CharsRef, t_CharsRef_init_, 0, 0, t_CharsRef__fields_, 0, 0);

        void t_CharsRef::install(PyObject *module)
        {
          installType(&PY_TYPE(CharsRef), module, "CharsRef", 0);
        }

        void t_CharsRef::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CharsRef).tp_dict, "class_", make_descriptor(CharsRef::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CharsRef).tp_dict, "wrapfn_", make_descriptor(t_CharsRef::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CharsRef).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(CharsRef::initializeClass);
          PyDict_SetItemString(PY_TYPE(CharsRef).tp_dict, "EMPTY_CHARS", make_descriptor(CharsRef::EMPTY_CHARS->wrap()));
        }

        static PyObject *t_CharsRef_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CharsRef::initializeClass, 1)))
            return NULL;
          return t_CharsRef::wrap_Object(CharsRef(((t_CharsRef *) arg)->object.this$));
        }
        static PyObject *t_CharsRef_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CharsRef::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CharsRef_init_(t_CharsRef *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              CharsRef object((jobject) NULL);

              INT_CALL(object = CharsRef());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              CharsRef object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = CharsRef(a0));
                self->object = object;
                break;
              }
            }
            {
              jint a0;
              CharsRef object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = CharsRef(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              CharsRef object((jobject) NULL);

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                INT_CALL(object = CharsRef(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CharsRef_append(t_CharsRef *self, PyObject *args)
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.append(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "append", args);
          return NULL;
        }

        static PyObject *t_CharsRef_charAt(t_CharsRef *self, PyObject *arg)
        {
          jint a0;
          jchar result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.charAt(a0));
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          PyErr_SetArgsError((PyObject *) self, "charAt", arg);
          return NULL;
        }

        static PyObject *t_CharsRef_charsEquals(t_CharsRef *self, PyObject *arg)
        {
          CharsRef a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", CharsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.charsEquals(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "charsEquals", arg);
          return NULL;
        }

        static PyObject *t_CharsRef_clone(t_CharsRef *self)
        {
          CharsRef result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_CharsRef::wrap_Object(result);
        }

        static PyObject *t_CharsRef_compareTo(t_CharsRef *self, PyObject *arg)
        {
          CharsRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", CharsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.compareTo(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
          return NULL;
        }

        static PyObject *t_CharsRef_copyChars(t_CharsRef *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              CharsRef a0((jobject) NULL);

              if (!parseArgs(args, "k", CharsRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.copyChars(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.copyChars(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "copyChars", args);
          return NULL;
        }

        static PyObject *t_CharsRef_deepCopyOf(PyTypeObject *type, PyObject *arg)
        {
          CharsRef a0((jobject) NULL);
          CharsRef result((jobject) NULL);

          if (!parseArg(arg, "k", CharsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::CharsRef::deepCopyOf(a0));
            return t_CharsRef::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "deepCopyOf", arg);
          return NULL;
        }

        static PyObject *t_CharsRef_equals(t_CharsRef *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CharsRef), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_CharsRef_getUTF16SortedAsUTF8Comparator(PyTypeObject *type)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::CharsRef::getUTF16SortedAsUTF8Comparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(CharsRef));
        }

        static PyObject *t_CharsRef_grow(t_CharsRef *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.grow(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "grow", arg);
          return NULL;
        }

        static PyObject *t_CharsRef_hashCode(t_CharsRef *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(CharsRef), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_CharsRef_isValid(t_CharsRef *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isValid());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_CharsRef_length(t_CharsRef *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_CharsRef_subSequence(t_CharsRef *self, PyObject *args)
        {
          jint a0;
          jint a1;
          ::java::lang::CharSequence result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.subSequence(a0, a1));
            return ::java::lang::t_CharSequence::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "subSequence", args);
          return NULL;
        }

        static PyObject *t_CharsRef_toString(t_CharsRef *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(CharsRef), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_CharsRef_get__chars(t_CharsRef *self, void *data)
        {
          JArray< jchar > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_chars());
          return value.wrap();
        }
        static int t_CharsRef_set__chars(t_CharsRef *self, PyObject *arg, void *data)
        {
          JArray< jchar > value((jobject) NULL);
          if (!parseArg(arg, "[C", &value))
          {
            INT_CALL(self->object._set_chars(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "chars", arg);
          return -1;
        }

        static PyObject *t_CharsRef_get__length(t_CharsRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_length());
          return PyInt_FromLong((long) value);
        }
        static int t_CharsRef_set__length(t_CharsRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_length(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "length", arg);
          return -1;
        }

        static PyObject *t_CharsRef_get__offset(t_CharsRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_offset());
          return PyInt_FromLong((long) value);
        }
        static int t_CharsRef_set__offset(t_CharsRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_offset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "offset", arg);
          return -1;
        }

        static PyObject *t_CharsRef_get__uTF16SortedAsUTF8Comparator(t_CharsRef *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getUTF16SortedAsUTF8Comparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_CharsRef_get__valid(t_CharsRef *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isValid());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory.h"
#include "org/apache/lucene/analysis/miscellaneous/CapitalizationFilter.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *CapitalizationFilterFactory::class$ = NULL;
          jmethodID *CapitalizationFilterFactory::mids$ = NULL;
          bool CapitalizationFilterFactory::live$ = false;
          ::java::lang::String *CapitalizationFilterFactory::FORCE_FIRST_LETTER = NULL;
          ::java::lang::String *CapitalizationFilterFactory::KEEP = NULL;
          ::java::lang::String *CapitalizationFilterFactory::KEEP_IGNORE_CASE = NULL;
          ::java::lang::String *CapitalizationFilterFactory::MAX_TOKEN_LENGTH = NULL;
          ::java::lang::String *CapitalizationFilterFactory::MAX_WORD_COUNT = NULL;
          ::java::lang::String *CapitalizationFilterFactory::MIN_WORD_LENGTH = NULL;
          ::java::lang::String *CapitalizationFilterFactory::OK_PREFIX = NULL;
          ::java::lang::String *CapitalizationFilterFactory::ONLY_FIRST_WORD = NULL;

          jclass CapitalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_9cf532c8] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/CapitalizationFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              FORCE_FIRST_LETTER = new ::java::lang::String(env->getStaticObjectField(cls, "FORCE_FIRST_LETTER", "Ljava/lang/String;"));
              KEEP = new ::java::lang::String(env->getStaticObjectField(cls, "KEEP", "Ljava/lang/String;"));
              KEEP_IGNORE_CASE = new ::java::lang::String(env->getStaticObjectField(cls, "KEEP_IGNORE_CASE", "Ljava/lang/String;"));
              MAX_TOKEN_LENGTH = new ::java::lang::String(env->getStaticObjectField(cls, "MAX_TOKEN_LENGTH", "Ljava/lang/String;"));
              MAX_WORD_COUNT = new ::java::lang::String(env->getStaticObjectField(cls, "MAX_WORD_COUNT", "Ljava/lang/String;"));
              MIN_WORD_LENGTH = new ::java::lang::String(env->getStaticObjectField(cls, "MIN_WORD_LENGTH", "Ljava/lang/String;"));
              OK_PREFIX = new ::java::lang::String(env->getStaticObjectField(cls, "OK_PREFIX", "Ljava/lang/String;"));
              ONLY_FIRST_WORD = new ::java::lang::String(env->getStaticObjectField(cls, "ONLY_FIRST_WORD", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CapitalizationFilterFactory::CapitalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::CapitalizationFilter CapitalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::CapitalizationFilter(env->callObjectMethod(this$, mids$[mid_create_9cf532c8], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_CapitalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CapitalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CapitalizationFilterFactory_init_(t_CapitalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CapitalizationFilterFactory_create(t_CapitalizationFilterFactory *self, PyObject *args);

          static PyMethodDef t_CapitalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CapitalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CapitalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CapitalizationFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CapitalizationFilterFactory, t_CapitalizationFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, CapitalizationFilterFactory, t_CapitalizationFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_CapitalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CapitalizationFilterFactory), module, "CapitalizationFilterFactory", 0);
          }

          void t_CapitalizationFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "class_", make_descriptor(CapitalizationFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CapitalizationFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CapitalizationFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "FORCE_FIRST_LETTER", make_descriptor(j2p(*CapitalizationFilterFactory::FORCE_FIRST_LETTER)));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "KEEP", make_descriptor(j2p(*CapitalizationFilterFactory::KEEP)));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "KEEP_IGNORE_CASE", make_descriptor(j2p(*CapitalizationFilterFactory::KEEP_IGNORE_CASE)));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "MAX_TOKEN_LENGTH", make_descriptor(j2p(*CapitalizationFilterFactory::MAX_TOKEN_LENGTH)));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "MAX_WORD_COUNT", make_descriptor(j2p(*CapitalizationFilterFactory::MAX_WORD_COUNT)));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "MIN_WORD_LENGTH", make_descriptor(j2p(*CapitalizationFilterFactory::MIN_WORD_LENGTH)));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "OK_PREFIX", make_descriptor(j2p(*CapitalizationFilterFactory::OK_PREFIX)));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "ONLY_FIRST_WORD", make_descriptor(j2p(*CapitalizationFilterFactory::ONLY_FIRST_WORD)));
          }

          static PyObject *t_CapitalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CapitalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CapitalizationFilterFactory::wrap_Object(CapitalizationFilterFactory(((t_CapitalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CapitalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CapitalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CapitalizationFilterFactory_init_(t_CapitalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CapitalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CapitalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CapitalizationFilterFactory_create(t_CapitalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::CapitalizationFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_CapitalizationFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CapitalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicStemFilterFactory.h"
#include "org/apache/lucene/analysis/ar/ArabicStemFilter.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicStemFilterFactory::class$ = NULL;
          jmethodID *ArabicStemFilterFactory::mids$ = NULL;
          bool ArabicStemFilterFactory::live$ = false;

          jclass ArabicStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_f95e0269] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/ar/ArabicStemFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicStemFilterFactory::ArabicStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::ar::ArabicStemFilter ArabicStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::ar::ArabicStemFilter(env->callObjectMethod(this$, mids$[mid_create_f95e0269], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicStemFilterFactory_init_(t_ArabicStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicStemFilterFactory_create(t_ArabicStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_ArabicStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ArabicStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicStemFilterFactory, t_ArabicStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ArabicStemFilterFactory, t_ArabicStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ArabicStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicStemFilterFactory), module, "ArabicStemFilterFactory", 0);
          }

          void t_ArabicStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicStemFilterFactory).tp_dict, "class_", make_descriptor(ArabicStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ArabicStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ArabicStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ArabicStemFilterFactory::wrap_Object(ArabicStemFilterFactory(((t_ArabicStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ArabicStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicStemFilterFactory_init_(t_ArabicStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ArabicStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ArabicStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArabicStemFilterFactory_create(t_ArabicStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::ar::ArabicStemFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::ar::t_ArabicStemFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ArabicStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "org/apache/lucene/facet/FacetsCollector$MatchingDocs.h"
#include "org/apache/lucene/search/TopFieldDocs.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *FacetsCollector::class$ = NULL;
        jmethodID *FacetsCollector::mids$ = NULL;
        bool FacetsCollector::live$ = false;

        jclass FacetsCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/FacetsCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_getKeepScores_54c6a16a] = env->getMethodID(cls, "getKeepScores", "()Z");
            mids$[mid_getMatchingDocs_87851566] = env->getMethodID(cls, "getMatchingDocs", "()Ljava/util/List;");
            mids$[mid_search_670d4dc3] = env->getStaticMethodID(cls, "search", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Query;ILorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_search_904a71a9] = env->getStaticMethodID(cls, "search", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_search_d8966278] = env->getStaticMethodID(cls, "search", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Sort;Lorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_search_c564507a] = env->getStaticMethodID(cls, "search", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Sort;ZZLorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_searchAfter_4ab72933] = env->getMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;ILorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_searchAfter_be14f375] = env->getStaticMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_searchAfter_8d45b2eb] = env->getStaticMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Sort;Lorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_searchAfter_b14f4589] = env->getStaticMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Sort;ZZLorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
            mids$[mid_createDocs_04d72adb] = env->getMethodID(cls, "createDocs", "(I)Lorg/apache/lucene/facet/FacetsCollector$Docs;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FacetsCollector::FacetsCollector() : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        FacetsCollector::FacetsCollector(jboolean a0) : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

        jboolean FacetsCollector::acceptsDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
        }

        void FacetsCollector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
        }

        jboolean FacetsCollector::getKeepScores() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getKeepScores_54c6a16a]);
        }

        ::java::util::List FacetsCollector::getMatchingDocs() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getMatchingDocs_87851566]));
        }

        ::org::apache::lucene::search::TopDocs FacetsCollector::search(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Query & a1, jint a2, const ::org::apache::lucene::search::Collector & a3)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopDocs(env->callStaticObjectMethod(cls, mids$[mid_search_670d4dc3], a0.this$, a1.this$, a2, a3.this$));
        }

        ::org::apache::lucene::search::TopDocs FacetsCollector::search(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::Filter & a2, jint a3, const ::org::apache::lucene::search::Collector & a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopDocs(env->callStaticObjectMethod(cls, mids$[mid_search_904a71a9], a0.this$, a1.this$, a2.this$, a3, a4.this$));
        }

        ::org::apache::lucene::search::TopFieldDocs FacetsCollector::search(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::Filter & a2, jint a3, const ::org::apache::lucene::search::Sort & a4, const ::org::apache::lucene::search::Collector & a5)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopFieldDocs(env->callStaticObjectMethod(cls, mids$[mid_search_d8966278], a0.this$, a1.this$, a2.this$, a3, a4.this$, a5.this$));
        }

        ::org::apache::lucene::search::TopFieldDocs FacetsCollector::search(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::Filter & a2, jint a3, const ::org::apache::lucene::search::Sort & a4, jboolean a5, jboolean a6, const ::org::apache::lucene::search::Collector & a7)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopFieldDocs(env->callStaticObjectMethod(cls, mids$[mid_search_c564507a], a0.this$, a1.this$, a2.this$, a3, a4.this$, a5, a6, a7.this$));
        }

        ::org::apache::lucene::search::TopDocs FacetsCollector::searchAfter(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreDoc & a1, const ::org::apache::lucene::search::Query & a2, jint a3, const ::org::apache::lucene::search::Collector & a4) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_searchAfter_4ab72933], a0.this$, a1.this$, a2.this$, a3, a4.this$));
        }

        ::org::apache::lucene::search::TopDocs FacetsCollector::searchAfter(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreDoc & a1, const ::org::apache::lucene::search::Query & a2, const ::org::apache::lucene::search::Filter & a3, jint a4, const ::org::apache::lucene::search::Collector & a5)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopDocs(env->callStaticObjectMethod(cls, mids$[mid_searchAfter_be14f375], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5.this$));
        }

        ::org::apache::lucene::search::TopDocs FacetsCollector::searchAfter(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreDoc & a1, const ::org::apache::lucene::search::Query & a2, const ::org::apache::lucene::search::Filter & a3, jint a4, const ::org::apache::lucene::search::Sort & a5, const ::org::apache::lucene::search::Collector & a6)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopDocs(env->callStaticObjectMethod(cls, mids$[mid_searchAfter_8d45b2eb], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5.this$, a6.this$));
        }

        ::org::apache::lucene::search::TopDocs FacetsCollector::searchAfter(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreDoc & a1, const ::org::apache::lucene::search::Query & a2, const ::org::apache::lucene::search::Filter & a3, jint a4, const ::org::apache::lucene::search::Sort & a5, jboolean a6, jboolean a7, const ::org::apache::lucene::search::Collector & a8)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopDocs(env->callStaticObjectMethod(cls, mids$[mid_searchAfter_b14f4589], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5.this$, a6, a7, a8.this$));
        }

        void FacetsCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
        }

        void FacetsCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_FacetsCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetsCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FacetsCollector_init_(t_FacetsCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FacetsCollector_acceptsDocsOutOfOrder(t_FacetsCollector *self, PyObject *args);
        static PyObject *t_FacetsCollector_collect(t_FacetsCollector *self, PyObject *args);
        static PyObject *t_FacetsCollector_getKeepScores(t_FacetsCollector *self);
        static PyObject *t_FacetsCollector_getMatchingDocs(t_FacetsCollector *self);
        static PyObject *t_FacetsCollector_search(PyTypeObject *type, PyObject *args);
        static PyObject *t_FacetsCollector_searchAfter(t_FacetsCollector *self, PyObject *args);
        static PyObject *t_FacetsCollector_searchAfter_(PyTypeObject *type, PyObject *args);
        static PyObject *t_FacetsCollector_setNextReader(t_FacetsCollector *self, PyObject *args);
        static PyObject *t_FacetsCollector_setScorer(t_FacetsCollector *self, PyObject *args);
        static PyObject *t_FacetsCollector_get__keepScores(t_FacetsCollector *self, void *data);
        static PyObject *t_FacetsCollector_get__matchingDocs(t_FacetsCollector *self, void *data);
        static int t_FacetsCollector_set__nextReader(t_FacetsCollector *self, PyObject *arg, void *data);
        static int t_FacetsCollector_set__scorer(t_FacetsCollector *self, PyObject *arg, void *data);
        static PyGetSetDef t_FacetsCollector__fields_[] = {
          DECLARE_GET_FIELD(t_FacetsCollector, keepScores),
          DECLARE_GET_FIELD(t_FacetsCollector, matchingDocs),
          DECLARE_SET_FIELD(t_FacetsCollector, nextReader),
          DECLARE_SET_FIELD(t_FacetsCollector, scorer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FacetsCollector__methods_[] = {
          DECLARE_METHOD(t_FacetsCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsCollector, acceptsDocsOutOfOrder, METH_VARARGS),
          DECLARE_METHOD(t_FacetsCollector, collect, METH_VARARGS),
          DECLARE_METHOD(t_FacetsCollector, getKeepScores, METH_NOARGS),
          DECLARE_METHOD(t_FacetsCollector, getMatchingDocs, METH_NOARGS),
          DECLARE_METHOD(t_FacetsCollector, search, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FacetsCollector, searchAfter, METH_VARARGS),
          DECLARE_METHOD(t_FacetsCollector, searchAfter_, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FacetsCollector, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FacetsCollector, setScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FacetsCollector, t_FacetsCollector, ::org::apache::lucene::search::Collector, FacetsCollector, t_FacetsCollector_init_, 0, 0, t_FacetsCollector__fields_, 0, 0);

        void t_FacetsCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(FacetsCollector), module, "FacetsCollector", 0);
          PyDict_SetItemString(PY_TYPE(FacetsCollector).tp_dict, "MatchingDocs", make_descriptor(&PY_TYPE(FacetsCollector$MatchingDocs)));
        }

        void t_FacetsCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FacetsCollector).tp_dict, "class_", make_descriptor(FacetsCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FacetsCollector).tp_dict, "wrapfn_", make_descriptor(t_FacetsCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FacetsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FacetsCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FacetsCollector::initializeClass, 1)))
            return NULL;
          return t_FacetsCollector::wrap_Object(FacetsCollector(((t_FacetsCollector *) arg)->object.this$));
        }
        static PyObject *t_FacetsCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FacetsCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FacetsCollector_init_(t_FacetsCollector *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              FacetsCollector object((jobject) NULL);

              INT_CALL(object = FacetsCollector());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              jboolean a0;
              FacetsCollector object((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                INT_CALL(object = FacetsCollector(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FacetsCollector_acceptsDocsOutOfOrder(t_FacetsCollector *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FacetsCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
        }

        static PyObject *t_FacetsCollector_collect(t_FacetsCollector *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FacetsCollector), (PyObject *) self, "collect", args, 2);
        }

        static PyObject *t_FacetsCollector_getKeepScores(t_FacetsCollector *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getKeepScores());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FacetsCollector_getMatchingDocs(t_FacetsCollector *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.getMatchingDocs());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::facet::PY_TYPE(FacetsCollector$MatchingDocs));
        }

        static PyObject *t_FacetsCollector_search(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 4:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::Collector a3((jobject) NULL);
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkIk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::search(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 5:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              ::org::apache::lucene::search::Filter a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::Collector a4((jobject) NULL);
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkIk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::search(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 6:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              ::org::apache::lucene::search::Filter a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::Sort a4((jobject) NULL);
              ::org::apache::lucene::search::Collector a5((jobject) NULL);
              ::org::apache::lucene::search::TopFieldDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkIkk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::search(a0, a1, a2, a3, a4, a5));
                return ::org::apache::lucene::search::t_TopFieldDocs::wrap_Object(result);
              }
            }
            break;
           case 8:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              ::org::apache::lucene::search::Filter a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::Sort a4((jobject) NULL);
              jboolean a5;
              jboolean a6;
              ::org::apache::lucene::search::Collector a7((jobject) NULL);
              ::org::apache::lucene::search::TopFieldDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkIkZZk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::search(a0, a1, a2, a3, a4, a5, a6, a7));
                return ::org::apache::lucene::search::t_TopFieldDocs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "search", args);
          return NULL;
        }

        static PyObject *t_FacetsCollector_searchAfter(t_FacetsCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::ScoreDoc a1((jobject) NULL);
          ::org::apache::lucene::search::Query a2((jobject) NULL);
          jint a3;
          ::org::apache::lucene::search::Collector a4((jobject) NULL);
          ::org::apache::lucene::search::TopDocs result((jobject) NULL);

          if (!parseArgs(args, "kkkIk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = self->object.searchAfter(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "searchAfter", args);
          return NULL;
        }

        static PyObject *t_FacetsCollector_searchAfter_(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 6:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::ScoreDoc a1((jobject) NULL);
              ::org::apache::lucene::search::Query a2((jobject) NULL);
              ::org::apache::lucene::search::Filter a3((jobject) NULL);
              jint a4;
              ::org::apache::lucene::search::Collector a5((jobject) NULL);
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkkIk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::searchAfter(a0, a1, a2, a3, a4, a5));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 7:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::ScoreDoc a1((jobject) NULL);
              ::org::apache::lucene::search::Query a2((jobject) NULL);
              ::org::apache::lucene::search::Filter a3((jobject) NULL);
              jint a4;
              ::org::apache::lucene::search::Sort a5((jobject) NULL);
              ::org::apache::lucene::search::Collector a6((jobject) NULL);
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkkIkk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::searchAfter(a0, a1, a2, a3, a4, a5, a6));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 9:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::ScoreDoc a1((jobject) NULL);
              ::org::apache::lucene::search::Query a2((jobject) NULL);
              ::org::apache::lucene::search::Filter a3((jobject) NULL);
              jint a4;
              ::org::apache::lucene::search::Sort a5((jobject) NULL);
              jboolean a6;
              jboolean a7;
              ::org::apache::lucene::search::Collector a8((jobject) NULL);
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkkIkZZk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::searchAfter(a0, a1, a2, a3, a4, a5, a6, a7, a8));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "searchAfter_", args);
          return NULL;
        }

        static PyObject *t_FacetsCollector_setNextReader(t_FacetsCollector *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setNextReader(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FacetsCollector), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FacetsCollector_setScorer(t_FacetsCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FacetsCollector), (PyObject *) self, "setScorer", args, 2);
        }

        static PyObject *t_FacetsCollector_get__keepScores(t_FacetsCollector *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getKeepScores());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_FacetsCollector_get__matchingDocs(t_FacetsCollector *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getMatchingDocs());
          return ::java::util::t_List::wrap_Object(value);
        }

        static int t_FacetsCollector_set__nextReader(t_FacetsCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FacetsCollector_set__scorer(t_FacetsCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/KeywordMarkerFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *KeywordMarkerFilterFactory::class$ = NULL;
          jmethodID *KeywordMarkerFilterFactory::mids$ = NULL;
          bool KeywordMarkerFilterFactory::live$ = false;
          ::java::lang::String *KeywordMarkerFilterFactory::PATTERN = NULL;
          ::java::lang::String *KeywordMarkerFilterFactory::PROTECTED_TOKENS = NULL;

          jclass KeywordMarkerFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/KeywordMarkerFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_isIgnoreCase_54c6a16a] = env->getMethodID(cls, "isIgnoreCase", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              PATTERN = new ::java::lang::String(env->getStaticObjectField(cls, "PATTERN", "Ljava/lang/String;"));
              PROTECTED_TOKENS = new ::java::lang::String(env->getStaticObjectField(cls, "PROTECTED_TOKENS", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordMarkerFilterFactory::KeywordMarkerFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream KeywordMarkerFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          void KeywordMarkerFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }

          jboolean KeywordMarkerFilterFactory::isIgnoreCase() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIgnoreCase_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_KeywordMarkerFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordMarkerFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordMarkerFilterFactory_init_(t_KeywordMarkerFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeywordMarkerFilterFactory_create(t_KeywordMarkerFilterFactory *self, PyObject *args);
          static PyObject *t_KeywordMarkerFilterFactory_inform(t_KeywordMarkerFilterFactory *self, PyObject *arg);
          static PyObject *t_KeywordMarkerFilterFactory_isIgnoreCase(t_KeywordMarkerFilterFactory *self);
          static PyObject *t_KeywordMarkerFilterFactory_get__ignoreCase(t_KeywordMarkerFilterFactory *self, void *data);
          static PyGetSetDef t_KeywordMarkerFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_KeywordMarkerFilterFactory, ignoreCase),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_KeywordMarkerFilterFactory__methods_[] = {
            DECLARE_METHOD(t_KeywordMarkerFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordMarkerFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordMarkerFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_KeywordMarkerFilterFactory, inform, METH_O),
            DECLARE_METHOD(t_KeywordMarkerFilterFactory, isIgnoreCase, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordMarkerFilterFactory, t_KeywordMarkerFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, KeywordMarkerFilterFactory, t_KeywordMarkerFilterFactory_init_, 0, 0, t_KeywordMarkerFilterFactory__fields_, 0, 0);

          void t_KeywordMarkerFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordMarkerFilterFactory), module, "KeywordMarkerFilterFactory", 0);
          }

          void t_KeywordMarkerFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordMarkerFilterFactory).tp_dict, "class_", make_descriptor(KeywordMarkerFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordMarkerFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_KeywordMarkerFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordMarkerFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(KeywordMarkerFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(KeywordMarkerFilterFactory).tp_dict, "PATTERN", make_descriptor(j2p(*KeywordMarkerFilterFactory::PATTERN)));
            PyDict_SetItemString(PY_TYPE(KeywordMarkerFilterFactory).tp_dict, "PROTECTED_TOKENS", make_descriptor(j2p(*KeywordMarkerFilterFactory::PROTECTED_TOKENS)));
          }

          static PyObject *t_KeywordMarkerFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordMarkerFilterFactory::initializeClass, 1)))
              return NULL;
            return t_KeywordMarkerFilterFactory::wrap_Object(KeywordMarkerFilterFactory(((t_KeywordMarkerFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_KeywordMarkerFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordMarkerFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordMarkerFilterFactory_init_(t_KeywordMarkerFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            KeywordMarkerFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = KeywordMarkerFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeywordMarkerFilterFactory_create(t_KeywordMarkerFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(KeywordMarkerFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_KeywordMarkerFilterFactory_inform(t_KeywordMarkerFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_KeywordMarkerFilterFactory_isIgnoreCase(t_KeywordMarkerFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isIgnoreCase());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_KeywordMarkerFilterFactory_get__ignoreCase(t_KeywordMarkerFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isIgnoreCase());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40StoredFieldsReader::class$ = NULL;
          jmethodID *Lucene40StoredFieldsReader::mids$ = NULL;
          bool Lucene40StoredFieldsReader::live$ = false;

          jclass Lucene40StoredFieldsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_3589180f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)V");
              mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_clone_2f3580b7] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader;");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_rawDocs_1a4b1309] = env->getMethodID(cls, "rawDocs", "([III)Lorg/apache/lucene/store/IndexInput;");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
              mids$[mid_visitDocument_a2ea3ebe] = env->getMethodID(cls, "visitDocument", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40StoredFieldsReader::Lucene40StoredFieldsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) : ::org::apache::lucene::codecs::StoredFieldsReader(env->newObject(initializeClass, &mids$, mid_init$_3589180f, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          void Lucene40StoredFieldsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
          }

          Lucene40StoredFieldsReader Lucene40StoredFieldsReader::clone() const
          {
            return Lucene40StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_clone_2f3580b7]));
          }

          void Lucene40StoredFieldsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          jlong Lucene40StoredFieldsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          ::org::apache::lucene::store::IndexInput Lucene40StoredFieldsReader::rawDocs(const JArray< jint > & a0, jint a1, jint a2) const
          {
            return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_rawDocs_1a4b1309], a0.this$, a1, a2));
          }

          jint Lucene40StoredFieldsReader::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }

          void Lucene40StoredFieldsReader::visitDocument(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_visitDocument_a2ea3ebe], a0, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40StoredFieldsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40StoredFieldsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40StoredFieldsReader_init_(t_Lucene40StoredFieldsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40StoredFieldsReader_checkIntegrity(t_Lucene40StoredFieldsReader *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsReader_clone(t_Lucene40StoredFieldsReader *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsReader_close(t_Lucene40StoredFieldsReader *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsReader_ramBytesUsed(t_Lucene40StoredFieldsReader *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsReader_rawDocs(t_Lucene40StoredFieldsReader *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsReader_size(t_Lucene40StoredFieldsReader *self);
          static PyObject *t_Lucene40StoredFieldsReader_visitDocument(t_Lucene40StoredFieldsReader *self, PyObject *args);

          static PyMethodDef t_Lucene40StoredFieldsReader__methods_[] = {
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, clone, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, rawDocs, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, size, METH_NOARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, visitDocument, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40StoredFieldsReader, t_Lucene40StoredFieldsReader, ::org::apache::lucene::codecs::StoredFieldsReader, Lucene40StoredFieldsReader, t_Lucene40StoredFieldsReader_init_, 0, 0, 0, 0, 0);

          void t_Lucene40StoredFieldsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40StoredFieldsReader), module, "Lucene40StoredFieldsReader", 0);
          }

          void t_Lucene40StoredFieldsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsReader).tp_dict, "class_", make_descriptor(Lucene40StoredFieldsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsReader).tp_dict, "wrapfn_", make_descriptor(t_Lucene40StoredFieldsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40StoredFieldsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40StoredFieldsReader::initializeClass, 1)))
              return NULL;
            return t_Lucene40StoredFieldsReader::wrap_Object(Lucene40StoredFieldsReader(((t_Lucene40StoredFieldsReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene40StoredFieldsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40StoredFieldsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40StoredFieldsReader_init_(t_Lucene40StoredFieldsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            Lucene40StoredFieldsReader object((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = Lucene40StoredFieldsReader(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene40StoredFieldsReader_checkIntegrity(t_Lucene40StoredFieldsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsReader_clone(t_Lucene40StoredFieldsReader *self, PyObject *args)
          {
            Lucene40StoredFieldsReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_Lucene40StoredFieldsReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsReader), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsReader_close(t_Lucene40StoredFieldsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsReader_ramBytesUsed(t_Lucene40StoredFieldsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsReader_rawDocs(t_Lucene40StoredFieldsReader *self, PyObject *args)
          {
            JArray< jint > a0((jobject) NULL);
            jint a1;
            jint a2;
            ::org::apache::lucene::store::IndexInput result((jobject) NULL);

            if (!parseArgs(args, "[III", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.rawDocs(a0, a1, a2));
              return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "rawDocs", args);
            return NULL;
          }

          static PyObject *t_Lucene40StoredFieldsReader_size(t_Lucene40StoredFieldsReader *self)
          {
            jint result;
            OBJ_CALL(result = self->object.size());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Lucene40StoredFieldsReader_visitDocument(t_Lucene40StoredFieldsReader *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

            if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.visitDocument(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsReader), (PyObject *) self, "visitDocument", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Boolean.h"
#include "java/lang/Class.h"
#include "java/lang/Comparable.h"
#include "java/io/Serializable.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Boolean::class$ = NULL;
    jmethodID *Boolean::mids$ = NULL;
    bool Boolean::live$ = false;
    Boolean *Boolean::FALSE = NULL;
    Boolean *Boolean::TRUE = NULL;
    ::java::lang::Class *Boolean::TYPE = NULL;

    jclass Boolean::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Boolean");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_booleanValue_54c6a16a] = env->getMethodID(cls, "booleanValue", "()Z");
        mids$[mid_compare_46f2e2db] = env->getStaticMethodID(cls, "compare", "(ZZ)I");
        mids$[mid_compareTo_d07f0c91] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Boolean;)I");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_getBoolean_5fdc3f44] = env->getStaticMethodID(cls, "getBoolean", "(Ljava/lang/String;)Z");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_hashCode_bb0c7660] = env->getStaticMethodID(cls, "hashCode", "(Z)I");
        mids$[mid_logicalAnd_46f2e2c8] = env->getStaticMethodID(cls, "logicalAnd", "(ZZ)Z");
        mids$[mid_logicalOr_46f2e2c8] = env->getStaticMethodID(cls, "logicalOr", "(ZZ)Z");
        mids$[mid_logicalXor_46f2e2c8] = env->getStaticMethodID(cls, "logicalXor", "(ZZ)Z");
        mids$[mid_parseBoolean_5fdc3f44] = env->getStaticMethodID(cls, "parseBoolean", "(Ljava/lang/String;)Z");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_445a175e] = env->getStaticMethodID(cls, "toString", "(Z)Ljava/lang/String;");
        mids$[mid_valueOf_a98d5bba] = env->getStaticMethodID(cls, "valueOf", "(Z)Ljava/lang/Boolean;");
        mids$[mid_valueOf_9d4a8ff9] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Boolean;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        FALSE = new Boolean(env->getStaticObjectField(cls, "FALSE", "Ljava/lang/Boolean;"));
        TRUE = new Boolean(env->getStaticObjectField(cls, "TRUE", "Ljava/lang/Boolean;"));
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Boolean::Boolean(jboolean a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

    Boolean::Boolean(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    jboolean Boolean::booleanValue() const
    {
      return env->callBooleanMethod(this$, mids$[mid_booleanValue_54c6a16a]);
    }

    jint Boolean::compare(jboolean a0, jboolean a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_46f2e2db], a0, a1);
    }

    jint Boolean::compareTo(const Boolean & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_d07f0c91], a0.this$);
    }

    jboolean Boolean::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jboolean Boolean::getBoolean(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_getBoolean_5fdc3f44], a0.this$);
    }

    jint Boolean::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jint Boolean::hashCode(jboolean a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_bb0c7660], a0);
    }

    jboolean Boolean::logicalAnd(jboolean a0, jboolean a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_logicalAnd_46f2e2c8], a0, a1);
    }

    jboolean Boolean::logicalOr(jboolean a0, jboolean a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_logicalOr_46f2e2c8], a0, a1);
    }

    jboolean Boolean::logicalXor(jboolean a0, jboolean a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_logicalXor_46f2e2c8], a0, a1);
    }

    jboolean Boolean::parseBoolean(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_parseBoolean_5fdc3f44], a0.this$);
    }

    ::java::lang::String Boolean::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Boolean::toString(jboolean a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_445a175e], a0));
    }

    Boolean Boolean::valueOf(jboolean a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Boolean(env->callStaticObjectMethod(cls, mids$[mid_valueOf_a98d5bba], a0));
    }

    Boolean Boolean::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Boolean(env->callStaticObjectMethod(cls, mids$[mid_valueOf_9d4a8ff9], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Boolean_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Boolean_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Boolean_init_(t_Boolean *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Boolean_booleanValue(t_Boolean *self);
    static PyObject *t_Boolean_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Boolean_compareTo(t_Boolean *self, PyObject *arg);
    static PyObject *t_Boolean_equals(t_Boolean *self, PyObject *args);
    static PyObject *t_Boolean_getBoolean(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Boolean_hashCode(t_Boolean *self, PyObject *args);
    static PyObject *t_Boolean_hashCode_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Boolean_logicalAnd(PyTypeObject *type, PyObject *args);
    static PyObject *t_Boolean_logicalOr(PyTypeObject *type, PyObject *args);
    static PyObject *t_Boolean_logicalXor(PyTypeObject *type, PyObject *args);
    static PyObject *t_Boolean_parseBoolean(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Boolean_toString(t_Boolean *self, PyObject *args);
    static PyObject *t_Boolean_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Boolean_valueOf(PyTypeObject *type, PyObject *args);

    static PyMethodDef t_Boolean__methods_[] = {
      DECLARE_METHOD(t_Boolean, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Boolean, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Boolean, booleanValue, METH_NOARGS),
      DECLARE_METHOD(t_Boolean, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Boolean, compareTo, METH_O),
      DECLARE_METHOD(t_Boolean, equals, METH_VARARGS),
      DECLARE_METHOD(t_Boolean, getBoolean, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Boolean, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Boolean, hashCode_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Boolean, logicalAnd, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Boolean, logicalOr, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Boolean, logicalXor, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Boolean, parseBoolean, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Boolean, toString, METH_VARARGS),
      DECLARE_METHOD(t_Boolean, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Boolean, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Boolean, t_Boolean, ::java::lang::Object, Boolean, t_Boolean_init_, 0, 0, 0, 0, 0);

    void t_Boolean::install(PyObject *module)
    {
      installType(&PY_TYPE(Boolean), module, "Boolean", 0);
    }

    void t_Boolean::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Boolean).tp_dict, "class_", make_descriptor(Boolean::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Boolean).tp_dict, "wrapfn_", make_descriptor(unboxBoolean));
      PyDict_SetItemString(PY_TYPE(Boolean).tp_dict, "boxfn_", make_descriptor(boxBoolean));
      env->getClass(Boolean::initializeClass);
      PyDict_SetItemString(PY_TYPE(Boolean).tp_dict, "FALSE", make_descriptor(t_Boolean::wrap_Object(*Boolean::FALSE)));
      PyDict_SetItemString(PY_TYPE(Boolean).tp_dict, "TRUE", make_descriptor(t_Boolean::wrap_Object(*Boolean::TRUE)));
      PyDict_SetItemString(PY_TYPE(Boolean).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Boolean::TYPE)));
    }

    static PyObject *t_Boolean_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Boolean::initializeClass, 1)))
        return NULL;
      return t_Boolean::wrap_Object(Boolean(((t_Boolean *) arg)->object.this$));
    }
    static PyObject *t_Boolean_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Boolean::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Boolean_init_(t_Boolean *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jboolean a0;
          Boolean object((jobject) NULL);

          if (!parseArgs(args, "Z", &a0))
          {
            INT_CALL(object = Boolean(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Boolean object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Boolean(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Boolean_booleanValue(t_Boolean *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.booleanValue());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Boolean_compare(PyTypeObject *type, PyObject *args)
    {
      jboolean a0;
      jboolean a1;
      jint result;

      if (!parseArgs(args, "ZZ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Boolean::compare(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Boolean_compareTo(t_Boolean *self, PyObject *arg)
    {
      Boolean a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Boolean), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Boolean_equals(t_Boolean *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Boolean), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Boolean_getBoolean(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Boolean::getBoolean(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "getBoolean", arg);
      return NULL;
    }

    static PyObject *t_Boolean_hashCode(t_Boolean *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Boolean), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Boolean_hashCode_(PyTypeObject *type, PyObject *args)
    {
      jboolean a0;
      jint result;

      if (!parseArgs(args, "Z", &a0))
      {
        OBJ_CALL(result = ::java::lang::Boolean::hashCode(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "hashCode_", args);
      return NULL;
    }

    static PyObject *t_Boolean_logicalAnd(PyTypeObject *type, PyObject *args)
    {
      jboolean a0;
      jboolean a1;
      jboolean result;

      if (!parseArgs(args, "ZZ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Boolean::logicalAnd(a0, a1));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "logicalAnd", args);
      return NULL;
    }

    static PyObject *t_Boolean_logicalOr(PyTypeObject *type, PyObject *args)
    {
      jboolean a0;
      jboolean a1;
      jboolean result;

      if (!parseArgs(args, "ZZ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Boolean::logicalOr(a0, a1));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "logicalOr", args);
      return NULL;
    }

    static PyObject *t_Boolean_logicalXor(PyTypeObject *type, PyObject *args)
    {
      jboolean a0;
      jboolean a1;
      jboolean result;

      if (!parseArgs(args, "ZZ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Boolean::logicalXor(a0, a1));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "logicalXor", args);
      return NULL;
    }

    static PyObject *t_Boolean_parseBoolean(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Boolean::parseBoolean(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "parseBoolean", arg);
      return NULL;
    }

    static PyObject *t_Boolean_toString(t_Boolean *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Boolean), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Boolean_toString_(PyTypeObject *type, PyObject *args)
    {
      jboolean a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "Z", &a0))
      {
        OBJ_CALL(result = ::java::lang::Boolean::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Boolean_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jboolean a0;
          Boolean result((jobject) NULL);

          if (!parseArgs(args, "Z", &a0))
          {
            OBJ_CALL(result = ::java::lang::Boolean::valueOf(a0));
            return t_Boolean::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Boolean result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Boolean::valueOf(a0));
            return t_Boolean::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$CacheEntry.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$CacheEntry::class$ = NULL;
        jmethodID *FieldCache$CacheEntry::mids$ = NULL;
        bool FieldCache$CacheEntry::live$ = false;

        jclass FieldCache$CacheEntry::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$CacheEntry");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6f799b58] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Class;Ljava/lang/Object;Lorg/apache/lucene/util/Accountable;)V");
            mids$[mid_getCacheType_44a5f2c9] = env->getMethodID(cls, "getCacheType", "()Ljava/lang/Class;");
            mids$[mid_getCustom_846352c3] = env->getMethodID(cls, "getCustom", "()Ljava/lang/Object;");
            mids$[mid_getEstimatedSize_14c7b5c5] = env->getMethodID(cls, "getEstimatedSize", "()Ljava/lang/String;");
            mids$[mid_getFieldName_14c7b5c5] = env->getMethodID(cls, "getFieldName", "()Ljava/lang/String;");
            mids$[mid_getReaderKey_846352c3] = env->getMethodID(cls, "getReaderKey", "()Ljava/lang/Object;");
            mids$[mid_getValue_846352c3] = env->getMethodID(cls, "getValue", "()Ljava/lang/Object;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCache$CacheEntry::FieldCache$CacheEntry(const ::java::lang::Object & a0, const ::java::lang::String & a1, const ::java::lang::Class & a2, const ::java::lang::Object & a3, const ::org::apache::lucene::util::Accountable & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6f799b58, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}

        ::java::lang::Class FieldCache$CacheEntry::getCacheType() const
        {
          return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_getCacheType_44a5f2c9]));
        }

        ::java::lang::Object FieldCache$CacheEntry::getCustom() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getCustom_846352c3]));
        }

        ::java::lang::String FieldCache$CacheEntry::getEstimatedSize() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getEstimatedSize_14c7b5c5]));
        }

        ::java::lang::String FieldCache$CacheEntry::getFieldName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldName_14c7b5c5]));
        }

        ::java::lang::Object FieldCache$CacheEntry::getReaderKey() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getReaderKey_846352c3]));
        }

        ::java::lang::Object FieldCache$CacheEntry::getValue() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getValue_846352c3]));
        }

        ::java::lang::String FieldCache$CacheEntry::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$CacheEntry_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$CacheEntry_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCache$CacheEntry_init_(t_FieldCache$CacheEntry *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCache$CacheEntry_getCacheType(t_FieldCache$CacheEntry *self);
        static PyObject *t_FieldCache$CacheEntry_getCustom(t_FieldCache$CacheEntry *self);
        static PyObject *t_FieldCache$CacheEntry_getEstimatedSize(t_FieldCache$CacheEntry *self);
        static PyObject *t_FieldCache$CacheEntry_getFieldName(t_FieldCache$CacheEntry *self);
        static PyObject *t_FieldCache$CacheEntry_getReaderKey(t_FieldCache$CacheEntry *self);
        static PyObject *t_FieldCache$CacheEntry_getValue(t_FieldCache$CacheEntry *self);
        static PyObject *t_FieldCache$CacheEntry_toString(t_FieldCache$CacheEntry *self, PyObject *args);
        static PyObject *t_FieldCache$CacheEntry_get__cacheType(t_FieldCache$CacheEntry *self, void *data);
        static PyObject *t_FieldCache$CacheEntry_get__custom(t_FieldCache$CacheEntry *self, void *data);
        static PyObject *t_FieldCache$CacheEntry_get__estimatedSize(t_FieldCache$CacheEntry *self, void *data);
        static PyObject *t_FieldCache$CacheEntry_get__fieldName(t_FieldCache$CacheEntry *self, void *data);
        static PyObject *t_FieldCache$CacheEntry_get__readerKey(t_FieldCache$CacheEntry *self, void *data);
        static PyObject *t_FieldCache$CacheEntry_get__value(t_FieldCache$CacheEntry *self, void *data);
        static PyGetSetDef t_FieldCache$CacheEntry__fields_[] = {
          DECLARE_GET_FIELD(t_FieldCache$CacheEntry, cacheType),
          DECLARE_GET_FIELD(t_FieldCache$CacheEntry, custom),
          DECLARE_GET_FIELD(t_FieldCache$CacheEntry, estimatedSize),
          DECLARE_GET_FIELD(t_FieldCache$CacheEntry, fieldName),
          DECLARE_GET_FIELD(t_FieldCache$CacheEntry, readerKey),
          DECLARE_GET_FIELD(t_FieldCache$CacheEntry, value),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldCache$CacheEntry__methods_[] = {
          DECLARE_METHOD(t_FieldCache$CacheEntry, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$CacheEntry, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$CacheEntry, getCacheType, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache$CacheEntry, getCustom, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache$CacheEntry, getEstimatedSize, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache$CacheEntry, getFieldName, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache$CacheEntry, getReaderKey, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache$CacheEntry, getValue, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache$CacheEntry, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$CacheEntry, t_FieldCache$CacheEntry, ::java::lang::Object, FieldCache$CacheEntry, t_FieldCache$CacheEntry_init_, 0, 0, t_FieldCache$CacheEntry__fields_, 0, 0);

        void t_FieldCache$CacheEntry::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$CacheEntry), module, "FieldCache$CacheEntry", 0);
        }

        void t_FieldCache$CacheEntry::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$CacheEntry).tp_dict, "class_", make_descriptor(FieldCache$CacheEntry::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$CacheEntry).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$CacheEntry::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$CacheEntry).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$CacheEntry_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$CacheEntry::initializeClass, 1)))
            return NULL;
          return t_FieldCache$CacheEntry::wrap_Object(FieldCache$CacheEntry(((t_FieldCache$CacheEntry *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$CacheEntry_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$CacheEntry::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCache$CacheEntry_init_(t_FieldCache$CacheEntry *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::Class a2((jobject) NULL);
          PyTypeObject **p2;
          ::java::lang::Object a3((jobject) NULL);
          ::org::apache::lucene::util::Accountable a4((jobject) NULL);
          FieldCache$CacheEntry object((jobject) NULL);

          if (!parseArgs(args, "osKok", ::java::lang::Class::initializeClass, ::org::apache::lucene::util::Accountable::initializeClass, &a0, &a1, &a2, &p2, ::java::lang::t_Class::parameters_, &a3, &a4))
          {
            INT_CALL(object = FieldCache$CacheEntry(a0, a1, a2, a3, a4));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldCache$CacheEntry_getCacheType(t_FieldCache$CacheEntry *self)
        {
          ::java::lang::Class result((jobject) NULL);
          OBJ_CALL(result = self->object.getCacheType());
          return ::java::lang::t_Class::wrap_Object(result);
        }

        static PyObject *t_FieldCache$CacheEntry_getCustom(t_FieldCache$CacheEntry *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.getCustom());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_FieldCache$CacheEntry_getEstimatedSize(t_FieldCache$CacheEntry *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getEstimatedSize());
          return j2p(result);
        }

        static PyObject *t_FieldCache$CacheEntry_getFieldName(t_FieldCache$CacheEntry *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getFieldName());
          return j2p(result);
        }

        static PyObject *t_FieldCache$CacheEntry_getReaderKey(t_FieldCache$CacheEntry *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.getReaderKey());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_FieldCache$CacheEntry_getValue(t_FieldCache$CacheEntry *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.getValue());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_FieldCache$CacheEntry_toString(t_FieldCache$CacheEntry *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FieldCache$CacheEntry), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FieldCache$CacheEntry_get__cacheType(t_FieldCache$CacheEntry *self, void *data)
        {
          ::java::lang::Class value((jobject) NULL);
          OBJ_CALL(value = self->object.getCacheType());
          return ::java::lang::t_Class::wrap_Object(value);
        }

        static PyObject *t_FieldCache$CacheEntry_get__custom(t_FieldCache$CacheEntry *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getCustom());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_FieldCache$CacheEntry_get__estimatedSize(t_FieldCache$CacheEntry *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getEstimatedSize());
          return j2p(value);
        }

        static PyObject *t_FieldCache$CacheEntry_get__fieldName(t_FieldCache$CacheEntry *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldName());
          return j2p(value);
        }

        static PyObject *t_FieldCache$CacheEntry_get__readerKey(t_FieldCache$CacheEntry *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getReaderKey());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_FieldCache$CacheEntry_get__value(t_FieldCache$CacheEntry *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getValue());
          return ::java::lang::t_Object::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "org/apache/lucene/facet/taxonomy/ParallelTaxonomyArrays.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader$ChildrenIterator.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyReader::class$ = NULL;
          jmethodID *TaxonomyReader::mids$ = NULL;
          bool TaxonomyReader::live$ = false;
          jint TaxonomyReader::INVALID_ORDINAL = (jint) 0;
          jint TaxonomyReader::ROOT_ORDINAL = (jint) 0;

          jclass TaxonomyReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_decRef_54c6a166] = env->getMethodID(cls, "decRef", "()V");
              mids$[mid_getChildren_0efef1b4] = env->getMethodID(cls, "getChildren", "(I)Lorg/apache/lucene/facet/taxonomy/TaxonomyReader$ChildrenIterator;");
              mids$[mid_getCommitUserData_db60befd] = env->getMethodID(cls, "getCommitUserData", "()Ljava/util/Map;");
              mids$[mid_getOrdinal_283f83f5] = env->getMethodID(cls, "getOrdinal", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
              mids$[mid_getOrdinal_ba45d675] = env->getMethodID(cls, "getOrdinal", "(Ljava/lang/String;[Ljava/lang/String;)I");
              mids$[mid_getParallelTaxonomyArrays_306e748e] = env->getMethodID(cls, "getParallelTaxonomyArrays", "()Lorg/apache/lucene/facet/taxonomy/ParallelTaxonomyArrays;");
              mids$[mid_getPath_38cf071d] = env->getMethodID(cls, "getPath", "(I)Lorg/apache/lucene/facet/taxonomy/FacetLabel;");
              mids$[mid_getRefCount_54c6a179] = env->getMethodID(cls, "getRefCount", "()I");
              mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");
              mids$[mid_incRef_54c6a166] = env->getMethodID(cls, "incRef", "()V");
              mids$[mid_openIfChanged_aed3bb6f] = env->getStaticMethodID(cls, "openIfChanged", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;)Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;");
              mids$[mid_tryIncRef_54c6a16a] = env->getMethodID(cls, "tryIncRef", "()Z");
              mids$[mid_ensureOpen_54c6a166] = env->getMethodID(cls, "ensureOpen", "()V");
              mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");
              mids$[mid_doOpenIfChanged_f67f5c74] = env->getMethodID(cls, "doOpenIfChanged", "()Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              INVALID_ORDINAL = env->getStaticIntField(cls, "INVALID_ORDINAL");
              ROOT_ORDINAL = env->getStaticIntField(cls, "ROOT_ORDINAL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TaxonomyReader::TaxonomyReader() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void TaxonomyReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void TaxonomyReader::decRef() const
          {
            env->callVoidMethod(this$, mids$[mid_decRef_54c6a166]);
          }

          ::org::apache::lucene::facet::taxonomy::TaxonomyReader$ChildrenIterator TaxonomyReader::getChildren(jint a0) const
          {
            return ::org::apache::lucene::facet::taxonomy::TaxonomyReader$ChildrenIterator(env->callObjectMethod(this$, mids$[mid_getChildren_0efef1b4], a0));
          }

          ::java::util::Map TaxonomyReader::getCommitUserData() const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getCommitUserData_db60befd]));
          }

          jint TaxonomyReader::getOrdinal(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_getOrdinal_283f83f5], a0.this$);
          }

          jint TaxonomyReader::getOrdinal(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
          {
            return env->callIntMethod(this$, mids$[mid_getOrdinal_ba45d675], a0.this$, a1.this$);
          }

          ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays TaxonomyReader::getParallelTaxonomyArrays() const
          {
            return ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays(env->callObjectMethod(this$, mids$[mid_getParallelTaxonomyArrays_306e748e]));
          }

          ::org::apache::lucene::facet::taxonomy::FacetLabel TaxonomyReader::getPath(jint a0) const
          {
            return ::org::apache::lucene::facet::taxonomy::FacetLabel(env->callObjectMethod(this$, mids$[mid_getPath_38cf071d], a0));
          }

          jint TaxonomyReader::getRefCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getRefCount_54c6a179]);
          }

          jint TaxonomyReader::getSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
          }

          void TaxonomyReader::incRef() const
          {
            env->callVoidMethod(this$, mids$[mid_incRef_54c6a166]);
          }

          TaxonomyReader TaxonomyReader::openIfChanged(const TaxonomyReader & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return TaxonomyReader(env->callStaticObjectMethod(cls, mids$[mid_openIfChanged_aed3bb6f], a0.this$));
          }

          jboolean TaxonomyReader::tryIncRef() const
          {
            return env->callBooleanMethod(this$, mids$[mid_tryIncRef_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TaxonomyReader_init_(t_TaxonomyReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TaxonomyReader_close(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_decRef(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_getChildren(t_TaxonomyReader *self, PyObject *arg);
          static PyObject *t_TaxonomyReader_getCommitUserData(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_getOrdinal(t_TaxonomyReader *self, PyObject *args);
          static PyObject *t_TaxonomyReader_getParallelTaxonomyArrays(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_getPath(t_TaxonomyReader *self, PyObject *arg);
          static PyObject *t_TaxonomyReader_getRefCount(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_getSize(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_incRef(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_openIfChanged(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyReader_tryIncRef(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_get__commitUserData(t_TaxonomyReader *self, void *data);
          static PyObject *t_TaxonomyReader_get__parallelTaxonomyArrays(t_TaxonomyReader *self, void *data);
          static PyObject *t_TaxonomyReader_get__refCount(t_TaxonomyReader *self, void *data);
          static PyObject *t_TaxonomyReader_get__size(t_TaxonomyReader *self, void *data);
          static PyGetSetDef t_TaxonomyReader__fields_[] = {
            DECLARE_GET_FIELD(t_TaxonomyReader, commitUserData),
            DECLARE_GET_FIELD(t_TaxonomyReader, parallelTaxonomyArrays),
            DECLARE_GET_FIELD(t_TaxonomyReader, refCount),
            DECLARE_GET_FIELD(t_TaxonomyReader, size),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TaxonomyReader__methods_[] = {
            DECLARE_METHOD(t_TaxonomyReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyReader, close, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, decRef, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, getChildren, METH_O),
            DECLARE_METHOD(t_TaxonomyReader, getCommitUserData, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, getOrdinal, METH_VARARGS),
            DECLARE_METHOD(t_TaxonomyReader, getParallelTaxonomyArrays, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, getPath, METH_O),
            DECLARE_METHOD(t_TaxonomyReader, getRefCount, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, getSize, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, incRef, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, openIfChanged, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyReader, tryIncRef, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyReader, t_TaxonomyReader, ::java::lang::Object, TaxonomyReader, t_TaxonomyReader_init_, 0, 0, t_TaxonomyReader__fields_, 0, 0);

          void t_TaxonomyReader::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyReader), module, "TaxonomyReader", 0);
            PyDict_SetItemString(PY_TYPE(TaxonomyReader).tp_dict, "ChildrenIterator", make_descriptor(&PY_TYPE(TaxonomyReader$ChildrenIterator)));
          }

          void t_TaxonomyReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyReader).tp_dict, "class_", make_descriptor(TaxonomyReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyReader).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyReader).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(TaxonomyReader::initializeClass);
            PyDict_SetItemString(PY_TYPE(TaxonomyReader).tp_dict, "INVALID_ORDINAL", make_descriptor(TaxonomyReader::INVALID_ORDINAL));
            PyDict_SetItemString(PY_TYPE(TaxonomyReader).tp_dict, "ROOT_ORDINAL", make_descriptor(TaxonomyReader::ROOT_ORDINAL));
          }

          static PyObject *t_TaxonomyReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyReader::initializeClass, 1)))
              return NULL;
            return t_TaxonomyReader::wrap_Object(TaxonomyReader(((t_TaxonomyReader *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TaxonomyReader_init_(t_TaxonomyReader *self, PyObject *args, PyObject *kwds)
          {
            TaxonomyReader object((jobject) NULL);

            INT_CALL(object = TaxonomyReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_TaxonomyReader_close(t_TaxonomyReader *self)
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          static PyObject *t_TaxonomyReader_decRef(t_TaxonomyReader *self)
          {
            OBJ_CALL(self->object.decRef());
            Py_RETURN_NONE;
          }

          static PyObject *t_TaxonomyReader_getChildren(t_TaxonomyReader *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::facet::taxonomy::TaxonomyReader$ChildrenIterator result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getChildren(a0));
              return ::org::apache::lucene::facet::taxonomy::t_TaxonomyReader$ChildrenIterator::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getChildren", arg);
            return NULL;
          }

          static PyObject *t_TaxonomyReader_getCommitUserData(t_TaxonomyReader *self)
          {
            ::java::util::Map result((jobject) NULL);
            OBJ_CALL(result = self->object.getCommitUserData());
            return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
          }

          static PyObject *t_TaxonomyReader_getOrdinal(t_TaxonomyReader *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
                jint result;

                if (!parseArgs(args, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.getOrdinal(a0));
                  return PyInt_FromLong((long) result);
                }
              }
              break;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                jint result;

                if (!parseArgs(args, "s[s", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.getOrdinal(a0, a1));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getOrdinal", args);
            return NULL;
          }

          static PyObject *t_TaxonomyReader_getParallelTaxonomyArrays(t_TaxonomyReader *self)
          {
            ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays result((jobject) NULL);
            OBJ_CALL(result = self->object.getParallelTaxonomyArrays());
            return ::org::apache::lucene::facet::taxonomy::t_ParallelTaxonomyArrays::wrap_Object(result);
          }

          static PyObject *t_TaxonomyReader_getPath(t_TaxonomyReader *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::facet::taxonomy::FacetLabel result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getPath(a0));
              return ::org::apache::lucene::facet::taxonomy::t_FacetLabel::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPath", arg);
            return NULL;
          }

          static PyObject *t_TaxonomyReader_getRefCount(t_TaxonomyReader *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getRefCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_TaxonomyReader_getSize(t_TaxonomyReader *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_TaxonomyReader_incRef(t_TaxonomyReader *self)
          {
            OBJ_CALL(self->object.incRef());
            Py_RETURN_NONE;
          }

          static PyObject *t_TaxonomyReader_openIfChanged(PyTypeObject *type, PyObject *arg)
          {
            TaxonomyReader a0((jobject) NULL);
            TaxonomyReader result((jobject) NULL);

            if (!parseArg(arg, "k", TaxonomyReader::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::TaxonomyReader::openIfChanged(a0));
              return t_TaxonomyReader::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "openIfChanged", arg);
            return NULL;
          }

          static PyObject *t_TaxonomyReader_tryIncRef(t_TaxonomyReader *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.tryIncRef());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_TaxonomyReader_get__commitUserData(t_TaxonomyReader *self, void *data)
          {
            ::java::util::Map value((jobject) NULL);
            OBJ_CALL(value = self->object.getCommitUserData());
            return ::java::util::t_Map::wrap_Object(value);
          }

          static PyObject *t_TaxonomyReader_get__parallelTaxonomyArrays(t_TaxonomyReader *self, void *data)
          {
            ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays value((jobject) NULL);
            OBJ_CALL(value = self->object.getParallelTaxonomyArrays());
            return ::org::apache::lucene::facet::taxonomy::t_ParallelTaxonomyArrays::wrap_Object(value);
          }

          static PyObject *t_TaxonomyReader_get__refCount(t_TaxonomyReader *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getRefCount());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_TaxonomyReader_get__size(t_TaxonomyReader *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSize());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/TokenizerFactory.h"
#include "java/util/Set.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *TokenizerFactory::class$ = NULL;
          jmethodID *TokenizerFactory::mids$ = NULL;
          bool TokenizerFactory::live$ = false;

          jclass TokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/TokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_availableTokenizers_03e99967] = env->getStaticMethodID(cls, "availableTokenizers", "()Ljava/util/Set;");
              mids$[mid_create_02e4fecd] = env->getMethodID(cls, "create", "(Ljava/io/Reader;)Lorg/apache/lucene/analysis/Tokenizer;");
              mids$[mid_create_e51780e9] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Tokenizer;");
              mids$[mid_forName_9ff0ca4e] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;Ljava/util/Map;)Lorg/apache/lucene/analysis/util/TokenizerFactory;");
              mids$[mid_lookupClass_7d663d97] = env->getStaticMethodID(cls, "lookupClass", "(Ljava/lang/String;)Ljava/lang/Class;");
              mids$[mid_reloadTokenizers_9110048d] = env->getStaticMethodID(cls, "reloadTokenizers", "(Ljava/lang/ClassLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::Set TokenizerFactory::availableTokenizers()
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_availableTokenizers_03e99967]));
          }

          ::org::apache::lucene::analysis::Tokenizer TokenizerFactory::create(const ::java::io::Reader & a0) const
          {
            return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_create_02e4fecd], a0.this$));
          }

          ::org::apache::lucene::analysis::Tokenizer TokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_create_e51780e9], a0.this$, a1.this$));
          }

          TokenizerFactory TokenizerFactory::forName(const ::java::lang::String & a0, const ::java::util::Map & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return TokenizerFactory(env->callStaticObjectMethod(cls, mids$[mid_forName_9ff0ca4e], a0.this$, a1.this$));
          }

          ::java::lang::Class TokenizerFactory::lookupClass(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::Class(env->callStaticObjectMethod(cls, mids$[mid_lookupClass_7d663d97], a0.this$));
          }

          void TokenizerFactory::reloadTokenizers(const ::java::lang::ClassLoader & a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_reloadTokenizers_9110048d], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_TokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenizerFactory_availableTokenizers(PyTypeObject *type);
          static PyObject *t_TokenizerFactory_create(t_TokenizerFactory *self, PyObject *args);
          static PyObject *t_TokenizerFactory_forName(PyTypeObject *type, PyObject *args);
          static PyObject *t_TokenizerFactory_lookupClass(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenizerFactory_reloadTokenizers(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_TokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_TokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenizerFactory, availableTokenizers, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_TokenizerFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_TokenizerFactory, forName, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_TokenizerFactory, lookupClass, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenizerFactory, reloadTokenizers, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenizerFactory, t_TokenizerFactory, ::org::apache::lucene::analysis::util::AbstractAnalysisFactory, TokenizerFactory, abstract_init, 0, 0, 0, 0, 0);

          void t_TokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenizerFactory), module, "TokenizerFactory", 0);
          }

          void t_TokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenizerFactory).tp_dict, "class_", make_descriptor(TokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_TokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_TokenizerFactory::wrap_Object(TokenizerFactory(((t_TokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_TokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TokenizerFactory_availableTokenizers(PyTypeObject *type)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::util::TokenizerFactory::availableTokenizers());
            return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          static PyObject *t_TokenizerFactory_create(t_TokenizerFactory *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.create(a0));
                  return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.create(a0, a1));
                  return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "create", args);
            return NULL;
          }

          static PyObject *t_TokenizerFactory_forName(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::util::Map a1((jobject) NULL);
            PyTypeObject **p1;
            TokenizerFactory result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::TokenizerFactory::forName(a0, a1));
              return t_TokenizerFactory::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "forName", args);
            return NULL;
          }

          static PyObject *t_TokenizerFactory_lookupClass(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::TokenizerFactory::lookupClass(a0));
              return ::java::lang::t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "lookupClass", arg);
            return NULL;
          }

          static PyObject *t_TokenizerFactory_reloadTokenizers(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::ClassLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
            {
              OBJ_CALL(::org::apache::lucene::analysis::util::TokenizerFactory::reloadTokenizers(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "reloadTokenizers", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharFilterFactory.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharFilterFactory::class$ = NULL;
          jmethodID *CharFilterFactory::mids$ = NULL;
          bool CharFilterFactory::live$ = false;

          jclass CharFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_availableCharFilters_03e99967] = env->getStaticMethodID(cls, "availableCharFilters", "()Ljava/util/Set;");
              mids$[mid_create_6d741e4f] = env->getMethodID(cls, "create", "(Ljava/io/Reader;)Ljava/io/Reader;");
              mids$[mid_forName_75151912] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;Ljava/util/Map;)Lorg/apache/lucene/analysis/util/CharFilterFactory;");
              mids$[mid_lookupClass_7d663d97] = env->getStaticMethodID(cls, "lookupClass", "(Ljava/lang/String;)Ljava/lang/Class;");
              mids$[mid_reloadCharFilters_9110048d] = env->getStaticMethodID(cls, "reloadCharFilters", "(Ljava/lang/ClassLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::Set CharFilterFactory::availableCharFilters()
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_availableCharFilters_03e99967]));
          }

          ::java::io::Reader CharFilterFactory::create(const ::java::io::Reader & a0) const
          {
            return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_create_6d741e4f], a0.this$));
          }

          CharFilterFactory CharFilterFactory::forName(const ::java::lang::String & a0, const ::java::util::Map & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return CharFilterFactory(env->callStaticObjectMethod(cls, mids$[mid_forName_75151912], a0.this$, a1.this$));
          }

          ::java::lang::Class CharFilterFactory::lookupClass(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::Class(env->callStaticObjectMethod(cls, mids$[mid_lookupClass_7d663d97], a0.this$));
          }

          void CharFilterFactory::reloadCharFilters(const ::java::lang::ClassLoader & a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_reloadCharFilters_9110048d], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharFilterFactory_availableCharFilters(PyTypeObject *type);
          static PyObject *t_CharFilterFactory_create(t_CharFilterFactory *self, PyObject *arg);
          static PyObject *t_CharFilterFactory_forName(PyTypeObject *type, PyObject *args);
          static PyObject *t_CharFilterFactory_lookupClass(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharFilterFactory_reloadCharFilters(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_CharFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CharFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharFilterFactory, availableCharFilters, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_CharFilterFactory, create, METH_O),
            DECLARE_METHOD(t_CharFilterFactory, forName, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_CharFilterFactory, lookupClass, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharFilterFactory, reloadCharFilters, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharFilterFactory, t_CharFilterFactory, ::org::apache::lucene::analysis::util::AbstractAnalysisFactory, CharFilterFactory, abstract_init, 0, 0, 0, 0, 0);

          void t_CharFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CharFilterFactory), module, "CharFilterFactory", 0);
          }

          void t_CharFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharFilterFactory).tp_dict, "class_", make_descriptor(CharFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CharFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CharFilterFactory::wrap_Object(CharFilterFactory(((t_CharFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CharFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharFilterFactory_availableCharFilters(PyTypeObject *type)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharFilterFactory::availableCharFilters());
            return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          static PyObject *t_CharFilterFactory_create(t_CharFilterFactory *self, PyObject *arg)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::java::io::Reader result((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::java::io::t_Reader::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "create", arg);
            return NULL;
          }

          static PyObject *t_CharFilterFactory_forName(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::util::Map a1((jobject) NULL);
            PyTypeObject **p1;
            CharFilterFactory result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharFilterFactory::forName(a0, a1));
              return t_CharFilterFactory::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "forName", args);
            return NULL;
          }

          static PyObject *t_CharFilterFactory_lookupClass(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharFilterFactory::lookupClass(a0));
              return ::java::lang::t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "lookupClass", arg);
            return NULL;
          }

          static PyObject *t_CharFilterFactory_reloadCharFilters(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::ClassLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
            {
              OBJ_CALL(::org::apache::lucene::analysis::util::CharFilterFactory::reloadCharFilters(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "reloadCharFilters", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/FieldType$NumericType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *FieldType$NumericType::class$ = NULL;
        jmethodID *FieldType$NumericType::mids$ = NULL;
        bool FieldType$NumericType::live$ = false;
        FieldType$NumericType *FieldType$NumericType::DOUBLE = NULL;
        FieldType$NumericType *FieldType$NumericType::FLOAT = NULL;
        FieldType$NumericType *FieldType$NumericType::INT = NULL;
        FieldType$NumericType *FieldType$NumericType::LONG = NULL;

        jclass FieldType$NumericType::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/FieldType$NumericType");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_197ea958] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/document/FieldType$NumericType;");
            mids$[mid_values_68701482] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/document/FieldType$NumericType;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DOUBLE = new FieldType$NumericType(env->getStaticObjectField(cls, "DOUBLE", "Lorg/apache/lucene/document/FieldType$NumericType;"));
            FLOAT = new FieldType$NumericType(env->getStaticObjectField(cls, "FLOAT", "Lorg/apache/lucene/document/FieldType$NumericType;"));
            INT = new FieldType$NumericType(env->getStaticObjectField(cls, "INT", "Lorg/apache/lucene/document/FieldType$NumericType;"));
            LONG = new FieldType$NumericType(env->getStaticObjectField(cls, "LONG", "Lorg/apache/lucene/document/FieldType$NumericType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldType$NumericType FieldType$NumericType::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldType$NumericType(env->callStaticObjectMethod(cls, mids$[mid_valueOf_197ea958], a0.this$));
        }

        JArray< FieldType$NumericType > FieldType$NumericType::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< FieldType$NumericType >(env->callStaticObjectMethod(cls, mids$[mid_values_68701482]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_FieldType$NumericType_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldType$NumericType_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldType$NumericType_of_(t_FieldType$NumericType *self, PyObject *args);
        static PyObject *t_FieldType$NumericType_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldType$NumericType_values(PyTypeObject *type);
        static PyObject *t_FieldType$NumericType_get__parameters_(t_FieldType$NumericType *self, void *data);
        static PyGetSetDef t_FieldType$NumericType__fields_[] = {
          DECLARE_GET_FIELD(t_FieldType$NumericType, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldType$NumericType__methods_[] = {
          DECLARE_METHOD(t_FieldType$NumericType, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldType$NumericType, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldType$NumericType, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldType$NumericType, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldType$NumericType, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldType$NumericType, t_FieldType$NumericType, ::java::lang::Enum, FieldType$NumericType, abstract_init, 0, 0, t_FieldType$NumericType__fields_, 0, 0);
        PyObject *t_FieldType$NumericType::wrap_Object(const FieldType$NumericType& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldType$NumericType::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldType$NumericType *self = (t_FieldType$NumericType *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldType$NumericType::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldType$NumericType::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldType$NumericType *self = (t_FieldType$NumericType *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldType$NumericType::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldType$NumericType), module, "FieldType$NumericType", 0);
        }

        void t_FieldType$NumericType::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldType$NumericType).tp_dict, "class_", make_descriptor(FieldType$NumericType::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldType$NumericType).tp_dict, "wrapfn_", make_descriptor(t_FieldType$NumericType::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldType$NumericType).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldType$NumericType::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldType$NumericType).tp_dict, "DOUBLE", make_descriptor(t_FieldType$NumericType::wrap_Object(*FieldType$NumericType::DOUBLE)));
          PyDict_SetItemString(PY_TYPE(FieldType$NumericType).tp_dict, "FLOAT", make_descriptor(t_FieldType$NumericType::wrap_Object(*FieldType$NumericType::FLOAT)));
          PyDict_SetItemString(PY_TYPE(FieldType$NumericType).tp_dict, "INT", make_descriptor(t_FieldType$NumericType::wrap_Object(*FieldType$NumericType::INT)));
          PyDict_SetItemString(PY_TYPE(FieldType$NumericType).tp_dict, "LONG", make_descriptor(t_FieldType$NumericType::wrap_Object(*FieldType$NumericType::LONG)));
        }

        static PyObject *t_FieldType$NumericType_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldType$NumericType::initializeClass, 1)))
            return NULL;
          return t_FieldType$NumericType::wrap_Object(FieldType$NumericType(((t_FieldType$NumericType *) arg)->object.this$));
        }
        static PyObject *t_FieldType$NumericType_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldType$NumericType::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldType$NumericType_of_(t_FieldType$NumericType *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldType$NumericType_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          FieldType$NumericType result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::FieldType$NumericType::valueOf(a0));
            return t_FieldType$NumericType::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_FieldType$NumericType_values(PyTypeObject *type)
        {
          JArray< FieldType$NumericType > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::document::FieldType$NumericType::values());
          return JArray<jobject>(result.this$).wrap(t_FieldType$NumericType::wrap_jobject);
        }
        static PyObject *t_FieldType$NumericType_get__parameters_(t_FieldType$NumericType *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TopDocs::class$ = NULL;
        jmethodID *TopDocs::mids$ = NULL;
        jfieldID *TopDocs::fids$ = NULL;
        bool TopDocs::live$ = false;

        jclass TopDocs::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TopDocs");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_63c9a885] = env->getMethodID(cls, "<init>", "(I[Lorg/apache/lucene/search/ScoreDoc;F)V");
            mids$[mid_getMaxScore_54c6a176] = env->getMethodID(cls, "getMaxScore", "()F");
            mids$[mid_merge_732b94b7] = env->getStaticMethodID(cls, "merge", "(Lorg/apache/lucene/search/Sort;I[Lorg/apache/lucene/search/TopDocs;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_merge_15bf4771] = env->getStaticMethodID(cls, "merge", "(Lorg/apache/lucene/search/Sort;II[Lorg/apache/lucene/search/TopDocs;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_setMaxScore_06298cab] = env->getMethodID(cls, "setMaxScore", "(F)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_scoreDocs] = env->getFieldID(cls, "scoreDocs", "[Lorg/apache/lucene/search/ScoreDoc;");
            fids$[fid_totalHits] = env->getFieldID(cls, "totalHits", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopDocs::TopDocs(jint a0, const JArray< ::org::apache::lucene::search::ScoreDoc > & a1, jfloat a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_63c9a885, a0, a1.this$, a2)) {}

        jfloat TopDocs::getMaxScore() const
        {
          return env->callFloatMethod(this$, mids$[mid_getMaxScore_54c6a176]);
        }

        TopDocs TopDocs::merge(const ::org::apache::lucene::search::Sort & a0, jint a1, const JArray< TopDocs > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return TopDocs(env->callStaticObjectMethod(cls, mids$[mid_merge_732b94b7], a0.this$, a1, a2.this$));
        }

        TopDocs TopDocs::merge(const ::org::apache::lucene::search::Sort & a0, jint a1, jint a2, const JArray< TopDocs > & a3)
        {
          jclass cls = env->getClass(initializeClass);
          return TopDocs(env->callStaticObjectMethod(cls, mids$[mid_merge_15bf4771], a0.this$, a1, a2, a3.this$));
        }

        void TopDocs::setMaxScore(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxScore_06298cab], a0);
        }

        JArray< ::org::apache::lucene::search::ScoreDoc > TopDocs::_get_scoreDocs() const
        {
          return JArray< ::org::apache::lucene::search::ScoreDoc >(env->getObjectField(this$, fids$[fid_scoreDocs]));
        }

        void TopDocs::_set_scoreDocs(const JArray< ::org::apache::lucene::search::ScoreDoc > & a0) const
        {
          env->setObjectField(this$, fids$[fid_scoreDocs], a0.this$);
        }

        jint TopDocs::_get_totalHits() const
        {
          return env->getIntField(this$, fids$[fid_totalHits]);
        }

        void TopDocs::_set_totalHits(jint a0) const
        {
          env->setIntField(this$, fids$[fid_totalHits], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TopDocs_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopDocs_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TopDocs_init_(t_TopDocs *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopDocs_getMaxScore(t_TopDocs *self);
        static PyObject *t_TopDocs_merge(PyTypeObject *type, PyObject *args);
        static PyObject *t_TopDocs_setMaxScore(t_TopDocs *self, PyObject *arg);
        static PyObject *t_TopDocs_get__scoreDocs(t_TopDocs *self, void *data);
        static int t_TopDocs_set__scoreDocs(t_TopDocs *self, PyObject *arg, void *data);
        static PyObject *t_TopDocs_get__totalHits(t_TopDocs *self, void *data);
        static int t_TopDocs_set__totalHits(t_TopDocs *self, PyObject *arg, void *data);

        static PyObject *t_TopDocs_get__maxScore(t_TopDocs *self, void *data);
        static int t_TopDocs_set__maxScore(t_TopDocs *self, PyObject *arg, void *data);
        static PyGetSetDef t_TopDocs__fields_[] = {
          DECLARE_GETSET_FIELD(t_TopDocs, scoreDocs),
          DECLARE_GETSET_FIELD(t_TopDocs, totalHits),
          DECLARE_GETSET_FIELD(t_TopDocs, maxScore),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopDocs__methods_[] = {
          DECLARE_METHOD(t_TopDocs, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopDocs, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopDocs, getMaxScore, METH_NOARGS),
          DECLARE_METHOD(t_TopDocs, merge, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TopDocs, setMaxScore, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopDocs, t_TopDocs, ::java::lang::Object, TopDocs, t_TopDocs_init_, 0, 0, t_TopDocs__fields_, 0, 0);

        void t_TopDocs::install(PyObject *module)
        {
          installType(&PY_TYPE(TopDocs), module, "TopDocs", 0);
        }

        void t_TopDocs::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopDocs).tp_dict, "class_", make_descriptor(TopDocs::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopDocs).tp_dict, "wrapfn_", make_descriptor(t_TopDocs::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopDocs).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopDocs_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopDocs::initializeClass, 1)))
            return NULL;
          return t_TopDocs::wrap_Object(TopDocs(((t_TopDocs *) arg)->object.this$));
        }
        static PyObject *t_TopDocs_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopDocs::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TopDocs_init_(t_TopDocs *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          JArray< ::org::apache::lucene::search::ScoreDoc > a1((jobject) NULL);
          jfloat a2;
          TopDocs object((jobject) NULL);

          if (!parseArgs(args, "I[kF", ::org::apache::lucene::search::ScoreDoc::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = TopDocs(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TopDocs_getMaxScore(t_TopDocs *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getMaxScore());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_TopDocs_merge(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::search::Sort a0((jobject) NULL);
              jint a1;
              JArray< TopDocs > a2((jobject) NULL);
              TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kI[k", ::org::apache::lucene::search::Sort::initializeClass, TopDocs::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::TopDocs::merge(a0, a1, a2));
                return t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::search::Sort a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< TopDocs > a3((jobject) NULL);
              TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kII[k", ::org::apache::lucene::search::Sort::initializeClass, TopDocs::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::TopDocs::merge(a0, a1, a2, a3));
                return t_TopDocs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "merge", args);
          return NULL;
        }

        static PyObject *t_TopDocs_setMaxScore(t_TopDocs *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setMaxScore(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxScore", arg);
          return NULL;
        }

        static PyObject *t_TopDocs_get__scoreDocs(t_TopDocs *self, void *data)
        {
          JArray< ::org::apache::lucene::search::ScoreDoc > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_scoreDocs());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_ScoreDoc::wrap_jobject);
        }
        static int t_TopDocs_set__scoreDocs(t_TopDocs *self, PyObject *arg, void *data)
        {
          JArray< ::org::apache::lucene::search::ScoreDoc > value((jobject) NULL);
          if (!parseArg(arg, "[k", ::org::apache::lucene::search::ScoreDoc::initializeClass, &value))
          {
            INT_CALL(self->object._set_scoreDocs(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "scoreDocs", arg);
          return -1;
        }

        static PyObject *t_TopDocs_get__totalHits(t_TopDocs *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_totalHits());
          return PyInt_FromLong((long) value);
        }
        static int t_TopDocs_set__totalHits(t_TopDocs *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_totalHits(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalHits", arg);
          return -1;
        }

        static PyObject *t_TopDocs_get__maxScore(t_TopDocs *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getMaxScore());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TopDocs_set__maxScore(t_TopDocs *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setMaxScore(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxScore", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/KeepWordFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *KeepWordFilterFactory::class$ = NULL;
          jmethodID *KeepWordFilterFactory::mids$ = NULL;
          bool KeepWordFilterFactory::live$ = false;

          jclass KeepWordFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/KeepWordFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getWords_d2d3505c] = env->getMethodID(cls, "getWords", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_isEnablePositionIncrements_54c6a16a] = env->getMethodID(cls, "isEnablePositionIncrements", "()Z");
              mids$[mid_isIgnoreCase_54c6a16a] = env->getMethodID(cls, "isIgnoreCase", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeepWordFilterFactory::KeepWordFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream KeepWordFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet KeepWordFilterFactory::getWords() const
          {
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callObjectMethod(this$, mids$[mid_getWords_d2d3505c]));
          }

          void KeepWordFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }

          jboolean KeepWordFilterFactory::isEnablePositionIncrements() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isEnablePositionIncrements_54c6a16a]);
          }

          jboolean KeepWordFilterFactory::isIgnoreCase() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIgnoreCase_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_KeepWordFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeepWordFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeepWordFilterFactory_init_(t_KeepWordFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeepWordFilterFactory_create(t_KeepWordFilterFactory *self, PyObject *args);
          static PyObject *t_KeepWordFilterFactory_getWords(t_KeepWordFilterFactory *self);
          static PyObject *t_KeepWordFilterFactory_inform(t_KeepWordFilterFactory *self, PyObject *arg);
          static PyObject *t_KeepWordFilterFactory_isEnablePositionIncrements(t_KeepWordFilterFactory *self);
          static PyObject *t_KeepWordFilterFactory_isIgnoreCase(t_KeepWordFilterFactory *self);
          static PyObject *t_KeepWordFilterFactory_get__enablePositionIncrements(t_KeepWordFilterFactory *self, void *data);
          static PyObject *t_KeepWordFilterFactory_get__ignoreCase(t_KeepWordFilterFactory *self, void *data);
          static PyObject *t_KeepWordFilterFactory_get__words(t_KeepWordFilterFactory *self, void *data);
          static PyGetSetDef t_KeepWordFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_KeepWordFilterFactory, enablePositionIncrements),
            DECLARE_GET_FIELD(t_KeepWordFilterFactory, ignoreCase),
            DECLARE_GET_FIELD(t_KeepWordFilterFactory, words),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_KeepWordFilterFactory__methods_[] = {
            DECLARE_METHOD(t_KeepWordFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeepWordFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeepWordFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_KeepWordFilterFactory, getWords, METH_NOARGS),
            DECLARE_METHOD(t_KeepWordFilterFactory, inform, METH_O),
            DECLARE_METHOD(t_KeepWordFilterFactory, isEnablePositionIncrements, METH_NOARGS),
            DECLARE_METHOD(t_KeepWordFilterFactory, isIgnoreCase, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeepWordFilterFactory, t_KeepWordFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, KeepWordFilterFactory, t_KeepWordFilterFactory_init_, 0, 0, t_KeepWordFilterFactory__fields_, 0, 0);

          void t_KeepWordFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(KeepWordFilterFactory), module, "KeepWordFilterFactory", 0);
          }

          void t_KeepWordFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeepWordFilterFactory).tp_dict, "class_", make_descriptor(KeepWordFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeepWordFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_KeepWordFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeepWordFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeepWordFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeepWordFilterFactory::initializeClass, 1)))
              return NULL;
            return t_KeepWordFilterFactory::wrap_Object(KeepWordFilterFactory(((t_KeepWordFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_KeepWordFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeepWordFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeepWordFilterFactory_init_(t_KeepWordFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            KeepWordFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = KeepWordFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeepWordFilterFactory_create(t_KeepWordFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(KeepWordFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_KeepWordFilterFactory_getWords(t_KeepWordFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = self->object.getWords());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_KeepWordFilterFactory_inform(t_KeepWordFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_KeepWordFilterFactory_isEnablePositionIncrements(t_KeepWordFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isEnablePositionIncrements());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_KeepWordFilterFactory_isIgnoreCase(t_KeepWordFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isIgnoreCase());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_KeepWordFilterFactory_get__enablePositionIncrements(t_KeepWordFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isEnablePositionIncrements());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_KeepWordFilterFactory_get__ignoreCase(t_KeepWordFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isIgnoreCase());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_KeepWordFilterFactory_get__words(t_KeepWordFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getWords());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/CollectionTerminatedException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *CollectionTerminatedException::class$ = NULL;
        jmethodID *CollectionTerminatedException::mids$ = NULL;
        bool CollectionTerminatedException::live$ = false;

        jclass CollectionTerminatedException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/CollectionTerminatedException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CollectionTerminatedException::CollectionTerminatedException() : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_CollectionTerminatedException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollectionTerminatedException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CollectionTerminatedException_init_(t_CollectionTerminatedException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_CollectionTerminatedException__methods_[] = {
          DECLARE_METHOD(t_CollectionTerminatedException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollectionTerminatedException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CollectionTerminatedException, t_CollectionTerminatedException, ::java::lang::RuntimeException, CollectionTerminatedException, t_CollectionTerminatedException_init_, 0, 0, 0, 0, 0);

        void t_CollectionTerminatedException::install(PyObject *module)
        {
          installType(&PY_TYPE(CollectionTerminatedException), module, "CollectionTerminatedException", 0);
        }

        void t_CollectionTerminatedException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CollectionTerminatedException).tp_dict, "class_", make_descriptor(CollectionTerminatedException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CollectionTerminatedException).tp_dict, "wrapfn_", make_descriptor(t_CollectionTerminatedException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CollectionTerminatedException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollectionTerminatedException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollectionTerminatedException::initializeClass, 1)))
            return NULL;
          return t_CollectionTerminatedException::wrap_Object(CollectionTerminatedException(((t_CollectionTerminatedException *) arg)->object.this$));
        }
        static PyObject *t_CollectionTerminatedException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollectionTerminatedException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CollectionTerminatedException_init_(t_CollectionTerminatedException *self, PyObject *args, PyObject *kwds)
        {
          CollectionTerminatedException object((jobject) NULL);

          INT_CALL(object = CollectionTerminatedException());
          self->object = object;

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/CloseableThreadLocal.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *CloseableThreadLocal::class$ = NULL;
        jmethodID *CloseableThreadLocal::mids$ = NULL;
        bool CloseableThreadLocal::live$ = false;

        jclass CloseableThreadLocal::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/CloseableThreadLocal");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_get_846352c3] = env->getMethodID(cls, "get", "()Ljava/lang/Object;");
            mids$[mid_set_290588ee] = env->getMethodID(cls, "set", "(Ljava/lang/Object;)V");
            mids$[mid_initialValue_846352c3] = env->getMethodID(cls, "initialValue", "()Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CloseableThreadLocal::CloseableThreadLocal() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void CloseableThreadLocal::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::java::lang::Object CloseableThreadLocal::get() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_846352c3]));
        }

        void CloseableThreadLocal::set(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_set_290588ee], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_CloseableThreadLocal_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CloseableThreadLocal_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CloseableThreadLocal_of_(t_CloseableThreadLocal *self, PyObject *args);
        static int t_CloseableThreadLocal_init_(t_CloseableThreadLocal *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CloseableThreadLocal_close(t_CloseableThreadLocal *self);
        static PyObject *t_CloseableThreadLocal_get(t_CloseableThreadLocal *self);
        static PyObject *t_CloseableThreadLocal_set(t_CloseableThreadLocal *self, PyObject *arg);
        static PyObject *t_CloseableThreadLocal_get__parameters_(t_CloseableThreadLocal *self, void *data);
        static PyGetSetDef t_CloseableThreadLocal__fields_[] = {
          DECLARE_GET_FIELD(t_CloseableThreadLocal, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CloseableThreadLocal__methods_[] = {
          DECLARE_METHOD(t_CloseableThreadLocal, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CloseableThreadLocal, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CloseableThreadLocal, of_, METH_VARARGS),
          DECLARE_METHOD(t_CloseableThreadLocal, close, METH_NOARGS),
          DECLARE_METHOD(t_CloseableThreadLocal, get, METH_NOARGS),
          DECLARE_METHOD(t_CloseableThreadLocal, set, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CloseableThreadLocal, t_CloseableThreadLocal, ::java::lang::Object, CloseableThreadLocal, t_CloseableThreadLocal_init_, 0, 0, t_CloseableThreadLocal__fields_, 0, 0);
        PyObject *t_CloseableThreadLocal::wrap_Object(const CloseableThreadLocal& object, PyTypeObject *p0)
        {
          PyObject *obj = t_CloseableThreadLocal::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_CloseableThreadLocal *self = (t_CloseableThreadLocal *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_CloseableThreadLocal::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_CloseableThreadLocal::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_CloseableThreadLocal *self = (t_CloseableThreadLocal *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_CloseableThreadLocal::install(PyObject *module)
        {
          installType(&PY_TYPE(CloseableThreadLocal), module, "CloseableThreadLocal", 0);
        }

        void t_CloseableThreadLocal::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CloseableThreadLocal).tp_dict, "class_", make_descriptor(CloseableThreadLocal::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CloseableThreadLocal).tp_dict, "wrapfn_", make_descriptor(t_CloseableThreadLocal::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CloseableThreadLocal).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CloseableThreadLocal_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CloseableThreadLocal::initializeClass, 1)))
            return NULL;
          return t_CloseableThreadLocal::wrap_Object(CloseableThreadLocal(((t_CloseableThreadLocal *) arg)->object.this$));
        }
        static PyObject *t_CloseableThreadLocal_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CloseableThreadLocal::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CloseableThreadLocal_of_(t_CloseableThreadLocal *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_CloseableThreadLocal_init_(t_CloseableThreadLocal *self, PyObject *args, PyObject *kwds)
        {
          CloseableThreadLocal object((jobject) NULL);

          INT_CALL(object = CloseableThreadLocal());
          self->object = object;

          return 0;
        }

        static PyObject *t_CloseableThreadLocal_close(t_CloseableThreadLocal *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_CloseableThreadLocal_get(t_CloseableThreadLocal *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.get());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_CloseableThreadLocal_set(t_CloseableThreadLocal *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(self->object.set(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "set", arg);
          return NULL;
        }
        static PyObject *t_CloseableThreadLocal_get__parameters_(t_CloseableThreadLocal *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/Class.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/CompositeReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexReaderContext::class$ = NULL;
        jmethodID *IndexReaderContext::mids$ = NULL;
        jfieldID *IndexReaderContext::fids$ = NULL;
        bool IndexReaderContext::live$ = false;

        jclass IndexReaderContext::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexReaderContext");

            mids$ = new jmethodID[max_mid];
            mids$[mid_children_87851566] = env->getMethodID(cls, "children", "()Ljava/util/List;");
            mids$[mid_leaves_87851566] = env->getMethodID(cls, "leaves", "()Ljava/util/List;");
            mids$[mid_reader_94bbd010] = env->getMethodID(cls, "reader", "()Lorg/apache/lucene/index/IndexReader;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docBaseInParent] = env->getFieldID(cls, "docBaseInParent", "I");
            fids$[fid_isTopLevel] = env->getFieldID(cls, "isTopLevel", "Z");
            fids$[fid_ordInParent] = env->getFieldID(cls, "ordInParent", "I");
            fids$[fid_parent] = env->getFieldID(cls, "parent", "Lorg/apache/lucene/index/CompositeReaderContext;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::List IndexReaderContext::children() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_children_87851566]));
        }

        ::java::util::List IndexReaderContext::leaves() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_leaves_87851566]));
        }

        ::org::apache::lucene::index::IndexReader IndexReaderContext::reader() const
        {
          return ::org::apache::lucene::index::IndexReader(env->callObjectMethod(this$, mids$[mid_reader_94bbd010]));
        }

        jint IndexReaderContext::_get_docBaseInParent() const
        {
          return env->getIntField(this$, fids$[fid_docBaseInParent]);
        }

        jboolean IndexReaderContext::_get_isTopLevel() const
        {
          return env->getBooleanField(this$, fids$[fid_isTopLevel]);
        }

        jint IndexReaderContext::_get_ordInParent() const
        {
          return env->getIntField(this$, fids$[fid_ordInParent]);
        }

        ::org::apache::lucene::index::CompositeReaderContext IndexReaderContext::_get_parent() const
        {
          return ::org::apache::lucene::index::CompositeReaderContext(env->getObjectField(this$, fids$[fid_parent]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexReaderContext_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexReaderContext_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexReaderContext_children(t_IndexReaderContext *self);
        static PyObject *t_IndexReaderContext_leaves(t_IndexReaderContext *self);
        static PyObject *t_IndexReaderContext_reader(t_IndexReaderContext *self);
        static PyObject *t_IndexReaderContext_get__docBaseInParent(t_IndexReaderContext *self, void *data);
        static PyObject *t_IndexReaderContext_get__isTopLevel(t_IndexReaderContext *self, void *data);
        static PyObject *t_IndexReaderContext_get__ordInParent(t_IndexReaderContext *self, void *data);
        static PyObject *t_IndexReaderContext_get__parent(t_IndexReaderContext *self, void *data);

        static PyGetSetDef t_IndexReaderContext__fields_[] = {
          DECLARE_GET_FIELD(t_IndexReaderContext, docBaseInParent),
          DECLARE_GET_FIELD(t_IndexReaderContext, isTopLevel),
          DECLARE_GET_FIELD(t_IndexReaderContext, ordInParent),
          DECLARE_GET_FIELD(t_IndexReaderContext, parent),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexReaderContext__methods_[] = {
          DECLARE_METHOD(t_IndexReaderContext, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexReaderContext, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexReaderContext, children, METH_NOARGS),
          DECLARE_METHOD(t_IndexReaderContext, leaves, METH_NOARGS),
          DECLARE_METHOD(t_IndexReaderContext, reader, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexReaderContext, t_IndexReaderContext, ::java::lang::Object, IndexReaderContext, abstract_init, 0, 0, t_IndexReaderContext__fields_, 0, 0);

        void t_IndexReaderContext::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexReaderContext), module, "IndexReaderContext", 0);
        }

        void t_IndexReaderContext::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexReaderContext).tp_dict, "class_", make_descriptor(IndexReaderContext::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexReaderContext).tp_dict, "wrapfn_", make_descriptor(t_IndexReaderContext::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexReaderContext).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexReaderContext_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexReaderContext::initializeClass, 1)))
            return NULL;
          return t_IndexReaderContext::wrap_Object(IndexReaderContext(((t_IndexReaderContext *) arg)->object.this$));
        }
        static PyObject *t_IndexReaderContext_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexReaderContext::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexReaderContext_children(t_IndexReaderContext *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.children());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(IndexReaderContext));
        }

        static PyObject *t_IndexReaderContext_leaves(t_IndexReaderContext *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.leaves());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(AtomicReaderContext));
        }

        static PyObject *t_IndexReaderContext_reader(t_IndexReaderContext *self)
        {
          ::org::apache::lucene::index::IndexReader result((jobject) NULL);
          OBJ_CALL(result = self->object.reader());
          return ::org::apache::lucene::index::t_IndexReader::wrap_Object(result);
        }

        static PyObject *t_IndexReaderContext_get__docBaseInParent(t_IndexReaderContext *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docBaseInParent());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_IndexReaderContext_get__isTopLevel(t_IndexReaderContext *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_isTopLevel());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_IndexReaderContext_get__ordInParent(t_IndexReaderContext *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_ordInParent());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_IndexReaderContext_get__parent(t_IndexReaderContext *self, void *data)
        {
          ::org::apache::lucene::index::CompositeReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object._get_parent());
          return ::org::apache::lucene::index::t_CompositeReaderContext::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/Scorer$ChildScorer.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Scorer::class$ = NULL;
        jmethodID *Scorer::mids$ = NULL;
        bool Scorer::live$ = false;

        jclass Scorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Scorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getChildren_2d2d7de4] = env->getMethodID(cls, "getChildren", "()Ljava/util/Collection;");
            mids$[mid_getWeight_add28ea1] = env->getMethodID(cls, "getWeight", "()Lorg/apache/lucene/search/Weight;");
            mids$[mid_score_54c6a176] = env->getMethodID(cls, "score", "()F");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Collection Scorer::getChildren() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildren_2d2d7de4]));
        }

        ::org::apache::lucene::search::Weight Scorer::getWeight() const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_getWeight_add28ea1]));
        }

        jfloat Scorer::score() const
        {
          return env->callFloatMethod(this$, mids$[mid_score_54c6a176]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Scorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Scorer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Scorer_getChildren(t_Scorer *self);
        static PyObject *t_Scorer_getWeight(t_Scorer *self);
        static PyObject *t_Scorer_score(t_Scorer *self);
        static PyObject *t_Scorer_get__children(t_Scorer *self, void *data);
        static PyObject *t_Scorer_get__weight(t_Scorer *self, void *data);
        static PyGetSetDef t_Scorer__fields_[] = {
          DECLARE_GET_FIELD(t_Scorer, children),
          DECLARE_GET_FIELD(t_Scorer, weight),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Scorer__methods_[] = {
          DECLARE_METHOD(t_Scorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Scorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Scorer, getChildren, METH_NOARGS),
          DECLARE_METHOD(t_Scorer, getWeight, METH_NOARGS),
          DECLARE_METHOD(t_Scorer, score, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Scorer, t_Scorer, ::org::apache::lucene::index::DocsEnum, Scorer, abstract_init, 0, 0, t_Scorer__fields_, 0, 0);

        void t_Scorer::install(PyObject *module)
        {
          installType(&PY_TYPE(Scorer), module, "Scorer", 0);
          PyDict_SetItemString(PY_TYPE(Scorer).tp_dict, "ChildScorer", make_descriptor(&PY_TYPE(Scorer$ChildScorer)));
        }

        void t_Scorer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Scorer).tp_dict, "class_", make_descriptor(Scorer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Scorer).tp_dict, "wrapfn_", make_descriptor(t_Scorer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Scorer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Scorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Scorer::initializeClass, 1)))
            return NULL;
          return t_Scorer::wrap_Object(Scorer(((t_Scorer *) arg)->object.this$));
        }
        static PyObject *t_Scorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Scorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Scorer_getChildren(t_Scorer *self)
        {
          ::java::util::Collection result((jobject) NULL);
          OBJ_CALL(result = self->object.getChildren());
          return ::java::util::t_Collection::wrap_Object(result, &::org::apache::lucene::search::PY_TYPE(Scorer$ChildScorer));
        }

        static PyObject *t_Scorer_getWeight(t_Scorer *self)
        {
          ::org::apache::lucene::search::Weight result((jobject) NULL);
          OBJ_CALL(result = self->object.getWeight());
          return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
        }

        static PyObject *t_Scorer_score(t_Scorer *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.score());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_Scorer_get__children(t_Scorer *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getChildren());
          return ::java::util::t_Collection::wrap_Object(value);
        }

        static PyObject *t_Scorer_get__weight(t_Scorer *self, void *data)
        {
          ::org::apache::lucene::search::Weight value((jobject) NULL);
          OBJ_CALL(value = self->object.getWeight());
          return ::org::apache::lucene::search::t_Weight::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilderFactory.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *FilterBuilderFactory::class$ = NULL;
          jmethodID *FilterBuilderFactory::mids$ = NULL;
          bool FilterBuilderFactory::live$ = false;

          jclass FilterBuilderFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/FilterBuilderFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_addBuilder_a961e918] = env->getMethodID(cls, "addBuilder", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/xml/FilterBuilder;)V");
              mids$[mid_getFilterBuilder_de450325] = env->getMethodID(cls, "getFilterBuilder", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/xml/FilterBuilder;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FilterBuilderFactory::FilterBuilderFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void FilterBuilderFactory::addBuilder(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::xml::FilterBuilder & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addBuilder_a961e918], a0.this$, a1.this$);
          }

          ::org::apache::lucene::queryparser::xml::FilterBuilder FilterBuilderFactory::getFilterBuilder(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::queryparser::xml::FilterBuilder(env->callObjectMethod(this$, mids$[mid_getFilterBuilder_de450325], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_FilterBuilderFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FilterBuilderFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FilterBuilderFactory_init_(t_FilterBuilderFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FilterBuilderFactory_addBuilder(t_FilterBuilderFactory *self, PyObject *args);
          static PyObject *t_FilterBuilderFactory_getFilterBuilder(t_FilterBuilderFactory *self, PyObject *arg);

          static PyMethodDef t_FilterBuilderFactory__methods_[] = {
            DECLARE_METHOD(t_FilterBuilderFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilterBuilderFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilterBuilderFactory, addBuilder, METH_VARARGS),
            DECLARE_METHOD(t_FilterBuilderFactory, getFilterBuilder, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FilterBuilderFactory, t_FilterBuilderFactory, ::java::lang::Object, FilterBuilderFactory, t_FilterBuilderFactory_init_, 0, 0, 0, 0, 0);

          void t_FilterBuilderFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(FilterBuilderFactory), module, "FilterBuilderFactory", 0);
          }

          void t_FilterBuilderFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FilterBuilderFactory).tp_dict, "class_", make_descriptor(FilterBuilderFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FilterBuilderFactory).tp_dict, "wrapfn_", make_descriptor(t_FilterBuilderFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FilterBuilderFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FilterBuilderFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FilterBuilderFactory::initializeClass, 1)))
              return NULL;
            return t_FilterBuilderFactory::wrap_Object(FilterBuilderFactory(((t_FilterBuilderFactory *) arg)->object.this$));
          }
          static PyObject *t_FilterBuilderFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FilterBuilderFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FilterBuilderFactory_init_(t_FilterBuilderFactory *self, PyObject *args, PyObject *kwds)
          {
            FilterBuilderFactory object((jobject) NULL);

            INT_CALL(object = FilterBuilderFactory());
            self->object = object;

            return 0;
          }

          static PyObject *t_FilterBuilderFactory_addBuilder(t_FilterBuilderFactory *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::xml::FilterBuilder a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::xml::FilterBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.addBuilder(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addBuilder", args);
            return NULL;
          }

          static PyObject *t_FilterBuilderFactory_getFilterBuilder(t_FilterBuilderFactory *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::xml::FilterBuilder result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getFilterBuilder(a0));
              return ::org::apache::lucene::queryparser::xml::t_FilterBuilder::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFilterBuilder", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergePolicy$MergeException.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergePolicy$MergeException::class$ = NULL;
        jmethodID *MergePolicy$MergeException::mids$ = NULL;
        bool MergePolicy$MergeException::live$ = false;

        jclass MergePolicy$MergeException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergePolicy$MergeException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_972c7504] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_init$_1f8035c0] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_getDirectory_1f3934bb] = env->getMethodID(cls, "getDirectory", "()Lorg/apache/lucene/store/Directory;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergePolicy$MergeException::MergePolicy$MergeException(const ::java::lang::String & a0, const ::org::apache::lucene::store::Directory & a1) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_972c7504, a0.this$, a1.this$)) {}

        MergePolicy$MergeException::MergePolicy$MergeException(const ::java::lang::Throwable & a0, const ::org::apache::lucene::store::Directory & a1) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_1f8035c0, a0.this$, a1.this$)) {}

        ::org::apache::lucene::store::Directory MergePolicy$MergeException::getDirectory() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getDirectory_1f3934bb]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergePolicy$MergeException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy$MergeException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergePolicy$MergeException_init_(t_MergePolicy$MergeException *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergePolicy$MergeException_getDirectory(t_MergePolicy$MergeException *self);
        static PyObject *t_MergePolicy$MergeException_get__directory(t_MergePolicy$MergeException *self, void *data);
        static PyGetSetDef t_MergePolicy$MergeException__fields_[] = {
          DECLARE_GET_FIELD(t_MergePolicy$MergeException, directory),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergePolicy$MergeException__methods_[] = {
          DECLARE_METHOD(t_MergePolicy$MergeException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$MergeException, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$MergeException, getDirectory, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergePolicy$MergeException, t_MergePolicy$MergeException, ::java::lang::RuntimeException, MergePolicy$MergeException, t_MergePolicy$MergeException_init_, 0, 0, t_MergePolicy$MergeException__fields_, 0, 0);

        void t_MergePolicy$MergeException::install(PyObject *module)
        {
          installType(&PY_TYPE(MergePolicy$MergeException), module, "MergePolicy$MergeException", 0);
        }

        void t_MergePolicy$MergeException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeException).tp_dict, "class_", make_descriptor(MergePolicy$MergeException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeException).tp_dict, "wrapfn_", make_descriptor(t_MergePolicy$MergeException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergePolicy$MergeException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergePolicy$MergeException::initializeClass, 1)))
            return NULL;
          return t_MergePolicy$MergeException::wrap_Object(MergePolicy$MergeException(((t_MergePolicy$MergeException *) arg)->object.this$));
        }
        static PyObject *t_MergePolicy$MergeException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergePolicy$MergeException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergePolicy$MergeException_init_(t_MergePolicy$MergeException *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::store::Directory a1((jobject) NULL);
              MergePolicy$MergeException object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = MergePolicy$MergeException(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::Throwable a0((jobject) NULL);
              ::org::apache::lucene::store::Directory a1((jobject) NULL);
              MergePolicy$MergeException object((jobject) NULL);

              if (!parseArgs(args, "kk", ::java::lang::Throwable::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = MergePolicy$MergeException(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MergePolicy$MergeException_getDirectory(t_MergePolicy$MergeException *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_MergePolicy$MergeException_get__directory(t_MergePolicy$MergeException *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/CachedFilterBuilder.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilderFactory.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilderFactory.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *CachedFilterBuilder::class$ = NULL;
            jmethodID *CachedFilterBuilder::mids$ = NULL;
            bool CachedFilterBuilder::live$ = false;

            jclass CachedFilterBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/CachedFilterBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_11d0c47f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/QueryBuilderFactory;Lorg/apache/lucene/queryparser/xml/FilterBuilderFactory;I)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            CachedFilterBuilder::CachedFilterBuilder(const ::org::apache::lucene::queryparser::xml::QueryBuilderFactory & a0, const ::org::apache::lucene::queryparser::xml::FilterBuilderFactory & a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_11d0c47f, a0.this$, a1.this$, a2)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_CachedFilterBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CachedFilterBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_CachedFilterBuilder_init_(t_CachedFilterBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_CachedFilterBuilder__methods_[] = {
              DECLARE_METHOD(t_CachedFilterBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CachedFilterBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(CachedFilterBuilder, t_CachedFilterBuilder, ::java::lang::Object, CachedFilterBuilder, t_CachedFilterBuilder_init_, 0, 0, 0, 0, 0);

            void t_CachedFilterBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(CachedFilterBuilder), module, "CachedFilterBuilder", 0);
            }

            void t_CachedFilterBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(CachedFilterBuilder).tp_dict, "class_", make_descriptor(CachedFilterBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(CachedFilterBuilder).tp_dict, "wrapfn_", make_descriptor(t_CachedFilterBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(CachedFilterBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_CachedFilterBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CachedFilterBuilder::initializeClass, 1)))
                return NULL;
              return t_CachedFilterBuilder::wrap_Object(CachedFilterBuilder(((t_CachedFilterBuilder *) arg)->object.this$));
            }
            static PyObject *t_CachedFilterBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CachedFilterBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_CachedFilterBuilder_init_(t_CachedFilterBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::QueryBuilderFactory a0((jobject) NULL);
              ::org::apache::lucene::queryparser::xml::FilterBuilderFactory a1((jobject) NULL);
              jint a2;
              CachedFilterBuilder object((jobject) NULL);

              if (!parseArgs(args, "kkI", ::org::apache::lucene::queryparser::xml::QueryBuilderFactory::initializeClass, ::org::apache::lucene::queryparser::xml::FilterBuilderFactory::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = CachedFilterBuilder(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/nl/DutchStemmer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace nl {

          ::java::lang::Class *DutchStemmer::class$ = NULL;
          jmethodID *DutchStemmer::mids$ = NULL;
          bool DutchStemmer::live$ = false;

          jclass DutchStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/nl/DutchStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_97a5258f] = env->getMethodID(cls, "stem", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DutchStemmer::DutchStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::java::lang::String DutchStemmer::stem(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_stem_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace nl {
          static PyObject *t_DutchStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DutchStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DutchStemmer_init_(t_DutchStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DutchStemmer_stem(t_DutchStemmer *self, PyObject *arg);

          static PyMethodDef t_DutchStemmer__methods_[] = {
            DECLARE_METHOD(t_DutchStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DutchStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DutchStemmer, stem, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DutchStemmer, t_DutchStemmer, ::java::lang::Object, DutchStemmer, t_DutchStemmer_init_, 0, 0, 0, 0, 0);

          void t_DutchStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(DutchStemmer), module, "DutchStemmer", 0);
          }

          void t_DutchStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DutchStemmer).tp_dict, "class_", make_descriptor(DutchStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DutchStemmer).tp_dict, "wrapfn_", make_descriptor(t_DutchStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DutchStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DutchStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DutchStemmer::initializeClass, 1)))
              return NULL;
            return t_DutchStemmer::wrap_Object(DutchStemmer(((t_DutchStemmer *) arg)->object.this$));
          }
          static PyObject *t_DutchStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DutchStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DutchStemmer_init_(t_DutchStemmer *self, PyObject *args, PyObject *kwds)
          {
            DutchStemmer object((jobject) NULL);

            INT_CALL(object = DutchStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_DutchStemmer_stem(t_DutchStemmer *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.stem(a0));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/PhraseQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *PhraseQuery::class$ = NULL;
        jmethodID *PhraseQuery::mids$ = NULL;
        bool PhraseQuery::live$ = false;

        jclass PhraseQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/PhraseQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_7eca6a81] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_add_05555589] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/Term;I)V");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getPositions_dab10e75] = env->getMethodID(cls, "getPositions", "()[I");
            mids$[mid_getSlop_54c6a179] = env->getMethodID(cls, "getSlop", "()I");
            mids$[mid_getTerms_2b86e588] = env->getMethodID(cls, "getTerms", "()[Lorg/apache/lucene/index/Term;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setSlop_39c7bd3c] = env->getMethodID(cls, "setSlop", "(I)V");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PhraseQuery::PhraseQuery() : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PhraseQuery::add(const ::org::apache::lucene::index::Term & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_7eca6a81], a0.this$);
        }

        void PhraseQuery::add(const ::org::apache::lucene::index::Term & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_05555589], a0.this$, a1);
        }

        ::org::apache::lucene::search::Weight PhraseQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean PhraseQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void PhraseQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        JArray< jint > PhraseQuery::getPositions() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getPositions_dab10e75]));
        }

        jint PhraseQuery::getSlop() const
        {
          return env->callIntMethod(this$, mids$[mid_getSlop_54c6a179]);
        }

        JArray< ::org::apache::lucene::index::Term > PhraseQuery::getTerms() const
        {
          return JArray< ::org::apache::lucene::index::Term >(env->callObjectMethod(this$, mids$[mid_getTerms_2b86e588]));
        }

        jint PhraseQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query PhraseQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        void PhraseQuery::setSlop(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setSlop_39c7bd3c], a0);
        }

        ::java::lang::String PhraseQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_PhraseQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PhraseQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PhraseQuery_init_(t_PhraseQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PhraseQuery_add(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_createWeight(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_equals(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_extractTerms(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_getPositions(t_PhraseQuery *self);
        static PyObject *t_PhraseQuery_getSlop(t_PhraseQuery *self);
        static PyObject *t_PhraseQuery_getTerms(t_PhraseQuery *self);
        static PyObject *t_PhraseQuery_hashCode(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_rewrite(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_setSlop(t_PhraseQuery *self, PyObject *arg);
        static PyObject *t_PhraseQuery_toString(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_get__positions(t_PhraseQuery *self, void *data);
        static PyObject *t_PhraseQuery_get__slop(t_PhraseQuery *self, void *data);
        static int t_PhraseQuery_set__slop(t_PhraseQuery *self, PyObject *arg, void *data);
        static PyObject *t_PhraseQuery_get__terms(t_PhraseQuery *self, void *data);
        static PyGetSetDef t_PhraseQuery__fields_[] = {
          DECLARE_GET_FIELD(t_PhraseQuery, positions),
          DECLARE_GETSET_FIELD(t_PhraseQuery, slop),
          DECLARE_GET_FIELD(t_PhraseQuery, terms),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PhraseQuery__methods_[] = {
          DECLARE_METHOD(t_PhraseQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PhraseQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PhraseQuery, add, METH_VARARGS),
          DECLARE_METHOD(t_PhraseQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_PhraseQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_PhraseQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_PhraseQuery, getPositions, METH_NOARGS),
          DECLARE_METHOD(t_PhraseQuery, getSlop, METH_NOARGS),
          DECLARE_METHOD(t_PhraseQuery, getTerms, METH_NOARGS),
          DECLARE_METHOD(t_PhraseQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_PhraseQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_PhraseQuery, setSlop, METH_O),
          DECLARE_METHOD(t_PhraseQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PhraseQuery, t_PhraseQuery, ::org::apache::lucene::search::Query, PhraseQuery, t_PhraseQuery_init_, 0, 0, t_PhraseQuery__fields_, 0, 0);

        void t_PhraseQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(PhraseQuery), module, "PhraseQuery", 0);
        }

        void t_PhraseQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PhraseQuery).tp_dict, "class_", make_descriptor(PhraseQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PhraseQuery).tp_dict, "wrapfn_", make_descriptor(t_PhraseQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PhraseQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PhraseQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PhraseQuery::initializeClass, 1)))
            return NULL;
          return t_PhraseQuery::wrap_Object(PhraseQuery(((t_PhraseQuery *) arg)->object.this$));
        }
        static PyObject *t_PhraseQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PhraseQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PhraseQuery_init_(t_PhraseQuery *self, PyObject *args, PyObject *kwds)
        {
          PhraseQuery object((jobject) NULL);

          INT_CALL(object = PhraseQuery());
          self->object = object;

          return 0;
        }

        static PyObject *t_PhraseQuery_add(t_PhraseQuery *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_PhraseQuery_createWeight(t_PhraseQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(PhraseQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_PhraseQuery_equals(t_PhraseQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PhraseQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PhraseQuery_extractTerms(t_PhraseQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PhraseQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_PhraseQuery_getPositions(t_PhraseQuery *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.getPositions());
          return result.wrap();
        }

        static PyObject *t_PhraseQuery_getSlop(t_PhraseQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getSlop());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_PhraseQuery_getTerms(t_PhraseQuery *self)
        {
          JArray< ::org::apache::lucene::index::Term > result((jobject) NULL);
          OBJ_CALL(result = self->object.getTerms());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_Term::wrap_jobject);
        }

        static PyObject *t_PhraseQuery_hashCode(t_PhraseQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(PhraseQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_PhraseQuery_rewrite(t_PhraseQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(PhraseQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_PhraseQuery_setSlop(t_PhraseQuery *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setSlop(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setSlop", arg);
          return NULL;
        }

        static PyObject *t_PhraseQuery_toString(t_PhraseQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(PhraseQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_PhraseQuery_get__positions(t_PhraseQuery *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object.getPositions());
          return value.wrap();
        }

        static PyObject *t_PhraseQuery_get__slop(t_PhraseQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getSlop());
          return PyInt_FromLong((long) value);
        }
        static int t_PhraseQuery_set__slop(t_PhraseQuery *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setSlop(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "slop", arg);
          return -1;
        }

        static PyObject *t_PhraseQuery_get__terms(t_PhraseQuery *self, void *data)
        {
          JArray< ::org::apache::lucene::index::Term > value((jobject) NULL);
          OBJ_CALL(value = self->object.getTerms());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_Term::wrap_jobject);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianLightStemFilter::class$ = NULL;
          jmethodID *NorwegianLightStemFilter::mids$ = NULL;
          bool NorwegianLightStemFilter::live$ = false;

          jclass NorwegianLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianLightStemFilter::NorwegianLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          NorwegianLightStemFilter::NorwegianLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          jboolean NorwegianLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianLightStemFilter_init_(t_NorwegianLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianLightStemFilter_incrementToken(t_NorwegianLightStemFilter *self, PyObject *args);

          static PyMethodDef t_NorwegianLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_NorwegianLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NorwegianLightStemFilter, t_NorwegianLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, NorwegianLightStemFilter, t_NorwegianLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_NorwegianLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianLightStemFilter), module, "NorwegianLightStemFilter", 0);
          }

          void t_NorwegianLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemFilter).tp_dict, "class_", make_descriptor(NorwegianLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_NorwegianLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NorwegianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_NorwegianLightStemFilter::wrap_Object(NorwegianLightStemFilter(((t_NorwegianLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_NorwegianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianLightStemFilter_init_(t_NorwegianLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                NorwegianLightStemFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = NorwegianLightStemFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                NorwegianLightStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = NorwegianLightStemFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianLightStemFilter_incrementToken(t_NorwegianLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NorwegianLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState.h"
#include "java/util/List.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "java/lang/Number.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {

          ::java::lang::Class *SortedSetDocValuesFacetCounts::class$ = NULL;
          jmethodID *SortedSetDocValuesFacetCounts::mids$ = NULL;
          bool SortedSetDocValuesFacetCounts::live$ = false;

          jclass SortedSetDocValuesFacetCounts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_2661b27e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState;Lorg/apache/lucene/facet/FacetsCollector;)V");
              mids$[mid_getAllDims_cdc2a528] = env->getMethodID(cls, "getAllDims", "(I)Ljava/util/List;");
              mids$[mid_getSpecificValue_8ecbcac9] = env->getMethodID(cls, "getSpecificValue", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Number;");
              mids$[mid_getTopChildren_37e8c044] = env->getMethodID(cls, "getTopChildren", "(ILjava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/facet/FacetResult;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedSetDocValuesFacetCounts::SortedSetDocValuesFacetCounts(const ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState & a0, const ::org::apache::lucene::facet::FacetsCollector & a1) : ::org::apache::lucene::facet::Facets(env->newObject(initializeClass, &mids$, mid_init$_2661b27e, a0.this$, a1.this$)) {}

          ::java::util::List SortedSetDocValuesFacetCounts::getAllDims(jint a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getAllDims_cdc2a528], a0));
          }

          ::java::lang::Number SortedSetDocValuesFacetCounts::getSpecificValue(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
          {
            return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getSpecificValue_8ecbcac9], a0.this$, a1.this$));
          }

          ::org::apache::lucene::facet::FacetResult SortedSetDocValuesFacetCounts::getTopChildren(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
          {
            return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildren_37e8c044], a0, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {
          static PyObject *t_SortedSetDocValuesFacetCounts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetDocValuesFacetCounts_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SortedSetDocValuesFacetCounts_init_(t_SortedSetDocValuesFacetCounts *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SortedSetDocValuesFacetCounts_getAllDims(t_SortedSetDocValuesFacetCounts *self, PyObject *args);
          static PyObject *t_SortedSetDocValuesFacetCounts_getSpecificValue(t_SortedSetDocValuesFacetCounts *self, PyObject *args);
          static PyObject *t_SortedSetDocValuesFacetCounts_getTopChildren(t_SortedSetDocValuesFacetCounts *self, PyObject *args);

          static PyMethodDef t_SortedSetDocValuesFacetCounts__methods_[] = {
            DECLARE_METHOD(t_SortedSetDocValuesFacetCounts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesFacetCounts, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesFacetCounts, getAllDims, METH_VARARGS),
            DECLARE_METHOD(t_SortedSetDocValuesFacetCounts, getSpecificValue, METH_VARARGS),
            DECLARE_METHOD(t_SortedSetDocValuesFacetCounts, getTopChildren, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedSetDocValuesFacetCounts, t_SortedSetDocValuesFacetCounts, ::org::apache::lucene::facet::Facets, SortedSetDocValuesFacetCounts, t_SortedSetDocValuesFacetCounts_init_, 0, 0, 0, 0, 0);

          void t_SortedSetDocValuesFacetCounts::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedSetDocValuesFacetCounts), module, "SortedSetDocValuesFacetCounts", 0);
          }

          void t_SortedSetDocValuesFacetCounts::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesFacetCounts).tp_dict, "class_", make_descriptor(SortedSetDocValuesFacetCounts::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesFacetCounts).tp_dict, "wrapfn_", make_descriptor(t_SortedSetDocValuesFacetCounts::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesFacetCounts).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SortedSetDocValuesFacetCounts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedSetDocValuesFacetCounts::initializeClass, 1)))
              return NULL;
            return t_SortedSetDocValuesFacetCounts::wrap_Object(SortedSetDocValuesFacetCounts(((t_SortedSetDocValuesFacetCounts *) arg)->object.this$));
          }
          static PyObject *t_SortedSetDocValuesFacetCounts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedSetDocValuesFacetCounts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SortedSetDocValuesFacetCounts_init_(t_SortedSetDocValuesFacetCounts *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState a0((jobject) NULL);
            ::org::apache::lucene::facet::FacetsCollector a1((jobject) NULL);
            SortedSetDocValuesFacetCounts object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1))
            {
              INT_CALL(object = SortedSetDocValuesFacetCounts(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SortedSetDocValuesFacetCounts_getAllDims(t_SortedSetDocValuesFacetCounts *self, PyObject *args)
          {
            jint a0;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.getAllDims(a0));
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::facet::PY_TYPE(FacetResult));
            }

            return callSuper(&PY_TYPE(SortedSetDocValuesFacetCounts), (PyObject *) self, "getAllDims", args, 2);
          }

          static PyObject *t_SortedSetDocValuesFacetCounts_getSpecificValue(t_SortedSetDocValuesFacetCounts *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            JArray< ::java::lang::String > a1((jobject) NULL);
            ::java::lang::Number result((jobject) NULL);

            if (!parseArgs(args, "s[s", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getSpecificValue(a0, a1));
              return ::java::lang::t_Number::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SortedSetDocValuesFacetCounts), (PyObject *) self, "getSpecificValue", args, 2);
          }

          static PyObject *t_SortedSetDocValuesFacetCounts_getTopChildren(t_SortedSetDocValuesFacetCounts *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

            if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getTopChildren(a0, a1, a2));
              return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SortedSetDocValuesFacetCounts), (PyObject *) self, "getTopChildren", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/FieldDateResolutionFCListener.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfigListener.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfig.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *FieldDateResolutionFCListener::class$ = NULL;
              jmethodID *FieldDateResolutionFCListener::mids$ = NULL;
              bool FieldDateResolutionFCListener::live$ = false;

              jclass FieldDateResolutionFCListener::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/FieldDateResolutionFCListener");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_0b1f7132] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_buildFieldConfig_aaab7c6b] = env->getMethodID(cls, "buildFieldConfig", "(Lorg/apache/lucene/queryparser/flexible/core/config/FieldConfig;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FieldDateResolutionFCListener::FieldDateResolutionFCListener(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0b1f7132, a0.this$)) {}

              void FieldDateResolutionFCListener::buildFieldConfig(const ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_buildFieldConfig_aaab7c6b], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_FieldDateResolutionFCListener_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldDateResolutionFCListener_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FieldDateResolutionFCListener_init_(t_FieldDateResolutionFCListener *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FieldDateResolutionFCListener_buildFieldConfig(t_FieldDateResolutionFCListener *self, PyObject *arg);

              static PyMethodDef t_FieldDateResolutionFCListener__methods_[] = {
                DECLARE_METHOD(t_FieldDateResolutionFCListener, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldDateResolutionFCListener, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldDateResolutionFCListener, buildFieldConfig, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FieldDateResolutionFCListener, t_FieldDateResolutionFCListener, ::java::lang::Object, FieldDateResolutionFCListener, t_FieldDateResolutionFCListener_init_, 0, 0, 0, 0, 0);

              void t_FieldDateResolutionFCListener::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldDateResolutionFCListener), module, "FieldDateResolutionFCListener", 0);
              }

              void t_FieldDateResolutionFCListener::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FieldDateResolutionFCListener).tp_dict, "class_", make_descriptor(FieldDateResolutionFCListener::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FieldDateResolutionFCListener).tp_dict, "wrapfn_", make_descriptor(t_FieldDateResolutionFCListener::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FieldDateResolutionFCListener).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldDateResolutionFCListener_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldDateResolutionFCListener::initializeClass, 1)))
                  return NULL;
                return t_FieldDateResolutionFCListener::wrap_Object(FieldDateResolutionFCListener(((t_FieldDateResolutionFCListener *) arg)->object.this$));
              }
              static PyObject *t_FieldDateResolutionFCListener_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldDateResolutionFCListener::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FieldDateResolutionFCListener_init_(t_FieldDateResolutionFCListener *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                FieldDateResolutionFCListener object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  INT_CALL(object = FieldDateResolutionFCListener(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_FieldDateResolutionFCListener_buildFieldConfig(t_FieldDateResolutionFCListener *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.buildFieldConfig(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "buildFieldConfig", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RAMDirectory.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RAMDirectory::class$ = NULL;
        jmethodID *RAMDirectory::mids$ = NULL;
        bool RAMDirectory::live$ = false;

        jclass RAMDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RAMDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_7b526946] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/IOContext;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileExists_5fdc3f44] = env->getMethodID(cls, "fileExists", "(Ljava/lang/String;)Z");
            mids$[mid_fileLength_5fdc3f54] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_getLockID_14c7b5c5] = env->getMethodID(cls, "getLockID", "()Ljava/lang/String;");
            mids$[mid_listAll_2e6d5245] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_sync_9bfb370d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_newRAMFile_a5af5448] = env->getMethodID(cls, "newRAMFile", "()Lorg/apache/lucene/store/RAMFile;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RAMDirectory::RAMDirectory() : ::org::apache::lucene::store::BaseDirectory(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        RAMDirectory::RAMDirectory(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::store::IOContext & a1) : ::org::apache::lucene::store::BaseDirectory(env->newObject(initializeClass, &mids$, mid_init$_7b526946, a0.this$, a1.this$)) {}

        void RAMDirectory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::store::IndexOutput RAMDirectory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        void RAMDirectory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_5fdc3f48], a0.this$);
        }

        jboolean RAMDirectory::fileExists(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fileExists_5fdc3f44], a0.this$);
        }

        jlong RAMDirectory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_5fdc3f54], a0.this$);
        }

        ::java::lang::String RAMDirectory::getLockID() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLockID_14c7b5c5]));
        }

        JArray< ::java::lang::String > RAMDirectory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_2e6d5245]));
        }

        ::org::apache::lucene::store::IndexInput RAMDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }

        jlong RAMDirectory::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        void RAMDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_9bfb370d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RAMDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RAMDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RAMDirectory_init_(t_RAMDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RAMDirectory_close(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_createOutput(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_deleteFile(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_fileExists(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_fileLength(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_getLockID(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_listAll(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_openInput(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_ramBytesUsed(t_RAMDirectory *self);
        static PyObject *t_RAMDirectory_sync(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_get__lockID(t_RAMDirectory *self, void *data);
        static PyGetSetDef t_RAMDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_RAMDirectory, lockID),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RAMDirectory__methods_[] = {
          DECLARE_METHOD(t_RAMDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMDirectory, close, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, fileExists, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, fileLength, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, getLockID, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, listAll, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_RAMDirectory, sync, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RAMDirectory, t_RAMDirectory, ::org::apache::lucene::store::BaseDirectory, RAMDirectory, t_RAMDirectory_init_, 0, 0, t_RAMDirectory__fields_, 0, 0);

        void t_RAMDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(RAMDirectory), module, "RAMDirectory", 0);
        }

        void t_RAMDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RAMDirectory).tp_dict, "class_", make_descriptor(RAMDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RAMDirectory).tp_dict, "wrapfn_", make_descriptor(t_RAMDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RAMDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RAMDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RAMDirectory::initializeClass, 1)))
            return NULL;
          return t_RAMDirectory::wrap_Object(RAMDirectory(((t_RAMDirectory *) arg)->object.this$));
        }
        static PyObject *t_RAMDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RAMDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RAMDirectory_init_(t_RAMDirectory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              RAMDirectory object((jobject) NULL);

              INT_CALL(object = RAMDirectory());
              self->object = object;
              break;
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::store::IOContext a1((jobject) NULL);
              RAMDirectory object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
              {
                INT_CALL(object = RAMDirectory(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RAMDirectory_close(t_RAMDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_RAMDirectory_createOutput(t_RAMDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_RAMDirectory_deleteFile(t_RAMDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_RAMDirectory_fileExists(t_RAMDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileExists(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "fileExists", args, 2);
        }

        static PyObject *t_RAMDirectory_fileLength(t_RAMDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "fileLength", args, 2);
        }

        static PyObject *t_RAMDirectory_getLockID(t_RAMDirectory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLockID());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "getLockID", args, 2);
        }

        static PyObject *t_RAMDirectory_listAll(t_RAMDirectory *self, PyObject *args)
        {
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.listAll());
            return JArray<jstring>(result.this$).wrap();
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "listAll", args, 2);
        }

        static PyObject *t_RAMDirectory_openInput(t_RAMDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "openInput", args, 2);
        }

        static PyObject *t_RAMDirectory_ramBytesUsed(t_RAMDirectory *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RAMDirectory_sync(t_RAMDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "sync", args, 2);
        }

        static PyObject *t_RAMDirectory_get__lockID(t_RAMDirectory *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockID());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/TrimFilterFactory.h"
#include "org/apache/lucene/analysis/miscellaneous/TrimFilter.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *TrimFilterFactory::class$ = NULL;
          jmethodID *TrimFilterFactory::mids$ = NULL;
          bool TrimFilterFactory::live$ = false;

          jclass TrimFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/TrimFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_59450f3a] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/TrimFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TrimFilterFactory::TrimFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::TrimFilter TrimFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::TrimFilter(env->callObjectMethod(this$, mids$[mid_create_59450f3a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_TrimFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TrimFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TrimFilterFactory_init_(t_TrimFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TrimFilterFactory_create(t_TrimFilterFactory *self, PyObject *args);

          static PyMethodDef t_TrimFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TrimFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TrimFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TrimFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TrimFilterFactory, t_TrimFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, TrimFilterFactory, t_TrimFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_TrimFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TrimFilterFactory), module, "TrimFilterFactory", 0);
          }

          void t_TrimFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TrimFilterFactory).tp_dict, "class_", make_descriptor(TrimFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TrimFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_TrimFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TrimFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TrimFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TrimFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TrimFilterFactory::wrap_Object(TrimFilterFactory(((t_TrimFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TrimFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TrimFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TrimFilterFactory_init_(t_TrimFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            TrimFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = TrimFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TrimFilterFactory_create(t_TrimFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::TrimFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_TrimFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TrimFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexWriterConfig$OpenMode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexWriterConfig$OpenMode::class$ = NULL;
        jmethodID *IndexWriterConfig$OpenMode::mids$ = NULL;
        bool IndexWriterConfig$OpenMode::live$ = false;
        IndexWriterConfig$OpenMode *IndexWriterConfig$OpenMode::APPEND = NULL;
        IndexWriterConfig$OpenMode *IndexWriterConfig$OpenMode::CREATE = NULL;
        IndexWriterConfig$OpenMode *IndexWriterConfig$OpenMode::CREATE_OR_APPEND = NULL;

        jclass IndexWriterConfig$OpenMode::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexWriterConfig$OpenMode");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_0b044982] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;");
            mids$[mid_values_923174e8] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            APPEND = new IndexWriterConfig$OpenMode(env->getStaticObjectField(cls, "APPEND", "Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;"));
            CREATE = new IndexWriterConfig$OpenMode(env->getStaticObjectField(cls, "CREATE", "Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;"));
            CREATE_OR_APPEND = new IndexWriterConfig$OpenMode(env->getStaticObjectField(cls, "CREATE_OR_APPEND", "Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexWriterConfig$OpenMode IndexWriterConfig$OpenMode::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return IndexWriterConfig$OpenMode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_0b044982], a0.this$));
        }

        JArray< IndexWriterConfig$OpenMode > IndexWriterConfig$OpenMode::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< IndexWriterConfig$OpenMode >(env->callStaticObjectMethod(cls, mids$[mid_values_923174e8]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexWriterConfig$OpenMode_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriterConfig$OpenMode_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriterConfig$OpenMode_of_(t_IndexWriterConfig$OpenMode *self, PyObject *args);
        static PyObject *t_IndexWriterConfig$OpenMode_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexWriterConfig$OpenMode_values(PyTypeObject *type);
        static PyObject *t_IndexWriterConfig$OpenMode_get__parameters_(t_IndexWriterConfig$OpenMode *self, void *data);
        static PyGetSetDef t_IndexWriterConfig$OpenMode__fields_[] = {
          DECLARE_GET_FIELD(t_IndexWriterConfig$OpenMode, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexWriterConfig$OpenMode__methods_[] = {
          DECLARE_METHOD(t_IndexWriterConfig$OpenMode, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriterConfig$OpenMode, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriterConfig$OpenMode, of_, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig$OpenMode, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexWriterConfig$OpenMode, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexWriterConfig$OpenMode, t_IndexWriterConfig$OpenMode, ::java::lang::Enum, IndexWriterConfig$OpenMode, abstract_init, 0, 0, t_IndexWriterConfig$OpenMode__fields_, 0, 0);
        PyObject *t_IndexWriterConfig$OpenMode::wrap_Object(const IndexWriterConfig$OpenMode& object, PyTypeObject *p0)
        {
          PyObject *obj = t_IndexWriterConfig$OpenMode::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_IndexWriterConfig$OpenMode *self = (t_IndexWriterConfig$OpenMode *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_IndexWriterConfig$OpenMode::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_IndexWriterConfig$OpenMode::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_IndexWriterConfig$OpenMode *self = (t_IndexWriterConfig$OpenMode *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_IndexWriterConfig$OpenMode::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexWriterConfig$OpenMode), module, "IndexWriterConfig$OpenMode", 0);
        }

        void t_IndexWriterConfig$OpenMode::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig$OpenMode).tp_dict, "class_", make_descriptor(IndexWriterConfig$OpenMode::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig$OpenMode).tp_dict, "wrapfn_", make_descriptor(t_IndexWriterConfig$OpenMode::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig$OpenMode).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IndexWriterConfig$OpenMode::initializeClass);
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig$OpenMode).tp_dict, "APPEND", make_descriptor(t_IndexWriterConfig$OpenMode::wrap_Object(*IndexWriterConfig$OpenMode::APPEND)));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig$OpenMode).tp_dict, "CREATE", make_descriptor(t_IndexWriterConfig$OpenMode::wrap_Object(*IndexWriterConfig$OpenMode::CREATE)));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig$OpenMode).tp_dict, "CREATE_OR_APPEND", make_descriptor(t_IndexWriterConfig$OpenMode::wrap_Object(*IndexWriterConfig$OpenMode::CREATE_OR_APPEND)));
        }

        static PyObject *t_IndexWriterConfig$OpenMode_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexWriterConfig$OpenMode::initializeClass, 1)))
            return NULL;
          return t_IndexWriterConfig$OpenMode::wrap_Object(IndexWriterConfig$OpenMode(((t_IndexWriterConfig$OpenMode *) arg)->object.this$));
        }
        static PyObject *t_IndexWriterConfig$OpenMode_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexWriterConfig$OpenMode::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexWriterConfig$OpenMode_of_(t_IndexWriterConfig$OpenMode *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_IndexWriterConfig$OpenMode_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          IndexWriterConfig$OpenMode result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexWriterConfig$OpenMode::valueOf(a0));
            return t_IndexWriterConfig$OpenMode::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_IndexWriterConfig$OpenMode_values(PyTypeObject *type)
        {
          JArray< IndexWriterConfig$OpenMode > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::IndexWriterConfig$OpenMode::values());
          return JArray<jobject>(result.this$).wrap(t_IndexWriterConfig$OpenMode::wrap_jobject);
        }
        static PyObject *t_IndexWriterConfig$OpenMode_get__parameters_(t_IndexWriterConfig$OpenMode *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/MinimizationOperations.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *MinimizationOperations::class$ = NULL;
          jmethodID *MinimizationOperations::mids$ = NULL;
          bool MinimizationOperations::live$ = false;

          jclass MinimizationOperations::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/MinimizationOperations");

              mids$ = new jmethodID[max_mid];
              mids$[mid_minimize_7aca8e1f] = env->getStaticMethodID(cls, "minimize", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_minimizeHopcroft_7aca8e1f] = env->getStaticMethodID(cls, "minimizeHopcroft", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::automaton::Automaton MinimizationOperations::minimize(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_minimize_7aca8e1f], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton MinimizationOperations::minimizeHopcroft(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_minimizeHopcroft_7aca8e1f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_MinimizationOperations_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MinimizationOperations_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MinimizationOperations_minimize(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MinimizationOperations_minimizeHopcroft(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_MinimizationOperations__methods_[] = {
            DECLARE_METHOD(t_MinimizationOperations, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MinimizationOperations, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MinimizationOperations, minimize, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MinimizationOperations, minimizeHopcroft, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MinimizationOperations, t_MinimizationOperations, ::java::lang::Object, MinimizationOperations, abstract_init, 0, 0, 0, 0, 0);

          void t_MinimizationOperations::install(PyObject *module)
          {
            installType(&PY_TYPE(MinimizationOperations), module, "MinimizationOperations", 0);
          }

          void t_MinimizationOperations::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MinimizationOperations).tp_dict, "class_", make_descriptor(MinimizationOperations::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MinimizationOperations).tp_dict, "wrapfn_", make_descriptor(t_MinimizationOperations::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MinimizationOperations).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MinimizationOperations_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MinimizationOperations::initializeClass, 1)))
              return NULL;
            return t_MinimizationOperations::wrap_Object(MinimizationOperations(((t_MinimizationOperations *) arg)->object.this$));
          }
          static PyObject *t_MinimizationOperations_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MinimizationOperations::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_MinimizationOperations_minimize(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::MinimizationOperations::minimize(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "minimize", arg);
            return NULL;
          }

          static PyObject *t_MinimizationOperations_minimizeHopcroft(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::MinimizationOperations::minimizeHopcroft(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "minimizeHopcroft", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/id/IndonesianStemFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {

          ::java::lang::Class *IndonesianStemFilterFactory::class$ = NULL;
          jmethodID *IndonesianStemFilterFactory::mids$ = NULL;
          bool IndonesianStemFilterFactory::live$ = false;

          jclass IndonesianStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/id/IndonesianStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndonesianStemFilterFactory::IndonesianStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream IndonesianStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {
          static PyObject *t_IndonesianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndonesianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndonesianStemFilterFactory_init_(t_IndonesianStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndonesianStemFilterFactory_create(t_IndonesianStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_IndonesianStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_IndonesianStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IndonesianStemFilterFactory, t_IndonesianStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, IndonesianStemFilterFactory, t_IndonesianStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_IndonesianStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(IndonesianStemFilterFactory), module, "IndonesianStemFilterFactory", 0);
          }

          void t_IndonesianStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IndonesianStemFilterFactory).tp_dict, "class_", make_descriptor(IndonesianStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IndonesianStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_IndonesianStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IndonesianStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndonesianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndonesianStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_IndonesianStemFilterFactory::wrap_Object(IndonesianStemFilterFactory(((t_IndonesianStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_IndonesianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndonesianStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndonesianStemFilterFactory_init_(t_IndonesianStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            IndonesianStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = IndonesianStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IndonesianStemFilterFactory_create(t_IndonesianStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IndonesianStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SerialMergeScheduler.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SerialMergeScheduler::class$ = NULL;
        jmethodID *SerialMergeScheduler::mids$ = NULL;
        bool SerialMergeScheduler::live$ = false;

        jclass SerialMergeScheduler::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SerialMergeScheduler");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_merge_5fd7a9f9] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/IndexWriter;Lorg/apache/lucene/index/MergeTrigger;Z)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SerialMergeScheduler::SerialMergeScheduler() : ::org::apache::lucene::index::MergeScheduler(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void SerialMergeScheduler::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void SerialMergeScheduler::merge(const ::org::apache::lucene::index::IndexWriter & a0, const ::org::apache::lucene::index::MergeTrigger & a1, jboolean a2) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_5fd7a9f9], a0.this$, a1.this$, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SerialMergeScheduler_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SerialMergeScheduler_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SerialMergeScheduler_init_(t_SerialMergeScheduler *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SerialMergeScheduler_close(t_SerialMergeScheduler *self, PyObject *args);
        static PyObject *t_SerialMergeScheduler_merge(t_SerialMergeScheduler *self, PyObject *args);

        static PyMethodDef t_SerialMergeScheduler__methods_[] = {
          DECLARE_METHOD(t_SerialMergeScheduler, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SerialMergeScheduler, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SerialMergeScheduler, close, METH_VARARGS),
          DECLARE_METHOD(t_SerialMergeScheduler, merge, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SerialMergeScheduler, t_SerialMergeScheduler, ::org::apache::lucene::index::MergeScheduler, SerialMergeScheduler, t_SerialMergeScheduler_init_, 0, 0, 0, 0, 0);

        void t_SerialMergeScheduler::install(PyObject *module)
        {
          installType(&PY_TYPE(SerialMergeScheduler), module, "SerialMergeScheduler", 0);
        }

        void t_SerialMergeScheduler::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SerialMergeScheduler).tp_dict, "class_", make_descriptor(SerialMergeScheduler::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SerialMergeScheduler).tp_dict, "wrapfn_", make_descriptor(t_SerialMergeScheduler::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SerialMergeScheduler).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SerialMergeScheduler_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SerialMergeScheduler::initializeClass, 1)))
            return NULL;
          return t_SerialMergeScheduler::wrap_Object(SerialMergeScheduler(((t_SerialMergeScheduler *) arg)->object.this$));
        }
        static PyObject *t_SerialMergeScheduler_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SerialMergeScheduler::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SerialMergeScheduler_init_(t_SerialMergeScheduler *self, PyObject *args, PyObject *kwds)
        {
          SerialMergeScheduler object((jobject) NULL);

          INT_CALL(object = SerialMergeScheduler());
          self->object = object;

          return 0;
        }

        static PyObject *t_SerialMergeScheduler_close(t_SerialMergeScheduler *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SerialMergeScheduler), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_SerialMergeScheduler_merge(t_SerialMergeScheduler *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
          ::org::apache::lucene::index::MergeTrigger a1((jobject) NULL);
          PyTypeObject **p1;
          jboolean a2;

          if (!parseArgs(args, "kKZ", ::org::apache::lucene::index::IndexWriter::initializeClass, ::org::apache::lucene::index::MergeTrigger::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a2))
          {
            OBJ_CALL(self->object.merge(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SerialMergeScheduler), (PyObject *) self, "merge", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/store/RandomAccessInput.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *IndexInput::class$ = NULL;
        jmethodID *IndexInput::mids$ = NULL;
        bool IndexInput::live$ = false;

        jclass IndexInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/IndexInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clone_4baa952b] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getFilePointer_54c6a17a] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_length_54c6a17a] = env->getMethodID(cls, "length", "()J");
            mids$[mid_randomAccessSlice_27267c8d] = env->getMethodID(cls, "randomAccessSlice", "(JJ)Lorg/apache/lucene/store/RandomAccessInput;");
            mids$[mid_seek_0ee6df2f] = env->getMethodID(cls, "seek", "(J)V");
            mids$[mid_slice_d00c83eb] = env->getMethodID(cls, "slice", "(Ljava/lang/String;JJ)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexInput IndexInput::clone() const
        {
          return IndexInput(env->callObjectMethod(this$, mids$[mid_clone_4baa952b]));
        }

        void IndexInput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jlong IndexInput::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_54c6a17a]);
        }

        jlong IndexInput::length() const
        {
          return env->callLongMethod(this$, mids$[mid_length_54c6a17a]);
        }

        ::org::apache::lucene::store::RandomAccessInput IndexInput::randomAccessSlice(jlong a0, jlong a1) const
        {
          return ::org::apache::lucene::store::RandomAccessInput(env->callObjectMethod(this$, mids$[mid_randomAccessSlice_27267c8d], a0, a1));
        }

        void IndexInput::seek(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seek_0ee6df2f], a0);
        }

        IndexInput IndexInput::slice(const ::java::lang::String & a0, jlong a1, jlong a2) const
        {
          return IndexInput(env->callObjectMethod(this$, mids$[mid_slice_d00c83eb], a0.this$, a1, a2));
        }

        ::java::lang::String IndexInput::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_IndexInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexInput_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexInput_clone(t_IndexInput *self, PyObject *args);
        static PyObject *t_IndexInput_close(t_IndexInput *self);
        static PyObject *t_IndexInput_getFilePointer(t_IndexInput *self);
        static PyObject *t_IndexInput_length(t_IndexInput *self);
        static PyObject *t_IndexInput_randomAccessSlice(t_IndexInput *self, PyObject *args);
        static PyObject *t_IndexInput_seek(t_IndexInput *self, PyObject *arg);
        static PyObject *t_IndexInput_slice(t_IndexInput *self, PyObject *args);
        static PyObject *t_IndexInput_toString(t_IndexInput *self, PyObject *args);
        static PyObject *t_IndexInput_get__filePointer(t_IndexInput *self, void *data);
        static PyGetSetDef t_IndexInput__fields_[] = {
          DECLARE_GET_FIELD(t_IndexInput, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexInput__methods_[] = {
          DECLARE_METHOD(t_IndexInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexInput, clone, METH_VARARGS),
          DECLARE_METHOD(t_IndexInput, close, METH_NOARGS),
          DECLARE_METHOD(t_IndexInput, getFilePointer, METH_NOARGS),
          DECLARE_METHOD(t_IndexInput, length, METH_NOARGS),
          DECLARE_METHOD(t_IndexInput, randomAccessSlice, METH_VARARGS),
          DECLARE_METHOD(t_IndexInput, seek, METH_O),
          DECLARE_METHOD(t_IndexInput, slice, METH_VARARGS),
          DECLARE_METHOD(t_IndexInput, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexInput, t_IndexInput, ::org::apache::lucene::store::DataInput, IndexInput, abstract_init, 0, 0, t_IndexInput__fields_, 0, 0);

        void t_IndexInput::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexInput), module, "IndexInput", 0);
        }

        void t_IndexInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexInput).tp_dict, "class_", make_descriptor(IndexInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexInput).tp_dict, "wrapfn_", make_descriptor(t_IndexInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexInput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexInput::initializeClass, 1)))
            return NULL;
          return t_IndexInput::wrap_Object(IndexInput(((t_IndexInput *) arg)->object.this$));
        }
        static PyObject *t_IndexInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexInput_clone(t_IndexInput *self, PyObject *args)
        {
          IndexInput result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexInput), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_IndexInput_close(t_IndexInput *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexInput_getFilePointer(t_IndexInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexInput_length(t_IndexInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.length());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexInput_randomAccessSlice(t_IndexInput *self, PyObject *args)
        {
          jlong a0;
          jlong a1;
          ::org::apache::lucene::store::RandomAccessInput result((jobject) NULL);

          if (!parseArgs(args, "JJ", &a0, &a1))
          {
            OBJ_CALL(result = self->object.randomAccessSlice(a0, a1));
            return ::org::apache::lucene::store::t_RandomAccessInput::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "randomAccessSlice", args);
          return NULL;
        }

        static PyObject *t_IndexInput_seek(t_IndexInput *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.seek(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "seek", arg);
          return NULL;
        }

        static PyObject *t_IndexInput_slice(t_IndexInput *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          jlong a2;
          IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sJJ", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.slice(a0, a1, a2));
            return t_IndexInput::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "slice", args);
          return NULL;
        }

        static PyObject *t_IndexInput_toString(t_IndexInput *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(IndexInput), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_IndexInput_get__filePointer(t_IndexInput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TwoPhaseCommitTool$CommitFailException.h"
#include "org/apache/lucene/index/TwoPhaseCommit.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TwoPhaseCommitTool$CommitFailException::class$ = NULL;
        jmethodID *TwoPhaseCommitTool$CommitFailException::mids$ = NULL;
        bool TwoPhaseCommitTool$CommitFailException::live$ = false;

        jclass TwoPhaseCommitTool$CommitFailException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TwoPhaseCommitTool$CommitFailException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_52a0ac67] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;Lorg/apache/lucene/index/TwoPhaseCommit;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TwoPhaseCommitTool$CommitFailException::TwoPhaseCommitTool$CommitFailException(const ::java::lang::Throwable & a0, const ::org::apache::lucene::index::TwoPhaseCommit & a1) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_52a0ac67, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TwoPhaseCommitTool$CommitFailException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TwoPhaseCommitTool$CommitFailException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TwoPhaseCommitTool$CommitFailException_init_(t_TwoPhaseCommitTool$CommitFailException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_TwoPhaseCommitTool$CommitFailException__methods_[] = {
          DECLARE_METHOD(t_TwoPhaseCommitTool$CommitFailException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TwoPhaseCommitTool$CommitFailException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TwoPhaseCommitTool$CommitFailException, t_TwoPhaseCommitTool$CommitFailException, ::java::io::IOException, TwoPhaseCommitTool$CommitFailException, t_TwoPhaseCommitTool$CommitFailException_init_, 0, 0, 0, 0, 0);

        void t_TwoPhaseCommitTool$CommitFailException::install(PyObject *module)
        {
          installType(&PY_TYPE(TwoPhaseCommitTool$CommitFailException), module, "TwoPhaseCommitTool$CommitFailException", 0);
        }

        void t_TwoPhaseCommitTool$CommitFailException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool$CommitFailException).tp_dict, "class_", make_descriptor(TwoPhaseCommitTool$CommitFailException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool$CommitFailException).tp_dict, "wrapfn_", make_descriptor(t_TwoPhaseCommitTool$CommitFailException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool$CommitFailException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TwoPhaseCommitTool$CommitFailException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TwoPhaseCommitTool$CommitFailException::initializeClass, 1)))
            return NULL;
          return t_TwoPhaseCommitTool$CommitFailException::wrap_Object(TwoPhaseCommitTool$CommitFailException(((t_TwoPhaseCommitTool$CommitFailException *) arg)->object.this$));
        }
        static PyObject *t_TwoPhaseCommitTool$CommitFailException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TwoPhaseCommitTool$CommitFailException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TwoPhaseCommitTool$CommitFailException_init_(t_TwoPhaseCommitTool$CommitFailException *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::Throwable a0((jobject) NULL);
          ::org::apache::lucene::index::TwoPhaseCommit a1((jobject) NULL);
          TwoPhaseCommitTool$CommitFailException object((jobject) NULL);

          if (!parseArgs(args, "kk", ::java::lang::Throwable::initializeClass, ::org::apache::lucene::index::TwoPhaseCommit::initializeClass, &a0, &a1))
          {
            INT_CALL(object = TwoPhaseCommitTool$CommitFailException(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$DoubleParser.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$DoubleParser::class$ = NULL;
        jmethodID *FieldCache$DoubleParser::mids$ = NULL;
        bool FieldCache$DoubleParser::live$ = false;

        jclass FieldCache$DoubleParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$DoubleParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_parseDouble_7bc03dd6] = env->getMethodID(cls, "parseDouble", "(Lorg/apache/lucene/util/BytesRef;)D");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jdouble FieldCache$DoubleParser::parseDouble(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callDoubleMethod(this$, mids$[mid_parseDouble_7bc03dd6], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$DoubleParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$DoubleParser_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$DoubleParser_parseDouble(t_FieldCache$DoubleParser *self, PyObject *arg);

        static PyMethodDef t_FieldCache$DoubleParser__methods_[] = {
          DECLARE_METHOD(t_FieldCache$DoubleParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$DoubleParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$DoubleParser, parseDouble, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$DoubleParser, t_FieldCache$DoubleParser, ::org::apache::lucene::search::FieldCache$Parser, FieldCache$DoubleParser, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldCache$DoubleParser::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$DoubleParser), module, "FieldCache$DoubleParser", 0);
        }

        void t_FieldCache$DoubleParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$DoubleParser).tp_dict, "class_", make_descriptor(FieldCache$DoubleParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$DoubleParser).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$DoubleParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$DoubleParser).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$DoubleParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$DoubleParser::initializeClass, 1)))
            return NULL;
          return t_FieldCache$DoubleParser::wrap_Object(FieldCache$DoubleParser(((t_FieldCache$DoubleParser *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$DoubleParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$DoubleParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCache$DoubleParser_parseDouble(t_FieldCache$DoubleParser *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jdouble result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.parseDouble(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "parseDouble", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Float.h"
#include "java/io/File.h"
#include "java/util/Locale.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace jaspell {

            ::java::lang::Class *JaspellTernarySearchTrie::class$ = NULL;
            jmethodID *JaspellTernarySearchTrie::mids$ = NULL;
            bool JaspellTernarySearchTrie::live$ = false;

            jclass JaspellTernarySearchTrie::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
                mids$[mid_init$_56b0e4b3] = env->getMethodID(cls, "<init>", "(Ljava/util/Locale;)V");
                mids$[mid_init$_9e00f624] = env->getMethodID(cls, "<init>", "(Ljava/io/File;Z)V");
                mids$[mid_get_a739ccff] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getAndIncrement_b837041d] = env->getMethodID(cls, "getAndIncrement", "(Ljava/lang/String;)Ljava/lang/Float;");
                mids$[mid_matchAlmost_0feb8f08] = env->getMethodID(cls, "matchAlmost", "(Ljava/lang/String;)Ljava/util/List;");
                mids$[mid_matchAlmost_560b361c] = env->getMethodID(cls, "matchAlmost", "(Ljava/lang/CharSequence;I)Ljava/util/List;");
                mids$[mid_matchPrefix_0feb8f08] = env->getMethodID(cls, "matchPrefix", "(Ljava/lang/String;)Ljava/util/List;");
                mids$[mid_matchPrefix_560b361c] = env->getMethodID(cls, "matchPrefix", "(Ljava/lang/CharSequence;I)Ljava/util/List;");
                mids$[mid_numDataNodes_54c6a179] = env->getMethodID(cls, "numDataNodes", "()I");
                mids$[mid_numNodes_54c6a179] = env->getMethodID(cls, "numNodes", "()I");
                mids$[mid_put_cb8bea9a] = env->getMethodID(cls, "put", "(Ljava/lang/CharSequence;Ljava/lang/Object;)V");
                mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_remove_5fdc3f48] = env->getMethodID(cls, "remove", "(Ljava/lang/String;)V");
                mids$[mid_setMatchAlmostDiff_39c7bd3c] = env->getMethodID(cls, "setMatchAlmostDiff", "(I)V");
                mids$[mid_setNumReturnValues_39c7bd3c] = env->getMethodID(cls, "setNumReturnValues", "(I)V");
                mids$[mid_getKey_67caf3f3] = env->getMethodID(cls, "getKey", "(Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;)Ljava/lang/String;");
                mids$[mid_getNode_627fe0cf] = env->getMethodID(cls, "getNode", "(Ljava/lang/CharSequence;Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;)Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;");
                mids$[mid_getOrCreateNode_8f2fe50d] = env->getMethodID(cls, "getOrCreateNode", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;");
                mids$[mid_numDataNodes_8b97b83b] = env->getMethodID(cls, "numDataNodes", "(Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;)I");
                mids$[mid_numNodes_8b97b83b] = env->getMethodID(cls, "numNodes", "(Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;)I");
                mids$[mid_sortKeys_4e6ea08e] = env->getMethodID(cls, "sortKeys", "(Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;I)Ljava/util/List;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            JaspellTernarySearchTrie::JaspellTernarySearchTrie() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            JaspellTernarySearchTrie::JaspellTernarySearchTrie(const ::java::io::File & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

            JaspellTernarySearchTrie::JaspellTernarySearchTrie(const ::java::util::Locale & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_56b0e4b3, a0.this$)) {}

            JaspellTernarySearchTrie::JaspellTernarySearchTrie(const ::java::io::File & a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9e00f624, a0.this$, a1)) {}

            ::java::lang::Object JaspellTernarySearchTrie::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a739ccff], a0.this$));
            }

            ::java::lang::Float JaspellTernarySearchTrie::getAndIncrement(const ::java::lang::String & a0) const
            {
              return ::java::lang::Float(env->callObjectMethod(this$, mids$[mid_getAndIncrement_b837041d], a0.this$));
            }

            ::java::util::List JaspellTernarySearchTrie::matchAlmost(const ::java::lang::String & a0) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_matchAlmost_0feb8f08], a0.this$));
            }

            ::java::util::List JaspellTernarySearchTrie::matchAlmost(const ::java::lang::CharSequence & a0, jint a1) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_matchAlmost_560b361c], a0.this$, a1));
            }

            ::java::util::List JaspellTernarySearchTrie::matchPrefix(const ::java::lang::String & a0) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_matchPrefix_0feb8f08], a0.this$));
            }

            ::java::util::List JaspellTernarySearchTrie::matchPrefix(const ::java::lang::CharSequence & a0, jint a1) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_matchPrefix_560b361c], a0.this$, a1));
            }

            jint JaspellTernarySearchTrie::numDataNodes() const
            {
              return env->callIntMethod(this$, mids$[mid_numDataNodes_54c6a179]);
            }

            jint JaspellTernarySearchTrie::numNodes() const
            {
              return env->callIntMethod(this$, mids$[mid_numNodes_54c6a179]);
            }

            void JaspellTernarySearchTrie::put(const ::java::lang::CharSequence & a0, const ::java::lang::Object & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_put_cb8bea9a], a0.this$, a1.this$);
            }

            jlong JaspellTernarySearchTrie::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
            }

            void JaspellTernarySearchTrie::remove(const ::java::lang::String & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_remove_5fdc3f48], a0.this$);
            }

            void JaspellTernarySearchTrie::setMatchAlmostDiff(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setMatchAlmostDiff_39c7bd3c], a0);
            }

            void JaspellTernarySearchTrie::setNumReturnValues(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNumReturnValues_39c7bd3c], a0);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace jaspell {
            static PyObject *t_JaspellTernarySearchTrie_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_JaspellTernarySearchTrie_instance_(PyTypeObject *type, PyObject *arg);
            static int t_JaspellTernarySearchTrie_init_(t_JaspellTernarySearchTrie *self, PyObject *args, PyObject *kwds);
            static PyObject *t_JaspellTernarySearchTrie_get(t_JaspellTernarySearchTrie *self, PyObject *arg);
            static PyObject *t_JaspellTernarySearchTrie_getAndIncrement(t_JaspellTernarySearchTrie *self, PyObject *arg);
            static PyObject *t_JaspellTernarySearchTrie_matchAlmost(t_JaspellTernarySearchTrie *self, PyObject *args);
            static PyObject *t_JaspellTernarySearchTrie_matchPrefix(t_JaspellTernarySearchTrie *self, PyObject *args);
            static PyObject *t_JaspellTernarySearchTrie_numDataNodes(t_JaspellTernarySearchTrie *self);
            static PyObject *t_JaspellTernarySearchTrie_numNodes(t_JaspellTernarySearchTrie *self);
            static PyObject *t_JaspellTernarySearchTrie_put(t_JaspellTernarySearchTrie *self, PyObject *args);
            static PyObject *t_JaspellTernarySearchTrie_ramBytesUsed(t_JaspellTernarySearchTrie *self);
            static PyObject *t_JaspellTernarySearchTrie_remove(t_JaspellTernarySearchTrie *self, PyObject *arg);
            static PyObject *t_JaspellTernarySearchTrie_setMatchAlmostDiff(t_JaspellTernarySearchTrie *self, PyObject *arg);
            static PyObject *t_JaspellTernarySearchTrie_setNumReturnValues(t_JaspellTernarySearchTrie *self, PyObject *arg);
            static int t_JaspellTernarySearchTrie_set__matchAlmostDiff(t_JaspellTernarySearchTrie *self, PyObject *arg, void *data);
            static int t_JaspellTernarySearchTrie_set__numReturnValues(t_JaspellTernarySearchTrie *self, PyObject *arg, void *data);
            static PyGetSetDef t_JaspellTernarySearchTrie__fields_[] = {
              DECLARE_SET_FIELD(t_JaspellTernarySearchTrie, matchAlmostDiff),
              DECLARE_SET_FIELD(t_JaspellTernarySearchTrie, numReturnValues),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_JaspellTernarySearchTrie__methods_[] = {
              DECLARE_METHOD(t_JaspellTernarySearchTrie, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, get, METH_O),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, getAndIncrement, METH_O),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, matchAlmost, METH_VARARGS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, matchPrefix, METH_VARARGS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, numDataNodes, METH_NOARGS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, numNodes, METH_NOARGS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, put, METH_VARARGS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, ramBytesUsed, METH_NOARGS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, remove, METH_O),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, setMatchAlmostDiff, METH_O),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, setNumReturnValues, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(JaspellTernarySearchTrie, t_JaspellTernarySearchTrie, ::java::lang::Object, JaspellTernarySearchTrie, t_JaspellTernarySearchTrie_init_, 0, 0, t_JaspellTernarySearchTrie__fields_, 0, 0);

            void t_JaspellTernarySearchTrie::install(PyObject *module)
            {
              installType(&PY_TYPE(JaspellTernarySearchTrie), module, "JaspellTernarySearchTrie", 0);
            }

            void t_JaspellTernarySearchTrie::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(JaspellTernarySearchTrie).tp_dict, "class_", make_descriptor(JaspellTernarySearchTrie::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(JaspellTernarySearchTrie).tp_dict, "wrapfn_", make_descriptor(t_JaspellTernarySearchTrie::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(JaspellTernarySearchTrie).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_JaspellTernarySearchTrie_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, JaspellTernarySearchTrie::initializeClass, 1)))
                return NULL;
              return t_JaspellTernarySearchTrie::wrap_Object(JaspellTernarySearchTrie(((t_JaspellTernarySearchTrie *) arg)->object.this$));
            }
            static PyObject *t_JaspellTernarySearchTrie_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, JaspellTernarySearchTrie::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_JaspellTernarySearchTrie_init_(t_JaspellTernarySearchTrie *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  JaspellTernarySearchTrie object((jobject) NULL);

                  INT_CALL(object = JaspellTernarySearchTrie());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  ::java::io::File a0((jobject) NULL);
                  JaspellTernarySearchTrie object((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
                  {
                    INT_CALL(object = JaspellTernarySearchTrie(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::java::util::Locale a0((jobject) NULL);
                  JaspellTernarySearchTrie object((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
                  {
                    INT_CALL(object = JaspellTernarySearchTrie(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::io::File a0((jobject) NULL);
                  jboolean a1;
                  JaspellTernarySearchTrie object((jobject) NULL);

                  if (!parseArgs(args, "kZ", ::java::io::File::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = JaspellTernarySearchTrie(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_JaspellTernarySearchTrie_get(t_JaspellTernarySearchTrie *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_getAndIncrement(t_JaspellTernarySearchTrie *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Float result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.getAndIncrement(a0));
                return ::java::lang::t_Float::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getAndIncrement", arg);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_matchAlmost(t_JaspellTernarySearchTrie *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    OBJ_CALL(result = self->object.matchAlmost(a0));
                    return ::java::util::t_List::wrap_Object(result, &::java::lang::PY_TYPE(String));
                  }
                }
                break;
               case 2:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  jint a1;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                  {
                    OBJ_CALL(result = self->object.matchAlmost(a0, a1));
                    return ::java::util::t_List::wrap_Object(result, &::java::lang::PY_TYPE(String));
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "matchAlmost", args);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_matchPrefix(t_JaspellTernarySearchTrie *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    OBJ_CALL(result = self->object.matchPrefix(a0));
                    return ::java::util::t_List::wrap_Object(result, &::java::lang::PY_TYPE(String));
                  }
                }
                break;
               case 2:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  jint a1;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                  {
                    OBJ_CALL(result = self->object.matchPrefix(a0, a1));
                    return ::java::util::t_List::wrap_Object(result, &::java::lang::PY_TYPE(String));
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "matchPrefix", args);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_numDataNodes(t_JaspellTernarySearchTrie *self)
            {
              jint result;
              OBJ_CALL(result = self->object.numDataNodes());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_JaspellTernarySearchTrie_numNodes(t_JaspellTernarySearchTrie *self)
            {
              jint result;
              OBJ_CALL(result = self->object.numNodes());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_JaspellTernarySearchTrie_put(t_JaspellTernarySearchTrie *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object a1((jobject) NULL);

              if (!parseArgs(args, "Oo", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
              {
                OBJ_CALL(self->object.put(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "put", args);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_ramBytesUsed(t_JaspellTernarySearchTrie *self)
            {
              jlong result;
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            static PyObject *t_JaspellTernarySearchTrie_remove(t_JaspellTernarySearchTrie *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(self->object.remove(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "remove", arg);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_setMatchAlmostDiff(t_JaspellTernarySearchTrie *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setMatchAlmostDiff(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setMatchAlmostDiff", arg);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_setNumReturnValues(t_JaspellTernarySearchTrie *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setNumReturnValues(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setNumReturnValues", arg);
              return NULL;
            }

            static int t_JaspellTernarySearchTrie_set__matchAlmostDiff(t_JaspellTernarySearchTrie *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setMatchAlmostDiff(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "matchAlmostDiff", arg);
              return -1;
            }

            static int t_JaspellTernarySearchTrie_set__numReturnValues(t_JaspellTernarySearchTrie *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setNumReturnValues(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "numReturnValues", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/WeightedSpanTermExtractor.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/highlight/WeightedSpanTerm.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *WeightedSpanTermExtractor::class$ = NULL;
          jmethodID *WeightedSpanTermExtractor::mids$ = NULL;
          bool WeightedSpanTermExtractor::live$ = false;

          jclass WeightedSpanTermExtractor::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/WeightedSpanTermExtractor");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_getExpandMultiTermQuery_54c6a16a] = env->getMethodID(cls, "getExpandMultiTermQuery", "()Z");
              mids$[mid_getTokenStream_71f550c9] = env->getMethodID(cls, "getTokenStream", "()Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getWeightedSpanTerms_2b00c132] = env->getMethodID(cls, "getWeightedSpanTerms", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/analysis/TokenStream;)Ljava/util/Map;");
              mids$[mid_getWeightedSpanTerms_4bedc0dc] = env->getMethodID(cls, "getWeightedSpanTerms", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;)Ljava/util/Map;");
              mids$[mid_getWeightedSpanTermsWithScores_d44049f9] = env->getMethodID(cls, "getWeightedSpanTermsWithScores", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;Lorg/apache/lucene/index/IndexReader;)Ljava/util/Map;");
              mids$[mid_isCachedTokenStream_54c6a16a] = env->getMethodID(cls, "isCachedTokenStream", "()Z");
              mids$[mid_setExpandMultiTermQuery_bb0c767f] = env->getMethodID(cls, "setExpandMultiTermQuery", "(Z)V");
              mids$[mid_setWrapIfNotCachingTokenFilter_bb0c767f] = env->getMethodID(cls, "setWrapIfNotCachingTokenFilter", "(Z)V");
              mids$[mid_extract_1ecdc9cb] = env->getMethodID(cls, "extract", "(Lorg/apache/lucene/search/Query;Ljava/util/Map;)V");
              mids$[mid_extractUnknownQuery_1ecdc9cb] = env->getMethodID(cls, "extractUnknownQuery", "(Lorg/apache/lucene/search/Query;Ljava/util/Map;)V");
              mids$[mid_extractWeightedSpanTerms_66aae95d] = env->getMethodID(cls, "extractWeightedSpanTerms", "(Ljava/util/Map;Lorg/apache/lucene/search/spans/SpanQuery;)V");
              mids$[mid_mustRewriteQuery_056c189b] = env->getMethodID(cls, "mustRewriteQuery", "(Lorg/apache/lucene/search/spans/SpanQuery;)Z");
              mids$[mid_extractWeightedTerms_f386227d] = env->getMethodID(cls, "extractWeightedTerms", "(Ljava/util/Map;Lorg/apache/lucene/search/Query;)V");
              mids$[mid_fieldNameComparator_5fdc3f44] = env->getMethodID(cls, "fieldNameComparator", "(Ljava/lang/String;)Z");
              mids$[mid_getLeafContext_c2ef2576] = env->getMethodID(cls, "getLeafContext", "()Lorg/apache/lucene/index/AtomicReaderContext;");
              mids$[mid_collectSpanQueryFields_33bf20d1] = env->getMethodID(cls, "collectSpanQueryFields", "(Lorg/apache/lucene/search/spans/SpanQuery;Ljava/util/Set;)V");
              mids$[mid_setMaxDocCharsToAnalyze_39c7bd3c] = env->getMethodID(cls, "setMaxDocCharsToAnalyze", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WeightedSpanTermExtractor::WeightedSpanTermExtractor() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          WeightedSpanTermExtractor::WeightedSpanTermExtractor(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          jboolean WeightedSpanTermExtractor::getExpandMultiTermQuery() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getExpandMultiTermQuery_54c6a16a]);
          }

          ::org::apache::lucene::analysis::TokenStream WeightedSpanTermExtractor::getTokenStream() const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_getTokenStream_71f550c9]));
          }

          ::java::util::Map WeightedSpanTermExtractor::getWeightedSpanTerms(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getWeightedSpanTerms_2b00c132], a0.this$, a1.this$));
          }

          ::java::util::Map WeightedSpanTermExtractor::getWeightedSpanTerms(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::java::lang::String & a2) const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getWeightedSpanTerms_4bedc0dc], a0.this$, a1.this$, a2.this$));
          }

          ::java::util::Map WeightedSpanTermExtractor::getWeightedSpanTermsWithScores(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::java::lang::String & a2, const ::org::apache::lucene::index::IndexReader & a3) const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getWeightedSpanTermsWithScores_d44049f9], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          jboolean WeightedSpanTermExtractor::isCachedTokenStream() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isCachedTokenStream_54c6a16a]);
          }

          void WeightedSpanTermExtractor::setExpandMultiTermQuery(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setExpandMultiTermQuery_bb0c767f], a0);
          }

          void WeightedSpanTermExtractor::setWrapIfNotCachingTokenFilter(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setWrapIfNotCachingTokenFilter_bb0c767f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_WeightedSpanTermExtractor_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WeightedSpanTermExtractor_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WeightedSpanTermExtractor_init_(t_WeightedSpanTermExtractor *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WeightedSpanTermExtractor_getExpandMultiTermQuery(t_WeightedSpanTermExtractor *self);
          static PyObject *t_WeightedSpanTermExtractor_getTokenStream(t_WeightedSpanTermExtractor *self);
          static PyObject *t_WeightedSpanTermExtractor_getWeightedSpanTerms(t_WeightedSpanTermExtractor *self, PyObject *args);
          static PyObject *t_WeightedSpanTermExtractor_getWeightedSpanTermsWithScores(t_WeightedSpanTermExtractor *self, PyObject *args);
          static PyObject *t_WeightedSpanTermExtractor_isCachedTokenStream(t_WeightedSpanTermExtractor *self);
          static PyObject *t_WeightedSpanTermExtractor_setExpandMultiTermQuery(t_WeightedSpanTermExtractor *self, PyObject *arg);
          static PyObject *t_WeightedSpanTermExtractor_setWrapIfNotCachingTokenFilter(t_WeightedSpanTermExtractor *self, PyObject *arg);
          static PyObject *t_WeightedSpanTermExtractor_get__cachedTokenStream(t_WeightedSpanTermExtractor *self, void *data);
          static PyObject *t_WeightedSpanTermExtractor_get__expandMultiTermQuery(t_WeightedSpanTermExtractor *self, void *data);
          static int t_WeightedSpanTermExtractor_set__expandMultiTermQuery(t_WeightedSpanTermExtractor *self, PyObject *arg, void *data);
          static PyObject *t_WeightedSpanTermExtractor_get__tokenStream(t_WeightedSpanTermExtractor *self, void *data);
          static int t_WeightedSpanTermExtractor_set__wrapIfNotCachingTokenFilter(t_WeightedSpanTermExtractor *self, PyObject *arg, void *data);
          static PyGetSetDef t_WeightedSpanTermExtractor__fields_[] = {
            DECLARE_GET_FIELD(t_WeightedSpanTermExtractor, cachedTokenStream),
            DECLARE_GETSET_FIELD(t_WeightedSpanTermExtractor, expandMultiTermQuery),
            DECLARE_GET_FIELD(t_WeightedSpanTermExtractor, tokenStream),
            DECLARE_SET_FIELD(t_WeightedSpanTermExtractor, wrapIfNotCachingTokenFilter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_WeightedSpanTermExtractor__methods_[] = {
            DECLARE_METHOD(t_WeightedSpanTermExtractor, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, getExpandMultiTermQuery, METH_NOARGS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, getTokenStream, METH_NOARGS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, getWeightedSpanTerms, METH_VARARGS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, getWeightedSpanTermsWithScores, METH_VARARGS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, isCachedTokenStream, METH_NOARGS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, setExpandMultiTermQuery, METH_O),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, setWrapIfNotCachingTokenFilter, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WeightedSpanTermExtractor, t_WeightedSpanTermExtractor, ::java::lang::Object, WeightedSpanTermExtractor, t_WeightedSpanTermExtractor_init_, 0, 0, t_WeightedSpanTermExtractor__fields_, 0, 0);

          void t_WeightedSpanTermExtractor::install(PyObject *module)
          {
            installType(&PY_TYPE(WeightedSpanTermExtractor), module, "WeightedSpanTermExtractor", 0);
          }

          void t_WeightedSpanTermExtractor::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WeightedSpanTermExtractor).tp_dict, "class_", make_descriptor(WeightedSpanTermExtractor::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WeightedSpanTermExtractor).tp_dict, "wrapfn_", make_descriptor(t_WeightedSpanTermExtractor::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WeightedSpanTermExtractor).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WeightedSpanTermExtractor_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WeightedSpanTermExtractor::initializeClass, 1)))
              return NULL;
            return t_WeightedSpanTermExtractor::wrap_Object(WeightedSpanTermExtractor(((t_WeightedSpanTermExtractor *) arg)->object.this$));
          }
          static PyObject *t_WeightedSpanTermExtractor_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WeightedSpanTermExtractor::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WeightedSpanTermExtractor_init_(t_WeightedSpanTermExtractor *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                WeightedSpanTermExtractor object((jobject) NULL);

                INT_CALL(object = WeightedSpanTermExtractor());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                WeightedSpanTermExtractor object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = WeightedSpanTermExtractor(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WeightedSpanTermExtractor_getExpandMultiTermQuery(t_WeightedSpanTermExtractor *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getExpandMultiTermQuery());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_WeightedSpanTermExtractor_getTokenStream(t_WeightedSpanTermExtractor *self)
          {
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);
            OBJ_CALL(result = self->object.getTokenStream());
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
          }

          static PyObject *t_WeightedSpanTermExtractor_getWeightedSpanTerms(t_WeightedSpanTermExtractor *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::java::util::Map result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.getWeightedSpanTerms(a0, a1));
                  return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::org::apache::lucene::search::highlight::PY_TYPE(WeightedSpanTerm));
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::java::util::Map result((jobject) NULL);

                if (!parseArgs(args, "kks", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getWeightedSpanTerms(a0, a1, a2));
                  return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::org::apache::lucene::search::highlight::PY_TYPE(WeightedSpanTerm));
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getWeightedSpanTerms", args);
            return NULL;
          }

          static PyObject *t_WeightedSpanTermExtractor_getWeightedSpanTermsWithScores(t_WeightedSpanTermExtractor *self, PyObject *args)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::index::IndexReader a3((jobject) NULL);
            ::java::util::Map result((jobject) NULL);

            if (!parseArgs(args, "kksk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.getWeightedSpanTermsWithScores(a0, a1, a2, a3));
              return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::org::apache::lucene::search::highlight::PY_TYPE(WeightedSpanTerm));
            }

            PyErr_SetArgsError((PyObject *) self, "getWeightedSpanTermsWithScores", args);
            return NULL;
          }

          static PyObject *t_WeightedSpanTermExtractor_isCachedTokenStream(t_WeightedSpanTermExtractor *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isCachedTokenStream());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_WeightedSpanTermExtractor_setExpandMultiTermQuery(t_WeightedSpanTermExtractor *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setExpandMultiTermQuery(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setExpandMultiTermQuery", arg);
            return NULL;
          }

          static PyObject *t_WeightedSpanTermExtractor_setWrapIfNotCachingTokenFilter(t_WeightedSpanTermExtractor *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setWrapIfNotCachingTokenFilter(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setWrapIfNotCachingTokenFilter", arg);
            return NULL;
          }

          static PyObject *t_WeightedSpanTermExtractor_get__cachedTokenStream(t_WeightedSpanTermExtractor *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isCachedTokenStream());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_WeightedSpanTermExtractor_get__expandMultiTermQuery(t_WeightedSpanTermExtractor *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getExpandMultiTermQuery());
            Py_RETURN_BOOL(value);
          }
          static int t_WeightedSpanTermExtractor_set__expandMultiTermQuery(t_WeightedSpanTermExtractor *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setExpandMultiTermQuery(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "expandMultiTermQuery", arg);
            return -1;
          }

          static PyObject *t_WeightedSpanTermExtractor_get__tokenStream(t_WeightedSpanTermExtractor *self, void *data)
          {
            ::org::apache::lucene::analysis::TokenStream value((jobject) NULL);
            OBJ_CALL(value = self->object.getTokenStream());
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(value);
          }

          static int t_WeightedSpanTermExtractor_set__wrapIfNotCachingTokenFilter(t_WeightedSpanTermExtractor *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setWrapIfNotCachingTokenFilter(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "wrapIfNotCachingTokenFilter", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanMultiTermQueryWrapper$SpanRewriteMethod.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanMultiTermQueryWrapper$SpanRewriteMethod::class$ = NULL;
          jmethodID *SpanMultiTermQueryWrapper$SpanRewriteMethod::mids$ = NULL;
          bool SpanMultiTermQueryWrapper$SpanRewriteMethod::live$ = false;

          jclass SpanMultiTermQueryWrapper$SpanRewriteMethod::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanMultiTermQueryWrapper$SpanRewriteMethod");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_rewrite_63657170] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/spans/SpanQuery;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanMultiTermQueryWrapper$SpanRewriteMethod::SpanMultiTermQueryWrapper$SpanRewriteMethod() : ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::spans::SpanQuery SpanMultiTermQueryWrapper$SpanRewriteMethod::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
          {
            return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_rewrite_63657170], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_of_(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, PyObject *args);
          static int t_SpanMultiTermQueryWrapper$SpanRewriteMethod_init_(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_rewrite(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_get__parameters_(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, void *data);
          static PyGetSetDef t_SpanMultiTermQueryWrapper$SpanRewriteMethod__fields_[] = {
            DECLARE_GET_FIELD(t_SpanMultiTermQueryWrapper$SpanRewriteMethod, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanMultiTermQueryWrapper$SpanRewriteMethod__methods_[] = {
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$SpanRewriteMethod, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$SpanRewriteMethod, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$SpanRewriteMethod, of_, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$SpanRewriteMethod, rewrite, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod, t_SpanMultiTermQueryWrapper$SpanRewriteMethod, ::org::apache::lucene::search::MultiTermQuery$RewriteMethod, SpanMultiTermQueryWrapper$SpanRewriteMethod, t_SpanMultiTermQueryWrapper$SpanRewriteMethod_init_, 0, 0, t_SpanMultiTermQueryWrapper$SpanRewriteMethod__fields_, 0, 0);
          PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_Object(const SpanMultiTermQueryWrapper$SpanRewriteMethod& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self = (t_SpanMultiTermQueryWrapper$SpanRewriteMethod *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self = (t_SpanMultiTermQueryWrapper$SpanRewriteMethod *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SpanMultiTermQueryWrapper$SpanRewriteMethod::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod), module, "SpanMultiTermQueryWrapper$SpanRewriteMethod", 0);
          }

          void t_SpanMultiTermQueryWrapper$SpanRewriteMethod::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod).tp_dict, "class_", make_descriptor(SpanMultiTermQueryWrapper$SpanRewriteMethod::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod).tp_dict, "wrapfn_", make_descriptor(t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanMultiTermQueryWrapper$SpanRewriteMethod::initializeClass, 1)))
              return NULL;
            return t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_Object(SpanMultiTermQueryWrapper$SpanRewriteMethod(((t_SpanMultiTermQueryWrapper$SpanRewriteMethod *) arg)->object.this$));
          }
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanMultiTermQueryWrapper$SpanRewriteMethod::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_of_(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SpanMultiTermQueryWrapper$SpanRewriteMethod_init_(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, PyObject *args, PyObject *kwds)
          {
            SpanMultiTermQueryWrapper$SpanRewriteMethod object((jobject) NULL);

            INT_CALL(object = SpanMultiTermQueryWrapper$SpanRewriteMethod());
            self->object = object;

            return 0;
          }

          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_rewrite(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.rewrite(a0, a1));
              return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod), (PyObject *) self, "rewrite", args, 2);
          }
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_get__parameters_(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TimeLimitingCollector$TimerThread.h"
#include "org/apache/lucene/util/Counter.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TimeLimitingCollector$TimerThread::class$ = NULL;
        jmethodID *TimeLimitingCollector$TimerThread::mids$ = NULL;
        bool TimeLimitingCollector$TimerThread::live$ = false;
        jint TimeLimitingCollector$TimerThread::DEFAULT_RESOLUTION = (jint) 0;
        ::java::lang::String *TimeLimitingCollector$TimerThread::THREAD_NAME = NULL;

        jclass TimeLimitingCollector$TimerThread::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TimeLimitingCollector$TimerThread");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4ae88947] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Counter;)V");
            mids$[mid_init$_dfcea312] = env->getMethodID(cls, "<init>", "(JLorg/apache/lucene/util/Counter;)V");
            mids$[mid_getMilliseconds_54c6a17a] = env->getMethodID(cls, "getMilliseconds", "()J");
            mids$[mid_getResolution_54c6a17a] = env->getMethodID(cls, "getResolution", "()J");
            mids$[mid_run_54c6a166] = env->getMethodID(cls, "run", "()V");
            mids$[mid_setResolution_0ee6df2f] = env->getMethodID(cls, "setResolution", "(J)V");
            mids$[mid_stopTimer_54c6a166] = env->getMethodID(cls, "stopTimer", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_RESOLUTION = env->getStaticIntField(cls, "DEFAULT_RESOLUTION");
            THREAD_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "THREAD_NAME", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TimeLimitingCollector$TimerThread::TimeLimitingCollector$TimerThread(const ::org::apache::lucene::util::Counter & a0) : ::java::lang::Thread(env->newObject(initializeClass, &mids$, mid_init$_4ae88947, a0.this$)) {}

        TimeLimitingCollector$TimerThread::TimeLimitingCollector$TimerThread(jlong a0, const ::org::apache::lucene::util::Counter & a1) : ::java::lang::Thread(env->newObject(initializeClass, &mids$, mid_init$_dfcea312, a0, a1.this$)) {}

        jlong TimeLimitingCollector$TimerThread::getMilliseconds() const
        {
          return env->callLongMethod(this$, mids$[mid_getMilliseconds_54c6a17a]);
        }

        jlong TimeLimitingCollector$TimerThread::getResolution() const
        {
          return env->callLongMethod(this$, mids$[mid_getResolution_54c6a17a]);
        }

        void TimeLimitingCollector$TimerThread::run() const
        {
          env->callVoidMethod(this$, mids$[mid_run_54c6a166]);
        }

        void TimeLimitingCollector$TimerThread::setResolution(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setResolution_0ee6df2f], a0);
        }

        void TimeLimitingCollector$TimerThread::stopTimer() const
        {
          env->callVoidMethod(this$, mids$[mid_stopTimer_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TimeLimitingCollector$TimerThread_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TimeLimitingCollector$TimerThread_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TimeLimitingCollector$TimerThread_init_(t_TimeLimitingCollector$TimerThread *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TimeLimitingCollector$TimerThread_getMilliseconds(t_TimeLimitingCollector$TimerThread *self);
        static PyObject *t_TimeLimitingCollector$TimerThread_getResolution(t_TimeLimitingCollector$TimerThread *self);
        static PyObject *t_TimeLimitingCollector$TimerThread_run(t_TimeLimitingCollector$TimerThread *self, PyObject *args);
        static PyObject *t_TimeLimitingCollector$TimerThread_setResolution(t_TimeLimitingCollector$TimerThread *self, PyObject *arg);
        static PyObject *t_TimeLimitingCollector$TimerThread_stopTimer(t_TimeLimitingCollector$TimerThread *self);
        static PyObject *t_TimeLimitingCollector$TimerThread_get__milliseconds(t_TimeLimitingCollector$TimerThread *self, void *data);
        static PyObject *t_TimeLimitingCollector$TimerThread_get__resolution(t_TimeLimitingCollector$TimerThread *self, void *data);
        static int t_TimeLimitingCollector$TimerThread_set__resolution(t_TimeLimitingCollector$TimerThread *self, PyObject *arg, void *data);
        static PyGetSetDef t_TimeLimitingCollector$TimerThread__fields_[] = {
          DECLARE_GET_FIELD(t_TimeLimitingCollector$TimerThread, milliseconds),
          DECLARE_GETSET_FIELD(t_TimeLimitingCollector$TimerThread, resolution),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TimeLimitingCollector$TimerThread__methods_[] = {
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, getMilliseconds, METH_NOARGS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, getResolution, METH_NOARGS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, run, METH_VARARGS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, setResolution, METH_O),
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, stopTimer, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TimeLimitingCollector$TimerThread, t_TimeLimitingCollector$TimerThread, ::java::lang::Thread, TimeLimitingCollector$TimerThread, t_TimeLimitingCollector$TimerThread_init_, 0, 0, t_TimeLimitingCollector$TimerThread__fields_, 0, 0);

        void t_TimeLimitingCollector$TimerThread::install(PyObject *module)
        {
          installType(&PY_TYPE(TimeLimitingCollector$TimerThread), module, "TimeLimitingCollector$TimerThread", 0);
        }

        void t_TimeLimitingCollector$TimerThread::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector$TimerThread).tp_dict, "class_", make_descriptor(TimeLimitingCollector$TimerThread::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector$TimerThread).tp_dict, "wrapfn_", make_descriptor(t_TimeLimitingCollector$TimerThread::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector$TimerThread).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(TimeLimitingCollector$TimerThread::initializeClass);
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector$TimerThread).tp_dict, "DEFAULT_RESOLUTION", make_descriptor(TimeLimitingCollector$TimerThread::DEFAULT_RESOLUTION));
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector$TimerThread).tp_dict, "THREAD_NAME", make_descriptor(j2p(*TimeLimitingCollector$TimerThread::THREAD_NAME)));
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TimeLimitingCollector$TimerThread::initializeClass, 1)))
            return NULL;
          return t_TimeLimitingCollector$TimerThread::wrap_Object(TimeLimitingCollector$TimerThread(((t_TimeLimitingCollector$TimerThread *) arg)->object.this$));
        }
        static PyObject *t_TimeLimitingCollector$TimerThread_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TimeLimitingCollector$TimerThread::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TimeLimitingCollector$TimerThread_init_(t_TimeLimitingCollector$TimerThread *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::Counter a0((jobject) NULL);
              TimeLimitingCollector$TimerThread object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::Counter::initializeClass, &a0))
              {
                INT_CALL(object = TimeLimitingCollector$TimerThread(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jlong a0;
              ::org::apache::lucene::util::Counter a1((jobject) NULL);
              TimeLimitingCollector$TimerThread object((jobject) NULL);

              if (!parseArgs(args, "Jk", ::org::apache::lucene::util::Counter::initializeClass, &a0, &a1))
              {
                INT_CALL(object = TimeLimitingCollector$TimerThread(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_getMilliseconds(t_TimeLimitingCollector$TimerThread *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getMilliseconds());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_getResolution(t_TimeLimitingCollector$TimerThread *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getResolution());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_run(t_TimeLimitingCollector$TimerThread *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.run());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TimeLimitingCollector$TimerThread), (PyObject *) self, "run", args, 2);
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_setResolution(t_TimeLimitingCollector$TimerThread *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.setResolution(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setResolution", arg);
          return NULL;
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_stopTimer(t_TimeLimitingCollector$TimerThread *self)
        {
          OBJ_CALL(self->object.stopTimer());
          Py_RETURN_NONE;
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_get__milliseconds(t_TimeLimitingCollector$TimerThread *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getMilliseconds());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_get__resolution(t_TimeLimitingCollector$TimerThread *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getResolution());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_TimeLimitingCollector$TimerThread_set__resolution(t_TimeLimitingCollector$TimerThread *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setResolution(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "resolution", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *BinaryDocValues::class$ = NULL;
        jmethodID *BinaryDocValues::mids$ = NULL;
        bool BinaryDocValues::live$ = false;

        jclass BinaryDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/BinaryDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_get_b57e9c3f] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/util/BytesRef;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::BytesRef BinaryDocValues::get(jint a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_get_b57e9c3f], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_BinaryDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BinaryDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BinaryDocValues_get(t_BinaryDocValues *self, PyObject *arg);

        static PyMethodDef t_BinaryDocValues__methods_[] = {
          DECLARE_METHOD(t_BinaryDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BinaryDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BinaryDocValues, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BinaryDocValues, t_BinaryDocValues, ::java::lang::Object, BinaryDocValues, abstract_init, 0, 0, 0, 0, 0);

        void t_BinaryDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(BinaryDocValues), module, "BinaryDocValues", 0);
        }

        void t_BinaryDocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BinaryDocValues).tp_dict, "class_", make_descriptor(BinaryDocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BinaryDocValues).tp_dict, "wrapfn_", make_descriptor(t_BinaryDocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BinaryDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BinaryDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BinaryDocValues::initializeClass, 1)))
            return NULL;
          return t_BinaryDocValues::wrap_Object(BinaryDocValues(((t_BinaryDocValues *) arg)->object.this$));
        }
        static PyObject *t_BinaryDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BinaryDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BinaryDocValues_get(t_BinaryDocValues *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiFields.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/ReaderSlice.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/util/Iterator.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiFields::class$ = NULL;
        jmethodID *MultiFields::mids$ = NULL;
        bool MultiFields::live$ = false;

        jclass MultiFields::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiFields");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4836fcd7] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/Fields;[Lorg/apache/lucene/index/ReaderSlice;)V");
            mids$[mid_getFields_450c502c] = env->getStaticMethodID(cls, "getFields", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/index/Fields;");
            mids$[mid_getIndexedFields_c7983645] = env->getStaticMethodID(cls, "getIndexedFields", "(Lorg/apache/lucene/index/IndexReader;)Ljava/util/Collection;");
            mids$[mid_getLiveDocs_38e907ca] = env->getStaticMethodID(cls, "getLiveDocs", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getMergedFieldInfos_27fb8e4c] = env->getStaticMethodID(cls, "getMergedFieldInfos", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/index/FieldInfos;");
            mids$[mid_getTermDocsEnum_0566f0df] = env->getStaticMethodID(cls, "getTermDocsEnum", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/util/Bits;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_getTermDocsEnum_dd660923] = env->getStaticMethodID(cls, "getTermDocsEnum", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/util/Bits;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;I)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_getTermPositionsEnum_b8773540] = env->getStaticMethodID(cls, "getTermPositionsEnum", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/util/Bits;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_getTermPositionsEnum_79e6ab0c] = env->getStaticMethodID(cls, "getTermPositionsEnum", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/util/Bits;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_getTerms_4d5aa19b] = env->getStaticMethodID(cls, "getTerms", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_terms_ee262ab4] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiFields::MultiFields(const JArray< ::org::apache::lucene::index::Fields > & a0, const JArray< ::org::apache::lucene::index::ReaderSlice > & a1) : ::org::apache::lucene::index::Fields(env->newObject(initializeClass, &mids$, mid_init$_4836fcd7, a0.this$, a1.this$)) {}

        ::org::apache::lucene::index::Fields MultiFields::getFields(const ::org::apache::lucene::index::IndexReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::Fields(env->callStaticObjectMethod(cls, mids$[mid_getFields_450c502c], a0.this$));
        }

        ::java::util::Collection MultiFields::getIndexedFields(const ::org::apache::lucene::index::IndexReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Collection(env->callStaticObjectMethod(cls, mids$[mid_getIndexedFields_c7983645], a0.this$));
        }

        ::org::apache::lucene::util::Bits MultiFields::getLiveDocs(const ::org::apache::lucene::index::IndexReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Bits(env->callStaticObjectMethod(cls, mids$[mid_getLiveDocs_38e907ca], a0.this$));
        }

        ::org::apache::lucene::index::FieldInfos MultiFields::getMergedFieldInfos(const ::org::apache::lucene::index::IndexReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::FieldInfos(env->callStaticObjectMethod(cls, mids$[mid_getMergedFieldInfos_27fb8e4c], a0.this$));
        }

        ::org::apache::lucene::index::DocsEnum MultiFields::getTermDocsEnum(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DocsEnum(env->callStaticObjectMethod(cls, mids$[mid_getTermDocsEnum_0566f0df], a0.this$, a1.this$, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::DocsEnum MultiFields::getTermDocsEnum(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3, jint a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DocsEnum(env->callStaticObjectMethod(cls, mids$[mid_getTermDocsEnum_dd660923], a0.this$, a1.this$, a2.this$, a3.this$, a4));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum MultiFields::getTermPositionsEnum(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callStaticObjectMethod(cls, mids$[mid_getTermPositionsEnum_b8773540], a0.this$, a1.this$, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum MultiFields::getTermPositionsEnum(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3, jint a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callStaticObjectMethod(cls, mids$[mid_getTermPositionsEnum_79e6ab0c], a0.this$, a1.this$, a2.this$, a3.this$, a4));
        }

        ::org::apache::lucene::index::Terms MultiFields::getTerms(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::Terms(env->callStaticObjectMethod(cls, mids$[mid_getTerms_4d5aa19b], a0.this$, a1.this$));
        }

        ::java::util::Iterator MultiFields::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        jint MultiFields::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        ::org::apache::lucene::index::Terms MultiFields::terms(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_ee262ab4], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiFields_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiFields_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiFields_init_(t_MultiFields *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiFields_getFields(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiFields_getIndexedFields(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiFields_getLiveDocs(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiFields_getMergedFieldInfos(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiFields_getTermDocsEnum(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiFields_getTermPositionsEnum(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiFields_getTerms(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiFields_iterator(t_MultiFields *self, PyObject *args);
        static PyObject *t_MultiFields_size(t_MultiFields *self, PyObject *args);
        static PyObject *t_MultiFields_terms(t_MultiFields *self, PyObject *args);

        static PyMethodDef t_MultiFields__methods_[] = {
          DECLARE_METHOD(t_MultiFields, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, getFields, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, getIndexedFields, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, getLiveDocs, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, getMergedFieldInfos, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, getTermDocsEnum, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, getTermPositionsEnum, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, getTerms, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, iterator, METH_VARARGS),
          DECLARE_METHOD(t_MultiFields, size, METH_VARARGS),
          DECLARE_METHOD(t_MultiFields, terms, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiFields, t_MultiFields, ::org::apache::lucene::index::Fields, MultiFields, t_MultiFields_init_, ((PyObject *(*)(t_MultiFields *)) get_iterator< t_MultiFields >), 0, 0, 0, 0);

        void t_MultiFields::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiFields), module, "MultiFields", 0);
        }

        void t_MultiFields::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiFields).tp_dict, "class_", make_descriptor(MultiFields::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiFields).tp_dict, "wrapfn_", make_descriptor(t_MultiFields::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiFields).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiFields_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiFields::initializeClass, 1)))
            return NULL;
          return t_MultiFields::wrap_Object(MultiFields(((t_MultiFields *) arg)->object.this$));
        }
        static PyObject *t_MultiFields_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiFields::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiFields_init_(t_MultiFields *self, PyObject *args, PyObject *kwds)
        {
          JArray< ::org::apache::lucene::index::Fields > a0((jobject) NULL);
          JArray< ::org::apache::lucene::index::ReaderSlice > a1((jobject) NULL);
          MultiFields object((jobject) NULL);

          if (!parseArgs(args, "[k[k", ::org::apache::lucene::index::Fields::initializeClass, ::org::apache::lucene::index::ReaderSlice::initializeClass, &a0, &a1))
          {
            INT_CALL(object = MultiFields(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiFields_getFields(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getFields(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getFields", arg);
          return NULL;
        }

        static PyObject *t_MultiFields_getIndexedFields(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::util::Collection result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getIndexedFields(a0));
            return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          PyErr_SetArgsError(type, "getIndexedFields", arg);
          return NULL;
        }

        static PyObject *t_MultiFields_getLiveDocs(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getLiveDocs(a0));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getLiveDocs", arg);
          return NULL;
        }

        static PyObject *t_MultiFields_getMergedFieldInfos(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getMergedFieldInfos(a0));
            return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getMergedFieldInfos", arg);
          return NULL;
        }

        static PyObject *t_MultiFields_getTermDocsEnum(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 4:
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

              if (!parseArgs(args, "kksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getTermDocsEnum(a0, a1, a2, a3));
                return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
              }
            }
            break;
           case 5:
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              jint a4;
              ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

              if (!parseArgs(args, "kkskI", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getTermDocsEnum(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "getTermDocsEnum", args);
          return NULL;
        }

        static PyObject *t_MultiFields_getTermPositionsEnum(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 4:
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

              if (!parseArgs(args, "kksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getTermPositionsEnum(a0, a1, a2, a3));
                return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
              }
            }
            break;
           case 5:
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              jint a4;
              ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

              if (!parseArgs(args, "kkskI", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getTermPositionsEnum(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "getTermPositionsEnum", args);
          return NULL;
        }

        static PyObject *t_MultiFields_getTerms(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getTerms(a0, a1));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getTerms", args);
          return NULL;
        }

        static PyObject *t_MultiFields_iterator(t_MultiFields *self, PyObject *args)
        {
          ::java::util::Iterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::java::util::t_Iterator::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          return callSuper(&PY_TYPE(MultiFields), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_MultiFields_size(t_MultiFields *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.size());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiFields), (PyObject *) self, "size", args, 2);
        }

        static PyObject *t_MultiFields_terms(t_MultiFields *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.terms(a0));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiFields), (PyObject *) self, "terms", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/Lookup.h"
#include "java/io/OutputStream.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/util/Set.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/InputStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *Lookup::class$ = NULL;
          jmethodID *Lookup::mids$ = NULL;
          bool Lookup::live$ = false;
          ::java::util::Comparator *Lookup::CHARSEQUENCE_COMPARATOR = NULL;

          jclass Lookup::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/Lookup");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_build_1754a234] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
              mids$[mid_build_a0504881] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/spell/Dictionary;)V");
              mids$[mid_getCount_54c6a17a] = env->getMethodID(cls, "getCount", "()J");
              mids$[mid_load_f5d6a55d] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
              mids$[mid_load_be2e4f9c] = env->getMethodID(cls, "load", "(Ljava/io/InputStream;)Z");
              mids$[mid_lookup_8aa7b45d] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;ZI)Ljava/util/List;");
              mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
              mids$[mid_store_27875f5b] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");
              mids$[mid_store_82d865f4] = env->getMethodID(cls, "store", "(Ljava/io/OutputStream;)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              CHARSEQUENCE_COMPARATOR = new ::java::util::Comparator(env->getStaticObjectField(cls, "CHARSEQUENCE_COMPARATOR", "Ljava/util/Comparator;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lookup::Lookup() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void Lookup::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_build_1754a234], a0.this$);
          }

          void Lookup::build(const ::org::apache::lucene::search::spell::Dictionary & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_build_a0504881], a0.this$);
          }

          jlong Lookup::getCount() const
          {
            return env->callLongMethod(this$, mids$[mid_getCount_54c6a17a]);
          }

          jboolean Lookup::load(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_load_f5d6a55d], a0.this$);
          }

          jboolean Lookup::load(const ::java::io::InputStream & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_load_be2e4f9c], a0.this$);
          }

          ::java::util::List Lookup::lookup(const ::java::lang::CharSequence & a0, jboolean a1, jint a2) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_8aa7b45d], a0.this$, a1, a2));
          }

          ::java::util::List Lookup::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
          }

          jboolean Lookup::store(const ::org::apache::lucene::store::DataOutput & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_store_27875f5b], a0.this$);
          }

          jboolean Lookup::store(const ::java::io::OutputStream & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_store_82d865f4], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupPriorityQueue.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_Lookup_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lookup_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lookup_init_(t_Lookup *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lookup_build(t_Lookup *self, PyObject *args);
          static PyObject *t_Lookup_getCount(t_Lookup *self);
          static PyObject *t_Lookup_load(t_Lookup *self, PyObject *args);
          static PyObject *t_Lookup_lookup(t_Lookup *self, PyObject *args);
          static PyObject *t_Lookup_store(t_Lookup *self, PyObject *args);
          static PyObject *t_Lookup_get__count(t_Lookup *self, void *data);
          static PyGetSetDef t_Lookup__fields_[] = {
            DECLARE_GET_FIELD(t_Lookup, count),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lookup__methods_[] = {
            DECLARE_METHOD(t_Lookup, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lookup, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lookup, build, METH_VARARGS),
            DECLARE_METHOD(t_Lookup, getCount, METH_NOARGS),
            DECLARE_METHOD(t_Lookup, load, METH_VARARGS),
            DECLARE_METHOD(t_Lookup, lookup, METH_VARARGS),
            DECLARE_METHOD(t_Lookup, store, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lookup, t_Lookup, ::java::lang::Object, Lookup, t_Lookup_init_, 0, 0, t_Lookup__fields_, 0, 0);

          void t_Lookup::install(PyObject *module)
          {
            installType(&PY_TYPE(Lookup), module, "Lookup", 0);
            PyDict_SetItemString(PY_TYPE(Lookup).tp_dict, "LookupPriorityQueue", make_descriptor(&PY_TYPE(Lookup$LookupPriorityQueue)));
            PyDict_SetItemString(PY_TYPE(Lookup).tp_dict, "LookupResult", make_descriptor(&PY_TYPE(Lookup$LookupResult)));
          }

          void t_Lookup::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lookup).tp_dict, "class_", make_descriptor(Lookup::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lookup).tp_dict, "wrapfn_", make_descriptor(t_Lookup::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lookup).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lookup::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lookup).tp_dict, "CHARSEQUENCE_COMPARATOR", make_descriptor(::java::util::t_Comparator::wrap_Object(*Lookup::CHARSEQUENCE_COMPARATOR)));
          }

          static PyObject *t_Lookup_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lookup::initializeClass, 1)))
              return NULL;
            return t_Lookup::wrap_Object(Lookup(((t_Lookup *) arg)->object.this$));
          }
          static PyObject *t_Lookup_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lookup::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lookup_init_(t_Lookup *self, PyObject *args, PyObject *kwds)
          {
            Lookup object((jobject) NULL);

            INT_CALL(object = Lookup());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lookup_build(t_Lookup *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.build(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                ::org::apache::lucene::search::spell::Dictionary a0((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::spell::Dictionary::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.build(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "build", args);
            return NULL;
          }

          static PyObject *t_Lookup_getCount(t_Lookup *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Lookup_load(t_Lookup *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::store::DataInput a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.load(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                ::java::io::InputStream a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.load(a0));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "load", args);
            return NULL;
          }

          static PyObject *t_Lookup_lookup(t_Lookup *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jboolean a1;
                jint a2;
                ::java::util::List result((jobject) NULL);

                if (!parseArgs(args, "OZI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.lookup(a0, a1, a2));
                  return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                }
              }
              break;
             case 4:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::util::Set a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                jint a3;
                ::java::util::List result((jobject) NULL);

                if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                  return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "lookup", args);
            return NULL;
          }

          static PyObject *t_Lookup_store(t_Lookup *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.store(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                ::java::io::OutputStream a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::java::io::OutputStream::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.store(a0));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "store", args);
            return NULL;
          }

          static PyObject *t_Lookup_get__count(t_Lookup *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/std34/UAX29URLEmailTokenizerImpl34.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std34 {

            ::java::lang::Class *UAX29URLEmailTokenizerImpl34::class$ = NULL;
            jmethodID *UAX29URLEmailTokenizerImpl34::mids$ = NULL;
            bool UAX29URLEmailTokenizerImpl34::live$ = false;
            jint UAX29URLEmailTokenizerImpl34::EMAIL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::HANGUL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::HIRAGANA_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::IDEOGRAPHIC_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::KATAKANA_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::NUMERIC_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::URL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::WORD_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::YYEOF = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::YYINITIAL = (jint) 0;

            jclass UAX29URLEmailTokenizerImpl34::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/std34/UAX29URLEmailTokenizerImpl34");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
                mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
                mids$[mid_setBufferSize_39c7bd3c] = env->getMethodID(cls, "setBufferSize", "(I)V");
                mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
                mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                EMAIL_TYPE = env->getStaticIntField(cls, "EMAIL_TYPE");
                HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
                HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
                IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
                KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
                NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
                SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
                URL_TYPE = env->getStaticIntField(cls, "URL_TYPE");
                WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
                YYEOF = env->getStaticIntField(cls, "YYEOF");
                YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            UAX29URLEmailTokenizerImpl34::UAX29URLEmailTokenizerImpl34(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

            jint UAX29URLEmailTokenizerImpl34::getNextToken() const
            {
              return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
            }

            void UAX29URLEmailTokenizerImpl34::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
            }

            void UAX29URLEmailTokenizerImpl34::setBufferSize(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setBufferSize_39c7bd3c], a0);
            }

            void UAX29URLEmailTokenizerImpl34::yybegin(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
            }

            jint UAX29URLEmailTokenizerImpl34::yychar() const
            {
              return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
            }

            jchar UAX29URLEmailTokenizerImpl34::yycharat(jint a0) const
            {
              return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
            }

            void UAX29URLEmailTokenizerImpl34::yyclose() const
            {
              env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
            }

            jint UAX29URLEmailTokenizerImpl34::yylength() const
            {
              return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
            }

            void UAX29URLEmailTokenizerImpl34::yypushback(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
            }

            void UAX29URLEmailTokenizerImpl34::yyreset(const ::java::io::Reader & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
            }

            jint UAX29URLEmailTokenizerImpl34::yystate() const
            {
              return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
            }

            ::java::lang::String UAX29URLEmailTokenizerImpl34::yytext() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std34 {
            static PyObject *t_UAX29URLEmailTokenizerImpl34_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_instance_(PyTypeObject *type, PyObject *arg);
            static int t_UAX29URLEmailTokenizerImpl34_init_(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *args, PyObject *kwds);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_getNextToken(t_UAX29URLEmailTokenizerImpl34 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_getText(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_setBufferSize(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yybegin(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yychar(t_UAX29URLEmailTokenizerImpl34 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yycharat(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yyclose(t_UAX29URLEmailTokenizerImpl34 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yylength(t_UAX29URLEmailTokenizerImpl34 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yypushback(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yyreset(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yystate(t_UAX29URLEmailTokenizerImpl34 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yytext(t_UAX29URLEmailTokenizerImpl34 *self);
            static int t_UAX29URLEmailTokenizerImpl34_set__bufferSize(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg, void *data);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_get__nextToken(t_UAX29URLEmailTokenizerImpl34 *self, void *data);
            static PyGetSetDef t_UAX29URLEmailTokenizerImpl34__fields_[] = {
              DECLARE_SET_FIELD(t_UAX29URLEmailTokenizerImpl34, bufferSize),
              DECLARE_GET_FIELD(t_UAX29URLEmailTokenizerImpl34, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_UAX29URLEmailTokenizerImpl34__methods_[] = {
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, getText, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, setBufferSize, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yybegin, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yychar, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yycharat, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yyclose, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yylength, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yypushback, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yyreset, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yystate, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yytext, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(UAX29URLEmailTokenizerImpl34, t_UAX29URLEmailTokenizerImpl34, ::java::lang::Object, UAX29URLEmailTokenizerImpl34, t_UAX29URLEmailTokenizerImpl34_init_, 0, 0, t_UAX29URLEmailTokenizerImpl34__fields_, 0, 0);

            void t_UAX29URLEmailTokenizerImpl34::install(PyObject *module)
            {
              installType(&PY_TYPE(UAX29URLEmailTokenizerImpl34), module, "UAX29URLEmailTokenizerImpl34", 0);
            }

            void t_UAX29URLEmailTokenizerImpl34::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "class_", make_descriptor(UAX29URLEmailTokenizerImpl34::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "wrapfn_", make_descriptor(t_UAX29URLEmailTokenizerImpl34::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(UAX29URLEmailTokenizerImpl34::initializeClass);
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "EMAIL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::EMAIL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "HANGUL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::HANGUL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "HIRAGANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::HIRAGANA_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::IDEOGRAPHIC_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "KATAKANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::KATAKANA_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "NUMERIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::NUMERIC_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::SOUTH_EAST_ASIAN_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "URL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::URL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "WORD_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::WORD_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "YYEOF", make_descriptor(UAX29URLEmailTokenizerImpl34::YYEOF));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "YYINITIAL", make_descriptor(UAX29URLEmailTokenizerImpl34::YYINITIAL));
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, UAX29URLEmailTokenizerImpl34::initializeClass, 1)))
                return NULL;
              return t_UAX29URLEmailTokenizerImpl34::wrap_Object(UAX29URLEmailTokenizerImpl34(((t_UAX29URLEmailTokenizerImpl34 *) arg)->object.this$));
            }
            static PyObject *t_UAX29URLEmailTokenizerImpl34_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, UAX29URLEmailTokenizerImpl34::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_UAX29URLEmailTokenizerImpl34_init_(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::Reader a0((jobject) NULL);
              UAX29URLEmailTokenizerImpl34 object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                INT_CALL(object = UAX29URLEmailTokenizerImpl34(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_getNextToken(t_UAX29URLEmailTokenizerImpl34 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNextToken());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_getText(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
              {
                OBJ_CALL(self->object.getText(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "getText", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_setBufferSize(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setBufferSize(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setBufferSize", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yybegin(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yybegin(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yychar(t_UAX29URLEmailTokenizerImpl34 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yychar());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yycharat(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg)
            {
              jint a0;
              jchar result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.yycharat(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yyclose(t_UAX29URLEmailTokenizerImpl34 *self)
            {
              OBJ_CALL(self->object.yyclose());
              Py_RETURN_NONE;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yylength(t_UAX29URLEmailTokenizerImpl34 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yylength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yypushback(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yypushback(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yyreset(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg)
            {
              ::java::io::Reader a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
              {
                OBJ_CALL(self->object.yyreset(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yystate(t_UAX29URLEmailTokenizerImpl34 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yystate());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yytext(t_UAX29URLEmailTokenizerImpl34 *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.yytext());
              return j2p(result);
            }

            static int t_UAX29URLEmailTokenizerImpl34_set__bufferSize(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setBufferSize(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "bufferSize", arg);
              return -1;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_get__nextToken(t_UAX29URLEmailTokenizerImpl34 *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNextToken());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/QueryTermScorer.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/search/highlight/TextFragment.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/highlight/Scorer.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/highlight/WeightedTerm.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *QueryTermScorer::class$ = NULL;
          jmethodID *QueryTermScorer::mids$ = NULL;
          bool QueryTermScorer::live$ = false;

          jclass QueryTermScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/QueryTermScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0bdf9712] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/highlight/WeightedTerm;)V");
              mids$[mid_init$_6e301113] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;)V");
              mids$[mid_init$_036dd355] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Ljava/lang/String;)V");
              mids$[mid_init$_2e1f8bd4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)V");
              mids$[mid_allFragmentsProcessed_54c6a166] = env->getMethodID(cls, "allFragmentsProcessed", "()V");
              mids$[mid_getFragmentScore_54c6a176] = env->getMethodID(cls, "getFragmentScore", "()F");
              mids$[mid_getMaxTermWeight_54c6a176] = env->getMethodID(cls, "getMaxTermWeight", "()F");
              mids$[mid_getTokenScore_54c6a176] = env->getMethodID(cls, "getTokenScore", "()F");
              mids$[mid_init_a65cd6ab] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_startFragment_0335a78a] = env->getMethodID(cls, "startFragment", "(Lorg/apache/lucene/search/highlight/TextFragment;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryTermScorer::QueryTermScorer(const JArray< ::org::apache::lucene::search::highlight::WeightedTerm > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0bdf9712, a0.this$)) {}

          QueryTermScorer::QueryTermScorer(const ::org::apache::lucene::search::Query & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6e301113, a0.this$)) {}

          QueryTermScorer::QueryTermScorer(const ::org::apache::lucene::search::Query & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_036dd355, a0.this$, a1.this$)) {}

          QueryTermScorer::QueryTermScorer(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::index::IndexReader & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2e1f8bd4, a0.this$, a1.this$, a2.this$)) {}

          void QueryTermScorer::allFragmentsProcessed() const
          {
            env->callVoidMethod(this$, mids$[mid_allFragmentsProcessed_54c6a166]);
          }

          jfloat QueryTermScorer::getFragmentScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getFragmentScore_54c6a176]);
          }

          jfloat QueryTermScorer::getMaxTermWeight() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMaxTermWeight_54c6a176]);
          }

          jfloat QueryTermScorer::getTokenScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getTokenScore_54c6a176]);
          }

          ::org::apache::lucene::analysis::TokenStream QueryTermScorer::init(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_init_a65cd6ab], a0.this$));
          }

          void QueryTermScorer::startFragment(const ::org::apache::lucene::search::highlight::TextFragment & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_startFragment_0335a78a], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_QueryTermScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryTermScorer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryTermScorer_init_(t_QueryTermScorer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryTermScorer_allFragmentsProcessed(t_QueryTermScorer *self);
          static PyObject *t_QueryTermScorer_getFragmentScore(t_QueryTermScorer *self);
          static PyObject *t_QueryTermScorer_getMaxTermWeight(t_QueryTermScorer *self);
          static PyObject *t_QueryTermScorer_getTokenScore(t_QueryTermScorer *self);
          static PyObject *t_QueryTermScorer_init(t_QueryTermScorer *self, PyObject *arg);
          static PyObject *t_QueryTermScorer_startFragment(t_QueryTermScorer *self, PyObject *arg);
          static PyObject *t_QueryTermScorer_get__fragmentScore(t_QueryTermScorer *self, void *data);
          static PyObject *t_QueryTermScorer_get__maxTermWeight(t_QueryTermScorer *self, void *data);
          static PyObject *t_QueryTermScorer_get__tokenScore(t_QueryTermScorer *self, void *data);
          static PyGetSetDef t_QueryTermScorer__fields_[] = {
            DECLARE_GET_FIELD(t_QueryTermScorer, fragmentScore),
            DECLARE_GET_FIELD(t_QueryTermScorer, maxTermWeight),
            DECLARE_GET_FIELD(t_QueryTermScorer, tokenScore),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryTermScorer__methods_[] = {
            DECLARE_METHOD(t_QueryTermScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryTermScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryTermScorer, allFragmentsProcessed, METH_NOARGS),
            DECLARE_METHOD(t_QueryTermScorer, getFragmentScore, METH_NOARGS),
            DECLARE_METHOD(t_QueryTermScorer, getMaxTermWeight, METH_NOARGS),
            DECLARE_METHOD(t_QueryTermScorer, getTokenScore, METH_NOARGS),
            DECLARE_METHOD(t_QueryTermScorer, init, METH_O),
            DECLARE_METHOD(t_QueryTermScorer, startFragment, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryTermScorer, t_QueryTermScorer, ::java::lang::Object, QueryTermScorer, t_QueryTermScorer_init_, 0, 0, t_QueryTermScorer__fields_, 0, 0);

          void t_QueryTermScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryTermScorer), module, "QueryTermScorer", 0);
          }

          void t_QueryTermScorer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryTermScorer).tp_dict, "class_", make_descriptor(QueryTermScorer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryTermScorer).tp_dict, "wrapfn_", make_descriptor(t_QueryTermScorer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryTermScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryTermScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryTermScorer::initializeClass, 1)))
              return NULL;
            return t_QueryTermScorer::wrap_Object(QueryTermScorer(((t_QueryTermScorer *) arg)->object.this$));
          }
          static PyObject *t_QueryTermScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryTermScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryTermScorer_init_(t_QueryTermScorer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< ::org::apache::lucene::search::highlight::WeightedTerm > a0((jobject) NULL);
                QueryTermScorer object((jobject) NULL);

                if (!parseArgs(args, "[k", ::org::apache::lucene::search::highlight::WeightedTerm::initializeClass, &a0))
                {
                  INT_CALL(object = QueryTermScorer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                QueryTermScorer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
                {
                  INT_CALL(object = QueryTermScorer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                QueryTermScorer object((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = QueryTermScorer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                QueryTermScorer object((jobject) NULL);

                if (!parseArgs(args, "kks", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = QueryTermScorer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_QueryTermScorer_allFragmentsProcessed(t_QueryTermScorer *self)
          {
            OBJ_CALL(self->object.allFragmentsProcessed());
            Py_RETURN_NONE;
          }

          static PyObject *t_QueryTermScorer_getFragmentScore(t_QueryTermScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getFragmentScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryTermScorer_getMaxTermWeight(t_QueryTermScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMaxTermWeight());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryTermScorer_getTokenScore(t_QueryTermScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getTokenScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryTermScorer_init(t_QueryTermScorer *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.init(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "init", arg);
            return NULL;
          }

          static PyObject *t_QueryTermScorer_startFragment(t_QueryTermScorer *self, PyObject *arg)
          {
            ::org::apache::lucene::search::highlight::TextFragment a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::TextFragment::initializeClass, &a0))
            {
              OBJ_CALL(self->object.startFragment(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "startFragment", arg);
            return NULL;
          }

          static PyObject *t_QueryTermScorer_get__fragmentScore(t_QueryTermScorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getFragmentScore());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_QueryTermScorer_get__maxTermWeight(t_QueryTermScorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMaxTermWeight());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_QueryTermScorer_get__tokenScore(t_QueryTermScorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getTokenScore());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/in/IndicNormalizer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {

          ::java::lang::Class *IndicNormalizer::class$ = NULL;
          jmethodID *IndicNormalizer::mids$ = NULL;
          bool IndicNormalizer::live$ = false;

          jclass IndicNormalizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/in/IndicNormalizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normalize_ec6430eb] = env->getMethodID(cls, "normalize", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndicNormalizer::IndicNormalizer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint IndicNormalizer::normalize(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_normalize_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {
          static PyObject *t_IndicNormalizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndicNormalizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndicNormalizer_init_(t_IndicNormalizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndicNormalizer_normalize(t_IndicNormalizer *self, PyObject *args);

          static PyMethodDef t_IndicNormalizer__methods_[] = {
            DECLARE_METHOD(t_IndicNormalizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicNormalizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicNormalizer, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IndicNormalizer, t_IndicNormalizer, ::java::lang::Object, IndicNormalizer, t_IndicNormalizer_init_, 0, 0, 0, 0, 0);

          void t_IndicNormalizer::install(PyObject *module)
          {
            installType(&PY_TYPE(IndicNormalizer), module, "IndicNormalizer", 0);
          }

          void t_IndicNormalizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IndicNormalizer).tp_dict, "class_", make_descriptor(IndicNormalizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IndicNormalizer).tp_dict, "wrapfn_", make_descriptor(t_IndicNormalizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IndicNormalizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndicNormalizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndicNormalizer::initializeClass, 1)))
              return NULL;
            return t_IndicNormalizer::wrap_Object(IndicNormalizer(((t_IndicNormalizer *) arg)->object.this$));
          }
          static PyObject *t_IndicNormalizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndicNormalizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndicNormalizer_init_(t_IndicNormalizer *self, PyObject *args, PyObject *kwds)
          {
            IndicNormalizer object((jobject) NULL);

            INT_CALL(object = IndicNormalizer());
            self->object = object;

            return 0;
          }

          static PyObject *t_IndicNormalizer_normalize(t_IndicNormalizer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.normalize(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "normalize", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *QueryBuilder::class$ = NULL;
          jmethodID *QueryBuilder::mids$ = NULL;
          bool QueryBuilder::live$ = false;

          jclass QueryBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/QueryBuilder");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_QueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryBuilder_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_QueryBuilder__methods_[] = {
            DECLARE_METHOD(t_QueryBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryBuilder, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryBuilder, t_QueryBuilder, ::java::lang::Object, QueryBuilder, abstract_init, 0, 0, 0, 0, 0);

          void t_QueryBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryBuilder), module, "QueryBuilder", 0);
          }

          void t_QueryBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "class_", make_descriptor(QueryBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_QueryBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryBuilder::initializeClass, 1)))
              return NULL;
            return t_QueryBuilder::wrap_Object(QueryBuilder(((t_QueryBuilder *) arg)->object.this$));
          }
          static PyObject *t_QueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/collation/CollationKeyFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {

        ::java::lang::Class *CollationKeyFilterFactory::class$ = NULL;
        jmethodID *CollationKeyFilterFactory::mids$ = NULL;
        bool CollationKeyFilterFactory::live$ = false;

        jclass CollationKeyFilterFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/collation/CollationKeyFilterFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
            mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
            mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");
            mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CollationKeyFilterFactory::CollationKeyFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

        ::org::apache::lucene::analysis::TokenStream CollationKeyFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
        }

        ::org::apache::lucene::analysis::util::AbstractAnalysisFactory CollationKeyFilterFactory::getMultiTermComponent() const
        {
          return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
        }

        void CollationKeyFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {
        static PyObject *t_CollationKeyFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollationKeyFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CollationKeyFilterFactory_init_(t_CollationKeyFilterFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CollationKeyFilterFactory_create(t_CollationKeyFilterFactory *self, PyObject *args);
        static PyObject *t_CollationKeyFilterFactory_getMultiTermComponent(t_CollationKeyFilterFactory *self);
        static PyObject *t_CollationKeyFilterFactory_inform(t_CollationKeyFilterFactory *self, PyObject *arg);
        static PyObject *t_CollationKeyFilterFactory_get__multiTermComponent(t_CollationKeyFilterFactory *self, void *data);
        static PyGetSetDef t_CollationKeyFilterFactory__fields_[] = {
          DECLARE_GET_FIELD(t_CollationKeyFilterFactory, multiTermComponent),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CollationKeyFilterFactory__methods_[] = {
          DECLARE_METHOD(t_CollationKeyFilterFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollationKeyFilterFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollationKeyFilterFactory, create, METH_VARARGS),
          DECLARE_METHOD(t_CollationKeyFilterFactory, getMultiTermComponent, METH_NOARGS),
          DECLARE_METHOD(t_CollationKeyFilterFactory, inform, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CollationKeyFilterFactory, t_CollationKeyFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, CollationKeyFilterFactory, t_CollationKeyFilterFactory_init_, 0, 0, t_CollationKeyFilterFactory__fields_, 0, 0);

        void t_CollationKeyFilterFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(CollationKeyFilterFactory), module, "CollationKeyFilterFactory", 0);
        }

        void t_CollationKeyFilterFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CollationKeyFilterFactory).tp_dict, "class_", make_descriptor(CollationKeyFilterFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CollationKeyFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CollationKeyFilterFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CollationKeyFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollationKeyFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollationKeyFilterFactory::initializeClass, 1)))
            return NULL;
          return t_CollationKeyFilterFactory::wrap_Object(CollationKeyFilterFactory(((t_CollationKeyFilterFactory *) arg)->object.this$));
        }
        static PyObject *t_CollationKeyFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollationKeyFilterFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CollationKeyFilterFactory_init_(t_CollationKeyFilterFactory *self, PyObject *args, PyObject *kwds)
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;
          CollationKeyFilterFactory object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            INT_CALL(object = CollationKeyFilterFactory(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CollationKeyFilterFactory_create(t_CollationKeyFilterFactory *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
          ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.create(a0));
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CollationKeyFilterFactory), (PyObject *) self, "create", args, 2);
        }

        static PyObject *t_CollationKeyFilterFactory_getMultiTermComponent(t_CollationKeyFilterFactory *self)
        {
          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
          OBJ_CALL(result = self->object.getMultiTermComponent());
          return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
        }

        static PyObject *t_CollationKeyFilterFactory_inform(t_CollationKeyFilterFactory *self, PyObject *arg)
        {
          ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.inform(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "inform", arg);
          return NULL;
        }

        static PyObject *t_CollationKeyFilterFactory_get__multiTermComponent(t_CollationKeyFilterFactory *self, void *data)
        {
          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
          OBJ_CALL(value = self->object.getMultiTermComponent());
          return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SrndQuery::class$ = NULL;
            jmethodID *SrndQuery::mids$ = NULL;
            bool SrndQuery::live$ = false;
            ::org::apache::lucene::search::Query *SrndQuery::theEmptyLcnQuery = NULL;

            jclass SrndQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SrndQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_clone_26528772] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getWeight_54c6a176] = env->getMethodID(cls, "getWeight", "()F");
                mids$[mid_getWeightOperator_14c7b5c5] = env->getMethodID(cls, "getWeightOperator", "()Ljava/lang/String;");
                mids$[mid_getWeightString_14c7b5c5] = env->getMethodID(cls, "getWeightString", "()Ljava/lang/String;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_isFieldsSubQueryAcceptable_54c6a16a] = env->getMethodID(cls, "isFieldsSubQueryAcceptable", "()Z");
                mids$[mid_isWeighted_54c6a16a] = env->getMethodID(cls, "isWeighted", "()Z");
                mids$[mid_makeLuceneQueryField_1aaeee30] = env->getMethodID(cls, "makeLuceneQueryField", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_setWeight_06298cab] = env->getMethodID(cls, "setWeight", "(F)V");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_weightToString_9f94ae34] = env->getMethodID(cls, "weightToString", "(Ljava/lang/StringBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                theEmptyLcnQuery = new ::org::apache::lucene::search::Query(env->getStaticObjectField(cls, "theEmptyLcnQuery", "Lorg/apache/lucene/search/Query;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SrndQuery::SrndQuery() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            SrndQuery SrndQuery::clone() const
            {
              return SrndQuery(env->callObjectMethod(this$, mids$[mid_clone_26528772]));
            }

            jboolean SrndQuery::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jfloat SrndQuery::getWeight() const
            {
              return env->callFloatMethod(this$, mids$[mid_getWeight_54c6a176]);
            }

            ::java::lang::String SrndQuery::getWeightOperator() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getWeightOperator_14c7b5c5]));
            }

            ::java::lang::String SrndQuery::getWeightString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getWeightString_14c7b5c5]));
            }

            jint SrndQuery::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            jboolean SrndQuery::isFieldsSubQueryAcceptable() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isFieldsSubQueryAcceptable_54c6a16a]);
            }

            jboolean SrndQuery::isWeighted() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isWeighted_54c6a16a]);
            }

            ::org::apache::lucene::search::Query SrndQuery::makeLuceneQueryField(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryField_1aaeee30], a0.this$, a1.this$));
            }

            ::org::apache::lucene::search::Query SrndQuery::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30], a0.this$, a1.this$));
            }

            void SrndQuery::setWeight(jfloat a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setWeight_06298cab], a0);
            }

            ::java::lang::String SrndQuery::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SrndQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SrndQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SrndQuery_init_(t_SrndQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SrndQuery_clone(t_SrndQuery *self);
            static PyObject *t_SrndQuery_equals(t_SrndQuery *self, PyObject *args);
            static PyObject *t_SrndQuery_getWeight(t_SrndQuery *self);
            static PyObject *t_SrndQuery_getWeightOperator(t_SrndQuery *self);
            static PyObject *t_SrndQuery_getWeightString(t_SrndQuery *self);
            static PyObject *t_SrndQuery_hashCode(t_SrndQuery *self, PyObject *args);
            static PyObject *t_SrndQuery_isFieldsSubQueryAcceptable(t_SrndQuery *self);
            static PyObject *t_SrndQuery_isWeighted(t_SrndQuery *self);
            static PyObject *t_SrndQuery_makeLuceneQueryField(t_SrndQuery *self, PyObject *args);
            static PyObject *t_SrndQuery_makeLuceneQueryFieldNoBoost(t_SrndQuery *self, PyObject *args);
            static PyObject *t_SrndQuery_setWeight(t_SrndQuery *self, PyObject *arg);
            static PyObject *t_SrndQuery_toString(t_SrndQuery *self, PyObject *args);
            static PyObject *t_SrndQuery_get__fieldsSubQueryAcceptable(t_SrndQuery *self, void *data);
            static PyObject *t_SrndQuery_get__weight(t_SrndQuery *self, void *data);
            static int t_SrndQuery_set__weight(t_SrndQuery *self, PyObject *arg, void *data);
            static PyObject *t_SrndQuery_get__weightOperator(t_SrndQuery *self, void *data);
            static PyObject *t_SrndQuery_get__weightString(t_SrndQuery *self, void *data);
            static PyObject *t_SrndQuery_get__weighted(t_SrndQuery *self, void *data);
            static PyGetSetDef t_SrndQuery__fields_[] = {
              DECLARE_GET_FIELD(t_SrndQuery, fieldsSubQueryAcceptable),
              DECLARE_GETSET_FIELD(t_SrndQuery, weight),
              DECLARE_GET_FIELD(t_SrndQuery, weightOperator),
              DECLARE_GET_FIELD(t_SrndQuery, weightString),
              DECLARE_GET_FIELD(t_SrndQuery, weighted),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_SrndQuery__methods_[] = {
              DECLARE_METHOD(t_SrndQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndQuery, clone, METH_NOARGS),
              DECLARE_METHOD(t_SrndQuery, equals, METH_VARARGS),
              DECLARE_METHOD(t_SrndQuery, getWeight, METH_NOARGS),
              DECLARE_METHOD(t_SrndQuery, getWeightOperator, METH_NOARGS),
              DECLARE_METHOD(t_SrndQuery, getWeightString, METH_NOARGS),
              DECLARE_METHOD(t_SrndQuery, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_SrndQuery, isFieldsSubQueryAcceptable, METH_NOARGS),
              DECLARE_METHOD(t_SrndQuery, isWeighted, METH_NOARGS),
              DECLARE_METHOD(t_SrndQuery, makeLuceneQueryField, METH_VARARGS),
              DECLARE_METHOD(t_SrndQuery, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              DECLARE_METHOD(t_SrndQuery, setWeight, METH_O),
              DECLARE_METHOD(t_SrndQuery, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SrndQuery, t_SrndQuery, ::java::lang::Object, SrndQuery, t_SrndQuery_init_, 0, 0, t_SrndQuery__fields_, 0, 0);

            void t_SrndQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(SrndQuery), module, "SrndQuery", 0);
            }

            void t_SrndQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SrndQuery).tp_dict, "class_", make_descriptor(SrndQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SrndQuery).tp_dict, "wrapfn_", make_descriptor(t_SrndQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SrndQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(SrndQuery::initializeClass);
              PyDict_SetItemString(PY_TYPE(SrndQuery).tp_dict, "theEmptyLcnQuery", make_descriptor(::org::apache::lucene::search::t_Query::wrap_Object(*SrndQuery::theEmptyLcnQuery)));
            }

            static PyObject *t_SrndQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SrndQuery::initializeClass, 1)))
                return NULL;
              return t_SrndQuery::wrap_Object(SrndQuery(((t_SrndQuery *) arg)->object.this$));
            }
            static PyObject *t_SrndQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SrndQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SrndQuery_init_(t_SrndQuery *self, PyObject *args, PyObject *kwds)
            {
              SrndQuery object((jobject) NULL);

              INT_CALL(object = SrndQuery());
              self->object = object;

              return 0;
            }

            static PyObject *t_SrndQuery_clone(t_SrndQuery *self)
            {
              SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.clone());
              return t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_SrndQuery_equals(t_SrndQuery *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(SrndQuery), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_SrndQuery_getWeight(t_SrndQuery *self)
            {
              jfloat result;
              OBJ_CALL(result = self->object.getWeight());
              return PyFloat_FromDouble((double) result);
            }

            static PyObject *t_SrndQuery_getWeightOperator(t_SrndQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getWeightOperator());
              return j2p(result);
            }

            static PyObject *t_SrndQuery_getWeightString(t_SrndQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getWeightString());
              return j2p(result);
            }

            static PyObject *t_SrndQuery_hashCode(t_SrndQuery *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(SrndQuery), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_SrndQuery_isFieldsSubQueryAcceptable(t_SrndQuery *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.isFieldsSubQueryAcceptable());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_SrndQuery_isWeighted(t_SrndQuery *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.isWeighted());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_SrndQuery_makeLuceneQueryField(t_SrndQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryField(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "makeLuceneQueryField", args);
              return NULL;
            }

            static PyObject *t_SrndQuery_makeLuceneQueryFieldNoBoost(t_SrndQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "makeLuceneQueryFieldNoBoost", args);
              return NULL;
            }

            static PyObject *t_SrndQuery_setWeight(t_SrndQuery *self, PyObject *arg)
            {
              jfloat a0;

              if (!parseArg(arg, "F", &a0))
              {
                OBJ_CALL(self->object.setWeight(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setWeight", arg);
              return NULL;
            }

            static PyObject *t_SrndQuery_toString(t_SrndQuery *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(SrndQuery), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_SrndQuery_get__fieldsSubQueryAcceptable(t_SrndQuery *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isFieldsSubQueryAcceptable());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_SrndQuery_get__weight(t_SrndQuery *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getWeight());
              return PyFloat_FromDouble((double) value);
            }
            static int t_SrndQuery_set__weight(t_SrndQuery *self, PyObject *arg, void *data)
            {
              {
                jfloat value;
                if (!parseArg(arg, "F", &value))
                {
                  INT_CALL(self->object.setWeight(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "weight", arg);
              return -1;
            }

            static PyObject *t_SrndQuery_get__weightOperator(t_SrndQuery *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getWeightOperator());
              return j2p(value);
            }

            static PyObject *t_SrndQuery_get__weightString(t_SrndQuery *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getWeightString());
              return j2p(value);
            }

            static PyObject *t_SrndQuery_get__weighted(t_SrndQuery *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isWeighted());
              Py_RETURN_BOOL(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/stempel/StempelFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/stempel/StempelStemmer.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace stempel {

          ::java::lang::Class *StempelFilter::class$ = NULL;
          jmethodID *StempelFilter::mids$ = NULL;
          bool StempelFilter::live$ = false;
          jint StempelFilter::DEFAULT_MIN_LENGTH = (jint) 0;

          jclass StempelFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/stempel/StempelFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_2cfd7ca0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/stempel/StempelStemmer;)V");
              mids$[mid_init$_0fe419aa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/stempel/StempelStemmer;I)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MIN_LENGTH = env->getStaticIntField(cls, "DEFAULT_MIN_LENGTH");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StempelFilter::StempelFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::stempel::StempelStemmer & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_2cfd7ca0, a0.this$, a1.this$)) {}

          StempelFilter::StempelFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::stempel::StempelStemmer & a1, jint a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_0fe419aa, a0.this$, a1.this$, a2)) {}

          jboolean StempelFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace stempel {
          static PyObject *t_StempelFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StempelFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StempelFilter_init_(t_StempelFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StempelFilter_incrementToken(t_StempelFilter *self, PyObject *args);

          static PyMethodDef t_StempelFilter__methods_[] = {
            DECLARE_METHOD(t_StempelFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StempelFilter, t_StempelFilter, ::org::apache::lucene::analysis::TokenFilter, StempelFilter, t_StempelFilter_init_, 0, 0, 0, 0, 0);

          void t_StempelFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(StempelFilter), module, "StempelFilter", 0);
          }

          void t_StempelFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StempelFilter).tp_dict, "class_", make_descriptor(StempelFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StempelFilter).tp_dict, "wrapfn_", make_descriptor(t_StempelFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StempelFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(StempelFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(StempelFilter).tp_dict, "DEFAULT_MIN_LENGTH", make_descriptor(StempelFilter::DEFAULT_MIN_LENGTH));
          }

          static PyObject *t_StempelFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StempelFilter::initializeClass, 1)))
              return NULL;
            return t_StempelFilter::wrap_Object(StempelFilter(((t_StempelFilter *) arg)->object.this$));
          }
          static PyObject *t_StempelFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StempelFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StempelFilter_init_(t_StempelFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::stempel::StempelStemmer a1((jobject) NULL);
                StempelFilter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::stempel::StempelStemmer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = StempelFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::stempel::StempelStemmer a1((jobject) NULL);
                jint a2;
                StempelFilter object((jobject) NULL);

                if (!parseArgs(args, "kkI", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::stempel::StempelStemmer::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = StempelFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StempelFilter_incrementToken(t_StempelFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(StempelFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/LogDocMergePolicy.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *LogDocMergePolicy::class$ = NULL;
        jmethodID *LogDocMergePolicy::mids$ = NULL;
        bool LogDocMergePolicy::live$ = false;
        jint LogDocMergePolicy::DEFAULT_MIN_MERGE_DOCS = (jint) 0;

        jclass LogDocMergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/LogDocMergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getMinMergeDocs_54c6a179] = env->getMethodID(cls, "getMinMergeDocs", "()I");
            mids$[mid_setMinMergeDocs_39c7bd3c] = env->getMethodID(cls, "setMinMergeDocs", "(I)V");
            mids$[mid_size_5454cb07] = env->getMethodID(cls, "size", "(Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_MIN_MERGE_DOCS = env->getStaticIntField(cls, "DEFAULT_MIN_MERGE_DOCS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LogDocMergePolicy::LogDocMergePolicy() : ::org::apache::lucene::index::LogMergePolicy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jint LogDocMergePolicy::getMinMergeDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_getMinMergeDocs_54c6a179]);
        }

        void LogDocMergePolicy::setMinMergeDocs(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMinMergeDocs_39c7bd3c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_LogDocMergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LogDocMergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LogDocMergePolicy_init_(t_LogDocMergePolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LogDocMergePolicy_getMinMergeDocs(t_LogDocMergePolicy *self);
        static PyObject *t_LogDocMergePolicy_setMinMergeDocs(t_LogDocMergePolicy *self, PyObject *arg);
        static PyObject *t_LogDocMergePolicy_get__minMergeDocs(t_LogDocMergePolicy *self, void *data);
        static int t_LogDocMergePolicy_set__minMergeDocs(t_LogDocMergePolicy *self, PyObject *arg, void *data);
        static PyGetSetDef t_LogDocMergePolicy__fields_[] = {
          DECLARE_GETSET_FIELD(t_LogDocMergePolicy, minMergeDocs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LogDocMergePolicy__methods_[] = {
          DECLARE_METHOD(t_LogDocMergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LogDocMergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LogDocMergePolicy, getMinMergeDocs, METH_NOARGS),
          DECLARE_METHOD(t_LogDocMergePolicy, setMinMergeDocs, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LogDocMergePolicy, t_LogDocMergePolicy, ::org::apache::lucene::index::LogMergePolicy, LogDocMergePolicy, t_LogDocMergePolicy_init_, 0, 0, t_LogDocMergePolicy__fields_, 0, 0);

        void t_LogDocMergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(LogDocMergePolicy), module, "LogDocMergePolicy", 0);
        }

        void t_LogDocMergePolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LogDocMergePolicy).tp_dict, "class_", make_descriptor(LogDocMergePolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LogDocMergePolicy).tp_dict, "wrapfn_", make_descriptor(t_LogDocMergePolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LogDocMergePolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(LogDocMergePolicy::initializeClass);
          PyDict_SetItemString(PY_TYPE(LogDocMergePolicy).tp_dict, "DEFAULT_MIN_MERGE_DOCS", make_descriptor(LogDocMergePolicy::DEFAULT_MIN_MERGE_DOCS));
        }

        static PyObject *t_LogDocMergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LogDocMergePolicy::initializeClass, 1)))
            return NULL;
          return t_LogDocMergePolicy::wrap_Object(LogDocMergePolicy(((t_LogDocMergePolicy *) arg)->object.this$));
        }
        static PyObject *t_LogDocMergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LogDocMergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LogDocMergePolicy_init_(t_LogDocMergePolicy *self, PyObject *args, PyObject *kwds)
        {
          LogDocMergePolicy object((jobject) NULL);

          INT_CALL(object = LogDocMergePolicy());
          self->object = object;

          return 0;
        }

        static PyObject *t_LogDocMergePolicy_getMinMergeDocs(t_LogDocMergePolicy *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMinMergeDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LogDocMergePolicy_setMinMergeDocs(t_LogDocMergePolicy *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setMinMergeDocs(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMinMergeDocs", arg);
          return NULL;
        }

        static PyObject *t_LogDocMergePolicy_get__minMergeDocs(t_LogDocMergePolicy *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMinMergeDocs());
          return PyInt_FromLong((long) value);
        }
        static int t_LogDocMergePolicy_set__minMergeDocs(t_LogDocMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMinMergeDocs(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "minMergeDocs", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector$SearchGroupDocs.h"
#include "org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector.h"
#include "org/apache/lucene/search/TopDocsCollector.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractSecondPassGroupingCollector$SearchGroupDocs::class$ = NULL;
          jmethodID *AbstractSecondPassGroupingCollector$SearchGroupDocs::mids$ = NULL;
          jfieldID *AbstractSecondPassGroupingCollector$SearchGroupDocs::fids$ = NULL;
          bool AbstractSecondPassGroupingCollector$SearchGroupDocs::live$ = false;

          jclass AbstractSecondPassGroupingCollector$SearchGroupDocs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector$SearchGroupDocs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b73e617c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector;Ljava/lang/Object;Lorg/apache/lucene/search/TopDocsCollector;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_collector] = env->getFieldID(cls, "collector", "Lorg/apache/lucene/search/TopDocsCollector;");
              fids$[fid_groupValue] = env->getFieldID(cls, "groupValue", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractSecondPassGroupingCollector$SearchGroupDocs::AbstractSecondPassGroupingCollector$SearchGroupDocs(const ::org::apache::lucene::search::grouping::AbstractSecondPassGroupingCollector & a0, const ::java::lang::Object & a1, const ::org::apache::lucene::search::TopDocsCollector & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b73e617c, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::search::TopDocsCollector AbstractSecondPassGroupingCollector$SearchGroupDocs::_get_collector() const
          {
            return ::org::apache::lucene::search::TopDocsCollector(env->getObjectField(this$, fids$[fid_collector]));
          }

          ::java::lang::Object AbstractSecondPassGroupingCollector$SearchGroupDocs::_get_groupValue() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_groupValue]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_of_(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, PyObject *args);
          static int t_AbstractSecondPassGroupingCollector$SearchGroupDocs_init_(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_get__collector(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, void *data);
          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_get__groupValue(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, void *data);

          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_get__parameters_(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, void *data);
          static PyGetSetDef t_AbstractSecondPassGroupingCollector$SearchGroupDocs__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractSecondPassGroupingCollector$SearchGroupDocs, collector),
            DECLARE_GET_FIELD(t_AbstractSecondPassGroupingCollector$SearchGroupDocs, groupValue),
            DECLARE_GET_FIELD(t_AbstractSecondPassGroupingCollector$SearchGroupDocs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractSecondPassGroupingCollector$SearchGroupDocs__methods_[] = {
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector$SearchGroupDocs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector$SearchGroupDocs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector$SearchGroupDocs, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractSecondPassGroupingCollector$SearchGroupDocs, t_AbstractSecondPassGroupingCollector$SearchGroupDocs, ::java::lang::Object, AbstractSecondPassGroupingCollector$SearchGroupDocs, t_AbstractSecondPassGroupingCollector$SearchGroupDocs_init_, 0, 0, t_AbstractSecondPassGroupingCollector$SearchGroupDocs__fields_, 0, 0);
          PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs::wrap_Object(const AbstractSecondPassGroupingCollector$SearchGroupDocs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractSecondPassGroupingCollector$SearchGroupDocs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self = (t_AbstractSecondPassGroupingCollector$SearchGroupDocs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractSecondPassGroupingCollector$SearchGroupDocs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self = (t_AbstractSecondPassGroupingCollector$SearchGroupDocs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractSecondPassGroupingCollector$SearchGroupDocs::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractSecondPassGroupingCollector$SearchGroupDocs), module, "AbstractSecondPassGroupingCollector$SearchGroupDocs", 0);
          }

          void t_AbstractSecondPassGroupingCollector$SearchGroupDocs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractSecondPassGroupingCollector$SearchGroupDocs).tp_dict, "class_", make_descriptor(AbstractSecondPassGroupingCollector$SearchGroupDocs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractSecondPassGroupingCollector$SearchGroupDocs).tp_dict, "wrapfn_", make_descriptor(t_AbstractSecondPassGroupingCollector$SearchGroupDocs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractSecondPassGroupingCollector$SearchGroupDocs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractSecondPassGroupingCollector$SearchGroupDocs::initializeClass, 1)))
              return NULL;
            return t_AbstractSecondPassGroupingCollector$SearchGroupDocs::wrap_Object(AbstractSecondPassGroupingCollector$SearchGroupDocs(((t_AbstractSecondPassGroupingCollector$SearchGroupDocs *) arg)->object.this$));
          }
          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractSecondPassGroupingCollector$SearchGroupDocs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_of_(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_AbstractSecondPassGroupingCollector$SearchGroupDocs_init_(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::grouping::AbstractSecondPassGroupingCollector a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::Object a1((jobject) NULL);
            ::org::apache::lucene::search::TopDocsCollector a2((jobject) NULL);
            PyTypeObject **p2;
            AbstractSecondPassGroupingCollector$SearchGroupDocs object((jobject) NULL);

            if (!parseArgs(args, "KoK", ::org::apache::lucene::search::grouping::AbstractSecondPassGroupingCollector::initializeClass, ::org::apache::lucene::search::TopDocsCollector::initializeClass, &a0, &p0, ::org::apache::lucene::search::grouping::t_AbstractSecondPassGroupingCollector::parameters_, &a1, &a2, &p2, ::org::apache::lucene::search::t_TopDocsCollector::parameters_))
            {
              INT_CALL(object = AbstractSecondPassGroupingCollector$SearchGroupDocs(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_get__parameters_(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_get__collector(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, void *data)
          {
            ::org::apache::lucene::search::TopDocsCollector value((jobject) NULL);
            OBJ_CALL(value = self->object._get_collector());
            return ::org::apache::lucene::search::t_TopDocsCollector::wrap_Object(value);
          }

          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_get__groupValue(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupValue());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/AtomicReader$CoreClosedListener.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *AtomicReader$CoreClosedListener::class$ = NULL;
        jmethodID *AtomicReader$CoreClosedListener::mids$ = NULL;
        bool AtomicReader$CoreClosedListener::live$ = false;

        jclass AtomicReader$CoreClosedListener::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/AtomicReader$CoreClosedListener");

            mids$ = new jmethodID[max_mid];
            mids$[mid_onClose_290588ee] = env->getMethodID(cls, "onClose", "(Ljava/lang/Object;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void AtomicReader$CoreClosedListener::onClose(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onClose_290588ee], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_AtomicReader$CoreClosedListener_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AtomicReader$CoreClosedListener_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AtomicReader$CoreClosedListener_onClose(t_AtomicReader$CoreClosedListener *self, PyObject *arg);

        static PyMethodDef t_AtomicReader$CoreClosedListener__methods_[] = {
          DECLARE_METHOD(t_AtomicReader$CoreClosedListener, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AtomicReader$CoreClosedListener, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AtomicReader$CoreClosedListener, onClose, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AtomicReader$CoreClosedListener, t_AtomicReader$CoreClosedListener, ::java::lang::Object, AtomicReader$CoreClosedListener, abstract_init, 0, 0, 0, 0, 0);

        void t_AtomicReader$CoreClosedListener::install(PyObject *module)
        {
          installType(&PY_TYPE(AtomicReader$CoreClosedListener), module, "AtomicReader$CoreClosedListener", 0);
        }

        void t_AtomicReader$CoreClosedListener::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AtomicReader$CoreClosedListener).tp_dict, "class_", make_descriptor(AtomicReader$CoreClosedListener::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AtomicReader$CoreClosedListener).tp_dict, "wrapfn_", make_descriptor(t_AtomicReader$CoreClosedListener::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AtomicReader$CoreClosedListener).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AtomicReader$CoreClosedListener_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AtomicReader$CoreClosedListener::initializeClass, 1)))
            return NULL;
          return t_AtomicReader$CoreClosedListener::wrap_Object(AtomicReader$CoreClosedListener(((t_AtomicReader$CoreClosedListener *) arg)->object.this$));
        }
        static PyObject *t_AtomicReader$CoreClosedListener_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AtomicReader$CoreClosedListener::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_AtomicReader$CoreClosedListener_onClose(t_AtomicReader$CoreClosedListener *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(self->object.onClose(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "onClose", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/shingle/ShingleFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/shingle/ShingleFilter.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {

          ::java::lang::Class *ShingleFilterFactory::class$ = NULL;
          jmethodID *ShingleFilterFactory::mids$ = NULL;
          bool ShingleFilterFactory::live$ = false;

          jclass ShingleFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/shingle/ShingleFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_f9c2452d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/shingle/ShingleFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ShingleFilterFactory::ShingleFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::shingle::ShingleFilter ShingleFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::shingle::ShingleFilter(env->callObjectMethod(this$, mids$[mid_create_f9c2452d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {
          static PyObject *t_ShingleFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ShingleFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ShingleFilterFactory_init_(t_ShingleFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ShingleFilterFactory_create(t_ShingleFilterFactory *self, PyObject *args);

          static PyMethodDef t_ShingleFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ShingleFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ShingleFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ShingleFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ShingleFilterFactory, t_ShingleFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ShingleFilterFactory, t_ShingleFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ShingleFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ShingleFilterFactory), module, "ShingleFilterFactory", 0);
          }

          void t_ShingleFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ShingleFilterFactory).tp_dict, "class_", make_descriptor(ShingleFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ShingleFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ShingleFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ShingleFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ShingleFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ShingleFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ShingleFilterFactory::wrap_Object(ShingleFilterFactory(((t_ShingleFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ShingleFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ShingleFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ShingleFilterFactory_init_(t_ShingleFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ShingleFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ShingleFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ShingleFilterFactory_create(t_ShingleFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::shingle::ShingleFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::shingle::t_ShingleFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ShingleFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/BufferedUpdatesStream$QueryAndLimit.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *BufferedUpdatesStream$QueryAndLimit::class$ = NULL;
        jmethodID *BufferedUpdatesStream$QueryAndLimit::mids$ = NULL;
        jfieldID *BufferedUpdatesStream$QueryAndLimit::fids$ = NULL;
        bool BufferedUpdatesStream$QueryAndLimit::live$ = false;

        jclass BufferedUpdatesStream$QueryAndLimit::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/BufferedUpdatesStream$QueryAndLimit");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_e29027ff] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;I)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_limit] = env->getFieldID(cls, "limit", "I");
            fids$[fid_query] = env->getFieldID(cls, "query", "Lorg/apache/lucene/search/Query;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BufferedUpdatesStream$QueryAndLimit::BufferedUpdatesStream$QueryAndLimit(const ::org::apache::lucene::search::Query & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e29027ff, a0.this$, a1)) {}

        jint BufferedUpdatesStream$QueryAndLimit::_get_limit() const
        {
          return env->getIntField(this$, fids$[fid_limit]);
        }

        ::org::apache::lucene::search::Query BufferedUpdatesStream$QueryAndLimit::_get_query() const
        {
          return ::org::apache::lucene::search::Query(env->getObjectField(this$, fids$[fid_query]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_BufferedUpdatesStream$QueryAndLimit_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedUpdatesStream$QueryAndLimit_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BufferedUpdatesStream$QueryAndLimit_init_(t_BufferedUpdatesStream$QueryAndLimit *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BufferedUpdatesStream$QueryAndLimit_get__limit(t_BufferedUpdatesStream$QueryAndLimit *self, void *data);
        static PyObject *t_BufferedUpdatesStream$QueryAndLimit_get__query(t_BufferedUpdatesStream$QueryAndLimit *self, void *data);

        static PyGetSetDef t_BufferedUpdatesStream$QueryAndLimit__fields_[] = {
          DECLARE_GET_FIELD(t_BufferedUpdatesStream$QueryAndLimit, limit),
          DECLARE_GET_FIELD(t_BufferedUpdatesStream$QueryAndLimit, query),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BufferedUpdatesStream$QueryAndLimit__methods_[] = {
          DECLARE_METHOD(t_BufferedUpdatesStream$QueryAndLimit, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedUpdatesStream$QueryAndLimit, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BufferedUpdatesStream$QueryAndLimit, t_BufferedUpdatesStream$QueryAndLimit, ::java::lang::Object, BufferedUpdatesStream$QueryAndLimit, t_BufferedUpdatesStream$QueryAndLimit_init_, 0, 0, t_BufferedUpdatesStream$QueryAndLimit__fields_, 0, 0);

        void t_BufferedUpdatesStream$QueryAndLimit::install(PyObject *module)
        {
          installType(&PY_TYPE(BufferedUpdatesStream$QueryAndLimit), module, "BufferedUpdatesStream$QueryAndLimit", 0);
        }

        void t_BufferedUpdatesStream$QueryAndLimit::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BufferedUpdatesStream$QueryAndLimit).tp_dict, "class_", make_descriptor(BufferedUpdatesStream$QueryAndLimit::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BufferedUpdatesStream$QueryAndLimit).tp_dict, "wrapfn_", make_descriptor(t_BufferedUpdatesStream$QueryAndLimit::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BufferedUpdatesStream$QueryAndLimit).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BufferedUpdatesStream$QueryAndLimit_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BufferedUpdatesStream$QueryAndLimit::initializeClass, 1)))
            return NULL;
          return t_BufferedUpdatesStream$QueryAndLimit::wrap_Object(BufferedUpdatesStream$QueryAndLimit(((t_BufferedUpdatesStream$QueryAndLimit *) arg)->object.this$));
        }
        static PyObject *t_BufferedUpdatesStream$QueryAndLimit_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BufferedUpdatesStream$QueryAndLimit::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BufferedUpdatesStream$QueryAndLimit_init_(t_BufferedUpdatesStream$QueryAndLimit *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          jint a1;
          BufferedUpdatesStream$QueryAndLimit object((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
          {
            INT_CALL(object = BufferedUpdatesStream$QueryAndLimit(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BufferedUpdatesStream$QueryAndLimit_get__limit(t_BufferedUpdatesStream$QueryAndLimit *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_limit());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_BufferedUpdatesStream$QueryAndLimit_get__query(t_BufferedUpdatesStream$QueryAndLimit *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object._get_query());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/DivFloatFunction.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *DivFloatFunction::class$ = NULL;
            jmethodID *DivFloatFunction::mids$ = NULL;
            bool DivFloatFunction::live$ = false;

            jclass DivFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/DivFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_74aa307e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_3711414a] = env->getMethodID(cls, "func", "(ILorg/apache/lucene/queries/function/FunctionValues;Lorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DivFloatFunction::DivFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::org::apache::lucene::queries::function::ValueSource & a1) : ::org::apache::lucene::queries::function::valuesource::DualFloatFunction(env->newObject(initializeClass, &mids$, mid_init$_74aa307e, a0.this$, a1.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_DivFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DivFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DivFloatFunction_init_(t_DivFloatFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_DivFloatFunction__methods_[] = {
              DECLARE_METHOD(t_DivFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DivFloatFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DivFloatFunction, t_DivFloatFunction, ::org::apache::lucene::queries::function::valuesource::DualFloatFunction, DivFloatFunction, t_DivFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_DivFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(DivFloatFunction), module, "DivFloatFunction", 0);
            }

            void t_DivFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DivFloatFunction).tp_dict, "class_", make_descriptor(DivFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DivFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_DivFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DivFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DivFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DivFloatFunction::initializeClass, 1)))
                return NULL;
              return t_DivFloatFunction::wrap_Object(DivFloatFunction(((t_DivFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_DivFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DivFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DivFloatFunction_init_(t_DivFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
              DivFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1))
              {
                INT_CALL(object = DivFloatFunction(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/SlopQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *SlopQueryNode::class$ = NULL;
              jmethodID *SlopQueryNode::mids$ = NULL;
              bool SlopQueryNode::live$ = false;

              jclass SlopQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/SlopQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_bc870487] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;I)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getChild_b387c5e6] = env->getMethodID(cls, "getChild", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getValue_54c6a179] = env->getMethodID(cls, "getValue", "()I");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              SlopQueryNode::SlopQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0, jint a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_bc870487, a0.this$, a1)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode SlopQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode SlopQueryNode::getChild() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_getChild_b387c5e6]));
              }

              ::java::lang::CharSequence SlopQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              jint SlopQueryNode::getValue() const
              {
                return env->callIntMethod(this$, mids$[mid_getValue_54c6a179]);
              }

              void SlopQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              ::java::lang::CharSequence SlopQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String SlopQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_SlopQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_SlopQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_SlopQueryNode_init_(t_SlopQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_SlopQueryNode_cloneTree(t_SlopQueryNode *self, PyObject *args);
              static PyObject *t_SlopQueryNode_getChild(t_SlopQueryNode *self);
              static PyObject *t_SlopQueryNode_getField(t_SlopQueryNode *self);
              static PyObject *t_SlopQueryNode_getValue(t_SlopQueryNode *self);
              static PyObject *t_SlopQueryNode_setField(t_SlopQueryNode *self, PyObject *arg);
              static PyObject *t_SlopQueryNode_toQueryString(t_SlopQueryNode *self, PyObject *args);
              static PyObject *t_SlopQueryNode_toString(t_SlopQueryNode *self, PyObject *args);
              static PyObject *t_SlopQueryNode_get__child(t_SlopQueryNode *self, void *data);
              static PyObject *t_SlopQueryNode_get__field(t_SlopQueryNode *self, void *data);
              static int t_SlopQueryNode_set__field(t_SlopQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_SlopQueryNode_get__value(t_SlopQueryNode *self, void *data);
              static PyGetSetDef t_SlopQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_SlopQueryNode, child),
                DECLARE_GETSET_FIELD(t_SlopQueryNode, field),
                DECLARE_GET_FIELD(t_SlopQueryNode, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_SlopQueryNode__methods_[] = {
                DECLARE_METHOD(t_SlopQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_SlopQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_SlopQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_SlopQueryNode, getChild, METH_NOARGS),
                DECLARE_METHOD(t_SlopQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_SlopQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_SlopQueryNode, setField, METH_O),
                DECLARE_METHOD(t_SlopQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_SlopQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(SlopQueryNode, t_SlopQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, SlopQueryNode, t_SlopQueryNode_init_, 0, 0, t_SlopQueryNode__fields_, 0, 0);

              void t_SlopQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(SlopQueryNode), module, "SlopQueryNode", 0);
              }

              void t_SlopQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(SlopQueryNode).tp_dict, "class_", make_descriptor(SlopQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(SlopQueryNode).tp_dict, "wrapfn_", make_descriptor(t_SlopQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(SlopQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_SlopQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, SlopQueryNode::initializeClass, 1)))
                  return NULL;
                return t_SlopQueryNode::wrap_Object(SlopQueryNode(((t_SlopQueryNode *) arg)->object.this$));
              }
              static PyObject *t_SlopQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, SlopQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_SlopQueryNode_init_(t_SlopQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                jint a1;
                SlopQueryNode object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SlopQueryNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_SlopQueryNode_cloneTree(t_SlopQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(SlopQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_SlopQueryNode_getChild(t_SlopQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_SlopQueryNode_getField(t_SlopQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_SlopQueryNode_getValue(t_SlopQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getValue());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_SlopQueryNode_setField(t_SlopQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_SlopQueryNode_toQueryString(t_SlopQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(SlopQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_SlopQueryNode_toString(t_SlopQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(SlopQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_SlopQueryNode_get__child(t_SlopQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(value);
              }

              static PyObject *t_SlopQueryNode_get__field(t_SlopQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_SlopQueryNode_set__field(t_SlopQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_SlopQueryNode_get__value(t_SlopQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getValue());
                return PyInt_FromLong((long) value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PForDeltaDocIdSet.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PForDeltaDocIdSet::class$ = NULL;
        jmethodID *PForDeltaDocIdSet::mids$ = NULL;
        bool PForDeltaDocIdSet::live$ = false;

        jclass PForDeltaDocIdSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PForDeltaDocIdSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_cardinality_54c6a179] = env->getMethodID(cls, "cardinality", "()I");
            mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
            mids$[mid_iterator_dc23660c] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint PForDeltaDocIdSet::cardinality() const
        {
          return env->callIntMethod(this$, mids$[mid_cardinality_54c6a179]);
        }

        jboolean PForDeltaDocIdSet::isCacheable() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
        }

        ::org::apache::lucene::search::DocIdSetIterator PForDeltaDocIdSet::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_dc23660c]));
        }

        jlong PForDeltaDocIdSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/PForDeltaDocIdSet$Builder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PForDeltaDocIdSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PForDeltaDocIdSet_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PForDeltaDocIdSet_cardinality(t_PForDeltaDocIdSet *self);
        static PyObject *t_PForDeltaDocIdSet_isCacheable(t_PForDeltaDocIdSet *self, PyObject *args);
        static PyObject *t_PForDeltaDocIdSet_iterator(t_PForDeltaDocIdSet *self, PyObject *args);
        static PyObject *t_PForDeltaDocIdSet_ramBytesUsed(t_PForDeltaDocIdSet *self, PyObject *args);
        static PyObject *t_PForDeltaDocIdSet_get__cacheable(t_PForDeltaDocIdSet *self, void *data);
        static PyGetSetDef t_PForDeltaDocIdSet__fields_[] = {
          DECLARE_GET_FIELD(t_PForDeltaDocIdSet, cacheable),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PForDeltaDocIdSet__methods_[] = {
          DECLARE_METHOD(t_PForDeltaDocIdSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PForDeltaDocIdSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PForDeltaDocIdSet, cardinality, METH_NOARGS),
          DECLARE_METHOD(t_PForDeltaDocIdSet, isCacheable, METH_VARARGS),
          DECLARE_METHOD(t_PForDeltaDocIdSet, iterator, METH_VARARGS),
          DECLARE_METHOD(t_PForDeltaDocIdSet, ramBytesUsed, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PForDeltaDocIdSet, t_PForDeltaDocIdSet, ::org::apache::lucene::search::DocIdSet, PForDeltaDocIdSet, abstract_init, 0, 0, t_PForDeltaDocIdSet__fields_, 0, 0);

        void t_PForDeltaDocIdSet::install(PyObject *module)
        {
          installType(&PY_TYPE(PForDeltaDocIdSet), module, "PForDeltaDocIdSet", 0);
          PyDict_SetItemString(PY_TYPE(PForDeltaDocIdSet).tp_dict, "Builder", make_descriptor(&PY_TYPE(PForDeltaDocIdSet$Builder)));
        }

        void t_PForDeltaDocIdSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PForDeltaDocIdSet).tp_dict, "class_", make_descriptor(PForDeltaDocIdSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PForDeltaDocIdSet).tp_dict, "wrapfn_", make_descriptor(t_PForDeltaDocIdSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PForDeltaDocIdSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PForDeltaDocIdSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PForDeltaDocIdSet::initializeClass, 1)))
            return NULL;
          return t_PForDeltaDocIdSet::wrap_Object(PForDeltaDocIdSet(((t_PForDeltaDocIdSet *) arg)->object.this$));
        }
        static PyObject *t_PForDeltaDocIdSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PForDeltaDocIdSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PForDeltaDocIdSet_cardinality(t_PForDeltaDocIdSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.cardinality());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_PForDeltaDocIdSet_isCacheable(t_PForDeltaDocIdSet *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isCacheable());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PForDeltaDocIdSet), (PyObject *) self, "isCacheable", args, 2);
        }

        static PyObject *t_PForDeltaDocIdSet_iterator(t_PForDeltaDocIdSet *self, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(PForDeltaDocIdSet), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_PForDeltaDocIdSet_ramBytesUsed(t_PForDeltaDocIdSet *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(PForDeltaDocIdSet), (PyObject *) self, "ramBytesUsed", args, 2);
        }

        static PyObject *t_PForDeltaDocIdSet_get__cacheable(t_PForDeltaDocIdSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCacheable());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/Lucene43CompoundWordTokenFilterBase.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {

          ::java::lang::Class *Lucene43CompoundWordTokenFilterBase::class$ = NULL;
          jmethodID *Lucene43CompoundWordTokenFilterBase::mids$ = NULL;
          bool Lucene43CompoundWordTokenFilterBase::live$ = false;
          jint Lucene43CompoundWordTokenFilterBase::DEFAULT_MAX_SUBWORD_SIZE = (jint) 0;
          jint Lucene43CompoundWordTokenFilterBase::DEFAULT_MIN_SUBWORD_SIZE = (jint) 0;
          jint Lucene43CompoundWordTokenFilterBase::DEFAULT_MIN_WORD_SIZE = (jint) 0;

          jclass Lucene43CompoundWordTokenFilterBase::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/Lucene43CompoundWordTokenFilterBase");

              mids$ = new jmethodID[max_mid];
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_decompose_54c6a166] = env->getMethodID(cls, "decompose", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_SUBWORD_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_SUBWORD_SIZE");
              DEFAULT_MIN_SUBWORD_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_SUBWORD_SIZE");
              DEFAULT_MIN_WORD_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_WORD_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean Lucene43CompoundWordTokenFilterBase::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void Lucene43CompoundWordTokenFilterBase::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          static PyObject *t_Lucene43CompoundWordTokenFilterBase_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene43CompoundWordTokenFilterBase_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene43CompoundWordTokenFilterBase_incrementToken(t_Lucene43CompoundWordTokenFilterBase *self, PyObject *args);
          static PyObject *t_Lucene43CompoundWordTokenFilterBase_reset(t_Lucene43CompoundWordTokenFilterBase *self, PyObject *args);

          static PyMethodDef t_Lucene43CompoundWordTokenFilterBase__methods_[] = {
            DECLARE_METHOD(t_Lucene43CompoundWordTokenFilterBase, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43CompoundWordTokenFilterBase, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43CompoundWordTokenFilterBase, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_Lucene43CompoundWordTokenFilterBase, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene43CompoundWordTokenFilterBase, t_Lucene43CompoundWordTokenFilterBase, ::org::apache::lucene::analysis::TokenFilter, Lucene43CompoundWordTokenFilterBase, abstract_init, 0, 0, 0, 0, 0);

          void t_Lucene43CompoundWordTokenFilterBase::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene43CompoundWordTokenFilterBase), module, "Lucene43CompoundWordTokenFilterBase", 0);
          }

          void t_Lucene43CompoundWordTokenFilterBase::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene43CompoundWordTokenFilterBase).tp_dict, "class_", make_descriptor(Lucene43CompoundWordTokenFilterBase::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene43CompoundWordTokenFilterBase).tp_dict, "wrapfn_", make_descriptor(t_Lucene43CompoundWordTokenFilterBase::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene43CompoundWordTokenFilterBase).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene43CompoundWordTokenFilterBase::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene43CompoundWordTokenFilterBase).tp_dict, "DEFAULT_MAX_SUBWORD_SIZE", make_descriptor(Lucene43CompoundWordTokenFilterBase::DEFAULT_MAX_SUBWORD_SIZE));
            PyDict_SetItemString(PY_TYPE(Lucene43CompoundWordTokenFilterBase).tp_dict, "DEFAULT_MIN_SUBWORD_SIZE", make_descriptor(Lucene43CompoundWordTokenFilterBase::DEFAULT_MIN_SUBWORD_SIZE));
            PyDict_SetItemString(PY_TYPE(Lucene43CompoundWordTokenFilterBase).tp_dict, "DEFAULT_MIN_WORD_SIZE", make_descriptor(Lucene43CompoundWordTokenFilterBase::DEFAULT_MIN_WORD_SIZE));
          }

          static PyObject *t_Lucene43CompoundWordTokenFilterBase_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene43CompoundWordTokenFilterBase::initializeClass, 1)))
              return NULL;
            return t_Lucene43CompoundWordTokenFilterBase::wrap_Object(Lucene43CompoundWordTokenFilterBase(((t_Lucene43CompoundWordTokenFilterBase *) arg)->object.this$));
          }
          static PyObject *t_Lucene43CompoundWordTokenFilterBase_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene43CompoundWordTokenFilterBase::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Lucene43CompoundWordTokenFilterBase_incrementToken(t_Lucene43CompoundWordTokenFilterBase *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Lucene43CompoundWordTokenFilterBase), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_Lucene43CompoundWordTokenFilterBase_reset(t_Lucene43CompoundWordTokenFilterBase *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene43CompoundWordTokenFilterBase), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *HyphenatedWordsFilter::class$ = NULL;
          jmethodID *HyphenatedWordsFilter::mids$ = NULL;
          bool HyphenatedWordsFilter::live$ = false;

          jclass HyphenatedWordsFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HyphenatedWordsFilter::HyphenatedWordsFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean HyphenatedWordsFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void HyphenatedWordsFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_HyphenatedWordsFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HyphenatedWordsFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HyphenatedWordsFilter_init_(t_HyphenatedWordsFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HyphenatedWordsFilter_incrementToken(t_HyphenatedWordsFilter *self, PyObject *args);
          static PyObject *t_HyphenatedWordsFilter_reset(t_HyphenatedWordsFilter *self, PyObject *args);

          static PyMethodDef t_HyphenatedWordsFilter__methods_[] = {
            DECLARE_METHOD(t_HyphenatedWordsFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenatedWordsFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenatedWordsFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_HyphenatedWordsFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HyphenatedWordsFilter, t_HyphenatedWordsFilter, ::org::apache::lucene::analysis::TokenFilter, HyphenatedWordsFilter, t_HyphenatedWordsFilter_init_, 0, 0, 0, 0, 0);

          void t_HyphenatedWordsFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HyphenatedWordsFilter), module, "HyphenatedWordsFilter", 0);
          }

          void t_HyphenatedWordsFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HyphenatedWordsFilter).tp_dict, "class_", make_descriptor(HyphenatedWordsFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HyphenatedWordsFilter).tp_dict, "wrapfn_", make_descriptor(t_HyphenatedWordsFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HyphenatedWordsFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HyphenatedWordsFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HyphenatedWordsFilter::initializeClass, 1)))
              return NULL;
            return t_HyphenatedWordsFilter::wrap_Object(HyphenatedWordsFilter(((t_HyphenatedWordsFilter *) arg)->object.this$));
          }
          static PyObject *t_HyphenatedWordsFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HyphenatedWordsFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HyphenatedWordsFilter_init_(t_HyphenatedWordsFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            HyphenatedWordsFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = HyphenatedWordsFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HyphenatedWordsFilter_incrementToken(t_HyphenatedWordsFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(HyphenatedWordsFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_HyphenatedWordsFilter_reset(t_HyphenatedWordsFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(HyphenatedWordsFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/SimpleFragListBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *SimpleFragListBuilder::class$ = NULL;
          jmethodID *SimpleFragListBuilder::mids$ = NULL;
          bool SimpleFragListBuilder::live$ = false;

          jclass SimpleFragListBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/SimpleFragListBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_createFieldFragList_f54fd6ce] = env->getMethodID(cls, "createFieldFragList", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList;I)Lorg/apache/lucene/search/vectorhighlight/FieldFragList;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleFragListBuilder::SimpleFragListBuilder() : ::org::apache::lucene::search::vectorhighlight::BaseFragListBuilder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          SimpleFragListBuilder::SimpleFragListBuilder(jint a0) : ::org::apache::lucene::search::vectorhighlight::BaseFragListBuilder(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          ::org::apache::lucene::search::vectorhighlight::FieldFragList SimpleFragListBuilder::createFieldFragList(const ::org::apache::lucene::search::vectorhighlight::FieldPhraseList & a0, jint a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldFragList(env->callObjectMethod(this$, mids$[mid_createFieldFragList_f54fd6ce], a0.this$, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_SimpleFragListBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleFragListBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleFragListBuilder_init_(t_SimpleFragListBuilder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleFragListBuilder_createFieldFragList(t_SimpleFragListBuilder *self, PyObject *args);

          static PyMethodDef t_SimpleFragListBuilder__methods_[] = {
            DECLARE_METHOD(t_SimpleFragListBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFragListBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFragListBuilder, createFieldFragList, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleFragListBuilder, t_SimpleFragListBuilder, ::org::apache::lucene::search::vectorhighlight::BaseFragListBuilder, SimpleFragListBuilder, t_SimpleFragListBuilder_init_, 0, 0, 0, 0, 0);

          void t_SimpleFragListBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleFragListBuilder), module, "SimpleFragListBuilder", 0);
          }

          void t_SimpleFragListBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleFragListBuilder).tp_dict, "class_", make_descriptor(SimpleFragListBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleFragListBuilder).tp_dict, "wrapfn_", make_descriptor(t_SimpleFragListBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleFragListBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleFragListBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleFragListBuilder::initializeClass, 1)))
              return NULL;
            return t_SimpleFragListBuilder::wrap_Object(SimpleFragListBuilder(((t_SimpleFragListBuilder *) arg)->object.this$));
          }
          static PyObject *t_SimpleFragListBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleFragListBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleFragListBuilder_init_(t_SimpleFragListBuilder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                SimpleFragListBuilder object((jobject) NULL);

                INT_CALL(object = SimpleFragListBuilder());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jint a0;
                SimpleFragListBuilder object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = SimpleFragListBuilder(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleFragListBuilder_createFieldFragList(t_SimpleFragListBuilder *self, PyObject *args)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldPhraseList a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::search::vectorhighlight::FieldFragList result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::search::vectorhighlight::FieldPhraseList::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.createFieldFragList(a0, a1));
              return ::org::apache::lucene::search::vectorhighlight::t_FieldFragList::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SimpleFragListBuilder), (PyObject *) self, "createFieldFragList", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/RegexpQuery.h"
#include "org/apache/lucene/util/automaton/AutomatonProvider.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *RegexpQuery::class$ = NULL;
        jmethodID *RegexpQuery::mids$ = NULL;
        bool RegexpQuery::live$ = false;

        jclass RegexpQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/RegexpQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_init$_05555589] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;I)V");
            mids$[mid_init$_66cf96d2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;ILorg/apache/lucene/util/automaton/AutomatonProvider;)V");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RegexpQuery::RegexpQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::AutomatonQuery(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

        RegexpQuery::RegexpQuery(const ::org::apache::lucene::index::Term & a0, jint a1) : ::org::apache::lucene::search::AutomatonQuery(env->newObject(initializeClass, &mids$, mid_init$_05555589, a0.this$, a1)) {}

        RegexpQuery::RegexpQuery(const ::org::apache::lucene::index::Term & a0, jint a1, const ::org::apache::lucene::util::automaton::AutomatonProvider & a2) : ::org::apache::lucene::search::AutomatonQuery(env->newObject(initializeClass, &mids$, mid_init$_66cf96d2, a0.this$, a1, a2.this$)) {}

        ::java::lang::String RegexpQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_RegexpQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RegexpQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RegexpQuery_init_(t_RegexpQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RegexpQuery_toString(t_RegexpQuery *self, PyObject *args);

        static PyMethodDef t_RegexpQuery__methods_[] = {
          DECLARE_METHOD(t_RegexpQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RegexpQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RegexpQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RegexpQuery, t_RegexpQuery, ::org::apache::lucene::search::AutomatonQuery, RegexpQuery, t_RegexpQuery_init_, 0, 0, 0, 0, 0);

        void t_RegexpQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(RegexpQuery), module, "RegexpQuery", 0);
        }

        void t_RegexpQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RegexpQuery).tp_dict, "class_", make_descriptor(RegexpQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RegexpQuery).tp_dict, "wrapfn_", make_descriptor(t_RegexpQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RegexpQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RegexpQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RegexpQuery::initializeClass, 1)))
            return NULL;
          return t_RegexpQuery::wrap_Object(RegexpQuery(((t_RegexpQuery *) arg)->object.this$));
        }
        static PyObject *t_RegexpQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RegexpQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RegexpQuery_init_(t_RegexpQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              RegexpQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                INT_CALL(object = RegexpQuery(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              RegexpQuery object((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
              {
                INT_CALL(object = RegexpQuery(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::util::automaton::AutomatonProvider a2((jobject) NULL);
              RegexpQuery object((jobject) NULL);

              if (!parseArgs(args, "kIk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::util::automaton::AutomatonProvider::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = RegexpQuery(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RegexpQuery_toString(t_RegexpQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(RegexpQuery), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/util/MutableBits.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *LiveDocsFormat::class$ = NULL;
        jmethodID *LiveDocsFormat::mids$ = NULL;
        bool LiveDocsFormat::live$ = false;

        jclass LiveDocsFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/LiveDocsFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_files_cb8dcbcf] = env->getMethodID(cls, "files", "(Lorg/apache/lucene/index/SegmentCommitInfo;Ljava/util/Collection;)V");
            mids$[mid_newLiveDocs_e3a7ca1a] = env->getMethodID(cls, "newLiveDocs", "(Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/util/MutableBits;");
            mids$[mid_newLiveDocs_f311e97a] = env->getMethodID(cls, "newLiveDocs", "(I)Lorg/apache/lucene/util/MutableBits;");
            mids$[mid_readLiveDocs_60c7b77b] = env->getMethodID(cls, "readLiveDocs", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_writeLiveDocs_37123b35] = env->getMethodID(cls, "writeLiveDocs", "(Lorg/apache/lucene/util/MutableBits;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentCommitInfo;ILorg/apache/lucene/store/IOContext;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void LiveDocsFormat::files(const ::org::apache::lucene::index::SegmentCommitInfo & a0, const ::java::util::Collection & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_files_cb8dcbcf], a0.this$, a1.this$);
        }

        ::org::apache::lucene::util::MutableBits LiveDocsFormat::newLiveDocs(const ::org::apache::lucene::util::Bits & a0) const
        {
          return ::org::apache::lucene::util::MutableBits(env->callObjectMethod(this$, mids$[mid_newLiveDocs_e3a7ca1a], a0.this$));
        }

        ::org::apache::lucene::util::MutableBits LiveDocsFormat::newLiveDocs(jint a0) const
        {
          return ::org::apache::lucene::util::MutableBits(env->callObjectMethod(this$, mids$[mid_newLiveDocs_f311e97a], a0));
        }

        ::org::apache::lucene::util::Bits LiveDocsFormat::readLiveDocs(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentCommitInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_readLiveDocs_60c7b77b], a0.this$, a1.this$, a2.this$));
        }

        void LiveDocsFormat::writeLiveDocs(const ::org::apache::lucene::util::MutableBits & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::index::SegmentCommitInfo & a2, jint a3, const ::org::apache::lucene::store::IOContext & a4) const
        {
          env->callVoidMethod(this$, mids$[mid_writeLiveDocs_37123b35], a0.this$, a1.this$, a2.this$, a3, a4.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_LiveDocsFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LiveDocsFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LiveDocsFormat_files(t_LiveDocsFormat *self, PyObject *args);
        static PyObject *t_LiveDocsFormat_newLiveDocs(t_LiveDocsFormat *self, PyObject *args);
        static PyObject *t_LiveDocsFormat_readLiveDocs(t_LiveDocsFormat *self, PyObject *args);
        static PyObject *t_LiveDocsFormat_writeLiveDocs(t_LiveDocsFormat *self, PyObject *args);

        static PyMethodDef t_LiveDocsFormat__methods_[] = {
          DECLARE_METHOD(t_LiveDocsFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LiveDocsFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LiveDocsFormat, files, METH_VARARGS),
          DECLARE_METHOD(t_LiveDocsFormat, newLiveDocs, METH_VARARGS),
          DECLARE_METHOD(t_LiveDocsFormat, readLiveDocs, METH_VARARGS),
          DECLARE_METHOD(t_LiveDocsFormat, writeLiveDocs, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LiveDocsFormat, t_LiveDocsFormat, ::java::lang::Object, LiveDocsFormat, abstract_init, 0, 0, 0, 0, 0);

        void t_LiveDocsFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(LiveDocsFormat), module, "LiveDocsFormat", 0);
        }

        void t_LiveDocsFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LiveDocsFormat).tp_dict, "class_", make_descriptor(LiveDocsFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LiveDocsFormat).tp_dict, "wrapfn_", make_descriptor(t_LiveDocsFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LiveDocsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LiveDocsFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LiveDocsFormat::initializeClass, 1)))
            return NULL;
          return t_LiveDocsFormat::wrap_Object(LiveDocsFormat(((t_LiveDocsFormat *) arg)->object.this$));
        }
        static PyObject *t_LiveDocsFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LiveDocsFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_LiveDocsFormat_files(t_LiveDocsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);
          ::java::util::Collection a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "kK", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.files(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "files", args);
          return NULL;
        }

        static PyObject *t_LiveDocsFormat_newLiveDocs(t_LiveDocsFormat *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::Bits a0((jobject) NULL);
              ::org::apache::lucene::util::MutableBits result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::Bits::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.newLiveDocs(a0));
                return ::org::apache::lucene::util::t_MutableBits::wrap_Object(result);
              }
            }
            {
              jint a0;
              ::org::apache::lucene::util::MutableBits result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.newLiveDocs(a0));
                return ::org::apache::lucene::util::t_MutableBits::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "newLiveDocs", args);
          return NULL;
        }

        static PyObject *t_LiveDocsFormat_readLiveDocs(t_LiveDocsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentCommitInfo a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.readLiveDocs(a0, a1, a2));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "readLiveDocs", args);
          return NULL;
        }

        static PyObject *t_LiveDocsFormat_writeLiveDocs(t_LiveDocsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::util::MutableBits a0((jobject) NULL);
          ::org::apache::lucene::store::Directory a1((jobject) NULL);
          ::org::apache::lucene::index::SegmentCommitInfo a2((jobject) NULL);
          jint a3;
          ::org::apache::lucene::store::IOContext a4((jobject) NULL);

          if (!parseArgs(args, "kkkIk", ::org::apache::lucene::util::MutableBits::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(self->object.writeLiveDocs(a0, a1, a2, a3, a4));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeLiveDocs", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/RangeFilterBuilder.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *RangeFilterBuilder::class$ = NULL;
            jmethodID *RangeFilterBuilder::mids$ = NULL;
            bool RangeFilterBuilder::live$ = false;

            jclass RangeFilterBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/RangeFilterBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            RangeFilterBuilder::RangeFilterBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_RangeFilterBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RangeFilterBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_RangeFilterBuilder_init_(t_RangeFilterBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_RangeFilterBuilder__methods_[] = {
              DECLARE_METHOD(t_RangeFilterBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RangeFilterBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(RangeFilterBuilder, t_RangeFilterBuilder, ::java::lang::Object, RangeFilterBuilder, t_RangeFilterBuilder_init_, 0, 0, 0, 0, 0);

            void t_RangeFilterBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(RangeFilterBuilder), module, "RangeFilterBuilder", 0);
            }

            void t_RangeFilterBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(RangeFilterBuilder).tp_dict, "class_", make_descriptor(RangeFilterBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(RangeFilterBuilder).tp_dict, "wrapfn_", make_descriptor(t_RangeFilterBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(RangeFilterBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_RangeFilterBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, RangeFilterBuilder::initializeClass, 1)))
                return NULL;
              return t_RangeFilterBuilder::wrap_Object(RangeFilterBuilder(((t_RangeFilterBuilder *) arg)->object.this$));
            }
            static PyObject *t_RangeFilterBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, RangeFilterBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_RangeFilterBuilder_init_(t_RangeFilterBuilder *self, PyObject *args, PyObject *kwds)
            {
              RangeFilterBuilder object((jobject) NULL);

              INT_CALL(object = RangeFilterBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/AbstractCollection.h"
#include "java/util/Collection.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *AbstractCollection::class$ = NULL;
    jmethodID *AbstractCollection::mids$ = NULL;
    bool AbstractCollection::live$ = false;

    jclass AbstractCollection::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/AbstractCollection");

        mids$ = new jmethodID[max_mid];
        mids$[mid_add_290588e2] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
        mids$[mid_addAll_9bfb3701] = env->getMethodID(cls, "addAll", "(Ljava/util/Collection;)Z");
        mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
        mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
        mids$[mid_containsAll_9bfb3701] = env->getMethodID(cls, "containsAll", "(Ljava/util/Collection;)Z");
        mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
        mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
        mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
        mids$[mid_removeAll_9bfb3701] = env->getMethodID(cls, "removeAll", "(Ljava/util/Collection;)Z");
        mids$[mid_retainAll_9bfb3701] = env->getMethodID(cls, "retainAll", "(Ljava/util/Collection;)Z");
        mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
        mids$[mid_toArray_94e49c77] = env->getMethodID(cls, "toArray", "()[Ljava/lang/Object;");
        mids$[mid_toArray_ae67dbcf] = env->getMethodID(cls, "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jboolean AbstractCollection::add(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_add_290588e2], a0.this$);
    }

    jboolean AbstractCollection::addAll(const ::java::util::Collection & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_addAll_9bfb3701], a0.this$);
    }

    void AbstractCollection::clear() const
    {
      env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
    }

    jboolean AbstractCollection::contains(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
    }

    jboolean AbstractCollection::containsAll(const ::java::util::Collection & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_containsAll_9bfb3701], a0.this$);
    }

    jboolean AbstractCollection::isEmpty() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
    }

    ::java::util::Iterator AbstractCollection::iterator() const
    {
      return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
    }

    jboolean AbstractCollection::remove(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_remove_290588e2], a0.this$);
    }

    jboolean AbstractCollection::removeAll(const ::java::util::Collection & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_removeAll_9bfb3701], a0.this$);
    }

    jboolean AbstractCollection::retainAll(const ::java::util::Collection & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_retainAll_9bfb3701], a0.this$);
    }

    jint AbstractCollection::size() const
    {
      return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
    }

    JArray< ::java::lang::Object > AbstractCollection::toArray() const
    {
      return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_94e49c77]));
    }

    JArray< ::java::lang::Object > AbstractCollection::toArray(const JArray< ::java::lang::Object > & a0) const
    {
      return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_ae67dbcf], a0.this$));
    }

    ::java::lang::String AbstractCollection::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_AbstractCollection_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_AbstractCollection_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_AbstractCollection_of_(t_AbstractCollection *self, PyObject *args);
    static PyObject *t_AbstractCollection_add(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_addAll(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_clear(t_AbstractCollection *self);
    static PyObject *t_AbstractCollection_contains(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_containsAll(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_isEmpty(t_AbstractCollection *self);
    static PyObject *t_AbstractCollection_iterator(t_AbstractCollection *self);
    static PyObject *t_AbstractCollection_remove(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_removeAll(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_retainAll(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_size(t_AbstractCollection *self);
    static PyObject *t_AbstractCollection_toArray(t_AbstractCollection *self, PyObject *args);
    static PyObject *t_AbstractCollection_toString(t_AbstractCollection *self, PyObject *args);
    static PyObject *t_AbstractCollection_get__empty(t_AbstractCollection *self, void *data);
    static PyObject *t_AbstractCollection_get__parameters_(t_AbstractCollection *self, void *data);
    static PyGetSetDef t_AbstractCollection__fields_[] = {
      DECLARE_GET_FIELD(t_AbstractCollection, empty),
      DECLARE_GET_FIELD(t_AbstractCollection, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_AbstractCollection__methods_[] = {
      DECLARE_METHOD(t_AbstractCollection, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_AbstractCollection, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_AbstractCollection, of_, METH_VARARGS),
      DECLARE_METHOD(t_AbstractCollection, add, METH_O),
      DECLARE_METHOD(t_AbstractCollection, addAll, METH_O),
      DECLARE_METHOD(t_AbstractCollection, clear, METH_NOARGS),
      DECLARE_METHOD(t_AbstractCollection, contains, METH_O),
      DECLARE_METHOD(t_AbstractCollection, containsAll, METH_O),
      DECLARE_METHOD(t_AbstractCollection, isEmpty, METH_NOARGS),
      DECLARE_METHOD(t_AbstractCollection, iterator, METH_NOARGS),
      DECLARE_METHOD(t_AbstractCollection, remove, METH_O),
      DECLARE_METHOD(t_AbstractCollection, removeAll, METH_O),
      DECLARE_METHOD(t_AbstractCollection, retainAll, METH_O),
      DECLARE_METHOD(t_AbstractCollection, size, METH_NOARGS),
      DECLARE_METHOD(t_AbstractCollection, toArray, METH_VARARGS),
      DECLARE_METHOD(t_AbstractCollection, toString, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(AbstractCollection, t_AbstractCollection, ::java::lang::Object, AbstractCollection, abstract_init, ((PyObject *(*)(t_AbstractCollection *)) get_generic_iterator< t_AbstractCollection >), 0, t_AbstractCollection__fields_, 0, 0);
    PyObject *t_AbstractCollection::wrap_Object(const AbstractCollection& object, PyTypeObject *p0)
    {
      PyObject *obj = t_AbstractCollection::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_AbstractCollection *self = (t_AbstractCollection *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_AbstractCollection::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_AbstractCollection::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_AbstractCollection *self = (t_AbstractCollection *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_AbstractCollection::install(PyObject *module)
    {
      installType(&PY_TYPE(AbstractCollection), module, "AbstractCollection", 0);
    }

    void t_AbstractCollection::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(AbstractCollection).tp_dict, "class_", make_descriptor(AbstractCollection::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(AbstractCollection).tp_dict, "wrapfn_", make_descriptor(t_AbstractCollection::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(AbstractCollection).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_AbstractCollection_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, AbstractCollection::initializeClass, 1)))
        return NULL;
      return t_AbstractCollection::wrap_Object(AbstractCollection(((t_AbstractCollection *) arg)->object.this$));
    }
    static PyObject *t_AbstractCollection_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, AbstractCollection::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_AbstractCollection_of_(t_AbstractCollection *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_AbstractCollection_add(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.add(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "add", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_addAll(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = self->object.addAll(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "addAll", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_clear(t_AbstractCollection *self)
    {
      OBJ_CALL(self->object.clear());
      Py_RETURN_NONE;
    }

    static PyObject *t_AbstractCollection_contains(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.contains(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "contains", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_containsAll(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = self->object.containsAll(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "containsAll", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_isEmpty(t_AbstractCollection *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isEmpty());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_AbstractCollection_iterator(t_AbstractCollection *self)
    {
      ::java::util::Iterator result((jobject) NULL);
      OBJ_CALL(result = self->object.iterator());
      return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
    }

    static PyObject *t_AbstractCollection_remove(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.remove(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "remove", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_removeAll(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = self->object.removeAll(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "removeAll", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_retainAll(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = self->object.retainAll(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "retainAll", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_size(t_AbstractCollection *self)
    {
      jint result;
      OBJ_CALL(result = self->object.size());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_AbstractCollection_toArray(t_AbstractCollection *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          JArray< ::java::lang::Object > result((jobject) NULL);
          OBJ_CALL(result = self->object.toArray());
          return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
        }
        break;
       case 1:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArgs(args, "[o", &a0))
          {
            OBJ_CALL(result = self->object.toArray(a0));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "toArray", args);
      return NULL;
    }

    static PyObject *t_AbstractCollection_toString(t_AbstractCollection *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(AbstractCollection), (PyObject *) self, "toString", args, 2);
    }
    static PyObject *t_AbstractCollection_get__parameters_(t_AbstractCollection *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_AbstractCollection_get__empty(t_AbstractCollection *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEmpty());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/function/FunctionDistinctValuesCollector.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/search/grouping/function/FunctionDistinctValuesCollector$GroupCount.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/util/List.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {

            ::java::lang::Class *FunctionDistinctValuesCollector::class$ = NULL;
            jmethodID *FunctionDistinctValuesCollector::mids$ = NULL;
            bool FunctionDistinctValuesCollector::live$ = false;

            jclass FunctionDistinctValuesCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/function/FunctionDistinctValuesCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_86fd8007] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;Ljava/util/Collection;)V");
                mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
                mids$[mid_getGroups_87851566] = env->getMethodID(cls, "getGroups", "()Ljava/util/List;");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FunctionDistinctValuesCollector::FunctionDistinctValuesCollector(const ::java::util::Map & a0, const ::org::apache::lucene::queries::function::ValueSource & a1, const ::org::apache::lucene::queries::function::ValueSource & a2, const ::java::util::Collection & a3) : ::org::apache::lucene::search::grouping::AbstractDistinctValuesCollector(env->newObject(initializeClass, &mids$, mid_init$_86fd8007, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            void FunctionDistinctValuesCollector::collect(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
            }

            ::java::util::List FunctionDistinctValuesCollector::getGroups() const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getGroups_87851566]));
            }

            void FunctionDistinctValuesCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {
            static PyObject *t_FunctionDistinctValuesCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionDistinctValuesCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionDistinctValuesCollector_of_(t_FunctionDistinctValuesCollector *self, PyObject *args);
            static int t_FunctionDistinctValuesCollector_init_(t_FunctionDistinctValuesCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FunctionDistinctValuesCollector_collect(t_FunctionDistinctValuesCollector *self, PyObject *args);
            static PyObject *t_FunctionDistinctValuesCollector_getGroups(t_FunctionDistinctValuesCollector *self, PyObject *args);
            static PyObject *t_FunctionDistinctValuesCollector_setNextReader(t_FunctionDistinctValuesCollector *self, PyObject *args);
            static PyObject *t_FunctionDistinctValuesCollector_get__groups(t_FunctionDistinctValuesCollector *self, void *data);
            static int t_FunctionDistinctValuesCollector_set__nextReader(t_FunctionDistinctValuesCollector *self, PyObject *arg, void *data);
            static PyObject *t_FunctionDistinctValuesCollector_get__parameters_(t_FunctionDistinctValuesCollector *self, void *data);
            static PyGetSetDef t_FunctionDistinctValuesCollector__fields_[] = {
              DECLARE_GET_FIELD(t_FunctionDistinctValuesCollector, groups),
              DECLARE_SET_FIELD(t_FunctionDistinctValuesCollector, nextReader),
              DECLARE_GET_FIELD(t_FunctionDistinctValuesCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FunctionDistinctValuesCollector__methods_[] = {
              DECLARE_METHOD(t_FunctionDistinctValuesCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionDistinctValuesCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionDistinctValuesCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_FunctionDistinctValuesCollector, collect, METH_VARARGS),
              DECLARE_METHOD(t_FunctionDistinctValuesCollector, getGroups, METH_VARARGS),
              DECLARE_METHOD(t_FunctionDistinctValuesCollector, setNextReader, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FunctionDistinctValuesCollector, t_FunctionDistinctValuesCollector, ::org::apache::lucene::search::grouping::AbstractDistinctValuesCollector, FunctionDistinctValuesCollector, t_FunctionDistinctValuesCollector_init_, 0, 0, t_FunctionDistinctValuesCollector__fields_, 0, 0);
            PyObject *t_FunctionDistinctValuesCollector::wrap_Object(const FunctionDistinctValuesCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionDistinctValuesCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionDistinctValuesCollector *self = (t_FunctionDistinctValuesCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_FunctionDistinctValuesCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionDistinctValuesCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionDistinctValuesCollector *self = (t_FunctionDistinctValuesCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_FunctionDistinctValuesCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(FunctionDistinctValuesCollector), module, "FunctionDistinctValuesCollector", 0);
              PyDict_SetItemString(PY_TYPE(FunctionDistinctValuesCollector).tp_dict, "GroupCount", make_descriptor(&PY_TYPE(FunctionDistinctValuesCollector$GroupCount)));
            }

            void t_FunctionDistinctValuesCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FunctionDistinctValuesCollector).tp_dict, "class_", make_descriptor(FunctionDistinctValuesCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FunctionDistinctValuesCollector).tp_dict, "wrapfn_", make_descriptor(t_FunctionDistinctValuesCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FunctionDistinctValuesCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FunctionDistinctValuesCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FunctionDistinctValuesCollector::initializeClass, 1)))
                return NULL;
              return t_FunctionDistinctValuesCollector::wrap_Object(FunctionDistinctValuesCollector(((t_FunctionDistinctValuesCollector *) arg)->object.this$));
            }
            static PyObject *t_FunctionDistinctValuesCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FunctionDistinctValuesCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FunctionDistinctValuesCollector_of_(t_FunctionDistinctValuesCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_FunctionDistinctValuesCollector_init_(t_FunctionDistinctValuesCollector *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
              ::org::apache::lucene::queries::function::ValueSource a2((jobject) NULL);
              ::java::util::Collection a3((jobject) NULL);
              PyTypeObject **p3;
              FunctionDistinctValuesCollector object((jobject) NULL);

              if (!parseArgs(args, "KkkK", ::java::util::Map::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2, &a3, &p3, ::java::util::t_Collection::parameters_))
              {
                INT_CALL(object = FunctionDistinctValuesCollector(a0, a1, a2, a3));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::search::grouping::function::PY_TYPE(FunctionDistinctValuesCollector$GroupCount);
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FunctionDistinctValuesCollector_collect(t_FunctionDistinctValuesCollector *self, PyObject *args)
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.collect(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FunctionDistinctValuesCollector), (PyObject *) self, "collect", args, 2);
            }

            static PyObject *t_FunctionDistinctValuesCollector_getGroups(t_FunctionDistinctValuesCollector *self, PyObject *args)
            {
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getGroups());
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::grouping::function::PY_TYPE(FunctionDistinctValuesCollector$GroupCount));
              }

              return callSuper(&PY_TYPE(FunctionDistinctValuesCollector), (PyObject *) self, "getGroups", args, 2);
            }

            static PyObject *t_FunctionDistinctValuesCollector_setNextReader(t_FunctionDistinctValuesCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FunctionDistinctValuesCollector), (PyObject *) self, "setNextReader", args, 2);
            }
            static PyObject *t_FunctionDistinctValuesCollector_get__parameters_(t_FunctionDistinctValuesCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static PyObject *t_FunctionDistinctValuesCollector_get__groups(t_FunctionDistinctValuesCollector *self, void *data)
            {
              ::java::util::List value((jobject) NULL);
              OBJ_CALL(value = self->object.getGroups());
              return ::java::util::t_List::wrap_Object(value);
            }

            static int t_FunctionDistinctValuesCollector_set__nextReader(t_FunctionDistinctValuesCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/IntField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *IntField::class$ = NULL;
        jmethodID *IntField::mids$ = NULL;
        bool IntField::live$ = false;
        ::org::apache::lucene::document::FieldType *IntField::TYPE_NOT_STORED = NULL;
        ::org::apache::lucene::document::FieldType *IntField::TYPE_STORED = NULL;

        jclass IntField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/IntField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_80deeaab] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ILorg/apache/lucene/document/Field$Store;)V");
            mids$[mid_init$_919d88bc] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ILorg/apache/lucene/document/FieldType;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_NOT_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_NOT_STORED", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_STORED", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntField::IntField(const ::java::lang::String & a0, jint a1, const ::org::apache::lucene::document::Field$Store & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_80deeaab, a0.this$, a1, a2.this$)) {}

        IntField::IntField(const ::java::lang::String & a0, jint a1, const ::org::apache::lucene::document::FieldType & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_919d88bc, a0.this$, a1, a2.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_IntField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntField_init_(t_IntField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_IntField__methods_[] = {
          DECLARE_METHOD(t_IntField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntField, t_IntField, ::org::apache::lucene::document::Field, IntField, t_IntField_init_, 0, 0, 0, 0, 0);

        void t_IntField::install(PyObject *module)
        {
          installType(&PY_TYPE(IntField), module, "IntField", 0);
        }

        void t_IntField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntField).tp_dict, "class_", make_descriptor(IntField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntField).tp_dict, "wrapfn_", make_descriptor(t_IntField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IntField::initializeClass);
          PyDict_SetItemString(PY_TYPE(IntField).tp_dict, "TYPE_NOT_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*IntField::TYPE_NOT_STORED)));
          PyDict_SetItemString(PY_TYPE(IntField).tp_dict, "TYPE_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*IntField::TYPE_STORED)));
        }

        static PyObject *t_IntField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntField::initializeClass, 1)))
            return NULL;
          return t_IntField::wrap_Object(IntField(((t_IntField *) arg)->object.this$));
        }
        static PyObject *t_IntField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntField_init_(t_IntField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
              PyTypeObject **p2;
              IntField object((jobject) NULL);

              if (!parseArgs(args, "sIK", ::org::apache::lucene::document::Field$Store::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_))
              {
                INT_CALL(object = IntField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              IntField object((jobject) NULL);

              if (!parseArgs(args, "sIk", ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = IntField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *ProximityQueryNode$Type::class$ = NULL;
              jmethodID *ProximityQueryNode$Type::mids$ = NULL;
              bool ProximityQueryNode$Type::live$ = false;
              ProximityQueryNode$Type *ProximityQueryNode$Type::NUMBER = NULL;
              ProximityQueryNode$Type *ProximityQueryNode$Type::PARAGRAPH = NULL;
              ProximityQueryNode$Type *ProximityQueryNode$Type::SENTENCE = NULL;

              jclass ProximityQueryNode$Type::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_valueOf_e143b857] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;");
                  mids$[mid_values_83915b61] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  NUMBER = new ProximityQueryNode$Type(env->getStaticObjectField(cls, "NUMBER", "Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;"));
                  PARAGRAPH = new ProximityQueryNode$Type(env->getStaticObjectField(cls, "PARAGRAPH", "Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;"));
                  SENTENCE = new ProximityQueryNode$Type(env->getStaticObjectField(cls, "SENTENCE", "Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ProximityQueryNode$Type ProximityQueryNode$Type::valueOf(const ::java::lang::String & a0)
              {
                jclass cls = env->getClass(initializeClass);
                return ProximityQueryNode$Type(env->callStaticObjectMethod(cls, mids$[mid_valueOf_e143b857], a0.this$));
              }

              JArray< ProximityQueryNode$Type > ProximityQueryNode$Type::values()
              {
                jclass cls = env->getClass(initializeClass);
                return JArray< ProximityQueryNode$Type >(env->callStaticObjectMethod(cls, mids$[mid_values_83915b61]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_ProximityQueryNode$Type_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ProximityQueryNode$Type_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ProximityQueryNode$Type_of_(t_ProximityQueryNode$Type *self, PyObject *args);
              static PyObject *t_ProximityQueryNode$Type_valueOf(PyTypeObject *type, PyObject *args);
              static PyObject *t_ProximityQueryNode$Type_values(PyTypeObject *type);
              static PyObject *t_ProximityQueryNode$Type_get__parameters_(t_ProximityQueryNode$Type *self, void *data);
              static PyGetSetDef t_ProximityQueryNode$Type__fields_[] = {
                DECLARE_GET_FIELD(t_ProximityQueryNode$Type, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ProximityQueryNode$Type__methods_[] = {
                DECLARE_METHOD(t_ProximityQueryNode$Type, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ProximityQueryNode$Type, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ProximityQueryNode$Type, of_, METH_VARARGS),
                DECLARE_METHOD(t_ProximityQueryNode$Type, valueOf, METH_VARARGS | METH_CLASS),
                DECLARE_METHOD(t_ProximityQueryNode$Type, values, METH_NOARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ProximityQueryNode$Type, t_ProximityQueryNode$Type, ::java::lang::Enum, ProximityQueryNode$Type, abstract_init, 0, 0, t_ProximityQueryNode$Type__fields_, 0, 0);
              PyObject *t_ProximityQueryNode$Type::wrap_Object(const ProximityQueryNode$Type& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ProximityQueryNode$Type::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ProximityQueryNode$Type *self = (t_ProximityQueryNode$Type *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_ProximityQueryNode$Type::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ProximityQueryNode$Type::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ProximityQueryNode$Type *self = (t_ProximityQueryNode$Type *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_ProximityQueryNode$Type::install(PyObject *module)
              {
                installType(&PY_TYPE(ProximityQueryNode$Type), module, "ProximityQueryNode$Type", 0);
              }

              void t_ProximityQueryNode$Type::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$Type).tp_dict, "class_", make_descriptor(ProximityQueryNode$Type::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$Type).tp_dict, "wrapfn_", make_descriptor(t_ProximityQueryNode$Type::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$Type).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(ProximityQueryNode$Type::initializeClass);
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$Type).tp_dict, "NUMBER", make_descriptor(t_ProximityQueryNode$Type::wrap_Object(*ProximityQueryNode$Type::NUMBER)));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$Type).tp_dict, "PARAGRAPH", make_descriptor(t_ProximityQueryNode$Type::wrap_Object(*ProximityQueryNode$Type::PARAGRAPH)));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$Type).tp_dict, "SENTENCE", make_descriptor(t_ProximityQueryNode$Type::wrap_Object(*ProximityQueryNode$Type::SENTENCE)));
              }

              static PyObject *t_ProximityQueryNode$Type_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ProximityQueryNode$Type::initializeClass, 1)))
                  return NULL;
                return t_ProximityQueryNode$Type::wrap_Object(ProximityQueryNode$Type(((t_ProximityQueryNode$Type *) arg)->object.this$));
              }
              static PyObject *t_ProximityQueryNode$Type_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ProximityQueryNode$Type::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_ProximityQueryNode$Type_of_(t_ProximityQueryNode$Type *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_ProximityQueryNode$Type_valueOf(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::String a0((jobject) NULL);
                ProximityQueryNode$Type result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type::valueOf(a0));
                  return t_ProximityQueryNode$Type::wrap_Object(result);
                }

                return callSuper(type, "valueOf", args, 2);
              }

              static PyObject *t_ProximityQueryNode$Type_values(PyTypeObject *type)
              {
                JArray< ProximityQueryNode$Type > result((jobject) NULL);
                OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type::values());
                return JArray<jobject>(result.this$).wrap(t_ProximityQueryNode$Type::wrap_jobject);
              }
              static PyObject *t_ProximityQueryNode$Type_get__parameters_(t_ProximityQueryNode$Type *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianMinimalStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianMinimalStemmer::class$ = NULL;
          jmethodID *GalicianMinimalStemmer::mids$ = NULL;
          bool GalicianMinimalStemmer::live$ = false;

          jclass GalicianMinimalStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianMinimalStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianMinimalStemmer::GalicianMinimalStemmer() : ::org::apache::lucene::analysis::pt::RSLPStemmerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint GalicianMinimalStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianMinimalStemmer_init_(t_GalicianMinimalStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianMinimalStemmer_stem(t_GalicianMinimalStemmer *self, PyObject *args);

          static PyMethodDef t_GalicianMinimalStemmer__methods_[] = {
            DECLARE_METHOD(t_GalicianMinimalStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianMinimalStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianMinimalStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GalicianMinimalStemmer, t_GalicianMinimalStemmer, ::org::apache::lucene::analysis::pt::RSLPStemmerBase, GalicianMinimalStemmer, t_GalicianMinimalStemmer_init_, 0, 0, 0, 0, 0);

          void t_GalicianMinimalStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianMinimalStemmer), module, "GalicianMinimalStemmer", 0);
          }

          void t_GalicianMinimalStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemmer).tp_dict, "class_", make_descriptor(GalicianMinimalStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemmer).tp_dict, "wrapfn_", make_descriptor(t_GalicianMinimalStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GalicianMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianMinimalStemmer::initializeClass, 1)))
              return NULL;
            return t_GalicianMinimalStemmer::wrap_Object(GalicianMinimalStemmer(((t_GalicianMinimalStemmer *) arg)->object.this$));
          }
          static PyObject *t_GalicianMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianMinimalStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianMinimalStemmer_init_(t_GalicianMinimalStemmer *self, PyObject *args, PyObject *kwds)
          {
            GalicianMinimalStemmer object((jobject) NULL);

            INT_CALL(object = GalicianMinimalStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_GalicianMinimalStemmer_stem(t_GalicianMinimalStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QuotedFieldQueryNode.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *QuotedFieldQueryNode::class$ = NULL;
              jmethodID *QuotedFieldQueryNode::mids$ = NULL;
              bool QuotedFieldQueryNode::live$ = false;

              jclass QuotedFieldQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/QuotedFieldQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_ddd81d4e] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;II)V");
                  mids$[mid_cloneTree_e948922b] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QuotedFieldQueryNode;");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              QuotedFieldQueryNode::QuotedFieldQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1, jint a2, jint a3) : ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode(env->newObject(initializeClass, &mids$, mid_init$_ddd81d4e, a0.this$, a1.this$, a2, a3)) {}

              QuotedFieldQueryNode QuotedFieldQueryNode::cloneTree() const
              {
                return QuotedFieldQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_e948922b]));
              }

              ::java::lang::CharSequence QuotedFieldQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String QuotedFieldQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_QuotedFieldQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QuotedFieldQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_QuotedFieldQueryNode_init_(t_QuotedFieldQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_QuotedFieldQueryNode_cloneTree(t_QuotedFieldQueryNode *self, PyObject *args);
              static PyObject *t_QuotedFieldQueryNode_toQueryString(t_QuotedFieldQueryNode *self, PyObject *args);
              static PyObject *t_QuotedFieldQueryNode_toString(t_QuotedFieldQueryNode *self, PyObject *args);

              static PyMethodDef t_QuotedFieldQueryNode__methods_[] = {
                DECLARE_METHOD(t_QuotedFieldQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QuotedFieldQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QuotedFieldQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_QuotedFieldQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_QuotedFieldQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QuotedFieldQueryNode, t_QuotedFieldQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode, QuotedFieldQueryNode, t_QuotedFieldQueryNode_init_, 0, 0, 0, 0, 0);

              void t_QuotedFieldQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(QuotedFieldQueryNode), module, "QuotedFieldQueryNode", 0);
              }

              void t_QuotedFieldQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QuotedFieldQueryNode).tp_dict, "class_", make_descriptor(QuotedFieldQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QuotedFieldQueryNode).tp_dict, "wrapfn_", make_descriptor(t_QuotedFieldQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QuotedFieldQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QuotedFieldQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QuotedFieldQueryNode::initializeClass, 1)))
                  return NULL;
                return t_QuotedFieldQueryNode::wrap_Object(QuotedFieldQueryNode(((t_QuotedFieldQueryNode *) arg)->object.this$));
              }
              static PyObject *t_QuotedFieldQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QuotedFieldQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_QuotedFieldQueryNode_init_(t_QuotedFieldQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                jint a2;
                jint a3;
                QuotedFieldQueryNode object((jobject) NULL);

                if (!parseArgs(args, "OOII", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = QuotedFieldQueryNode(a0, a1, a2, a3));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_QuotedFieldQueryNode_cloneTree(t_QuotedFieldQueryNode *self, PyObject *args)
              {
                QuotedFieldQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_QuotedFieldQueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(QuotedFieldQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_QuotedFieldQueryNode_toQueryString(t_QuotedFieldQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(QuotedFieldQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_QuotedFieldQueryNode_toString(t_QuotedFieldQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(QuotedFieldQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/DoubleFieldSource.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/FieldCache$DoubleParser.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *DoubleFieldSource::class$ = NULL;
            jmethodID *DoubleFieldSource::mids$ = NULL;
            bool DoubleFieldSource::live$ = false;

            jclass DoubleFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/DoubleFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_5456b073] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$DoubleParser;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DoubleFieldSource::DoubleFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            DoubleFieldSource::DoubleFieldSource(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$DoubleParser & a1) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_5456b073, a0.this$, a1.this$)) {}

            ::java::lang::String DoubleFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean DoubleFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues DoubleFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint DoubleFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_DoubleFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DoubleFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DoubleFieldSource_init_(t_DoubleFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DoubleFieldSource_description(t_DoubleFieldSource *self, PyObject *args);
            static PyObject *t_DoubleFieldSource_equals(t_DoubleFieldSource *self, PyObject *args);
            static PyObject *t_DoubleFieldSource_getValues(t_DoubleFieldSource *self, PyObject *args);
            static PyObject *t_DoubleFieldSource_hashCode(t_DoubleFieldSource *self, PyObject *args);

            static PyMethodDef t_DoubleFieldSource__methods_[] = {
              DECLARE_METHOD(t_DoubleFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DoubleFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DoubleFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_DoubleFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_DoubleFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_DoubleFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DoubleFieldSource, t_DoubleFieldSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, DoubleFieldSource, t_DoubleFieldSource_init_, 0, 0, 0, 0, 0);

            void t_DoubleFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(DoubleFieldSource), module, "DoubleFieldSource", 0);
            }

            void t_DoubleFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DoubleFieldSource).tp_dict, "class_", make_descriptor(DoubleFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DoubleFieldSource).tp_dict, "wrapfn_", make_descriptor(t_DoubleFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DoubleFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DoubleFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DoubleFieldSource::initializeClass, 1)))
                return NULL;
              return t_DoubleFieldSource::wrap_Object(DoubleFieldSource(((t_DoubleFieldSource *) arg)->object.this$));
            }
            static PyObject *t_DoubleFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DoubleFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DoubleFieldSource_init_(t_DoubleFieldSource *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  DoubleFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = DoubleFieldSource(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::search::FieldCache$DoubleParser a1((jobject) NULL);
                  DoubleFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "sk", ::org::apache::lucene::search::FieldCache$DoubleParser::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = DoubleFieldSource(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DoubleFieldSource_description(t_DoubleFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DoubleFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_DoubleFieldSource_equals(t_DoubleFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DoubleFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_DoubleFieldSource_getValues(t_DoubleFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DoubleFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_DoubleFieldSource_hashCode(t_DoubleFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DoubleFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/EnglishMinimalStemFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *EnglishMinimalStemFilterFactory::class$ = NULL;
          jmethodID *EnglishMinimalStemFilterFactory::mids$ = NULL;
          bool EnglishMinimalStemFilterFactory::live$ = false;

          jclass EnglishMinimalStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/EnglishMinimalStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EnglishMinimalStemFilterFactory::EnglishMinimalStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream EnglishMinimalStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_EnglishMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EnglishMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EnglishMinimalStemFilterFactory_init_(t_EnglishMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EnglishMinimalStemFilterFactory_create(t_EnglishMinimalStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_EnglishMinimalStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_EnglishMinimalStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishMinimalStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishMinimalStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EnglishMinimalStemFilterFactory, t_EnglishMinimalStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, EnglishMinimalStemFilterFactory, t_EnglishMinimalStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_EnglishMinimalStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(EnglishMinimalStemFilterFactory), module, "EnglishMinimalStemFilterFactory", 0);
          }

          void t_EnglishMinimalStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemFilterFactory).tp_dict, "class_", make_descriptor(EnglishMinimalStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_EnglishMinimalStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EnglishMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EnglishMinimalStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_EnglishMinimalStemFilterFactory::wrap_Object(EnglishMinimalStemFilterFactory(((t_EnglishMinimalStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_EnglishMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EnglishMinimalStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EnglishMinimalStemFilterFactory_init_(t_EnglishMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            EnglishMinimalStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = EnglishMinimalStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EnglishMinimalStemFilterFactory_create(t_EnglishMinimalStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(EnglishMinimalStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiTermQuery$ConstantScoreAutoRewrite.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiTermQuery$ConstantScoreAutoRewrite::class$ = NULL;
        jmethodID *MultiTermQuery$ConstantScoreAutoRewrite::mids$ = NULL;
        bool MultiTermQuery$ConstantScoreAutoRewrite::live$ = false;

        jclass MultiTermQuery$ConstantScoreAutoRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiTermQuery$ConstantScoreAutoRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTermQuery$ConstantScoreAutoRewrite::MultiTermQuery$ConstantScoreAutoRewrite() : ::org::apache::lucene::search::ConstantScoreAutoRewrite(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite_of_(t_MultiTermQuery$ConstantScoreAutoRewrite *self, PyObject *args);
        static int t_MultiTermQuery$ConstantScoreAutoRewrite_init_(t_MultiTermQuery$ConstantScoreAutoRewrite *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite_get__parameters_(t_MultiTermQuery$ConstantScoreAutoRewrite *self, void *data);
        static PyGetSetDef t_MultiTermQuery$ConstantScoreAutoRewrite__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTermQuery$ConstantScoreAutoRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTermQuery$ConstantScoreAutoRewrite__methods_[] = {
          DECLARE_METHOD(t_MultiTermQuery$ConstantScoreAutoRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$ConstantScoreAutoRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$ConstantScoreAutoRewrite, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiTermQuery$ConstantScoreAutoRewrite, t_MultiTermQuery$ConstantScoreAutoRewrite, ::org::apache::lucene::search::ConstantScoreAutoRewrite, MultiTermQuery$ConstantScoreAutoRewrite, t_MultiTermQuery$ConstantScoreAutoRewrite_init_, 0, 0, t_MultiTermQuery$ConstantScoreAutoRewrite__fields_, 0, 0);
        PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite::wrap_Object(const MultiTermQuery$ConstantScoreAutoRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQuery$ConstantScoreAutoRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQuery$ConstantScoreAutoRewrite *self = (t_MultiTermQuery$ConstantScoreAutoRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQuery$ConstantScoreAutoRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQuery$ConstantScoreAutoRewrite *self = (t_MultiTermQuery$ConstantScoreAutoRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MultiTermQuery$ConstantScoreAutoRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermQuery$ConstantScoreAutoRewrite), module, "MultiTermQuery$ConstantScoreAutoRewrite", 0);
        }

        void t_MultiTermQuery$ConstantScoreAutoRewrite::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$ConstantScoreAutoRewrite).tp_dict, "class_", make_descriptor(MultiTermQuery$ConstantScoreAutoRewrite::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$ConstantScoreAutoRewrite).tp_dict, "wrapfn_", make_descriptor(t_MultiTermQuery$ConstantScoreAutoRewrite::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$ConstantScoreAutoRewrite).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermQuery$ConstantScoreAutoRewrite::initializeClass, 1)))
            return NULL;
          return t_MultiTermQuery$ConstantScoreAutoRewrite::wrap_Object(MultiTermQuery$ConstantScoreAutoRewrite(((t_MultiTermQuery$ConstantScoreAutoRewrite *) arg)->object.this$));
        }
        static PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermQuery$ConstantScoreAutoRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite_of_(t_MultiTermQuery$ConstantScoreAutoRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_MultiTermQuery$ConstantScoreAutoRewrite_init_(t_MultiTermQuery$ConstantScoreAutoRewrite *self, PyObject *args, PyObject *kwds)
        {
          MultiTermQuery$ConstantScoreAutoRewrite object((jobject) NULL);

          INT_CALL(object = MultiTermQuery$ConstantScoreAutoRewrite());
          self->object = object;
          self->parameters[0] = &::org::apache::lucene::search::PY_TYPE(BooleanQuery);

          return 0;
        }
        static PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite_get__parameters_(t_MultiTermQuery$ConstantScoreAutoRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefHash$DirectBytesStartArray.h"
#include "org/apache/lucene/util/Counter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefHash$DirectBytesStartArray::class$ = NULL;
        jmethodID *BytesRefHash$DirectBytesStartArray::mids$ = NULL;
        bool BytesRefHash$DirectBytesStartArray::live$ = false;

        jclass BytesRefHash$DirectBytesStartArray::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefHash$DirectBytesStartArray");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_395956a1] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/util/Counter;)V");
            mids$[mid_bytesUsed_781dd30a] = env->getMethodID(cls, "bytesUsed", "()Lorg/apache/lucene/util/Counter;");
            mids$[mid_clear_dab10e75] = env->getMethodID(cls, "clear", "()[I");
            mids$[mid_grow_dab10e75] = env->getMethodID(cls, "grow", "()[I");
            mids$[mid_init_dab10e75] = env->getMethodID(cls, "init", "()[I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BytesRefHash$DirectBytesStartArray::BytesRefHash$DirectBytesStartArray(jint a0) : ::org::apache::lucene::util::BytesRefHash$BytesStartArray(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        BytesRefHash$DirectBytesStartArray::BytesRefHash$DirectBytesStartArray(jint a0, const ::org::apache::lucene::util::Counter & a1) : ::org::apache::lucene::util::BytesRefHash$BytesStartArray(env->newObject(initializeClass, &mids$, mid_init$_395956a1, a0, a1.this$)) {}

        ::org::apache::lucene::util::Counter BytesRefHash$DirectBytesStartArray::bytesUsed() const
        {
          return ::org::apache::lucene::util::Counter(env->callObjectMethod(this$, mids$[mid_bytesUsed_781dd30a]));
        }

        JArray< jint > BytesRefHash$DirectBytesStartArray::clear() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_clear_dab10e75]));
        }

        JArray< jint > BytesRefHash$DirectBytesStartArray::grow() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_grow_dab10e75]));
        }

        JArray< jint > BytesRefHash$DirectBytesStartArray::init() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_init_dab10e75]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefHash$DirectBytesStartArray_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefHash$DirectBytesStartArray_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BytesRefHash$DirectBytesStartArray_init_(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BytesRefHash$DirectBytesStartArray_bytesUsed(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args);
        static PyObject *t_BytesRefHash$DirectBytesStartArray_clear(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args);
        static PyObject *t_BytesRefHash$DirectBytesStartArray_grow(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args);
        static PyObject *t_BytesRefHash$DirectBytesStartArray_init(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args);

        static PyMethodDef t_BytesRefHash$DirectBytesStartArray__methods_[] = {
          DECLARE_METHOD(t_BytesRefHash$DirectBytesStartArray, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash$DirectBytesStartArray, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash$DirectBytesStartArray, bytesUsed, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefHash$DirectBytesStartArray, clear, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefHash$DirectBytesStartArray, grow, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefHash$DirectBytesStartArray, init, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BytesRefHash$DirectBytesStartArray, t_BytesRefHash$DirectBytesStartArray, ::org::apache::lucene::util::BytesRefHash$BytesStartArray, BytesRefHash$DirectBytesStartArray, t_BytesRefHash$DirectBytesStartArray_init_, 0, 0, 0, 0, 0);

        void t_BytesRefHash$DirectBytesStartArray::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefHash$DirectBytesStartArray), module, "BytesRefHash$DirectBytesStartArray", 0);
        }

        void t_BytesRefHash$DirectBytesStartArray::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BytesRefHash$DirectBytesStartArray).tp_dict, "class_", make_descriptor(BytesRefHash$DirectBytesStartArray::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BytesRefHash$DirectBytesStartArray).tp_dict, "wrapfn_", make_descriptor(t_BytesRefHash$DirectBytesStartArray::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BytesRefHash$DirectBytesStartArray).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BytesRefHash$DirectBytesStartArray_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefHash$DirectBytesStartArray::initializeClass, 1)))
            return NULL;
          return t_BytesRefHash$DirectBytesStartArray::wrap_Object(BytesRefHash$DirectBytesStartArray(((t_BytesRefHash$DirectBytesStartArray *) arg)->object.this$));
        }
        static PyObject *t_BytesRefHash$DirectBytesStartArray_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefHash$DirectBytesStartArray::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BytesRefHash$DirectBytesStartArray_init_(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              BytesRefHash$DirectBytesStartArray object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = BytesRefHash$DirectBytesStartArray(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jint a0;
              ::org::apache::lucene::util::Counter a1((jobject) NULL);
              BytesRefHash$DirectBytesStartArray object((jobject) NULL);

              if (!parseArgs(args, "Ik", ::org::apache::lucene::util::Counter::initializeClass, &a0, &a1))
              {
                INT_CALL(object = BytesRefHash$DirectBytesStartArray(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BytesRefHash$DirectBytesStartArray_bytesUsed(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args)
        {
          ::org::apache::lucene::util::Counter result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.bytesUsed());
            return ::org::apache::lucene::util::t_Counter::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BytesRefHash$DirectBytesStartArray), (PyObject *) self, "bytesUsed", args, 2);
        }

        static PyObject *t_BytesRefHash$DirectBytesStartArray_clear(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args)
        {
          JArray< jint > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clear());
            return result.wrap();
          }

          return callSuper(&PY_TYPE(BytesRefHash$DirectBytesStartArray), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_BytesRefHash$DirectBytesStartArray_grow(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args)
        {
          JArray< jint > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.grow());
            return result.wrap();
          }

          return callSuper(&PY_TYPE(BytesRefHash$DirectBytesStartArray), (PyObject *) self, "grow", args, 2);
        }

        static PyObject *t_BytesRefHash$DirectBytesStartArray_init(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args)
        {
          JArray< jint > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.init());
            return result.wrap();
          }

          return callSuper(&PY_TYPE(BytesRefHash$DirectBytesStartArray), (PyObject *) self, "init", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TermStatistics::class$ = NULL;
        jmethodID *TermStatistics::mids$ = NULL;
        bool TermStatistics::live$ = false;

        jclass TermStatistics::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TermStatistics");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_b78af156] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BytesRef;JJ)V");
            mids$[mid_docFreq_54c6a17a] = env->getMethodID(cls, "docFreq", "()J");
            mids$[mid_term_4ae19461] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_totalTermFreq_54c6a17a] = env->getMethodID(cls, "totalTermFreq", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermStatistics::TermStatistics(const ::org::apache::lucene::util::BytesRef & a0, jlong a1, jlong a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b78af156, a0.this$, a1, a2)) {}

        jlong TermStatistics::docFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_docFreq_54c6a17a]);
        }

        ::org::apache::lucene::util::BytesRef TermStatistics::term() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_4ae19461]));
        }

        jlong TermStatistics::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TermStatistics_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermStatistics_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermStatistics_init_(t_TermStatistics *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermStatistics_docFreq(t_TermStatistics *self);
        static PyObject *t_TermStatistics_term(t_TermStatistics *self);
        static PyObject *t_TermStatistics_totalTermFreq(t_TermStatistics *self);

        static PyMethodDef t_TermStatistics__methods_[] = {
          DECLARE_METHOD(t_TermStatistics, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermStatistics, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermStatistics, docFreq, METH_NOARGS),
          DECLARE_METHOD(t_TermStatistics, term, METH_NOARGS),
          DECLARE_METHOD(t_TermStatistics, totalTermFreq, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermStatistics, t_TermStatistics, ::java::lang::Object, TermStatistics, t_TermStatistics_init_, 0, 0, 0, 0, 0);

        void t_TermStatistics::install(PyObject *module)
        {
          installType(&PY_TYPE(TermStatistics), module, "TermStatistics", 0);
        }

        void t_TermStatistics::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermStatistics).tp_dict, "class_", make_descriptor(TermStatistics::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermStatistics).tp_dict, "wrapfn_", make_descriptor(t_TermStatistics::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermStatistics).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermStatistics_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermStatistics::initializeClass, 1)))
            return NULL;
          return t_TermStatistics::wrap_Object(TermStatistics(((t_TermStatistics *) arg)->object.this$));
        }
        static PyObject *t_TermStatistics_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermStatistics::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermStatistics_init_(t_TermStatistics *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong a1;
          jlong a2;
          TermStatistics object((jobject) NULL);

          if (!parseArgs(args, "kJJ", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = TermStatistics(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermStatistics_docFreq(t_TermStatistics *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.docFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TermStatistics_term(t_TermStatistics *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.term());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_TermStatistics_totalTermFreq(t_TermStatistics *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.totalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacetSumIntAssociations.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyFacetSumIntAssociations::class$ = NULL;
          jmethodID *TaxonomyFacetSumIntAssociations::mids$ = NULL;
          bool TaxonomyFacetSumIntAssociations::live$ = false;

          jclass TaxonomyFacetSumIntAssociations::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyFacetSumIntAssociations");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_33dd1605] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");
              mids$[mid_init$_9888e06b] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TaxonomyFacetSumIntAssociations::TaxonomyFacetSumIntAssociations(const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::FacetsCollector & a2) : ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_33dd1605, a0.this$, a1.this$, a2.this$)) {}

          TaxonomyFacetSumIntAssociations::TaxonomyFacetSumIntAssociations(const ::java::lang::String & a0, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a1, const ::org::apache::lucene::facet::FacetsConfig & a2, const ::org::apache::lucene::facet::FacetsCollector & a3) : ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_9888e06b, a0.this$, a1.this$, a2.this$, a3.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyFacetSumIntAssociations_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacetSumIntAssociations_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TaxonomyFacetSumIntAssociations_init_(t_TaxonomyFacetSumIntAssociations *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_TaxonomyFacetSumIntAssociations__methods_[] = {
            DECLARE_METHOD(t_TaxonomyFacetSumIntAssociations, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacetSumIntAssociations, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyFacetSumIntAssociations, t_TaxonomyFacetSumIntAssociations, ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets, TaxonomyFacetSumIntAssociations, t_TaxonomyFacetSumIntAssociations_init_, 0, 0, 0, 0, 0);

          void t_TaxonomyFacetSumIntAssociations::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyFacetSumIntAssociations), module, "TaxonomyFacetSumIntAssociations", 0);
          }

          void t_TaxonomyFacetSumIntAssociations::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumIntAssociations).tp_dict, "class_", make_descriptor(TaxonomyFacetSumIntAssociations::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumIntAssociations).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyFacetSumIntAssociations::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumIntAssociations).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyFacetSumIntAssociations_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyFacetSumIntAssociations::initializeClass, 1)))
              return NULL;
            return t_TaxonomyFacetSumIntAssociations::wrap_Object(TaxonomyFacetSumIntAssociations(((t_TaxonomyFacetSumIntAssociations *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyFacetSumIntAssociations_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyFacetSumIntAssociations::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TaxonomyFacetSumIntAssociations_init_(t_TaxonomyFacetSumIntAssociations *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a0((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                TaxonomyFacetSumIntAssociations object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = TaxonomyFacetSumIntAssociations(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a2((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a3((jobject) NULL);
                TaxonomyFacetSumIntAssociations object((jobject) NULL);

                if (!parseArgs(args, "skkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = TaxonomyFacetSumIntAssociations(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Character.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Comparable.h"
#include "java/io/Serializable.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Character::class$ = NULL;
    jmethodID *Character::mids$ = NULL;
    bool Character::live$ = false;
    jint Character::BYTES = (jint) 0;
    jbyte Character::COMBINING_SPACING_MARK = (jbyte) 0;
    jbyte Character::CONNECTOR_PUNCTUATION = (jbyte) 0;
    jbyte Character::CONTROL = (jbyte) 0;
    jbyte Character::CURRENCY_SYMBOL = (jbyte) 0;
    jbyte Character::DASH_PUNCTUATION = (jbyte) 0;
    jbyte Character::DECIMAL_DIGIT_NUMBER = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_ARABIC_NUMBER = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_BOUNDARY_NEUTRAL = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_COMMON_NUMBER_SEPARATOR = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_EUROPEAN_NUMBER = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_LEFT_TO_RIGHT = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_NONSPACING_MARK = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_OTHER_NEUTRALS = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_PARAGRAPH_SEPARATOR = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_POP_DIRECTIONAL_FORMAT = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_RIGHT_TO_LEFT = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_SEGMENT_SEPARATOR = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_UNDEFINED = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_WHITESPACE = (jbyte) 0;
    jbyte Character::ENCLOSING_MARK = (jbyte) 0;
    jbyte Character::END_PUNCTUATION = (jbyte) 0;
    jbyte Character::FINAL_QUOTE_PUNCTUATION = (jbyte) 0;
    jbyte Character::FORMAT = (jbyte) 0;
    jbyte Character::INITIAL_QUOTE_PUNCTUATION = (jbyte) 0;
    jbyte Character::LETTER_NUMBER = (jbyte) 0;
    jbyte Character::LINE_SEPARATOR = (jbyte) 0;
    jbyte Character::LOWERCASE_LETTER = (jbyte) 0;
    jbyte Character::MATH_SYMBOL = (jbyte) 0;
    jint Character::MAX_CODE_POINT = (jint) 0;
    jchar Character::MAX_HIGH_SURROGATE = (jchar) 0;
    jchar Character::MAX_LOW_SURROGATE = (jchar) 0;
    jint Character::MAX_RADIX = (jint) 0;
    jchar Character::MAX_SURROGATE = (jchar) 0;
    jchar Character::MAX_VALUE = (jchar) 0;
    jint Character::MIN_CODE_POINT = (jint) 0;
    jchar Character::MIN_HIGH_SURROGATE = (jchar) 0;
    jchar Character::MIN_LOW_SURROGATE = (jchar) 0;
    jint Character::MIN_RADIX = (jint) 0;
    jint Character::MIN_SUPPLEMENTARY_CODE_POINT = (jint) 0;
    jchar Character::MIN_SURROGATE = (jchar) 0;
    jchar Character::MIN_VALUE = (jchar) 0;
    jbyte Character::MODIFIER_LETTER = (jbyte) 0;
    jbyte Character::MODIFIER_SYMBOL = (jbyte) 0;
    jbyte Character::NON_SPACING_MARK = (jbyte) 0;
    jbyte Character::OTHER_LETTER = (jbyte) 0;
    jbyte Character::OTHER_NUMBER = (jbyte) 0;
    jbyte Character::OTHER_PUNCTUATION = (jbyte) 0;
    jbyte Character::OTHER_SYMBOL = (jbyte) 0;
    jbyte Character::PARAGRAPH_SEPARATOR = (jbyte) 0;
    jbyte Character::PRIVATE_USE = (jbyte) 0;
    jint Character::SIZE = (jint) 0;
    jbyte Character::SPACE_SEPARATOR = (jbyte) 0;
    jbyte Character::START_PUNCTUATION = (jbyte) 0;
    jbyte Character::SURROGATE = (jbyte) 0;
    jbyte Character::TITLECASE_LETTER = (jbyte) 0;
    ::java::lang::Class *Character::TYPE = NULL;
    jbyte Character::UNASSIGNED = (jbyte) 0;
    jbyte Character::UPPERCASE_LETTER = (jbyte) 0;

    jclass Character::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Character");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_87fd545a] = env->getMethodID(cls, "<init>", "(C)V");
        mids$[mid_charCount_39c7bd23] = env->getStaticMethodID(cls, "charCount", "(I)I");
        mids$[mid_charValue_54c6a173] = env->getMethodID(cls, "charValue", "()C");
        mids$[mid_codePointAt_ec6430eb] = env->getStaticMethodID(cls, "codePointAt", "([CI)I");
        mids$[mid_codePointAt_2fbf15bf] = env->getStaticMethodID(cls, "codePointAt", "(Ljava/lang/CharSequence;I)I");
        mids$[mid_codePointAt_6f0bb349] = env->getStaticMethodID(cls, "codePointAt", "([CII)I");
        mids$[mid_codePointBefore_2fbf15bf] = env->getStaticMethodID(cls, "codePointBefore", "(Ljava/lang/CharSequence;I)I");
        mids$[mid_codePointBefore_ec6430eb] = env->getStaticMethodID(cls, "codePointBefore", "([CI)I");
        mids$[mid_codePointBefore_6f0bb349] = env->getStaticMethodID(cls, "codePointBefore", "([CII)I");
        mids$[mid_codePointCount_6f0bb349] = env->getStaticMethodID(cls, "codePointCount", "([CII)I");
        mids$[mid_codePointCount_6cc8d7fd] = env->getStaticMethodID(cls, "codePointCount", "(Ljava/lang/CharSequence;II)I");
        mids$[mid_compare_37c94831] = env->getStaticMethodID(cls, "compare", "(CC)I");
        mids$[mid_compareTo_35927258] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Character;)I");
        mids$[mid_digit_d8d154b9] = env->getStaticMethodID(cls, "digit", "(II)I");
        mids$[mid_digit_3108448f] = env->getStaticMethodID(cls, "digit", "(CI)I");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_forDigit_d8d154b3] = env->getStaticMethodID(cls, "forDigit", "(II)C");
        mids$[mid_getDirectionality_87fd544e] = env->getStaticMethodID(cls, "getDirectionality", "(C)B");
        mids$[mid_getDirectionality_39c7bd28] = env->getStaticMethodID(cls, "getDirectionality", "(I)B");
        mids$[mid_getName_141401b3] = env->getStaticMethodID(cls, "getName", "(I)Ljava/lang/String;");
        mids$[mid_getNumericValue_87fd5445] = env->getStaticMethodID(cls, "getNumericValue", "(C)I");
        mids$[mid_getNumericValue_39c7bd23] = env->getStaticMethodID(cls, "getNumericValue", "(I)I");
        mids$[mid_getType_87fd5445] = env->getStaticMethodID(cls, "getType", "(C)I");
        mids$[mid_getType_39c7bd23] = env->getStaticMethodID(cls, "getType", "(I)I");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_hashCode_87fd5445] = env->getStaticMethodID(cls, "hashCode", "(C)I");
        mids$[mid_highSurrogate_39c7bd29] = env->getStaticMethodID(cls, "highSurrogate", "(I)C");
        mids$[mid_isAlphabetic_39c7bd30] = env->getStaticMethodID(cls, "isAlphabetic", "(I)Z");
        mids$[mid_isBmpCodePoint_39c7bd30] = env->getStaticMethodID(cls, "isBmpCodePoint", "(I)Z");
        mids$[mid_isDefined_87fd5456] = env->getStaticMethodID(cls, "isDefined", "(C)Z");
        mids$[mid_isDefined_39c7bd30] = env->getStaticMethodID(cls, "isDefined", "(I)Z");
        mids$[mid_isDigit_87fd5456] = env->getStaticMethodID(cls, "isDigit", "(C)Z");
        mids$[mid_isDigit_39c7bd30] = env->getStaticMethodID(cls, "isDigit", "(I)Z");
        mids$[mid_isHighSurrogate_87fd5456] = env->getStaticMethodID(cls, "isHighSurrogate", "(C)Z");
        mids$[mid_isISOControl_87fd5456] = env->getStaticMethodID(cls, "isISOControl", "(C)Z");
        mids$[mid_isISOControl_39c7bd30] = env->getStaticMethodID(cls, "isISOControl", "(I)Z");
        mids$[mid_isIdentifierIgnorable_39c7bd30] = env->getStaticMethodID(cls, "isIdentifierIgnorable", "(I)Z");
        mids$[mid_isIdentifierIgnorable_87fd5456] = env->getStaticMethodID(cls, "isIdentifierIgnorable", "(C)Z");
        mids$[mid_isIdeographic_39c7bd30] = env->getStaticMethodID(cls, "isIdeographic", "(I)Z");
        mids$[mid_isJavaIdentifierPart_39c7bd30] = env->getStaticMethodID(cls, "isJavaIdentifierPart", "(I)Z");
        mids$[mid_isJavaIdentifierPart_87fd5456] = env->getStaticMethodID(cls, "isJavaIdentifierPart", "(C)Z");
        mids$[mid_isJavaIdentifierStart_39c7bd30] = env->getStaticMethodID(cls, "isJavaIdentifierStart", "(I)Z");
        mids$[mid_isJavaIdentifierStart_87fd5456] = env->getStaticMethodID(cls, "isJavaIdentifierStart", "(C)Z");
        mids$[mid_isJavaLetter_87fd5456] = env->getStaticMethodID(cls, "isJavaLetter", "(C)Z");
        mids$[mid_isJavaLetterOrDigit_87fd5456] = env->getStaticMethodID(cls, "isJavaLetterOrDigit", "(C)Z");
        mids$[mid_isLetter_87fd5456] = env->getStaticMethodID(cls, "isLetter", "(C)Z");
        mids$[mid_isLetter_39c7bd30] = env->getStaticMethodID(cls, "isLetter", "(I)Z");
        mids$[mid_isLetterOrDigit_39c7bd30] = env->getStaticMethodID(cls, "isLetterOrDigit", "(I)Z");
        mids$[mid_isLetterOrDigit_87fd5456] = env->getStaticMethodID(cls, "isLetterOrDigit", "(C)Z");
        mids$[mid_isLowSurrogate_87fd5456] = env->getStaticMethodID(cls, "isLowSurrogate", "(C)Z");
        mids$[mid_isLowerCase_39c7bd30] = env->getStaticMethodID(cls, "isLowerCase", "(I)Z");
        mids$[mid_isLowerCase_87fd5456] = env->getStaticMethodID(cls, "isLowerCase", "(C)Z");
        mids$[mid_isMirrored_39c7bd30] = env->getStaticMethodID(cls, "isMirrored", "(I)Z");
        mids$[mid_isMirrored_87fd5456] = env->getStaticMethodID(cls, "isMirrored", "(C)Z");
        mids$[mid_isSpace_87fd5456] = env->getStaticMethodID(cls, "isSpace", "(C)Z");
        mids$[mid_isSpaceChar_39c7bd30] = env->getStaticMethodID(cls, "isSpaceChar", "(I)Z");
        mids$[mid_isSpaceChar_87fd5456] = env->getStaticMethodID(cls, "isSpaceChar", "(C)Z");
        mids$[mid_isSupplementaryCodePoint_39c7bd30] = env->getStaticMethodID(cls, "isSupplementaryCodePoint", "(I)Z");
        mids$[mid_isSurrogate_87fd5456] = env->getStaticMethodID(cls, "isSurrogate", "(C)Z");
        mids$[mid_isSurrogatePair_37c94822] = env->getStaticMethodID(cls, "isSurrogatePair", "(CC)Z");
        mids$[mid_isTitleCase_39c7bd30] = env->getStaticMethodID(cls, "isTitleCase", "(I)Z");
        mids$[mid_isTitleCase_87fd5456] = env->getStaticMethodID(cls, "isTitleCase", "(C)Z");
        mids$[mid_isUnicodeIdentifierPart_87fd5456] = env->getStaticMethodID(cls, "isUnicodeIdentifierPart", "(C)Z");
        mids$[mid_isUnicodeIdentifierPart_39c7bd30] = env->getStaticMethodID(cls, "isUnicodeIdentifierPart", "(I)Z");
        mids$[mid_isUnicodeIdentifierStart_39c7bd30] = env->getStaticMethodID(cls, "isUnicodeIdentifierStart", "(I)Z");
        mids$[mid_isUnicodeIdentifierStart_87fd5456] = env->getStaticMethodID(cls, "isUnicodeIdentifierStart", "(C)Z");
        mids$[mid_isUpperCase_39c7bd30] = env->getStaticMethodID(cls, "isUpperCase", "(I)Z");
        mids$[mid_isUpperCase_87fd5456] = env->getStaticMethodID(cls, "isUpperCase", "(C)Z");
        mids$[mid_isValidCodePoint_39c7bd30] = env->getStaticMethodID(cls, "isValidCodePoint", "(I)Z");
        mids$[mid_isWhitespace_39c7bd30] = env->getStaticMethodID(cls, "isWhitespace", "(I)Z");
        mids$[mid_isWhitespace_87fd5456] = env->getStaticMethodID(cls, "isWhitespace", "(C)Z");
        mids$[mid_lowSurrogate_39c7bd29] = env->getStaticMethodID(cls, "lowSurrogate", "(I)C");
        mids$[mid_offsetByCodePoints_6cc8d7fd] = env->getStaticMethodID(cls, "offsetByCodePoints", "(Ljava/lang/CharSequence;II)I");
        mids$[mid_offsetByCodePoints_f453ace9] = env->getStaticMethodID(cls, "offsetByCodePoints", "([CIIII)I");
        mids$[mid_reverseBytes_87fd544f] = env->getStaticMethodID(cls, "reverseBytes", "(C)C");
        mids$[mid_toChars_b4292e99] = env->getStaticMethodID(cls, "toChars", "(I)[C");
        mids$[mid_toChars_273c5d2d] = env->getStaticMethodID(cls, "toChars", "(I[CI)I");
        mids$[mid_toCodePoint_37c94831] = env->getStaticMethodID(cls, "toCodePoint", "(CC)I");
        mids$[mid_toLowerCase_39c7bd23] = env->getStaticMethodID(cls, "toLowerCase", "(I)I");
        mids$[mid_toLowerCase_87fd544f] = env->getStaticMethodID(cls, "toLowerCase", "(C)C");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_7611a535] = env->getStaticMethodID(cls, "toString", "(C)Ljava/lang/String;");
        mids$[mid_toTitleCase_87fd544f] = env->getStaticMethodID(cls, "toTitleCase", "(C)C");
        mids$[mid_toTitleCase_39c7bd23] = env->getStaticMethodID(cls, "toTitleCase", "(I)I");
        mids$[mid_toUpperCase_39c7bd23] = env->getStaticMethodID(cls, "toUpperCase", "(I)I");
        mids$[mid_toUpperCase_87fd544f] = env->getStaticMethodID(cls, "toUpperCase", "(C)C");
        mids$[mid_valueOf_58724da6] = env->getStaticMethodID(cls, "valueOf", "(C)Ljava/lang/Character;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        BYTES = env->getStaticIntField(cls, "BYTES");
        COMBINING_SPACING_MARK = env->getStaticByteField(cls, "COMBINING_SPACING_MARK");
        CONNECTOR_PUNCTUATION = env->getStaticByteField(cls, "CONNECTOR_PUNCTUATION");
        CONTROL = env->getStaticByteField(cls, "CONTROL");
        CURRENCY_SYMBOL = env->getStaticByteField(cls, "CURRENCY_SYMBOL");
        DASH_PUNCTUATION = env->getStaticByteField(cls, "DASH_PUNCTUATION");
        DECIMAL_DIGIT_NUMBER = env->getStaticByteField(cls, "DECIMAL_DIGIT_NUMBER");
        DIRECTIONALITY_ARABIC_NUMBER = env->getStaticByteField(cls, "DIRECTIONALITY_ARABIC_NUMBER");
        DIRECTIONALITY_BOUNDARY_NEUTRAL = env->getStaticByteField(cls, "DIRECTIONALITY_BOUNDARY_NEUTRAL");
        DIRECTIONALITY_COMMON_NUMBER_SEPARATOR = env->getStaticByteField(cls, "DIRECTIONALITY_COMMON_NUMBER_SEPARATOR");
        DIRECTIONALITY_EUROPEAN_NUMBER = env->getStaticByteField(cls, "DIRECTIONALITY_EUROPEAN_NUMBER");
        DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR = env->getStaticByteField(cls, "DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR");
        DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR = env->getStaticByteField(cls, "DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR");
        DIRECTIONALITY_LEFT_TO_RIGHT = env->getStaticByteField(cls, "DIRECTIONALITY_LEFT_TO_RIGHT");
        DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING = env->getStaticByteField(cls, "DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING");
        DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE = env->getStaticByteField(cls, "DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE");
        DIRECTIONALITY_NONSPACING_MARK = env->getStaticByteField(cls, "DIRECTIONALITY_NONSPACING_MARK");
        DIRECTIONALITY_OTHER_NEUTRALS = env->getStaticByteField(cls, "DIRECTIONALITY_OTHER_NEUTRALS");
        DIRECTIONALITY_PARAGRAPH_SEPARATOR = env->getStaticByteField(cls, "DIRECTIONALITY_PARAGRAPH_SEPARATOR");
        DIRECTIONALITY_POP_DIRECTIONAL_FORMAT = env->getStaticByteField(cls, "DIRECTIONALITY_POP_DIRECTIONAL_FORMAT");
        DIRECTIONALITY_RIGHT_TO_LEFT = env->getStaticByteField(cls, "DIRECTIONALITY_RIGHT_TO_LEFT");
        DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC = env->getStaticByteField(cls, "DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC");
        DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING = env->getStaticByteField(cls, "DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING");
        DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE = env->getStaticByteField(cls, "DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE");
        DIRECTIONALITY_SEGMENT_SEPARATOR = env->getStaticByteField(cls, "DIRECTIONALITY_SEGMENT_SEPARATOR");
        DIRECTIONALITY_UNDEFINED = env->getStaticByteField(cls, "DIRECTIONALITY_UNDEFINED");
        DIRECTIONALITY_WHITESPACE = env->getStaticByteField(cls, "DIRECTIONALITY_WHITESPACE");
        ENCLOSING_MARK = env->getStaticByteField(cls, "ENCLOSING_MARK");
        END_PUNCTUATION = env->getStaticByteField(cls, "END_PUNCTUATION");
        FINAL_QUOTE_PUNCTUATION = env->getStaticByteField(cls, "FINAL_QUOTE_PUNCTUATION");
        FORMAT = env->getStaticByteField(cls, "FORMAT");
        INITIAL_QUOTE_PUNCTUATION = env->getStaticByteField(cls, "INITIAL_QUOTE_PUNCTUATION");
        LETTER_NUMBER = env->getStaticByteField(cls, "LETTER_NUMBER");
        LINE_SEPARATOR = env->getStaticByteField(cls, "LINE_SEPARATOR");
        LOWERCASE_LETTER = env->getStaticByteField(cls, "LOWERCASE_LETTER");
        MATH_SYMBOL = env->getStaticByteField(cls, "MATH_SYMBOL");
        MAX_CODE_POINT = env->getStaticIntField(cls, "MAX_CODE_POINT");
        MAX_HIGH_SURROGATE = env->getStaticCharField(cls, "MAX_HIGH_SURROGATE");
        MAX_LOW_SURROGATE = env->getStaticCharField(cls, "MAX_LOW_SURROGATE");
        MAX_RADIX = env->getStaticIntField(cls, "MAX_RADIX");
        MAX_SURROGATE = env->getStaticCharField(cls, "MAX_SURROGATE");
        MAX_VALUE = env->getStaticCharField(cls, "MAX_VALUE");
        MIN_CODE_POINT = env->getStaticIntField(cls, "MIN_CODE_POINT");
        MIN_HIGH_SURROGATE = env->getStaticCharField(cls, "MIN_HIGH_SURROGATE");
        MIN_LOW_SURROGATE = env->getStaticCharField(cls, "MIN_LOW_SURROGATE");
        MIN_RADIX = env->getStaticIntField(cls, "MIN_RADIX");
        MIN_SUPPLEMENTARY_CODE_POINT = env->getStaticIntField(cls, "MIN_SUPPLEMENTARY_CODE_POINT");
        MIN_SURROGATE = env->getStaticCharField(cls, "MIN_SURROGATE");
        MIN_VALUE = env->getStaticCharField(cls, "MIN_VALUE");
        MODIFIER_LETTER = env->getStaticByteField(cls, "MODIFIER_LETTER");
        MODIFIER_SYMBOL = env->getStaticByteField(cls, "MODIFIER_SYMBOL");
        NON_SPACING_MARK = env->getStaticByteField(cls, "NON_SPACING_MARK");
        OTHER_LETTER = env->getStaticByteField(cls, "OTHER_LETTER");
        OTHER_NUMBER = env->getStaticByteField(cls, "OTHER_NUMBER");
        OTHER_PUNCTUATION = env->getStaticByteField(cls, "OTHER_PUNCTUATION");
        OTHER_SYMBOL = env->getStaticByteField(cls, "OTHER_SYMBOL");
        PARAGRAPH_SEPARATOR = env->getStaticByteField(cls, "PARAGRAPH_SEPARATOR");
        PRIVATE_USE = env->getStaticByteField(cls, "PRIVATE_USE");
        SIZE = env->getStaticIntField(cls, "SIZE");
        SPACE_SEPARATOR = env->getStaticByteField(cls, "SPACE_SEPARATOR");
        START_PUNCTUATION = env->getStaticByteField(cls, "START_PUNCTUATION");
        SURROGATE = env->getStaticByteField(cls, "SURROGATE");
        TITLECASE_LETTER = env->getStaticByteField(cls, "TITLECASE_LETTER");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        UNASSIGNED = env->getStaticByteField(cls, "UNASSIGNED");
        UPPERCASE_LETTER = env->getStaticByteField(cls, "UPPERCASE_LETTER");
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Character::Character(jchar a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_87fd545a, a0)) {}

    jint Character::charCount(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_charCount_39c7bd23], a0);
    }

    jchar Character::charValue() const
    {
      return env->callCharMethod(this$, mids$[mid_charValue_54c6a173]);
    }

    jint Character::codePointAt(const JArray< jchar > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointAt_ec6430eb], a0.this$, a1);
    }

    jint Character::codePointAt(const ::java::lang::CharSequence & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointAt_2fbf15bf], a0.this$, a1);
    }

    jint Character::codePointAt(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointAt_6f0bb349], a0.this$, a1, a2);
    }

    jint Character::codePointBefore(const ::java::lang::CharSequence & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointBefore_2fbf15bf], a0.this$, a1);
    }

    jint Character::codePointBefore(const JArray< jchar > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointBefore_ec6430eb], a0.this$, a1);
    }

    jint Character::codePointBefore(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointBefore_6f0bb349], a0.this$, a1, a2);
    }

    jint Character::codePointCount(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointCount_6f0bb349], a0.this$, a1, a2);
    }

    jint Character::codePointCount(const ::java::lang::CharSequence & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointCount_6cc8d7fd], a0.this$, a1, a2);
    }

    jint Character::compare(jchar a0, jchar a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_37c94831], a0, a1);
    }

    jint Character::compareTo(const Character & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_35927258], a0.this$);
    }

    jint Character::digit(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_digit_d8d154b9], a0, a1);
    }

    jint Character::digit(jchar a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_digit_3108448f], a0, a1);
    }

    jboolean Character::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jchar Character::forDigit(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_forDigit_d8d154b3], a0, a1);
    }

    jbyte Character::getDirectionality(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticByteMethod(cls, mids$[mid_getDirectionality_87fd544e], a0);
    }

    jbyte Character::getDirectionality(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticByteMethod(cls, mids$[mid_getDirectionality_39c7bd28], a0);
    }

    ::java::lang::String Character::getName(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getName_141401b3], a0));
    }

    jint Character::getNumericValue(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_getNumericValue_87fd5445], a0);
    }

    jint Character::getNumericValue(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_getNumericValue_39c7bd23], a0);
    }

    jint Character::getType(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_getType_87fd5445], a0);
    }

    jint Character::getType(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_getType_39c7bd23], a0);
    }

    jint Character::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jint Character::hashCode(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_87fd5445], a0);
    }

    jchar Character::highSurrogate(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_highSurrogate_39c7bd29], a0);
    }

    jboolean Character::isAlphabetic(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isAlphabetic_39c7bd30], a0);
    }

    jboolean Character::isBmpCodePoint(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isBmpCodePoint_39c7bd30], a0);
    }

    jboolean Character::isDefined(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isDefined_87fd5456], a0);
    }

    jboolean Character::isDefined(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isDefined_39c7bd30], a0);
    }

    jboolean Character::isDigit(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isDigit_87fd5456], a0);
    }

    jboolean Character::isDigit(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isDigit_39c7bd30], a0);
    }

    jboolean Character::isHighSurrogate(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isHighSurrogate_87fd5456], a0);
    }

    jboolean Character::isISOControl(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isISOControl_87fd5456], a0);
    }

    jboolean Character::isISOControl(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isISOControl_39c7bd30], a0);
    }

    jboolean Character::isIdentifierIgnorable(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isIdentifierIgnorable_39c7bd30], a0);
    }

    jboolean Character::isIdentifierIgnorable(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isIdentifierIgnorable_87fd5456], a0);
    }

    jboolean Character::isIdeographic(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isIdeographic_39c7bd30], a0);
    }

    jboolean Character::isJavaIdentifierPart(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaIdentifierPart_39c7bd30], a0);
    }

    jboolean Character::isJavaIdentifierPart(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaIdentifierPart_87fd5456], a0);
    }

    jboolean Character::isJavaIdentifierStart(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaIdentifierStart_39c7bd30], a0);
    }

    jboolean Character::isJavaIdentifierStart(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaIdentifierStart_87fd5456], a0);
    }

    jboolean Character::isJavaLetter(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaLetter_87fd5456], a0);
    }

    jboolean Character::isJavaLetterOrDigit(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaLetterOrDigit_87fd5456], a0);
    }

    jboolean Character::isLetter(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLetter_87fd5456], a0);
    }

    jboolean Character::isLetter(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLetter_39c7bd30], a0);
    }

    jboolean Character::isLetterOrDigit(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLetterOrDigit_39c7bd30], a0);
    }

    jboolean Character::isLetterOrDigit(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLetterOrDigit_87fd5456], a0);
    }

    jboolean Character::isLowSurrogate(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLowSurrogate_87fd5456], a0);
    }

    jboolean Character::isLowerCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLowerCase_39c7bd30], a0);
    }

    jboolean Character::isLowerCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLowerCase_87fd5456], a0);
    }

    jboolean Character::isMirrored(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isMirrored_39c7bd30], a0);
    }

    jboolean Character::isMirrored(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isMirrored_87fd5456], a0);
    }

    jboolean Character::isSpace(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSpace_87fd5456], a0);
    }

    jboolean Character::isSpaceChar(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSpaceChar_39c7bd30], a0);
    }

    jboolean Character::isSpaceChar(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSpaceChar_87fd5456], a0);
    }

    jboolean Character::isSupplementaryCodePoint(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSupplementaryCodePoint_39c7bd30], a0);
    }

    jboolean Character::isSurrogate(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSurrogate_87fd5456], a0);
    }

    jboolean Character::isSurrogatePair(jchar a0, jchar a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSurrogatePair_37c94822], a0, a1);
    }

    jboolean Character::isTitleCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isTitleCase_39c7bd30], a0);
    }

    jboolean Character::isTitleCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isTitleCase_87fd5456], a0);
    }

    jboolean Character::isUnicodeIdentifierPart(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUnicodeIdentifierPart_87fd5456], a0);
    }

    jboolean Character::isUnicodeIdentifierPart(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUnicodeIdentifierPart_39c7bd30], a0);
    }

    jboolean Character::isUnicodeIdentifierStart(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUnicodeIdentifierStart_39c7bd30], a0);
    }

    jboolean Character::isUnicodeIdentifierStart(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUnicodeIdentifierStart_87fd5456], a0);
    }

    jboolean Character::isUpperCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUpperCase_39c7bd30], a0);
    }

    jboolean Character::isUpperCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUpperCase_87fd5456], a0);
    }

    jboolean Character::isValidCodePoint(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isValidCodePoint_39c7bd30], a0);
    }

    jboolean Character::isWhitespace(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isWhitespace_39c7bd30], a0);
    }

    jboolean Character::isWhitespace(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isWhitespace_87fd5456], a0);
    }

    jchar Character::lowSurrogate(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_lowSurrogate_39c7bd29], a0);
    }

    jint Character::offsetByCodePoints(const ::java::lang::CharSequence & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_offsetByCodePoints_6cc8d7fd], a0.this$, a1, a2);
    }

    jint Character::offsetByCodePoints(const JArray< jchar > & a0, jint a1, jint a2, jint a3, jint a4)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_offsetByCodePoints_f453ace9], a0.this$, a1, a2, a3, a4);
    }

    jchar Character::reverseBytes(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_reverseBytes_87fd544f], a0);
    }

    JArray< jchar > Character::toChars(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jchar >(env->callStaticObjectMethod(cls, mids$[mid_toChars_b4292e99], a0));
    }

    jint Character::toChars(jint a0, const JArray< jchar > & a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toChars_273c5d2d], a0, a1.this$, a2);
    }

    jint Character::toCodePoint(jchar a0, jchar a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toCodePoint_37c94831], a0, a1);
    }

    jint Character::toLowerCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toLowerCase_39c7bd23], a0);
    }

    jchar Character::toLowerCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_toLowerCase_87fd544f], a0);
    }

    ::java::lang::String Character::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Character::toString(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_7611a535], a0));
    }

    jchar Character::toTitleCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_toTitleCase_87fd544f], a0);
    }

    jint Character::toTitleCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toTitleCase_39c7bd23], a0);
    }

    jint Character::toUpperCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toUpperCase_39c7bd23], a0);
    }

    jchar Character::toUpperCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_toUpperCase_87fd544f], a0);
    }

    Character Character::valueOf(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Character(env->callStaticObjectMethod(cls, mids$[mid_valueOf_58724da6], a0));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Character_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Character_init_(t_Character *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Character_charCount(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_charValue(t_Character *self);
    static PyObject *t_Character_codePointAt(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_codePointBefore(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_codePointCount(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_compareTo(t_Character *self, PyObject *arg);
    static PyObject *t_Character_digit(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_equals(t_Character *self, PyObject *args);
    static PyObject *t_Character_forDigit(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_getDirectionality(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_getName(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_getNumericValue(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_getType(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_hashCode(t_Character *self, PyObject *args);
    static PyObject *t_Character_hashCode_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_highSurrogate(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isAlphabetic(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isBmpCodePoint(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isDefined(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isDigit(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isHighSurrogate(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isISOControl(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isIdentifierIgnorable(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isIdeographic(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isJavaIdentifierPart(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isJavaIdentifierStart(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isJavaLetter(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isJavaLetterOrDigit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isLetter(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isLetterOrDigit(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isLowSurrogate(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isLowerCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isMirrored(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isSpace(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isSpaceChar(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isSupplementaryCodePoint(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isSurrogate(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isSurrogatePair(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isTitleCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isUnicodeIdentifierPart(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isUnicodeIdentifierStart(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isUpperCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isValidCodePoint(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isWhitespace(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_lowSurrogate(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_offsetByCodePoints(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_reverseBytes(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_toChars(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_toCodePoint(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_toLowerCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_toString(t_Character *self, PyObject *args);
    static PyObject *t_Character_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_toTitleCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_toUpperCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_valueOf(PyTypeObject *type, PyObject *arg);

    static PyMethodDef t_Character__methods_[] = {
      DECLARE_METHOD(t_Character, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, charCount, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, charValue, METH_NOARGS),
      DECLARE_METHOD(t_Character, codePointAt, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, codePointBefore, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, codePointCount, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, compareTo, METH_O),
      DECLARE_METHOD(t_Character, digit, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, equals, METH_VARARGS),
      DECLARE_METHOD(t_Character, forDigit, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, getDirectionality, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, getName, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, getNumericValue, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, getType, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Character, hashCode_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, highSurrogate, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isAlphabetic, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isBmpCodePoint, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isDefined, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isDigit, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isHighSurrogate, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isISOControl, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isIdentifierIgnorable, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isIdeographic, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isJavaIdentifierPart, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isJavaIdentifierStart, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isJavaLetter, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isJavaLetterOrDigit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isLetter, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isLetterOrDigit, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isLowSurrogate, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isLowerCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isMirrored, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isSpace, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isSpaceChar, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isSupplementaryCodePoint, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isSurrogate, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isSurrogatePair, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isTitleCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isUnicodeIdentifierPart, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isUnicodeIdentifierStart, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isUpperCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isValidCodePoint, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isWhitespace, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, lowSurrogate, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, offsetByCodePoints, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, reverseBytes, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, toChars, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, toCodePoint, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, toLowerCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, toString, METH_VARARGS),
      DECLARE_METHOD(t_Character, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, toTitleCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, toUpperCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, valueOf, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Character, t_Character, ::java::lang::Object, Character, t_Character_init_, 0, 0, 0, 0, 0);

    void t_Character::install(PyObject *module)
    {
      installType(&PY_TYPE(Character), module, "Character", 0);
    }

    void t_Character::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "class_", make_descriptor(Character::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "wrapfn_", make_descriptor(unboxCharacter));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "boxfn_", make_descriptor(boxCharacter));
      env->getClass(Character::initializeClass);
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "BYTES", make_descriptor(Character::BYTES));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "COMBINING_SPACING_MARK", make_descriptor(Character::COMBINING_SPACING_MARK));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "CONNECTOR_PUNCTUATION", make_descriptor(Character::CONNECTOR_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "CONTROL", make_descriptor(Character::CONTROL));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "CURRENCY_SYMBOL", make_descriptor(Character::CURRENCY_SYMBOL));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DASH_PUNCTUATION", make_descriptor(Character::DASH_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DECIMAL_DIGIT_NUMBER", make_descriptor(Character::DECIMAL_DIGIT_NUMBER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_ARABIC_NUMBER", make_descriptor(Character::DIRECTIONALITY_ARABIC_NUMBER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_BOUNDARY_NEUTRAL", make_descriptor(Character::DIRECTIONALITY_BOUNDARY_NEUTRAL));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_COMMON_NUMBER_SEPARATOR", make_descriptor(Character::DIRECTIONALITY_COMMON_NUMBER_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_EUROPEAN_NUMBER", make_descriptor(Character::DIRECTIONALITY_EUROPEAN_NUMBER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR", make_descriptor(Character::DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR", make_descriptor(Character::DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_LEFT_TO_RIGHT", make_descriptor(Character::DIRECTIONALITY_LEFT_TO_RIGHT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING", make_descriptor(Character::DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE", make_descriptor(Character::DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_NONSPACING_MARK", make_descriptor(Character::DIRECTIONALITY_NONSPACING_MARK));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_OTHER_NEUTRALS", make_descriptor(Character::DIRECTIONALITY_OTHER_NEUTRALS));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_PARAGRAPH_SEPARATOR", make_descriptor(Character::DIRECTIONALITY_PARAGRAPH_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_POP_DIRECTIONAL_FORMAT", make_descriptor(Character::DIRECTIONALITY_POP_DIRECTIONAL_FORMAT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_RIGHT_TO_LEFT", make_descriptor(Character::DIRECTIONALITY_RIGHT_TO_LEFT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC", make_descriptor(Character::DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING", make_descriptor(Character::DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE", make_descriptor(Character::DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_SEGMENT_SEPARATOR", make_descriptor(Character::DIRECTIONALITY_SEGMENT_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_UNDEFINED", make_descriptor(Character::DIRECTIONALITY_UNDEFINED));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_WHITESPACE", make_descriptor(Character::DIRECTIONALITY_WHITESPACE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "ENCLOSING_MARK", make_descriptor(Character::ENCLOSING_MARK));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "END_PUNCTUATION", make_descriptor(Character::END_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "FINAL_QUOTE_PUNCTUATION", make_descriptor(Character::FINAL_QUOTE_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "FORMAT", make_descriptor(Character::FORMAT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "INITIAL_QUOTE_PUNCTUATION", make_descriptor(Character::INITIAL_QUOTE_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "LETTER_NUMBER", make_descriptor(Character::LETTER_NUMBER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "LINE_SEPARATOR", make_descriptor(Character::LINE_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "LOWERCASE_LETTER", make_descriptor(Character::LOWERCASE_LETTER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MATH_SYMBOL", make_descriptor(Character::MATH_SYMBOL));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_CODE_POINT", make_descriptor(Character::MAX_CODE_POINT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_HIGH_SURROGATE", make_descriptor(Character::MAX_HIGH_SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_LOW_SURROGATE", make_descriptor(Character::MAX_LOW_SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_RADIX", make_descriptor(Character::MAX_RADIX));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_SURROGATE", make_descriptor(Character::MAX_SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_VALUE", make_descriptor(Character::MAX_VALUE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_CODE_POINT", make_descriptor(Character::MIN_CODE_POINT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_HIGH_SURROGATE", make_descriptor(Character::MIN_HIGH_SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_LOW_SURROGATE", make_descriptor(Character::MIN_LOW_SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_RADIX", make_descriptor(Character::MIN_RADIX));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_SUPPLEMENTARY_CODE_POINT", make_descriptor(Character::MIN_SUPPLEMENTARY_CODE_POINT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_SURROGATE", make_descriptor(Character::MIN_SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_VALUE", make_descriptor(Character::MIN_VALUE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MODIFIER_LETTER", make_descriptor(Character::MODIFIER_LETTER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MODIFIER_SYMBOL", make_descriptor(Character::MODIFIER_SYMBOL));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "NON_SPACING_MARK", make_descriptor(Character::NON_SPACING_MARK));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "OTHER_LETTER", make_descriptor(Character::OTHER_LETTER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "OTHER_NUMBER", make_descriptor(Character::OTHER_NUMBER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "OTHER_PUNCTUATION", make_descriptor(Character::OTHER_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "OTHER_SYMBOL", make_descriptor(Character::OTHER_SYMBOL));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "PARAGRAPH_SEPARATOR", make_descriptor(Character::PARAGRAPH_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "PRIVATE_USE", make_descriptor(Character::PRIVATE_USE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "SIZE", make_descriptor(Character::SIZE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "SPACE_SEPARATOR", make_descriptor(Character::SPACE_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "START_PUNCTUATION", make_descriptor(Character::START_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "SURROGATE", make_descriptor(Character::SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "TITLECASE_LETTER", make_descriptor(Character::TITLECASE_LETTER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Character::TYPE)));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "UNASSIGNED", make_descriptor(Character::UNASSIGNED));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "UPPERCASE_LETTER", make_descriptor(Character::UPPERCASE_LETTER));
    }

    static PyObject *t_Character_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Character::initializeClass, 1)))
        return NULL;
      return t_Character::wrap_Object(Character(((t_Character *) arg)->object.this$));
    }
    static PyObject *t_Character_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Character::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Character_init_(t_Character *self, PyObject *args, PyObject *kwds)
    {
      jchar a0;
      Character object((jobject) NULL);

      if (!parseArgs(args, "C", &a0))
      {
        INT_CALL(object = Character(a0));
        self->object = object;
      }
      else
      {
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Character_charCount(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::charCount(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "charCount", arg);
      return NULL;
    }

    static PyObject *t_Character_charValue(t_Character *self)
    {
      jchar result;
      OBJ_CALL(result = self->object.charValue());
      return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
    }

    static PyObject *t_Character_codePointAt(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "[CI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointAt(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointAt(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointAt(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "codePointAt", args);
      return NULL;
    }

    static PyObject *t_Character_codePointBefore(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointBefore(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "[CI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointBefore(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointBefore(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "codePointBefore", args);
      return NULL;
    }

    static PyObject *t_Character_codePointCount(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointCount(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointCount(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "codePointCount", args);
      return NULL;
    }

    static PyObject *t_Character_compare(PyTypeObject *type, PyObject *args)
    {
      jchar a0;
      jchar a1;
      jint result;

      if (!parseArgs(args, "CC", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Character::compare(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Character_compareTo(t_Character *self, PyObject *arg)
    {
      Character a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Character), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Character_digit(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::digit(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jchar a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "CI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::digit(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "digit", args);
      return NULL;
    }

    static PyObject *t_Character_equals(t_Character *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Character), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Character_forDigit(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jchar result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Character::forDigit(a0, a1));
        return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
      }

      PyErr_SetArgsError(type, "forDigit", args);
      return NULL;
    }

    static PyObject *t_Character_getDirectionality(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jbyte result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getDirectionality(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jint a0;
          jbyte result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getDirectionality(a0));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "getDirectionality", args);
      return NULL;
    }

    static PyObject *t_Character_getName(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::getName(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "getName", arg);
      return NULL;
    }

    static PyObject *t_Character_getNumericValue(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jint result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getNumericValue(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getNumericValue(a0));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "getNumericValue", args);
      return NULL;
    }

    static PyObject *t_Character_getType(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jint result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getType(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getType(a0));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "getType", args);
      return NULL;
    }

    static PyObject *t_Character_hashCode(t_Character *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Character), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Character_hashCode_(PyTypeObject *type, PyObject *args)
    {
      jchar a0;
      jint result;

      if (!parseArgs(args, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::hashCode(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "hashCode_", args);
      return NULL;
    }

    static PyObject *t_Character_highSurrogate(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jchar result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::highSurrogate(a0));
        return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
      }

      PyErr_SetArgsError(type, "highSurrogate", arg);
      return NULL;
    }

    static PyObject *t_Character_isAlphabetic(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jboolean result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isAlphabetic(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isAlphabetic", arg);
      return NULL;
    }

    static PyObject *t_Character_isBmpCodePoint(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jboolean result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isBmpCodePoint(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isBmpCodePoint", arg);
      return NULL;
    }

    static PyObject *t_Character_isDefined(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isDefined(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isDefined(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isDefined", args);
      return NULL;
    }

    static PyObject *t_Character_isDigit(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isDigit(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isDigit(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isDigit", args);
      return NULL;
    }

    static PyObject *t_Character_isHighSurrogate(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isHighSurrogate(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isHighSurrogate", arg);
      return NULL;
    }

    static PyObject *t_Character_isISOControl(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isISOControl(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isISOControl(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isISOControl", args);
      return NULL;
    }

    static PyObject *t_Character_isIdentifierIgnorable(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isIdentifierIgnorable(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isIdentifierIgnorable(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isIdentifierIgnorable", args);
      return NULL;
    }

    static PyObject *t_Character_isIdeographic(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jboolean result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isIdeographic(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isIdeographic", arg);
      return NULL;
    }

    static PyObject *t_Character_isJavaIdentifierPart(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isJavaIdentifierPart(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isJavaIdentifierPart(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isJavaIdentifierPart", args);
      return NULL;
    }

    static PyObject *t_Character_isJavaIdentifierStart(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isJavaIdentifierStart(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isJavaIdentifierStart(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isJavaIdentifierStart", args);
      return NULL;
    }

    static PyObject *t_Character_isJavaLetter(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isJavaLetter(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isJavaLetter", arg);
      return NULL;
    }

    static PyObject *t_Character_isJavaLetterOrDigit(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isJavaLetterOrDigit(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isJavaLetterOrDigit", arg);
      return NULL;
    }

    static PyObject *t_Character_isLetter(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLetter(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLetter(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isLetter", args);
      return NULL;
    }

    static PyObject *t_Character_isLetterOrDigit(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLetterOrDigit(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLetterOrDigit(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isLetterOrDigit", args);
      return NULL;
    }

    static PyObject *t_Character_isLowSurrogate(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isLowSurrogate(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isLowSurrogate", arg);
      return NULL;
    }

    static PyObject *t_Character_isLowerCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLowerCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLowerCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isLowerCase", args);
      return NULL;
    }

    static PyObject *t_Character_isMirrored(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isMirrored(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isMirrored(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isMirrored", args);
      return NULL;
    }

    static PyObject *t_Character_isSpace(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isSpace(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isSpace", arg);
      return NULL;
    }

    static PyObject *t_Character_isSpaceChar(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isSpaceChar(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isSpaceChar(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isSpaceChar", args);
      return NULL;
    }

    static PyObject *t_Character_isSupplementaryCodePoint(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jboolean result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isSupplementaryCodePoint(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isSupplementaryCodePoint", arg);
      return NULL;
    }

    static PyObject *t_Character_isSurrogate(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isSurrogate(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isSurrogate", arg);
      return NULL;
    }

    static PyObject *t_Character_isSurrogatePair(PyTypeObject *type, PyObject *args)
    {
      jchar a0;
      jchar a1;
      jboolean result;

      if (!parseArgs(args, "CC", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Character::isSurrogatePair(a0, a1));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isSurrogatePair", args);
      return NULL;
    }

    static PyObject *t_Character_isTitleCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isTitleCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isTitleCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isTitleCase", args);
      return NULL;
    }

    static PyObject *t_Character_isUnicodeIdentifierPart(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUnicodeIdentifierPart(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUnicodeIdentifierPart(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isUnicodeIdentifierPart", args);
      return NULL;
    }

    static PyObject *t_Character_isUnicodeIdentifierStart(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUnicodeIdentifierStart(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUnicodeIdentifierStart(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isUnicodeIdentifierStart", args);
      return NULL;
    }

    static PyObject *t_Character_isUpperCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUpperCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUpperCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isUpperCase", args);
      return NULL;
    }

    static PyObject *t_Character_isValidCodePoint(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jboolean result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isValidCodePoint(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isValidCodePoint", arg);
      return NULL;
    }

    static PyObject *t_Character_isWhitespace(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isWhitespace(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isWhitespace(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isWhitespace", args);
      return NULL;
    }

    static PyObject *t_Character_lowSurrogate(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jchar result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::lowSurrogate(a0));
        return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
      }

      PyErr_SetArgsError(type, "lowSurrogate", arg);
      return NULL;
    }

    static PyObject *t_Character_offsetByCodePoints(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 3:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::offsetByCodePoints(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 5:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint a3;
          jint a4;
          jint result;

          if (!parseArgs(args, "[CIIII", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::java::lang::Character::offsetByCodePoints(a0, a1, a2, a3, a4));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "offsetByCodePoints", args);
      return NULL;
    }

    static PyObject *t_Character_reverseBytes(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jchar result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::reverseBytes(a0));
        return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
      }

      PyErr_SetArgsError(type, "reverseBytes", arg);
      return NULL;
    }

    static PyObject *t_Character_toChars(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          JArray< jchar > result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toChars(a0));
            return result.wrap();
          }
        }
        break;
       case 3:
        {
          jint a0;
          JArray< jchar > a1((jobject) NULL);
          jint a2;
          jint result;

          if (!parseArgs(args, "I[CI", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::toChars(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "toChars", args);
      return NULL;
    }

    static PyObject *t_Character_toCodePoint(PyTypeObject *type, PyObject *args)
    {
      jchar a0;
      jchar a1;
      jint result;

      if (!parseArgs(args, "CC", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Character::toCodePoint(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "toCodePoint", args);
      return NULL;
    }

    static PyObject *t_Character_toLowerCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toLowerCase(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jchar a0;
          jchar result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toLowerCase(a0));
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }
        }
      }

      PyErr_SetArgsError(type, "toLowerCase", args);
      return NULL;
    }

    static PyObject *t_Character_toString(t_Character *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Character), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Character_toString_(PyTypeObject *type, PyObject *args)
    {
      jchar a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Character_toTitleCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jchar result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toTitleCase(a0));
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }
        }
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toTitleCase(a0));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "toTitleCase", args);
      return NULL;
    }

    static PyObject *t_Character_toUpperCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toUpperCase(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jchar a0;
          jchar result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toUpperCase(a0));
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }
        }
      }

      PyErr_SetArgsError(type, "toUpperCase", args);
      return NULL;
    }

    static PyObject *t_Character_valueOf(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      Character result((jobject) NULL);

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::valueOf(a0));
        return t_Character::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "valueOf", arg);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/WAH8DocIdSet$Builder.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/WAH8DocIdSet.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *WAH8DocIdSet$Builder::class$ = NULL;
        jmethodID *WAH8DocIdSet$Builder::mids$ = NULL;
        bool WAH8DocIdSet$Builder::live$ = false;

        jclass WAH8DocIdSet$Builder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/WAH8DocIdSet$Builder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_f8a06644] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/DocIdSetIterator;)Lorg/apache/lucene/util/WAH8DocIdSet$Builder;");
            mids$[mid_add_7ac30ded] = env->getMethodID(cls, "add", "(I)Lorg/apache/lucene/util/WAH8DocIdSet$Builder;");
            mids$[mid_build_b0ef9fd4] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/util/WAH8DocIdSet;");
            mids$[mid_setIndexInterval_7ac30ded] = env->getMethodID(cls, "setIndexInterval", "(I)Lorg/apache/lucene/util/WAH8DocIdSet$Builder;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        WAH8DocIdSet$Builder::WAH8DocIdSet$Builder() : ::org::apache::lucene::util::WAH8DocIdSet$WordBuilder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        WAH8DocIdSet$Builder WAH8DocIdSet$Builder::add(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          return WAH8DocIdSet$Builder(env->callObjectMethod(this$, mids$[mid_add_f8a06644], a0.this$));
        }

        WAH8DocIdSet$Builder WAH8DocIdSet$Builder::add(jint a0) const
        {
          return WAH8DocIdSet$Builder(env->callObjectMethod(this$, mids$[mid_add_7ac30ded], a0));
        }

        ::org::apache::lucene::util::WAH8DocIdSet WAH8DocIdSet$Builder::build() const
        {
          return ::org::apache::lucene::util::WAH8DocIdSet(env->callObjectMethod(this$, mids$[mid_build_b0ef9fd4]));
        }

        WAH8DocIdSet$Builder WAH8DocIdSet$Builder::setIndexInterval(jint a0) const
        {
          return WAH8DocIdSet$Builder(env->callObjectMethod(this$, mids$[mid_setIndexInterval_7ac30ded], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_WAH8DocIdSet$Builder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WAH8DocIdSet$Builder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_WAH8DocIdSet$Builder_init_(t_WAH8DocIdSet$Builder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_WAH8DocIdSet$Builder_add(t_WAH8DocIdSet$Builder *self, PyObject *args);
        static PyObject *t_WAH8DocIdSet$Builder_build(t_WAH8DocIdSet$Builder *self, PyObject *args);
        static PyObject *t_WAH8DocIdSet$Builder_setIndexInterval(t_WAH8DocIdSet$Builder *self, PyObject *args);
        static int t_WAH8DocIdSet$Builder_set__indexInterval(t_WAH8DocIdSet$Builder *self, PyObject *arg, void *data);
        static PyGetSetDef t_WAH8DocIdSet$Builder__fields_[] = {
          DECLARE_SET_FIELD(t_WAH8DocIdSet$Builder, indexInterval),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_WAH8DocIdSet$Builder__methods_[] = {
          DECLARE_METHOD(t_WAH8DocIdSet$Builder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WAH8DocIdSet$Builder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WAH8DocIdSet$Builder, add, METH_VARARGS),
          DECLARE_METHOD(t_WAH8DocIdSet$Builder, build, METH_VARARGS),
          DECLARE_METHOD(t_WAH8DocIdSet$Builder, setIndexInterval, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(WAH8DocIdSet$Builder, t_WAH8DocIdSet$Builder, ::org::apache::lucene::util::WAH8DocIdSet$WordBuilder, WAH8DocIdSet$Builder, t_WAH8DocIdSet$Builder_init_, 0, 0, t_WAH8DocIdSet$Builder__fields_, 0, 0);

        void t_WAH8DocIdSet$Builder::install(PyObject *module)
        {
          installType(&PY_TYPE(WAH8DocIdSet$Builder), module, "WAH8DocIdSet$Builder", 0);
        }

        void t_WAH8DocIdSet$Builder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet$Builder).tp_dict, "class_", make_descriptor(WAH8DocIdSet$Builder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet$Builder).tp_dict, "wrapfn_", make_descriptor(t_WAH8DocIdSet$Builder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet$Builder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_WAH8DocIdSet$Builder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, WAH8DocIdSet$Builder::initializeClass, 1)))
            return NULL;
          return t_WAH8DocIdSet$Builder::wrap_Object(WAH8DocIdSet$Builder(((t_WAH8DocIdSet$Builder *) arg)->object.this$));
        }
        static PyObject *t_WAH8DocIdSet$Builder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, WAH8DocIdSet$Builder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_WAH8DocIdSet$Builder_init_(t_WAH8DocIdSet$Builder *self, PyObject *args, PyObject *kwds)
        {
          WAH8DocIdSet$Builder object((jobject) NULL);

          INT_CALL(object = WAH8DocIdSet$Builder());
          self->object = object;

          return 0;
        }

        static PyObject *t_WAH8DocIdSet$Builder_add(t_WAH8DocIdSet$Builder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);
              WAH8DocIdSet$Builder result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.add(a0));
                return t_WAH8DocIdSet$Builder::wrap_Object(result);
              }
            }
            {
              jint a0;
              WAH8DocIdSet$Builder result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.add(a0));
                return t_WAH8DocIdSet$Builder::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_WAH8DocIdSet$Builder_build(t_WAH8DocIdSet$Builder *self, PyObject *args)
        {
          ::org::apache::lucene::util::WAH8DocIdSet result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.build());
            return ::org::apache::lucene::util::t_WAH8DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(WAH8DocIdSet$Builder), (PyObject *) self, "build", args, 2);
        }

        static PyObject *t_WAH8DocIdSet$Builder_setIndexInterval(t_WAH8DocIdSet$Builder *self, PyObject *args)
        {
          jint a0;
          WAH8DocIdSet$Builder result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.setIndexInterval(a0));
            return t_WAH8DocIdSet$Builder::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(WAH8DocIdSet$Builder), (PyObject *) self, "setIndexInterval", args, 2);
        }

        static int t_WAH8DocIdSet$Builder_set__indexInterval(t_WAH8DocIdSet$Builder *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setIndexInterval(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "indexInterval", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/FlagsAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *FlagsAttribute::class$ = NULL;
          jmethodID *FlagsAttribute::mids$ = NULL;
          bool FlagsAttribute::live$ = false;

          jclass FlagsAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/FlagsAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getFlags_54c6a179] = env->getMethodID(cls, "getFlags", "()I");
              mids$[mid_setFlags_39c7bd3c] = env->getMethodID(cls, "setFlags", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint FlagsAttribute::getFlags() const
          {
            return env->callIntMethod(this$, mids$[mid_getFlags_54c6a179]);
          }

          void FlagsAttribute::setFlags(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFlags_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_FlagsAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FlagsAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FlagsAttribute_getFlags(t_FlagsAttribute *self);
          static PyObject *t_FlagsAttribute_setFlags(t_FlagsAttribute *self, PyObject *arg);
          static PyObject *t_FlagsAttribute_get__flags(t_FlagsAttribute *self, void *data);
          static int t_FlagsAttribute_set__flags(t_FlagsAttribute *self, PyObject *arg, void *data);
          static PyGetSetDef t_FlagsAttribute__fields_[] = {
            DECLARE_GETSET_FIELD(t_FlagsAttribute, flags),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FlagsAttribute__methods_[] = {
            DECLARE_METHOD(t_FlagsAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FlagsAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FlagsAttribute, getFlags, METH_NOARGS),
            DECLARE_METHOD(t_FlagsAttribute, setFlags, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FlagsAttribute, t_FlagsAttribute, ::org::apache::lucene::util::Attribute, FlagsAttribute, abstract_init, 0, 0, t_FlagsAttribute__fields_, 0, 0);

          void t_FlagsAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(FlagsAttribute), module, "FlagsAttribute", 0);
          }

          void t_FlagsAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FlagsAttribute).tp_dict, "class_", make_descriptor(FlagsAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FlagsAttribute).tp_dict, "wrapfn_", make_descriptor(t_FlagsAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FlagsAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FlagsAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FlagsAttribute::initializeClass, 1)))
              return NULL;
            return t_FlagsAttribute::wrap_Object(FlagsAttribute(((t_FlagsAttribute *) arg)->object.this$));
          }
          static PyObject *t_FlagsAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FlagsAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FlagsAttribute_getFlags(t_FlagsAttribute *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getFlags());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FlagsAttribute_setFlags(t_FlagsAttribute *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setFlags(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFlags", arg);
            return NULL;
          }

          static PyObject *t_FlagsAttribute_get__flags(t_FlagsAttribute *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getFlags());
            return PyInt_FromLong((long) value);
          }
          static int t_FlagsAttribute_set__flags(t_FlagsAttribute *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setFlags(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "flags", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/postingshighlight/PassageScorer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {

          ::java::lang::Class *PassageScorer::class$ = NULL;
          jmethodID *PassageScorer::mids$ = NULL;
          bool PassageScorer::live$ = false;

          jclass PassageScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/postingshighlight/PassageScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_5348eb2d] = env->getMethodID(cls, "<init>", "(FFF)V");
              mids$[mid_norm_39c7bd2c] = env->getMethodID(cls, "norm", "(I)F");
              mids$[mid_tf_d8d154b6] = env->getMethodID(cls, "tf", "(II)F");
              mids$[mid_weight_d8d154b6] = env->getMethodID(cls, "weight", "(II)F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PassageScorer::PassageScorer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          PassageScorer::PassageScorer(jfloat a0, jfloat a1, jfloat a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5348eb2d, a0, a1, a2)) {}

          jfloat PassageScorer::norm(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_norm_39c7bd2c], a0);
          }

          jfloat PassageScorer::tf(jint a0, jint a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_tf_d8d154b6], a0, a1);
          }

          jfloat PassageScorer::weight(jint a0, jint a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_weight_d8d154b6], a0, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {
          static PyObject *t_PassageScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PassageScorer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PassageScorer_init_(t_PassageScorer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PassageScorer_norm(t_PassageScorer *self, PyObject *arg);
          static PyObject *t_PassageScorer_tf(t_PassageScorer *self, PyObject *args);
          static PyObject *t_PassageScorer_weight(t_PassageScorer *self, PyObject *args);

          static PyMethodDef t_PassageScorer__methods_[] = {
            DECLARE_METHOD(t_PassageScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PassageScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PassageScorer, norm, METH_O),
            DECLARE_METHOD(t_PassageScorer, tf, METH_VARARGS),
            DECLARE_METHOD(t_PassageScorer, weight, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PassageScorer, t_PassageScorer, ::java::lang::Object, PassageScorer, t_PassageScorer_init_, 0, 0, 0, 0, 0);

          void t_PassageScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(PassageScorer), module, "PassageScorer", 0);
          }

          void t_PassageScorer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PassageScorer).tp_dict, "class_", make_descriptor(PassageScorer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PassageScorer).tp_dict, "wrapfn_", make_descriptor(t_PassageScorer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PassageScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PassageScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PassageScorer::initializeClass, 1)))
              return NULL;
            return t_PassageScorer::wrap_Object(PassageScorer(((t_PassageScorer *) arg)->object.this$));
          }
          static PyObject *t_PassageScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PassageScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PassageScorer_init_(t_PassageScorer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                PassageScorer object((jobject) NULL);

                INT_CALL(object = PassageScorer());
                self->object = object;
                break;
              }
              goto err;
             case 3:
              {
                jfloat a0;
                jfloat a1;
                jfloat a2;
                PassageScorer object((jobject) NULL);

                if (!parseArgs(args, "FFF", &a0, &a1, &a2))
                {
                  INT_CALL(object = PassageScorer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PassageScorer_norm(t_PassageScorer *self, PyObject *arg)
          {
            jint a0;
            jfloat result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.norm(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "norm", arg);
            return NULL;
          }

          static PyObject *t_PassageScorer_tf(t_PassageScorer *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jfloat result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.tf(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "tf", args);
            return NULL;
          }

          static PyObject *t_PassageScorer_weight(t_PassageScorer *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jfloat result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.weight(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "weight", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BulkScorer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Collector.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BulkScorer::class$ = NULL;
        jmethodID *BulkScorer::mids$ = NULL;
        bool BulkScorer::live$ = false;

        jclass BulkScorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BulkScorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_score_77379ce0] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/Collector;)V");
            mids$[mid_score_9527f6ba] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/Collector;I)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BulkScorer::BulkScorer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void BulkScorer::score(const ::org::apache::lucene::search::Collector & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_score_77379ce0], a0.this$);
        }

        jboolean BulkScorer::score(const ::org::apache::lucene::search::Collector & a0, jint a1) const
        {
          return env->callBooleanMethod(this$, mids$[mid_score_9527f6ba], a0.this$, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BulkScorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BulkScorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BulkScorer_init_(t_BulkScorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BulkScorer_score(t_BulkScorer *self, PyObject *args);

        static PyMethodDef t_BulkScorer__methods_[] = {
          DECLARE_METHOD(t_BulkScorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BulkScorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BulkScorer, score, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BulkScorer, t_BulkScorer, ::java::lang::Object, BulkScorer, t_BulkScorer_init_, 0, 0, 0, 0, 0);

        void t_BulkScorer::install(PyObject *module)
        {
          installType(&PY_TYPE(BulkScorer), module, "BulkScorer", 0);
        }

        void t_BulkScorer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BulkScorer).tp_dict, "class_", make_descriptor(BulkScorer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BulkScorer).tp_dict, "wrapfn_", make_descriptor(t_BulkScorer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BulkScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BulkScorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BulkScorer::initializeClass, 1)))
            return NULL;
          return t_BulkScorer::wrap_Object(BulkScorer(((t_BulkScorer *) arg)->object.this$));
        }
        static PyObject *t_BulkScorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BulkScorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BulkScorer_init_(t_BulkScorer *self, PyObject *args, PyObject *kwds)
        {
          BulkScorer object((jobject) NULL);

          INT_CALL(object = BulkScorer());
          self->object = object;

          return 0;
        }

        static PyObject *t_BulkScorer_score(t_BulkScorer *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::Collector a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::Collector::initializeClass, &a0))
              {
                OBJ_CALL(self->object.score(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::search::Collector a0((jobject) NULL);
              jint a1;
              jboolean result;

              if (!parseArgs(args, "kI", ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.score(a0, a1));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "score", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/DoubleField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *DoubleField::class$ = NULL;
        jmethodID *DoubleField::mids$ = NULL;
        bool DoubleField::live$ = false;
        ::org::apache::lucene::document::FieldType *DoubleField::TYPE_NOT_STORED = NULL;
        ::org::apache::lucene::document::FieldType *DoubleField::TYPE_STORED = NULL;

        jclass DoubleField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/DoubleField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d4f106f2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;DLorg/apache/lucene/document/Field$Store;)V");
            mids$[mid_init$_1922fa29] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;DLorg/apache/lucene/document/FieldType;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_NOT_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_NOT_STORED", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_STORED", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DoubleField::DoubleField(const ::java::lang::String & a0, jdouble a1, const ::org::apache::lucene::document::Field$Store & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_d4f106f2, a0.this$, a1, a2.this$)) {}

        DoubleField::DoubleField(const ::java::lang::String & a0, jdouble a1, const ::org::apache::lucene::document::FieldType & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_1922fa29, a0.this$, a1, a2.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_DoubleField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DoubleField_init_(t_DoubleField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_DoubleField__methods_[] = {
          DECLARE_METHOD(t_DoubleField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DoubleField, t_DoubleField, ::org::apache::lucene::document::Field, DoubleField, t_DoubleField_init_, 0, 0, 0, 0, 0);

        void t_DoubleField::install(PyObject *module)
        {
          installType(&PY_TYPE(DoubleField), module, "DoubleField", 0);
        }

        void t_DoubleField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DoubleField).tp_dict, "class_", make_descriptor(DoubleField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DoubleField).tp_dict, "wrapfn_", make_descriptor(t_DoubleField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DoubleField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DoubleField::initializeClass);
          PyDict_SetItemString(PY_TYPE(DoubleField).tp_dict, "TYPE_NOT_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*DoubleField::TYPE_NOT_STORED)));
          PyDict_SetItemString(PY_TYPE(DoubleField).tp_dict, "TYPE_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*DoubleField::TYPE_STORED)));
        }

        static PyObject *t_DoubleField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DoubleField::initializeClass, 1)))
            return NULL;
          return t_DoubleField::wrap_Object(DoubleField(((t_DoubleField *) arg)->object.this$));
        }
        static PyObject *t_DoubleField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DoubleField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DoubleField_init_(t_DoubleField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              jdouble a1;
              ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
              PyTypeObject **p2;
              DoubleField object((jobject) NULL);

              if (!parseArgs(args, "sDK", ::org::apache::lucene::document::Field$Store::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_))
              {
                INT_CALL(object = DoubleField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jdouble a1;
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              DoubleField object((jobject) NULL);

              if (!parseArgs(args, "sDk", ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = DoubleField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RAMFile.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RAMFile::class$ = NULL;
        jmethodID *RAMFile::mids$ = NULL;
        bool RAMFile::live$ = false;

        jclass RAMFile::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RAMFile");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getLength_54c6a17a] = env->getMethodID(cls, "getLength", "()J");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_setLength_0ee6df2f] = env->getMethodID(cls, "setLength", "(J)V");
            mids$[mid_numBuffers_54c6a179] = env->getMethodID(cls, "numBuffers", "()I");
            mids$[mid_addBuffer_b4292e98] = env->getMethodID(cls, "addBuffer", "(I)[B");
            mids$[mid_getBuffer_b4292e98] = env->getMethodID(cls, "getBuffer", "(I)[B");
            mids$[mid_newBuffer_b4292e98] = env->getMethodID(cls, "newBuffer", "(I)[B");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RAMFile::RAMFile() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jlong RAMFile::getLength() const
        {
          return env->callLongMethod(this$, mids$[mid_getLength_54c6a17a]);
        }

        jlong RAMFile::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RAMFile_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RAMFile_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RAMFile_init_(t_RAMFile *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RAMFile_getLength(t_RAMFile *self);
        static PyObject *t_RAMFile_ramBytesUsed(t_RAMFile *self);
        static PyObject *t_RAMFile_get__length(t_RAMFile *self, void *data);
        static PyGetSetDef t_RAMFile__fields_[] = {
          DECLARE_GET_FIELD(t_RAMFile, length),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RAMFile__methods_[] = {
          DECLARE_METHOD(t_RAMFile, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMFile, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMFile, getLength, METH_NOARGS),
          DECLARE_METHOD(t_RAMFile, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RAMFile, t_RAMFile, ::java::lang::Object, RAMFile, t_RAMFile_init_, 0, 0, t_RAMFile__fields_, 0, 0);

        void t_RAMFile::install(PyObject *module)
        {
          installType(&PY_TYPE(RAMFile), module, "RAMFile", 0);
        }

        void t_RAMFile::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RAMFile).tp_dict, "class_", make_descriptor(RAMFile::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RAMFile).tp_dict, "wrapfn_", make_descriptor(t_RAMFile::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RAMFile).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RAMFile_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RAMFile::initializeClass, 1)))
            return NULL;
          return t_RAMFile::wrap_Object(RAMFile(((t_RAMFile *) arg)->object.this$));
        }
        static PyObject *t_RAMFile_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RAMFile::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RAMFile_init_(t_RAMFile *self, PyObject *args, PyObject *kwds)
        {
          RAMFile object((jobject) NULL);

          INT_CALL(object = RAMFile());
          self->object = object;

          return 0;
        }

        static PyObject *t_RAMFile_getLength(t_RAMFile *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getLength());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RAMFile_ramBytesUsed(t_RAMFile *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RAMFile_get__length(t_RAMFile *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getLength());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/highlight/PythonFormatter.h"
#include "org/apache/lucene/search/highlight/Formatter.h"
#include "org/apache/lucene/search/highlight/TokenGroup.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *PythonFormatter::class$ = NULL;
          jmethodID *PythonFormatter::mids$ = NULL;
          bool PythonFormatter::live$ = false;

          jclass PythonFormatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/pylucene/search/highlight/PythonFormatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
              mids$[mid_highlightTerm_8838cc58] = env->getMethodID(cls, "highlightTerm", "(Ljava/lang/String;Lorg/apache/lucene/search/highlight/TokenGroup;)Ljava/lang/String;");
              mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
              mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
              mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PythonFormatter::PythonFormatter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void PythonFormatter::finalize() const
          {
            env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
          }

          jlong PythonFormatter::pythonExtension() const
          {
            return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
          }

          void PythonFormatter::pythonExtension(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace highlight {
          static PyObject *t_PythonFormatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PythonFormatter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PythonFormatter_init_(t_PythonFormatter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PythonFormatter_finalize(t_PythonFormatter *self);
          static PyObject *t_PythonFormatter_pythonExtension(t_PythonFormatter *self, PyObject *args);
          static jobject JNICALL t_PythonFormatter_highlightTerm0(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static void JNICALL t_PythonFormatter_pythonDecRef1(JNIEnv *jenv, jobject jobj);
          static PyObject *t_PythonFormatter_get__self(t_PythonFormatter *self, void *data);
          static PyGetSetDef t_PythonFormatter__fields_[] = {
            DECLARE_GET_FIELD(t_PythonFormatter, self),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PythonFormatter__methods_[] = {
            DECLARE_METHOD(t_PythonFormatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonFormatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonFormatter, finalize, METH_NOARGS),
            DECLARE_METHOD(t_PythonFormatter, pythonExtension, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PythonFormatter, t_PythonFormatter, ::java::lang::Object, PythonFormatter, t_PythonFormatter_init_, 0, 0, t_PythonFormatter__fields_, 0, 0);

          void t_PythonFormatter::install(PyObject *module)
          {
            installType(&PY_TYPE(PythonFormatter), module, "PythonFormatter", 1);
          }

          void t_PythonFormatter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PythonFormatter).tp_dict, "class_", make_descriptor(PythonFormatter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PythonFormatter).tp_dict, "wrapfn_", make_descriptor(t_PythonFormatter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PythonFormatter).tp_dict, "boxfn_", make_descriptor(boxObject));
            jclass cls = env->getClass(PythonFormatter::initializeClass);
            JNINativeMethod methods[] = {
              { "highlightTerm", "(Ljava/lang/String;Lorg/apache/lucene/search/highlight/TokenGroup;)Ljava/lang/String;", (void *) t_PythonFormatter_highlightTerm0 },
              { "pythonDecRef", "()V", (void *) t_PythonFormatter_pythonDecRef1 },
            };
            env->registerNatives(cls, methods, 2);
          }

          static PyObject *t_PythonFormatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PythonFormatter::initializeClass, 1)))
              return NULL;
            return t_PythonFormatter::wrap_Object(PythonFormatter(((t_PythonFormatter *) arg)->object.this$));
          }
          static PyObject *t_PythonFormatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PythonFormatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PythonFormatter_init_(t_PythonFormatter *self, PyObject *args, PyObject *kwds)
          {
            PythonFormatter object((jobject) NULL);

            INT_CALL(object = PythonFormatter());
            self->object = object;

            Py_INCREF((PyObject *) self);
            self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

            return 0;
          }

          static PyObject *t_PythonFormatter_finalize(t_PythonFormatter *self)
          {
            OBJ_CALL(self->object.finalize());
            Py_RETURN_NONE;
          }

          static PyObject *t_PythonFormatter_pythonExtension(t_PythonFormatter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.pythonExtension());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.pythonExtension(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
            return NULL;
          }

          static jobject JNICALL t_PythonFormatter_highlightTerm0(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonFormatter::mids$[PythonFormatter::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::java::lang::String value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = ::org::apache::lucene::search::highlight::t_TokenGroup::wrap_Object(::org::apache::lucene::search::highlight::TokenGroup(a1));
            PyObject *result = PyObject_CallMethod(obj, "highlightTerm", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "s", &value))
            {
              throwTypeError("highlightTerm", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static void JNICALL t_PythonFormatter_pythonDecRef1(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonFormatter::mids$[PythonFormatter::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              jenv->CallVoidMethod(jobj, PythonFormatter::mids$[PythonFormatter::mid_pythonExtension_0ee6df2f], (jlong) 0);
              env->finalizeObject(jenv, obj);
            }
          }

          static PyObject *t_PythonFormatter_get__self(t_PythonFormatter *self, void *data)
          {
            jlong ptr;
            OBJ_CALL(ptr = self->object.pythonExtension());
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              Py_INCREF(obj);
              return obj;
            }
            else
              Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacetCounts.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyFacetCounts::class$ = NULL;
          jmethodID *TaxonomyFacetCounts::mids$ = NULL;
          bool TaxonomyFacetCounts::live$ = false;

          jclass TaxonomyFacetCounts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyFacetCounts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_50be664b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/OrdinalsReader;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TaxonomyFacetCounts::TaxonomyFacetCounts(const ::org::apache::lucene::facet::taxonomy::OrdinalsReader & a0, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a1, const ::org::apache::lucene::facet::FacetsConfig & a2, const ::org::apache::lucene::facet::FacetsCollector & a3) : ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_50be664b, a0.this$, a1.this$, a2.this$, a3.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyFacetCounts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacetCounts_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TaxonomyFacetCounts_init_(t_TaxonomyFacetCounts *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_TaxonomyFacetCounts__methods_[] = {
            DECLARE_METHOD(t_TaxonomyFacetCounts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacetCounts, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyFacetCounts, t_TaxonomyFacetCounts, ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets, TaxonomyFacetCounts, t_TaxonomyFacetCounts_init_, 0, 0, 0, 0, 0);

          void t_TaxonomyFacetCounts::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyFacetCounts), module, "TaxonomyFacetCounts", 0);
          }

          void t_TaxonomyFacetCounts::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetCounts).tp_dict, "class_", make_descriptor(TaxonomyFacetCounts::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetCounts).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyFacetCounts::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetCounts).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyFacetCounts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyFacetCounts::initializeClass, 1)))
              return NULL;
            return t_TaxonomyFacetCounts::wrap_Object(TaxonomyFacetCounts(((t_TaxonomyFacetCounts *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyFacetCounts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyFacetCounts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TaxonomyFacetCounts_init_(t_TaxonomyFacetCounts *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::facet::taxonomy::OrdinalsReader a0((jobject) NULL);
            ::org::apache::lucene::facet::taxonomy::TaxonomyReader a1((jobject) NULL);
            ::org::apache::lucene::facet::FacetsConfig a2((jobject) NULL);
            ::org::apache::lucene::facet::FacetsCollector a3((jobject) NULL);
            TaxonomyFacetCounts object((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::facet::taxonomy::OrdinalsReader::initializeClass, ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = TaxonomyFacetCounts(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/NumericQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *NumericQueryNodeProcessor::class$ = NULL;
              jmethodID *NumericQueryNodeProcessor::mids$ = NULL;
              bool NumericQueryNodeProcessor::live$ = false;

              jclass NumericQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/NumericQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NumericQueryNodeProcessor::NumericQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_NumericQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumericQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NumericQueryNodeProcessor_init_(t_NumericQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_NumericQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_NumericQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NumericQueryNodeProcessor, t_NumericQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, NumericQueryNodeProcessor, t_NumericQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_NumericQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(NumericQueryNodeProcessor), module, "NumericQueryNodeProcessor", 0);
              }

              void t_NumericQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NumericQueryNodeProcessor).tp_dict, "class_", make_descriptor(NumericQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NumericQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_NumericQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NumericQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NumericQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NumericQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_NumericQueryNodeProcessor::wrap_Object(NumericQueryNodeProcessor(((t_NumericQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_NumericQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NumericQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NumericQueryNodeProcessor_init_(t_NumericQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                NumericQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = NumericQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/DecimalFormat.h"
#include "java/lang/Class.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/Object.h"
#include "java/util/Currency.h"
#include "java/lang/Number.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *DecimalFormat::class$ = NULL;
    jmethodID *DecimalFormat::mids$ = NULL;
    bool DecimalFormat::live$ = false;

    jclass DecimalFormat::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/DecimalFormat");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_applyLocalizedPattern_5fdc3f48] = env->getMethodID(cls, "applyLocalizedPattern", "(Ljava/lang/String;)V");
        mids$[mid_applyPattern_5fdc3f48] = env->getMethodID(cls, "applyPattern", "(Ljava/lang/String;)V");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_getCurrency_14c3f2a1] = env->getMethodID(cls, "getCurrency", "()Ljava/util/Currency;");
        mids$[mid_getGroupingSize_54c6a179] = env->getMethodID(cls, "getGroupingSize", "()I");
        mids$[mid_getMaximumFractionDigits_54c6a179] = env->getMethodID(cls, "getMaximumFractionDigits", "()I");
        mids$[mid_getMaximumIntegerDigits_54c6a179] = env->getMethodID(cls, "getMaximumIntegerDigits", "()I");
        mids$[mid_getMinimumFractionDigits_54c6a179] = env->getMethodID(cls, "getMinimumFractionDigits", "()I");
        mids$[mid_getMinimumIntegerDigits_54c6a179] = env->getMethodID(cls, "getMinimumIntegerDigits", "()I");
        mids$[mid_getMultiplier_54c6a179] = env->getMethodID(cls, "getMultiplier", "()I");
        mids$[mid_getNegativePrefix_14c7b5c5] = env->getMethodID(cls, "getNegativePrefix", "()Ljava/lang/String;");
        mids$[mid_getNegativeSuffix_14c7b5c5] = env->getMethodID(cls, "getNegativeSuffix", "()Ljava/lang/String;");
        mids$[mid_getPositivePrefix_14c7b5c5] = env->getMethodID(cls, "getPositivePrefix", "()Ljava/lang/String;");
        mids$[mid_getPositiveSuffix_14c7b5c5] = env->getMethodID(cls, "getPositiveSuffix", "()Ljava/lang/String;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_isDecimalSeparatorAlwaysShown_54c6a16a] = env->getMethodID(cls, "isDecimalSeparatorAlwaysShown", "()Z");
        mids$[mid_isParseBigDecimal_54c6a16a] = env->getMethodID(cls, "isParseBigDecimal", "()Z");
        mids$[mid_setCurrency_de939370] = env->getMethodID(cls, "setCurrency", "(Ljava/util/Currency;)V");
        mids$[mid_setDecimalSeparatorAlwaysShown_bb0c767f] = env->getMethodID(cls, "setDecimalSeparatorAlwaysShown", "(Z)V");
        mids$[mid_setGroupingSize_39c7bd3c] = env->getMethodID(cls, "setGroupingSize", "(I)V");
        mids$[mid_setGroupingUsed_bb0c767f] = env->getMethodID(cls, "setGroupingUsed", "(Z)V");
        mids$[mid_setMaximumFractionDigits_39c7bd3c] = env->getMethodID(cls, "setMaximumFractionDigits", "(I)V");
        mids$[mid_setMaximumIntegerDigits_39c7bd3c] = env->getMethodID(cls, "setMaximumIntegerDigits", "(I)V");
        mids$[mid_setMinimumFractionDigits_39c7bd3c] = env->getMethodID(cls, "setMinimumFractionDigits", "(I)V");
        mids$[mid_setMinimumIntegerDigits_39c7bd3c] = env->getMethodID(cls, "setMinimumIntegerDigits", "(I)V");
        mids$[mid_setMultiplier_39c7bd3c] = env->getMethodID(cls, "setMultiplier", "(I)V");
        mids$[mid_setNegativePrefix_5fdc3f48] = env->getMethodID(cls, "setNegativePrefix", "(Ljava/lang/String;)V");
        mids$[mid_setNegativeSuffix_5fdc3f48] = env->getMethodID(cls, "setNegativeSuffix", "(Ljava/lang/String;)V");
        mids$[mid_setParseBigDecimal_bb0c767f] = env->getMethodID(cls, "setParseBigDecimal", "(Z)V");
        mids$[mid_setPositivePrefix_5fdc3f48] = env->getMethodID(cls, "setPositivePrefix", "(Ljava/lang/String;)V");
        mids$[mid_setPositiveSuffix_5fdc3f48] = env->getMethodID(cls, "setPositiveSuffix", "(Ljava/lang/String;)V");
        mids$[mid_toLocalizedPattern_14c7b5c5] = env->getMethodID(cls, "toLocalizedPattern", "()Ljava/lang/String;");
        mids$[mid_toPattern_14c7b5c5] = env->getMethodID(cls, "toPattern", "()Ljava/lang/String;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    DecimalFormat::DecimalFormat() : ::java::text::NumberFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    DecimalFormat::DecimalFormat(const ::java::lang::String & a0) : ::java::text::NumberFormat(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    void DecimalFormat::applyLocalizedPattern(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_applyLocalizedPattern_5fdc3f48], a0.this$);
    }

    void DecimalFormat::applyPattern(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_applyPattern_5fdc3f48], a0.this$);
    }

    ::java::lang::Object DecimalFormat::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    jboolean DecimalFormat::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    ::java::util::Currency DecimalFormat::getCurrency() const
    {
      return ::java::util::Currency(env->callObjectMethod(this$, mids$[mid_getCurrency_14c3f2a1]));
    }

    jint DecimalFormat::getGroupingSize() const
    {
      return env->callIntMethod(this$, mids$[mid_getGroupingSize_54c6a179]);
    }

    jint DecimalFormat::getMaximumFractionDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMaximumFractionDigits_54c6a179]);
    }

    jint DecimalFormat::getMaximumIntegerDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMaximumIntegerDigits_54c6a179]);
    }

    jint DecimalFormat::getMinimumFractionDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMinimumFractionDigits_54c6a179]);
    }

    jint DecimalFormat::getMinimumIntegerDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMinimumIntegerDigits_54c6a179]);
    }

    jint DecimalFormat::getMultiplier() const
    {
      return env->callIntMethod(this$, mids$[mid_getMultiplier_54c6a179]);
    }

    ::java::lang::String DecimalFormat::getNegativePrefix() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getNegativePrefix_14c7b5c5]));
    }

    ::java::lang::String DecimalFormat::getNegativeSuffix() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getNegativeSuffix_14c7b5c5]));
    }

    ::java::lang::String DecimalFormat::getPositivePrefix() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getPositivePrefix_14c7b5c5]));
    }

    ::java::lang::String DecimalFormat::getPositiveSuffix() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getPositiveSuffix_14c7b5c5]));
    }

    jint DecimalFormat::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jboolean DecimalFormat::isDecimalSeparatorAlwaysShown() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isDecimalSeparatorAlwaysShown_54c6a16a]);
    }

    jboolean DecimalFormat::isParseBigDecimal() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isParseBigDecimal_54c6a16a]);
    }

    void DecimalFormat::setCurrency(const ::java::util::Currency & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setCurrency_de939370], a0.this$);
    }

    void DecimalFormat::setDecimalSeparatorAlwaysShown(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setDecimalSeparatorAlwaysShown_bb0c767f], a0);
    }

    void DecimalFormat::setGroupingSize(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setGroupingSize_39c7bd3c], a0);
    }

    void DecimalFormat::setGroupingUsed(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setGroupingUsed_bb0c767f], a0);
    }

    void DecimalFormat::setMaximumFractionDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMaximumFractionDigits_39c7bd3c], a0);
    }

    void DecimalFormat::setMaximumIntegerDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMaximumIntegerDigits_39c7bd3c], a0);
    }

    void DecimalFormat::setMinimumFractionDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMinimumFractionDigits_39c7bd3c], a0);
    }

    void DecimalFormat::setMinimumIntegerDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMinimumIntegerDigits_39c7bd3c], a0);
    }

    void DecimalFormat::setMultiplier(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMultiplier_39c7bd3c], a0);
    }

    void DecimalFormat::setNegativePrefix(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setNegativePrefix_5fdc3f48], a0.this$);
    }

    void DecimalFormat::setNegativeSuffix(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setNegativeSuffix_5fdc3f48], a0.this$);
    }

    void DecimalFormat::setParseBigDecimal(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setParseBigDecimal_bb0c767f], a0);
    }

    void DecimalFormat::setPositivePrefix(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setPositivePrefix_5fdc3f48], a0.this$);
    }

    void DecimalFormat::setPositiveSuffix(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setPositiveSuffix_5fdc3f48], a0.this$);
    }

    ::java::lang::String DecimalFormat::toLocalizedPattern() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toLocalizedPattern_14c7b5c5]));
    }

    ::java::lang::String DecimalFormat::toPattern() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toPattern_14c7b5c5]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_DecimalFormat_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_DecimalFormat_instance_(PyTypeObject *type, PyObject *arg);
    static int t_DecimalFormat_init_(t_DecimalFormat *self, PyObject *args, PyObject *kwds);
    static PyObject *t_DecimalFormat_applyLocalizedPattern(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_applyPattern(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_clone(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_equals(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_getCurrency(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_getGroupingSize(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_getMaximumFractionDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_getMaximumIntegerDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_getMinimumFractionDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_getMinimumIntegerDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_getMultiplier(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_getNegativePrefix(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_getNegativeSuffix(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_getPositivePrefix(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_getPositiveSuffix(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_hashCode(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_isDecimalSeparatorAlwaysShown(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_isParseBigDecimal(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_setCurrency(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_setDecimalSeparatorAlwaysShown(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setGroupingSize(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setGroupingUsed(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_setMaximumFractionDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_setMaximumIntegerDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_setMinimumFractionDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_setMinimumIntegerDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_setMultiplier(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setNegativePrefix(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setNegativeSuffix(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setParseBigDecimal(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setPositivePrefix(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setPositiveSuffix(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_toLocalizedPattern(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_toPattern(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_get__currency(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__currency(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__decimalSeparatorAlwaysShown(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__decimalSeparatorAlwaysShown(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__groupingSize(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__groupingSize(t_DecimalFormat *self, PyObject *arg, void *data);
    static int t_DecimalFormat_set__groupingUsed(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__maximumFractionDigits(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__maximumFractionDigits(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__maximumIntegerDigits(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__maximumIntegerDigits(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__minimumFractionDigits(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__minimumFractionDigits(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__minimumIntegerDigits(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__minimumIntegerDigits(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__multiplier(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__multiplier(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__negativePrefix(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__negativePrefix(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__negativeSuffix(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__negativeSuffix(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__parseBigDecimal(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__parseBigDecimal(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__positivePrefix(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__positivePrefix(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__positiveSuffix(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__positiveSuffix(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyGetSetDef t_DecimalFormat__fields_[] = {
      DECLARE_GETSET_FIELD(t_DecimalFormat, currency),
      DECLARE_GETSET_FIELD(t_DecimalFormat, decimalSeparatorAlwaysShown),
      DECLARE_GETSET_FIELD(t_DecimalFormat, groupingSize),
      DECLARE_SET_FIELD(t_DecimalFormat, groupingUsed),
      DECLARE_GETSET_FIELD(t_DecimalFormat, maximumFractionDigits),
      DECLARE_GETSET_FIELD(t_DecimalFormat, maximumIntegerDigits),
      DECLARE_GETSET_FIELD(t_DecimalFormat, minimumFractionDigits),
      DECLARE_GETSET_FIELD(t_DecimalFormat, minimumIntegerDigits),
      DECLARE_GETSET_FIELD(t_DecimalFormat, multiplier),
      DECLARE_GETSET_FIELD(t_DecimalFormat, negativePrefix),
      DECLARE_GETSET_FIELD(t_DecimalFormat, negativeSuffix),
      DECLARE_GETSET_FIELD(t_DecimalFormat, parseBigDecimal),
      DECLARE_GETSET_FIELD(t_DecimalFormat, positivePrefix),
      DECLARE_GETSET_FIELD(t_DecimalFormat, positiveSuffix),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_DecimalFormat__methods_[] = {
      DECLARE_METHOD(t_DecimalFormat, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_DecimalFormat, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_DecimalFormat, applyLocalizedPattern, METH_O),
      DECLARE_METHOD(t_DecimalFormat, applyPattern, METH_O),
      DECLARE_METHOD(t_DecimalFormat, clone, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, equals, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, getCurrency, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, getGroupingSize, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, getMaximumFractionDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, getMaximumIntegerDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, getMinimumFractionDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, getMinimumIntegerDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, getMultiplier, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, getNegativePrefix, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, getNegativeSuffix, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, getPositivePrefix, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, getPositiveSuffix, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, isDecimalSeparatorAlwaysShown, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, isParseBigDecimal, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, setCurrency, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, setDecimalSeparatorAlwaysShown, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setGroupingSize, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setGroupingUsed, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, setMaximumFractionDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, setMaximumIntegerDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, setMinimumFractionDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, setMinimumIntegerDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, setMultiplier, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setNegativePrefix, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setNegativeSuffix, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setParseBigDecimal, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setPositivePrefix, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setPositiveSuffix, METH_O),
      DECLARE_METHOD(t_DecimalFormat, toLocalizedPattern, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, toPattern, METH_NOARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(DecimalFormat, t_DecimalFormat, ::java::text::NumberFormat, DecimalFormat, t_DecimalFormat_init_, 0, 0, t_DecimalFormat__fields_, 0, 0);

    void t_DecimalFormat::install(PyObject *module)
    {
      installType(&PY_TYPE(DecimalFormat), module, "DecimalFormat", 0);
    }

    void t_DecimalFormat::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(DecimalFormat).tp_dict, "class_", make_descriptor(DecimalFormat::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(DecimalFormat).tp_dict, "wrapfn_", make_descriptor(t_DecimalFormat::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(DecimalFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_DecimalFormat_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, DecimalFormat::initializeClass, 1)))
        return NULL;
      return t_DecimalFormat::wrap_Object(DecimalFormat(((t_DecimalFormat *) arg)->object.this$));
    }
    static PyObject *t_DecimalFormat_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, DecimalFormat::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_DecimalFormat_init_(t_DecimalFormat *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          DecimalFormat object((jobject) NULL);

          INT_CALL(object = DecimalFormat());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          DecimalFormat object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = DecimalFormat(a0));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_DecimalFormat_applyLocalizedPattern(t_DecimalFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.applyLocalizedPattern(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "applyLocalizedPattern", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_applyPattern(t_DecimalFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.applyPattern(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "applyPattern", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_clone(t_DecimalFormat *self, PyObject *args)
    {
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.clone());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "clone", args, 2);
    }

    static PyObject *t_DecimalFormat_equals(t_DecimalFormat *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_DecimalFormat_getCurrency(t_DecimalFormat *self, PyObject *args)
    {
      ::java::util::Currency result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.getCurrency());
        return ::java::util::t_Currency::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "getCurrency", args, 2);
    }

    static PyObject *t_DecimalFormat_getGroupingSize(t_DecimalFormat *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getGroupingSize());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_DecimalFormat_getMaximumFractionDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.getMaximumFractionDigits());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "getMaximumFractionDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_getMaximumIntegerDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.getMaximumIntegerDigits());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "getMaximumIntegerDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_getMinimumFractionDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.getMinimumFractionDigits());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "getMinimumFractionDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_getMinimumIntegerDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.getMinimumIntegerDigits());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "getMinimumIntegerDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_getMultiplier(t_DecimalFormat *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getMultiplier());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_DecimalFormat_getNegativePrefix(t_DecimalFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getNegativePrefix());
      return j2p(result);
    }

    static PyObject *t_DecimalFormat_getNegativeSuffix(t_DecimalFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getNegativeSuffix());
      return j2p(result);
    }

    static PyObject *t_DecimalFormat_getPositivePrefix(t_DecimalFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getPositivePrefix());
      return j2p(result);
    }

    static PyObject *t_DecimalFormat_getPositiveSuffix(t_DecimalFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getPositiveSuffix());
      return j2p(result);
    }

    static PyObject *t_DecimalFormat_hashCode(t_DecimalFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_DecimalFormat_isDecimalSeparatorAlwaysShown(t_DecimalFormat *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isDecimalSeparatorAlwaysShown());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_DecimalFormat_isParseBigDecimal(t_DecimalFormat *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isParseBigDecimal());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_DecimalFormat_setCurrency(t_DecimalFormat *self, PyObject *args)
    {
      ::java::util::Currency a0((jobject) NULL);

      if (!parseArgs(args, "k", ::java::util::Currency::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setCurrency(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "setCurrency", args, 2);
    }

    static PyObject *t_DecimalFormat_setDecimalSeparatorAlwaysShown(t_DecimalFormat *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.setDecimalSeparatorAlwaysShown(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setDecimalSeparatorAlwaysShown", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setGroupingSize(t_DecimalFormat *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setGroupingSize(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setGroupingSize", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setGroupingUsed(t_DecimalFormat *self, PyObject *args)
    {
      jboolean a0;

      if (!parseArgs(args, "Z", &a0))
      {
        OBJ_CALL(self->object.setGroupingUsed(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "setGroupingUsed", args, 2);
    }

    static PyObject *t_DecimalFormat_setMaximumFractionDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint a0;

      if (!parseArgs(args, "I", &a0))
      {
        OBJ_CALL(self->object.setMaximumFractionDigits(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "setMaximumFractionDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_setMaximumIntegerDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint a0;

      if (!parseArgs(args, "I", &a0))
      {
        OBJ_CALL(self->object.setMaximumIntegerDigits(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "setMaximumIntegerDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_setMinimumFractionDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint a0;

      if (!parseArgs(args, "I", &a0))
      {
        OBJ_CALL(self->object.setMinimumFractionDigits(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "setMinimumFractionDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_setMinimumIntegerDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint a0;

      if (!parseArgs(args, "I", &a0))
      {
        OBJ_CALL(self->object.setMinimumIntegerDigits(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "setMinimumIntegerDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_setMultiplier(t_DecimalFormat *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setMultiplier(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setMultiplier", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setNegativePrefix(t_DecimalFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.setNegativePrefix(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setNegativePrefix", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setNegativeSuffix(t_DecimalFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.setNegativeSuffix(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setNegativeSuffix", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setParseBigDecimal(t_DecimalFormat *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.setParseBigDecimal(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setParseBigDecimal", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setPositivePrefix(t_DecimalFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.setPositivePrefix(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setPositivePrefix", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setPositiveSuffix(t_DecimalFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.setPositiveSuffix(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setPositiveSuffix", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_toLocalizedPattern(t_DecimalFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.toLocalizedPattern());
      return j2p(result);
    }

    static PyObject *t_DecimalFormat_toPattern(t_DecimalFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.toPattern());
      return j2p(result);
    }

    static PyObject *t_DecimalFormat_get__currency(t_DecimalFormat *self, void *data)
    {
      ::java::util::Currency value((jobject) NULL);
      OBJ_CALL(value = self->object.getCurrency());
      return ::java::util::t_Currency::wrap_Object(value);
    }
    static int t_DecimalFormat_set__currency(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::util::Currency value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::util::Currency::initializeClass, &value))
        {
          INT_CALL(self->object.setCurrency(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "currency", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__decimalSeparatorAlwaysShown(t_DecimalFormat *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isDecimalSeparatorAlwaysShown());
      Py_RETURN_BOOL(value);
    }
    static int t_DecimalFormat_set__decimalSeparatorAlwaysShown(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jboolean value;
        if (!parseArg(arg, "Z", &value))
        {
          INT_CALL(self->object.setDecimalSeparatorAlwaysShown(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "decimalSeparatorAlwaysShown", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__groupingSize(t_DecimalFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getGroupingSize());
      return PyInt_FromLong((long) value);
    }
    static int t_DecimalFormat_set__groupingSize(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setGroupingSize(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "groupingSize", arg);
      return -1;
    }

    static int t_DecimalFormat_set__groupingUsed(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jboolean value;
        if (!parseArg(arg, "Z", &value))
        {
          INT_CALL(self->object.setGroupingUsed(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "groupingUsed", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__maximumFractionDigits(t_DecimalFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMaximumFractionDigits());
      return PyInt_FromLong((long) value);
    }
    static int t_DecimalFormat_set__maximumFractionDigits(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMaximumFractionDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "maximumFractionDigits", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__maximumIntegerDigits(t_DecimalFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMaximumIntegerDigits());
      return PyInt_FromLong((long) value);
    }
    static int t_DecimalFormat_set__maximumIntegerDigits(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMaximumIntegerDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "maximumIntegerDigits", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__minimumFractionDigits(t_DecimalFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMinimumFractionDigits());
      return PyInt_FromLong((long) value);
    }
    static int t_DecimalFormat_set__minimumFractionDigits(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMinimumFractionDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "minimumFractionDigits", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__minimumIntegerDigits(t_DecimalFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMinimumIntegerDigits());
      return PyInt_FromLong((long) value);
    }
    static int t_DecimalFormat_set__minimumIntegerDigits(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMinimumIntegerDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "minimumIntegerDigits", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__multiplier(t_DecimalFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMultiplier());
      return PyInt_FromLong((long) value);
    }
    static int t_DecimalFormat_set__multiplier(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMultiplier(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "multiplier", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__negativePrefix(t_DecimalFormat *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getNegativePrefix());
      return j2p(value);
    }
    static int t_DecimalFormat_set__negativePrefix(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::String value((jobject) NULL);
        if (!parseArg(arg, "s", &value))
        {
          INT_CALL(self->object.setNegativePrefix(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "negativePrefix", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__negativeSuffix(t_DecimalFormat *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getNegativeSuffix());
      return j2p(value);
    }
    static int t_DecimalFormat_set__negativeSuffix(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::String value((jobject) NULL);
        if (!parseArg(arg, "s", &value))
        {
          INT_CALL(self->object.setNegativeSuffix(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "negativeSuffix", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__parseBigDecimal(t_DecimalFormat *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isParseBigDecimal());
      Py_RETURN_BOOL(value);
    }
    static int t_DecimalFormat_set__parseBigDecimal(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jboolean value;
        if (!parseArg(arg, "Z", &value))
        {
          INT_CALL(self->object.setParseBigDecimal(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "parseBigDecimal", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__positivePrefix(t_DecimalFormat *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getPositivePrefix());
      return j2p(value);
    }
    static int t_DecimalFormat_set__positivePrefix(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::String value((jobject) NULL);
        if (!parseArg(arg, "s", &value))
        {
          INT_CALL(self->object.setPositivePrefix(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "positivePrefix", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__positiveSuffix(t_DecimalFormat *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getPositiveSuffix());
      return j2p(value);
    }
    static int t_DecimalFormat_set__positiveSuffix(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::String value((jobject) NULL);
        if (!parseArg(arg, "s", &value))
        {
          INT_CALL(self->object.setPositiveSuffix(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "positiveSuffix", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/MonotonicBlockPackedReader.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *MonotonicBlockPackedReader::class$ = NULL;
          jmethodID *MonotonicBlockPackedReader::mids$ = NULL;
          bool MonotonicBlockPackedReader::live$ = false;

          jclass MonotonicBlockPackedReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/MonotonicBlockPackedReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_get_0ee6df33] = env->getMethodID(cls, "get", "(J)J");
              mids$[mid_of_796f5dbd] = env->getStaticMethodID(cls, "of", "(Lorg/apache/lucene/store/IndexInput;IIJZ)Lorg/apache/lucene/util/packed/MonotonicBlockPackedReader;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_54c6a17a] = env->getMethodID(cls, "size", "()J");
              mids$[mid_decodeDelta_0ee6df33] = env->getMethodID(cls, "decodeDelta", "(J)J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jlong MonotonicBlockPackedReader::get(jlong a0) const
          {
            return env->callLongMethod(this$, mids$[mid_get_0ee6df33], a0);
          }

          MonotonicBlockPackedReader MonotonicBlockPackedReader::of(const ::org::apache::lucene::store::IndexInput & a0, jint a1, jint a2, jlong a3, jboolean a4)
          {
            jclass cls = env->getClass(initializeClass);
            return MonotonicBlockPackedReader(env->callStaticObjectMethod(cls, mids$[mid_of_796f5dbd], a0.this$, a1, a2, a3, a4));
          }

          jlong MonotonicBlockPackedReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          jlong MonotonicBlockPackedReader::size() const
          {
            return env->callLongMethod(this$, mids$[mid_size_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_MonotonicBlockPackedReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MonotonicBlockPackedReader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MonotonicBlockPackedReader_get(t_MonotonicBlockPackedReader *self, PyObject *args);
          static PyObject *t_MonotonicBlockPackedReader_of(PyTypeObject *type, PyObject *args);
          static PyObject *t_MonotonicBlockPackedReader_ramBytesUsed(t_MonotonicBlockPackedReader *self);
          static PyObject *t_MonotonicBlockPackedReader_size(t_MonotonicBlockPackedReader *self);

          static PyMethodDef t_MonotonicBlockPackedReader__methods_[] = {
            DECLARE_METHOD(t_MonotonicBlockPackedReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MonotonicBlockPackedReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MonotonicBlockPackedReader, get, METH_VARARGS),
            DECLARE_METHOD(t_MonotonicBlockPackedReader, of, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_MonotonicBlockPackedReader, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_MonotonicBlockPackedReader, size, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MonotonicBlockPackedReader, t_MonotonicBlockPackedReader, ::org::apache::lucene::util::LongValues, MonotonicBlockPackedReader, abstract_init, 0, 0, 0, 0, 0);

          void t_MonotonicBlockPackedReader::install(PyObject *module)
          {
            installType(&PY_TYPE(MonotonicBlockPackedReader), module, "MonotonicBlockPackedReader", 0);
          }

          void t_MonotonicBlockPackedReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MonotonicBlockPackedReader).tp_dict, "class_", make_descriptor(MonotonicBlockPackedReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MonotonicBlockPackedReader).tp_dict, "wrapfn_", make_descriptor(t_MonotonicBlockPackedReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MonotonicBlockPackedReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MonotonicBlockPackedReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MonotonicBlockPackedReader::initializeClass, 1)))
              return NULL;
            return t_MonotonicBlockPackedReader::wrap_Object(MonotonicBlockPackedReader(((t_MonotonicBlockPackedReader *) arg)->object.this$));
          }
          static PyObject *t_MonotonicBlockPackedReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MonotonicBlockPackedReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_MonotonicBlockPackedReader_get(t_MonotonicBlockPackedReader *self, PyObject *args)
          {
            jlong a0;
            jlong result;

            if (!parseArgs(args, "J", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(MonotonicBlockPackedReader), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_MonotonicBlockPackedReader_of(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
            jint a1;
            jint a2;
            jlong a3;
            jboolean a4;
            MonotonicBlockPackedReader result((jobject) NULL);

            if (!parseArgs(args, "kIIJZ", ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::MonotonicBlockPackedReader::of(a0, a1, a2, a3, a4));
              return t_MonotonicBlockPackedReader::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "of", args);
            return NULL;
          }

          static PyObject *t_MonotonicBlockPackedReader_ramBytesUsed(t_MonotonicBlockPackedReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_MonotonicBlockPackedReader_size(t_MonotonicBlockPackedReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexWriter$IndexReaderWarmer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexWriter$IndexReaderWarmer::class$ = NULL;
        jmethodID *IndexWriter$IndexReaderWarmer::mids$ = NULL;
        bool IndexWriter$IndexReaderWarmer::live$ = false;

        jclass IndexWriter$IndexReaderWarmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexWriter$IndexReaderWarmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_warm_c9e29579] = env->getMethodID(cls, "warm", "(Lorg/apache/lucene/index/AtomicReader;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void IndexWriter$IndexReaderWarmer::warm(const ::org::apache::lucene::index::AtomicReader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_warm_c9e29579], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexWriter$IndexReaderWarmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriter$IndexReaderWarmer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriter$IndexReaderWarmer_warm(t_IndexWriter$IndexReaderWarmer *self, PyObject *arg);

        static PyMethodDef t_IndexWriter$IndexReaderWarmer__methods_[] = {
          DECLARE_METHOD(t_IndexWriter$IndexReaderWarmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriter$IndexReaderWarmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriter$IndexReaderWarmer, warm, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexWriter$IndexReaderWarmer, t_IndexWriter$IndexReaderWarmer, ::java::lang::Object, IndexWriter$IndexReaderWarmer, abstract_init, 0, 0, 0, 0, 0);

        void t_IndexWriter$IndexReaderWarmer::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexWriter$IndexReaderWarmer), module, "IndexWriter$IndexReaderWarmer", 0);
        }

        void t_IndexWriter$IndexReaderWarmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexWriter$IndexReaderWarmer).tp_dict, "class_", make_descriptor(IndexWriter$IndexReaderWarmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexWriter$IndexReaderWarmer).tp_dict, "wrapfn_", make_descriptor(t_IndexWriter$IndexReaderWarmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexWriter$IndexReaderWarmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexWriter$IndexReaderWarmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexWriter$IndexReaderWarmer::initializeClass, 1)))
            return NULL;
          return t_IndexWriter$IndexReaderWarmer::wrap_Object(IndexWriter$IndexReaderWarmer(((t_IndexWriter$IndexReaderWarmer *) arg)->object.this$));
        }
        static PyObject *t_IndexWriter$IndexReaderWarmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexWriter$IndexReaderWarmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexWriter$IndexReaderWarmer_warm(t_IndexWriter$IndexReaderWarmer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.warm(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "warm", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanAnalyzer.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanAnalyzer::class$ = NULL;
          jmethodID *GermanAnalyzer::mids$ = NULL;
          bool GermanAnalyzer::live$ = false;
          ::java::lang::String *GermanAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass GermanAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_3ea629c6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanAnalyzer::GermanAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          GermanAnalyzer::GermanAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          GermanAnalyzer::GermanAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          GermanAnalyzer::GermanAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          GermanAnalyzer::GermanAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_3ea629c6, a0.this$, a1.this$)) {}

          GermanAnalyzer::GermanAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet GermanAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanAnalyzer_init_(t_GermanAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_GermanAnalyzer_get__defaultStopSet(t_GermanAnalyzer *self, void *data);
          static PyGetSetDef t_GermanAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_GermanAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GermanAnalyzer__methods_[] = {
            DECLARE_METHOD(t_GermanAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanAnalyzer, t_GermanAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, GermanAnalyzer, t_GermanAnalyzer_init_, 0, 0, t_GermanAnalyzer__fields_, 0, 0);

          void t_GermanAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanAnalyzer), module, "GermanAnalyzer", 0);
          }

          void t_GermanAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanAnalyzer).tp_dict, "class_", make_descriptor(GermanAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_GermanAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(GermanAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(GermanAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*GermanAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_GermanAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanAnalyzer::initializeClass, 1)))
              return NULL;
            return t_GermanAnalyzer::wrap_Object(GermanAnalyzer(((t_GermanAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_GermanAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanAnalyzer_init_(t_GermanAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                GermanAnalyzer object((jobject) NULL);

                INT_CALL(object = GermanAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                GermanAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = GermanAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                GermanAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = GermanAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                GermanAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = GermanAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                GermanAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = GermanAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                GermanAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = GermanAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::de::GermanAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_GermanAnalyzer_get__defaultStopSet(t_GermanAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OfflineSorter$BufferSize.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OfflineSorter$BufferSize::class$ = NULL;
        jmethodID *OfflineSorter$BufferSize::mids$ = NULL;
        bool OfflineSorter$BufferSize::live$ = false;

        jclass OfflineSorter$BufferSize::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OfflineSorter$BufferSize");

            mids$ = new jmethodID[max_mid];
            mids$[mid_automatic_c261dc62] = env->getStaticMethodID(cls, "automatic", "()Lorg/apache/lucene/util/OfflineSorter$BufferSize;");
            mids$[mid_megabytes_80c67993] = env->getStaticMethodID(cls, "megabytes", "(J)Lorg/apache/lucene/util/OfflineSorter$BufferSize;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OfflineSorter$BufferSize OfflineSorter$BufferSize::automatic()
        {
          jclass cls = env->getClass(initializeClass);
          return OfflineSorter$BufferSize(env->callStaticObjectMethod(cls, mids$[mid_automatic_c261dc62]));
        }

        OfflineSorter$BufferSize OfflineSorter$BufferSize::megabytes(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return OfflineSorter$BufferSize(env->callStaticObjectMethod(cls, mids$[mid_megabytes_80c67993], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OfflineSorter$BufferSize_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OfflineSorter$BufferSize_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OfflineSorter$BufferSize_automatic(PyTypeObject *type);
        static PyObject *t_OfflineSorter$BufferSize_megabytes(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_OfflineSorter$BufferSize__methods_[] = {
          DECLARE_METHOD(t_OfflineSorter$BufferSize, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$BufferSize, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$BufferSize, automatic, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$BufferSize, megabytes, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OfflineSorter$BufferSize, t_OfflineSorter$BufferSize, ::java::lang::Object, OfflineSorter$BufferSize, abstract_init, 0, 0, 0, 0, 0);

        void t_OfflineSorter$BufferSize::install(PyObject *module)
        {
          installType(&PY_TYPE(OfflineSorter$BufferSize), module, "OfflineSorter$BufferSize", 0);
        }

        void t_OfflineSorter$BufferSize::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OfflineSorter$BufferSize).tp_dict, "class_", make_descriptor(OfflineSorter$BufferSize::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OfflineSorter$BufferSize).tp_dict, "wrapfn_", make_descriptor(t_OfflineSorter$BufferSize::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OfflineSorter$BufferSize).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OfflineSorter$BufferSize_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OfflineSorter$BufferSize::initializeClass, 1)))
            return NULL;
          return t_OfflineSorter$BufferSize::wrap_Object(OfflineSorter$BufferSize(((t_OfflineSorter$BufferSize *) arg)->object.this$));
        }
        static PyObject *t_OfflineSorter$BufferSize_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OfflineSorter$BufferSize::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_OfflineSorter$BufferSize_automatic(PyTypeObject *type)
        {
          OfflineSorter$BufferSize result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::OfflineSorter$BufferSize::automatic());
          return t_OfflineSorter$BufferSize::wrap_Object(result);
        }

        static PyObject *t_OfflineSorter$BufferSize_megabytes(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          OfflineSorter$BufferSize result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::OfflineSorter$BufferSize::megabytes(a0));
            return t_OfflineSorter$BufferSize::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "megabytes", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/SetKeywordMarkerFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *SetKeywordMarkerFilter::class$ = NULL;
          jmethodID *SetKeywordMarkerFilter::mids$ = NULL;
          bool SetKeywordMarkerFilter::live$ = false;

          jclass SetKeywordMarkerFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/SetKeywordMarkerFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_64fb9de3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_isKeyword_54c6a16a] = env->getMethodID(cls, "isKeyword", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SetKeywordMarkerFilter::SetKeywordMarkerFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::miscellaneous::KeywordMarkerFilter(env->newObject(initializeClass, &mids$, mid_init$_64fb9de3, a0.this$, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_SetKeywordMarkerFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SetKeywordMarkerFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SetKeywordMarkerFilter_init_(t_SetKeywordMarkerFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_SetKeywordMarkerFilter__methods_[] = {
            DECLARE_METHOD(t_SetKeywordMarkerFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SetKeywordMarkerFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SetKeywordMarkerFilter, t_SetKeywordMarkerFilter, ::org::apache::lucene::analysis::miscellaneous::KeywordMarkerFilter, SetKeywordMarkerFilter, t_SetKeywordMarkerFilter_init_, 0, 0, 0, 0, 0);

          void t_SetKeywordMarkerFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SetKeywordMarkerFilter), module, "SetKeywordMarkerFilter", 0);
          }

          void t_SetKeywordMarkerFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SetKeywordMarkerFilter).tp_dict, "class_", make_descriptor(SetKeywordMarkerFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SetKeywordMarkerFilter).tp_dict, "wrapfn_", make_descriptor(t_SetKeywordMarkerFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SetKeywordMarkerFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SetKeywordMarkerFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SetKeywordMarkerFilter::initializeClass, 1)))
              return NULL;
            return t_SetKeywordMarkerFilter::wrap_Object(SetKeywordMarkerFilter(((t_SetKeywordMarkerFilter *) arg)->object.this$));
          }
          static PyObject *t_SetKeywordMarkerFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SetKeywordMarkerFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SetKeywordMarkerFilter_init_(t_SetKeywordMarkerFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
            PyTypeObject **p1;
            SetKeywordMarkerFilter object((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
            {
              INT_CALL(object = SetKeywordMarkerFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/FreeTextSuggester.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/util/Set.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *FreeTextSuggester::class$ = NULL;
            jmethodID *FreeTextSuggester::mids$ = NULL;
            bool FreeTextSuggester::live$ = false;
            jdouble FreeTextSuggester::ALPHA = (jdouble) 0;
            ::java::lang::String *FreeTextSuggester::CODEC_NAME = NULL;
            jint FreeTextSuggester::DEFAULT_GRAMS = (jint) 0;
            jbyte FreeTextSuggester::DEFAULT_SEPARATOR = (jbyte) 0;
            jint FreeTextSuggester::VERSION_CURRENT = (jint) 0;
            jint FreeTextSuggester::VERSION_START = (jint) 0;

            jclass FreeTextSuggester::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/FreeTextSuggester");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_6a3c5772] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_9c9ed338] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;I)V");
                mids$[mid_init$_942dba41] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;IB)V");
                mids$[mid_build_1754a234] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_build_a548a403] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;D)V");
                mids$[mid_get_a739ccff] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getCount_54c6a17a] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_f5d6a55d] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_560b361c] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;I)Ljava/util/List;");
                mids$[mid_lookup_afd51678] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;I)Ljava/util/List;");
                mids$[mid_lookup_8aa7b45d] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;ZI)Ljava/util/List;");
                mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_store_27875f5b] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                ALPHA = env->getStaticDoubleField(cls, "ALPHA");
                CODEC_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "CODEC_NAME", "Ljava/lang/String;"));
                DEFAULT_GRAMS = env->getStaticIntField(cls, "DEFAULT_GRAMS");
                DEFAULT_SEPARATOR = env->getStaticByteField(cls, "DEFAULT_SEPARATOR");
                VERSION_CURRENT = env->getStaticIntField(cls, "VERSION_CURRENT");
                VERSION_START = env->getStaticIntField(cls, "VERSION_START");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FreeTextSuggester::FreeTextSuggester(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}

            FreeTextSuggester::FreeTextSuggester(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_6a3c5772, a0.this$, a1.this$)) {}

            FreeTextSuggester::FreeTextSuggester(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::Analyzer & a1, jint a2) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_9c9ed338, a0.this$, a1.this$, a2)) {}

            FreeTextSuggester::FreeTextSuggester(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::Analyzer & a1, jint a2, jbyte a3) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_942dba41, a0.this$, a1.this$, a2, a3)) {}

            void FreeTextSuggester::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_1754a234], a0.this$);
            }

            void FreeTextSuggester::build(const ::org::apache::lucene::search::suggest::InputIterator & a0, jdouble a1) const
            {
              env->callVoidMethod(this$, mids$[mid_build_a548a403], a0.this$, a1);
            }

            ::java::lang::Object FreeTextSuggester::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a739ccff], a0.this$));
            }

            jlong FreeTextSuggester::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_54c6a17a]);
            }

            jboolean FreeTextSuggester::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_f5d6a55d], a0.this$);
            }

            ::java::util::List FreeTextSuggester::lookup(const ::java::lang::CharSequence & a0, jint a1) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_560b361c], a0.this$, a1));
            }

            ::java::util::List FreeTextSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jint a2) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_afd51678], a0.this$, a1.this$, a2));
            }

            ::java::util::List FreeTextSuggester::lookup(const ::java::lang::CharSequence & a0, jboolean a1, jint a2) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_8aa7b45d], a0.this$, a1, a2));
            }

            ::java::util::List FreeTextSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
            }

            jlong FreeTextSuggester::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
            }

            jboolean FreeTextSuggester::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_27875f5b], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_FreeTextSuggester_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FreeTextSuggester_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FreeTextSuggester_init_(t_FreeTextSuggester *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FreeTextSuggester_build(t_FreeTextSuggester *self, PyObject *args);
            static PyObject *t_FreeTextSuggester_get(t_FreeTextSuggester *self, PyObject *arg);
            static PyObject *t_FreeTextSuggester_getCount(t_FreeTextSuggester *self, PyObject *args);
            static PyObject *t_FreeTextSuggester_load(t_FreeTextSuggester *self, PyObject *args);
            static PyObject *t_FreeTextSuggester_lookup(t_FreeTextSuggester *self, PyObject *args);
            static PyObject *t_FreeTextSuggester_ramBytesUsed(t_FreeTextSuggester *self, PyObject *args);
            static PyObject *t_FreeTextSuggester_store(t_FreeTextSuggester *self, PyObject *args);
            static PyObject *t_FreeTextSuggester_get__count(t_FreeTextSuggester *self, void *data);
            static PyGetSetDef t_FreeTextSuggester__fields_[] = {
              DECLARE_GET_FIELD(t_FreeTextSuggester, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FreeTextSuggester__methods_[] = {
              DECLARE_METHOD(t_FreeTextSuggester, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FreeTextSuggester, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FreeTextSuggester, build, METH_VARARGS),
              DECLARE_METHOD(t_FreeTextSuggester, get, METH_O),
              DECLARE_METHOD(t_FreeTextSuggester, getCount, METH_VARARGS),
              DECLARE_METHOD(t_FreeTextSuggester, load, METH_VARARGS),
              DECLARE_METHOD(t_FreeTextSuggester, lookup, METH_VARARGS),
              DECLARE_METHOD(t_FreeTextSuggester, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_FreeTextSuggester, store, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FreeTextSuggester, t_FreeTextSuggester, ::org::apache::lucene::search::suggest::Lookup, FreeTextSuggester, t_FreeTextSuggester_init_, 0, 0, t_FreeTextSuggester__fields_, 0, 0);

            void t_FreeTextSuggester::install(PyObject *module)
            {
              installType(&PY_TYPE(FreeTextSuggester), module, "FreeTextSuggester", 0);
            }

            void t_FreeTextSuggester::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "class_", make_descriptor(FreeTextSuggester::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "wrapfn_", make_descriptor(t_FreeTextSuggester::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(FreeTextSuggester::initializeClass);
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "ALPHA", make_descriptor(FreeTextSuggester::ALPHA));
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "CODEC_NAME", make_descriptor(j2p(*FreeTextSuggester::CODEC_NAME)));
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "DEFAULT_GRAMS", make_descriptor(FreeTextSuggester::DEFAULT_GRAMS));
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "DEFAULT_SEPARATOR", make_descriptor(FreeTextSuggester::DEFAULT_SEPARATOR));
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "VERSION_CURRENT", make_descriptor(FreeTextSuggester::VERSION_CURRENT));
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "VERSION_START", make_descriptor(FreeTextSuggester::VERSION_START));
            }

            static PyObject *t_FreeTextSuggester_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FreeTextSuggester::initializeClass, 1)))
                return NULL;
              return t_FreeTextSuggester::wrap_Object(FreeTextSuggester(((t_FreeTextSuggester *) arg)->object.this$));
            }
            static PyObject *t_FreeTextSuggester_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FreeTextSuggester::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FreeTextSuggester_init_(t_FreeTextSuggester *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  FreeTextSuggester object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                  {
                    INT_CALL(object = FreeTextSuggester(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  FreeTextSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = FreeTextSuggester(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 3:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  jint a2;
                  FreeTextSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kkI", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                  {
                    INT_CALL(object = FreeTextSuggester(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 4:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  jint a2;
                  jbyte a3;
                  FreeTextSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kkIB", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3))
                  {
                    INT_CALL(object = FreeTextSuggester(a0, a1, a2, a3));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FreeTextSuggester_build(t_FreeTextSuggester *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
                  {
                    OBJ_CALL(self->object.build(a0));
                    Py_RETURN_NONE;
                  }
                }
                break;
               case 2:
                {
                  ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);
                  jdouble a1;

                  if (!parseArgs(args, "kD", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0, &a1))
                  {
                    OBJ_CALL(self->object.build(a0, a1));
                    Py_RETURN_NONE;
                  }
                }
              }

              return callSuper(&PY_TYPE(FreeTextSuggester), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_FreeTextSuggester_get(t_FreeTextSuggester *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_FreeTextSuggester_getCount(t_FreeTextSuggester *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(FreeTextSuggester), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_FreeTextSuggester_load(t_FreeTextSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(FreeTextSuggester), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_FreeTextSuggester_lookup(t_FreeTextSuggester *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 2:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  jint a1;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                break;
               case 3:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::java::util::Set a1((jobject) NULL);
                  PyTypeObject **p1;
                  jint a2;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OKI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  jboolean a1;
                  jint a2;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OZI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                break;
               case 4:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::java::util::Set a1((jobject) NULL);
                  PyTypeObject **p1;
                  jboolean a2;
                  jint a3;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
              }

              return callSuper(&PY_TYPE(FreeTextSuggester), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_FreeTextSuggester_ramBytesUsed(t_FreeTextSuggester *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(FreeTextSuggester), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_FreeTextSuggester_store(t_FreeTextSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(FreeTextSuggester), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_FreeTextSuggester_get__count(t_FreeTextSuggester *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanStemFilter.h"
#include "org/apache/lucene/analysis/de/GermanStemmer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanStemFilter::class$ = NULL;
          jmethodID *GermanStemFilter::mids$ = NULL;
          bool GermanStemFilter::live$ = false;

          jclass GermanStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_setStemmer_4867d4cf] = env->getMethodID(cls, "setStemmer", "(Lorg/apache/lucene/analysis/de/GermanStemmer;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanStemFilter::GermanStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean GermanStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void GermanStemFilter::setStemmer(const ::org::apache::lucene::analysis::de::GermanStemmer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setStemmer_4867d4cf], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanStemFilter_init_(t_GermanStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanStemFilter_incrementToken(t_GermanStemFilter *self, PyObject *args);
          static PyObject *t_GermanStemFilter_setStemmer(t_GermanStemFilter *self, PyObject *arg);
          static int t_GermanStemFilter_set__stemmer(t_GermanStemFilter *self, PyObject *arg, void *data);
          static PyGetSetDef t_GermanStemFilter__fields_[] = {
            DECLARE_SET_FIELD(t_GermanStemFilter, stemmer),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GermanStemFilter__methods_[] = {
            DECLARE_METHOD(t_GermanStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanStemFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_GermanStemFilter, setStemmer, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanStemFilter, t_GermanStemFilter, ::org::apache::lucene::analysis::TokenFilter, GermanStemFilter, t_GermanStemFilter_init_, 0, 0, t_GermanStemFilter__fields_, 0, 0);

          void t_GermanStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanStemFilter), module, "GermanStemFilter", 0);
          }

          void t_GermanStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanStemFilter).tp_dict, "class_", make_descriptor(GermanStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanStemFilter).tp_dict, "wrapfn_", make_descriptor(t_GermanStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanStemFilter::initializeClass, 1)))
              return NULL;
            return t_GermanStemFilter::wrap_Object(GermanStemFilter(((t_GermanStemFilter *) arg)->object.this$));
          }
          static PyObject *t_GermanStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanStemFilter_init_(t_GermanStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GermanStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GermanStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanStemFilter_incrementToken(t_GermanStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(GermanStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_GermanStemFilter_setStemmer(t_GermanStemFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::de::GermanStemmer a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::de::GermanStemmer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setStemmer(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStemmer", arg);
            return NULL;
          }

          static int t_GermanStemFilter_set__stemmer(t_GermanStemFilter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::de::GermanStemmer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::de::GermanStemmer::initializeClass, &value))
              {
                INT_CALL(self->object.setStemmer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "stemmer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/KeywordRepeatFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *KeywordRepeatFilter::class$ = NULL;
          jmethodID *KeywordRepeatFilter::mids$ = NULL;
          bool KeywordRepeatFilter::live$ = false;

          jclass KeywordRepeatFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/KeywordRepeatFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordRepeatFilter::KeywordRepeatFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean KeywordRepeatFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void KeywordRepeatFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_KeywordRepeatFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordRepeatFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordRepeatFilter_init_(t_KeywordRepeatFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeywordRepeatFilter_incrementToken(t_KeywordRepeatFilter *self, PyObject *args);
          static PyObject *t_KeywordRepeatFilter_reset(t_KeywordRepeatFilter *self, PyObject *args);

          static PyMethodDef t_KeywordRepeatFilter__methods_[] = {
            DECLARE_METHOD(t_KeywordRepeatFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordRepeatFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordRepeatFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_KeywordRepeatFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordRepeatFilter, t_KeywordRepeatFilter, ::org::apache::lucene::analysis::TokenFilter, KeywordRepeatFilter, t_KeywordRepeatFilter_init_, 0, 0, 0, 0, 0);

          void t_KeywordRepeatFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordRepeatFilter), module, "KeywordRepeatFilter", 0);
          }

          void t_KeywordRepeatFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordRepeatFilter).tp_dict, "class_", make_descriptor(KeywordRepeatFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordRepeatFilter).tp_dict, "wrapfn_", make_descriptor(t_KeywordRepeatFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordRepeatFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeywordRepeatFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordRepeatFilter::initializeClass, 1)))
              return NULL;
            return t_KeywordRepeatFilter::wrap_Object(KeywordRepeatFilter(((t_KeywordRepeatFilter *) arg)->object.this$));
          }
          static PyObject *t_KeywordRepeatFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordRepeatFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordRepeatFilter_init_(t_KeywordRepeatFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            KeywordRepeatFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = KeywordRepeatFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeywordRepeatFilter_incrementToken(t_KeywordRepeatFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(KeywordRepeatFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_KeywordRepeatFilter_reset(t_KeywordRepeatFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(KeywordRepeatFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/analysis/PythonTokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {

        ::java::lang::Class *PythonTokenStream::class$ = NULL;
        jmethodID *PythonTokenStream::mids$ = NULL;
        bool PythonTokenStream::live$ = false;

        jclass PythonTokenStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/analysis/PythonTokenStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonTokenStream::PythonTokenStream() : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonTokenStream::close() const
        {
          env->callNonvirtualVoidMethod(this$, (jclass) ::org::apache::lucene::analysis::TokenStream::class$->this$, ::org::apache::lucene::analysis::TokenStream::mids$[::org::apache::lucene::analysis::TokenStream::mid_close_54c6a166]);
        }

        void PythonTokenStream::end() const
        {
          env->callNonvirtualVoidMethod(this$, (jclass) ::org::apache::lucene::analysis::TokenStream::class$->this$, ::org::apache::lucene::analysis::TokenStream::mids$[::org::apache::lucene::analysis::TokenStream::mid_end_54c6a166]);
        }

        void PythonTokenStream::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonTokenStream::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonTokenStream::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }

        void PythonTokenStream::reset() const
        {
          env->callNonvirtualVoidMethod(this$, (jclass) ::org::apache::lucene::analysis::TokenStream::class$->this$, ::org::apache::lucene::analysis::TokenStream::mids$[::org::apache::lucene::analysis::TokenStream::mid_reset_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {
        static PyObject *t_PythonTokenStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonTokenStream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonTokenStream_init_(t_PythonTokenStream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonTokenStream_close(t_PythonTokenStream *self, PyObject *args);
        static PyObject *t_PythonTokenStream_end(t_PythonTokenStream *self, PyObject *args);
        static PyObject *t_PythonTokenStream_finalize(t_PythonTokenStream *self);
        static PyObject *t_PythonTokenStream_pythonExtension(t_PythonTokenStream *self, PyObject *args);
        static PyObject *t_PythonTokenStream_reset(t_PythonTokenStream *self, PyObject *args);
        static void JNICALL t_PythonTokenStream_close0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonTokenStream_end1(JNIEnv *jenv, jobject jobj);
        static jboolean JNICALL t_PythonTokenStream_incrementToken2(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonTokenStream_pythonDecRef3(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonTokenStream_reset4(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonTokenStream_get__self(t_PythonTokenStream *self, void *data);
        static PyGetSetDef t_PythonTokenStream__fields_[] = {
          DECLARE_GET_FIELD(t_PythonTokenStream, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonTokenStream__methods_[] = {
          DECLARE_METHOD(t_PythonTokenStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonTokenStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonTokenStream, close, METH_VARARGS),
          DECLARE_METHOD(t_PythonTokenStream, end, METH_VARARGS),
          DECLARE_METHOD(t_PythonTokenStream, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonTokenStream, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonTokenStream, reset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonTokenStream, t_PythonTokenStream, ::org::apache::lucene::analysis::TokenStream, PythonTokenStream, t_PythonTokenStream_init_, 0, 0, t_PythonTokenStream__fields_, 0, 0);

        void t_PythonTokenStream::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonTokenStream), module, "PythonTokenStream", 1);
        }

        void t_PythonTokenStream::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonTokenStream).tp_dict, "class_", make_descriptor(PythonTokenStream::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonTokenStream).tp_dict, "wrapfn_", make_descriptor(t_PythonTokenStream::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonTokenStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonTokenStream::initializeClass);
          JNINativeMethod methods[] = {
            { "close", "()V", (void *) t_PythonTokenStream_close0 },
            { "end", "()V", (void *) t_PythonTokenStream_end1 },
            { "incrementToken", "()Z", (void *) t_PythonTokenStream_incrementToken2 },
            { "pythonDecRef", "()V", (void *) t_PythonTokenStream_pythonDecRef3 },
            { "reset", "()V", (void *) t_PythonTokenStream_reset4 },
          };
          env->registerNatives(cls, methods, 5);
        }

        static PyObject *t_PythonTokenStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonTokenStream::initializeClass, 1)))
            return NULL;
          return t_PythonTokenStream::wrap_Object(PythonTokenStream(((t_PythonTokenStream *) arg)->object.this$));
        }
        static PyObject *t_PythonTokenStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonTokenStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonTokenStream_init_(t_PythonTokenStream *self, PyObject *args, PyObject *kwds)
        {
          PythonTokenStream object((jobject) NULL);

          INT_CALL(object = PythonTokenStream());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonTokenStream_close(t_PythonTokenStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonTokenStream), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_PythonTokenStream_end(t_PythonTokenStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.end());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonTokenStream), (PyObject *) self, "end", args, 2);
        }

        static PyObject *t_PythonTokenStream_finalize(t_PythonTokenStream *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonTokenStream_pythonExtension(t_PythonTokenStream *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonTokenStream_reset(t_PythonTokenStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonTokenStream), (PyObject *) self, "reset", args, 2);
        }

        static void JNICALL t_PythonTokenStream_close0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenStream::mids$[PythonTokenStream::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "close", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonTokenStream_end1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenStream::mids$[PythonTokenStream::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "end", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jboolean JNICALL t_PythonTokenStream_incrementToken2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenStream::mids$[PythonTokenStream::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "incrementToken", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("incrementToken", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonTokenStream_pythonDecRef3(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenStream::mids$[PythonTokenStream::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonTokenStream::mids$[PythonTokenStream::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static void JNICALL t_PythonTokenStream_reset4(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenStream::mids$[PythonTokenStream::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "reset", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static PyObject *t_PythonTokenStream_get__self(t_PythonTokenStream *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/FilterClause.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *FilterClause::class$ = NULL;
        jmethodID *FilterClause::mids$ = NULL;
        bool FilterClause::live$ = false;

        jclass FilterClause::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/FilterClause");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7373f548] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/BooleanClause$Occur;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getFilter_b40f961f] = env->getMethodID(cls, "getFilter", "()Lorg/apache/lucene/search/Filter;");
            mids$[mid_getOccur_157730ed] = env->getMethodID(cls, "getOccur", "()Lorg/apache/lucene/search/BooleanClause$Occur;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterClause::FilterClause(const ::org::apache::lucene::search::Filter & a0, const ::org::apache::lucene::search::BooleanClause$Occur & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7373f548, a0.this$, a1.this$)) {}

        jboolean FilterClause::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::Filter FilterClause::getFilter() const
        {
          return ::org::apache::lucene::search::Filter(env->callObjectMethod(this$, mids$[mid_getFilter_b40f961f]));
        }

        ::org::apache::lucene::search::BooleanClause$Occur FilterClause::getOccur() const
        {
          return ::org::apache::lucene::search::BooleanClause$Occur(env->callObjectMethod(this$, mids$[mid_getOccur_157730ed]));
        }

        jint FilterClause::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String FilterClause::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_FilterClause_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterClause_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterClause_init_(t_FilterClause *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterClause_equals(t_FilterClause *self, PyObject *args);
        static PyObject *t_FilterClause_getFilter(t_FilterClause *self);
        static PyObject *t_FilterClause_getOccur(t_FilterClause *self);
        static PyObject *t_FilterClause_hashCode(t_FilterClause *self, PyObject *args);
        static PyObject *t_FilterClause_toString(t_FilterClause *self, PyObject *args);
        static PyObject *t_FilterClause_get__filter(t_FilterClause *self, void *data);
        static PyObject *t_FilterClause_get__occur(t_FilterClause *self, void *data);
        static PyGetSetDef t_FilterClause__fields_[] = {
          DECLARE_GET_FIELD(t_FilterClause, filter),
          DECLARE_GET_FIELD(t_FilterClause, occur),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterClause__methods_[] = {
          DECLARE_METHOD(t_FilterClause, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterClause, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterClause, equals, METH_VARARGS),
          DECLARE_METHOD(t_FilterClause, getFilter, METH_NOARGS),
          DECLARE_METHOD(t_FilterClause, getOccur, METH_NOARGS),
          DECLARE_METHOD(t_FilterClause, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FilterClause, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterClause, t_FilterClause, ::java::lang::Object, FilterClause, t_FilterClause_init_, 0, 0, t_FilterClause__fields_, 0, 0);

        void t_FilterClause::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterClause), module, "FilterClause", 0);
        }

        void t_FilterClause::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterClause).tp_dict, "class_", make_descriptor(FilterClause::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterClause).tp_dict, "wrapfn_", make_descriptor(t_FilterClause::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterClause).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterClause_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterClause::initializeClass, 1)))
            return NULL;
          return t_FilterClause::wrap_Object(FilterClause(((t_FilterClause *) arg)->object.this$));
        }
        static PyObject *t_FilterClause_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterClause::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterClause_init_(t_FilterClause *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Filter a0((jobject) NULL);
          ::org::apache::lucene::search::BooleanClause$Occur a1((jobject) NULL);
          PyTypeObject **p1;
          FilterClause object((jobject) NULL);

          if (!parseArgs(args, "kK", ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_))
          {
            INT_CALL(object = FilterClause(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterClause_equals(t_FilterClause *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilterClause), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FilterClause_getFilter(t_FilterClause *self)
        {
          ::org::apache::lucene::search::Filter result((jobject) NULL);
          OBJ_CALL(result = self->object.getFilter());
          return ::org::apache::lucene::search::t_Filter::wrap_Object(result);
        }

        static PyObject *t_FilterClause_getOccur(t_FilterClause *self)
        {
          ::org::apache::lucene::search::BooleanClause$Occur result((jobject) NULL);
          OBJ_CALL(result = self->object.getOccur());
          return ::org::apache::lucene::search::t_BooleanClause$Occur::wrap_Object(result);
        }

        static PyObject *t_FilterClause_hashCode(t_FilterClause *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterClause), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FilterClause_toString(t_FilterClause *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FilterClause), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FilterClause_get__filter(t_FilterClause *self, void *data)
        {
          ::org::apache::lucene::search::Filter value((jobject) NULL);
          OBJ_CALL(value = self->object.getFilter());
          return ::org::apache::lucene::search::t_Filter::wrap_Object(value);
        }

        static PyObject *t_FilterClause_get__occur(t_FilterClause *self, void *data)
        {
          ::org::apache::lucene::search::BooleanClause$Occur value((jobject) NULL);
          OBJ_CALL(value = self->object.getOccur());
          return ::org::apache::lucene::search::t_BooleanClause$Occur::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState$OrdRange.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {

          ::java::lang::Class *SortedSetDocValuesReaderState::class$ = NULL;
          jmethodID *SortedSetDocValuesReaderState::mids$ = NULL;
          bool SortedSetDocValuesReaderState::live$ = false;

          jclass SortedSetDocValuesReaderState::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getDocValues_4bead171] = env->getMethodID(cls, "getDocValues", "()Lorg/apache/lucene/index/SortedSetDocValues;");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getOrdRange_73e2ee38] = env->getMethodID(cls, "getOrdRange", "(Ljava/lang/String;)Lorg/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState$OrdRange;");
              mids$[mid_getOrigReader_94bbd010] = env->getMethodID(cls, "getOrigReader", "()Lorg/apache/lucene/index/IndexReader;");
              mids$[mid_getPrefixToOrdRange_db60befd] = env->getMethodID(cls, "getPrefixToOrdRange", "()Ljava/util/Map;");
              mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::index::SortedSetDocValues SortedSetDocValuesReaderState::getDocValues() const
          {
            return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getDocValues_4bead171]));
          }

          ::java::lang::String SortedSetDocValuesReaderState::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState$OrdRange SortedSetDocValuesReaderState::getOrdRange(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState$OrdRange(env->callObjectMethod(this$, mids$[mid_getOrdRange_73e2ee38], a0.this$));
          }

          ::org::apache::lucene::index::IndexReader SortedSetDocValuesReaderState::getOrigReader() const
          {
            return ::org::apache::lucene::index::IndexReader(env->callObjectMethod(this$, mids$[mid_getOrigReader_94bbd010]));
          }

          ::java::util::Map SortedSetDocValuesReaderState::getPrefixToOrdRange() const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getPrefixToOrdRange_db60befd]));
          }

          jint SortedSetDocValuesReaderState::getSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {
          static PyObject *t_SortedSetDocValuesReaderState_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetDocValuesReaderState_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetDocValuesReaderState_getDocValues(t_SortedSetDocValuesReaderState *self);
          static PyObject *t_SortedSetDocValuesReaderState_getField(t_SortedSetDocValuesReaderState *self);
          static PyObject *t_SortedSetDocValuesReaderState_getOrdRange(t_SortedSetDocValuesReaderState *self, PyObject *arg);
          static PyObject *t_SortedSetDocValuesReaderState_getOrigReader(t_SortedSetDocValuesReaderState *self);
          static PyObject *t_SortedSetDocValuesReaderState_getPrefixToOrdRange(t_SortedSetDocValuesReaderState *self);
          static PyObject *t_SortedSetDocValuesReaderState_getSize(t_SortedSetDocValuesReaderState *self);
          static PyObject *t_SortedSetDocValuesReaderState_get__docValues(t_SortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_SortedSetDocValuesReaderState_get__field(t_SortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_SortedSetDocValuesReaderState_get__origReader(t_SortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_SortedSetDocValuesReaderState_get__prefixToOrdRange(t_SortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_SortedSetDocValuesReaderState_get__size(t_SortedSetDocValuesReaderState *self, void *data);
          static PyGetSetDef t_SortedSetDocValuesReaderState__fields_[] = {
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState, docValues),
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState, field),
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState, origReader),
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState, prefixToOrdRange),
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState, size),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SortedSetDocValuesReaderState__methods_[] = {
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, getDocValues, METH_NOARGS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, getField, METH_NOARGS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, getOrdRange, METH_O),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, getOrigReader, METH_NOARGS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, getPrefixToOrdRange, METH_NOARGS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, getSize, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedSetDocValuesReaderState, t_SortedSetDocValuesReaderState, ::java::lang::Object, SortedSetDocValuesReaderState, abstract_init, 0, 0, t_SortedSetDocValuesReaderState__fields_, 0, 0);

          void t_SortedSetDocValuesReaderState::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedSetDocValuesReaderState), module, "SortedSetDocValuesReaderState", 0);
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesReaderState).tp_dict, "OrdRange", make_descriptor(&PY_TYPE(SortedSetDocValuesReaderState$OrdRange)));
          }

          void t_SortedSetDocValuesReaderState::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesReaderState).tp_dict, "class_", make_descriptor(SortedSetDocValuesReaderState::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesReaderState).tp_dict, "wrapfn_", make_descriptor(t_SortedSetDocValuesReaderState::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesReaderState).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SortedSetDocValuesReaderState_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedSetDocValuesReaderState::initializeClass, 1)))
              return NULL;
            return t_SortedSetDocValuesReaderState::wrap_Object(SortedSetDocValuesReaderState(((t_SortedSetDocValuesReaderState *) arg)->object.this$));
          }
          static PyObject *t_SortedSetDocValuesReaderState_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedSetDocValuesReaderState::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SortedSetDocValuesReaderState_getDocValues(t_SortedSetDocValuesReaderState *self)
          {
            ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);
            OBJ_CALL(result = self->object.getDocValues());
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          static PyObject *t_SortedSetDocValuesReaderState_getField(t_SortedSetDocValuesReaderState *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getField());
            return j2p(result);
          }

          static PyObject *t_SortedSetDocValuesReaderState_getOrdRange(t_SortedSetDocValuesReaderState *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState$OrdRange result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getOrdRange(a0));
              return ::org::apache::lucene::facet::sortedset::t_SortedSetDocValuesReaderState$OrdRange::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getOrdRange", arg);
            return NULL;
          }

          static PyObject *t_SortedSetDocValuesReaderState_getOrigReader(t_SortedSetDocValuesReaderState *self)
          {
            ::org::apache::lucene::index::IndexReader result((jobject) NULL);
            OBJ_CALL(result = self->object.getOrigReader());
            return ::org::apache::lucene::index::t_IndexReader::wrap_Object(result);
          }

          static PyObject *t_SortedSetDocValuesReaderState_getPrefixToOrdRange(t_SortedSetDocValuesReaderState *self)
          {
            ::java::util::Map result((jobject) NULL);
            OBJ_CALL(result = self->object.getPrefixToOrdRange());
            return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::org::apache::lucene::facet::sortedset::PY_TYPE(SortedSetDocValuesReaderState$OrdRange));
          }

          static PyObject *t_SortedSetDocValuesReaderState_getSize(t_SortedSetDocValuesReaderState *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_SortedSetDocValuesReaderState_get__docValues(t_SortedSetDocValuesReaderState *self, void *data)
          {
            ::org::apache::lucene::index::SortedSetDocValues value((jobject) NULL);
            OBJ_CALL(value = self->object.getDocValues());
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(value);
          }

          static PyObject *t_SortedSetDocValuesReaderState_get__field(t_SortedSetDocValuesReaderState *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_SortedSetDocValuesReaderState_get__origReader(t_SortedSetDocValuesReaderState *self, void *data)
          {
            ::org::apache::lucene::index::IndexReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getOrigReader());
            return ::org::apache::lucene::index::t_IndexReader::wrap_Object(value);
          }

          static PyObject *t_SortedSetDocValuesReaderState_get__prefixToOrdRange(t_SortedSetDocValuesReaderState *self, void *data)
          {
            ::java::util::Map value((jobject) NULL);
            OBJ_CALL(value = self->object.getPrefixToOrdRange());
            return ::java::util::t_Map::wrap_Object(value);
          }

          static PyObject *t_SortedSetDocValuesReaderState_get__size(t_SortedSetDocValuesReaderState *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSize());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sinks/TeeSinkTokenFilter.h"
#include "org/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkTokenStream.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {

          ::java::lang::Class *TeeSinkTokenFilter::class$ = NULL;
          jmethodID *TeeSinkTokenFilter::mids$ = NULL;
          bool TeeSinkTokenFilter::live$ = false;

          jclass TeeSinkTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sinks/TeeSinkTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_addSinkTokenStream_4bcd0017] = env->getMethodID(cls, "addSinkTokenStream", "(Lorg/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkTokenStream;)V");
              mids$[mid_consumeAllTokens_54c6a166] = env->getMethodID(cls, "consumeAllTokens", "()V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_newSinkTokenStream_17f71d86] = env->getMethodID(cls, "newSinkTokenStream", "()Lorg/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkTokenStream;");
              mids$[mid_newSinkTokenStream_714b7637] = env->getMethodID(cls, "newSinkTokenStream", "(Lorg/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkFilter;)Lorg/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkTokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TeeSinkTokenFilter::TeeSinkTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          void TeeSinkTokenFilter::addSinkTokenStream(const ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_addSinkTokenStream_4bcd0017], a0.this$);
          }

          void TeeSinkTokenFilter::consumeAllTokens() const
          {
            env->callVoidMethod(this$, mids$[mid_consumeAllTokens_54c6a166]);
          }

          void TeeSinkTokenFilter::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean TeeSinkTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream TeeSinkTokenFilter::newSinkTokenStream() const
          {
            return ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream(env->callObjectMethod(this$, mids$[mid_newSinkTokenStream_17f71d86]));
          }

          ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream TeeSinkTokenFilter::newSinkTokenStream(const ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter & a0) const
          {
            return ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream(env->callObjectMethod(this$, mids$[mid_newSinkTokenStream_714b7637], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {
          static PyObject *t_TeeSinkTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TeeSinkTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TeeSinkTokenFilter_init_(t_TeeSinkTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TeeSinkTokenFilter_addSinkTokenStream(t_TeeSinkTokenFilter *self, PyObject *arg);
          static PyObject *t_TeeSinkTokenFilter_consumeAllTokens(t_TeeSinkTokenFilter *self);
          static PyObject *t_TeeSinkTokenFilter_end(t_TeeSinkTokenFilter *self, PyObject *args);
          static PyObject *t_TeeSinkTokenFilter_incrementToken(t_TeeSinkTokenFilter *self, PyObject *args);
          static PyObject *t_TeeSinkTokenFilter_newSinkTokenStream(t_TeeSinkTokenFilter *self, PyObject *args);

          static PyMethodDef t_TeeSinkTokenFilter__methods_[] = {
            DECLARE_METHOD(t_TeeSinkTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TeeSinkTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TeeSinkTokenFilter, addSinkTokenStream, METH_O),
            DECLARE_METHOD(t_TeeSinkTokenFilter, consumeAllTokens, METH_NOARGS),
            DECLARE_METHOD(t_TeeSinkTokenFilter, end, METH_VARARGS),
            DECLARE_METHOD(t_TeeSinkTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_TeeSinkTokenFilter, newSinkTokenStream, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TeeSinkTokenFilter, t_TeeSinkTokenFilter, ::org::apache::lucene::analysis::TokenFilter, TeeSinkTokenFilter, t_TeeSinkTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_TeeSinkTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TeeSinkTokenFilter), module, "TeeSinkTokenFilter", 0);
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter).tp_dict, "SinkTokenStream", make_descriptor(&PY_TYPE(TeeSinkTokenFilter$SinkTokenStream)));
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter).tp_dict, "SinkFilter", make_descriptor(&PY_TYPE(TeeSinkTokenFilter$SinkFilter)));
          }

          void t_TeeSinkTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter).tp_dict, "class_", make_descriptor(TeeSinkTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_TeeSinkTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TeeSinkTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TeeSinkTokenFilter::initializeClass, 1)))
              return NULL;
            return t_TeeSinkTokenFilter::wrap_Object(TeeSinkTokenFilter(((t_TeeSinkTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_TeeSinkTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TeeSinkTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TeeSinkTokenFilter_init_(t_TeeSinkTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            TeeSinkTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = TeeSinkTokenFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TeeSinkTokenFilter_addSinkTokenStream(t_TeeSinkTokenFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream::initializeClass, &a0))
            {
              OBJ_CALL(self->object.addSinkTokenStream(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addSinkTokenStream", arg);
            return NULL;
          }

          static PyObject *t_TeeSinkTokenFilter_consumeAllTokens(t_TeeSinkTokenFilter *self)
          {
            OBJ_CALL(self->object.consumeAllTokens());
            Py_RETURN_NONE;
          }

          static PyObject *t_TeeSinkTokenFilter_end(t_TeeSinkTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(TeeSinkTokenFilter), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_TeeSinkTokenFilter_incrementToken(t_TeeSinkTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TeeSinkTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_TeeSinkTokenFilter_newSinkTokenStream(t_TeeSinkTokenFilter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream result((jobject) NULL);
                OBJ_CALL(result = self->object.newSinkTokenStream());
                return ::org::apache::lucene::analysis::sinks::t_TeeSinkTokenFilter$SinkTokenStream::wrap_Object(result);
              }
              break;
             case 1:
              {
                ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter a0((jobject) NULL);
                ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.newSinkTokenStream(a0));
                  return ::org::apache::lucene::analysis::sinks::t_TeeSinkTokenFilter$SinkTokenStream::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "newSinkTokenStream", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/AndQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *AndQuery::class$ = NULL;
            jmethodID *AndQuery::mids$ = NULL;
            bool AndQuery::live$ = false;

            jclass AndQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/AndQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_4136185e] = env->getMethodID(cls, "<init>", "(Ljava/util/List;ZLjava/lang/String;)V");
                mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            AndQuery::AndQuery(const ::java::util::List & a0, jboolean a1, const ::java::lang::String & a2) : ::org::apache::lucene::queryparser::surround::query::ComposedQuery(env->newObject(initializeClass, &mids$, mid_init$_4136185e, a0.this$, a1, a2.this$)) {}

            ::org::apache::lucene::search::Query AndQuery::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_AndQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_AndQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_AndQuery_init_(t_AndQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_AndQuery_makeLuceneQueryFieldNoBoost(t_AndQuery *self, PyObject *args);

            static PyMethodDef t_AndQuery__methods_[] = {
              DECLARE_METHOD(t_AndQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_AndQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_AndQuery, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(AndQuery, t_AndQuery, ::org::apache::lucene::queryparser::surround::query::ComposedQuery, AndQuery, t_AndQuery_init_, 0, 0, 0, 0, 0);

            void t_AndQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(AndQuery), module, "AndQuery", 0);
            }

            void t_AndQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(AndQuery).tp_dict, "class_", make_descriptor(AndQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(AndQuery).tp_dict, "wrapfn_", make_descriptor(t_AndQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(AndQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_AndQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, AndQuery::initializeClass, 1)))
                return NULL;
              return t_AndQuery::wrap_Object(AndQuery(((t_AndQuery *) arg)->object.this$));
            }
            static PyObject *t_AndQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, AndQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_AndQuery_init_(t_AndQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              jboolean a1;
              ::java::lang::String a2((jobject) NULL);
              AndQuery object((jobject) NULL);

              if (!parseArgs(args, "KZs", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2))
              {
                INT_CALL(object = AndQuery(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_AndQuery_makeLuceneQueryFieldNoBoost(t_AndQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(AndQuery), (PyObject *) self, "makeLuceneQueryFieldNoBoost", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/StandardBooleanQueryNode.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *StandardBooleanQueryNode::class$ = NULL;
              jmethodID *StandardBooleanQueryNode::mids$ = NULL;
              bool StandardBooleanQueryNode::live$ = false;

              jclass StandardBooleanQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/StandardBooleanQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_7eb182ec] = env->getMethodID(cls, "<init>", "(Ljava/util/List;Z)V");
                  mids$[mid_isDisableCoord_54c6a16a] = env->getMethodID(cls, "isDisableCoord", "()Z");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardBooleanQueryNode::StandardBooleanQueryNode(const ::java::util::List & a0, jboolean a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode(env->newObject(initializeClass, &mids$, mid_init$_7eb182ec, a0.this$, a1)) {}

              jboolean StandardBooleanQueryNode::isDisableCoord() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isDisableCoord_54c6a16a]);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_StandardBooleanQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardBooleanQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardBooleanQueryNode_init_(t_StandardBooleanQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_StandardBooleanQueryNode_isDisableCoord(t_StandardBooleanQueryNode *self);
              static PyObject *t_StandardBooleanQueryNode_get__disableCoord(t_StandardBooleanQueryNode *self, void *data);
              static PyGetSetDef t_StandardBooleanQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_StandardBooleanQueryNode, disableCoord),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_StandardBooleanQueryNode__methods_[] = {
                DECLARE_METHOD(t_StandardBooleanQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardBooleanQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardBooleanQueryNode, isDisableCoord, METH_NOARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardBooleanQueryNode, t_StandardBooleanQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode, StandardBooleanQueryNode, t_StandardBooleanQueryNode_init_, 0, 0, t_StandardBooleanQueryNode__fields_, 0, 0);

              void t_StandardBooleanQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardBooleanQueryNode), module, "StandardBooleanQueryNode", 0);
              }

              void t_StandardBooleanQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardBooleanQueryNode).tp_dict, "class_", make_descriptor(StandardBooleanQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardBooleanQueryNode).tp_dict, "wrapfn_", make_descriptor(t_StandardBooleanQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardBooleanQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StandardBooleanQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardBooleanQueryNode::initializeClass, 1)))
                  return NULL;
                return t_StandardBooleanQueryNode::wrap_Object(StandardBooleanQueryNode(((t_StandardBooleanQueryNode *) arg)->object.this$));
              }
              static PyObject *t_StandardBooleanQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardBooleanQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardBooleanQueryNode_init_(t_StandardBooleanQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean a1;
                StandardBooleanQueryNode object((jobject) NULL);

                if (!parseArgs(args, "KZ", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
                {
                  INT_CALL(object = StandardBooleanQueryNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_StandardBooleanQueryNode_isDisableCoord(t_StandardBooleanQueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isDisableCoord());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_StandardBooleanQueryNode_get__disableCoord(t_StandardBooleanQueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isDisableCoord());
                Py_RETURN_BOOL(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *ModifierQueryNode$Modifier::class$ = NULL;
              jmethodID *ModifierQueryNode$Modifier::mids$ = NULL;
              bool ModifierQueryNode$Modifier::live$ = false;
              ModifierQueryNode$Modifier *ModifierQueryNode$Modifier::MOD_NONE = NULL;
              ModifierQueryNode$Modifier *ModifierQueryNode$Modifier::MOD_NOT = NULL;
              ModifierQueryNode$Modifier *ModifierQueryNode$Modifier::MOD_REQ = NULL;

              jclass ModifierQueryNode$Modifier::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_toDigitString_14c7b5c5] = env->getMethodID(cls, "toDigitString", "()Ljava/lang/String;");
                  mids$[mid_toLargeString_14c7b5c5] = env->getMethodID(cls, "toLargeString", "()Ljava/lang/String;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                  mids$[mid_valueOf_ceb5f083] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;");
                  mids$[mid_values_05c3b6a9] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  MOD_NONE = new ModifierQueryNode$Modifier(env->getStaticObjectField(cls, "MOD_NONE", "Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;"));
                  MOD_NOT = new ModifierQueryNode$Modifier(env->getStaticObjectField(cls, "MOD_NOT", "Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;"));
                  MOD_REQ = new ModifierQueryNode$Modifier(env->getStaticObjectField(cls, "MOD_REQ", "Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::String ModifierQueryNode$Modifier::toDigitString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toDigitString_14c7b5c5]));
              }

              ::java::lang::String ModifierQueryNode$Modifier::toLargeString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toLargeString_14c7b5c5]));
              }

              ::java::lang::String ModifierQueryNode$Modifier::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }

              ModifierQueryNode$Modifier ModifierQueryNode$Modifier::valueOf(const ::java::lang::String & a0)
              {
                jclass cls = env->getClass(initializeClass);
                return ModifierQueryNode$Modifier(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ceb5f083], a0.this$));
              }

              JArray< ModifierQueryNode$Modifier > ModifierQueryNode$Modifier::values()
              {
                jclass cls = env->getClass(initializeClass);
                return JArray< ModifierQueryNode$Modifier >(env->callStaticObjectMethod(cls, mids$[mid_values_05c3b6a9]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_ModifierQueryNode$Modifier_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ModifierQueryNode$Modifier_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ModifierQueryNode$Modifier_of_(t_ModifierQueryNode$Modifier *self, PyObject *args);
              static PyObject *t_ModifierQueryNode$Modifier_toDigitString(t_ModifierQueryNode$Modifier *self);
              static PyObject *t_ModifierQueryNode$Modifier_toLargeString(t_ModifierQueryNode$Modifier *self);
              static PyObject *t_ModifierQueryNode$Modifier_toString(t_ModifierQueryNode$Modifier *self, PyObject *args);
              static PyObject *t_ModifierQueryNode$Modifier_valueOf(PyTypeObject *type, PyObject *args);
              static PyObject *t_ModifierQueryNode$Modifier_values(PyTypeObject *type);
              static PyObject *t_ModifierQueryNode$Modifier_get__parameters_(t_ModifierQueryNode$Modifier *self, void *data);
              static PyGetSetDef t_ModifierQueryNode$Modifier__fields_[] = {
                DECLARE_GET_FIELD(t_ModifierQueryNode$Modifier, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ModifierQueryNode$Modifier__methods_[] = {
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, of_, METH_VARARGS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, toDigitString, METH_NOARGS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, toLargeString, METH_NOARGS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, toString, METH_VARARGS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, valueOf, METH_VARARGS | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, values, METH_NOARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ModifierQueryNode$Modifier, t_ModifierQueryNode$Modifier, ::java::lang::Enum, ModifierQueryNode$Modifier, abstract_init, 0, 0, t_ModifierQueryNode$Modifier__fields_, 0, 0);
              PyObject *t_ModifierQueryNode$Modifier::wrap_Object(const ModifierQueryNode$Modifier& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ModifierQueryNode$Modifier::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ModifierQueryNode$Modifier *self = (t_ModifierQueryNode$Modifier *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_ModifierQueryNode$Modifier::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ModifierQueryNode$Modifier::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ModifierQueryNode$Modifier *self = (t_ModifierQueryNode$Modifier *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_ModifierQueryNode$Modifier::install(PyObject *module)
              {
                installType(&PY_TYPE(ModifierQueryNode$Modifier), module, "ModifierQueryNode$Modifier", 0);
              }

              void t_ModifierQueryNode$Modifier::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode$Modifier).tp_dict, "class_", make_descriptor(ModifierQueryNode$Modifier::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode$Modifier).tp_dict, "wrapfn_", make_descriptor(t_ModifierQueryNode$Modifier::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode$Modifier).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(ModifierQueryNode$Modifier::initializeClass);
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode$Modifier).tp_dict, "MOD_NONE", make_descriptor(t_ModifierQueryNode$Modifier::wrap_Object(*ModifierQueryNode$Modifier::MOD_NONE)));
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode$Modifier).tp_dict, "MOD_NOT", make_descriptor(t_ModifierQueryNode$Modifier::wrap_Object(*ModifierQueryNode$Modifier::MOD_NOT)));
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode$Modifier).tp_dict, "MOD_REQ", make_descriptor(t_ModifierQueryNode$Modifier::wrap_Object(*ModifierQueryNode$Modifier::MOD_REQ)));
              }

              static PyObject *t_ModifierQueryNode$Modifier_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ModifierQueryNode$Modifier::initializeClass, 1)))
                  return NULL;
                return t_ModifierQueryNode$Modifier::wrap_Object(ModifierQueryNode$Modifier(((t_ModifierQueryNode$Modifier *) arg)->object.this$));
              }
              static PyObject *t_ModifierQueryNode$Modifier_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ModifierQueryNode$Modifier::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_ModifierQueryNode$Modifier_of_(t_ModifierQueryNode$Modifier *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_ModifierQueryNode$Modifier_toDigitString(t_ModifierQueryNode$Modifier *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.toDigitString());
                return j2p(result);
              }

              static PyObject *t_ModifierQueryNode$Modifier_toLargeString(t_ModifierQueryNode$Modifier *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.toLargeString());
                return j2p(result);
              }

              static PyObject *t_ModifierQueryNode$Modifier_toString(t_ModifierQueryNode$Modifier *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(ModifierQueryNode$Modifier), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_ModifierQueryNode$Modifier_valueOf(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::String a0((jobject) NULL);
                ModifierQueryNode$Modifier result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier::valueOf(a0));
                  return t_ModifierQueryNode$Modifier::wrap_Object(result);
                }

                return callSuper(type, "valueOf", args, 2);
              }

              static PyObject *t_ModifierQueryNode$Modifier_values(PyTypeObject *type)
              {
                JArray< ModifierQueryNode$Modifier > result((jobject) NULL);
                OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier::values());
                return JArray<jobject>(result.this$).wrap(t_ModifierQueryNode$Modifier::wrap_jobject);
              }
              static PyObject *t_ModifierQueryNode$Modifier_get__parameters_(t_ModifierQueryNode$Modifier *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileDescriptor.h"
#include "java/lang/Class.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/IOException.h"
#include "java/io/File.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *FileInputStream::class$ = NULL;
    jmethodID *FileInputStream::mids$ = NULL;
    bool FileInputStream::live$ = false;

    jclass FileInputStream::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/FileInputStream");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_698067a0] = env->getMethodID(cls, "<init>", "(Ljava/io/FileDescriptor;)V");
        mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_available_54c6a179] = env->getMethodID(cls, "available", "()I");
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_getFD_94738b01] = env->getMethodID(cls, "getFD", "()Ljava/io/FileDescriptor;");
        mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
        mids$[mid_read_49b4f134] = env->getMethodID(cls, "read", "([B)I");
        mids$[mid_read_86f44340] = env->getMethodID(cls, "read", "([BII)I");
        mids$[mid_skip_0ee6df33] = env->getMethodID(cls, "skip", "(J)J");
        mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    FileInputStream::FileInputStream(const ::java::io::FileDescriptor & a0) : ::java::io::InputStream(env->newObject(initializeClass, &mids$, mid_init$_698067a0, a0.this$)) {}

    FileInputStream::FileInputStream(const ::java::io::File & a0) : ::java::io::InputStream(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

    FileInputStream::FileInputStream(const ::java::lang::String & a0) : ::java::io::InputStream(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    jint FileInputStream::available() const
    {
      return env->callIntMethod(this$, mids$[mid_available_54c6a179]);
    }

    void FileInputStream::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    ::java::io::FileDescriptor FileInputStream::getFD() const
    {
      return ::java::io::FileDescriptor(env->callObjectMethod(this$, mids$[mid_getFD_94738b01]));
    }

    jint FileInputStream::read() const
    {
      return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
    }

    jint FileInputStream::read(const JArray< jbyte > & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_read_49b4f134], a0.this$);
    }

    jint FileInputStream::read(const JArray< jbyte > & a0, jint a1, jint a2) const
    {
      return env->callIntMethod(this$, mids$[mid_read_86f44340], a0.this$, a1, a2);
    }

    jlong FileInputStream::skip(jlong a0) const
    {
      return env->callLongMethod(this$, mids$[mid_skip_0ee6df33], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_FileInputStream_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_FileInputStream_instance_(PyTypeObject *type, PyObject *arg);
    static int t_FileInputStream_init_(t_FileInputStream *self, PyObject *args, PyObject *kwds);
    static PyObject *t_FileInputStream_available(t_FileInputStream *self, PyObject *args);
    static PyObject *t_FileInputStream_close(t_FileInputStream *self, PyObject *args);
    static PyObject *t_FileInputStream_getFD(t_FileInputStream *self);
    static PyObject *t_FileInputStream_read(t_FileInputStream *self, PyObject *args);
    static PyObject *t_FileInputStream_skip(t_FileInputStream *self, PyObject *args);
    static PyObject *t_FileInputStream_get__fD(t_FileInputStream *self, void *data);
    static PyGetSetDef t_FileInputStream__fields_[] = {
      DECLARE_GET_FIELD(t_FileInputStream, fD),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_FileInputStream__methods_[] = {
      DECLARE_METHOD(t_FileInputStream, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_FileInputStream, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_FileInputStream, available, METH_VARARGS),
      DECLARE_METHOD(t_FileInputStream, close, METH_VARARGS),
      DECLARE_METHOD(t_FileInputStream, getFD, METH_NOARGS),
      DECLARE_METHOD(t_FileInputStream, read, METH_VARARGS),
      DECLARE_METHOD(t_FileInputStream, skip, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(FileInputStream, t_FileInputStream, ::java::io::InputStream, FileInputStream, t_FileInputStream_init_, 0, 0, t_FileInputStream__fields_, 0, 0);

    void t_FileInputStream::install(PyObject *module)
    {
      installType(&PY_TYPE(FileInputStream), module, "FileInputStream", 0);
    }

    void t_FileInputStream::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(FileInputStream).tp_dict, "class_", make_descriptor(FileInputStream::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(FileInputStream).tp_dict, "wrapfn_", make_descriptor(t_FileInputStream::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(FileInputStream).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_FileInputStream_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, FileInputStream::initializeClass, 1)))
        return NULL;
      return t_FileInputStream::wrap_Object(FileInputStream(((t_FileInputStream *) arg)->object.this$));
    }
    static PyObject *t_FileInputStream_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, FileInputStream::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_FileInputStream_init_(t_FileInputStream *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::io::FileDescriptor a0((jobject) NULL);
          FileInputStream object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::FileDescriptor::initializeClass, &a0))
          {
            INT_CALL(object = FileInputStream(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::io::File a0((jobject) NULL);
          FileInputStream object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
          {
            INT_CALL(object = FileInputStream(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          FileInputStream object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = FileInputStream(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_FileInputStream_available(t_FileInputStream *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.available());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(FileInputStream), (PyObject *) self, "available", args, 2);
    }

    static PyObject *t_FileInputStream_close(t_FileInputStream *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.close());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(FileInputStream), (PyObject *) self, "close", args, 2);
    }

    static PyObject *t_FileInputStream_getFD(t_FileInputStream *self)
    {
      ::java::io::FileDescriptor result((jobject) NULL);
      OBJ_CALL(result = self->object.getFD());
      return ::java::io::t_FileDescriptor::wrap_Object(result);
    }

    static PyObject *t_FileInputStream_read(t_FileInputStream *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          jint result;
          OBJ_CALL(result = self->object.read());
          return PyInt_FromLong((long) result);
        }
        break;
       case 1:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(result = self->object.read(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      return callSuper(&PY_TYPE(FileInputStream), (PyObject *) self, "read", args, 2);
    }

    static PyObject *t_FileInputStream_skip(t_FileInputStream *self, PyObject *args)
    {
      jlong a0;
      jlong result;

      if (!parseArgs(args, "J", &a0))
      {
        OBJ_CALL(result = self->object.skip(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(FileInputStream), (PyObject *) self, "skip", args, 2);
    }

    static PyObject *t_FileInputStream_get__fD(t_FileInputStream *self, void *data)
    {
      ::java::io::FileDescriptor value((jobject) NULL);
      OBJ_CALL(value = self->object.getFD());
      return ::java::io::t_FileDescriptor::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/LowerCaseTokenizer.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *LowerCaseTokenizer::class$ = NULL;
          jmethodID *LowerCaseTokenizer::mids$ = NULL;
          bool LowerCaseTokenizer::live$ = false;

          jclass LowerCaseTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/LowerCaseTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_5877b8f0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_normalize_39c7bd23] = env->getMethodID(cls, "normalize", "(I)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LowerCaseTokenizer::LowerCaseTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::core::LetterTokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          LowerCaseTokenizer::LowerCaseTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::core::LetterTokenizer(env->newObject(initializeClass, &mids$, mid_init$_5877b8f0, a0.this$, a1.this$)) {}

          LowerCaseTokenizer::LowerCaseTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::core::LetterTokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          LowerCaseTokenizer::LowerCaseTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::core::LetterTokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_LowerCaseTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LowerCaseTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LowerCaseTokenizer_init_(t_LowerCaseTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_LowerCaseTokenizer__methods_[] = {
            DECLARE_METHOD(t_LowerCaseTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LowerCaseTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LowerCaseTokenizer, t_LowerCaseTokenizer, ::org::apache::lucene::analysis::core::LetterTokenizer, LowerCaseTokenizer, t_LowerCaseTokenizer_init_, 0, 0, 0, 0, 0);

          void t_LowerCaseTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(LowerCaseTokenizer), module, "LowerCaseTokenizer", 0);
          }

          void t_LowerCaseTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LowerCaseTokenizer).tp_dict, "class_", make_descriptor(LowerCaseTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LowerCaseTokenizer).tp_dict, "wrapfn_", make_descriptor(t_LowerCaseTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LowerCaseTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LowerCaseTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LowerCaseTokenizer::initializeClass, 1)))
              return NULL;
            return t_LowerCaseTokenizer::wrap_Object(LowerCaseTokenizer(((t_LowerCaseTokenizer *) arg)->object.this$));
          }
          static PyObject *t_LowerCaseTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LowerCaseTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LowerCaseTokenizer_init_(t_LowerCaseTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                LowerCaseTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = LowerCaseTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                LowerCaseTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = LowerCaseTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                LowerCaseTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = LowerCaseTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                LowerCaseTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = LowerCaseTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterFactory.h"
#include "org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilter.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *TypeAsPayloadTokenFilterFactory::class$ = NULL;
          jmethodID *TypeAsPayloadTokenFilterFactory::mids$ = NULL;
          bool TypeAsPayloadTokenFilterFactory::live$ = false;

          jclass TypeAsPayloadTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_9819dee1] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TypeAsPayloadTokenFilterFactory::TypeAsPayloadTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::payloads::TypeAsPayloadTokenFilter TypeAsPayloadTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::payloads::TypeAsPayloadTokenFilter(env->callObjectMethod(this$, mids$[mid_create_9819dee1], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_TypeAsPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeAsPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TypeAsPayloadTokenFilterFactory_init_(t_TypeAsPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TypeAsPayloadTokenFilterFactory_create(t_TypeAsPayloadTokenFilterFactory *self, PyObject *args);

          static PyMethodDef t_TypeAsPayloadTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TypeAsPayloadTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAsPayloadTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAsPayloadTokenFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TypeAsPayloadTokenFilterFactory, t_TypeAsPayloadTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, TypeAsPayloadTokenFilterFactory, t_TypeAsPayloadTokenFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_TypeAsPayloadTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TypeAsPayloadTokenFilterFactory), module, "TypeAsPayloadTokenFilterFactory", 0);
          }

          void t_TypeAsPayloadTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TypeAsPayloadTokenFilterFactory).tp_dict, "class_", make_descriptor(TypeAsPayloadTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TypeAsPayloadTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_TypeAsPayloadTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TypeAsPayloadTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TypeAsPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TypeAsPayloadTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TypeAsPayloadTokenFilterFactory::wrap_Object(TypeAsPayloadTokenFilterFactory(((t_TypeAsPayloadTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TypeAsPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TypeAsPayloadTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TypeAsPayloadTokenFilterFactory_init_(t_TypeAsPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            TypeAsPayloadTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = TypeAsPayloadTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TypeAsPayloadTokenFilterFactory_create(t_TypeAsPayloadTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::payloads::TypeAsPayloadTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::payloads::t_TypeAsPayloadTokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TypeAsPayloadTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/DataInputStream.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/io/DataInput.h"
#include "java/io/InputStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *DataInputStream::class$ = NULL;
    jmethodID *DataInputStream::mids$ = NULL;
    bool DataInputStream::live$ = false;

    jclass DataInputStream::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/DataInputStream");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
        mids$[mid_read_49b4f134] = env->getMethodID(cls, "read", "([B)I");
        mids$[mid_read_86f44340] = env->getMethodID(cls, "read", "([BII)I");
        mids$[mid_readBoolean_54c6a16a] = env->getMethodID(cls, "readBoolean", "()Z");
        mids$[mid_readByte_54c6a172] = env->getMethodID(cls, "readByte", "()B");
        mids$[mid_readChar_54c6a173] = env->getMethodID(cls, "readChar", "()C");
        mids$[mid_readDouble_54c6a174] = env->getMethodID(cls, "readDouble", "()D");
        mids$[mid_readFloat_54c6a176] = env->getMethodID(cls, "readFloat", "()F");
        mids$[mid_readFully_49b4f12b] = env->getMethodID(cls, "readFully", "([B)V");
        mids$[mid_readFully_86f4435f] = env->getMethodID(cls, "readFully", "([BII)V");
        mids$[mid_readInt_54c6a179] = env->getMethodID(cls, "readInt", "()I");
        mids$[mid_readLine_14c7b5c5] = env->getMethodID(cls, "readLine", "()Ljava/lang/String;");
        mids$[mid_readLong_54c6a17a] = env->getMethodID(cls, "readLong", "()J");
        mids$[mid_readShort_54c6a163] = env->getMethodID(cls, "readShort", "()S");
        mids$[mid_readUTF_14c7b5c5] = env->getMethodID(cls, "readUTF", "()Ljava/lang/String;");
        mids$[mid_readUTF_b3b10019] = env->getStaticMethodID(cls, "readUTF", "(Ljava/io/DataInput;)Ljava/lang/String;");
        mids$[mid_readUnsignedByte_54c6a179] = env->getMethodID(cls, "readUnsignedByte", "()I");
        mids$[mid_readUnsignedShort_54c6a179] = env->getMethodID(cls, "readUnsignedShort", "()I");
        mids$[mid_skipBytes_39c7bd23] = env->getMethodID(cls, "skipBytes", "(I)I");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    DataInputStream::DataInputStream(const ::java::io::InputStream & a0) : ::java::io::FilterInputStream(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

    jint DataInputStream::read(const JArray< jbyte > & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_read_49b4f134], a0.this$);
    }

    jint DataInputStream::read(const JArray< jbyte > & a0, jint a1, jint a2) const
    {
      return env->callIntMethod(this$, mids$[mid_read_86f44340], a0.this$, a1, a2);
    }

    jboolean DataInputStream::readBoolean() const
    {
      return env->callBooleanMethod(this$, mids$[mid_readBoolean_54c6a16a]);
    }

    jbyte DataInputStream::readByte() const
    {
      return env->callByteMethod(this$, mids$[mid_readByte_54c6a172]);
    }

    jchar DataInputStream::readChar() const
    {
      return env->callCharMethod(this$, mids$[mid_readChar_54c6a173]);
    }

    jdouble DataInputStream::readDouble() const
    {
      return env->callDoubleMethod(this$, mids$[mid_readDouble_54c6a174]);
    }

    jfloat DataInputStream::readFloat() const
    {
      return env->callFloatMethod(this$, mids$[mid_readFloat_54c6a176]);
    }

    void DataInputStream::readFully(const JArray< jbyte > & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_readFully_49b4f12b], a0.this$);
    }

    void DataInputStream::readFully(const JArray< jbyte > & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_readFully_86f4435f], a0.this$, a1, a2);
    }

    jint DataInputStream::readInt() const
    {
      return env->callIntMethod(this$, mids$[mid_readInt_54c6a179]);
    }

    ::java::lang::String DataInputStream::readLine() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_readLine_14c7b5c5]));
    }

    jlong DataInputStream::readLong() const
    {
      return env->callLongMethod(this$, mids$[mid_readLong_54c6a17a]);
    }

    jshort DataInputStream::readShort() const
    {
      return env->callShortMethod(this$, mids$[mid_readShort_54c6a163]);
    }

    ::java::lang::String DataInputStream::readUTF() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_readUTF_14c7b5c5]));
    }

    ::java::lang::String DataInputStream::readUTF(const ::java::io::DataInput & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_readUTF_b3b10019], a0.this$));
    }

    jint DataInputStream::readUnsignedByte() const
    {
      return env->callIntMethod(this$, mids$[mid_readUnsignedByte_54c6a179]);
    }

    jint DataInputStream::readUnsignedShort() const
    {
      return env->callIntMethod(this$, mids$[mid_readUnsignedShort_54c6a179]);
    }

    jint DataInputStream::skipBytes(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_skipBytes_39c7bd23], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_DataInputStream_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_DataInputStream_instance_(PyTypeObject *type, PyObject *arg);
    static int t_DataInputStream_init_(t_DataInputStream *self, PyObject *args, PyObject *kwds);
    static PyObject *t_DataInputStream_read(t_DataInputStream *self, PyObject *args);
    static PyObject *t_DataInputStream_readBoolean(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readByte(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readChar(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readDouble(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readFloat(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readFully(t_DataInputStream *self, PyObject *args);
    static PyObject *t_DataInputStream_readInt(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readLine(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readLong(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readShort(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readUTF(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readUTF_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_DataInputStream_readUnsignedByte(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readUnsignedShort(t_DataInputStream *self);
    static PyObject *t_DataInputStream_skipBytes(t_DataInputStream *self, PyObject *arg);

    static PyMethodDef t_DataInputStream__methods_[] = {
      DECLARE_METHOD(t_DataInputStream, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_DataInputStream, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_DataInputStream, read, METH_VARARGS),
      DECLARE_METHOD(t_DataInputStream, readBoolean, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readByte, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readChar, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readDouble, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readFloat, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readFully, METH_VARARGS),
      DECLARE_METHOD(t_DataInputStream, readInt, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readLine, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readLong, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readShort, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readUTF, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readUTF_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_DataInputStream, readUnsignedByte, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readUnsignedShort, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, skipBytes, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(DataInputStream, t_DataInputStream, ::java::io::FilterInputStream, DataInputStream, t_DataInputStream_init_, 0, 0, 0, 0, 0);

    void t_DataInputStream::install(PyObject *module)
    {
      installType(&PY_TYPE(DataInputStream), module, "DataInputStream", 0);
    }

    void t_DataInputStream::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(DataInputStream).tp_dict, "class_", make_descriptor(DataInputStream::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(DataInputStream).tp_dict, "wrapfn_", make_descriptor(t_DataInputStream::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(DataInputStream).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_DataInputStream_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, DataInputStream::initializeClass, 1)))
        return NULL;
      return t_DataInputStream::wrap_Object(DataInputStream(((t_DataInputStream *) arg)->object.this$));
    }
    static PyObject *t_DataInputStream_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, DataInputStream::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_DataInputStream_init_(t_DataInputStream *self, PyObject *args, PyObject *kwds)
    {
      ::java::io::InputStream a0((jobject) NULL);
      DataInputStream object((jobject) NULL);

      if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
      {
        INT_CALL(object = DataInputStream(a0));
        self->object = object;
      }
      else
      {
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_DataInputStream_read(t_DataInputStream *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(result = self->object.read(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      return callSuper(&PY_TYPE(DataInputStream), (PyObject *) self, "read", args, 2);
    }

    static PyObject *t_DataInputStream_readBoolean(t_DataInputStream *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.readBoolean());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_DataInputStream_readByte(t_DataInputStream *self)
    {
      jbyte result;
      OBJ_CALL(result = self->object.readByte());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_DataInputStream_readChar(t_DataInputStream *self)
    {
      jchar result;
      OBJ_CALL(result = self->object.readChar());
      return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
    }

    static PyObject *t_DataInputStream_readDouble(t_DataInputStream *self)
    {
      jdouble result;
      OBJ_CALL(result = self->object.readDouble());
      return PyFloat_FromDouble((double) result);
    }

    static PyObject *t_DataInputStream_readFloat(t_DataInputStream *self)
    {
      jfloat result;
      OBJ_CALL(result = self->object.readFloat());
      return PyFloat_FromDouble((double) result);
    }

    static PyObject *t_DataInputStream_readFully(t_DataInputStream *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jbyte > a0((jobject) NULL);

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(self->object.readFully(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 3:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.readFully(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "readFully", args);
      return NULL;
    }

    static PyObject *t_DataInputStream_readInt(t_DataInputStream *self)
    {
      jint result;
      OBJ_CALL(result = self->object.readInt());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_DataInputStream_readLine(t_DataInputStream *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.readLine());
      return j2p(result);
    }

    static PyObject *t_DataInputStream_readLong(t_DataInputStream *self)
    {
      jlong result;
      OBJ_CALL(result = self->object.readLong());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_DataInputStream_readShort(t_DataInputStream *self)
    {
      jshort result;
      OBJ_CALL(result = self->object.readShort());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_DataInputStream_readUTF(t_DataInputStream *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.readUTF());
      return j2p(result);
    }

    static PyObject *t_DataInputStream_readUTF_(PyTypeObject *type, PyObject *arg)
    {
      ::java::io::DataInput a0((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "k", ::java::io::DataInput::initializeClass, &a0))
      {
        OBJ_CALL(result = ::java::io::DataInputStream::readUTF(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "readUTF_", arg);
      return NULL;
    }

    static PyObject *t_DataInputStream_readUnsignedByte(t_DataInputStream *self)
    {
      jint result;
      OBJ_CALL(result = self->object.readUnsignedByte());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_DataInputStream_readUnsignedShort(t_DataInputStream *self)
    {
      jint result;
      OBJ_CALL(result = self->object.readUnsignedShort());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_DataInputStream_skipBytes(t_DataInputStream *self, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.skipBytes(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "skipBytes", arg);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoWriter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/SegmentInfoReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40SegmentInfoFormat::class$ = NULL;
          jmethodID *Lucene40SegmentInfoFormat::mids$ = NULL;
          bool Lucene40SegmentInfoFormat::live$ = false;
          ::java::lang::String *Lucene40SegmentInfoFormat::SI_EXTENSION = NULL;

          jclass Lucene40SegmentInfoFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getSegmentInfoReader_1e88b6e7] = env->getMethodID(cls, "getSegmentInfoReader", "()Lorg/apache/lucene/codecs/SegmentInfoReader;");
              mids$[mid_getSegmentInfoWriter_2d4ab533] = env->getMethodID(cls, "getSegmentInfoWriter", "()Lorg/apache/lucene/codecs/SegmentInfoWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              SI_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "SI_EXTENSION", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40SegmentInfoFormat::Lucene40SegmentInfoFormat() : ::org::apache::lucene::codecs::SegmentInfoFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::SegmentInfoReader Lucene40SegmentInfoFormat::getSegmentInfoReader() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoReader(env->callObjectMethod(this$, mids$[mid_getSegmentInfoReader_1e88b6e7]));
          }

          ::org::apache::lucene::codecs::SegmentInfoWriter Lucene40SegmentInfoFormat::getSegmentInfoWriter() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoWriter(env->callObjectMethod(this$, mids$[mid_getSegmentInfoWriter_2d4ab533]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40SegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40SegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40SegmentInfoFormat_init_(t_Lucene40SegmentInfoFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40SegmentInfoFormat_getSegmentInfoReader(t_Lucene40SegmentInfoFormat *self, PyObject *args);
          static PyObject *t_Lucene40SegmentInfoFormat_getSegmentInfoWriter(t_Lucene40SegmentInfoFormat *self, PyObject *args);
          static PyObject *t_Lucene40SegmentInfoFormat_get__segmentInfoReader(t_Lucene40SegmentInfoFormat *self, void *data);
          static PyObject *t_Lucene40SegmentInfoFormat_get__segmentInfoWriter(t_Lucene40SegmentInfoFormat *self, void *data);
          static PyGetSetDef t_Lucene40SegmentInfoFormat__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene40SegmentInfoFormat, segmentInfoReader),
            DECLARE_GET_FIELD(t_Lucene40SegmentInfoFormat, segmentInfoWriter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene40SegmentInfoFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40SegmentInfoFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40SegmentInfoFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40SegmentInfoFormat, getSegmentInfoReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40SegmentInfoFormat, getSegmentInfoWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40SegmentInfoFormat, t_Lucene40SegmentInfoFormat, ::org::apache::lucene::codecs::SegmentInfoFormat, Lucene40SegmentInfoFormat, t_Lucene40SegmentInfoFormat_init_, 0, 0, t_Lucene40SegmentInfoFormat__fields_, 0, 0);

          void t_Lucene40SegmentInfoFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40SegmentInfoFormat), module, "Lucene40SegmentInfoFormat", 0);
          }

          void t_Lucene40SegmentInfoFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoFormat).tp_dict, "class_", make_descriptor(Lucene40SegmentInfoFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40SegmentInfoFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene40SegmentInfoFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoFormat).tp_dict, "SI_EXTENSION", make_descriptor(j2p(*Lucene40SegmentInfoFormat::SI_EXTENSION)));
          }

          static PyObject *t_Lucene40SegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40SegmentInfoFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40SegmentInfoFormat::wrap_Object(Lucene40SegmentInfoFormat(((t_Lucene40SegmentInfoFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40SegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40SegmentInfoFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40SegmentInfoFormat_init_(t_Lucene40SegmentInfoFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40SegmentInfoFormat object((jobject) NULL);

            INT_CALL(object = Lucene40SegmentInfoFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40SegmentInfoFormat_getSegmentInfoReader(t_Lucene40SegmentInfoFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSegmentInfoReader());
              return ::org::apache::lucene::codecs::t_SegmentInfoReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40SegmentInfoFormat), (PyObject *) self, "getSegmentInfoReader", args, 2);
          }

          static PyObject *t_Lucene40SegmentInfoFormat_getSegmentInfoWriter(t_Lucene40SegmentInfoFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoWriter result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSegmentInfoWriter());
              return ::org::apache::lucene::codecs::t_SegmentInfoWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40SegmentInfoFormat), (PyObject *) self, "getSegmentInfoWriter", args, 2);
          }

          static PyObject *t_Lucene40SegmentInfoFormat_get__segmentInfoReader(t_Lucene40SegmentInfoFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::SegmentInfoReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getSegmentInfoReader());
            return ::org::apache::lucene::codecs::t_SegmentInfoReader::wrap_Object(value);
          }

          static PyObject *t_Lucene40SegmentInfoFormat_get__segmentInfoWriter(t_Lucene40SegmentInfoFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::SegmentInfoWriter value((jobject) NULL);
            OBJ_CALL(value = self->object.getSegmentInfoWriter());
            return ::org::apache::lucene::codecs::t_SegmentInfoWriter::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cn/ChineseFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {

          ::java::lang::Class *ChineseFilter::class$ = NULL;
          jmethodID *ChineseFilter::mids$ = NULL;
          bool ChineseFilter::live$ = false;
          JArray< ::java::lang::String > *ChineseFilter::STOP_WORDS = NULL;

          jclass ChineseFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cn/ChineseFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              STOP_WORDS = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "STOP_WORDS", "[Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ChineseFilter::ChineseFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean ChineseFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {
          static PyObject *t_ChineseFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ChineseFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ChineseFilter_init_(t_ChineseFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ChineseFilter_incrementToken(t_ChineseFilter *self, PyObject *args);

          static PyMethodDef t_ChineseFilter__methods_[] = {
            DECLARE_METHOD(t_ChineseFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ChineseFilter, t_ChineseFilter, ::org::apache::lucene::analysis::TokenFilter, ChineseFilter, t_ChineseFilter_init_, 0, 0, 0, 0, 0);

          void t_ChineseFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ChineseFilter), module, "ChineseFilter", 0);
          }

          void t_ChineseFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ChineseFilter).tp_dict, "class_", make_descriptor(ChineseFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ChineseFilter).tp_dict, "wrapfn_", make_descriptor(t_ChineseFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ChineseFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ChineseFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(ChineseFilter).tp_dict, "STOP_WORDS", make_descriptor(JArray<jstring>(ChineseFilter::STOP_WORDS->this$).wrap()));
          }

          static PyObject *t_ChineseFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ChineseFilter::initializeClass, 1)))
              return NULL;
            return t_ChineseFilter::wrap_Object(ChineseFilter(((t_ChineseFilter *) arg)->object.this$));
          }
          static PyObject *t_ChineseFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ChineseFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ChineseFilter_init_(t_ChineseFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ChineseFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ChineseFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ChineseFilter_incrementToken(t_ChineseFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ChineseFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/TernaryTree$Iterator.h"
#include "java/lang/String.h"
#include "java/util/Enumeration.h"
#include "org/apache/lucene/analysis/compound/hyphenation/TernaryTree.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *TernaryTree$Iterator::class$ = NULL;
            jmethodID *TernaryTree$Iterator::mids$ = NULL;
            bool TernaryTree$Iterator::live$ = false;

            jclass TernaryTree$Iterator::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/TernaryTree$Iterator");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_fe795a01] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/compound/hyphenation/TernaryTree;)V");
                mids$[mid_getValue_54c6a173] = env->getMethodID(cls, "getValue", "()C");
                mids$[mid_hasMoreElements_54c6a16a] = env->getMethodID(cls, "hasMoreElements", "()Z");
                mids$[mid_nextElement_14c7b5c5] = env->getMethodID(cls, "nextElement", "()Ljava/lang/String;");
                mids$[mid_rewind_54c6a166] = env->getMethodID(cls, "rewind", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TernaryTree$Iterator::TernaryTree$Iterator(const ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_fe795a01, a0.this$)) {}

            jchar TernaryTree$Iterator::getValue() const
            {
              return env->callCharMethod(this$, mids$[mid_getValue_54c6a173]);
            }

            jboolean TernaryTree$Iterator::hasMoreElements() const
            {
              return env->callBooleanMethod(this$, mids$[mid_hasMoreElements_54c6a16a]);
            }

            ::java::lang::String TernaryTree$Iterator::nextElement() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_nextElement_14c7b5c5]));
            }

            void TernaryTree$Iterator::rewind() const
            {
              env->callVoidMethod(this$, mids$[mid_rewind_54c6a166]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_TernaryTree$Iterator_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TernaryTree$Iterator_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TernaryTree$Iterator_init_(t_TernaryTree$Iterator *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TernaryTree$Iterator_getValue(t_TernaryTree$Iterator *self);
            static PyObject *t_TernaryTree$Iterator_hasMoreElements(t_TernaryTree$Iterator *self);
            static PyObject *t_TernaryTree$Iterator_nextElement(t_TernaryTree$Iterator *self);
            static PyObject *t_TernaryTree$Iterator_rewind(t_TernaryTree$Iterator *self);
            static PyObject *t_TernaryTree$Iterator_get__value(t_TernaryTree$Iterator *self, void *data);
            static PyGetSetDef t_TernaryTree$Iterator__fields_[] = {
              DECLARE_GET_FIELD(t_TernaryTree$Iterator, value),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TernaryTree$Iterator__methods_[] = {
              DECLARE_METHOD(t_TernaryTree$Iterator, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree$Iterator, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree$Iterator, getValue, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree$Iterator, hasMoreElements, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree$Iterator, nextElement, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree$Iterator, rewind, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TernaryTree$Iterator, t_TernaryTree$Iterator, ::java::lang::Object, TernaryTree$Iterator, t_TernaryTree$Iterator_init_, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Enumeration *)) get_enumeration_next< ::java::util::t_Enumeration,::java::lang::t_String >), t_TernaryTree$Iterator__fields_, 0, 0);

            void t_TernaryTree$Iterator::install(PyObject *module)
            {
              installType(&PY_TYPE(TernaryTree$Iterator), module, "TernaryTree$Iterator", 0);
            }

            void t_TernaryTree$Iterator::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TernaryTree$Iterator).tp_dict, "class_", make_descriptor(TernaryTree$Iterator::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TernaryTree$Iterator).tp_dict, "wrapfn_", make_descriptor(t_TernaryTree$Iterator::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TernaryTree$Iterator).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TernaryTree$Iterator_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TernaryTree$Iterator::initializeClass, 1)))
                return NULL;
              return t_TernaryTree$Iterator::wrap_Object(TernaryTree$Iterator(((t_TernaryTree$Iterator *) arg)->object.this$));
            }
            static PyObject *t_TernaryTree$Iterator_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TernaryTree$Iterator::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TernaryTree$Iterator_init_(t_TernaryTree$Iterator *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree a0((jobject) NULL);
              TernaryTree$Iterator object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree::initializeClass, &a0))
              {
                INT_CALL(object = TernaryTree$Iterator(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TernaryTree$Iterator_getValue(t_TernaryTree$Iterator *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.getValue());
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            static PyObject *t_TernaryTree$Iterator_hasMoreElements(t_TernaryTree$Iterator *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.hasMoreElements());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_TernaryTree$Iterator_nextElement(t_TernaryTree$Iterator *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.nextElement());
              return j2p(result);
            }

            static PyObject *t_TernaryTree$Iterator_rewind(t_TernaryTree$Iterator *self)
            {
              OBJ_CALL(self->object.rewind());
              Py_RETURN_NONE;
            }

            static PyObject *t_TernaryTree$Iterator_get__value(t_TernaryTree$Iterator *self, void *data)
            {
              jchar value;
              OBJ_CALL(value = self->object.getValue());
              return PyUnicode_FromUnicode((Py_UNICODE *) &value, 1);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/BoostingQuery.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *BoostingQuery::class$ = NULL;
        jmethodID *BoostingQuery::mids$ = NULL;
        bool BoostingQuery::live$ = false;

        jclass BoostingQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/BoostingQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7f23a8a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Query;F)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BoostingQuery::BoostingQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Query & a1, jfloat a2) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_7f23a8a3, a0.this$, a1.this$, a2)) {}

        jboolean BoostingQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint BoostingQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query BoostingQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        ::java::lang::String BoostingQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_BoostingQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BoostingQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BoostingQuery_init_(t_BoostingQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BoostingQuery_equals(t_BoostingQuery *self, PyObject *args);
        static PyObject *t_BoostingQuery_hashCode(t_BoostingQuery *self, PyObject *args);
        static PyObject *t_BoostingQuery_rewrite(t_BoostingQuery *self, PyObject *args);
        static PyObject *t_BoostingQuery_toString(t_BoostingQuery *self, PyObject *args);

        static PyMethodDef t_BoostingQuery__methods_[] = {
          DECLARE_METHOD(t_BoostingQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BoostingQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BoostingQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_BoostingQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_BoostingQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_BoostingQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BoostingQuery, t_BoostingQuery, ::org::apache::lucene::search::Query, BoostingQuery, t_BoostingQuery_init_, 0, 0, 0, 0, 0);

        void t_BoostingQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(BoostingQuery), module, "BoostingQuery", 0);
        }

        void t_BoostingQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BoostingQuery).tp_dict, "class_", make_descriptor(BoostingQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BoostingQuery).tp_dict, "wrapfn_", make_descriptor(t_BoostingQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BoostingQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BoostingQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BoostingQuery::initializeClass, 1)))
            return NULL;
          return t_BoostingQuery::wrap_Object(BoostingQuery(((t_BoostingQuery *) arg)->object.this$));
        }
        static PyObject *t_BoostingQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BoostingQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BoostingQuery_init_(t_BoostingQuery *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          ::org::apache::lucene::search::Query a1((jobject) NULL);
          jfloat a2;
          BoostingQuery object((jobject) NULL);

          if (!parseArgs(args, "kkF", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = BoostingQuery(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BoostingQuery_equals(t_BoostingQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(BoostingQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_BoostingQuery_hashCode(t_BoostingQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BoostingQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_BoostingQuery_rewrite(t_BoostingQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BoostingQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_BoostingQuery_toString(t_BoostingQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(BoostingQuery), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/Analyzer$PerFieldReuseStrategy.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *Analyzer$PerFieldReuseStrategy::class$ = NULL;
        jmethodID *Analyzer$PerFieldReuseStrategy::mids$ = NULL;
        bool Analyzer$PerFieldReuseStrategy::live$ = false;

        jclass Analyzer$PerFieldReuseStrategy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/Analyzer$PerFieldReuseStrategy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getReusableComponents_19769f4a] = env->getMethodID(cls, "getReusableComponents", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_setReusableComponents_66577a3f] = env->getMethodID(cls, "setReusableComponents", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Analyzer$PerFieldReuseStrategy::Analyzer$PerFieldReuseStrategy() : ::org::apache::lucene::analysis::Analyzer$ReuseStrategy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents Analyzer$PerFieldReuseStrategy::getReusableComponents(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents(env->callObjectMethod(this$, mids$[mid_getReusableComponents_19769f4a], a0.this$, a1.this$));
        }

        void Analyzer$PerFieldReuseStrategy::setReusableComponents(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_setReusableComponents_66577a3f], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_Analyzer$PerFieldReuseStrategy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Analyzer$PerFieldReuseStrategy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Analyzer$PerFieldReuseStrategy_init_(t_Analyzer$PerFieldReuseStrategy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Analyzer$PerFieldReuseStrategy_getReusableComponents(t_Analyzer$PerFieldReuseStrategy *self, PyObject *args);
        static PyObject *t_Analyzer$PerFieldReuseStrategy_setReusableComponents(t_Analyzer$PerFieldReuseStrategy *self, PyObject *args);

        static PyMethodDef t_Analyzer$PerFieldReuseStrategy__methods_[] = {
          DECLARE_METHOD(t_Analyzer$PerFieldReuseStrategy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$PerFieldReuseStrategy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$PerFieldReuseStrategy, getReusableComponents, METH_VARARGS),
          DECLARE_METHOD(t_Analyzer$PerFieldReuseStrategy, setReusableComponents, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Analyzer$PerFieldReuseStrategy, t_Analyzer$PerFieldReuseStrategy, ::org::apache::lucene::analysis::Analyzer$ReuseStrategy, Analyzer$PerFieldReuseStrategy, t_Analyzer$PerFieldReuseStrategy_init_, 0, 0, 0, 0, 0);

        void t_Analyzer$PerFieldReuseStrategy::install(PyObject *module)
        {
          installType(&PY_TYPE(Analyzer$PerFieldReuseStrategy), module, "Analyzer$PerFieldReuseStrategy", 0);
        }

        void t_Analyzer$PerFieldReuseStrategy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Analyzer$PerFieldReuseStrategy).tp_dict, "class_", make_descriptor(Analyzer$PerFieldReuseStrategy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Analyzer$PerFieldReuseStrategy).tp_dict, "wrapfn_", make_descriptor(t_Analyzer$PerFieldReuseStrategy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Analyzer$PerFieldReuseStrategy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Analyzer$PerFieldReuseStrategy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Analyzer$PerFieldReuseStrategy::initializeClass, 1)))
            return NULL;
          return t_Analyzer$PerFieldReuseStrategy::wrap_Object(Analyzer$PerFieldReuseStrategy(((t_Analyzer$PerFieldReuseStrategy *) arg)->object.this$));
        }
        static PyObject *t_Analyzer$PerFieldReuseStrategy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Analyzer$PerFieldReuseStrategy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Analyzer$PerFieldReuseStrategy_init_(t_Analyzer$PerFieldReuseStrategy *self, PyObject *args, PyObject *kwds)
        {
          Analyzer$PerFieldReuseStrategy object((jobject) NULL);

          INT_CALL(object = Analyzer$PerFieldReuseStrategy());
          self->object = object;

          return 0;
        }

        static PyObject *t_Analyzer$PerFieldReuseStrategy_getReusableComponents(t_Analyzer$PerFieldReuseStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getReusableComponents(a0, a1));
            return ::org::apache::lucene::analysis::t_Analyzer$TokenStreamComponents::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(Analyzer$PerFieldReuseStrategy), (PyObject *) self, "getReusableComponents", args, 2);
        }

        static PyObject *t_Analyzer$PerFieldReuseStrategy_setReusableComponents(t_Analyzer$PerFieldReuseStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents a2((jobject) NULL);

          if (!parseArgs(args, "ksk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.setReusableComponents(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(Analyzer$PerFieldReuseStrategy), (PyObject *) self, "setReusableComponents", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PagedMutable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PagedMutable::class$ = NULL;
          jmethodID *PagedMutable::mids$ = NULL;
          bool PagedMutable::live$ = false;

          jclass PagedMutable::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PagedMutable");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9832dac4] = env->getMethodID(cls, "<init>", "(JIIF)V");
              mids$[mid_baseRamBytesUsed_54c6a17a] = env->getMethodID(cls, "baseRamBytesUsed", "()J");
              mids$[mid_newMutable_48ebd249] = env->getMethodID(cls, "newMutable", "(II)Lorg/apache/lucene/util/packed/PackedInts$Mutable;");
              mids$[mid_newUnfilledCopy_79c554c1] = env->getMethodID(cls, "newUnfilledCopy", "(J)Lorg/apache/lucene/util/packed/PagedMutable;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PagedMutable::PagedMutable(jlong a0, jint a1, jint a2, jfloat a3) : ::org::apache::lucene::util::packed::AbstractPagedMutable(env->newObject(initializeClass, &mids$, mid_init$_9832dac4, a0, a1, a2, a3)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PagedMutable_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PagedMutable_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PagedMutable_of_(t_PagedMutable *self, PyObject *args);
          static int t_PagedMutable_init_(t_PagedMutable *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PagedMutable_get__parameters_(t_PagedMutable *self, void *data);
          static PyGetSetDef t_PagedMutable__fields_[] = {
            DECLARE_GET_FIELD(t_PagedMutable, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PagedMutable__methods_[] = {
            DECLARE_METHOD(t_PagedMutable, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PagedMutable, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PagedMutable, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PagedMutable, t_PagedMutable, ::org::apache::lucene::util::packed::AbstractPagedMutable, PagedMutable, t_PagedMutable_init_, 0, 0, t_PagedMutable__fields_, 0, 0);
          PyObject *t_PagedMutable::wrap_Object(const PagedMutable& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PagedMutable::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PagedMutable *self = (t_PagedMutable *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_PagedMutable::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PagedMutable::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PagedMutable *self = (t_PagedMutable *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_PagedMutable::install(PyObject *module)
          {
            installType(&PY_TYPE(PagedMutable), module, "PagedMutable", 0);
          }

          void t_PagedMutable::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PagedMutable).tp_dict, "class_", make_descriptor(PagedMutable::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PagedMutable).tp_dict, "wrapfn_", make_descriptor(t_PagedMutable::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PagedMutable).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PagedMutable_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PagedMutable::initializeClass, 1)))
              return NULL;
            return t_PagedMutable::wrap_Object(PagedMutable(((t_PagedMutable *) arg)->object.this$));
          }
          static PyObject *t_PagedMutable_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PagedMutable::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PagedMutable_of_(t_PagedMutable *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_PagedMutable_init_(t_PagedMutable *self, PyObject *args, PyObject *kwds)
          {
            jlong a0;
            jint a1;
            jint a2;
            jfloat a3;
            PagedMutable object((jobject) NULL);

            if (!parseArgs(args, "JIIF", &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = PagedMutable(a0, a1, a2, a3));
              self->object = object;
              self->parameters[0] = &::org::apache::lucene::util::packed::PY_TYPE(PagedMutable);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_PagedMutable_get__parameters_(t_PagedMutable *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergePolicy$OneMerge.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "org/apache/lucene/index/MergeState.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/MergePolicy$DocMap.h"
#include "org/apache/lucene/index/MergePolicy$MergeAbortedException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/MergeInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergePolicy$OneMerge::class$ = NULL;
        jmethodID *MergePolicy$OneMerge::mids$ = NULL;
        jfieldID *MergePolicy$OneMerge::fids$ = NULL;
        bool MergePolicy$OneMerge::live$ = false;

        jclass MergePolicy$OneMerge::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergePolicy$OneMerge");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
            mids$[mid_checkAborted_2e261ef2] = env->getMethodID(cls, "checkAborted", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_getDocMap_a6eb90c4] = env->getMethodID(cls, "getDocMap", "(Lorg/apache/lucene/index/MergeState;)Lorg/apache/lucene/index/MergePolicy$DocMap;");
            mids$[mid_getMergeInfo_e24ac350] = env->getMethodID(cls, "getMergeInfo", "()Lorg/apache/lucene/store/MergeInfo;");
            mids$[mid_getMergeReaders_87851566] = env->getMethodID(cls, "getMergeReaders", "()Ljava/util/List;");
            mids$[mid_getPause_54c6a16a] = env->getMethodID(cls, "getPause", "()Z");
            mids$[mid_segString_0451c495] = env->getMethodID(cls, "segString", "(Lorg/apache/lucene/store/Directory;)Ljava/lang/String;");
            mids$[mid_setInfo_6649cdf4] = env->getMethodID(cls, "setInfo", "(Lorg/apache/lucene/index/SegmentCommitInfo;)V");
            mids$[mid_setPause_bb0c767f] = env->getMethodID(cls, "setPause", "(Z)V");
            mids$[mid_totalBytesSize_54c6a17a] = env->getMethodID(cls, "totalBytesSize", "()J");
            mids$[mid_totalNumDocs_54c6a179] = env->getMethodID(cls, "totalNumDocs", "()I");

            fids$ = new jfieldID[max_fid];
            fids$[fid_estimatedMergeBytes] = env->getFieldID(cls, "estimatedMergeBytes", "J");
            fids$[fid_segments] = env->getFieldID(cls, "segments", "Ljava/util/List;");
            fids$[fid_totalDocCount] = env->getFieldID(cls, "totalDocCount", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergePolicy$OneMerge::MergePolicy$OneMerge(const ::java::util::List & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

        void MergePolicy$OneMerge::checkAborted(const ::org::apache::lucene::store::Directory & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_checkAborted_2e261ef2], a0.this$);
        }

        ::org::apache::lucene::index::MergePolicy$DocMap MergePolicy$OneMerge::getDocMap(const ::org::apache::lucene::index::MergeState & a0) const
        {
          return ::org::apache::lucene::index::MergePolicy$DocMap(env->callObjectMethod(this$, mids$[mid_getDocMap_a6eb90c4], a0.this$));
        }

        ::org::apache::lucene::store::MergeInfo MergePolicy$OneMerge::getMergeInfo() const
        {
          return ::org::apache::lucene::store::MergeInfo(env->callObjectMethod(this$, mids$[mid_getMergeInfo_e24ac350]));
        }

        ::java::util::List MergePolicy$OneMerge::getMergeReaders() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getMergeReaders_87851566]));
        }

        jboolean MergePolicy$OneMerge::getPause() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getPause_54c6a16a]);
        }

        ::java::lang::String MergePolicy$OneMerge::segString(const ::org::apache::lucene::store::Directory & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_segString_0451c495], a0.this$));
        }

        void MergePolicy$OneMerge::setInfo(const ::org::apache::lucene::index::SegmentCommitInfo & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setInfo_6649cdf4], a0.this$);
        }

        void MergePolicy$OneMerge::setPause(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setPause_bb0c767f], a0);
        }

        jlong MergePolicy$OneMerge::totalBytesSize() const
        {
          return env->callLongMethod(this$, mids$[mid_totalBytesSize_54c6a17a]);
        }

        jint MergePolicy$OneMerge::totalNumDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_totalNumDocs_54c6a179]);
        }

        jlong MergePolicy$OneMerge::_get_estimatedMergeBytes() const
        {
          return env->getLongField(this$, fids$[fid_estimatedMergeBytes]);
        }

        void MergePolicy$OneMerge::_set_estimatedMergeBytes(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_estimatedMergeBytes], a0);
        }

        ::java::util::List MergePolicy$OneMerge::_get_segments() const
        {
          return ::java::util::List(env->getObjectField(this$, fids$[fid_segments]));
        }

        jint MergePolicy$OneMerge::_get_totalDocCount() const
        {
          return env->getIntField(this$, fids$[fid_totalDocCount]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergePolicy$OneMerge_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy$OneMerge_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergePolicy$OneMerge_init_(t_MergePolicy$OneMerge *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergePolicy$OneMerge_checkAborted(t_MergePolicy$OneMerge *self, PyObject *arg);
        static PyObject *t_MergePolicy$OneMerge_getDocMap(t_MergePolicy$OneMerge *self, PyObject *arg);
        static PyObject *t_MergePolicy$OneMerge_getMergeInfo(t_MergePolicy$OneMerge *self);
        static PyObject *t_MergePolicy$OneMerge_getMergeReaders(t_MergePolicy$OneMerge *self);
        static PyObject *t_MergePolicy$OneMerge_getPause(t_MergePolicy$OneMerge *self);
        static PyObject *t_MergePolicy$OneMerge_segString(t_MergePolicy$OneMerge *self, PyObject *arg);
        static PyObject *t_MergePolicy$OneMerge_setInfo(t_MergePolicy$OneMerge *self, PyObject *arg);
        static PyObject *t_MergePolicy$OneMerge_setPause(t_MergePolicy$OneMerge *self, PyObject *arg);
        static PyObject *t_MergePolicy$OneMerge_totalBytesSize(t_MergePolicy$OneMerge *self);
        static PyObject *t_MergePolicy$OneMerge_totalNumDocs(t_MergePolicy$OneMerge *self);
        static PyObject *t_MergePolicy$OneMerge_get__estimatedMergeBytes(t_MergePolicy$OneMerge *self, void *data);
        static int t_MergePolicy$OneMerge_set__estimatedMergeBytes(t_MergePolicy$OneMerge *self, PyObject *arg, void *data);
        static PyObject *t_MergePolicy$OneMerge_get__segments(t_MergePolicy$OneMerge *self, void *data);
        static PyObject *t_MergePolicy$OneMerge_get__totalDocCount(t_MergePolicy$OneMerge *self, void *data);

        static int t_MergePolicy$OneMerge_set__info(t_MergePolicy$OneMerge *self, PyObject *arg, void *data);
        static PyObject *t_MergePolicy$OneMerge_get__mergeInfo(t_MergePolicy$OneMerge *self, void *data);
        static PyObject *t_MergePolicy$OneMerge_get__mergeReaders(t_MergePolicy$OneMerge *self, void *data);
        static PyObject *t_MergePolicy$OneMerge_get__pause(t_MergePolicy$OneMerge *self, void *data);
        static int t_MergePolicy$OneMerge_set__pause(t_MergePolicy$OneMerge *self, PyObject *arg, void *data);
        static PyGetSetDef t_MergePolicy$OneMerge__fields_[] = {
          DECLARE_GETSET_FIELD(t_MergePolicy$OneMerge, estimatedMergeBytes),
          DECLARE_GET_FIELD(t_MergePolicy$OneMerge, segments),
          DECLARE_GET_FIELD(t_MergePolicy$OneMerge, totalDocCount),
          DECLARE_SET_FIELD(t_MergePolicy$OneMerge, info),
          DECLARE_GET_FIELD(t_MergePolicy$OneMerge, mergeInfo),
          DECLARE_GET_FIELD(t_MergePolicy$OneMerge, mergeReaders),
          DECLARE_GETSET_FIELD(t_MergePolicy$OneMerge, pause),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergePolicy$OneMerge__methods_[] = {
          DECLARE_METHOD(t_MergePolicy$OneMerge, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, checkAborted, METH_O),
          DECLARE_METHOD(t_MergePolicy$OneMerge, getDocMap, METH_O),
          DECLARE_METHOD(t_MergePolicy$OneMerge, getMergeInfo, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, getMergeReaders, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, getPause, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, segString, METH_O),
          DECLARE_METHOD(t_MergePolicy$OneMerge, setInfo, METH_O),
          DECLARE_METHOD(t_MergePolicy$OneMerge, setPause, METH_O),
          DECLARE_METHOD(t_MergePolicy$OneMerge, totalBytesSize, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, totalNumDocs, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergePolicy$OneMerge, t_MergePolicy$OneMerge, ::java::lang::Object, MergePolicy$OneMerge, t_MergePolicy$OneMerge_init_, 0, 0, t_MergePolicy$OneMerge__fields_, 0, 0);

        void t_MergePolicy$OneMerge::install(PyObject *module)
        {
          installType(&PY_TYPE(MergePolicy$OneMerge), module, "MergePolicy$OneMerge", 0);
        }

        void t_MergePolicy$OneMerge::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergePolicy$OneMerge).tp_dict, "class_", make_descriptor(MergePolicy$OneMerge::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergePolicy$OneMerge).tp_dict, "wrapfn_", make_descriptor(t_MergePolicy$OneMerge::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergePolicy$OneMerge).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergePolicy$OneMerge_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergePolicy$OneMerge::initializeClass, 1)))
            return NULL;
          return t_MergePolicy$OneMerge::wrap_Object(MergePolicy$OneMerge(((t_MergePolicy$OneMerge *) arg)->object.this$));
        }
        static PyObject *t_MergePolicy$OneMerge_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergePolicy$OneMerge::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergePolicy$OneMerge_init_(t_MergePolicy$OneMerge *self, PyObject *args, PyObject *kwds)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          MergePolicy$OneMerge object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            INT_CALL(object = MergePolicy$OneMerge(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MergePolicy$OneMerge_checkAborted(t_MergePolicy$OneMerge *self, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(self->object.checkAborted(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "checkAborted", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$OneMerge_getDocMap(t_MergePolicy$OneMerge *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$DocMap result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getDocMap(a0));
            return ::org::apache::lucene::index::t_MergePolicy$DocMap::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocMap", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$OneMerge_getMergeInfo(t_MergePolicy$OneMerge *self)
        {
          ::org::apache::lucene::store::MergeInfo result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergeInfo());
          return ::org::apache::lucene::store::t_MergeInfo::wrap_Object(result);
        }

        static PyObject *t_MergePolicy$OneMerge_getMergeReaders(t_MergePolicy$OneMerge *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergeReaders());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(AtomicReader));
        }

        static PyObject *t_MergePolicy$OneMerge_getPause(t_MergePolicy$OneMerge *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getPause());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_MergePolicy$OneMerge_segString(t_MergePolicy$OneMerge *self, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.segString(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "segString", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$OneMerge_setInfo(t_MergePolicy$OneMerge *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setInfo(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setInfo", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$OneMerge_setPause(t_MergePolicy$OneMerge *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setPause(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setPause", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$OneMerge_totalBytesSize(t_MergePolicy$OneMerge *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.totalBytesSize());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_MergePolicy$OneMerge_totalNumDocs(t_MergePolicy$OneMerge *self)
        {
          jint result;
          OBJ_CALL(result = self->object.totalNumDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MergePolicy$OneMerge_get__estimatedMergeBytes(t_MergePolicy$OneMerge *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_estimatedMergeBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_MergePolicy$OneMerge_set__estimatedMergeBytes(t_MergePolicy$OneMerge *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_estimatedMergeBytes(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "estimatedMergeBytes", arg);
          return -1;
        }

        static PyObject *t_MergePolicy$OneMerge_get__segments(t_MergePolicy$OneMerge *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segments());
          return ::java::util::t_List::wrap_Object(value);
        }

        static PyObject *t_MergePolicy$OneMerge_get__totalDocCount(t_MergePolicy$OneMerge *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_totalDocCount());
          return PyInt_FromLong((long) value);
        }

        static int t_MergePolicy$OneMerge_set__info(t_MergePolicy$OneMerge *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::SegmentCommitInfo value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, &value))
            {
              INT_CALL(self->object.setInfo(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "info", arg);
          return -1;
        }

        static PyObject *t_MergePolicy$OneMerge_get__mergeInfo(t_MergePolicy$OneMerge *self, void *data)
        {
          ::org::apache::lucene::store::MergeInfo value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergeInfo());
          return ::org::apache::lucene::store::t_MergeInfo::wrap_Object(value);
        }

        static PyObject *t_MergePolicy$OneMerge_get__mergeReaders(t_MergePolicy$OneMerge *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergeReaders());
          return ::java::util::t_List::wrap_Object(value);
        }

        static PyObject *t_MergePolicy$OneMerge_get__pause(t_MergePolicy$OneMerge *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getPause());
          Py_RETURN_BOOL(value);
        }
        static int t_MergePolicy$OneMerge_set__pause(t_MergePolicy$OneMerge *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setPause(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "pause", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$shift_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$shift_return::class$ = NULL;
          jmethodID *JavascriptParser$shift_return::mids$ = NULL;
          bool JavascriptParser$shift_return::live$ = false;

          jclass JavascriptParser$shift_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$shift_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$shift_return::JavascriptParser$shift_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$shift_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$shift_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$shift_return_init_(t_JavascriptParser$shift_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$shift_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$shift_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$shift_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$shift_return, t_JavascriptParser$shift_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$shift_return, t_JavascriptParser$shift_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$shift_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$shift_return), module, "JavascriptParser$shift_return", 0);
          }

          void t_JavascriptParser$shift_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$shift_return).tp_dict, "class_", make_descriptor(JavascriptParser$shift_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$shift_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$shift_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$shift_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$shift_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$shift_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$shift_return::wrap_Object(JavascriptParser$shift_return(((t_JavascriptParser$shift_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$shift_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$shift_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$shift_return_init_(t_JavascriptParser$shift_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$shift_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$shift_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/io/InputStream.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *ResourceLoader::class$ = NULL;
          jmethodID *ResourceLoader::mids$ = NULL;
          bool ResourceLoader::live$ = false;

          jclass ResourceLoader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/ResourceLoader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_findClass_4aee1c89] = env->getMethodID(cls, "findClass", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Class;");
              mids$[mid_newInstance_61899367] = env->getMethodID(cls, "newInstance", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;");
              mids$[mid_openResource_222e59eb] = env->getMethodID(cls, "openResource", "(Ljava/lang/String;)Ljava/io/InputStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Class ResourceLoader::findClass(const ::java::lang::String & a0, const ::java::lang::Class & a1) const
          {
            return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_findClass_4aee1c89], a0.this$, a1.this$));
          }

          ::java::lang::Object ResourceLoader::newInstance(const ::java::lang::String & a0, const ::java::lang::Class & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_newInstance_61899367], a0.this$, a1.this$));
          }

          ::java::io::InputStream ResourceLoader::openResource(const ::java::lang::String & a0) const
          {
            return ::java::io::InputStream(env->callObjectMethod(this$, mids$[mid_openResource_222e59eb], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_ResourceLoader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ResourceLoader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ResourceLoader_findClass(t_ResourceLoader *self, PyObject *args);
          static PyObject *t_ResourceLoader_newInstance(t_ResourceLoader *self, PyObject *args);
          static PyObject *t_ResourceLoader_openResource(t_ResourceLoader *self, PyObject *arg);

          static PyMethodDef t_ResourceLoader__methods_[] = {
            DECLARE_METHOD(t_ResourceLoader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ResourceLoader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ResourceLoader, findClass, METH_VARARGS),
            DECLARE_METHOD(t_ResourceLoader, newInstance, METH_VARARGS),
            DECLARE_METHOD(t_ResourceLoader, openResource, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ResourceLoader, t_ResourceLoader, ::java::lang::Object, ResourceLoader, abstract_init, 0, 0, 0, 0, 0);

          void t_ResourceLoader::install(PyObject *module)
          {
            installType(&PY_TYPE(ResourceLoader), module, "ResourceLoader", 0);
          }

          void t_ResourceLoader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ResourceLoader).tp_dict, "class_", make_descriptor(ResourceLoader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ResourceLoader).tp_dict, "wrapfn_", make_descriptor(t_ResourceLoader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ResourceLoader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ResourceLoader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ResourceLoader::initializeClass, 1)))
              return NULL;
            return t_ResourceLoader::wrap_Object(ResourceLoader(((t_ResourceLoader *) arg)->object.this$));
          }
          static PyObject *t_ResourceLoader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ResourceLoader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ResourceLoader_findClass(t_ResourceLoader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Class result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = self->object.findClass(a0, a1));
              return ::java::lang::t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "findClass", args);
            return NULL;
          }

          static PyObject *t_ResourceLoader_newInstance(t_ResourceLoader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = self->object.newInstance(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "newInstance", args);
            return NULL;
          }

          static PyObject *t_ResourceLoader_openResource(t_ResourceLoader *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::io::InputStream result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.openResource(a0));
              return ::java::io::t_InputStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "openResource", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/NameHashIntCacheLRU.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *NameHashIntCacheLRU::class$ = NULL;
            jmethodID *NameHashIntCacheLRU::mids$ = NULL;
            bool NameHashIntCacheLRU::live$ = false;

            jclass NameHashIntCacheLRU::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/NameHashIntCacheLRU");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_NameHashIntCacheLRU_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NameHashIntCacheLRU_instance_(PyTypeObject *type, PyObject *arg);

            static PyMethodDef t_NameHashIntCacheLRU__methods_[] = {
              DECLARE_METHOD(t_NameHashIntCacheLRU, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NameHashIntCacheLRU, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NameHashIntCacheLRU, t_NameHashIntCacheLRU, ::org::apache::lucene::facet::taxonomy::writercache::NameIntCacheLRU, NameHashIntCacheLRU, abstract_init, 0, 0, 0, 0, 0);

            void t_NameHashIntCacheLRU::install(PyObject *module)
            {
              installType(&PY_TYPE(NameHashIntCacheLRU), module, "NameHashIntCacheLRU", 0);
            }

            void t_NameHashIntCacheLRU::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NameHashIntCacheLRU).tp_dict, "class_", make_descriptor(NameHashIntCacheLRU::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NameHashIntCacheLRU).tp_dict, "wrapfn_", make_descriptor(t_NameHashIntCacheLRU::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NameHashIntCacheLRU).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NameHashIntCacheLRU_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NameHashIntCacheLRU::initializeClass, 1)))
                return NULL;
              return t_NameHashIntCacheLRU::wrap_Object(NameHashIntCacheLRU(((t_NameHashIntCacheLRU *) arg)->object.this$));
            }
            static PyObject *t_NameHashIntCacheLRU_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NameHashIntCacheLRU::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/MappingMultiDocsEnum.h"
#include "org/apache/lucene/index/MergeState.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/MultiDocsEnum$EnumWithSlice.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *MappingMultiDocsEnum::class$ = NULL;
        jmethodID *MappingMultiDocsEnum::mids$ = NULL;
        bool MappingMultiDocsEnum::live$ = false;

        jclass MappingMultiDocsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/MappingMultiDocsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
            mids$[mid_getNumSubs_54c6a179] = env->getMethodID(cls, "getNumSubs", "()I");
            mids$[mid_getSubs_1bdfab69] = env->getMethodID(cls, "getSubs", "()[Lorg/apache/lucene/index/MultiDocsEnum$EnumWithSlice;");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_setMergeState_fd0cfdf4] = env->getMethodID(cls, "setMergeState", "(Lorg/apache/lucene/index/MergeState;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MappingMultiDocsEnum::MappingMultiDocsEnum() : ::org::apache::lucene::index::DocsEnum(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jint MappingMultiDocsEnum::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        jlong MappingMultiDocsEnum::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint MappingMultiDocsEnum::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint MappingMultiDocsEnum::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
        }

        jint MappingMultiDocsEnum::getNumSubs() const
        {
          return env->callIntMethod(this$, mids$[mid_getNumSubs_54c6a179]);
        }

        JArray< ::org::apache::lucene::index::MultiDocsEnum$EnumWithSlice > MappingMultiDocsEnum::getSubs() const
        {
          return JArray< ::org::apache::lucene::index::MultiDocsEnum$EnumWithSlice >(env->callObjectMethod(this$, mids$[mid_getSubs_1bdfab69]));
        }

        jint MappingMultiDocsEnum::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }

        void MappingMultiDocsEnum::setMergeState(const ::org::apache::lucene::index::MergeState & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMergeState_fd0cfdf4], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_MappingMultiDocsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MappingMultiDocsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MappingMultiDocsEnum_init_(t_MappingMultiDocsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MappingMultiDocsEnum_advance(t_MappingMultiDocsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsEnum_cost(t_MappingMultiDocsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsEnum_docID(t_MappingMultiDocsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsEnum_freq(t_MappingMultiDocsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsEnum_getNumSubs(t_MappingMultiDocsEnum *self);
        static PyObject *t_MappingMultiDocsEnum_getSubs(t_MappingMultiDocsEnum *self);
        static PyObject *t_MappingMultiDocsEnum_nextDoc(t_MappingMultiDocsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsEnum_setMergeState(t_MappingMultiDocsEnum *self, PyObject *arg);
        static int t_MappingMultiDocsEnum_set__mergeState(t_MappingMultiDocsEnum *self, PyObject *arg, void *data);
        static PyObject *t_MappingMultiDocsEnum_get__numSubs(t_MappingMultiDocsEnum *self, void *data);
        static PyObject *t_MappingMultiDocsEnum_get__subs(t_MappingMultiDocsEnum *self, void *data);
        static PyGetSetDef t_MappingMultiDocsEnum__fields_[] = {
          DECLARE_SET_FIELD(t_MappingMultiDocsEnum, mergeState),
          DECLARE_GET_FIELD(t_MappingMultiDocsEnum, numSubs),
          DECLARE_GET_FIELD(t_MappingMultiDocsEnum, subs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MappingMultiDocsEnum__methods_[] = {
          DECLARE_METHOD(t_MappingMultiDocsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, advance, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, cost, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, docID, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, freq, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, getNumSubs, METH_NOARGS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, getSubs, METH_NOARGS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, setMergeState, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MappingMultiDocsEnum, t_MappingMultiDocsEnum, ::org::apache::lucene::index::DocsEnum, MappingMultiDocsEnum, t_MappingMultiDocsEnum_init_, 0, 0, t_MappingMultiDocsEnum__fields_, 0, 0);

        void t_MappingMultiDocsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(MappingMultiDocsEnum), module, "MappingMultiDocsEnum", 0);
        }

        void t_MappingMultiDocsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MappingMultiDocsEnum).tp_dict, "class_", make_descriptor(MappingMultiDocsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MappingMultiDocsEnum).tp_dict, "wrapfn_", make_descriptor(t_MappingMultiDocsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MappingMultiDocsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MappingMultiDocsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MappingMultiDocsEnum::initializeClass, 1)))
            return NULL;
          return t_MappingMultiDocsEnum::wrap_Object(MappingMultiDocsEnum(((t_MappingMultiDocsEnum *) arg)->object.this$));
        }
        static PyObject *t_MappingMultiDocsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MappingMultiDocsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MappingMultiDocsEnum_init_(t_MappingMultiDocsEnum *self, PyObject *args, PyObject *kwds)
        {
          MappingMultiDocsEnum object((jobject) NULL);

          INT_CALL(object = MappingMultiDocsEnum());
          self->object = object;

          return 0;
        }

        static PyObject *t_MappingMultiDocsEnum_advance(t_MappingMultiDocsEnum *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsEnum), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_MappingMultiDocsEnum_cost(t_MappingMultiDocsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsEnum), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_MappingMultiDocsEnum_docID(t_MappingMultiDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsEnum), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_MappingMultiDocsEnum_freq(t_MappingMultiDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.freq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsEnum), (PyObject *) self, "freq", args, 2);
        }

        static PyObject *t_MappingMultiDocsEnum_getNumSubs(t_MappingMultiDocsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getNumSubs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MappingMultiDocsEnum_getSubs(t_MappingMultiDocsEnum *self)
        {
          JArray< ::org::apache::lucene::index::MultiDocsEnum$EnumWithSlice > result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubs());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_MultiDocsEnum$EnumWithSlice::wrap_jobject);
        }

        static PyObject *t_MappingMultiDocsEnum_nextDoc(t_MappingMultiDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsEnum), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_MappingMultiDocsEnum_setMergeState(t_MappingMultiDocsEnum *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setMergeState(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMergeState", arg);
          return NULL;
        }

        static int t_MappingMultiDocsEnum_set__mergeState(t_MappingMultiDocsEnum *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::MergeState value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeState::initializeClass, &value))
            {
              INT_CALL(self->object.setMergeState(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergeState", arg);
          return -1;
        }

        static PyObject *t_MappingMultiDocsEnum_get__numSubs(t_MappingMultiDocsEnum *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getNumSubs());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_MappingMultiDocsEnum_get__subs(t_MappingMultiDocsEnum *self, void *data)
        {
          JArray< ::org::apache::lucene::index::MultiDocsEnum$EnumWithSlice > value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubs());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_MultiDocsEnum$EnumWithSlice::wrap_jobject);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/CompoundFileDirectory.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *CompoundFileDirectory::class$ = NULL;
        jmethodID *CompoundFileDirectory::mids$ = NULL;
        bool CompoundFileDirectory::live$ = false;

        jclass CompoundFileDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/CompoundFileDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f1dc2b71] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;Z)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileExists_5fdc3f44] = env->getMethodID(cls, "fileExists", "(Ljava/lang/String;)Z");
            mids$[mid_fileLength_5fdc3f54] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_getDirectory_1f3934bb] = env->getMethodID(cls, "getDirectory", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
            mids$[mid_listAll_2e6d5245] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_renameFile_4a264742] = env->getMethodID(cls, "renameFile", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_sync_9bfb370d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CompoundFileDirectory::CompoundFileDirectory(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2, jboolean a3) : ::org::apache::lucene::store::BaseDirectory(env->newObject(initializeClass, &mids$, mid_init$_f1dc2b71, a0.this$, a1.this$, a2.this$, a3)) {}

        void CompoundFileDirectory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::store::IndexOutput CompoundFileDirectory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        void CompoundFileDirectory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_5fdc3f48], a0.this$);
        }

        jboolean CompoundFileDirectory::fileExists(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fileExists_5fdc3f44], a0.this$);
        }

        jlong CompoundFileDirectory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_5fdc3f54], a0.this$);
        }

        ::org::apache::lucene::store::Directory CompoundFileDirectory::getDirectory() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getDirectory_1f3934bb]));
        }

        ::java::lang::String CompoundFileDirectory::getName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
        }

        JArray< ::java::lang::String > CompoundFileDirectory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_2e6d5245]));
        }

        ::org::apache::lucene::store::Lock CompoundFileDirectory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }

        ::org::apache::lucene::store::IndexInput CompoundFileDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }

        void CompoundFileDirectory::renameFile(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_renameFile_4a264742], a0.this$, a1.this$);
        }

        void CompoundFileDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_9bfb370d], a0.this$);
        }

        ::java::lang::String CompoundFileDirectory::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/store/CompoundFileDirectory$FileEntry.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_CompoundFileDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompoundFileDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CompoundFileDirectory_init_(t_CompoundFileDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CompoundFileDirectory_close(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_createOutput(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_deleteFile(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_fileExists(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_fileLength(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_getDirectory(t_CompoundFileDirectory *self);
        static PyObject *t_CompoundFileDirectory_getName(t_CompoundFileDirectory *self);
        static PyObject *t_CompoundFileDirectory_listAll(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_makeLock(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_openInput(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_renameFile(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_sync(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_toString(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_get__directory(t_CompoundFileDirectory *self, void *data);
        static PyObject *t_CompoundFileDirectory_get__name(t_CompoundFileDirectory *self, void *data);
        static PyGetSetDef t_CompoundFileDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_CompoundFileDirectory, directory),
          DECLARE_GET_FIELD(t_CompoundFileDirectory, name),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CompoundFileDirectory__methods_[] = {
          DECLARE_METHOD(t_CompoundFileDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompoundFileDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompoundFileDirectory, close, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, fileExists, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, fileLength, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, getDirectory, METH_NOARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, getName, METH_NOARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, listAll, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, makeLock, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, renameFile, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, sync, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CompoundFileDirectory, t_CompoundFileDirectory, ::org::apache::lucene::store::BaseDirectory, CompoundFileDirectory, t_CompoundFileDirectory_init_, 0, 0, t_CompoundFileDirectory__fields_, 0, 0);

        void t_CompoundFileDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(CompoundFileDirectory), module, "CompoundFileDirectory", 0);
          PyDict_SetItemString(PY_TYPE(CompoundFileDirectory).tp_dict, "FileEntry", make_descriptor(&PY_TYPE(CompoundFileDirectory$FileEntry)));
        }

        void t_CompoundFileDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CompoundFileDirectory).tp_dict, "class_", make_descriptor(CompoundFileDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CompoundFileDirectory).tp_dict, "wrapfn_", make_descriptor(t_CompoundFileDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CompoundFileDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CompoundFileDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CompoundFileDirectory::initializeClass, 1)))
            return NULL;
          return t_CompoundFileDirectory::wrap_Object(CompoundFileDirectory(((t_CompoundFileDirectory *) arg)->object.this$));
        }
        static PyObject *t_CompoundFileDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CompoundFileDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CompoundFileDirectory_init_(t_CompoundFileDirectory *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          jboolean a3;
          CompoundFileDirectory object((jobject) NULL);

          if (!parseArgs(args, "kskZ", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = CompoundFileDirectory(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CompoundFileDirectory_close(t_CompoundFileDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_createOutput(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_deleteFile(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_fileExists(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileExists(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "fileExists", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_fileLength(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "fileLength", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_getDirectory(t_CompoundFileDirectory *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_CompoundFileDirectory_getName(t_CompoundFileDirectory *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getName());
          return j2p(result);
        }

        static PyObject *t_CompoundFileDirectory_listAll(t_CompoundFileDirectory *self, PyObject *args)
        {
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.listAll());
            return JArray<jstring>(result.this$).wrap();
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "listAll", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_makeLock(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "makeLock", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_openInput(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "openInput", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_renameFile(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.renameFile(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "renameFile", args);
          return NULL;
        }

        static PyObject *t_CompoundFileDirectory_sync(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "sync", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_toString(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_get__directory(t_CompoundFileDirectory *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_CompoundFileDirectory_get__name(t_CompoundFileDirectory *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getName());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$Floats.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$Floats::class$ = NULL;
        jmethodID *FieldCache$Floats::mids$ = NULL;
        bool FieldCache$Floats::live$ = false;
        FieldCache$Floats *FieldCache$Floats::EMPTY = NULL;

        jclass FieldCache$Floats::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$Floats");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_get_39c7bd2c] = env->getMethodID(cls, "get", "(I)F");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new FieldCache$Floats(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/FieldCache$Floats;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCache$Floats::FieldCache$Floats() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jfloat FieldCache$Floats::get(jint a0) const
        {
          return env->callFloatMethod(this$, mids$[mid_get_39c7bd2c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$Floats_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$Floats_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCache$Floats_init_(t_FieldCache$Floats *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCache$Floats_get(t_FieldCache$Floats *self, PyObject *arg);

        static PyMethodDef t_FieldCache$Floats__methods_[] = {
          DECLARE_METHOD(t_FieldCache$Floats, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Floats, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Floats, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$Floats, t_FieldCache$Floats, ::java::lang::Object, FieldCache$Floats, t_FieldCache$Floats_init_, 0, 0, 0, 0, 0);

        void t_FieldCache$Floats::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$Floats), module, "FieldCache$Floats", 0);
        }

        void t_FieldCache$Floats::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$Floats).tp_dict, "class_", make_descriptor(FieldCache$Floats::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$Floats).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$Floats::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$Floats).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldCache$Floats::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldCache$Floats).tp_dict, "EMPTY", make_descriptor(t_FieldCache$Floats::wrap_Object(*FieldCache$Floats::EMPTY)));
        }

        static PyObject *t_FieldCache$Floats_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$Floats::initializeClass, 1)))
            return NULL;
          return t_FieldCache$Floats::wrap_Object(FieldCache$Floats(((t_FieldCache$Floats *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$Floats_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$Floats::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCache$Floats_init_(t_FieldCache$Floats *self, PyObject *args, PyObject *kwds)
        {
          FieldCache$Floats object((jobject) NULL);

          INT_CALL(object = FieldCache$Floats());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCache$Floats_get(t_FieldCache$Floats *self, PyObject *arg)
        {
          jint a0;
          jfloat result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonCollector.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonCollector::class$ = NULL;
        jmethodID *PythonCollector::mids$ = NULL;
        bool PythonCollector::live$ = false;

        jclass PythonCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_collect_abdf2c51] = env->getMethodID(cls, "collect", "(IF)V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonCollector::PythonCollector() : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonCollector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
        }

        void PythonCollector::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonCollector::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonCollector::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }

        void PythonCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonCollector_init_(t_PythonCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonCollector_collect(t_PythonCollector *self, PyObject *args);
        static PyObject *t_PythonCollector_finalize(t_PythonCollector *self);
        static PyObject *t_PythonCollector_pythonExtension(t_PythonCollector *self, PyObject *args);
        static PyObject *t_PythonCollector_setScorer(t_PythonCollector *self, PyObject *args);
        static jboolean JNICALL t_PythonCollector_acceptsDocsOutOfOrder0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonCollector_collect1(JNIEnv *jenv, jobject jobj, jint a0, jfloat a1);
        static void JNICALL t_PythonCollector_pythonDecRef2(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonCollector_setNextReader3(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonCollector_get__self(t_PythonCollector *self, void *data);
        static int t_PythonCollector_set__scorer(t_PythonCollector *self, PyObject *arg, void *data);
        static PyGetSetDef t_PythonCollector__fields_[] = {
          DECLARE_SET_FIELD(t_PythonCollector, scorer),
          DECLARE_GET_FIELD(t_PythonCollector, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonCollector__methods_[] = {
          DECLARE_METHOD(t_PythonCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonCollector, collect, METH_VARARGS),
          DECLARE_METHOD(t_PythonCollector, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonCollector, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonCollector, setScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonCollector, t_PythonCollector, ::org::apache::lucene::search::Collector, PythonCollector, t_PythonCollector_init_, 0, 0, t_PythonCollector__fields_, 0, 0);

        void t_PythonCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonCollector), module, "PythonCollector", 1);
        }

        void t_PythonCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonCollector).tp_dict, "class_", make_descriptor(PythonCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonCollector).tp_dict, "wrapfn_", make_descriptor(t_PythonCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonCollector::initializeClass);
          JNINativeMethod methods[] = {
            { "acceptsDocsOutOfOrder", "()Z", (void *) t_PythonCollector_acceptsDocsOutOfOrder0 },
            { "collect", "(IF)V", (void *) t_PythonCollector_collect1 },
            { "pythonDecRef", "()V", (void *) t_PythonCollector_pythonDecRef2 },
            { "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V", (void *) t_PythonCollector_setNextReader3 },
          };
          env->registerNatives(cls, methods, 4);
        }

        static PyObject *t_PythonCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonCollector::initializeClass, 1)))
            return NULL;
          return t_PythonCollector::wrap_Object(PythonCollector(((t_PythonCollector *) arg)->object.this$));
        }
        static PyObject *t_PythonCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonCollector_init_(t_PythonCollector *self, PyObject *args, PyObject *kwds)
        {
          PythonCollector object((jobject) NULL);

          INT_CALL(object = PythonCollector());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonCollector_collect(t_PythonCollector *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonCollector), (PyObject *) self, "collect", args, 2);
        }

        static PyObject *t_PythonCollector_finalize(t_PythonCollector *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonCollector_pythonExtension(t_PythonCollector *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonCollector_setScorer(t_PythonCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonCollector), (PyObject *) self, "setScorer", args, 2);
        }

        static jboolean JNICALL t_PythonCollector_acceptsDocsOutOfOrder0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonCollector::mids$[PythonCollector::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "acceptsDocsOutOfOrder", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("acceptsDocsOutOfOrder", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonCollector_collect1(JNIEnv *jenv, jobject jobj, jint a0, jfloat a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonCollector::mids$[PythonCollector::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "collect", "if", (int) a0, (float) a1);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonCollector_pythonDecRef2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonCollector::mids$[PythonCollector::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonCollector::mids$[PythonCollector::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static void JNICALL t_PythonCollector_setNextReader3(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonCollector::mids$[PythonCollector::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = ::org::apache::lucene::index::t_AtomicReaderContext::wrap_Object(::org::apache::lucene::index::AtomicReaderContext(a0));
          PyObject *result = PyObject_CallMethod(obj, "setNextReader", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static PyObject *t_PythonCollector_get__self(t_PythonCollector *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }

        static int t_PythonCollector_set__scorer(t_PythonCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/EdgeNGramTokenizer.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *EdgeNGramTokenizer::class$ = NULL;
          jmethodID *EdgeNGramTokenizer::mids$ = NULL;
          bool EdgeNGramTokenizer::live$ = false;
          jint EdgeNGramTokenizer::DEFAULT_MAX_GRAM_SIZE = (jint) 0;
          jint EdgeNGramTokenizer::DEFAULT_MIN_GRAM_SIZE = (jint) 0;

          jclass EdgeNGramTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/EdgeNGramTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_92513554] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;II)V");
              mids$[mid_init$_fb18a8f8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;II)V");
              mids$[mid_init$_47cfcf59] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;II)V");
              mids$[mid_init$_0c87564f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;II)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_GRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_GRAM_SIZE");
              DEFAULT_MIN_GRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_GRAM_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EdgeNGramTokenizer::EdgeNGramTokenizer(const ::java::io::Reader & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::ngram::NGramTokenizer(env->newObject(initializeClass, &mids$, mid_init$_92513554, a0.this$, a1, a2)) {}

          EdgeNGramTokenizer::EdgeNGramTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::ngram::NGramTokenizer(env->newObject(initializeClass, &mids$, mid_init$_fb18a8f8, a0.this$, a1.this$, a2, a3)) {}

          EdgeNGramTokenizer::EdgeNGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::ngram::NGramTokenizer(env->newObject(initializeClass, &mids$, mid_init$_47cfcf59, a0.this$, a1.this$, a2, a3)) {}

          EdgeNGramTokenizer::EdgeNGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2, jint a3, jint a4) : ::org::apache::lucene::analysis::ngram::NGramTokenizer(env->newObject(initializeClass, &mids$, mid_init$_0c87564f, a0.this$, a1.this$, a2.this$, a3, a4)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_EdgeNGramTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EdgeNGramTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EdgeNGramTokenizer_init_(t_EdgeNGramTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_EdgeNGramTokenizer__methods_[] = {
            DECLARE_METHOD(t_EdgeNGramTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EdgeNGramTokenizer, t_EdgeNGramTokenizer, ::org::apache::lucene::analysis::ngram::NGramTokenizer, EdgeNGramTokenizer, t_EdgeNGramTokenizer_init_, 0, 0, 0, 0, 0);

          void t_EdgeNGramTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(EdgeNGramTokenizer), module, "EdgeNGramTokenizer", 0);
          }

          void t_EdgeNGramTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenizer).tp_dict, "class_", make_descriptor(EdgeNGramTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenizer).tp_dict, "wrapfn_", make_descriptor(t_EdgeNGramTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(EdgeNGramTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenizer).tp_dict, "DEFAULT_MAX_GRAM_SIZE", make_descriptor(EdgeNGramTokenizer::DEFAULT_MAX_GRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenizer).tp_dict, "DEFAULT_MIN_GRAM_SIZE", make_descriptor(EdgeNGramTokenizer::DEFAULT_MIN_GRAM_SIZE));
          }

          static PyObject *t_EdgeNGramTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EdgeNGramTokenizer::initializeClass, 1)))
              return NULL;
            return t_EdgeNGramTokenizer::wrap_Object(EdgeNGramTokenizer(((t_EdgeNGramTokenizer *) arg)->object.this$));
          }
          static PyObject *t_EdgeNGramTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EdgeNGramTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EdgeNGramTokenizer_init_(t_EdgeNGramTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                jint a2;
                EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kII", ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = EdgeNGramTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                jint a3;
                EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkII", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = EdgeNGramTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                jint a3;
                EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkII", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = EdgeNGramTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                jint a3;
                jint a4;
                EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkkII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = EdgeNGramTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/BooleanQueryNodeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *BooleanQueryNodeBuilder::class$ = NULL;
              jmethodID *BooleanQueryNodeBuilder::mids$ = NULL;
              bool BooleanQueryNodeBuilder::live$ = false;

              jclass BooleanQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/BooleanQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_e1a6cc4e] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/BooleanQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BooleanQueryNodeBuilder::BooleanQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::BooleanQuery BooleanQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::BooleanQuery(env->callObjectMethod(this$, mids$[mid_build_e1a6cc4e], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_BooleanQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BooleanQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BooleanQueryNodeBuilder_init_(t_BooleanQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_BooleanQueryNodeBuilder_build(t_BooleanQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_BooleanQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_BooleanQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BooleanQueryNodeBuilder, t_BooleanQueryNodeBuilder, ::java::lang::Object, BooleanQueryNodeBuilder, t_BooleanQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_BooleanQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(BooleanQueryNodeBuilder), module, "BooleanQueryNodeBuilder", 0);
              }

              void t_BooleanQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BooleanQueryNodeBuilder).tp_dict, "class_", make_descriptor(BooleanQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BooleanQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_BooleanQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BooleanQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BooleanQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BooleanQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_BooleanQueryNodeBuilder::wrap_Object(BooleanQueryNodeBuilder(((t_BooleanQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_BooleanQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BooleanQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BooleanQueryNodeBuilder_init_(t_BooleanQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                BooleanQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = BooleanQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_BooleanQueryNodeBuilder_build(t_BooleanQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::BooleanQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_BooleanQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Bits$MatchAllBits.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Bits$MatchAllBits::class$ = NULL;
        jmethodID *Bits$MatchAllBits::mids$ = NULL;
        bool Bits$MatchAllBits::live$ = false;

        jclass Bits$MatchAllBits::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Bits$MatchAllBits");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_get_39c7bd30] = env->getMethodID(cls, "get", "(I)Z");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Bits$MatchAllBits::Bits$MatchAllBits(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        jboolean Bits$MatchAllBits::get(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_39c7bd30], a0);
        }

        jint Bits$MatchAllBits::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Bits$MatchAllBits_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Bits$MatchAllBits_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Bits$MatchAllBits_init_(t_Bits$MatchAllBits *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Bits$MatchAllBits_get(t_Bits$MatchAllBits *self, PyObject *arg);
        static PyObject *t_Bits$MatchAllBits_length(t_Bits$MatchAllBits *self);

        static PyMethodDef t_Bits$MatchAllBits__methods_[] = {
          DECLARE_METHOD(t_Bits$MatchAllBits, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bits$MatchAllBits, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bits$MatchAllBits, get, METH_O),
          DECLARE_METHOD(t_Bits$MatchAllBits, length, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Bits$MatchAllBits, t_Bits$MatchAllBits, ::java::lang::Object, Bits$MatchAllBits, t_Bits$MatchAllBits_init_, 0, 0, 0, 0, 0);

        void t_Bits$MatchAllBits::install(PyObject *module)
        {
          installType(&PY_TYPE(Bits$MatchAllBits), module, "Bits$MatchAllBits", 0);
        }

        void t_Bits$MatchAllBits::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Bits$MatchAllBits).tp_dict, "class_", make_descriptor(Bits$MatchAllBits::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Bits$MatchAllBits).tp_dict, "wrapfn_", make_descriptor(t_Bits$MatchAllBits::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Bits$MatchAllBits).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Bits$MatchAllBits_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Bits$MatchAllBits::initializeClass, 1)))
            return NULL;
          return t_Bits$MatchAllBits::wrap_Object(Bits$MatchAllBits(((t_Bits$MatchAllBits *) arg)->object.this$));
        }
        static PyObject *t_Bits$MatchAllBits_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Bits$MatchAllBits::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Bits$MatchAllBits_init_(t_Bits$MatchAllBits *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          Bits$MatchAllBits object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = Bits$MatchAllBits(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Bits$MatchAllBits_get(t_Bits$MatchAllBits *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_Bits$MatchAllBits_length(t_Bits$MatchAllBits *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/NumberFormat.h"
#include "java/lang/Class.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/Object.h"
#include "java/util/Locale.h"
#include "java/util/Currency.h"
#include "java/lang/Number.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *NumberFormat::class$ = NULL;
    jmethodID *NumberFormat::mids$ = NULL;
    bool NumberFormat::live$ = false;
    jint NumberFormat::FRACTION_FIELD = (jint) 0;
    jint NumberFormat::INTEGER_FIELD = (jint) 0;

    jclass NumberFormat::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/NumberFormat");

        mids$ = new jmethodID[max_mid];
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_format_1b4624f8] = env->getMethodID(cls, "format", "(D)Ljava/lang/String;");
        mids$[mid_format_3e02f30e] = env->getMethodID(cls, "format", "(J)Ljava/lang/String;");
        mids$[mid_getAvailableLocales_59cb5b46] = env->getStaticMethodID(cls, "getAvailableLocales", "()[Ljava/util/Locale;");
        mids$[mid_getCurrency_14c3f2a1] = env->getMethodID(cls, "getCurrency", "()Ljava/util/Currency;");
        mids$[mid_getCurrencyInstance_6b701965] = env->getStaticMethodID(cls, "getCurrencyInstance", "()Ljava/text/NumberFormat;");
        mids$[mid_getCurrencyInstance_c103b3da] = env->getStaticMethodID(cls, "getCurrencyInstance", "(Ljava/util/Locale;)Ljava/text/NumberFormat;");
        mids$[mid_getInstance_6b701965] = env->getStaticMethodID(cls, "getInstance", "()Ljava/text/NumberFormat;");
        mids$[mid_getInstance_c103b3da] = env->getStaticMethodID(cls, "getInstance", "(Ljava/util/Locale;)Ljava/text/NumberFormat;");
        mids$[mid_getIntegerInstance_6b701965] = env->getStaticMethodID(cls, "getIntegerInstance", "()Ljava/text/NumberFormat;");
        mids$[mid_getIntegerInstance_c103b3da] = env->getStaticMethodID(cls, "getIntegerInstance", "(Ljava/util/Locale;)Ljava/text/NumberFormat;");
        mids$[mid_getMaximumFractionDigits_54c6a179] = env->getMethodID(cls, "getMaximumFractionDigits", "()I");
        mids$[mid_getMaximumIntegerDigits_54c6a179] = env->getMethodID(cls, "getMaximumIntegerDigits", "()I");
        mids$[mid_getMinimumFractionDigits_54c6a179] = env->getMethodID(cls, "getMinimumFractionDigits", "()I");
        mids$[mid_getMinimumIntegerDigits_54c6a179] = env->getMethodID(cls, "getMinimumIntegerDigits", "()I");
        mids$[mid_getNumberInstance_6b701965] = env->getStaticMethodID(cls, "getNumberInstance", "()Ljava/text/NumberFormat;");
        mids$[mid_getNumberInstance_c103b3da] = env->getStaticMethodID(cls, "getNumberInstance", "(Ljava/util/Locale;)Ljava/text/NumberFormat;");
        mids$[mid_getPercentInstance_6b701965] = env->getStaticMethodID(cls, "getPercentInstance", "()Ljava/text/NumberFormat;");
        mids$[mid_getPercentInstance_c103b3da] = env->getStaticMethodID(cls, "getPercentInstance", "(Ljava/util/Locale;)Ljava/text/NumberFormat;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_isGroupingUsed_54c6a16a] = env->getMethodID(cls, "isGroupingUsed", "()Z");
        mids$[mid_isParseIntegerOnly_54c6a16a] = env->getMethodID(cls, "isParseIntegerOnly", "()Z");
        mids$[mid_parse_271f2fcb] = env->getMethodID(cls, "parse", "(Ljava/lang/String;)Ljava/lang/Number;");
        mids$[mid_setCurrency_de939370] = env->getMethodID(cls, "setCurrency", "(Ljava/util/Currency;)V");
        mids$[mid_setGroupingUsed_bb0c767f] = env->getMethodID(cls, "setGroupingUsed", "(Z)V");
        mids$[mid_setMaximumFractionDigits_39c7bd3c] = env->getMethodID(cls, "setMaximumFractionDigits", "(I)V");
        mids$[mid_setMaximumIntegerDigits_39c7bd3c] = env->getMethodID(cls, "setMaximumIntegerDigits", "(I)V");
        mids$[mid_setMinimumFractionDigits_39c7bd3c] = env->getMethodID(cls, "setMinimumFractionDigits", "(I)V");
        mids$[mid_setMinimumIntegerDigits_39c7bd3c] = env->getMethodID(cls, "setMinimumIntegerDigits", "(I)V");
        mids$[mid_setParseIntegerOnly_bb0c767f] = env->getMethodID(cls, "setParseIntegerOnly", "(Z)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        FRACTION_FIELD = env->getStaticIntField(cls, "FRACTION_FIELD");
        INTEGER_FIELD = env->getStaticIntField(cls, "INTEGER_FIELD");
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    ::java::lang::Object NumberFormat::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    jboolean NumberFormat::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    ::java::lang::String NumberFormat::format(jdouble a0) const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_format_1b4624f8], a0));
    }

    ::java::lang::String NumberFormat::format(jlong a0) const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_format_3e02f30e], a0));
    }

    JArray< ::java::util::Locale > NumberFormat::getAvailableLocales()
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::util::Locale >(env->callStaticObjectMethod(cls, mids$[mid_getAvailableLocales_59cb5b46]));
    }

    ::java::util::Currency NumberFormat::getCurrency() const
    {
      return ::java::util::Currency(env->callObjectMethod(this$, mids$[mid_getCurrency_14c3f2a1]));
    }

    NumberFormat NumberFormat::getCurrencyInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getCurrencyInstance_6b701965]));
    }

    NumberFormat NumberFormat::getCurrencyInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getCurrencyInstance_c103b3da], a0.this$));
    }

    NumberFormat NumberFormat::getInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getInstance_6b701965]));
    }

    NumberFormat NumberFormat::getInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getInstance_c103b3da], a0.this$));
    }

    NumberFormat NumberFormat::getIntegerInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getIntegerInstance_6b701965]));
    }

    NumberFormat NumberFormat::getIntegerInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getIntegerInstance_c103b3da], a0.this$));
    }

    jint NumberFormat::getMaximumFractionDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMaximumFractionDigits_54c6a179]);
    }

    jint NumberFormat::getMaximumIntegerDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMaximumIntegerDigits_54c6a179]);
    }

    jint NumberFormat::getMinimumFractionDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMinimumFractionDigits_54c6a179]);
    }

    jint NumberFormat::getMinimumIntegerDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMinimumIntegerDigits_54c6a179]);
    }

    NumberFormat NumberFormat::getNumberInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getNumberInstance_6b701965]));
    }

    NumberFormat NumberFormat::getNumberInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getNumberInstance_c103b3da], a0.this$));
    }

    NumberFormat NumberFormat::getPercentInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getPercentInstance_6b701965]));
    }

    NumberFormat NumberFormat::getPercentInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getPercentInstance_c103b3da], a0.this$));
    }

    jint NumberFormat::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jboolean NumberFormat::isGroupingUsed() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isGroupingUsed_54c6a16a]);
    }

    jboolean NumberFormat::isParseIntegerOnly() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isParseIntegerOnly_54c6a16a]);
    }

    ::java::lang::Number NumberFormat::parse(const ::java::lang::String & a0) const
    {
      return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_parse_271f2fcb], a0.this$));
    }

    void NumberFormat::setCurrency(const ::java::util::Currency & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setCurrency_de939370], a0.this$);
    }

    void NumberFormat::setGroupingUsed(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setGroupingUsed_bb0c767f], a0);
    }

    void NumberFormat::setMaximumFractionDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMaximumFractionDigits_39c7bd3c], a0);
    }

    void NumberFormat::setMaximumIntegerDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMaximumIntegerDigits_39c7bd3c], a0);
    }

    void NumberFormat::setMinimumFractionDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMinimumFractionDigits_39c7bd3c], a0);
    }

    void NumberFormat::setMinimumIntegerDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMinimumIntegerDigits_39c7bd3c], a0);
    }

    void NumberFormat::setParseIntegerOnly(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setParseIntegerOnly_bb0c767f], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_NumberFormat_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_NumberFormat_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_NumberFormat_clone(t_NumberFormat *self, PyObject *args);
    static PyObject *t_NumberFormat_equals(t_NumberFormat *self, PyObject *args);
    static PyObject *t_NumberFormat_format(t_NumberFormat *self, PyObject *args);
    static PyObject *t_NumberFormat_getAvailableLocales(PyTypeObject *type);
    static PyObject *t_NumberFormat_getCurrency(t_NumberFormat *self);
    static PyObject *t_NumberFormat_getCurrencyInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_NumberFormat_getInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_NumberFormat_getIntegerInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_NumberFormat_getMaximumFractionDigits(t_NumberFormat *self);
    static PyObject *t_NumberFormat_getMaximumIntegerDigits(t_NumberFormat *self);
    static PyObject *t_NumberFormat_getMinimumFractionDigits(t_NumberFormat *self);
    static PyObject *t_NumberFormat_getMinimumIntegerDigits(t_NumberFormat *self);
    static PyObject *t_NumberFormat_getNumberInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_NumberFormat_getPercentInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_NumberFormat_hashCode(t_NumberFormat *self, PyObject *args);
    static PyObject *t_NumberFormat_isGroupingUsed(t_NumberFormat *self);
    static PyObject *t_NumberFormat_isParseIntegerOnly(t_NumberFormat *self);
    static PyObject *t_NumberFormat_parse(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setCurrency(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setGroupingUsed(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setMaximumFractionDigits(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setMaximumIntegerDigits(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setMinimumFractionDigits(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setMinimumIntegerDigits(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setParseIntegerOnly(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_get__availableLocales(t_NumberFormat *self, void *data);
    static PyObject *t_NumberFormat_get__currency(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__currency(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__currencyInstance(t_NumberFormat *self, void *data);
    static PyObject *t_NumberFormat_get__groupingUsed(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__groupingUsed(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__instance(t_NumberFormat *self, void *data);
    static PyObject *t_NumberFormat_get__integerInstance(t_NumberFormat *self, void *data);
    static PyObject *t_NumberFormat_get__maximumFractionDigits(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__maximumFractionDigits(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__maximumIntegerDigits(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__maximumIntegerDigits(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__minimumFractionDigits(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__minimumFractionDigits(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__minimumIntegerDigits(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__minimumIntegerDigits(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__numberInstance(t_NumberFormat *self, void *data);
    static PyObject *t_NumberFormat_get__parseIntegerOnly(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__parseIntegerOnly(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__percentInstance(t_NumberFormat *self, void *data);
    static PyGetSetDef t_NumberFormat__fields_[] = {
      DECLARE_GET_FIELD(t_NumberFormat, availableLocales),
      DECLARE_GETSET_FIELD(t_NumberFormat, currency),
      DECLARE_GET_FIELD(t_NumberFormat, currencyInstance),
      DECLARE_GETSET_FIELD(t_NumberFormat, groupingUsed),
      DECLARE_GET_FIELD(t_NumberFormat, instance),
      DECLARE_GET_FIELD(t_NumberFormat, integerInstance),
      DECLARE_GETSET_FIELD(t_NumberFormat, maximumFractionDigits),
      DECLARE_GETSET_FIELD(t_NumberFormat, maximumIntegerDigits),
      DECLARE_GETSET_FIELD(t_NumberFormat, minimumFractionDigits),
      DECLARE_GETSET_FIELD(t_NumberFormat, minimumIntegerDigits),
      DECLARE_GET_FIELD(t_NumberFormat, numberInstance),
      DECLARE_GETSET_FIELD(t_NumberFormat, parseIntegerOnly),
      DECLARE_GET_FIELD(t_NumberFormat, percentInstance),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_NumberFormat__methods_[] = {
      DECLARE_METHOD(t_NumberFormat, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, clone, METH_VARARGS),
      DECLARE_METHOD(t_NumberFormat, equals, METH_VARARGS),
      DECLARE_METHOD(t_NumberFormat, format, METH_VARARGS),
      DECLARE_METHOD(t_NumberFormat, getAvailableLocales, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, getCurrency, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, getCurrencyInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, getInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, getIntegerInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, getMaximumFractionDigits, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, getMaximumIntegerDigits, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, getMinimumFractionDigits, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, getMinimumIntegerDigits, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, getNumberInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, getPercentInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_NumberFormat, isGroupingUsed, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, isParseIntegerOnly, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, parse, METH_O),
      DECLARE_METHOD(t_NumberFormat, setCurrency, METH_O),
      DECLARE_METHOD(t_NumberFormat, setGroupingUsed, METH_O),
      DECLARE_METHOD(t_NumberFormat, setMaximumFractionDigits, METH_O),
      DECLARE_METHOD(t_NumberFormat, setMaximumIntegerDigits, METH_O),
      DECLARE_METHOD(t_NumberFormat, setMinimumFractionDigits, METH_O),
      DECLARE_METHOD(t_NumberFormat, setMinimumIntegerDigits, METH_O),
      DECLARE_METHOD(t_NumberFormat, setParseIntegerOnly, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(NumberFormat, t_NumberFormat, ::java::text::Format, NumberFormat, abstract_init, 0, 0, t_NumberFormat__fields_, 0, 0);

    void t_NumberFormat::install(PyObject *module)
    {
      installType(&PY_TYPE(NumberFormat), module, "NumberFormat", 0);
    }

    void t_NumberFormat::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(NumberFormat).tp_dict, "class_", make_descriptor(NumberFormat::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(NumberFormat).tp_dict, "wrapfn_", make_descriptor(t_NumberFormat::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(NumberFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
      env->getClass(NumberFormat::initializeClass);
      PyDict_SetItemString(PY_TYPE(NumberFormat).tp_dict, "FRACTION_FIELD", make_descriptor(NumberFormat::FRACTION_FIELD));
      PyDict_SetItemString(PY_TYPE(NumberFormat).tp_dict, "INTEGER_FIELD", make_descriptor(NumberFormat::INTEGER_FIELD));
    }

    static PyObject *t_NumberFormat_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, NumberFormat::initializeClass, 1)))
        return NULL;
      return t_NumberFormat::wrap_Object(NumberFormat(((t_NumberFormat *) arg)->object.this$));
    }
    static PyObject *t_NumberFormat_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, NumberFormat::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_NumberFormat_clone(t_NumberFormat *self, PyObject *args)
    {
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.clone());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(NumberFormat), (PyObject *) self, "clone", args, 2);
    }

    static PyObject *t_NumberFormat_equals(t_NumberFormat *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(NumberFormat), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_NumberFormat_format(t_NumberFormat *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jdouble a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(result = self->object.format(a0));
            return j2p(result);
          }
        }
        {
          jlong a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = self->object.format(a0));
            return j2p(result);
          }
        }
      }

      return callSuper(&PY_TYPE(NumberFormat), (PyObject *) self, "format", args, 2);
    }

    static PyObject *t_NumberFormat_getAvailableLocales(PyTypeObject *type)
    {
      JArray< ::java::util::Locale > result((jobject) NULL);
      OBJ_CALL(result = ::java::text::NumberFormat::getAvailableLocales());
      return JArray<jobject>(result.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_NumberFormat_getCurrency(t_NumberFormat *self)
    {
      ::java::util::Currency result((jobject) NULL);
      OBJ_CALL(result = self->object.getCurrency());
      return ::java::util::t_Currency::wrap_Object(result);
    }

    static PyObject *t_NumberFormat_getCurrencyInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          NumberFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::NumberFormat::getCurrencyInstance());
          return t_NumberFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          NumberFormat result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::NumberFormat::getCurrencyInstance(a0));
            return t_NumberFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getCurrencyInstance", args);
      return NULL;
    }

    static PyObject *t_NumberFormat_getInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          NumberFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::NumberFormat::getInstance());
          return t_NumberFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          NumberFormat result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::NumberFormat::getInstance(a0));
            return t_NumberFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getInstance", args);
      return NULL;
    }

    static PyObject *t_NumberFormat_getIntegerInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          NumberFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::NumberFormat::getIntegerInstance());
          return t_NumberFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          NumberFormat result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::NumberFormat::getIntegerInstance(a0));
            return t_NumberFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getIntegerInstance", args);
      return NULL;
    }

    static PyObject *t_NumberFormat_getMaximumFractionDigits(t_NumberFormat *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getMaximumFractionDigits());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_NumberFormat_getMaximumIntegerDigits(t_NumberFormat *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getMaximumIntegerDigits());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_NumberFormat_getMinimumFractionDigits(t_NumberFormat *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getMinimumFractionDigits());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_NumberFormat_getMinimumIntegerDigits(t_NumberFormat *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getMinimumIntegerDigits());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_NumberFormat_getNumberInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          NumberFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::NumberFormat::getNumberInstance());
          return t_NumberFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          NumberFormat result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::NumberFormat::getNumberInstance(a0));
            return t_NumberFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getNumberInstance", args);
      return NULL;
    }

    static PyObject *t_NumberFormat_getPercentInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          NumberFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::NumberFormat::getPercentInstance());
          return t_NumberFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          NumberFormat result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::NumberFormat::getPercentInstance(a0));
            return t_NumberFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getPercentInstance", args);
      return NULL;
    }

    static PyObject *t_NumberFormat_hashCode(t_NumberFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(NumberFormat), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_NumberFormat_isGroupingUsed(t_NumberFormat *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isGroupingUsed());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_NumberFormat_isParseIntegerOnly(t_NumberFormat *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isParseIntegerOnly());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_NumberFormat_parse(t_NumberFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::lang::Number result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.parse(a0));
        return ::java::lang::t_Number::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "parse", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setCurrency(t_NumberFormat *self, PyObject *arg)
    {
      ::java::util::Currency a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::util::Currency::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setCurrency(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setCurrency", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setGroupingUsed(t_NumberFormat *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.setGroupingUsed(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setGroupingUsed", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setMaximumFractionDigits(t_NumberFormat *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setMaximumFractionDigits(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setMaximumFractionDigits", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setMaximumIntegerDigits(t_NumberFormat *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setMaximumIntegerDigits(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setMaximumIntegerDigits", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setMinimumFractionDigits(t_NumberFormat *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setMinimumFractionDigits(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setMinimumFractionDigits", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setMinimumIntegerDigits(t_NumberFormat *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setMinimumIntegerDigits(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setMinimumIntegerDigits", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setParseIntegerOnly(t_NumberFormat *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.setParseIntegerOnly(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setParseIntegerOnly", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_get__availableLocales(t_NumberFormat *self, void *data)
    {
      JArray< ::java::util::Locale > value((jobject) NULL);
      OBJ_CALL(value = self->object.getAvailableLocales());
      return JArray<jobject>(value.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_NumberFormat_get__currency(t_NumberFormat *self, void *data)
    {
      ::java::util::Currency value((jobject) NULL);
      OBJ_CALL(value = self->object.getCurrency());
      return ::java::util::t_Currency::wrap_Object(value);
    }
    static int t_NumberFormat_set__currency(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::util::Currency value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::util::Currency::initializeClass, &value))
        {
          INT_CALL(self->object.setCurrency(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "currency", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__currencyInstance(t_NumberFormat *self, void *data)
    {
      NumberFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getCurrencyInstance());
      return t_NumberFormat::wrap_Object(value);
    }

    static PyObject *t_NumberFormat_get__groupingUsed(t_NumberFormat *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isGroupingUsed());
      Py_RETURN_BOOL(value);
    }
    static int t_NumberFormat_set__groupingUsed(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        jboolean value;
        if (!parseArg(arg, "Z", &value))
        {
          INT_CALL(self->object.setGroupingUsed(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "groupingUsed", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__instance(t_NumberFormat *self, void *data)
    {
      NumberFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getInstance());
      return t_NumberFormat::wrap_Object(value);
    }

    static PyObject *t_NumberFormat_get__integerInstance(t_NumberFormat *self, void *data)
    {
      NumberFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getIntegerInstance());
      return t_NumberFormat::wrap_Object(value);
    }

    static PyObject *t_NumberFormat_get__maximumFractionDigits(t_NumberFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMaximumFractionDigits());
      return PyInt_FromLong((long) value);
    }
    static int t_NumberFormat_set__maximumFractionDigits(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMaximumFractionDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "maximumFractionDigits", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__maximumIntegerDigits(t_NumberFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMaximumIntegerDigits());
      return PyInt_FromLong((long) value);
    }
    static int t_NumberFormat_set__maximumIntegerDigits(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMaximumIntegerDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "maximumIntegerDigits", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__minimumFractionDigits(t_NumberFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMinimumFractionDigits());
      return PyInt_FromLong((long) value);
    }
    static int t_NumberFormat_set__minimumFractionDigits(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMinimumFractionDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "minimumFractionDigits", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__minimumIntegerDigits(t_NumberFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMinimumIntegerDigits());
      return PyInt_FromLong((long) value);
    }
    static int t_NumberFormat_set__minimumIntegerDigits(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMinimumIntegerDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "minimumIntegerDigits", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__numberInstance(t_NumberFormat *self, void *data)
    {
      NumberFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getNumberInstance());
      return t_NumberFormat::wrap_Object(value);
    }

    static PyObject *t_NumberFormat_get__parseIntegerOnly(t_NumberFormat *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isParseIntegerOnly());
      Py_RETURN_BOOL(value);
    }
    static int t_NumberFormat_set__parseIntegerOnly(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        jboolean value;
        if (!parseArg(arg, "Z", &value))
        {
          INT_CALL(self->object.setParseIntegerOnly(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "parseIntegerOnly", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__percentInstance(t_NumberFormat *self, void *data)
    {
      NumberFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getPercentInstance());
      return t_NumberFormat::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/it/ItalianLightStemFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {

          ::java::lang::Class *ItalianLightStemFilterFactory::class$ = NULL;
          jmethodID *ItalianLightStemFilterFactory::mids$ = NULL;
          bool ItalianLightStemFilterFactory::live$ = false;

          jclass ItalianLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/it/ItalianLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ItalianLightStemFilterFactory::ItalianLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream ItalianLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {
          static PyObject *t_ItalianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ItalianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ItalianLightStemFilterFactory_init_(t_ItalianLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ItalianLightStemFilterFactory_create(t_ItalianLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_ItalianLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ItalianLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ItalianLightStemFilterFactory, t_ItalianLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ItalianLightStemFilterFactory, t_ItalianLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ItalianLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ItalianLightStemFilterFactory), module, "ItalianLightStemFilterFactory", 0);
          }

          void t_ItalianLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ItalianLightStemFilterFactory).tp_dict, "class_", make_descriptor(ItalianLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ItalianLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ItalianLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ItalianLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ItalianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ItalianLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ItalianLightStemFilterFactory::wrap_Object(ItalianLightStemFilterFactory(((t_ItalianLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ItalianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ItalianLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ItalianLightStemFilterFactory_init_(t_ItalianLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ItalianLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ItalianLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ItalianLightStemFilterFactory_create(t_ItalianLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ItalianLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Util$Result.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Util$Result::class$ = NULL;
          jmethodID *Util$Result::mids$ = NULL;
          jfieldID *Util$Result::fids$ = NULL;
          bool Util$Result::live$ = false;

          jclass Util$Result::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Util$Result");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_52197430] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/IntsRef;Ljava/lang/Object;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_input] = env->getFieldID(cls, "input", "Lorg/apache/lucene/util/IntsRef;");
              fids$[fid_output] = env->getFieldID(cls, "output", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Util$Result::Util$Result(const ::org::apache::lucene::util::IntsRef & a0, const ::java::lang::Object & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_52197430, a0.this$, a1.this$)) {}

          ::org::apache::lucene::util::IntsRef Util$Result::_get_input() const
          {
            return ::org::apache::lucene::util::IntsRef(env->getObjectField(this$, fids$[fid_input]));
          }

          ::java::lang::Object Util$Result::_get_output() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Util$Result_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$Result_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$Result_of_(t_Util$Result *self, PyObject *args);
          static int t_Util$Result_init_(t_Util$Result *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Util$Result_get__input(t_Util$Result *self, void *data);
          static PyObject *t_Util$Result_get__output(t_Util$Result *self, void *data);

          static PyObject *t_Util$Result_get__parameters_(t_Util$Result *self, void *data);
          static PyGetSetDef t_Util$Result__fields_[] = {
            DECLARE_GET_FIELD(t_Util$Result, input),
            DECLARE_GET_FIELD(t_Util$Result, output),
            DECLARE_GET_FIELD(t_Util$Result, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Util$Result__methods_[] = {
            DECLARE_METHOD(t_Util$Result, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$Result, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$Result, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Util$Result, t_Util$Result, ::java::lang::Object, Util$Result, t_Util$Result_init_, 0, 0, t_Util$Result__fields_, 0, 0);
          PyObject *t_Util$Result::wrap_Object(const Util$Result& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$Result::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$Result *self = (t_Util$Result *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Util$Result::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$Result::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$Result *self = (t_Util$Result *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Util$Result::install(PyObject *module)
          {
            installType(&PY_TYPE(Util$Result), module, "Util$Result", 0);
          }

          void t_Util$Result::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Util$Result).tp_dict, "class_", make_descriptor(Util$Result::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Util$Result).tp_dict, "wrapfn_", make_descriptor(t_Util$Result::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Util$Result).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Util$Result_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Util$Result::initializeClass, 1)))
              return NULL;
            return t_Util$Result::wrap_Object(Util$Result(((t_Util$Result *) arg)->object.this$));
          }
          static PyObject *t_Util$Result_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Util$Result::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Util$Result_of_(t_Util$Result *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Util$Result_init_(t_Util$Result *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            Util$Result object((jobject) NULL);

            if (!parseArgs(args, "ko", ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
            {
              INT_CALL(object = Util$Result(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_Util$Result_get__parameters_(t_Util$Result *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Util$Result_get__input(t_Util$Result *self, void *data)
          {
            ::org::apache::lucene::util::IntsRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_input());
            return ::org::apache::lucene::util::t_IntsRef::wrap_Object(value);
          }

          static PyObject *t_Util$Result_get__output(t_Util$Result *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$MemoryOrdinalMap.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {

            ::java::lang::Class *DirectoryTaxonomyWriter$MemoryOrdinalMap::class$ = NULL;
            jmethodID *DirectoryTaxonomyWriter$MemoryOrdinalMap::mids$ = NULL;
            bool DirectoryTaxonomyWriter$MemoryOrdinalMap::live$ = false;

            jclass DirectoryTaxonomyWriter$MemoryOrdinalMap::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$MemoryOrdinalMap");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_addDone_54c6a166] = env->getMethodID(cls, "addDone", "()V");
                mids$[mid_addMapping_d8d154a6] = env->getMethodID(cls, "addMapping", "(II)V");
                mids$[mid_getMap_dab10e75] = env->getMethodID(cls, "getMap", "()[I");
                mids$[mid_setSize_39c7bd3c] = env->getMethodID(cls, "setSize", "(I)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DirectoryTaxonomyWriter$MemoryOrdinalMap::DirectoryTaxonomyWriter$MemoryOrdinalMap() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            void DirectoryTaxonomyWriter$MemoryOrdinalMap::addDone() const
            {
              env->callVoidMethod(this$, mids$[mid_addDone_54c6a166]);
            }

            void DirectoryTaxonomyWriter$MemoryOrdinalMap::addMapping(jint a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addMapping_d8d154a6], a0, a1);
            }

            JArray< jint > DirectoryTaxonomyWriter$MemoryOrdinalMap::getMap() const
            {
              return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getMap_dab10e75]));
            }

            void DirectoryTaxonomyWriter$MemoryOrdinalMap::setSize(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setSize_39c7bd3c], a0);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DirectoryTaxonomyWriter$MemoryOrdinalMap_init_(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_addDone(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self);
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_addMapping(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_getMap(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self);
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_setSize(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_get__map(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, void *data);
            static int t_DirectoryTaxonomyWriter$MemoryOrdinalMap_set__size(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *arg, void *data);
            static PyGetSetDef t_DirectoryTaxonomyWriter$MemoryOrdinalMap__fields_[] = {
              DECLARE_GET_FIELD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, map),
              DECLARE_SET_FIELD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, size),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DirectoryTaxonomyWriter$MemoryOrdinalMap__methods_[] = {
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, addDone, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, addMapping, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, getMap, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, setSize, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DirectoryTaxonomyWriter$MemoryOrdinalMap, t_DirectoryTaxonomyWriter$MemoryOrdinalMap, ::java::lang::Object, DirectoryTaxonomyWriter$MemoryOrdinalMap, t_DirectoryTaxonomyWriter$MemoryOrdinalMap_init_, 0, 0, t_DirectoryTaxonomyWriter$MemoryOrdinalMap__fields_, 0, 0);

            void t_DirectoryTaxonomyWriter$MemoryOrdinalMap::install(PyObject *module)
            {
              installType(&PY_TYPE(DirectoryTaxonomyWriter$MemoryOrdinalMap), module, "DirectoryTaxonomyWriter$MemoryOrdinalMap", 0);
            }

            void t_DirectoryTaxonomyWriter$MemoryOrdinalMap::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$MemoryOrdinalMap).tp_dict, "class_", make_descriptor(DirectoryTaxonomyWriter$MemoryOrdinalMap::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$MemoryOrdinalMap).tp_dict, "wrapfn_", make_descriptor(t_DirectoryTaxonomyWriter$MemoryOrdinalMap::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$MemoryOrdinalMap).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DirectoryTaxonomyWriter$MemoryOrdinalMap::initializeClass, 1)))
                return NULL;
              return t_DirectoryTaxonomyWriter$MemoryOrdinalMap::wrap_Object(DirectoryTaxonomyWriter$MemoryOrdinalMap(((t_DirectoryTaxonomyWriter$MemoryOrdinalMap *) arg)->object.this$));
            }
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DirectoryTaxonomyWriter$MemoryOrdinalMap::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DirectoryTaxonomyWriter$MemoryOrdinalMap_init_(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *args, PyObject *kwds)
            {
              DirectoryTaxonomyWriter$MemoryOrdinalMap object((jobject) NULL);

              INT_CALL(object = DirectoryTaxonomyWriter$MemoryOrdinalMap());
              self->object = object;

              return 0;
            }

            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_addDone(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self)
            {
              OBJ_CALL(self->object.addDone());
              Py_RETURN_NONE;
            }

            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_addMapping(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *args)
            {
              jint a0;
              jint a1;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(self->object.addMapping(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addMapping", args);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_getMap(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self)
            {
              JArray< jint > result((jobject) NULL);
              OBJ_CALL(result = self->object.getMap());
              return result.wrap();
            }

            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_setSize(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setSize(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setSize", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_get__map(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, void *data)
            {
              JArray< jint > value((jobject) NULL);
              OBJ_CALL(value = self->object.getMap());
              return value.wrap();
            }

            static int t_DirectoryTaxonomyWriter$MemoryOrdinalMap_set__size(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setSize(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "size", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/AfterEffect$NoAfterEffect.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *AfterEffect$NoAfterEffect::class$ = NULL;
          jmethodID *AfterEffect$NoAfterEffect::mids$ = NULL;
          bool AfterEffect$NoAfterEffect::live$ = false;

          jclass AfterEffect$NoAfterEffect::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/AfterEffect$NoAfterEffect");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_05d4946a] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;F)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AfterEffect$NoAfterEffect::AfterEffect$NoAfterEffect() : ::org::apache::lucene::search::similarities::AfterEffect(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation AfterEffect$NoAfterEffect::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_05d4946a], a0.this$, a1));
          }

          jfloat AfterEffect$NoAfterEffect::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String AfterEffect$NoAfterEffect::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_AfterEffect$NoAfterEffect_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AfterEffect$NoAfterEffect_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AfterEffect$NoAfterEffect_init_(t_AfterEffect$NoAfterEffect *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AfterEffect$NoAfterEffect_explain(t_AfterEffect$NoAfterEffect *self, PyObject *args);
          static PyObject *t_AfterEffect$NoAfterEffect_score(t_AfterEffect$NoAfterEffect *self, PyObject *args);
          static PyObject *t_AfterEffect$NoAfterEffect_toString(t_AfterEffect$NoAfterEffect *self, PyObject *args);

          static PyMethodDef t_AfterEffect$NoAfterEffect__methods_[] = {
            DECLARE_METHOD(t_AfterEffect$NoAfterEffect, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffect$NoAfterEffect, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffect$NoAfterEffect, explain, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffect$NoAfterEffect, score, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffect$NoAfterEffect, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AfterEffect$NoAfterEffect, t_AfterEffect$NoAfterEffect, ::org::apache::lucene::search::similarities::AfterEffect, AfterEffect$NoAfterEffect, t_AfterEffect$NoAfterEffect_init_, 0, 0, 0, 0, 0);

          void t_AfterEffect$NoAfterEffect::install(PyObject *module)
          {
            installType(&PY_TYPE(AfterEffect$NoAfterEffect), module, "AfterEffect$NoAfterEffect", 0);
          }

          void t_AfterEffect$NoAfterEffect::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AfterEffect$NoAfterEffect).tp_dict, "class_", make_descriptor(AfterEffect$NoAfterEffect::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AfterEffect$NoAfterEffect).tp_dict, "wrapfn_", make_descriptor(t_AfterEffect$NoAfterEffect::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AfterEffect$NoAfterEffect).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AfterEffect$NoAfterEffect_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AfterEffect$NoAfterEffect::initializeClass, 1)))
              return NULL;
            return t_AfterEffect$NoAfterEffect::wrap_Object(AfterEffect$NoAfterEffect(((t_AfterEffect$NoAfterEffect *) arg)->object.this$));
          }
          static PyObject *t_AfterEffect$NoAfterEffect_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AfterEffect$NoAfterEffect::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AfterEffect$NoAfterEffect_init_(t_AfterEffect$NoAfterEffect *self, PyObject *args, PyObject *kwds)
          {
            AfterEffect$NoAfterEffect object((jobject) NULL);

            INT_CALL(object = AfterEffect$NoAfterEffect());
            self->object = object;

            return 0;
          }

          static PyObject *t_AfterEffect$NoAfterEffect_explain(t_AfterEffect$NoAfterEffect *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(AfterEffect$NoAfterEffect), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_AfterEffect$NoAfterEffect_score(t_AfterEffect$NoAfterEffect *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(AfterEffect$NoAfterEffect), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_AfterEffect$NoAfterEffect_toString(t_AfterEffect$NoAfterEffect *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(AfterEffect$NoAfterEffect), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/FieldBoostMapFCListener.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfigListener.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfig.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *FieldBoostMapFCListener::class$ = NULL;
              jmethodID *FieldBoostMapFCListener::mids$ = NULL;
              bool FieldBoostMapFCListener::live$ = false;

              jclass FieldBoostMapFCListener::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/FieldBoostMapFCListener");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_0b1f7132] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_buildFieldConfig_aaab7c6b] = env->getMethodID(cls, "buildFieldConfig", "(Lorg/apache/lucene/queryparser/flexible/core/config/FieldConfig;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FieldBoostMapFCListener::FieldBoostMapFCListener(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0b1f7132, a0.this$)) {}

              void FieldBoostMapFCListener::buildFieldConfig(const ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_buildFieldConfig_aaab7c6b], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_FieldBoostMapFCListener_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldBoostMapFCListener_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FieldBoostMapFCListener_init_(t_FieldBoostMapFCListener *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FieldBoostMapFCListener_buildFieldConfig(t_FieldBoostMapFCListener *self, PyObject *arg);

              static PyMethodDef t_FieldBoostMapFCListener__methods_[] = {
                DECLARE_METHOD(t_FieldBoostMapFCListener, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldBoostMapFCListener, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldBoostMapFCListener, buildFieldConfig, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FieldBoostMapFCListener, t_FieldBoostMapFCListener, ::java::lang::Object, FieldBoostMapFCListener, t_FieldBoostMapFCListener_init_, 0, 0, 0, 0, 0);

              void t_FieldBoostMapFCListener::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldBoostMapFCListener), module, "FieldBoostMapFCListener", 0);
              }

              void t_FieldBoostMapFCListener::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FieldBoostMapFCListener).tp_dict, "class_", make_descriptor(FieldBoostMapFCListener::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FieldBoostMapFCListener).tp_dict, "wrapfn_", make_descriptor(t_FieldBoostMapFCListener::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FieldBoostMapFCListener).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldBoostMapFCListener_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldBoostMapFCListener::initializeClass, 1)))
                  return NULL;
                return t_FieldBoostMapFCListener::wrap_Object(FieldBoostMapFCListener(((t_FieldBoostMapFCListener *) arg)->object.this$));
              }
              static PyObject *t_FieldBoostMapFCListener_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldBoostMapFCListener::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FieldBoostMapFCListener_init_(t_FieldBoostMapFCListener *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                FieldBoostMapFCListener object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  INT_CALL(object = FieldBoostMapFCListener(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_FieldBoostMapFCListener_buildFieldConfig(t_FieldBoostMapFCListener *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.buildFieldConfig(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "buildFieldConfig", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/util/MutableBits.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentWriteState::class$ = NULL;
        jmethodID *SegmentWriteState::mids$ = NULL;
        jfieldID *SegmentWriteState::fids$ = NULL;
        bool SegmentWriteState::live$ = false;

        jclass SegmentWriteState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentWriteState");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_bde10a1b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentWriteState;Ljava/lang/String;)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_context] = env->getFieldID(cls, "context", "Lorg/apache/lucene/store/IOContext;");
            fids$[fid_delCountOnFlush] = env->getFieldID(cls, "delCountOnFlush", "I");
            fids$[fid_directory] = env->getFieldID(cls, "directory", "Lorg/apache/lucene/store/Directory;");
            fids$[fid_fieldInfos] = env->getFieldID(cls, "fieldInfos", "Lorg/apache/lucene/index/FieldInfos;");
            fids$[fid_infoStream] = env->getFieldID(cls, "infoStream", "Lorg/apache/lucene/util/InfoStream;");
            fids$[fid_liveDocs] = env->getFieldID(cls, "liveDocs", "Lorg/apache/lucene/util/MutableBits;");
            fids$[fid_segmentInfo] = env->getFieldID(cls, "segmentInfo", "Lorg/apache/lucene/index/SegmentInfo;");
            fids$[fid_segmentSuffix] = env->getFieldID(cls, "segmentSuffix", "Ljava/lang/String;");
            fids$[fid_termIndexInterval] = env->getFieldID(cls, "termIndexInterval", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentWriteState::SegmentWriteState(const SegmentWriteState & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bde10a1b, a0.this$, a1.this$)) {}

        ::org::apache::lucene::store::IOContext SegmentWriteState::_get_context() const
        {
          return ::org::apache::lucene::store::IOContext(env->getObjectField(this$, fids$[fid_context]));
        }

        jint SegmentWriteState::_get_delCountOnFlush() const
        {
          return env->getIntField(this$, fids$[fid_delCountOnFlush]);
        }

        void SegmentWriteState::_set_delCountOnFlush(jint a0) const
        {
          env->setIntField(this$, fids$[fid_delCountOnFlush], a0);
        }

        ::org::apache::lucene::store::Directory SegmentWriteState::_get_directory() const
        {
          return ::org::apache::lucene::store::Directory(env->getObjectField(this$, fids$[fid_directory]));
        }

        ::org::apache::lucene::index::FieldInfos SegmentWriteState::_get_fieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->getObjectField(this$, fids$[fid_fieldInfos]));
        }

        ::org::apache::lucene::util::InfoStream SegmentWriteState::_get_infoStream() const
        {
          return ::org::apache::lucene::util::InfoStream(env->getObjectField(this$, fids$[fid_infoStream]));
        }

        ::org::apache::lucene::util::MutableBits SegmentWriteState::_get_liveDocs() const
        {
          return ::org::apache::lucene::util::MutableBits(env->getObjectField(this$, fids$[fid_liveDocs]));
        }

        void SegmentWriteState::_set_liveDocs(const ::org::apache::lucene::util::MutableBits & a0) const
        {
          env->setObjectField(this$, fids$[fid_liveDocs], a0.this$);
        }

        ::org::apache::lucene::index::SegmentInfo SegmentWriteState::_get_segmentInfo() const
        {
          return ::org::apache::lucene::index::SegmentInfo(env->getObjectField(this$, fids$[fid_segmentInfo]));
        }

        ::java::lang::String SegmentWriteState::_get_segmentSuffix() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_segmentSuffix]));
        }

        jint SegmentWriteState::_get_termIndexInterval() const
        {
          return env->getIntField(this$, fids$[fid_termIndexInterval]);
        }

        void SegmentWriteState::_set_termIndexInterval(jint a0) const
        {
          env->setIntField(this$, fids$[fid_termIndexInterval], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentWriteState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentWriteState_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SegmentWriteState_init_(t_SegmentWriteState *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentWriteState_get__context(t_SegmentWriteState *self, void *data);
        static PyObject *t_SegmentWriteState_get__delCountOnFlush(t_SegmentWriteState *self, void *data);
        static int t_SegmentWriteState_set__delCountOnFlush(t_SegmentWriteState *self, PyObject *arg, void *data);
        static PyObject *t_SegmentWriteState_get__directory(t_SegmentWriteState *self, void *data);
        static PyObject *t_SegmentWriteState_get__fieldInfos(t_SegmentWriteState *self, void *data);
        static PyObject *t_SegmentWriteState_get__infoStream(t_SegmentWriteState *self, void *data);
        static PyObject *t_SegmentWriteState_get__liveDocs(t_SegmentWriteState *self, void *data);
        static int t_SegmentWriteState_set__liveDocs(t_SegmentWriteState *self, PyObject *arg, void *data);
        static PyObject *t_SegmentWriteState_get__segmentInfo(t_SegmentWriteState *self, void *data);
        static PyObject *t_SegmentWriteState_get__segmentSuffix(t_SegmentWriteState *self, void *data);
        static PyObject *t_SegmentWriteState_get__termIndexInterval(t_SegmentWriteState *self, void *data);
        static int t_SegmentWriteState_set__termIndexInterval(t_SegmentWriteState *self, PyObject *arg, void *data);

        static PyGetSetDef t_SegmentWriteState__fields_[] = {
          DECLARE_GET_FIELD(t_SegmentWriteState, context),
          DECLARE_GETSET_FIELD(t_SegmentWriteState, delCountOnFlush),
          DECLARE_GET_FIELD(t_SegmentWriteState, directory),
          DECLARE_GET_FIELD(t_SegmentWriteState, fieldInfos),
          DECLARE_GET_FIELD(t_SegmentWriteState, infoStream),
          DECLARE_GETSET_FIELD(t_SegmentWriteState, liveDocs),
          DECLARE_GET_FIELD(t_SegmentWriteState, segmentInfo),
          DECLARE_GET_FIELD(t_SegmentWriteState, segmentSuffix),
          DECLARE_GETSET_FIELD(t_SegmentWriteState, termIndexInterval),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentWriteState__methods_[] = {
          DECLARE_METHOD(t_SegmentWriteState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentWriteState, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentWriteState, t_SegmentWriteState, ::java::lang::Object, SegmentWriteState, t_SegmentWriteState_init_, 0, 0, t_SegmentWriteState__fields_, 0, 0);

        void t_SegmentWriteState::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentWriteState), module, "SegmentWriteState", 0);
        }

        void t_SegmentWriteState::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentWriteState).tp_dict, "class_", make_descriptor(SegmentWriteState::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentWriteState).tp_dict, "wrapfn_", make_descriptor(t_SegmentWriteState::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentWriteState).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentWriteState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentWriteState::initializeClass, 1)))
            return NULL;
          return t_SegmentWriteState::wrap_Object(SegmentWriteState(((t_SegmentWriteState *) arg)->object.this$));
        }
        static PyObject *t_SegmentWriteState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentWriteState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SegmentWriteState_init_(t_SegmentWriteState *self, PyObject *args, PyObject *kwds)
        {
          SegmentWriteState a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          SegmentWriteState object((jobject) NULL);

          if (!parseArgs(args, "ks", SegmentWriteState::initializeClass, &a0, &a1))
          {
            INT_CALL(object = SegmentWriteState(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SegmentWriteState_get__context(t_SegmentWriteState *self, void *data)
        {
          ::org::apache::lucene::store::IOContext value((jobject) NULL);
          OBJ_CALL(value = self->object._get_context());
          return ::org::apache::lucene::store::t_IOContext::wrap_Object(value);
        }

        static PyObject *t_SegmentWriteState_get__delCountOnFlush(t_SegmentWriteState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_delCountOnFlush());
          return PyInt_FromLong((long) value);
        }
        static int t_SegmentWriteState_set__delCountOnFlush(t_SegmentWriteState *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_delCountOnFlush(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "delCountOnFlush", arg);
          return -1;
        }

        static PyObject *t_SegmentWriteState_get__directory(t_SegmentWriteState *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object._get_directory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_SegmentWriteState_get__fieldInfos(t_SegmentWriteState *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object._get_fieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_SegmentWriteState_get__infoStream(t_SegmentWriteState *self, void *data)
        {
          ::org::apache::lucene::util::InfoStream value((jobject) NULL);
          OBJ_CALL(value = self->object._get_infoStream());
          return ::org::apache::lucene::util::t_InfoStream::wrap_Object(value);
        }

        static PyObject *t_SegmentWriteState_get__liveDocs(t_SegmentWriteState *self, void *data)
        {
          ::org::apache::lucene::util::MutableBits value((jobject) NULL);
          OBJ_CALL(value = self->object._get_liveDocs());
          return ::org::apache::lucene::util::t_MutableBits::wrap_Object(value);
        }
        static int t_SegmentWriteState_set__liveDocs(t_SegmentWriteState *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::util::MutableBits value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::util::MutableBits::initializeClass, &value))
          {
            INT_CALL(self->object._set_liveDocs(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "liveDocs", arg);
          return -1;
        }

        static PyObject *t_SegmentWriteState_get__segmentInfo(t_SegmentWriteState *self, void *data)
        {
          ::org::apache::lucene::index::SegmentInfo value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentInfo());
          return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(value);
        }

        static PyObject *t_SegmentWriteState_get__segmentSuffix(t_SegmentWriteState *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentSuffix());
          return j2p(value);
        }

        static PyObject *t_SegmentWriteState_get__termIndexInterval(t_SegmentWriteState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_termIndexInterval());
          return PyInt_FromLong((long) value);
        }
        static int t_SegmentWriteState_set__termIndexInterval(t_SegmentWriteState *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_termIndexInterval(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "termIndexInterval", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterTerms.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterAtomicReader$FilterTerms::class$ = NULL;
        jmethodID *FilterAtomicReader$FilterTerms::mids$ = NULL;
        bool FilterAtomicReader$FilterTerms::live$ = false;

        jclass FilterAtomicReader$FilterTerms::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterAtomicReader$FilterTerms");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d0b7bb17] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Terms;)V");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_getDocCount_54c6a179] = env->getMethodID(cls, "getDocCount", "()I");
            mids$[mid_getSumDocFreq_54c6a17a] = env->getMethodID(cls, "getSumDocFreq", "()J");
            mids$[mid_getSumTotalTermFreq_54c6a17a] = env->getMethodID(cls, "getSumTotalTermFreq", "()J");
            mids$[mid_hasFreqs_54c6a16a] = env->getMethodID(cls, "hasFreqs", "()Z");
            mids$[mid_hasOffsets_54c6a16a] = env->getMethodID(cls, "hasOffsets", "()Z");
            mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
            mids$[mid_hasPositions_54c6a16a] = env->getMethodID(cls, "hasPositions", "()Z");
            mids$[mid_iterator_d737078b] = env->getMethodID(cls, "iterator", "(Lorg/apache/lucene/index/TermsEnum;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_size_54c6a17a] = env->getMethodID(cls, "size", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterAtomicReader$FilterTerms::FilterAtomicReader$FilterTerms(const ::org::apache::lucene::index::Terms & a0) : ::org::apache::lucene::index::Terms(env->newObject(initializeClass, &mids$, mid_init$_d0b7bb17, a0.this$)) {}

        ::java::util::Comparator FilterAtomicReader$FilterTerms::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        jint FilterAtomicReader$FilterTerms::getDocCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_54c6a179]);
        }

        jlong FilterAtomicReader$FilterTerms::getSumDocFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_getSumDocFreq_54c6a17a]);
        }

        jlong FilterAtomicReader$FilterTerms::getSumTotalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_54c6a17a]);
        }

        jboolean FilterAtomicReader$FilterTerms::hasFreqs() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasFreqs_54c6a16a]);
        }

        jboolean FilterAtomicReader$FilterTerms::hasOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasOffsets_54c6a16a]);
        }

        jboolean FilterAtomicReader$FilterTerms::hasPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
        }

        jboolean FilterAtomicReader$FilterTerms::hasPositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPositions_54c6a16a]);
        }

        ::org::apache::lucene::index::TermsEnum FilterAtomicReader$FilterTerms::iterator(const ::org::apache::lucene::index::TermsEnum & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_iterator_d737078b], a0.this$));
        }

        jlong FilterAtomicReader$FilterTerms::size() const
        {
          return env->callLongMethod(this$, mids$[mid_size_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterAtomicReader$FilterTerms_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterAtomicReader$FilterTerms_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterAtomicReader$FilterTerms_init_(t_FilterAtomicReader$FilterTerms *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterAtomicReader$FilterTerms_getComparator(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_getDocCount(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_getSumDocFreq(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_getSumTotalTermFreq(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_hasFreqs(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_hasOffsets(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_hasPayloads(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_hasPositions(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_iterator(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_size(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_get__comparator(t_FilterAtomicReader$FilterTerms *self, void *data);
        static PyObject *t_FilterAtomicReader$FilterTerms_get__docCount(t_FilterAtomicReader$FilterTerms *self, void *data);
        static PyObject *t_FilterAtomicReader$FilterTerms_get__sumDocFreq(t_FilterAtomicReader$FilterTerms *self, void *data);
        static PyObject *t_FilterAtomicReader$FilterTerms_get__sumTotalTermFreq(t_FilterAtomicReader$FilterTerms *self, void *data);
        static PyGetSetDef t_FilterAtomicReader$FilterTerms__fields_[] = {
          DECLARE_GET_FIELD(t_FilterAtomicReader$FilterTerms, comparator),
          DECLARE_GET_FIELD(t_FilterAtomicReader$FilterTerms, docCount),
          DECLARE_GET_FIELD(t_FilterAtomicReader$FilterTerms, sumDocFreq),
          DECLARE_GET_FIELD(t_FilterAtomicReader$FilterTerms, sumTotalTermFreq),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterAtomicReader$FilterTerms__methods_[] = {
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, getDocCount, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, getSumDocFreq, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, getSumTotalTermFreq, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, hasFreqs, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, hasOffsets, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, hasPayloads, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, hasPositions, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, iterator, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, size, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterAtomicReader$FilterTerms, t_FilterAtomicReader$FilterTerms, ::org::apache::lucene::index::Terms, FilterAtomicReader$FilterTerms, t_FilterAtomicReader$FilterTerms_init_, 0, 0, t_FilterAtomicReader$FilterTerms__fields_, 0, 0);

        void t_FilterAtomicReader$FilterTerms::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterAtomicReader$FilterTerms), module, "FilterAtomicReader$FilterTerms", 0);
        }

        void t_FilterAtomicReader$FilterTerms::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterTerms).tp_dict, "class_", make_descriptor(FilterAtomicReader$FilterTerms::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterTerms).tp_dict, "wrapfn_", make_descriptor(t_FilterAtomicReader$FilterTerms::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterTerms).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterAtomicReader$FilterTerms::initializeClass, 1)))
            return NULL;
          return t_FilterAtomicReader$FilterTerms::wrap_Object(FilterAtomicReader$FilterTerms(((t_FilterAtomicReader$FilterTerms *) arg)->object.this$));
        }
        static PyObject *t_FilterAtomicReader$FilterTerms_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterAtomicReader$FilterTerms::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterAtomicReader$FilterTerms_init_(t_FilterAtomicReader$FilterTerms *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Terms a0((jobject) NULL);
          FilterAtomicReader$FilterTerms object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
          {
            INT_CALL(object = FilterAtomicReader$FilterTerms(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_getComparator(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "getComparator", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_getDocCount(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getDocCount());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "getDocCount", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_getSumDocFreq(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getSumDocFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "getSumDocFreq", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_getSumTotalTermFreq(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getSumTotalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "getSumTotalTermFreq", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_hasFreqs(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasFreqs());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "hasFreqs", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_hasOffsets(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasOffsets());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "hasOffsets", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_hasPayloads(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasPayloads());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "hasPayloads", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_hasPositions(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasPositions());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "hasPositions", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_iterator(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.iterator(a0));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_size(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "size", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_get__comparator(t_FilterAtomicReader$FilterTerms *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_get__docCount(t_FilterAtomicReader$FilterTerms *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDocCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_get__sumDocFreq(t_FilterAtomicReader$FilterTerms *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getSumDocFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_get__sumTotalTermFreq(t_FilterAtomicReader$FilterTerms *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getSumTotalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *StandardQueryConfigHandler$Operator::class$ = NULL;
              jmethodID *StandardQueryConfigHandler$Operator::mids$ = NULL;
              bool StandardQueryConfigHandler$Operator::live$ = false;
              StandardQueryConfigHandler$Operator *StandardQueryConfigHandler$Operator::AND = NULL;
              StandardQueryConfigHandler$Operator *StandardQueryConfigHandler$Operator::OR = NULL;

              jclass StandardQueryConfigHandler$Operator::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_valueOf_5228e32d] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator;");
                  mids$[mid_values_6f704b93] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  AND = new StandardQueryConfigHandler$Operator(env->getStaticObjectField(cls, "AND", "Lorg/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator;"));
                  OR = new StandardQueryConfigHandler$Operator(env->getStaticObjectField(cls, "OR", "Lorg/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardQueryConfigHandler$Operator StandardQueryConfigHandler$Operator::valueOf(const ::java::lang::String & a0)
              {
                jclass cls = env->getClass(initializeClass);
                return StandardQueryConfigHandler$Operator(env->callStaticObjectMethod(cls, mids$[mid_valueOf_5228e32d], a0.this$));
              }

              JArray< StandardQueryConfigHandler$Operator > StandardQueryConfigHandler$Operator::values()
              {
                jclass cls = env->getClass(initializeClass);
                return JArray< StandardQueryConfigHandler$Operator >(env->callStaticObjectMethod(cls, mids$[mid_values_6f704b93]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_StandardQueryConfigHandler$Operator_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryConfigHandler$Operator_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryConfigHandler$Operator_of_(t_StandardQueryConfigHandler$Operator *self, PyObject *args);
              static PyObject *t_StandardQueryConfigHandler$Operator_valueOf(PyTypeObject *type, PyObject *args);
              static PyObject *t_StandardQueryConfigHandler$Operator_values(PyTypeObject *type);
              static PyObject *t_StandardQueryConfigHandler$Operator_get__parameters_(t_StandardQueryConfigHandler$Operator *self, void *data);
              static PyGetSetDef t_StandardQueryConfigHandler$Operator__fields_[] = {
                DECLARE_GET_FIELD(t_StandardQueryConfigHandler$Operator, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_StandardQueryConfigHandler$Operator__methods_[] = {
                DECLARE_METHOD(t_StandardQueryConfigHandler$Operator, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryConfigHandler$Operator, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryConfigHandler$Operator, of_, METH_VARARGS),
                DECLARE_METHOD(t_StandardQueryConfigHandler$Operator, valueOf, METH_VARARGS | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryConfigHandler$Operator, values, METH_NOARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardQueryConfigHandler$Operator, t_StandardQueryConfigHandler$Operator, ::java::lang::Enum, StandardQueryConfigHandler$Operator, abstract_init, 0, 0, t_StandardQueryConfigHandler$Operator__fields_, 0, 0);
              PyObject *t_StandardQueryConfigHandler$Operator::wrap_Object(const StandardQueryConfigHandler$Operator& object, PyTypeObject *p0)
              {
                PyObject *obj = t_StandardQueryConfigHandler$Operator::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_StandardQueryConfigHandler$Operator *self = (t_StandardQueryConfigHandler$Operator *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_StandardQueryConfigHandler$Operator::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_StandardQueryConfigHandler$Operator::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_StandardQueryConfigHandler$Operator *self = (t_StandardQueryConfigHandler$Operator *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_StandardQueryConfigHandler$Operator::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardQueryConfigHandler$Operator), module, "StandardQueryConfigHandler$Operator", 0);
              }

              void t_StandardQueryConfigHandler$Operator::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$Operator).tp_dict, "class_", make_descriptor(StandardQueryConfigHandler$Operator::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$Operator).tp_dict, "wrapfn_", make_descriptor(t_StandardQueryConfigHandler$Operator::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$Operator).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(StandardQueryConfigHandler$Operator::initializeClass);
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$Operator).tp_dict, "AND", make_descriptor(t_StandardQueryConfigHandler$Operator::wrap_Object(*StandardQueryConfigHandler$Operator::AND)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$Operator).tp_dict, "OR", make_descriptor(t_StandardQueryConfigHandler$Operator::wrap_Object(*StandardQueryConfigHandler$Operator::OR)));
              }

              static PyObject *t_StandardQueryConfigHandler$Operator_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardQueryConfigHandler$Operator::initializeClass, 1)))
                  return NULL;
                return t_StandardQueryConfigHandler$Operator::wrap_Object(StandardQueryConfigHandler$Operator(((t_StandardQueryConfigHandler$Operator *) arg)->object.this$));
              }
              static PyObject *t_StandardQueryConfigHandler$Operator_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardQueryConfigHandler$Operator::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_StandardQueryConfigHandler$Operator_of_(t_StandardQueryConfigHandler$Operator *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_StandardQueryConfigHandler$Operator_valueOf(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::String a0((jobject) NULL);
                StandardQueryConfigHandler$Operator result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator::valueOf(a0));
                  return t_StandardQueryConfigHandler$Operator::wrap_Object(result);
                }

                return callSuper(type, "valueOf", args, 2);
              }

              static PyObject *t_StandardQueryConfigHandler$Operator_values(PyTypeObject *type)
              {
                JArray< StandardQueryConfigHandler$Operator > result((jobject) NULL);
                OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator::values());
                return JArray<jobject>(result.this$).wrap(t_StandardQueryConfigHandler$Operator::wrap_jobject);
              }
              static PyObject *t_StandardQueryConfigHandler$Operator_get__parameters_(t_StandardQueryConfigHandler$Operator *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$Ints.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$Ints::class$ = NULL;
        jmethodID *FieldCache$Ints::mids$ = NULL;
        bool FieldCache$Ints::live$ = false;
        FieldCache$Ints *FieldCache$Ints::EMPTY = NULL;

        jclass FieldCache$Ints::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$Ints");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_get_39c7bd23] = env->getMethodID(cls, "get", "(I)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new FieldCache$Ints(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/FieldCache$Ints;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCache$Ints::FieldCache$Ints() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jint FieldCache$Ints::get(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_get_39c7bd23], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$Ints_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$Ints_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCache$Ints_init_(t_FieldCache$Ints *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCache$Ints_get(t_FieldCache$Ints *self, PyObject *arg);

        static PyMethodDef t_FieldCache$Ints__methods_[] = {
          DECLARE_METHOD(t_FieldCache$Ints, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Ints, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Ints, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$Ints, t_FieldCache$Ints, ::java::lang::Object, FieldCache$Ints, t_FieldCache$Ints_init_, 0, 0, 0, 0, 0);

        void t_FieldCache$Ints::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$Ints), module, "FieldCache$Ints", 0);
        }

        void t_FieldCache$Ints::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$Ints).tp_dict, "class_", make_descriptor(FieldCache$Ints::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$Ints).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$Ints::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$Ints).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldCache$Ints::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldCache$Ints).tp_dict, "EMPTY", make_descriptor(t_FieldCache$Ints::wrap_Object(*FieldCache$Ints::EMPTY)));
        }

        static PyObject *t_FieldCache$Ints_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$Ints::initializeClass, 1)))
            return NULL;
          return t_FieldCache$Ints::wrap_Object(FieldCache$Ints(((t_FieldCache$Ints *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$Ints_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$Ints::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCache$Ints_init_(t_FieldCache$Ints *self, PyObject *args, PyObject *kwds)
        {
          FieldCache$Ints object((jobject) NULL);

          INT_CALL(object = FieldCache$Ints());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCache$Ints_get(t_FieldCache$Ints *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/LowerCaseFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *LowerCaseFilter::class$ = NULL;
          jmethodID *LowerCaseFilter::mids$ = NULL;
          bool LowerCaseFilter::live$ = false;

          jclass LowerCaseFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/LowerCaseFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LowerCaseFilter::LowerCaseFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          LowerCaseFilter::LowerCaseFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          jboolean LowerCaseFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_LowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LowerCaseFilter_init_(t_LowerCaseFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LowerCaseFilter_incrementToken(t_LowerCaseFilter *self, PyObject *args);

          static PyMethodDef t_LowerCaseFilter__methods_[] = {
            DECLARE_METHOD(t_LowerCaseFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LowerCaseFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LowerCaseFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LowerCaseFilter, t_LowerCaseFilter, ::org::apache::lucene::analysis::TokenFilter, LowerCaseFilter, t_LowerCaseFilter_init_, 0, 0, 0, 0, 0);

          void t_LowerCaseFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(LowerCaseFilter), module, "LowerCaseFilter", 0);
          }

          void t_LowerCaseFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LowerCaseFilter).tp_dict, "class_", make_descriptor(LowerCaseFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LowerCaseFilter).tp_dict, "wrapfn_", make_descriptor(t_LowerCaseFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LowerCaseFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LowerCaseFilter::initializeClass, 1)))
              return NULL;
            return t_LowerCaseFilter::wrap_Object(LowerCaseFilter(((t_LowerCaseFilter *) arg)->object.this$));
          }
          static PyObject *t_LowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LowerCaseFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LowerCaseFilter_init_(t_LowerCaseFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                LowerCaseFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = LowerCaseFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                LowerCaseFilter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = LowerCaseFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LowerCaseFilter_incrementToken(t_LowerCaseFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(LowerCaseFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/id/IndonesianStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {

          ::java::lang::Class *IndonesianStemmer::class$ = NULL;
          jmethodID *IndonesianStemmer::mids$ = NULL;
          bool IndonesianStemmer::live$ = false;

          jclass IndonesianStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/id/IndonesianStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_39342af2] = env->getMethodID(cls, "stem", "([CIZ)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndonesianStemmer::IndonesianStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint IndonesianStemmer::stem(const JArray< jchar > & a0, jint a1, jboolean a2) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_39342af2], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {
          static PyObject *t_IndonesianStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndonesianStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndonesianStemmer_init_(t_IndonesianStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndonesianStemmer_stem(t_IndonesianStemmer *self, PyObject *args);

          static PyMethodDef t_IndonesianStemmer__methods_[] = {
            DECLARE_METHOD(t_IndonesianStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IndonesianStemmer, t_IndonesianStemmer, ::java::lang::Object, IndonesianStemmer, t_IndonesianStemmer_init_, 0, 0, 0, 0, 0);

          void t_IndonesianStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(IndonesianStemmer), module, "IndonesianStemmer", 0);
          }

          void t_IndonesianStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IndonesianStemmer).tp_dict, "class_", make_descriptor(IndonesianStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IndonesianStemmer).tp_dict, "wrapfn_", make_descriptor(t_IndonesianStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IndonesianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndonesianStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndonesianStemmer::initializeClass, 1)))
              return NULL;
            return t_IndonesianStemmer::wrap_Object(IndonesianStemmer(((t_IndonesianStemmer *) arg)->object.this$));
          }
          static PyObject *t_IndonesianStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndonesianStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndonesianStemmer_init_(t_IndonesianStemmer *self, PyObject *args, PyObject *kwds)
          {
            IndonesianStemmer object((jobject) NULL);

            INT_CALL(object = IndonesianStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_IndonesianStemmer_stem(t_IndonesianStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jboolean a2;
            jint result;

            if (!parseArgs(args, "[CIZ", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.stem(a0, a1, a2));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/highlight/PythonFragmenter.h"
#include "org/apache/lucene/search/highlight/Fragmenter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *PythonFragmenter::class$ = NULL;
          jmethodID *PythonFragmenter::mids$ = NULL;
          bool PythonFragmenter::live$ = false;

          jclass PythonFragmenter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/pylucene/search/highlight/PythonFragmenter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
              mids$[mid_isNewFragment_54c6a16a] = env->getMethodID(cls, "isNewFragment", "()Z");
              mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
              mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
              mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
              mids$[mid_start_7d0c5392] = env->getMethodID(cls, "start", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PythonFragmenter::PythonFragmenter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void PythonFragmenter::finalize() const
          {
            env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
          }

          jlong PythonFragmenter::pythonExtension() const
          {
            return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
          }

          void PythonFragmenter::pythonExtension(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace highlight {
          static PyObject *t_PythonFragmenter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PythonFragmenter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PythonFragmenter_init_(t_PythonFragmenter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PythonFragmenter_finalize(t_PythonFragmenter *self);
          static PyObject *t_PythonFragmenter_pythonExtension(t_PythonFragmenter *self, PyObject *args);
          static jboolean JNICALL t_PythonFragmenter_isNewFragment0(JNIEnv *jenv, jobject jobj);
          static void JNICALL t_PythonFragmenter_pythonDecRef1(JNIEnv *jenv, jobject jobj);
          static void JNICALL t_PythonFragmenter_start2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static PyObject *t_PythonFragmenter_get__self(t_PythonFragmenter *self, void *data);
          static PyGetSetDef t_PythonFragmenter__fields_[] = {
            DECLARE_GET_FIELD(t_PythonFragmenter, self),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PythonFragmenter__methods_[] = {
            DECLARE_METHOD(t_PythonFragmenter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonFragmenter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonFragmenter, finalize, METH_NOARGS),
            DECLARE_METHOD(t_PythonFragmenter, pythonExtension, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PythonFragmenter, t_PythonFragmenter, ::java::lang::Object, PythonFragmenter, t_PythonFragmenter_init_, 0, 0, t_PythonFragmenter__fields_, 0, 0);

          void t_PythonFragmenter::install(PyObject *module)
          {
            installType(&PY_TYPE(PythonFragmenter), module, "PythonFragmenter", 1);
          }

          void t_PythonFragmenter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PythonFragmenter).tp_dict, "class_", make_descriptor(PythonFragmenter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PythonFragmenter).tp_dict, "wrapfn_", make_descriptor(t_PythonFragmenter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PythonFragmenter).tp_dict, "boxfn_", make_descriptor(boxObject));
            jclass cls = env->getClass(PythonFragmenter::initializeClass);
            JNINativeMethod methods[] = {
              { "isNewFragment", "()Z", (void *) t_PythonFragmenter_isNewFragment0 },
              { "pythonDecRef", "()V", (void *) t_PythonFragmenter_pythonDecRef1 },
              { "start", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V", (void *) t_PythonFragmenter_start2 },
            };
            env->registerNatives(cls, methods, 3);
          }

          static PyObject *t_PythonFragmenter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PythonFragmenter::initializeClass, 1)))
              return NULL;
            return t_PythonFragmenter::wrap_Object(PythonFragmenter(((t_PythonFragmenter *) arg)->object.this$));
          }
          static PyObject *t_PythonFragmenter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PythonFragmenter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PythonFragmenter_init_(t_PythonFragmenter *self, PyObject *args, PyObject *kwds)
          {
            PythonFragmenter object((jobject) NULL);

            INT_CALL(object = PythonFragmenter());
            self->object = object;

            Py_INCREF((PyObject *) self);
            self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

            return 0;
          }

          static PyObject *t_PythonFragmenter_finalize(t_PythonFragmenter *self)
          {
            OBJ_CALL(self->object.finalize());
            Py_RETURN_NONE;
          }

          static PyObject *t_PythonFragmenter_pythonExtension(t_PythonFragmenter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.pythonExtension());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.pythonExtension(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
            return NULL;
          }

          static jboolean JNICALL t_PythonFragmenter_isNewFragment0(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonFragmenter::mids$[PythonFragmenter::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jboolean value;
            PyObject *result = PyObject_CallMethod(obj, "isNewFragment", "");
            if (!result)
              throwPythonError();
            else if (parseArg(result, "Z", &value))
            {
              throwTypeError("isNewFragment", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jboolean) 0;
          }

          static void JNICALL t_PythonFragmenter_pythonDecRef1(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonFragmenter::mids$[PythonFragmenter::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              jenv->CallVoidMethod(jobj, PythonFragmenter::mids$[PythonFragmenter::mid_pythonExtension_0ee6df2f], (jlong) 0);
              env->finalizeObject(jenv, obj);
            }
          }

          static void JNICALL t_PythonFragmenter_start2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonFragmenter::mids$[PythonFragmenter::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(::org::apache::lucene::analysis::TokenStream(a1));
            PyObject *result = PyObject_CallMethod(obj, "start", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else
              Py_DECREF(result);
          }

          static PyObject *t_PythonFragmenter_get__self(t_PythonFragmenter *self, void *data)
          {
            jlong ptr;
            OBJ_CALL(ptr = self->object.pythonExtension());
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              Py_INCREF(obj);
              return obj;
            }
            else
              Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/CategoryPath.h"
#include "java/lang/String.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *CategoryPath::class$ = NULL;
          jmethodID *CategoryPath::mids$ = NULL;
          jfieldID *CategoryPath::fids$ = NULL;
          bool CategoryPath::live$ = false;
          CategoryPath *CategoryPath::EMPTY = NULL;

          jclass CategoryPath::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/CategoryPath");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4dd4540c] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;)V");
              mids$[mid_init$_7420ac50] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;C)V");
              mids$[mid_compareTo_07b9a56f] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/facet/taxonomy/CategoryPath;)I");
              mids$[mid_copyFullPath_6d37715f] = env->getMethodID(cls, "copyFullPath", "([CIC)I");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_fullPathLength_54c6a179] = env->getMethodID(cls, "fullPathLength", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_longHashCode_54c6a17a] = env->getMethodID(cls, "longHashCode", "()J");
              mids$[mid_subpath_33144d83] = env->getMethodID(cls, "subpath", "(I)Lorg/apache/lucene/facet/taxonomy/CategoryPath;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_toString_7611a535] = env->getMethodID(cls, "toString", "(C)Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_components] = env->getFieldID(cls, "components", "[Ljava/lang/String;");
              fids$[fid_length] = env->getFieldID(cls, "length", "I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              EMPTY = new CategoryPath(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/facet/taxonomy/CategoryPath;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CategoryPath::CategoryPath(const JArray< ::java::lang::String > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4dd4540c, a0.this$)) {}

          CategoryPath::CategoryPath(const ::java::lang::String & a0, jchar a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7420ac50, a0.this$, a1)) {}

          jint CategoryPath::compareTo(const CategoryPath & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_07b9a56f], a0.this$);
          }

          jint CategoryPath::copyFullPath(const JArray< jchar > & a0, jint a1, jchar a2) const
          {
            return env->callIntMethod(this$, mids$[mid_copyFullPath_6d37715f], a0.this$, a1, a2);
          }

          jboolean CategoryPath::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint CategoryPath::fullPathLength() const
          {
            return env->callIntMethod(this$, mids$[mid_fullPathLength_54c6a179]);
          }

          jint CategoryPath::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jlong CategoryPath::longHashCode() const
          {
            return env->callLongMethod(this$, mids$[mid_longHashCode_54c6a17a]);
          }

          CategoryPath CategoryPath::subpath(jint a0) const
          {
            return CategoryPath(env->callObjectMethod(this$, mids$[mid_subpath_33144d83], a0));
          }

          ::java::lang::String CategoryPath::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          ::java::lang::String CategoryPath::toString(jchar a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_7611a535], a0));
          }

          JArray< ::java::lang::String > CategoryPath::_get_components() const
          {
            return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_components]));
          }

          jint CategoryPath::_get_length() const
          {
            return env->getIntField(this$, fids$[fid_length]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_CategoryPath_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CategoryPath_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CategoryPath_init_(t_CategoryPath *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CategoryPath_compareTo(t_CategoryPath *self, PyObject *arg);
          static PyObject *t_CategoryPath_copyFullPath(t_CategoryPath *self, PyObject *args);
          static PyObject *t_CategoryPath_equals(t_CategoryPath *self, PyObject *args);
          static PyObject *t_CategoryPath_fullPathLength(t_CategoryPath *self);
          static PyObject *t_CategoryPath_hashCode(t_CategoryPath *self, PyObject *args);
          static PyObject *t_CategoryPath_longHashCode(t_CategoryPath *self);
          static PyObject *t_CategoryPath_subpath(t_CategoryPath *self, PyObject *arg);
          static PyObject *t_CategoryPath_toString(t_CategoryPath *self, PyObject *args);
          static PyObject *t_CategoryPath_get__components(t_CategoryPath *self, void *data);
          static PyObject *t_CategoryPath_get__length(t_CategoryPath *self, void *data);

          static PyGetSetDef t_CategoryPath__fields_[] = {
            DECLARE_GET_FIELD(t_CategoryPath, components),
            DECLARE_GET_FIELD(t_CategoryPath, length),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CategoryPath__methods_[] = {
            DECLARE_METHOD(t_CategoryPath, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CategoryPath, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CategoryPath, compareTo, METH_O),
            DECLARE_METHOD(t_CategoryPath, copyFullPath, METH_VARARGS),
            DECLARE_METHOD(t_CategoryPath, equals, METH_VARARGS),
            DECLARE_METHOD(t_CategoryPath, fullPathLength, METH_NOARGS),
            DECLARE_METHOD(t_CategoryPath, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_CategoryPath, longHashCode, METH_NOARGS),
            DECLARE_METHOD(t_CategoryPath, subpath, METH_O),
            DECLARE_METHOD(t_CategoryPath, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CategoryPath, t_CategoryPath, ::java::lang::Object, CategoryPath, t_CategoryPath_init_, 0, 0, t_CategoryPath__fields_, 0, 0);

          void t_CategoryPath::install(PyObject *module)
          {
            installType(&PY_TYPE(CategoryPath), module, "CategoryPath", 0);
          }

          void t_CategoryPath::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CategoryPath).tp_dict, "class_", make_descriptor(CategoryPath::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CategoryPath).tp_dict, "wrapfn_", make_descriptor(t_CategoryPath::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CategoryPath).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CategoryPath::initializeClass);
            PyDict_SetItemString(PY_TYPE(CategoryPath).tp_dict, "EMPTY", make_descriptor(t_CategoryPath::wrap_Object(*CategoryPath::EMPTY)));
          }

          static PyObject *t_CategoryPath_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CategoryPath::initializeClass, 1)))
              return NULL;
            return t_CategoryPath::wrap_Object(CategoryPath(((t_CategoryPath *) arg)->object.this$));
          }
          static PyObject *t_CategoryPath_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CategoryPath::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CategoryPath_init_(t_CategoryPath *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                CategoryPath object((jobject) NULL);

                if (!parseArgs(args, "[s", &a0))
                {
                  INT_CALL(object = CategoryPath(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                jchar a1;
                CategoryPath object((jobject) NULL);

                if (!parseArgs(args, "sC", &a0, &a1))
                {
                  INT_CALL(object = CategoryPath(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CategoryPath_compareTo(t_CategoryPath *self, PyObject *arg)
          {
            CategoryPath a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", CategoryPath::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_CategoryPath_copyFullPath(t_CategoryPath *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jchar a2;
            jint result;

            if (!parseArgs(args, "[CIC", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.copyFullPath(a0, a1, a2));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "copyFullPath", args);
            return NULL;
          }

          static PyObject *t_CategoryPath_equals(t_CategoryPath *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CategoryPath), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_CategoryPath_fullPathLength(t_CategoryPath *self)
          {
            jint result;
            OBJ_CALL(result = self->object.fullPathLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CategoryPath_hashCode(t_CategoryPath *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(CategoryPath), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_CategoryPath_longHashCode(t_CategoryPath *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.longHashCode());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_CategoryPath_subpath(t_CategoryPath *self, PyObject *arg)
          {
            jint a0;
            CategoryPath result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.subpath(a0));
              return t_CategoryPath::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "subpath", arg);
            return NULL;
          }

          static PyObject *t_CategoryPath_toString(t_CategoryPath *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }
              break;
             case 1:
              {
                jchar a0;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "C", &a0))
                {
                  OBJ_CALL(result = self->object.toString(a0));
                  return j2p(result);
                }
              }
            }

            return callSuper(&PY_TYPE(CategoryPath), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_CategoryPath_get__components(t_CategoryPath *self, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_components());
            return JArray<jstring>(value.this$).wrap();
          }

          static PyObject *t_CategoryPath_get__length(t_CategoryPath *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_length());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/LongFieldSource.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/FieldCache$LongParser.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *LongFieldSource::class$ = NULL;
            jmethodID *LongFieldSource::mids$ = NULL;
            bool LongFieldSource::live$ = false;

            jclass LongFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/LongFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_d7533242] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$LongParser;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_externalToLong_5fdc3f54] = env->getMethodID(cls, "externalToLong", "(Ljava/lang/String;)J");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_longToObject_fe727f5c] = env->getMethodID(cls, "longToObject", "(J)Ljava/lang/Object;");
                mids$[mid_longToString_3e02f30e] = env->getMethodID(cls, "longToString", "(J)Ljava/lang/String;");
                mids$[mid_newMutableValueLong_31ee279b] = env->getMethodID(cls, "newMutableValueLong", "()Lorg/apache/lucene/util/mutable/MutableValueLong;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LongFieldSource::LongFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            LongFieldSource::LongFieldSource(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$LongParser & a1) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_d7533242, a0.this$, a1.this$)) {}

            ::java::lang::String LongFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean LongFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jlong LongFieldSource::externalToLong(const ::java::lang::String & a0) const
            {
              return env->callLongMethod(this$, mids$[mid_externalToLong_5fdc3f54], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues LongFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint LongFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::Object LongFieldSource::longToObject(jlong a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_longToObject_fe727f5c], a0));
            }

            ::java::lang::String LongFieldSource::longToString(jlong a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_longToString_3e02f30e], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_LongFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LongFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LongFieldSource_init_(t_LongFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_LongFieldSource_description(t_LongFieldSource *self, PyObject *args);
            static PyObject *t_LongFieldSource_equals(t_LongFieldSource *self, PyObject *args);
            static PyObject *t_LongFieldSource_externalToLong(t_LongFieldSource *self, PyObject *arg);
            static PyObject *t_LongFieldSource_getValues(t_LongFieldSource *self, PyObject *args);
            static PyObject *t_LongFieldSource_hashCode(t_LongFieldSource *self, PyObject *args);
            static PyObject *t_LongFieldSource_longToObject(t_LongFieldSource *self, PyObject *arg);
            static PyObject *t_LongFieldSource_longToString(t_LongFieldSource *self, PyObject *arg);

            static PyMethodDef t_LongFieldSource__methods_[] = {
              DECLARE_METHOD(t_LongFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LongFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LongFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_LongFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_LongFieldSource, externalToLong, METH_O),
              DECLARE_METHOD(t_LongFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_LongFieldSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_LongFieldSource, longToObject, METH_O),
              DECLARE_METHOD(t_LongFieldSource, longToString, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(LongFieldSource, t_LongFieldSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, LongFieldSource, t_LongFieldSource_init_, 0, 0, 0, 0, 0);

            void t_LongFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(LongFieldSource), module, "LongFieldSource", 0);
            }

            void t_LongFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(LongFieldSource).tp_dict, "class_", make_descriptor(LongFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(LongFieldSource).tp_dict, "wrapfn_", make_descriptor(t_LongFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(LongFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_LongFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LongFieldSource::initializeClass, 1)))
                return NULL;
              return t_LongFieldSource::wrap_Object(LongFieldSource(((t_LongFieldSource *) arg)->object.this$));
            }
            static PyObject *t_LongFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LongFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LongFieldSource_init_(t_LongFieldSource *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  LongFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = LongFieldSource(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::search::FieldCache$LongParser a1((jobject) NULL);
                  LongFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "sk", ::org::apache::lucene::search::FieldCache$LongParser::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = LongFieldSource(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_LongFieldSource_description(t_LongFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(LongFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_LongFieldSource_equals(t_LongFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(LongFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_LongFieldSource_externalToLong(t_LongFieldSource *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              jlong result;

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.externalToLong(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              PyErr_SetArgsError((PyObject *) self, "externalToLong", arg);
              return NULL;
            }

            static PyObject *t_LongFieldSource_getValues(t_LongFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(LongFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_LongFieldSource_hashCode(t_LongFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(LongFieldSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_LongFieldSource_longToObject(t_LongFieldSource *self, PyObject *arg)
            {
              jlong a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "J", &a0))
              {
                OBJ_CALL(result = self->object.longToObject(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "longToObject", arg);
              return NULL;
            }

            static PyObject *t_LongFieldSource_longToString(t_LongFieldSource *self, PyObject *arg)
            {
              jlong a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArg(arg, "J", &a0))
              {
                OBJ_CALL(result = self->object.longToString(a0));
                return j2p(result);
              }

              PyErr_SetArgsError((PyObject *) self, "longToString", arg);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/QueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *QueryBuilder::class$ = NULL;
        jmethodID *QueryBuilder::mids$ = NULL;
        bool QueryBuilder::live$ = false;

        jclass QueryBuilder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/QueryBuilder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
            mids$[mid_createBooleanQuery_38d6e77e] = env->getMethodID(cls, "createBooleanQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
            mids$[mid_createBooleanQuery_6523fcfc] = env->getMethodID(cls, "createBooleanQuery", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/search/BooleanClause$Occur;)Lorg/apache/lucene/search/Query;");
            mids$[mid_createMinShouldMatchQuery_45995161] = env->getMethodID(cls, "createMinShouldMatchQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
            mids$[mid_createPhraseQuery_38d6e77e] = env->getMethodID(cls, "createPhraseQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
            mids$[mid_createPhraseQuery_c7c8d9a8] = env->getMethodID(cls, "createPhraseQuery", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
            mids$[mid_getAnalyzer_347f60a9] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
            mids$[mid_getEnablePositionIncrements_54c6a16a] = env->getMethodID(cls, "getEnablePositionIncrements", "()Z");
            mids$[mid_setAnalyzer_31619410] = env->getMethodID(cls, "setAnalyzer", "(Lorg/apache/lucene/analysis/Analyzer;)V");
            mids$[mid_setEnablePositionIncrements_bb0c767f] = env->getMethodID(cls, "setEnablePositionIncrements", "(Z)V");
            mids$[mid_newTermQuery_c8bbbdc7] = env->getMethodID(cls, "newTermQuery", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/Query;");
            mids$[mid_newBooleanQuery_71c47e3e] = env->getMethodID(cls, "newBooleanQuery", "(Z)Lorg/apache/lucene/search/BooleanQuery;");
            mids$[mid_createFieldQuery_da240c4d] = env->getMethodID(cls, "createFieldQuery", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/search/BooleanClause$Occur;Ljava/lang/String;Ljava/lang/String;ZI)Lorg/apache/lucene/search/Query;");
            mids$[mid_newPhraseQuery_c05a65af] = env->getMethodID(cls, "newPhraseQuery", "()Lorg/apache/lucene/search/PhraseQuery;");
            mids$[mid_newMultiPhraseQuery_4a09b2bb] = env->getMethodID(cls, "newMultiPhraseQuery", "()Lorg/apache/lucene/search/MultiPhraseQuery;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        QueryBuilder::QueryBuilder(const ::org::apache::lucene::analysis::Analyzer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}

        ::org::apache::lucene::search::Query QueryBuilder::createBooleanQuery(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_createBooleanQuery_38d6e77e], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::Query QueryBuilder::createBooleanQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::BooleanClause$Occur & a2) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_createBooleanQuery_6523fcfc], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query QueryBuilder::createMinShouldMatchQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_createMinShouldMatchQuery_45995161], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::Query QueryBuilder::createPhraseQuery(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_createPhraseQuery_38d6e77e], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::Query QueryBuilder::createPhraseQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jint a2) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_createPhraseQuery_c7c8d9a8], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::analysis::Analyzer QueryBuilder::getAnalyzer() const
        {
          return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_347f60a9]));
        }

        jboolean QueryBuilder::getEnablePositionIncrements() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getEnablePositionIncrements_54c6a16a]);
        }

        void QueryBuilder::setAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setAnalyzer_31619410], a0.this$);
        }

        void QueryBuilder::setEnablePositionIncrements(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setEnablePositionIncrements_bb0c767f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_QueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_QueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_QueryBuilder_init_(t_QueryBuilder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_QueryBuilder_createBooleanQuery(t_QueryBuilder *self, PyObject *args);
        static PyObject *t_QueryBuilder_createMinShouldMatchQuery(t_QueryBuilder *self, PyObject *args);
        static PyObject *t_QueryBuilder_createPhraseQuery(t_QueryBuilder *self, PyObject *args);
        static PyObject *t_QueryBuilder_getAnalyzer(t_QueryBuilder *self);
        static PyObject *t_QueryBuilder_getEnablePositionIncrements(t_QueryBuilder *self);
        static PyObject *t_QueryBuilder_setAnalyzer(t_QueryBuilder *self, PyObject *arg);
        static PyObject *t_QueryBuilder_setEnablePositionIncrements(t_QueryBuilder *self, PyObject *arg);
        static PyObject *t_QueryBuilder_get__analyzer(t_QueryBuilder *self, void *data);
        static int t_QueryBuilder_set__analyzer(t_QueryBuilder *self, PyObject *arg, void *data);
        static PyObject *t_QueryBuilder_get__enablePositionIncrements(t_QueryBuilder *self, void *data);
        static int t_QueryBuilder_set__enablePositionIncrements(t_QueryBuilder *self, PyObject *arg, void *data);
        static PyGetSetDef t_QueryBuilder__fields_[] = {
          DECLARE_GETSET_FIELD(t_QueryBuilder, analyzer),
          DECLARE_GETSET_FIELD(t_QueryBuilder, enablePositionIncrements),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_QueryBuilder__methods_[] = {
          DECLARE_METHOD(t_QueryBuilder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryBuilder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryBuilder, createBooleanQuery, METH_VARARGS),
          DECLARE_METHOD(t_QueryBuilder, createMinShouldMatchQuery, METH_VARARGS),
          DECLARE_METHOD(t_QueryBuilder, createPhraseQuery, METH_VARARGS),
          DECLARE_METHOD(t_QueryBuilder, getAnalyzer, METH_NOARGS),
          DECLARE_METHOD(t_QueryBuilder, getEnablePositionIncrements, METH_NOARGS),
          DECLARE_METHOD(t_QueryBuilder, setAnalyzer, METH_O),
          DECLARE_METHOD(t_QueryBuilder, setEnablePositionIncrements, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(QueryBuilder, t_QueryBuilder, ::java::lang::Object, QueryBuilder, t_QueryBuilder_init_, 0, 0, t_QueryBuilder__fields_, 0, 0);

        void t_QueryBuilder::install(PyObject *module)
        {
          installType(&PY_TYPE(QueryBuilder), module, "QueryBuilder", 0);
        }

        void t_QueryBuilder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "class_", make_descriptor(QueryBuilder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_QueryBuilder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_QueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, QueryBuilder::initializeClass, 1)))
            return NULL;
          return t_QueryBuilder::wrap_Object(QueryBuilder(((t_QueryBuilder *) arg)->object.this$));
        }
        static PyObject *t_QueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, QueryBuilder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_QueryBuilder_init_(t_QueryBuilder *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          QueryBuilder object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
          {
            INT_CALL(object = QueryBuilder(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_QueryBuilder_createBooleanQuery(t_QueryBuilder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(result = self->object.createBooleanQuery(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::BooleanClause$Occur a2((jobject) NULL);
              PyTypeObject **p2;
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "ssK", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_))
              {
                OBJ_CALL(result = self->object.createBooleanQuery(a0, a1, a2));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "createBooleanQuery", args);
          return NULL;
        }

        static PyObject *t_QueryBuilder_createMinShouldMatchQuery(t_QueryBuilder *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jfloat a2;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "ssF", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.createMinShouldMatchQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "createMinShouldMatchQuery", args);
          return NULL;
        }

        static PyObject *t_QueryBuilder_createPhraseQuery(t_QueryBuilder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(result = self->object.createPhraseQuery(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "ssI", &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.createPhraseQuery(a0, a1, a2));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "createPhraseQuery", args);
          return NULL;
        }

        static PyObject *t_QueryBuilder_getAnalyzer(t_QueryBuilder *self)
        {
          ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
          OBJ_CALL(result = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
        }

        static PyObject *t_QueryBuilder_getEnablePositionIncrements(t_QueryBuilder *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getEnablePositionIncrements());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_QueryBuilder_setAnalyzer(t_QueryBuilder *self, PyObject *arg)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setAnalyzer(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setAnalyzer", arg);
          return NULL;
        }

        static PyObject *t_QueryBuilder_setEnablePositionIncrements(t_QueryBuilder *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setEnablePositionIncrements(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setEnablePositionIncrements", arg);
          return NULL;
        }

        static PyObject *t_QueryBuilder_get__analyzer(t_QueryBuilder *self, void *data)
        {
          ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
          OBJ_CALL(value = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
        }
        static int t_QueryBuilder_set__analyzer(t_QueryBuilder *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &value))
            {
              INT_CALL(self->object.setAnalyzer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "analyzer", arg);
          return -1;
        }

        static PyObject *t_QueryBuilder_get__enablePositionIncrements(t_QueryBuilder *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getEnablePositionIncrements());
          Py_RETURN_BOOL(value);
        }
        static int t_QueryBuilder_set__enablePositionIncrements(t_QueryBuilder *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setEnablePositionIncrements(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "enablePositionIncrements", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/search/SearcherFactory.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *SearcherTaxonomyManager::class$ = NULL;
          jmethodID *SearcherTaxonomyManager::mids$ = NULL;
          bool SearcherTaxonomyManager::live$ = false;

          jclass SearcherTaxonomyManager::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c5068542] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/search/SearcherFactory;)V");
              mids$[mid_init$_4154e337] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexWriter;ZLorg/apache/lucene/search/SearcherFactory;Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter;)V");
              mids$[mid_decRef_db563eaa] = env->getMethodID(cls, "decRef", "(Lorg/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy;)V");
              mids$[mid_getRefCount_db563eb5] = env->getMethodID(cls, "getRefCount", "(Lorg/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy;)I");
              mids$[mid_tryIncRef_db563ea6] = env->getMethodID(cls, "tryIncRef", "(Lorg/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy;)Z");
              mids$[mid_refreshIfNeeded_9a7202bf] = env->getMethodID(cls, "refreshIfNeeded", "(Lorg/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy;)Lorg/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SearcherTaxonomyManager::SearcherTaxonomyManager(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::search::SearcherFactory & a2) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_c5068542, a0.this$, a1.this$, a2.this$)) {}

          SearcherTaxonomyManager::SearcherTaxonomyManager(const ::org::apache::lucene::index::IndexWriter & a0, jboolean a1, const ::org::apache::lucene::search::SearcherFactory & a2, const ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter & a3) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_4154e337, a0.this$, a1, a2.this$, a3.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_SearcherTaxonomyManager_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SearcherTaxonomyManager_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SearcherTaxonomyManager_of_(t_SearcherTaxonomyManager *self, PyObject *args);
          static int t_SearcherTaxonomyManager_init_(t_SearcherTaxonomyManager *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SearcherTaxonomyManager_get__parameters_(t_SearcherTaxonomyManager *self, void *data);
          static PyGetSetDef t_SearcherTaxonomyManager__fields_[] = {
            DECLARE_GET_FIELD(t_SearcherTaxonomyManager, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SearcherTaxonomyManager__methods_[] = {
            DECLARE_METHOD(t_SearcherTaxonomyManager, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SearcherTaxonomyManager, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SearcherTaxonomyManager, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SearcherTaxonomyManager, t_SearcherTaxonomyManager, ::org::apache::lucene::search::ReferenceManager, SearcherTaxonomyManager, t_SearcherTaxonomyManager_init_, 0, 0, t_SearcherTaxonomyManager__fields_, 0, 0);
          PyObject *t_SearcherTaxonomyManager::wrap_Object(const SearcherTaxonomyManager& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SearcherTaxonomyManager::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SearcherTaxonomyManager *self = (t_SearcherTaxonomyManager *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SearcherTaxonomyManager::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SearcherTaxonomyManager::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SearcherTaxonomyManager *self = (t_SearcherTaxonomyManager *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SearcherTaxonomyManager::install(PyObject *module)
          {
            installType(&PY_TYPE(SearcherTaxonomyManager), module, "SearcherTaxonomyManager", 0);
            PyDict_SetItemString(PY_TYPE(SearcherTaxonomyManager).tp_dict, "SearcherAndTaxonomy", make_descriptor(&PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy)));
          }

          void t_SearcherTaxonomyManager::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SearcherTaxonomyManager).tp_dict, "class_", make_descriptor(SearcherTaxonomyManager::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SearcherTaxonomyManager).tp_dict, "wrapfn_", make_descriptor(t_SearcherTaxonomyManager::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SearcherTaxonomyManager).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SearcherTaxonomyManager_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SearcherTaxonomyManager::initializeClass, 1)))
              return NULL;
            return t_SearcherTaxonomyManager::wrap_Object(SearcherTaxonomyManager(((t_SearcherTaxonomyManager *) arg)->object.this$));
          }
          static PyObject *t_SearcherTaxonomyManager_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SearcherTaxonomyManager::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SearcherTaxonomyManager_of_(t_SearcherTaxonomyManager *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SearcherTaxonomyManager_init_(t_SearcherTaxonomyManager *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::store::Directory a0((jobject) NULL);
                ::org::apache::lucene::store::Directory a1((jobject) NULL);
                ::org::apache::lucene::search::SearcherFactory a2((jobject) NULL);
                SearcherTaxonomyManager object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::search::SearcherFactory::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SearcherTaxonomyManager(a0, a1, a2));
                  self->object = object;
                  self->parameters[0] = &::org::apache::lucene::facet::taxonomy::PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy);
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
                jboolean a1;
                ::org::apache::lucene::search::SearcherFactory a2((jobject) NULL);
                ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter a3((jobject) NULL);
                SearcherTaxonomyManager object((jobject) NULL);

                if (!parseArgs(args, "kZkk", ::org::apache::lucene::index::IndexWriter::initializeClass, ::org::apache::lucene::search::SearcherFactory::initializeClass, ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = SearcherTaxonomyManager(a0, a1, a2, a3));
                  self->object = object;
                  self->parameters[0] = &::org::apache::lucene::facet::taxonomy::PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy);
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_SearcherTaxonomyManager_get__parameters_(t_SearcherTaxonomyManager *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40DocValuesFormat.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40DocValuesFormat::class$ = NULL;
          jmethodID *Lucene40DocValuesFormat::mids$ = NULL;
          bool Lucene40DocValuesFormat::live$ = false;
          jint Lucene40DocValuesFormat::MAX_BINARY_FIELD_LENGTH = (jint) 0;

          jclass Lucene40DocValuesFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40DocValuesFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsConsumer_025deb44] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_fieldsProducer_9b0d4e4a] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MAX_BINARY_FIELD_LENGTH = env->getStaticIntField(cls, "MAX_BINARY_FIELD_LENGTH");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40DocValuesFormat::Lucene40DocValuesFormat() : ::org::apache::lucene::codecs::DocValuesFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer Lucene40DocValuesFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_025deb44], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer Lucene40DocValuesFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_9b0d4e4a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40DocValuesFormat_init_(t_Lucene40DocValuesFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40DocValuesFormat_fieldsConsumer(t_Lucene40DocValuesFormat *self, PyObject *args);
          static PyObject *t_Lucene40DocValuesFormat_fieldsProducer(t_Lucene40DocValuesFormat *self, PyObject *args);

          static PyMethodDef t_Lucene40DocValuesFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40DocValuesFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40DocValuesFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40DocValuesFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40DocValuesFormat, fieldsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40DocValuesFormat, t_Lucene40DocValuesFormat, ::org::apache::lucene::codecs::DocValuesFormat, Lucene40DocValuesFormat, t_Lucene40DocValuesFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene40DocValuesFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40DocValuesFormat), module, "Lucene40DocValuesFormat", 0);
          }

          void t_Lucene40DocValuesFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40DocValuesFormat).tp_dict, "class_", make_descriptor(Lucene40DocValuesFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40DocValuesFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40DocValuesFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40DocValuesFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene40DocValuesFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene40DocValuesFormat).tp_dict, "MAX_BINARY_FIELD_LENGTH", make_descriptor(Lucene40DocValuesFormat::MAX_BINARY_FIELD_LENGTH));
          }

          static PyObject *t_Lucene40DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40DocValuesFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40DocValuesFormat::wrap_Object(Lucene40DocValuesFormat(((t_Lucene40DocValuesFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40DocValuesFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40DocValuesFormat_init_(t_Lucene40DocValuesFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40DocValuesFormat object((jobject) NULL);

            INT_CALL(object = Lucene40DocValuesFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40DocValuesFormat_fieldsConsumer(t_Lucene40DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40DocValuesFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_Lucene40DocValuesFormat_fieldsProducer(t_Lucene40DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40DocValuesFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianStemmer::class$ = NULL;
          jmethodID *GalicianStemmer::mids$ = NULL;
          bool GalicianStemmer::live$ = false;

          jclass GalicianStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianStemmer::GalicianStemmer() : ::org::apache::lucene::analysis::pt::RSLPStemmerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint GalicianStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianStemmer_init_(t_GalicianStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianStemmer_stem(t_GalicianStemmer *self, PyObject *args);

          static PyMethodDef t_GalicianStemmer__methods_[] = {
            DECLARE_METHOD(t_GalicianStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GalicianStemmer, t_GalicianStemmer, ::org::apache::lucene::analysis::pt::RSLPStemmerBase, GalicianStemmer, t_GalicianStemmer_init_, 0, 0, 0, 0, 0);

          void t_GalicianStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianStemmer), module, "GalicianStemmer", 0);
          }

          void t_GalicianStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GalicianStemmer).tp_dict, "class_", make_descriptor(GalicianStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GalicianStemmer).tp_dict, "wrapfn_", make_descriptor(t_GalicianStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GalicianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GalicianStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianStemmer::initializeClass, 1)))
              return NULL;
            return t_GalicianStemmer::wrap_Object(GalicianStemmer(((t_GalicianStemmer *) arg)->object.this$));
          }
          static PyObject *t_GalicianStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianStemmer_init_(t_GalicianStemmer *self, PyObject *args, PyObject *kwds)
          {
            GalicianStemmer object((jobject) NULL);

            INT_CALL(object = GalicianStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_GalicianStemmer_stem(t_GalicianStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MultiBoolFunction.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/docvalues/BoolDocValues.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/util/List.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MultiBoolFunction::class$ = NULL;
            jmethodID *MultiBoolFunction::mids$ = NULL;
            bool MultiBoolFunction::live$ = false;

            jclass MultiBoolFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MultiBoolFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_ea0ab6f1] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/docvalues/BoolDocValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_d2e34ba5] = env->getMethodID(cls, "func", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MultiBoolFunction::MultiBoolFunction(const ::java::util::List & a0) : ::org::apache::lucene::queries::function::valuesource::BoolFunction(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

            void MultiBoolFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String MultiBoolFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean MultiBoolFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::docvalues::BoolDocValues MultiBoolFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::docvalues::BoolDocValues(env->callObjectMethod(this$, mids$[mid_getValues_ea0ab6f1], a0.this$, a1.this$));
            }

            jint MultiBoolFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MultiBoolFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MultiBoolFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MultiBoolFunction_init_(t_MultiBoolFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MultiBoolFunction_createWeight(t_MultiBoolFunction *self, PyObject *args);
            static PyObject *t_MultiBoolFunction_description(t_MultiBoolFunction *self, PyObject *args);
            static PyObject *t_MultiBoolFunction_equals(t_MultiBoolFunction *self, PyObject *args);
            static PyObject *t_MultiBoolFunction_getValues(t_MultiBoolFunction *self, PyObject *args);
            static PyObject *t_MultiBoolFunction_hashCode(t_MultiBoolFunction *self, PyObject *args);

            static PyMethodDef t_MultiBoolFunction__methods_[] = {
              DECLARE_METHOD(t_MultiBoolFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiBoolFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiBoolFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_MultiBoolFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_MultiBoolFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_MultiBoolFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_MultiBoolFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MultiBoolFunction, t_MultiBoolFunction, ::org::apache::lucene::queries::function::valuesource::BoolFunction, MultiBoolFunction, t_MultiBoolFunction_init_, 0, 0, 0, 0, 0);

            void t_MultiBoolFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(MultiBoolFunction), module, "MultiBoolFunction", 0);
            }

            void t_MultiBoolFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MultiBoolFunction).tp_dict, "class_", make_descriptor(MultiBoolFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MultiBoolFunction).tp_dict, "wrapfn_", make_descriptor(t_MultiBoolFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MultiBoolFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MultiBoolFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MultiBoolFunction::initializeClass, 1)))
                return NULL;
              return t_MultiBoolFunction::wrap_Object(MultiBoolFunction(((t_MultiBoolFunction *) arg)->object.this$));
            }
            static PyObject *t_MultiBoolFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MultiBoolFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MultiBoolFunction_init_(t_MultiBoolFunction *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              MultiBoolFunction object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                INT_CALL(object = MultiBoolFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_MultiBoolFunction_createWeight(t_MultiBoolFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(MultiBoolFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_MultiBoolFunction_description(t_MultiBoolFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(MultiBoolFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_MultiBoolFunction_equals(t_MultiBoolFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(MultiBoolFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_MultiBoolFunction_getValues(t_MultiBoolFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::docvalues::BoolDocValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::docvalues::t_BoolDocValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(MultiBoolFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_MultiBoolFunction_hashCode(t_MultiBoolFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(MultiBoolFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/EscapeQuerySyntaxImpl.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/ParseException.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "java/util/Locale.h"
#include "org/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *EscapeQuerySyntaxImpl::class$ = NULL;
              jmethodID *EscapeQuerySyntaxImpl::mids$ = NULL;
              bool EscapeQuerySyntaxImpl::live$ = false;

              jclass EscapeQuerySyntaxImpl::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/EscapeQuerySyntaxImpl");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_discardEscapeChar_31714ed7] = env->getStaticMethodID(cls, "discardEscapeChar", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence;");
                  mids$[mid_escape_dd58ce7f] = env->getMethodID(cls, "escape", "(Ljava/lang/CharSequence;Ljava/util/Locale;Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type;)Ljava/lang/CharSequence;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              EscapeQuerySyntaxImpl::EscapeQuerySyntaxImpl() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::util::UnescapedCharSequence EscapeQuerySyntaxImpl::discardEscapeChar(const ::java::lang::CharSequence & a0)
              {
                jclass cls = env->getClass(initializeClass);
                return ::org::apache::lucene::queryparser::flexible::core::util::UnescapedCharSequence(env->callStaticObjectMethod(cls, mids$[mid_discardEscapeChar_31714ed7], a0.this$));
              }

              ::java::lang::CharSequence EscapeQuerySyntaxImpl::escape(const ::java::lang::CharSequence & a0, const ::java::util::Locale & a1, const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type & a2) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_escape_dd58ce7f], a0.this$, a1.this$, a2.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_EscapeQuerySyntaxImpl_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_EscapeQuerySyntaxImpl_instance_(PyTypeObject *type, PyObject *arg);
              static int t_EscapeQuerySyntaxImpl_init_(t_EscapeQuerySyntaxImpl *self, PyObject *args, PyObject *kwds);
              static PyObject *t_EscapeQuerySyntaxImpl_discardEscapeChar(PyTypeObject *type, PyObject *arg);
              static PyObject *t_EscapeQuerySyntaxImpl_escape(t_EscapeQuerySyntaxImpl *self, PyObject *args);

              static PyMethodDef t_EscapeQuerySyntaxImpl__methods_[] = {
                DECLARE_METHOD(t_EscapeQuerySyntaxImpl, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntaxImpl, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntaxImpl, discardEscapeChar, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntaxImpl, escape, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(EscapeQuerySyntaxImpl, t_EscapeQuerySyntaxImpl, ::java::lang::Object, EscapeQuerySyntaxImpl, t_EscapeQuerySyntaxImpl_init_, 0, 0, 0, 0, 0);

              void t_EscapeQuerySyntaxImpl::install(PyObject *module)
              {
                installType(&PY_TYPE(EscapeQuerySyntaxImpl), module, "EscapeQuerySyntaxImpl", 0);
              }

              void t_EscapeQuerySyntaxImpl::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntaxImpl).tp_dict, "class_", make_descriptor(EscapeQuerySyntaxImpl::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntaxImpl).tp_dict, "wrapfn_", make_descriptor(t_EscapeQuerySyntaxImpl::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntaxImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_EscapeQuerySyntaxImpl_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, EscapeQuerySyntaxImpl::initializeClass, 1)))
                  return NULL;
                return t_EscapeQuerySyntaxImpl::wrap_Object(EscapeQuerySyntaxImpl(((t_EscapeQuerySyntaxImpl *) arg)->object.this$));
              }
              static PyObject *t_EscapeQuerySyntaxImpl_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, EscapeQuerySyntaxImpl::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_EscapeQuerySyntaxImpl_init_(t_EscapeQuerySyntaxImpl *self, PyObject *args, PyObject *kwds)
              {
                EscapeQuerySyntaxImpl object((jobject) NULL);

                INT_CALL(object = EscapeQuerySyntaxImpl());
                self->object = object;

                return 0;
              }

              static PyObject *t_EscapeQuerySyntaxImpl_discardEscapeChar(PyTypeObject *type, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::util::UnescapedCharSequence result((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::parser::EscapeQuerySyntaxImpl::discardEscapeChar(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::util::t_UnescapedCharSequence::wrap_Object(result);
                }

                PyErr_SetArgsError(type, "discardEscapeChar", arg);
                return NULL;
              }

              static PyObject *t_EscapeQuerySyntaxImpl_escape(t_EscapeQuerySyntaxImpl *self, PyObject *args)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::util::Locale a1((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type a2((jobject) NULL);
                PyTypeObject **p2;
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "OkK", &::java::lang::PY_TYPE(CharSequence), ::java::util::Locale::initializeClass, ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::queryparser::flexible::core::parser::t_EscapeQuerySyntax$Type::parameters_))
                {
                  OBJ_CALL(result = self->object.escape(a0, a1, a2));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "escape", args);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *Iterator::class$ = NULL;
    jmethodID *Iterator::mids$ = NULL;
    bool Iterator::live$ = false;

    jclass Iterator::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/Iterator");

        mids$ = new jmethodID[max_mid];
        mids$[mid_hasNext_54c6a16a] = env->getMethodID(cls, "hasNext", "()Z");
        mids$[mid_next_846352c3] = env->getMethodID(cls, "next", "()Ljava/lang/Object;");
        mids$[mid_remove_54c6a166] = env->getMethodID(cls, "remove", "()V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jboolean Iterator::hasNext() const
    {
      return env->callBooleanMethod(this$, mids$[mid_hasNext_54c6a16a]);
    }

    ::java::lang::Object Iterator::next() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_next_846352c3]));
    }

    void Iterator::remove() const
    {
      env->callVoidMethod(this$, mids$[mid_remove_54c6a166]);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_Iterator_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Iterator_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Iterator_of_(t_Iterator *self, PyObject *args);
    static PyObject *t_Iterator_hasNext(t_Iterator *self);
    static PyObject *t_Iterator_next(t_Iterator *self);
    static PyObject *t_Iterator_remove(t_Iterator *self);
    static PyObject *t_Iterator_get__parameters_(t_Iterator *self, void *data);
    static PyGetSetDef t_Iterator__fields_[] = {
      DECLARE_GET_FIELD(t_Iterator, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Iterator__methods_[] = {
      DECLARE_METHOD(t_Iterator, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Iterator, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Iterator, of_, METH_VARARGS),
      DECLARE_METHOD(t_Iterator, hasNext, METH_NOARGS),
      DECLARE_METHOD(t_Iterator, next, METH_NOARGS),
      DECLARE_METHOD(t_Iterator, remove, METH_NOARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Iterator, t_Iterator, ::java::lang::Object, Iterator, abstract_init, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Iterator *)) get_generic_iterator_next< ::java::util::t_Iterator,::java::lang::t_Object >), t_Iterator__fields_, 0, 0);
    PyObject *t_Iterator::wrap_Object(const Iterator& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Iterator::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Iterator *self = (t_Iterator *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_Iterator::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Iterator::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Iterator *self = (t_Iterator *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_Iterator::install(PyObject *module)
    {
      installType(&PY_TYPE(Iterator), module, "Iterator", 0);
    }

    void t_Iterator::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Iterator).tp_dict, "class_", make_descriptor(Iterator::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Iterator).tp_dict, "wrapfn_", make_descriptor(t_Iterator::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Iterator).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Iterator_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Iterator::initializeClass, 1)))
        return NULL;
      return t_Iterator::wrap_Object(Iterator(((t_Iterator *) arg)->object.this$));
    }
    static PyObject *t_Iterator_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Iterator::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Iterator_of_(t_Iterator *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_Iterator_hasNext(t_Iterator *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.hasNext());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Iterator_next(t_Iterator *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.next());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_Iterator_remove(t_Iterator *self)
    {
      OBJ_CALL(self->object.remove());
      Py_RETURN_NONE;
    }
    static PyObject *t_Iterator_get__parameters_(t_Iterator *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/el/GreekLowerCaseFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {

          ::java::lang::Class *GreekLowerCaseFilter::class$ = NULL;
          jmethodID *GreekLowerCaseFilter::mids$ = NULL;
          bool GreekLowerCaseFilter::live$ = false;

          jclass GreekLowerCaseFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/el/GreekLowerCaseFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GreekLowerCaseFilter::GreekLowerCaseFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          GreekLowerCaseFilter::GreekLowerCaseFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          jboolean GreekLowerCaseFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {
          static PyObject *t_GreekLowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GreekLowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GreekLowerCaseFilter_init_(t_GreekLowerCaseFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GreekLowerCaseFilter_incrementToken(t_GreekLowerCaseFilter *self, PyObject *args);

          static PyMethodDef t_GreekLowerCaseFilter__methods_[] = {
            DECLARE_METHOD(t_GreekLowerCaseFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekLowerCaseFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekLowerCaseFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GreekLowerCaseFilter, t_GreekLowerCaseFilter, ::org::apache::lucene::analysis::TokenFilter, GreekLowerCaseFilter, t_GreekLowerCaseFilter_init_, 0, 0, 0, 0, 0);

          void t_GreekLowerCaseFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GreekLowerCaseFilter), module, "GreekLowerCaseFilter", 0);
          }

          void t_GreekLowerCaseFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GreekLowerCaseFilter).tp_dict, "class_", make_descriptor(GreekLowerCaseFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GreekLowerCaseFilter).tp_dict, "wrapfn_", make_descriptor(t_GreekLowerCaseFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GreekLowerCaseFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GreekLowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GreekLowerCaseFilter::initializeClass, 1)))
              return NULL;
            return t_GreekLowerCaseFilter::wrap_Object(GreekLowerCaseFilter(((t_GreekLowerCaseFilter *) arg)->object.this$));
          }
          static PyObject *t_GreekLowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GreekLowerCaseFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GreekLowerCaseFilter_init_(t_GreekLowerCaseFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                GreekLowerCaseFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = GreekLowerCaseFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                GreekLowerCaseFilter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = GreekLowerCaseFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GreekLowerCaseFilter_incrementToken(t_GreekLowerCaseFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(GreekLowerCaseFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/UAX29URLEmailTokenizer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *UAX29URLEmailTokenizer::class$ = NULL;
          jmethodID *UAX29URLEmailTokenizer::mids$ = NULL;
          bool UAX29URLEmailTokenizer::live$ = false;
          jint UAX29URLEmailTokenizer::ALPHANUM = (jint) 0;
          jint UAX29URLEmailTokenizer::EMAIL = (jint) 0;
          jint UAX29URLEmailTokenizer::HANGUL = (jint) 0;
          jint UAX29URLEmailTokenizer::HIRAGANA = (jint) 0;
          jint UAX29URLEmailTokenizer::IDEOGRAPHIC = (jint) 0;
          jint UAX29URLEmailTokenizer::KATAKANA = (jint) 0;
          jint UAX29URLEmailTokenizer::NUM = (jint) 0;
          jint UAX29URLEmailTokenizer::SOUTHEAST_ASIAN = (jint) 0;
          JArray< ::java::lang::String > *UAX29URLEmailTokenizer::TOKEN_TYPES = NULL;
          jint UAX29URLEmailTokenizer::URL = (jint) 0;

          jclass UAX29URLEmailTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/UAX29URLEmailTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_5877b8f0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_getMaxTokenLength_54c6a179] = env->getMethodID(cls, "getMaxTokenLength", "()I");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setMaxTokenLength_39c7bd3c] = env->getMethodID(cls, "setMaxTokenLength", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ALPHANUM = env->getStaticIntField(cls, "ALPHANUM");
              EMAIL = env->getStaticIntField(cls, "EMAIL");
              HANGUL = env->getStaticIntField(cls, "HANGUL");
              HIRAGANA = env->getStaticIntField(cls, "HIRAGANA");
              IDEOGRAPHIC = env->getStaticIntField(cls, "IDEOGRAPHIC");
              KATAKANA = env->getStaticIntField(cls, "KATAKANA");
              NUM = env->getStaticIntField(cls, "NUM");
              SOUTHEAST_ASIAN = env->getStaticIntField(cls, "SOUTHEAST_ASIAN");
              TOKEN_TYPES = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "TOKEN_TYPES", "[Ljava/lang/String;"));
              URL = env->getStaticIntField(cls, "URL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UAX29URLEmailTokenizer::UAX29URLEmailTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          UAX29URLEmailTokenizer::UAX29URLEmailTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_5877b8f0, a0.this$, a1.this$)) {}

          UAX29URLEmailTokenizer::UAX29URLEmailTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          UAX29URLEmailTokenizer::UAX29URLEmailTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}

          void UAX29URLEmailTokenizer::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void UAX29URLEmailTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jint UAX29URLEmailTokenizer::getMaxTokenLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxTokenLength_54c6a179]);
          }

          jboolean UAX29URLEmailTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void UAX29URLEmailTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          void UAX29URLEmailTokenizer::setMaxTokenLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxTokenLength_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_UAX29URLEmailTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UAX29URLEmailTokenizer_init_(t_UAX29URLEmailTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UAX29URLEmailTokenizer_close(t_UAX29URLEmailTokenizer *self, PyObject *args);
          static PyObject *t_UAX29URLEmailTokenizer_end(t_UAX29URLEmailTokenizer *self, PyObject *args);
          static PyObject *t_UAX29URLEmailTokenizer_getMaxTokenLength(t_UAX29URLEmailTokenizer *self);
          static PyObject *t_UAX29URLEmailTokenizer_incrementToken(t_UAX29URLEmailTokenizer *self, PyObject *args);
          static PyObject *t_UAX29URLEmailTokenizer_reset(t_UAX29URLEmailTokenizer *self, PyObject *args);
          static PyObject *t_UAX29URLEmailTokenizer_setMaxTokenLength(t_UAX29URLEmailTokenizer *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizer_get__maxTokenLength(t_UAX29URLEmailTokenizer *self, void *data);
          static int t_UAX29URLEmailTokenizer_set__maxTokenLength(t_UAX29URLEmailTokenizer *self, PyObject *arg, void *data);
          static PyGetSetDef t_UAX29URLEmailTokenizer__fields_[] = {
            DECLARE_GETSET_FIELD(t_UAX29URLEmailTokenizer, maxTokenLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_UAX29URLEmailTokenizer__methods_[] = {
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, close, METH_VARARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, getMaxTokenLength, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, reset, METH_VARARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, setMaxTokenLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(UAX29URLEmailTokenizer, t_UAX29URLEmailTokenizer, ::org::apache::lucene::analysis::Tokenizer, UAX29URLEmailTokenizer, t_UAX29URLEmailTokenizer_init_, 0, 0, t_UAX29URLEmailTokenizer__fields_, 0, 0);

          void t_UAX29URLEmailTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(UAX29URLEmailTokenizer), module, "UAX29URLEmailTokenizer", 0);
          }

          void t_UAX29URLEmailTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "class_", make_descriptor(UAX29URLEmailTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "wrapfn_", make_descriptor(t_UAX29URLEmailTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(UAX29URLEmailTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "ALPHANUM", make_descriptor(UAX29URLEmailTokenizer::ALPHANUM));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "EMAIL", make_descriptor(UAX29URLEmailTokenizer::EMAIL));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "HANGUL", make_descriptor(UAX29URLEmailTokenizer::HANGUL));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "HIRAGANA", make_descriptor(UAX29URLEmailTokenizer::HIRAGANA));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "IDEOGRAPHIC", make_descriptor(UAX29URLEmailTokenizer::IDEOGRAPHIC));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "KATAKANA", make_descriptor(UAX29URLEmailTokenizer::KATAKANA));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "NUM", make_descriptor(UAX29URLEmailTokenizer::NUM));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "SOUTHEAST_ASIAN", make_descriptor(UAX29URLEmailTokenizer::SOUTHEAST_ASIAN));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "TOKEN_TYPES", make_descriptor(JArray<jstring>(UAX29URLEmailTokenizer::TOKEN_TYPES->this$).wrap()));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "URL", make_descriptor(UAX29URLEmailTokenizer::URL));
          }

          static PyObject *t_UAX29URLEmailTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UAX29URLEmailTokenizer::initializeClass, 1)))
              return NULL;
            return t_UAX29URLEmailTokenizer::wrap_Object(UAX29URLEmailTokenizer(((t_UAX29URLEmailTokenizer *) arg)->object.this$));
          }
          static PyObject *t_UAX29URLEmailTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UAX29URLEmailTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UAX29URLEmailTokenizer_init_(t_UAX29URLEmailTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                UAX29URLEmailTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = UAX29URLEmailTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                UAX29URLEmailTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = UAX29URLEmailTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                UAX29URLEmailTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = UAX29URLEmailTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                UAX29URLEmailTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = UAX29URLEmailTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UAX29URLEmailTokenizer_close(t_UAX29URLEmailTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(UAX29URLEmailTokenizer), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_UAX29URLEmailTokenizer_end(t_UAX29URLEmailTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(UAX29URLEmailTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_UAX29URLEmailTokenizer_getMaxTokenLength(t_UAX29URLEmailTokenizer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_UAX29URLEmailTokenizer_incrementToken(t_UAX29URLEmailTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(UAX29URLEmailTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_UAX29URLEmailTokenizer_reset(t_UAX29URLEmailTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(UAX29URLEmailTokenizer), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_UAX29URLEmailTokenizer_setMaxTokenLength(t_UAX29URLEmailTokenizer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxTokenLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxTokenLength", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailTokenizer_get__maxTokenLength(t_UAX29URLEmailTokenizer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) value);
          }
          static int t_UAX29URLEmailTokenizer_set__maxTokenLength(t_UAX29URLEmailTokenizer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxTokenLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxTokenLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternTokenizer.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/util/regex/Pattern.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternTokenizer::class$ = NULL;
          jmethodID *PatternTokenizer::mids$ = NULL;
          bool PatternTokenizer::live$ = false;

          jclass PatternTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f57c1546] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;Ljava/util/regex/Pattern;I)V");
              mids$[mid_init$_b5faf662] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;Ljava/util/regex/Pattern;I)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternTokenizer::PatternTokenizer(const ::java::io::Reader & a0, const ::java::util::regex::Pattern & a1, jint a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_f57c1546, a0.this$, a1.this$, a2)) {}

          PatternTokenizer::PatternTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, const ::java::util::regex::Pattern & a2, jint a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_b5faf662, a0.this$, a1.this$, a2.this$, a3)) {}

          void PatternTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean PatternTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void PatternTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternTokenizer_init_(t_PatternTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternTokenizer_end(t_PatternTokenizer *self, PyObject *args);
          static PyObject *t_PatternTokenizer_incrementToken(t_PatternTokenizer *self, PyObject *args);
          static PyObject *t_PatternTokenizer_reset(t_PatternTokenizer *self, PyObject *args);

          static PyMethodDef t_PatternTokenizer__methods_[] = {
            DECLARE_METHOD(t_PatternTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_PatternTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_PatternTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternTokenizer, t_PatternTokenizer, ::org::apache::lucene::analysis::Tokenizer, PatternTokenizer, t_PatternTokenizer_init_, 0, 0, 0, 0, 0);

          void t_PatternTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternTokenizer), module, "PatternTokenizer", 0);
          }

          void t_PatternTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternTokenizer).tp_dict, "class_", make_descriptor(PatternTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternTokenizer).tp_dict, "wrapfn_", make_descriptor(t_PatternTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternTokenizer::initializeClass, 1)))
              return NULL;
            return t_PatternTokenizer::wrap_Object(PatternTokenizer(((t_PatternTokenizer *) arg)->object.this$));
          }
          static PyObject *t_PatternTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternTokenizer_init_(t_PatternTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::util::regex::Pattern a1((jobject) NULL);
                jint a2;
                PatternTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkI", ::java::io::Reader::initializeClass, ::java::util::regex::Pattern::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = PatternTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ::java::util::regex::Pattern a2((jobject) NULL);
                jint a3;
                PatternTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkkI", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, ::java::util::regex::Pattern::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = PatternTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternTokenizer_end(t_PatternTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PatternTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_PatternTokenizer_incrementToken(t_PatternTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PatternTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_PatternTokenizer_reset(t_PatternTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PatternTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/ElisionFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *ElisionFilter::class$ = NULL;
          jmethodID *ElisionFilter::mids$ = NULL;
          bool ElisionFilter::live$ = false;

          jclass ElisionFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/ElisionFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_64fb9de3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ElisionFilter::ElisionFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_64fb9de3, a0.this$, a1.this$)) {}

          jboolean ElisionFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_ElisionFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ElisionFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ElisionFilter_init_(t_ElisionFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ElisionFilter_incrementToken(t_ElisionFilter *self, PyObject *args);

          static PyMethodDef t_ElisionFilter__methods_[] = {
            DECLARE_METHOD(t_ElisionFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ElisionFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ElisionFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ElisionFilter, t_ElisionFilter, ::org::apache::lucene::analysis::TokenFilter, ElisionFilter, t_ElisionFilter_init_, 0, 0, 0, 0, 0);

          void t_ElisionFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ElisionFilter), module, "ElisionFilter", 0);
          }

          void t_ElisionFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ElisionFilter).tp_dict, "class_", make_descriptor(ElisionFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ElisionFilter).tp_dict, "wrapfn_", make_descriptor(t_ElisionFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ElisionFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ElisionFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ElisionFilter::initializeClass, 1)))
              return NULL;
            return t_ElisionFilter::wrap_Object(ElisionFilter(((t_ElisionFilter *) arg)->object.this$));
          }
          static PyObject *t_ElisionFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ElisionFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ElisionFilter_init_(t_ElisionFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
            PyTypeObject **p1;
            ElisionFilter object((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
            {
              INT_CALL(object = ElisionFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ElisionFilter_incrementToken(t_ElisionFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ElisionFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *AbstractAnalysisFactory::class$ = NULL;
          jmethodID *AbstractAnalysisFactory::mids$ = NULL;
          bool AbstractAnalysisFactory::live$ = false;
          ::java::lang::String *AbstractAnalysisFactory::LUCENE_MATCH_VERSION_PARAM = NULL;

          jclass AbstractAnalysisFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/AbstractAnalysisFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_get_4630d771] = env->getMethodID(cls, "get", "(Ljava/util/Map;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_get_4be9e858] = env->getMethodID(cls, "get", "(Ljava/util/Map;Ljava/lang/String;Ljava/util/Collection;)Ljava/lang/String;");
              mids$[mid_get_c717d02f] = env->getMethodID(cls, "get", "(Ljava/util/Map;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_get_bc17366a] = env->getMethodID(cls, "get", "(Ljava/util/Map;Ljava/lang/String;Ljava/util/Collection;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_get_7fb22fcf] = env->getMethodID(cls, "get", "(Ljava/util/Map;Ljava/lang/String;Ljava/util/Collection;Ljava/lang/String;Z)Ljava/lang/String;");
              mids$[mid_getChar_2bcf84e7] = env->getMethodID(cls, "getChar", "(Ljava/util/Map;Ljava/lang/String;C)C");
              mids$[mid_getClassArg_14c7b5c5] = env->getMethodID(cls, "getClassArg", "()Ljava/lang/String;");
              mids$[mid_getLuceneMatchVersion_a83d688e] = env->getMethodID(cls, "getLuceneMatchVersion", "()Lorg/apache/lucene/util/Version;");
              mids$[mid_getOriginalArgs_db60befd] = env->getMethodID(cls, "getOriginalArgs", "()Ljava/util/Map;");
              mids$[mid_getSet_3ddefc5b] = env->getMethodID(cls, "getSet", "(Ljava/util/Map;Ljava/lang/String;)Ljava/util/Set;");
              mids$[mid_isExplicitLuceneMatchVersion_54c6a16a] = env->getMethodID(cls, "isExplicitLuceneMatchVersion", "()Z");
              mids$[mid_require_4630d771] = env->getMethodID(cls, "require", "(Ljava/util/Map;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_require_4be9e858] = env->getMethodID(cls, "require", "(Ljava/util/Map;Ljava/lang/String;Ljava/util/Collection;)Ljava/lang/String;");
              mids$[mid_require_203fb939] = env->getMethodID(cls, "require", "(Ljava/util/Map;Ljava/lang/String;Ljava/util/Collection;Z)Ljava/lang/String;");
              mids$[mid_requireChar_68876213] = env->getMethodID(cls, "requireChar", "(Ljava/util/Map;Ljava/lang/String;)C");
              mids$[mid_setExplicitLuceneMatchVersion_bb0c767f] = env->getMethodID(cls, "setExplicitLuceneMatchVersion", "(Z)V");
              mids$[mid_getBoolean_53e7fc33] = env->getMethodID(cls, "getBoolean", "(Ljava/util/Map;Ljava/lang/String;Z)Z");
              mids$[mid_getInt_29d335db] = env->getMethodID(cls, "getInt", "(Ljava/util/Map;Ljava/lang/String;I)I");
              mids$[mid_getFloat_a7ea7213] = env->getMethodID(cls, "getFloat", "(Ljava/util/Map;Ljava/lang/String;F)F");
              mids$[mid_getWordSet_94dc101c] = env->getMethodID(cls, "getWordSet", "(Lorg/apache/lucene/analysis/util/ResourceLoader;Ljava/lang/String;Z)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_assureMatchVersion_54c6a166] = env->getMethodID(cls, "assureMatchVersion", "()V");
              mids$[mid_requireInt_68876219] = env->getMethodID(cls, "requireInt", "(Ljava/util/Map;Ljava/lang/String;)I");
              mids$[mid_requireBoolean_6887620a] = env->getMethodID(cls, "requireBoolean", "(Ljava/util/Map;Ljava/lang/String;)Z");
              mids$[mid_requireFloat_68876216] = env->getMethodID(cls, "requireFloat", "(Ljava/util/Map;Ljava/lang/String;)F");
              mids$[mid_getPattern_222e4d23] = env->getMethodID(cls, "getPattern", "(Ljava/util/Map;Ljava/lang/String;)Ljava/util/regex/Pattern;");
              mids$[mid_getLines_161f664b] = env->getMethodID(cls, "getLines", "(Lorg/apache/lucene/analysis/util/ResourceLoader;Ljava/lang/String;)Ljava/util/List;");
              mids$[mid_getSnowballWordSet_94dc101c] = env->getMethodID(cls, "getSnowballWordSet", "(Lorg/apache/lucene/analysis/util/ResourceLoader;Ljava/lang/String;Z)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_splitFileNames_0feb8f08] = env->getMethodID(cls, "splitFileNames", "(Ljava/lang/String;)Ljava/util/List;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              LUCENE_MATCH_VERSION_PARAM = new ::java::lang::String(env->getStaticObjectField(cls, "LUCENE_MATCH_VERSION_PARAM", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String AbstractAnalysisFactory::get(const ::java::util::Map & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_get_4630d771], a0.this$, a1.this$));
          }

          ::java::lang::String AbstractAnalysisFactory::get(const ::java::util::Map & a0, const ::java::lang::String & a1, const ::java::util::Collection & a2) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_get_4be9e858], a0.this$, a1.this$, a2.this$));
          }

          ::java::lang::String AbstractAnalysisFactory::get(const ::java::util::Map & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_get_c717d02f], a0.this$, a1.this$, a2.this$));
          }

          ::java::lang::String AbstractAnalysisFactory::get(const ::java::util::Map & a0, const ::java::lang::String & a1, const ::java::util::Collection & a2, const ::java::lang::String & a3) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_get_bc17366a], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::java::lang::String AbstractAnalysisFactory::get(const ::java::util::Map & a0, const ::java::lang::String & a1, const ::java::util::Collection & a2, const ::java::lang::String & a3, jboolean a4) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_get_7fb22fcf], a0.this$, a1.this$, a2.this$, a3.this$, a4));
          }

          jchar AbstractAnalysisFactory::getChar(const ::java::util::Map & a0, const ::java::lang::String & a1, jchar a2) const
          {
            return env->callCharMethod(this$, mids$[mid_getChar_2bcf84e7], a0.this$, a1.this$, a2);
          }

          ::java::lang::String AbstractAnalysisFactory::getClassArg() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getClassArg_14c7b5c5]));
          }

          ::org::apache::lucene::util::Version AbstractAnalysisFactory::getLuceneMatchVersion() const
          {
            return ::org::apache::lucene::util::Version(env->callObjectMethod(this$, mids$[mid_getLuceneMatchVersion_a83d688e]));
          }

          ::java::util::Map AbstractAnalysisFactory::getOriginalArgs() const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getOriginalArgs_db60befd]));
          }

          ::java::util::Set AbstractAnalysisFactory::getSet(const ::java::util::Map & a0, const ::java::lang::String & a1) const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getSet_3ddefc5b], a0.this$, a1.this$));
          }

          jboolean AbstractAnalysisFactory::isExplicitLuceneMatchVersion() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isExplicitLuceneMatchVersion_54c6a16a]);
          }

          ::java::lang::String AbstractAnalysisFactory::require(const ::java::util::Map & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_require_4630d771], a0.this$, a1.this$));
          }

          ::java::lang::String AbstractAnalysisFactory::require(const ::java::util::Map & a0, const ::java::lang::String & a1, const ::java::util::Collection & a2) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_require_4be9e858], a0.this$, a1.this$, a2.this$));
          }

          ::java::lang::String AbstractAnalysisFactory::require(const ::java::util::Map & a0, const ::java::lang::String & a1, const ::java::util::Collection & a2, jboolean a3) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_require_203fb939], a0.this$, a1.this$, a2.this$, a3));
          }

          jchar AbstractAnalysisFactory::requireChar(const ::java::util::Map & a0, const ::java::lang::String & a1) const
          {
            return env->callCharMethod(this$, mids$[mid_requireChar_68876213], a0.this$, a1.this$);
          }

          void AbstractAnalysisFactory::setExplicitLuceneMatchVersion(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setExplicitLuceneMatchVersion_bb0c767f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_AbstractAnalysisFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAnalysisFactory_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAnalysisFactory_get(t_AbstractAnalysisFactory *self, PyObject *args);
          static PyObject *t_AbstractAnalysisFactory_getChar(t_AbstractAnalysisFactory *self, PyObject *args);
          static PyObject *t_AbstractAnalysisFactory_getClassArg(t_AbstractAnalysisFactory *self);
          static PyObject *t_AbstractAnalysisFactory_getLuceneMatchVersion(t_AbstractAnalysisFactory *self);
          static PyObject *t_AbstractAnalysisFactory_getOriginalArgs(t_AbstractAnalysisFactory *self);
          static PyObject *t_AbstractAnalysisFactory_getSet(t_AbstractAnalysisFactory *self, PyObject *args);
          static PyObject *t_AbstractAnalysisFactory_isExplicitLuceneMatchVersion(t_AbstractAnalysisFactory *self);
          static PyObject *t_AbstractAnalysisFactory_require(t_AbstractAnalysisFactory *self, PyObject *args);
          static PyObject *t_AbstractAnalysisFactory_requireChar(t_AbstractAnalysisFactory *self, PyObject *args);
          static PyObject *t_AbstractAnalysisFactory_setExplicitLuceneMatchVersion(t_AbstractAnalysisFactory *self, PyObject *arg);
          static PyObject *t_AbstractAnalysisFactory_get__classArg(t_AbstractAnalysisFactory *self, void *data);
          static PyObject *t_AbstractAnalysisFactory_get__explicitLuceneMatchVersion(t_AbstractAnalysisFactory *self, void *data);
          static int t_AbstractAnalysisFactory_set__explicitLuceneMatchVersion(t_AbstractAnalysisFactory *self, PyObject *arg, void *data);
          static PyObject *t_AbstractAnalysisFactory_get__luceneMatchVersion(t_AbstractAnalysisFactory *self, void *data);
          static PyObject *t_AbstractAnalysisFactory_get__originalArgs(t_AbstractAnalysisFactory *self, void *data);
          static PyGetSetDef t_AbstractAnalysisFactory__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractAnalysisFactory, classArg),
            DECLARE_GETSET_FIELD(t_AbstractAnalysisFactory, explicitLuceneMatchVersion),
            DECLARE_GET_FIELD(t_AbstractAnalysisFactory, luceneMatchVersion),
            DECLARE_GET_FIELD(t_AbstractAnalysisFactory, originalArgs),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractAnalysisFactory__methods_[] = {
            DECLARE_METHOD(t_AbstractAnalysisFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, get, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, getChar, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, getClassArg, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, getLuceneMatchVersion, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, getOriginalArgs, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, getSet, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, isExplicitLuceneMatchVersion, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, require, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, requireChar, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, setExplicitLuceneMatchVersion, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractAnalysisFactory, t_AbstractAnalysisFactory, ::java::lang::Object, AbstractAnalysisFactory, abstract_init, 0, 0, t_AbstractAnalysisFactory__fields_, 0, 0);

          void t_AbstractAnalysisFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractAnalysisFactory), module, "AbstractAnalysisFactory", 0);
          }

          void t_AbstractAnalysisFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractAnalysisFactory).tp_dict, "class_", make_descriptor(AbstractAnalysisFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractAnalysisFactory).tp_dict, "wrapfn_", make_descriptor(t_AbstractAnalysisFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractAnalysisFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(AbstractAnalysisFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(AbstractAnalysisFactory).tp_dict, "LUCENE_MATCH_VERSION_PARAM", make_descriptor(j2p(*AbstractAnalysisFactory::LUCENE_MATCH_VERSION_PARAM)));
          }

          static PyObject *t_AbstractAnalysisFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractAnalysisFactory::initializeClass, 1)))
              return NULL;
            return t_AbstractAnalysisFactory::wrap_Object(AbstractAnalysisFactory(((t_AbstractAnalysisFactory *) arg)->object.this$));
          }
          static PyObject *t_AbstractAnalysisFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractAnalysisFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractAnalysisFactory_get(t_AbstractAnalysisFactory *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "Ks", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
                {
                  OBJ_CALL(result = self->object.get(a0, a1));
                  return j2p(result);
                }
              }
              break;
             case 3:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::util::Collection a2((jobject) NULL);
                PyTypeObject **p2;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "KsK", ::java::util::Map::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2, &p2, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2));
                  return j2p(result);
                }
              }
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "Kss", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2));
                  return j2p(result);
                }
              }
              break;
             case 4:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::util::Collection a2((jobject) NULL);
                PyTypeObject **p2;
                ::java::lang::String a3((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "KsKs", ::java::util::Map::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2, &p2, ::java::util::t_Collection::parameters_, &a3))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2, a3));
                  return j2p(result);
                }
              }
              break;
             case 5:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::util::Collection a2((jobject) NULL);
                PyTypeObject **p2;
                ::java::lang::String a3((jobject) NULL);
                jboolean a4;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "KsKsZ", ::java::util::Map::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2, &p2, ::java::util::t_Collection::parameters_, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2, a3, a4));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "get", args);
            return NULL;
          }

          static PyObject *t_AbstractAnalysisFactory_getChar(t_AbstractAnalysisFactory *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String a1((jobject) NULL);
            jchar a2;
            jchar result;

            if (!parseArgs(args, "KsC", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getChar(a0, a1, a2));
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            PyErr_SetArgsError((PyObject *) self, "getChar", args);
            return NULL;
          }

          static PyObject *t_AbstractAnalysisFactory_getClassArg(t_AbstractAnalysisFactory *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getClassArg());
            return j2p(result);
          }

          static PyObject *t_AbstractAnalysisFactory_getLuceneMatchVersion(t_AbstractAnalysisFactory *self)
          {
            ::org::apache::lucene::util::Version result((jobject) NULL);
            OBJ_CALL(result = self->object.getLuceneMatchVersion());
            return ::org::apache::lucene::util::t_Version::wrap_Object(result);
          }

          static PyObject *t_AbstractAnalysisFactory_getOriginalArgs(t_AbstractAnalysisFactory *self)
          {
            ::java::util::Map result((jobject) NULL);
            OBJ_CALL(result = self->object.getOriginalArgs());
            return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
          }

          static PyObject *t_AbstractAnalysisFactory_getSet(t_AbstractAnalysisFactory *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String a1((jobject) NULL);
            ::java::util::Set result((jobject) NULL);

            if (!parseArgs(args, "Ks", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
            {
              OBJ_CALL(result = self->object.getSet(a0, a1));
              return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
            }

            PyErr_SetArgsError((PyObject *) self, "getSet", args);
            return NULL;
          }

          static PyObject *t_AbstractAnalysisFactory_isExplicitLuceneMatchVersion(t_AbstractAnalysisFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isExplicitLuceneMatchVersion());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_AbstractAnalysisFactory_require(t_AbstractAnalysisFactory *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "Ks", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
                {
                  OBJ_CALL(result = self->object.require(a0, a1));
                  return j2p(result);
                }
              }
              break;
             case 3:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::util::Collection a2((jobject) NULL);
                PyTypeObject **p2;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "KsK", ::java::util::Map::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2, &p2, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(result = self->object.require(a0, a1, a2));
                  return j2p(result);
                }
              }
              break;
             case 4:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::util::Collection a2((jobject) NULL);
                PyTypeObject **p2;
                jboolean a3;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "KsKZ", ::java::util::Map::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2, &p2, ::java::util::t_Collection::parameters_, &a3))
                {
                  OBJ_CALL(result = self->object.require(a0, a1, a2, a3));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "require", args);
            return NULL;
          }

          static PyObject *t_AbstractAnalysisFactory_requireChar(t_AbstractAnalysisFactory *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String a1((jobject) NULL);
            jchar result;

            if (!parseArgs(args, "Ks", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
            {
              OBJ_CALL(result = self->object.requireChar(a0, a1));
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            PyErr_SetArgsError((PyObject *) self, "requireChar", args);
            return NULL;
          }

          static PyObject *t_AbstractAnalysisFactory_setExplicitLuceneMatchVersion(t_AbstractAnalysisFactory *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setExplicitLuceneMatchVersion(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setExplicitLuceneMatchVersion", arg);
            return NULL;
          }

          static PyObject *t_AbstractAnalysisFactory_get__classArg(t_AbstractAnalysisFactory *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getClassArg());
            return j2p(value);
          }

          static PyObject *t_AbstractAnalysisFactory_get__explicitLuceneMatchVersion(t_AbstractAnalysisFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isExplicitLuceneMatchVersion());
            Py_RETURN_BOOL(value);
          }
          static int t_AbstractAnalysisFactory_set__explicitLuceneMatchVersion(t_AbstractAnalysisFactory *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setExplicitLuceneMatchVersion(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "explicitLuceneMatchVersion", arg);
            return -1;
          }

          static PyObject *t_AbstractAnalysisFactory_get__luceneMatchVersion(t_AbstractAnalysisFactory *self, void *data)
          {
            ::org::apache::lucene::util::Version value((jobject) NULL);
            OBJ_CALL(value = self->object.getLuceneMatchVersion());
            return ::org::apache::lucene::util::t_Version::wrap_Object(value);
          }

          static PyObject *t_AbstractAnalysisFactory_get__originalArgs(t_AbstractAnalysisFactory *self, void *data)
          {
            ::java::util::Map value((jobject) NULL);
            OBJ_CALL(value = self->object.getOriginalArgs());
            return ::java::util::t_Map::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/LiveIndexWriterConfig.h"
#include "org/apache/lucene/index/IndexWriter$IndexReaderWarmer.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/IndexWriterConfig$OpenMode.h"
#include "org/apache/lucene/index/MergeScheduler.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "org/apache/lucene/index/MergePolicy.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "org/apache/lucene/index/IndexDeletionPolicy.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *LiveIndexWriterConfig::class$ = NULL;
        jmethodID *LiveIndexWriterConfig::mids$ = NULL;
        bool LiveIndexWriterConfig::live$ = false;

        jclass LiveIndexWriterConfig::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/LiveIndexWriterConfig");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getAnalyzer_347f60a9] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
            mids$[mid_getCheckIntegrityAtMerge_54c6a16a] = env->getMethodID(cls, "getCheckIntegrityAtMerge", "()Z");
            mids$[mid_getCodec_27f0a02b] = env->getMethodID(cls, "getCodec", "()Lorg/apache/lucene/codecs/Codec;");
            mids$[mid_getIndexCommit_09307276] = env->getMethodID(cls, "getIndexCommit", "()Lorg/apache/lucene/index/IndexCommit;");
            mids$[mid_getIndexDeletionPolicy_a18376c3] = env->getMethodID(cls, "getIndexDeletionPolicy", "()Lorg/apache/lucene/index/IndexDeletionPolicy;");
            mids$[mid_getInfoStream_1923150b] = env->getMethodID(cls, "getInfoStream", "()Lorg/apache/lucene/util/InfoStream;");
            mids$[mid_getMaxBufferedDeleteTerms_54c6a179] = env->getMethodID(cls, "getMaxBufferedDeleteTerms", "()I");
            mids$[mid_getMaxBufferedDocs_54c6a179] = env->getMethodID(cls, "getMaxBufferedDocs", "()I");
            mids$[mid_getMaxThreadStates_54c6a179] = env->getMethodID(cls, "getMaxThreadStates", "()I");
            mids$[mid_getMergePolicy_753f8dfd] = env->getMethodID(cls, "getMergePolicy", "()Lorg/apache/lucene/index/MergePolicy;");
            mids$[mid_getMergeScheduler_ff96d655] = env->getMethodID(cls, "getMergeScheduler", "()Lorg/apache/lucene/index/MergeScheduler;");
            mids$[mid_getMergedSegmentWarmer_b145c9d7] = env->getMethodID(cls, "getMergedSegmentWarmer", "()Lorg/apache/lucene/index/IndexWriter$IndexReaderWarmer;");
            mids$[mid_getOpenMode_4134b214] = env->getMethodID(cls, "getOpenMode", "()Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;");
            mids$[mid_getRAMBufferSizeMB_54c6a174] = env->getMethodID(cls, "getRAMBufferSizeMB", "()D");
            mids$[mid_getRAMPerThreadHardLimitMB_54c6a179] = env->getMethodID(cls, "getRAMPerThreadHardLimitMB", "()I");
            mids$[mid_getReaderPooling_54c6a16a] = env->getMethodID(cls, "getReaderPooling", "()Z");
            mids$[mid_getReaderTermsIndexDivisor_54c6a179] = env->getMethodID(cls, "getReaderTermsIndexDivisor", "()I");
            mids$[mid_getSimilarity_efcb1233] = env->getMethodID(cls, "getSimilarity", "()Lorg/apache/lucene/search/similarities/Similarity;");
            mids$[mid_getTermIndexInterval_54c6a179] = env->getMethodID(cls, "getTermIndexInterval", "()I");
            mids$[mid_getUseCompoundFile_54c6a16a] = env->getMethodID(cls, "getUseCompoundFile", "()Z");
            mids$[mid_getWriteLockTimeout_54c6a17a] = env->getMethodID(cls, "getWriteLockTimeout", "()J");
            mids$[mid_setCheckIntegrityAtMerge_7cdcb09b] = env->getMethodID(cls, "setCheckIntegrityAtMerge", "(Z)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setMaxBufferedDeleteTerms_4e167404] = env->getMethodID(cls, "setMaxBufferedDeleteTerms", "(I)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setMaxBufferedDocs_4e167404] = env->getMethodID(cls, "setMaxBufferedDocs", "(I)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setMergePolicy_b135f7ac] = env->getMethodID(cls, "setMergePolicy", "(Lorg/apache/lucene/index/MergePolicy;)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setMergedSegmentWarmer_02b4678e] = env->getMethodID(cls, "setMergedSegmentWarmer", "(Lorg/apache/lucene/index/IndexWriter$IndexReaderWarmer;)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setRAMBufferSizeMB_e14feba1] = env->getMethodID(cls, "setRAMBufferSizeMB", "(D)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setReaderTermsIndexDivisor_4e167404] = env->getMethodID(cls, "setReaderTermsIndexDivisor", "(I)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setTermIndexInterval_4e167404] = env->getMethodID(cls, "setTermIndexInterval", "(I)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setUseCompoundFile_7cdcb09b] = env->getMethodID(cls, "setUseCompoundFile", "(Z)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::analysis::Analyzer LiveIndexWriterConfig::getAnalyzer() const
        {
          return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_347f60a9]));
        }

        jboolean LiveIndexWriterConfig::getCheckIntegrityAtMerge() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getCheckIntegrityAtMerge_54c6a16a]);
        }

        ::org::apache::lucene::codecs::Codec LiveIndexWriterConfig::getCodec() const
        {
          return ::org::apache::lucene::codecs::Codec(env->callObjectMethod(this$, mids$[mid_getCodec_27f0a02b]));
        }

        ::org::apache::lucene::index::IndexCommit LiveIndexWriterConfig::getIndexCommit() const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_getIndexCommit_09307276]));
        }

        ::org::apache::lucene::index::IndexDeletionPolicy LiveIndexWriterConfig::getIndexDeletionPolicy() const
        {
          return ::org::apache::lucene::index::IndexDeletionPolicy(env->callObjectMethod(this$, mids$[mid_getIndexDeletionPolicy_a18376c3]));
        }

        ::org::apache::lucene::util::InfoStream LiveIndexWriterConfig::getInfoStream() const
        {
          return ::org::apache::lucene::util::InfoStream(env->callObjectMethod(this$, mids$[mid_getInfoStream_1923150b]));
        }

        jint LiveIndexWriterConfig::getMaxBufferedDeleteTerms() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxBufferedDeleteTerms_54c6a179]);
        }

        jint LiveIndexWriterConfig::getMaxBufferedDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxBufferedDocs_54c6a179]);
        }

        jint LiveIndexWriterConfig::getMaxThreadStates() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxThreadStates_54c6a179]);
        }

        ::org::apache::lucene::index::MergePolicy LiveIndexWriterConfig::getMergePolicy() const
        {
          return ::org::apache::lucene::index::MergePolicy(env->callObjectMethod(this$, mids$[mid_getMergePolicy_753f8dfd]));
        }

        ::org::apache::lucene::index::MergeScheduler LiveIndexWriterConfig::getMergeScheduler() const
        {
          return ::org::apache::lucene::index::MergeScheduler(env->callObjectMethod(this$, mids$[mid_getMergeScheduler_ff96d655]));
        }

        ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer LiveIndexWriterConfig::getMergedSegmentWarmer() const
        {
          return ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer(env->callObjectMethod(this$, mids$[mid_getMergedSegmentWarmer_b145c9d7]));
        }

        ::org::apache::lucene::index::IndexWriterConfig$OpenMode LiveIndexWriterConfig::getOpenMode() const
        {
          return ::org::apache::lucene::index::IndexWriterConfig$OpenMode(env->callObjectMethod(this$, mids$[mid_getOpenMode_4134b214]));
        }

        jdouble LiveIndexWriterConfig::getRAMBufferSizeMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getRAMBufferSizeMB_54c6a174]);
        }

        jint LiveIndexWriterConfig::getRAMPerThreadHardLimitMB() const
        {
          return env->callIntMethod(this$, mids$[mid_getRAMPerThreadHardLimitMB_54c6a179]);
        }

        jboolean LiveIndexWriterConfig::getReaderPooling() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getReaderPooling_54c6a16a]);
        }

        jint LiveIndexWriterConfig::getReaderTermsIndexDivisor() const
        {
          return env->callIntMethod(this$, mids$[mid_getReaderTermsIndexDivisor_54c6a179]);
        }

        ::org::apache::lucene::search::similarities::Similarity LiveIndexWriterConfig::getSimilarity() const
        {
          return ::org::apache::lucene::search::similarities::Similarity(env->callObjectMethod(this$, mids$[mid_getSimilarity_efcb1233]));
        }

        jint LiveIndexWriterConfig::getTermIndexInterval() const
        {
          return env->callIntMethod(this$, mids$[mid_getTermIndexInterval_54c6a179]);
        }

        jboolean LiveIndexWriterConfig::getUseCompoundFile() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getUseCompoundFile_54c6a16a]);
        }

        jlong LiveIndexWriterConfig::getWriteLockTimeout() const
        {
          return env->callLongMethod(this$, mids$[mid_getWriteLockTimeout_54c6a17a]);
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setCheckIntegrityAtMerge(jboolean a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setCheckIntegrityAtMerge_7cdcb09b], a0));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setMaxBufferedDeleteTerms(jint a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMaxBufferedDeleteTerms_4e167404], a0));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setMaxBufferedDocs(jint a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMaxBufferedDocs_4e167404], a0));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setMergePolicy(const ::org::apache::lucene::index::MergePolicy & a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMergePolicy_b135f7ac], a0.this$));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setMergedSegmentWarmer(const ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer & a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMergedSegmentWarmer_02b4678e], a0.this$));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setRAMBufferSizeMB(jdouble a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setRAMBufferSizeMB_e14feba1], a0));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setReaderTermsIndexDivisor(jint a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setReaderTermsIndexDivisor_4e167404], a0));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setTermIndexInterval(jint a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setTermIndexInterval_4e167404], a0));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setUseCompoundFile(jboolean a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setUseCompoundFile_7cdcb09b], a0));
        }

        ::java::lang::String LiveIndexWriterConfig::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_LiveIndexWriterConfig_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_getAnalyzer(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getCheckIntegrityAtMerge(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getCodec(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getIndexCommit(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getIndexDeletionPolicy(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getInfoStream(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getMaxBufferedDeleteTerms(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getMaxBufferedDocs(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getMaxThreadStates(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getMergePolicy(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getMergeScheduler(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getMergedSegmentWarmer(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getOpenMode(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getRAMBufferSizeMB(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getRAMPerThreadHardLimitMB(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getReaderPooling(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getReaderTermsIndexDivisor(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getSimilarity(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getTermIndexInterval(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getUseCompoundFile(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getWriteLockTimeout(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_setCheckIntegrityAtMerge(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setMaxBufferedDeleteTerms(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setMaxBufferedDocs(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setMergePolicy(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setMergedSegmentWarmer(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setRAMBufferSizeMB(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setReaderTermsIndexDivisor(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setTermIndexInterval(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setUseCompoundFile(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_toString(t_LiveIndexWriterConfig *self, PyObject *args);
        static PyObject *t_LiveIndexWriterConfig_get__analyzer(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__checkIntegrityAtMerge(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__checkIntegrityAtMerge(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__codec(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__indexCommit(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__indexDeletionPolicy(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__infoStream(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__maxBufferedDeleteTerms(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__maxBufferedDeleteTerms(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__maxBufferedDocs(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__maxBufferedDocs(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__maxThreadStates(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__mergePolicy(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__mergePolicy(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__mergeScheduler(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__mergedSegmentWarmer(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__mergedSegmentWarmer(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__openMode(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__rAMBufferSizeMB(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__rAMBufferSizeMB(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__rAMPerThreadHardLimitMB(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__readerPooling(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__readerTermsIndexDivisor(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__readerTermsIndexDivisor(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__similarity(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__termIndexInterval(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__termIndexInterval(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__useCompoundFile(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__useCompoundFile(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__writeLockTimeout(t_LiveIndexWriterConfig *self, void *data);
        static PyGetSetDef t_LiveIndexWriterConfig__fields_[] = {
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, analyzer),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, checkIntegrityAtMerge),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, codec),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, indexCommit),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, indexDeletionPolicy),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, infoStream),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, maxBufferedDeleteTerms),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, maxBufferedDocs),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, maxThreadStates),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, mergePolicy),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, mergeScheduler),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, mergedSegmentWarmer),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, openMode),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, rAMBufferSizeMB),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, rAMPerThreadHardLimitMB),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, readerPooling),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, readerTermsIndexDivisor),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, similarity),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, termIndexInterval),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, useCompoundFile),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, writeLockTimeout),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LiveIndexWriterConfig__methods_[] = {
          DECLARE_METHOD(t_LiveIndexWriterConfig, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getAnalyzer, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getCheckIntegrityAtMerge, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getCodec, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getIndexCommit, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getIndexDeletionPolicy, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getInfoStream, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getMaxBufferedDeleteTerms, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getMaxBufferedDocs, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getMaxThreadStates, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getMergePolicy, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getMergeScheduler, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getMergedSegmentWarmer, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getOpenMode, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getRAMBufferSizeMB, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getRAMPerThreadHardLimitMB, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getReaderPooling, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getReaderTermsIndexDivisor, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getSimilarity, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getTermIndexInterval, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getUseCompoundFile, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getWriteLockTimeout, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setCheckIntegrityAtMerge, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setMaxBufferedDeleteTerms, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setMaxBufferedDocs, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setMergePolicy, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setMergedSegmentWarmer, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setRAMBufferSizeMB, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setReaderTermsIndexDivisor, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setTermIndexInterval, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setUseCompoundFile, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LiveIndexWriterConfig, t_LiveIndexWriterConfig, ::java::lang::Object, LiveIndexWriterConfig, abstract_init, 0, 0, t_LiveIndexWriterConfig__fields_, 0, 0);

        void t_LiveIndexWriterConfig::install(PyObject *module)
        {
          installType(&PY_TYPE(LiveIndexWriterConfig), module, "LiveIndexWriterConfig", 0);
        }

        void t_LiveIndexWriterConfig::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LiveIndexWriterConfig).tp_dict, "class_", make_descriptor(LiveIndexWriterConfig::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LiveIndexWriterConfig).tp_dict, "wrapfn_", make_descriptor(t_LiveIndexWriterConfig::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LiveIndexWriterConfig).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LiveIndexWriterConfig_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LiveIndexWriterConfig::initializeClass, 1)))
            return NULL;
          return t_LiveIndexWriterConfig::wrap_Object(LiveIndexWriterConfig(((t_LiveIndexWriterConfig *) arg)->object.this$));
        }
        static PyObject *t_LiveIndexWriterConfig_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LiveIndexWriterConfig::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_LiveIndexWriterConfig_getAnalyzer(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
          OBJ_CALL(result = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getCheckIntegrityAtMerge(t_LiveIndexWriterConfig *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getCheckIntegrityAtMerge());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getCodec(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::codecs::Codec result((jobject) NULL);
          OBJ_CALL(result = self->object.getCodec());
          return ::org::apache::lucene::codecs::t_Codec::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getIndexCommit(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexCommit());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getIndexDeletionPolicy(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexDeletionPolicy());
          return ::org::apache::lucene::index::t_IndexDeletionPolicy::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getInfoStream(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::util::InfoStream result((jobject) NULL);
          OBJ_CALL(result = self->object.getInfoStream());
          return ::org::apache::lucene::util::t_InfoStream::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getMaxBufferedDeleteTerms(t_LiveIndexWriterConfig *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxBufferedDeleteTerms());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LiveIndexWriterConfig_getMaxBufferedDocs(t_LiveIndexWriterConfig *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxBufferedDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LiveIndexWriterConfig_getMaxThreadStates(t_LiveIndexWriterConfig *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxThreadStates());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LiveIndexWriterConfig_getMergePolicy(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::index::MergePolicy result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergePolicy());
          return ::org::apache::lucene::index::t_MergePolicy::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getMergeScheduler(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::index::MergeScheduler result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergeScheduler());
          return ::org::apache::lucene::index::t_MergeScheduler::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getMergedSegmentWarmer(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergedSegmentWarmer());
          return ::org::apache::lucene::index::t_IndexWriter$IndexReaderWarmer::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getOpenMode(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::index::IndexWriterConfig$OpenMode result((jobject) NULL);
          OBJ_CALL(result = self->object.getOpenMode());
          return ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getRAMBufferSizeMB(t_LiveIndexWriterConfig *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getRAMBufferSizeMB());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_LiveIndexWriterConfig_getRAMPerThreadHardLimitMB(t_LiveIndexWriterConfig *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getRAMPerThreadHardLimitMB());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LiveIndexWriterConfig_getReaderPooling(t_LiveIndexWriterConfig *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getReaderPooling());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getReaderTermsIndexDivisor(t_LiveIndexWriterConfig *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getReaderTermsIndexDivisor());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LiveIndexWriterConfig_getSimilarity(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::search::similarities::Similarity result((jobject) NULL);
          OBJ_CALL(result = self->object.getSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getTermIndexInterval(t_LiveIndexWriterConfig *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getTermIndexInterval());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LiveIndexWriterConfig_getUseCompoundFile(t_LiveIndexWriterConfig *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getUseCompoundFile());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getWriteLockTimeout(t_LiveIndexWriterConfig *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getWriteLockTimeout());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_LiveIndexWriterConfig_setCheckIntegrityAtMerge(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          jboolean a0;
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.setCheckIntegrityAtMerge(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setCheckIntegrityAtMerge", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setMaxBufferedDeleteTerms(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          jint a0;
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setMaxBufferedDeleteTerms(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxBufferedDeleteTerms", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setMaxBufferedDocs(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          jint a0;
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setMaxBufferedDocs(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxBufferedDocs", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setMergePolicy(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergePolicy a0((jobject) NULL);
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergePolicy::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setMergePolicy(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMergePolicy", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setMergedSegmentWarmer(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer a0((jobject) NULL);
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setMergedSegmentWarmer(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMergedSegmentWarmer", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setRAMBufferSizeMB(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          jdouble a0;
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setRAMBufferSizeMB(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setRAMBufferSizeMB", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setReaderTermsIndexDivisor(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          jint a0;
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setReaderTermsIndexDivisor(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setReaderTermsIndexDivisor", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setTermIndexInterval(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          jint a0;
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setTermIndexInterval(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setTermIndexInterval", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setUseCompoundFile(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          jboolean a0;
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.setUseCompoundFile(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setUseCompoundFile", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_toString(t_LiveIndexWriterConfig *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(LiveIndexWriterConfig), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_LiveIndexWriterConfig_get__analyzer(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
          OBJ_CALL(value = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__checkIntegrityAtMerge(t_LiveIndexWriterConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getCheckIntegrityAtMerge());
          Py_RETURN_BOOL(value);
        }
        static int t_LiveIndexWriterConfig_set__checkIntegrityAtMerge(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setCheckIntegrityAtMerge(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "checkIntegrityAtMerge", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__codec(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::codecs::Codec value((jobject) NULL);
          OBJ_CALL(value = self->object.getCodec());
          return ::org::apache::lucene::codecs::t_Codec::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__indexCommit(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexCommit value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexCommit());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__indexDeletionPolicy(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexDeletionPolicy());
          return ::org::apache::lucene::index::t_IndexDeletionPolicy::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__infoStream(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::util::InfoStream value((jobject) NULL);
          OBJ_CALL(value = self->object.getInfoStream());
          return ::org::apache::lucene::util::t_InfoStream::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__maxBufferedDeleteTerms(t_LiveIndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxBufferedDeleteTerms());
          return PyInt_FromLong((long) value);
        }
        static int t_LiveIndexWriterConfig_set__maxBufferedDeleteTerms(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxBufferedDeleteTerms(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxBufferedDeleteTerms", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__maxBufferedDocs(t_LiveIndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxBufferedDocs());
          return PyInt_FromLong((long) value);
        }
        static int t_LiveIndexWriterConfig_set__maxBufferedDocs(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxBufferedDocs(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxBufferedDocs", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__maxThreadStates(t_LiveIndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxThreadStates());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__mergePolicy(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::MergePolicy value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergePolicy());
          return ::org::apache::lucene::index::t_MergePolicy::wrap_Object(value);
        }
        static int t_LiveIndexWriterConfig_set__mergePolicy(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::MergePolicy value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::MergePolicy::initializeClass, &value))
            {
              INT_CALL(self->object.setMergePolicy(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergePolicy", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__mergeScheduler(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::MergeScheduler value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergeScheduler());
          return ::org::apache::lucene::index::t_MergeScheduler::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__mergedSegmentWarmer(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergedSegmentWarmer());
          return ::org::apache::lucene::index::t_IndexWriter$IndexReaderWarmer::wrap_Object(value);
        }
        static int t_LiveIndexWriterConfig_set__mergedSegmentWarmer(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer::initializeClass, &value))
            {
              INT_CALL(self->object.setMergedSegmentWarmer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergedSegmentWarmer", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__openMode(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexWriterConfig$OpenMode value((jobject) NULL);
          OBJ_CALL(value = self->object.getOpenMode());
          return ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__rAMBufferSizeMB(t_LiveIndexWriterConfig *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getRAMBufferSizeMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_LiveIndexWriterConfig_set__rAMBufferSizeMB(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setRAMBufferSizeMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "rAMBufferSizeMB", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__rAMPerThreadHardLimitMB(t_LiveIndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getRAMPerThreadHardLimitMB());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__readerPooling(t_LiveIndexWriterConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getReaderPooling());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__readerTermsIndexDivisor(t_LiveIndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getReaderTermsIndexDivisor());
          return PyInt_FromLong((long) value);
        }
        static int t_LiveIndexWriterConfig_set__readerTermsIndexDivisor(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setReaderTermsIndexDivisor(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "readerTermsIndexDivisor", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__similarity(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::search::similarities::Similarity value((jobject) NULL);
          OBJ_CALL(value = self->object.getSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__termIndexInterval(t_LiveIndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getTermIndexInterval());
          return PyInt_FromLong((long) value);
        }
        static int t_LiveIndexWriterConfig_set__termIndexInterval(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setTermIndexInterval(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "termIndexInterval", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__useCompoundFile(t_LiveIndexWriterConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getUseCompoundFile());
          Py_RETURN_BOOL(value);
        }
        static int t_LiveIndexWriterConfig_set__useCompoundFile(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setUseCompoundFile(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "useCompoundFile", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__writeLockTimeout(t_LiveIndexWriterConfig *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getWriteLockTimeout());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *EdgeNGramTokenFilter$Side::class$ = NULL;
          jmethodID *EdgeNGramTokenFilter$Side::mids$ = NULL;
          bool EdgeNGramTokenFilter$Side::live$ = false;
          EdgeNGramTokenFilter$Side *EdgeNGramTokenFilter$Side::BACK = NULL;
          EdgeNGramTokenFilter$Side *EdgeNGramTokenFilter$Side::FRONT = NULL;

          jclass EdgeNGramTokenFilter$Side::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getLabel_14c7b5c5] = env->getMethodID(cls, "getLabel", "()Ljava/lang/String;");
              mids$[mid_getSide_e04ee6cc] = env->getStaticMethodID(cls, "getSide", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side;");
              mids$[mid_valueOf_e04ee6cc] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side;");
              mids$[mid_values_16957b8a] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              BACK = new EdgeNGramTokenFilter$Side(env->getStaticObjectField(cls, "BACK", "Lorg/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side;"));
              FRONT = new EdgeNGramTokenFilter$Side(env->getStaticObjectField(cls, "FRONT", "Lorg/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String EdgeNGramTokenFilter$Side::getLabel() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLabel_14c7b5c5]));
          }

          EdgeNGramTokenFilter$Side EdgeNGramTokenFilter$Side::getSide(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return EdgeNGramTokenFilter$Side(env->callStaticObjectMethod(cls, mids$[mid_getSide_e04ee6cc], a0.this$));
          }

          EdgeNGramTokenFilter$Side EdgeNGramTokenFilter$Side::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return EdgeNGramTokenFilter$Side(env->callStaticObjectMethod(cls, mids$[mid_valueOf_e04ee6cc], a0.this$));
          }

          JArray< EdgeNGramTokenFilter$Side > EdgeNGramTokenFilter$Side::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< EdgeNGramTokenFilter$Side >(env->callStaticObjectMethod(cls, mids$[mid_values_16957b8a]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_EdgeNGramTokenFilter$Side_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EdgeNGramTokenFilter$Side_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EdgeNGramTokenFilter$Side_of_(t_EdgeNGramTokenFilter$Side *self, PyObject *args);
          static PyObject *t_EdgeNGramTokenFilter$Side_getLabel(t_EdgeNGramTokenFilter$Side *self);
          static PyObject *t_EdgeNGramTokenFilter$Side_getSide(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EdgeNGramTokenFilter$Side_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_EdgeNGramTokenFilter$Side_values(PyTypeObject *type);
          static PyObject *t_EdgeNGramTokenFilter$Side_get__label(t_EdgeNGramTokenFilter$Side *self, void *data);
          static PyObject *t_EdgeNGramTokenFilter$Side_get__parameters_(t_EdgeNGramTokenFilter$Side *self, void *data);
          static PyGetSetDef t_EdgeNGramTokenFilter$Side__fields_[] = {
            DECLARE_GET_FIELD(t_EdgeNGramTokenFilter$Side, label),
            DECLARE_GET_FIELD(t_EdgeNGramTokenFilter$Side, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_EdgeNGramTokenFilter$Side__methods_[] = {
            DECLARE_METHOD(t_EdgeNGramTokenFilter$Side, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter$Side, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter$Side, of_, METH_VARARGS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter$Side, getLabel, METH_NOARGS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter$Side, getSide, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter$Side, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter$Side, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EdgeNGramTokenFilter$Side, t_EdgeNGramTokenFilter$Side, ::java::lang::Enum, EdgeNGramTokenFilter$Side, abstract_init, 0, 0, t_EdgeNGramTokenFilter$Side__fields_, 0, 0);
          PyObject *t_EdgeNGramTokenFilter$Side::wrap_Object(const EdgeNGramTokenFilter$Side& object, PyTypeObject *p0)
          {
            PyObject *obj = t_EdgeNGramTokenFilter$Side::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_EdgeNGramTokenFilter$Side *self = (t_EdgeNGramTokenFilter$Side *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_EdgeNGramTokenFilter$Side::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_EdgeNGramTokenFilter$Side::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_EdgeNGramTokenFilter$Side *self = (t_EdgeNGramTokenFilter$Side *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_EdgeNGramTokenFilter$Side::install(PyObject *module)
          {
            installType(&PY_TYPE(EdgeNGramTokenFilter$Side), module, "EdgeNGramTokenFilter$Side", 0);
          }

          void t_EdgeNGramTokenFilter$Side::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter$Side).tp_dict, "class_", make_descriptor(EdgeNGramTokenFilter$Side::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter$Side).tp_dict, "wrapfn_", make_descriptor(t_EdgeNGramTokenFilter$Side::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter$Side).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(EdgeNGramTokenFilter$Side::initializeClass);
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter$Side).tp_dict, "BACK", make_descriptor(t_EdgeNGramTokenFilter$Side::wrap_Object(*EdgeNGramTokenFilter$Side::BACK)));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter$Side).tp_dict, "FRONT", make_descriptor(t_EdgeNGramTokenFilter$Side::wrap_Object(*EdgeNGramTokenFilter$Side::FRONT)));
          }

          static PyObject *t_EdgeNGramTokenFilter$Side_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EdgeNGramTokenFilter$Side::initializeClass, 1)))
              return NULL;
            return t_EdgeNGramTokenFilter$Side::wrap_Object(EdgeNGramTokenFilter$Side(((t_EdgeNGramTokenFilter$Side *) arg)->object.this$));
          }
          static PyObject *t_EdgeNGramTokenFilter$Side_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EdgeNGramTokenFilter$Side::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_EdgeNGramTokenFilter$Side_of_(t_EdgeNGramTokenFilter$Side *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_EdgeNGramTokenFilter$Side_getLabel(t_EdgeNGramTokenFilter$Side *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getLabel());
            return j2p(result);
          }

          static PyObject *t_EdgeNGramTokenFilter$Side_getSide(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            EdgeNGramTokenFilter$Side result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side::getSide(a0));
              return t_EdgeNGramTokenFilter$Side::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getSide", arg);
            return NULL;
          }

          static PyObject *t_EdgeNGramTokenFilter$Side_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            EdgeNGramTokenFilter$Side result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side::valueOf(a0));
              return t_EdgeNGramTokenFilter$Side::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_EdgeNGramTokenFilter$Side_values(PyTypeObject *type)
          {
            JArray< EdgeNGramTokenFilter$Side > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side::values());
            return JArray<jobject>(result.this$).wrap(t_EdgeNGramTokenFilter$Side::wrap_jobject);
          }
          static PyObject *t_EdgeNGramTokenFilter$Side_get__parameters_(t_EdgeNGramTokenFilter$Side *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_EdgeNGramTokenFilter$Side_get__label(t_EdgeNGramTokenFilter$Side *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getLabel());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanFirstQuery.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanFirstQuery::class$ = NULL;
          jmethodID *SpanFirstQuery::mids$ = NULL;
          bool SpanFirstQuery::live$ = false;

          jclass SpanFirstQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanFirstQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_611c8717] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;I)V");
              mids$[mid_clone_cf87c9b3] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/spans/SpanFirstQuery;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_acceptPosition_5342f73f] = env->getMethodID(cls, "acceptPosition", "(Lorg/apache/lucene/search/spans/Spans;)Lorg/apache/lucene/search/spans/SpanPositionCheckQuery$AcceptStatus;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanFirstQuery::SpanFirstQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, jint a1) : ::org::apache::lucene::search::spans::SpanPositionRangeQuery(env->newObject(initializeClass, &mids$, mid_init$_611c8717, a0.this$, a1)) {}

          SpanFirstQuery SpanFirstQuery::clone() const
          {
            return SpanFirstQuery(env->callObjectMethod(this$, mids$[mid_clone_cf87c9b3]));
          }

          jboolean SpanFirstQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint SpanFirstQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String SpanFirstQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanFirstQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanFirstQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanFirstQuery_init_(t_SpanFirstQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanFirstQuery_clone(t_SpanFirstQuery *self, PyObject *args);
          static PyObject *t_SpanFirstQuery_equals(t_SpanFirstQuery *self, PyObject *args);
          static PyObject *t_SpanFirstQuery_hashCode(t_SpanFirstQuery *self, PyObject *args);
          static PyObject *t_SpanFirstQuery_toString(t_SpanFirstQuery *self, PyObject *args);

          static PyMethodDef t_SpanFirstQuery__methods_[] = {
            DECLARE_METHOD(t_SpanFirstQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanFirstQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanFirstQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_SpanFirstQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanFirstQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanFirstQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanFirstQuery, t_SpanFirstQuery, ::org::apache::lucene::search::spans::SpanPositionRangeQuery, SpanFirstQuery, t_SpanFirstQuery_init_, 0, 0, 0, 0, 0);

          void t_SpanFirstQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanFirstQuery), module, "SpanFirstQuery", 0);
          }

          void t_SpanFirstQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanFirstQuery).tp_dict, "class_", make_descriptor(SpanFirstQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanFirstQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanFirstQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanFirstQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanFirstQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanFirstQuery::initializeClass, 1)))
              return NULL;
            return t_SpanFirstQuery::wrap_Object(SpanFirstQuery(((t_SpanFirstQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanFirstQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanFirstQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanFirstQuery_init_(t_SpanFirstQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            jint a1;
            SpanFirstQuery object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1))
            {
              INT_CALL(object = SpanFirstQuery(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanFirstQuery_clone(t_SpanFirstQuery *self, PyObject *args)
          {
            SpanFirstQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_SpanFirstQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanFirstQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_SpanFirstQuery_equals(t_SpanFirstQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanFirstQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanFirstQuery_hashCode(t_SpanFirstQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanFirstQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanFirstQuery_toString(t_SpanFirstQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanFirstQuery), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueDate.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueDate::class$ = NULL;
          jmethodID *MutableValueDate::mids$ = NULL;
          bool MutableValueDate::live$ = false;

          jclass MutableValueDate::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueDate");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_duplicate_15ab3811] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_toObject_846352c3] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueDate::MutableValueDate() : ::org::apache::lucene::util::mutable$::MutableValueLong(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueDate::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_15ab3811]));
          }

          ::java::lang::Object MutableValueDate::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_846352c3]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueDate_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueDate_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueDate_init_(t_MutableValueDate *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueDate_duplicate(t_MutableValueDate *self, PyObject *args);
          static PyObject *t_MutableValueDate_toObject(t_MutableValueDate *self, PyObject *args);

          static PyMethodDef t_MutableValueDate__methods_[] = {
            DECLARE_METHOD(t_MutableValueDate, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueDate, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueDate, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueDate, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MutableValueDate, t_MutableValueDate, ::org::apache::lucene::util::mutable$::MutableValueLong, MutableValueDate, t_MutableValueDate_init_, 0, 0, 0, 0, 0);

          void t_MutableValueDate::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueDate), module, "MutableValueDate", 0);
          }

          void t_MutableValueDate::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MutableValueDate).tp_dict, "class_", make_descriptor(MutableValueDate::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MutableValueDate).tp_dict, "wrapfn_", make_descriptor(t_MutableValueDate::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MutableValueDate).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueDate_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueDate::initializeClass, 1)))
              return NULL;
            return t_MutableValueDate::wrap_Object(MutableValueDate(((t_MutableValueDate *) arg)->object.this$));
          }
          static PyObject *t_MutableValueDate_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueDate::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueDate_init_(t_MutableValueDate *self, PyObject *args, PyObject *kwds)
          {
            MutableValueDate object((jobject) NULL);

            INT_CALL(object = MutableValueDate());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueDate_duplicate(t_MutableValueDate *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueDate), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueDate_toObject(t_MutableValueDate *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueDate), (PyObject *) self, "toObject", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedLongValues.h"
#include "org/apache/lucene/util/packed/PackedLongValues$Builder.h"
#include "org/apache/lucene/util/packed/PackedLongValues$Iterator.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedLongValues::class$ = NULL;
          jmethodID *PackedLongValues::mids$ = NULL;
          bool PackedLongValues::live$ = false;

          jclass PackedLongValues::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedLongValues");

              mids$ = new jmethodID[max_mid];
              mids$[mid_deltaPackedBuilder_d1198cef] = env->getStaticMethodID(cls, "deltaPackedBuilder", "(F)Lorg/apache/lucene/util/packed/PackedLongValues$Builder;");
              mids$[mid_deltaPackedBuilder_2323d9c5] = env->getStaticMethodID(cls, "deltaPackedBuilder", "(IF)Lorg/apache/lucene/util/packed/PackedLongValues$Builder;");
              mids$[mid_get_0ee6df33] = env->getMethodID(cls, "get", "(J)J");
              mids$[mid_iterator_c6b63c88] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/util/packed/PackedLongValues$Iterator;");
              mids$[mid_monotonicBuilder_d1198cef] = env->getStaticMethodID(cls, "monotonicBuilder", "(F)Lorg/apache/lucene/util/packed/PackedLongValues$Builder;");
              mids$[mid_monotonicBuilder_2323d9c5] = env->getStaticMethodID(cls, "monotonicBuilder", "(IF)Lorg/apache/lucene/util/packed/PackedLongValues$Builder;");
              mids$[mid_packedBuilder_d1198cef] = env->getStaticMethodID(cls, "packedBuilder", "(F)Lorg/apache/lucene/util/packed/PackedLongValues$Builder;");
              mids$[mid_packedBuilder_2323d9c5] = env->getStaticMethodID(cls, "packedBuilder", "(IF)Lorg/apache/lucene/util/packed/PackedLongValues$Builder;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_54c6a17a] = env->getMethodID(cls, "size", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::packed::PackedLongValues$Builder PackedLongValues::deltaPackedBuilder(jfloat a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedLongValues$Builder(env->callStaticObjectMethod(cls, mids$[mid_deltaPackedBuilder_d1198cef], a0));
          }

          ::org::apache::lucene::util::packed::PackedLongValues$Builder PackedLongValues::deltaPackedBuilder(jint a0, jfloat a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedLongValues$Builder(env->callStaticObjectMethod(cls, mids$[mid_deltaPackedBuilder_2323d9c5], a0, a1));
          }

          jlong PackedLongValues::get(jlong a0) const
          {
            return env->callLongMethod(this$, mids$[mid_get_0ee6df33], a0);
          }

          ::org::apache::lucene::util::packed::PackedLongValues$Iterator PackedLongValues::iterator() const
          {
            return ::org::apache::lucene::util::packed::PackedLongValues$Iterator(env->callObjectMethod(this$, mids$[mid_iterator_c6b63c88]));
          }

          ::org::apache::lucene::util::packed::PackedLongValues$Builder PackedLongValues::monotonicBuilder(jfloat a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedLongValues$Builder(env->callStaticObjectMethod(cls, mids$[mid_monotonicBuilder_d1198cef], a0));
          }

          ::org::apache::lucene::util::packed::PackedLongValues$Builder PackedLongValues::monotonicBuilder(jint a0, jfloat a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedLongValues$Builder(env->callStaticObjectMethod(cls, mids$[mid_monotonicBuilder_2323d9c5], a0, a1));
          }

          ::org::apache::lucene::util::packed::PackedLongValues$Builder PackedLongValues::packedBuilder(jfloat a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedLongValues$Builder(env->callStaticObjectMethod(cls, mids$[mid_packedBuilder_d1198cef], a0));
          }

          ::org::apache::lucene::util::packed::PackedLongValues$Builder PackedLongValues::packedBuilder(jint a0, jfloat a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedLongValues$Builder(env->callStaticObjectMethod(cls, mids$[mid_packedBuilder_2323d9c5], a0, a1));
          }

          jlong PackedLongValues::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          jlong PackedLongValues::size() const
          {
            return env->callLongMethod(this$, mids$[mid_size_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedLongValues_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedLongValues_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedLongValues_deltaPackedBuilder(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedLongValues_get(t_PackedLongValues *self, PyObject *args);
          static PyObject *t_PackedLongValues_iterator(t_PackedLongValues *self);
          static PyObject *t_PackedLongValues_monotonicBuilder(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedLongValues_packedBuilder(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedLongValues_ramBytesUsed(t_PackedLongValues *self);
          static PyObject *t_PackedLongValues_size(t_PackedLongValues *self);

          static PyMethodDef t_PackedLongValues__methods_[] = {
            DECLARE_METHOD(t_PackedLongValues, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedLongValues, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedLongValues, deltaPackedBuilder, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedLongValues, get, METH_VARARGS),
            DECLARE_METHOD(t_PackedLongValues, iterator, METH_NOARGS),
            DECLARE_METHOD(t_PackedLongValues, monotonicBuilder, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedLongValues, packedBuilder, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedLongValues, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_PackedLongValues, size, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedLongValues, t_PackedLongValues, ::org::apache::lucene::util::LongValues, PackedLongValues, abstract_init, 0, 0, 0, 0, 0);

          void t_PackedLongValues::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedLongValues), module, "PackedLongValues", 0);
            PyDict_SetItemString(PY_TYPE(PackedLongValues).tp_dict, "Builder", make_descriptor(&PY_TYPE(PackedLongValues$Builder)));
          }

          void t_PackedLongValues::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedLongValues).tp_dict, "class_", make_descriptor(PackedLongValues::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedLongValues).tp_dict, "wrapfn_", make_descriptor(t_PackedLongValues::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedLongValues).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedLongValues_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedLongValues::initializeClass, 1)))
              return NULL;
            return t_PackedLongValues::wrap_Object(PackedLongValues(((t_PackedLongValues *) arg)->object.this$));
          }
          static PyObject *t_PackedLongValues_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedLongValues::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PackedLongValues_deltaPackedBuilder(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jfloat a0;
                ::org::apache::lucene::util::packed::PackedLongValues$Builder result((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedLongValues::deltaPackedBuilder(a0));
                  return ::org::apache::lucene::util::packed::t_PackedLongValues$Builder::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                jfloat a1;
                ::org::apache::lucene::util::packed::PackedLongValues$Builder result((jobject) NULL);

                if (!parseArgs(args, "IF", &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedLongValues::deltaPackedBuilder(a0, a1));
                  return ::org::apache::lucene::util::packed::t_PackedLongValues$Builder::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "deltaPackedBuilder", args);
            return NULL;
          }

          static PyObject *t_PackedLongValues_get(t_PackedLongValues *self, PyObject *args)
          {
            jlong a0;
            jlong result;

            if (!parseArgs(args, "J", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(PackedLongValues), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_PackedLongValues_iterator(t_PackedLongValues *self)
          {
            ::org::apache::lucene::util::packed::PackedLongValues$Iterator result((jobject) NULL);
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::util::packed::t_PackedLongValues$Iterator::wrap_Object(result);
          }

          static PyObject *t_PackedLongValues_monotonicBuilder(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jfloat a0;
                ::org::apache::lucene::util::packed::PackedLongValues$Builder result((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedLongValues::monotonicBuilder(a0));
                  return ::org::apache::lucene::util::packed::t_PackedLongValues$Builder::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                jfloat a1;
                ::org::apache::lucene::util::packed::PackedLongValues$Builder result((jobject) NULL);

                if (!parseArgs(args, "IF", &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedLongValues::monotonicBuilder(a0, a1));
                  return ::org::apache::lucene::util::packed::t_PackedLongValues$Builder::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "monotonicBuilder", args);
            return NULL;
          }

          static PyObject *t_PackedLongValues_packedBuilder(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jfloat a0;
                ::org::apache::lucene::util::packed::PackedLongValues$Builder result((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedLongValues::packedBuilder(a0));
                  return ::org::apache::lucene::util::packed::t_PackedLongValues$Builder::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                jfloat a1;
                ::org::apache::lucene::util::packed::PackedLongValues$Builder result((jobject) NULL);

                if (!parseArgs(args, "IF", &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedLongValues::packedBuilder(a0, a1));
                  return ::org::apache::lucene::util::packed::t_PackedLongValues$Builder::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "packedBuilder", args);
            return NULL;
          }

          static PyObject *t_PackedLongValues_ramBytesUsed(t_PackedLongValues *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_PackedLongValues_size(t_PackedLongValues *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$NullReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$NullReader::class$ = NULL;
          jmethodID *PackedInts$NullReader::mids$ = NULL;
          bool PackedInts$NullReader::live$ = false;

          jclass PackedInts$NullReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$NullReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_get_39c7bd20] = env->getMethodID(cls, "get", "(I)J");
              mids$[mid_get_d80d4c9e] = env->getMethodID(cls, "get", "(I[JII)I");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts$NullReader::PackedInts$NullReader(jint a0) : ::org::apache::lucene::util::packed::PackedInts$Reader(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          jlong PackedInts$NullReader::get(jint a0) const
          {
            return env->callLongMethod(this$, mids$[mid_get_39c7bd20], a0);
          }

          jint PackedInts$NullReader::get(jint a0, const JArray< jlong > & a1, jint a2, jint a3) const
          {
            return env->callIntMethod(this$, mids$[mid_get_d80d4c9e], a0, a1.this$, a2, a3);
          }

          jlong PackedInts$NullReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          jint PackedInts$NullReader::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$NullReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$NullReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedInts$NullReader_init_(t_PackedInts$NullReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedInts$NullReader_get(t_PackedInts$NullReader *self, PyObject *args);
          static PyObject *t_PackedInts$NullReader_ramBytesUsed(t_PackedInts$NullReader *self, PyObject *args);
          static PyObject *t_PackedInts$NullReader_size(t_PackedInts$NullReader *self, PyObject *args);

          static PyMethodDef t_PackedInts$NullReader__methods_[] = {
            DECLARE_METHOD(t_PackedInts$NullReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$NullReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$NullReader, get, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$NullReader, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$NullReader, size, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$NullReader, t_PackedInts$NullReader, ::org::apache::lucene::util::packed::PackedInts$Reader, PackedInts$NullReader, t_PackedInts$NullReader_init_, 0, 0, 0, 0, 0);

          void t_PackedInts$NullReader::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$NullReader), module, "PackedInts$NullReader", 0);
          }

          void t_PackedInts$NullReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$NullReader).tp_dict, "class_", make_descriptor(PackedInts$NullReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$NullReader).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$NullReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$NullReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$NullReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$NullReader::initializeClass, 1)))
              return NULL;
            return t_PackedInts$NullReader::wrap_Object(PackedInts$NullReader(((t_PackedInts$NullReader *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$NullReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$NullReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedInts$NullReader_init_(t_PackedInts$NullReader *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            PackedInts$NullReader object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = PackedInts$NullReader(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PackedInts$NullReader_get(t_PackedInts$NullReader *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jlong result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return PyLong_FromLongLong((PY_LONG_LONG) result);
                }
              }
              break;
             case 4:
              {
                jint a0;
                JArray< jlong > a1((jobject) NULL);
                jint a2;
                jint a3;
                jint result;

                if (!parseArgs(args, "I[JII", &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2, a3));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(PackedInts$NullReader), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_PackedInts$NullReader_ramBytesUsed(t_PackedInts$NullReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(PackedInts$NullReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_PackedInts$NullReader_size(t_PackedInts$NullReader *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PackedInts$NullReader), (PyObject *) self, "size", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SortedNumericDocValues::class$ = NULL;
        jmethodID *SortedNumericDocValues::mids$ = NULL;
        bool SortedNumericDocValues::live$ = false;

        jclass SortedNumericDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SortedNumericDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_count_54c6a179] = env->getMethodID(cls, "count", "()I");
            mids$[mid_setDocument_39c7bd3c] = env->getMethodID(cls, "setDocument", "(I)V");
            mids$[mid_valueAt_39c7bd20] = env->getMethodID(cls, "valueAt", "(I)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint SortedNumericDocValues::count() const
        {
          return env->callIntMethod(this$, mids$[mid_count_54c6a179]);
        }

        void SortedNumericDocValues::setDocument(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDocument_39c7bd3c], a0);
        }

        jlong SortedNumericDocValues::valueAt(jint a0) const
        {
          return env->callLongMethod(this$, mids$[mid_valueAt_39c7bd20], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SortedNumericDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericDocValues_count(t_SortedNumericDocValues *self);
        static PyObject *t_SortedNumericDocValues_setDocument(t_SortedNumericDocValues *self, PyObject *arg);
        static PyObject *t_SortedNumericDocValues_valueAt(t_SortedNumericDocValues *self, PyObject *arg);
        static int t_SortedNumericDocValues_set__document(t_SortedNumericDocValues *self, PyObject *arg, void *data);
        static PyGetSetDef t_SortedNumericDocValues__fields_[] = {
          DECLARE_SET_FIELD(t_SortedNumericDocValues, document),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortedNumericDocValues__methods_[] = {
          DECLARE_METHOD(t_SortedNumericDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericDocValues, count, METH_NOARGS),
          DECLARE_METHOD(t_SortedNumericDocValues, setDocument, METH_O),
          DECLARE_METHOD(t_SortedNumericDocValues, valueAt, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedNumericDocValues, t_SortedNumericDocValues, ::java::lang::Object, SortedNumericDocValues, abstract_init, 0, 0, t_SortedNumericDocValues__fields_, 0, 0);

        void t_SortedNumericDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedNumericDocValues), module, "SortedNumericDocValues", 0);
        }

        void t_SortedNumericDocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedNumericDocValues).tp_dict, "class_", make_descriptor(SortedNumericDocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedNumericDocValues).tp_dict, "wrapfn_", make_descriptor(t_SortedNumericDocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedNumericDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SortedNumericDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedNumericDocValues::initializeClass, 1)))
            return NULL;
          return t_SortedNumericDocValues::wrap_Object(SortedNumericDocValues(((t_SortedNumericDocValues *) arg)->object.this$));
        }
        static PyObject *t_SortedNumericDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedNumericDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SortedNumericDocValues_count(t_SortedNumericDocValues *self)
        {
          jint result;
          OBJ_CALL(result = self->object.count());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SortedNumericDocValues_setDocument(t_SortedNumericDocValues *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setDocument(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDocument", arg);
          return NULL;
        }

        static PyObject *t_SortedNumericDocValues_valueAt(t_SortedNumericDocValues *self, PyObject *arg)
        {
          jint a0;
          jlong result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.valueAt(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "valueAt", arg);
          return NULL;
        }

        static int t_SortedNumericDocValues_set__document(t_SortedNumericDocValues *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setDocument(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "document", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/mlt/MoreLikeThis.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/similarities/TFIDFSimilarity.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace mlt {

          ::java::lang::Class *MoreLikeThis::class$ = NULL;
          jmethodID *MoreLikeThis::mids$ = NULL;
          bool MoreLikeThis::live$ = false;
          jboolean MoreLikeThis::DEFAULT_BOOST = (jboolean) 0;
          JArray< ::java::lang::String > *MoreLikeThis::DEFAULT_FIELD_NAMES = NULL;
          jint MoreLikeThis::DEFAULT_MAX_DOC_FREQ = (jint) 0;
          jint MoreLikeThis::DEFAULT_MAX_NUM_TOKENS_PARSED = (jint) 0;
          jint MoreLikeThis::DEFAULT_MAX_QUERY_TERMS = (jint) 0;
          jint MoreLikeThis::DEFAULT_MAX_WORD_LENGTH = (jint) 0;
          jint MoreLikeThis::DEFAULT_MIN_DOC_FREQ = (jint) 0;
          jint MoreLikeThis::DEFAULT_MIN_TERM_FREQ = (jint) 0;
          jint MoreLikeThis::DEFAULT_MIN_WORD_LENGTH = (jint) 0;
          ::java::util::Set *MoreLikeThis::DEFAULT_STOP_WORDS = NULL;

          jclass MoreLikeThis::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/mlt/MoreLikeThis");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7d7eaea9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;)V");
              mids$[mid_init$_ac25be47] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/similarities/TFIDFSimilarity;)V");
              mids$[mid_describeParams_14c7b5c5] = env->getMethodID(cls, "describeParams", "()Ljava/lang/String;");
              mids$[mid_getAnalyzer_347f60a9] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
              mids$[mid_getBoostFactor_54c6a176] = env->getMethodID(cls, "getBoostFactor", "()F");
              mids$[mid_getFieldNames_2e6d5245] = env->getMethodID(cls, "getFieldNames", "()[Ljava/lang/String;");
              mids$[mid_getMaxDocFreq_54c6a179] = env->getMethodID(cls, "getMaxDocFreq", "()I");
              mids$[mid_getMaxNumTokensParsed_54c6a179] = env->getMethodID(cls, "getMaxNumTokensParsed", "()I");
              mids$[mid_getMaxQueryTerms_54c6a179] = env->getMethodID(cls, "getMaxQueryTerms", "()I");
              mids$[mid_getMaxWordLen_54c6a179] = env->getMethodID(cls, "getMaxWordLen", "()I");
              mids$[mid_getMinDocFreq_54c6a179] = env->getMethodID(cls, "getMinDocFreq", "()I");
              mids$[mid_getMinTermFreq_54c6a179] = env->getMethodID(cls, "getMinTermFreq", "()I");
              mids$[mid_getMinWordLen_54c6a179] = env->getMethodID(cls, "getMinWordLen", "()I");
              mids$[mid_getSimilarity_41a9d5af] = env->getMethodID(cls, "getSimilarity", "()Lorg/apache/lucene/search/similarities/TFIDFSimilarity;");
              mids$[mid_getStopWords_03e99967] = env->getMethodID(cls, "getStopWords", "()Ljava/util/Set;");
              mids$[mid_isBoost_54c6a16a] = env->getMethodID(cls, "isBoost", "()Z");
              mids$[mid_like_2ad233cc] = env->getMethodID(cls, "like", "(I)Lorg/apache/lucene/search/Query;");
              mids$[mid_like_8dd03cea] = env->getMethodID(cls, "like", "(Ljava/io/Reader;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_like_e557659a] = env->getMethodID(cls, "like", "(Ljava/lang/String;[Ljava/io/Reader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_retrieveInterestingTerms_d74df9a3] = env->getMethodID(cls, "retrieveInterestingTerms", "(I)[Ljava/lang/String;");
              mids$[mid_retrieveInterestingTerms_bf65abe1] = env->getMethodID(cls, "retrieveInterestingTerms", "(Ljava/io/Reader;Ljava/lang/String;)[Ljava/lang/String;");
              mids$[mid_setAnalyzer_31619410] = env->getMethodID(cls, "setAnalyzer", "(Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_setBoost_bb0c767f] = env->getMethodID(cls, "setBoost", "(Z)V");
              mids$[mid_setBoostFactor_06298cab] = env->getMethodID(cls, "setBoostFactor", "(F)V");
              mids$[mid_setFieldNames_4dd4540c] = env->getMethodID(cls, "setFieldNames", "([Ljava/lang/String;)V");
              mids$[mid_setMaxDocFreq_39c7bd3c] = env->getMethodID(cls, "setMaxDocFreq", "(I)V");
              mids$[mid_setMaxDocFreqPct_39c7bd3c] = env->getMethodID(cls, "setMaxDocFreqPct", "(I)V");
              mids$[mid_setMaxNumTokensParsed_39c7bd3c] = env->getMethodID(cls, "setMaxNumTokensParsed", "(I)V");
              mids$[mid_setMaxQueryTerms_39c7bd3c] = env->getMethodID(cls, "setMaxQueryTerms", "(I)V");
              mids$[mid_setMaxWordLen_39c7bd3c] = env->getMethodID(cls, "setMaxWordLen", "(I)V");
              mids$[mid_setMinDocFreq_39c7bd3c] = env->getMethodID(cls, "setMinDocFreq", "(I)V");
              mids$[mid_setMinTermFreq_39c7bd3c] = env->getMethodID(cls, "setMinTermFreq", "(I)V");
              mids$[mid_setMinWordLen_39c7bd3c] = env->getMethodID(cls, "setMinWordLen", "(I)V");
              mids$[mid_setSimilarity_8af31e2e] = env->getMethodID(cls, "setSimilarity", "(Lorg/apache/lucene/search/similarities/TFIDFSimilarity;)V");
              mids$[mid_setStopWords_fb4f2b26] = env->getMethodID(cls, "setStopWords", "(Ljava/util/Set;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_BOOST = env->getStaticBooleanField(cls, "DEFAULT_BOOST");
              DEFAULT_FIELD_NAMES = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "DEFAULT_FIELD_NAMES", "[Ljava/lang/String;"));
              DEFAULT_MAX_DOC_FREQ = env->getStaticIntField(cls, "DEFAULT_MAX_DOC_FREQ");
              DEFAULT_MAX_NUM_TOKENS_PARSED = env->getStaticIntField(cls, "DEFAULT_MAX_NUM_TOKENS_PARSED");
              DEFAULT_MAX_QUERY_TERMS = env->getStaticIntField(cls, "DEFAULT_MAX_QUERY_TERMS");
              DEFAULT_MAX_WORD_LENGTH = env->getStaticIntField(cls, "DEFAULT_MAX_WORD_LENGTH");
              DEFAULT_MIN_DOC_FREQ = env->getStaticIntField(cls, "DEFAULT_MIN_DOC_FREQ");
              DEFAULT_MIN_TERM_FREQ = env->getStaticIntField(cls, "DEFAULT_MIN_TERM_FREQ");
              DEFAULT_MIN_WORD_LENGTH = env->getStaticIntField(cls, "DEFAULT_MIN_WORD_LENGTH");
              DEFAULT_STOP_WORDS = new ::java::util::Set(env->getStaticObjectField(cls, "DEFAULT_STOP_WORDS", "Ljava/util/Set;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MoreLikeThis::MoreLikeThis(const ::org::apache::lucene::index::IndexReader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7d7eaea9, a0.this$)) {}

          MoreLikeThis::MoreLikeThis(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::similarities::TFIDFSimilarity & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ac25be47, a0.this$, a1.this$)) {}

          ::java::lang::String MoreLikeThis::describeParams() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_describeParams_14c7b5c5]));
          }

          ::org::apache::lucene::analysis::Analyzer MoreLikeThis::getAnalyzer() const
          {
            return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_347f60a9]));
          }

          jfloat MoreLikeThis::getBoostFactor() const
          {
            return env->callFloatMethod(this$, mids$[mid_getBoostFactor_54c6a176]);
          }

          JArray< ::java::lang::String > MoreLikeThis::getFieldNames() const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getFieldNames_2e6d5245]));
          }

          jint MoreLikeThis::getMaxDocFreq() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxDocFreq_54c6a179]);
          }

          jint MoreLikeThis::getMaxNumTokensParsed() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxNumTokensParsed_54c6a179]);
          }

          jint MoreLikeThis::getMaxQueryTerms() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxQueryTerms_54c6a179]);
          }

          jint MoreLikeThis::getMaxWordLen() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxWordLen_54c6a179]);
          }

          jint MoreLikeThis::getMinDocFreq() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinDocFreq_54c6a179]);
          }

          jint MoreLikeThis::getMinTermFreq() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinTermFreq_54c6a179]);
          }

          jint MoreLikeThis::getMinWordLen() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinWordLen_54c6a179]);
          }

          ::org::apache::lucene::search::similarities::TFIDFSimilarity MoreLikeThis::getSimilarity() const
          {
            return ::org::apache::lucene::search::similarities::TFIDFSimilarity(env->callObjectMethod(this$, mids$[mid_getSimilarity_41a9d5af]));
          }

          ::java::util::Set MoreLikeThis::getStopWords() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getStopWords_03e99967]));
          }

          jboolean MoreLikeThis::isBoost() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isBoost_54c6a16a]);
          }

          ::org::apache::lucene::search::Query MoreLikeThis::like(jint a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_like_2ad233cc], a0));
          }

          ::org::apache::lucene::search::Query MoreLikeThis::like(const ::java::io::Reader & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_like_8dd03cea], a0.this$, a1.this$));
          }

          ::org::apache::lucene::search::Query MoreLikeThis::like(const ::java::lang::String & a0, const JArray< ::java::io::Reader > & a1) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_like_e557659a], a0.this$, a1.this$));
          }

          JArray< ::java::lang::String > MoreLikeThis::retrieveInterestingTerms(jint a0) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_retrieveInterestingTerms_d74df9a3], a0));
          }

          JArray< ::java::lang::String > MoreLikeThis::retrieveInterestingTerms(const ::java::io::Reader & a0, const ::java::lang::String & a1) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_retrieveInterestingTerms_bf65abe1], a0.this$, a1.this$));
          }

          void MoreLikeThis::setAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAnalyzer_31619410], a0.this$);
          }

          void MoreLikeThis::setBoost(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setBoost_bb0c767f], a0);
          }

          void MoreLikeThis::setBoostFactor(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setBoostFactor_06298cab], a0);
          }

          void MoreLikeThis::setFieldNames(const JArray< ::java::lang::String > & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFieldNames_4dd4540c], a0.this$);
          }

          void MoreLikeThis::setMaxDocFreq(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxDocFreq_39c7bd3c], a0);
          }

          void MoreLikeThis::setMaxDocFreqPct(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxDocFreqPct_39c7bd3c], a0);
          }

          void MoreLikeThis::setMaxNumTokensParsed(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxNumTokensParsed_39c7bd3c], a0);
          }

          void MoreLikeThis::setMaxQueryTerms(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxQueryTerms_39c7bd3c], a0);
          }

          void MoreLikeThis::setMaxWordLen(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxWordLen_39c7bd3c], a0);
          }

          void MoreLikeThis::setMinDocFreq(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinDocFreq_39c7bd3c], a0);
          }

          void MoreLikeThis::setMinTermFreq(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinTermFreq_39c7bd3c], a0);
          }

          void MoreLikeThis::setMinWordLen(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinWordLen_39c7bd3c], a0);
          }

          void MoreLikeThis::setSimilarity(const ::org::apache::lucene::search::similarities::TFIDFSimilarity & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setSimilarity_8af31e2e], a0.this$);
          }

          void MoreLikeThis::setStopWords(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setStopWords_fb4f2b26], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace mlt {
          static PyObject *t_MoreLikeThis_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MoreLikeThis_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MoreLikeThis_init_(t_MoreLikeThis *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MoreLikeThis_describeParams(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getAnalyzer(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getBoostFactor(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getFieldNames(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMaxDocFreq(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMaxNumTokensParsed(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMaxQueryTerms(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMaxWordLen(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMinDocFreq(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMinTermFreq(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMinWordLen(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getSimilarity(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getStopWords(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_isBoost(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_like(t_MoreLikeThis *self, PyObject *args);
          static PyObject *t_MoreLikeThis_retrieveInterestingTerms(t_MoreLikeThis *self, PyObject *args);
          static PyObject *t_MoreLikeThis_setAnalyzer(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setBoost(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setBoostFactor(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setFieldNames(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMaxDocFreq(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMaxDocFreqPct(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMaxNumTokensParsed(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMaxQueryTerms(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMaxWordLen(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMinDocFreq(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMinTermFreq(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMinWordLen(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setSimilarity(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setStopWords(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_get__analyzer(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__analyzer(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__boost(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__boost(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__boostFactor(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__boostFactor(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__fieldNames(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__fieldNames(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__maxDocFreq(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__maxDocFreq(t_MoreLikeThis *self, PyObject *arg, void *data);
          static int t_MoreLikeThis_set__maxDocFreqPct(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__maxNumTokensParsed(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__maxNumTokensParsed(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__maxQueryTerms(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__maxQueryTerms(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__maxWordLen(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__maxWordLen(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__minDocFreq(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__minDocFreq(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__minTermFreq(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__minTermFreq(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__minWordLen(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__minWordLen(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__similarity(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__similarity(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__stopWords(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__stopWords(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyGetSetDef t_MoreLikeThis__fields_[] = {
            DECLARE_GETSET_FIELD(t_MoreLikeThis, analyzer),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, boost),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, boostFactor),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, fieldNames),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, maxDocFreq),
            DECLARE_SET_FIELD(t_MoreLikeThis, maxDocFreqPct),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, maxNumTokensParsed),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, maxQueryTerms),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, maxWordLen),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, minDocFreq),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, minTermFreq),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, minWordLen),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, similarity),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, stopWords),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MoreLikeThis__methods_[] = {
            DECLARE_METHOD(t_MoreLikeThis, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MoreLikeThis, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MoreLikeThis, describeParams, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getAnalyzer, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getBoostFactor, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getFieldNames, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMaxDocFreq, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMaxNumTokensParsed, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMaxQueryTerms, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMaxWordLen, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMinDocFreq, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMinTermFreq, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMinWordLen, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getSimilarity, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getStopWords, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, isBoost, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, like, METH_VARARGS),
            DECLARE_METHOD(t_MoreLikeThis, retrieveInterestingTerms, METH_VARARGS),
            DECLARE_METHOD(t_MoreLikeThis, setAnalyzer, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setBoost, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setBoostFactor, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setFieldNames, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMaxDocFreq, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMaxDocFreqPct, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMaxNumTokensParsed, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMaxQueryTerms, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMaxWordLen, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMinDocFreq, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMinTermFreq, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMinWordLen, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setSimilarity, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setStopWords, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MoreLikeThis, t_MoreLikeThis, ::java::lang::Object, MoreLikeThis, t_MoreLikeThis_init_, 0, 0, t_MoreLikeThis__fields_, 0, 0);

          void t_MoreLikeThis::install(PyObject *module)
          {
            installType(&PY_TYPE(MoreLikeThis), module, "MoreLikeThis", 0);
          }

          void t_MoreLikeThis::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "class_", make_descriptor(MoreLikeThis::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "wrapfn_", make_descriptor(t_MoreLikeThis::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(MoreLikeThis::initializeClass);
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_BOOST", make_descriptor(MoreLikeThis::DEFAULT_BOOST));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_FIELD_NAMES", make_descriptor(JArray<jstring>(MoreLikeThis::DEFAULT_FIELD_NAMES->this$).wrap()));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_MAX_DOC_FREQ", make_descriptor(MoreLikeThis::DEFAULT_MAX_DOC_FREQ));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_MAX_NUM_TOKENS_PARSED", make_descriptor(MoreLikeThis::DEFAULT_MAX_NUM_TOKENS_PARSED));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_MAX_QUERY_TERMS", make_descriptor(MoreLikeThis::DEFAULT_MAX_QUERY_TERMS));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_MAX_WORD_LENGTH", make_descriptor(MoreLikeThis::DEFAULT_MAX_WORD_LENGTH));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_MIN_DOC_FREQ", make_descriptor(MoreLikeThis::DEFAULT_MIN_DOC_FREQ));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_MIN_TERM_FREQ", make_descriptor(MoreLikeThis::DEFAULT_MIN_TERM_FREQ));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_MIN_WORD_LENGTH", make_descriptor(MoreLikeThis::DEFAULT_MIN_WORD_LENGTH));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_STOP_WORDS", make_descriptor(::java::util::t_Set::wrap_Object(*MoreLikeThis::DEFAULT_STOP_WORDS)));
          }

          static PyObject *t_MoreLikeThis_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MoreLikeThis::initializeClass, 1)))
              return NULL;
            return t_MoreLikeThis::wrap_Object(MoreLikeThis(((t_MoreLikeThis *) arg)->object.this$));
          }
          static PyObject *t_MoreLikeThis_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MoreLikeThis::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MoreLikeThis_init_(t_MoreLikeThis *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                MoreLikeThis object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
                {
                  INT_CALL(object = MoreLikeThis(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::org::apache::lucene::search::similarities::TFIDFSimilarity a1((jobject) NULL);
                MoreLikeThis object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::similarities::TFIDFSimilarity::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = MoreLikeThis(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MoreLikeThis_describeParams(t_MoreLikeThis *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.describeParams());
            return j2p(result);
          }

          static PyObject *t_MoreLikeThis_getAnalyzer(t_MoreLikeThis *self)
          {
            ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
            OBJ_CALL(result = self->object.getAnalyzer());
            return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
          }

          static PyObject *t_MoreLikeThis_getBoostFactor(t_MoreLikeThis *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getBoostFactor());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_MoreLikeThis_getFieldNames(t_MoreLikeThis *self)
          {
            JArray< ::java::lang::String > result((jobject) NULL);
            OBJ_CALL(result = self->object.getFieldNames());
            return JArray<jstring>(result.this$).wrap();
          }

          static PyObject *t_MoreLikeThis_getMaxDocFreq(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxDocFreq());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getMaxNumTokensParsed(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxNumTokensParsed());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getMaxQueryTerms(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxQueryTerms());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getMaxWordLen(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxWordLen());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getMinDocFreq(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinDocFreq());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getMinTermFreq(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinTermFreq());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getMinWordLen(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinWordLen());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getSimilarity(t_MoreLikeThis *self)
          {
            ::org::apache::lucene::search::similarities::TFIDFSimilarity result((jobject) NULL);
            OBJ_CALL(result = self->object.getSimilarity());
            return ::org::apache::lucene::search::similarities::t_TFIDFSimilarity::wrap_Object(result);
          }

          static PyObject *t_MoreLikeThis_getStopWords(t_MoreLikeThis *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.getStopWords());
            return ::java::util::t_Set::wrap_Object(result);
          }

          static PyObject *t_MoreLikeThis_isBoost(t_MoreLikeThis *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isBoost());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_MoreLikeThis_like(t_MoreLikeThis *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.like(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "ks", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.like(a0, a1));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                JArray< ::java::io::Reader > a1((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "s[k", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.like(a0, a1));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "like", args);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_retrieveInterestingTerms(t_MoreLikeThis *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.retrieveInterestingTerms(a0));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "ks", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.retrieveInterestingTerms(a0, a1));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "retrieveInterestingTerms", args);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setAnalyzer(t_MoreLikeThis *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setAnalyzer(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAnalyzer", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setBoost(t_MoreLikeThis *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setBoost(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setBoost", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setBoostFactor(t_MoreLikeThis *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setBoostFactor(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setBoostFactor", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setFieldNames(t_MoreLikeThis *self, PyObject *arg)
          {
            JArray< ::java::lang::String > a0((jobject) NULL);

            if (!parseArg(arg, "[s", &a0))
            {
              OBJ_CALL(self->object.setFieldNames(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFieldNames", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMaxDocFreq(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxDocFreq(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxDocFreq", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMaxDocFreqPct(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxDocFreqPct(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxDocFreqPct", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMaxNumTokensParsed(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxNumTokensParsed(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxNumTokensParsed", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMaxQueryTerms(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxQueryTerms(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxQueryTerms", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMaxWordLen(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxWordLen(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxWordLen", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMinDocFreq(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinDocFreq(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinDocFreq", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMinTermFreq(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinTermFreq(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinTermFreq", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMinWordLen(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinWordLen(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinWordLen", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setSimilarity(t_MoreLikeThis *self, PyObject *arg)
          {
            ::org::apache::lucene::search::similarities::TFIDFSimilarity a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::TFIDFSimilarity::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setSimilarity(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setSimilarity", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setStopWords(t_MoreLikeThis *self, PyObject *arg)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.setStopWords(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStopWords", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_get__analyzer(t_MoreLikeThis *self, void *data)
          {
            ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
            OBJ_CALL(value = self->object.getAnalyzer());
            return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
          }
          static int t_MoreLikeThis_set__analyzer(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &value))
              {
                INT_CALL(self->object.setAnalyzer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "analyzer", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__boost(t_MoreLikeThis *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isBoost());
            Py_RETURN_BOOL(value);
          }
          static int t_MoreLikeThis_set__boost(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setBoost(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "boost", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__boostFactor(t_MoreLikeThis *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getBoostFactor());
            return PyFloat_FromDouble((double) value);
          }
          static int t_MoreLikeThis_set__boostFactor(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setBoostFactor(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "boostFactor", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__fieldNames(t_MoreLikeThis *self, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldNames());
            return JArray<jstring>(value.this$).wrap();
          }
          static int t_MoreLikeThis_set__fieldNames(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              JArray< ::java::lang::String > value((jobject) NULL);
              if (!parseArg(arg, "[s", &value))
              {
                INT_CALL(self->object.setFieldNames(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fieldNames", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__maxDocFreq(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxDocFreq());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__maxDocFreq(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxDocFreq(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxDocFreq", arg);
            return -1;
          }

          static int t_MoreLikeThis_set__maxDocFreqPct(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxDocFreqPct(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxDocFreqPct", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__maxNumTokensParsed(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxNumTokensParsed());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__maxNumTokensParsed(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxNumTokensParsed(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxNumTokensParsed", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__maxQueryTerms(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxQueryTerms());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__maxQueryTerms(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxQueryTerms(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxQueryTerms", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__maxWordLen(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxWordLen());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__maxWordLen(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxWordLen(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxWordLen", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__minDocFreq(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinDocFreq());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__minDocFreq(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinDocFreq(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minDocFreq", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__minTermFreq(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinTermFreq());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__minTermFreq(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinTermFreq(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minTermFreq", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__minWordLen(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinWordLen());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__minWordLen(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinWordLen(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minWordLen", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__similarity(t_MoreLikeThis *self, void *data)
          {
            ::org::apache::lucene::search::similarities::TFIDFSimilarity value((jobject) NULL);
            OBJ_CALL(value = self->object.getSimilarity());
            return ::org::apache::lucene::search::similarities::t_TFIDFSimilarity::wrap_Object(value);
          }
          static int t_MoreLikeThis_set__similarity(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::similarities::TFIDFSimilarity value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::TFIDFSimilarity::initializeClass, &value))
              {
                INT_CALL(self->object.setSimilarity(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "similarity", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__stopWords(t_MoreLikeThis *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object.getStopWords());
            return ::java::util::t_Set::wrap_Object(value);
          }
          static int t_MoreLikeThis_set__stopWords(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Set value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Set::initializeClass, &value))
              {
                INT_CALL(self->object.setStopWords(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "stopWords", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FilteredQuery$RandomAccessFilterStrategy.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FilteredQuery$RandomAccessFilterStrategy::class$ = NULL;
        jmethodID *FilteredQuery$RandomAccessFilterStrategy::mids$ = NULL;
        bool FilteredQuery$RandomAccessFilterStrategy::live$ = false;

        jclass FilteredQuery$RandomAccessFilterStrategy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FilteredQuery$RandomAccessFilterStrategy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_filteredScorer_05f41f97] = env->getMethodID(cls, "filteredScorer", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/search/DocIdSet;)Lorg/apache/lucene/search/Scorer;");
            mids$[mid_useRandomAccess_7abf89aa] = env->getMethodID(cls, "useRandomAccess", "(Lorg/apache/lucene/util/Bits;I)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilteredQuery$RandomAccessFilterStrategy::FilteredQuery$RandomAccessFilterStrategy() : ::org::apache::lucene::search::FilteredQuery$FilterStrategy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::Scorer FilteredQuery$RandomAccessFilterStrategy::filteredScorer(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::search::Weight & a1, const ::org::apache::lucene::search::DocIdSet & a2) const
        {
          return ::org::apache::lucene::search::Scorer(env->callObjectMethod(this$, mids$[mid_filteredScorer_05f41f97], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FilteredQuery$RandomAccessFilterStrategy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilteredQuery$RandomAccessFilterStrategy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilteredQuery$RandomAccessFilterStrategy_init_(t_FilteredQuery$RandomAccessFilterStrategy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilteredQuery$RandomAccessFilterStrategy_filteredScorer(t_FilteredQuery$RandomAccessFilterStrategy *self, PyObject *args);

        static PyMethodDef t_FilteredQuery$RandomAccessFilterStrategy__methods_[] = {
          DECLARE_METHOD(t_FilteredQuery$RandomAccessFilterStrategy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredQuery$RandomAccessFilterStrategy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredQuery$RandomAccessFilterStrategy, filteredScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilteredQuery$RandomAccessFilterStrategy, t_FilteredQuery$RandomAccessFilterStrategy, ::org::apache::lucene::search::FilteredQuery$FilterStrategy, FilteredQuery$RandomAccessFilterStrategy, t_FilteredQuery$RandomAccessFilterStrategy_init_, 0, 0, 0, 0, 0);

        void t_FilteredQuery$RandomAccessFilterStrategy::install(PyObject *module)
        {
          installType(&PY_TYPE(FilteredQuery$RandomAccessFilterStrategy), module, "FilteredQuery$RandomAccessFilterStrategy", 0);
        }

        void t_FilteredQuery$RandomAccessFilterStrategy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilteredQuery$RandomAccessFilterStrategy).tp_dict, "class_", make_descriptor(FilteredQuery$RandomAccessFilterStrategy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilteredQuery$RandomAccessFilterStrategy).tp_dict, "wrapfn_", make_descriptor(t_FilteredQuery$RandomAccessFilterStrategy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilteredQuery$RandomAccessFilterStrategy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilteredQuery$RandomAccessFilterStrategy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilteredQuery$RandomAccessFilterStrategy::initializeClass, 1)))
            return NULL;
          return t_FilteredQuery$RandomAccessFilterStrategy::wrap_Object(FilteredQuery$RandomAccessFilterStrategy(((t_FilteredQuery$RandomAccessFilterStrategy *) arg)->object.this$));
        }
        static PyObject *t_FilteredQuery$RandomAccessFilterStrategy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilteredQuery$RandomAccessFilterStrategy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilteredQuery$RandomAccessFilterStrategy_init_(t_FilteredQuery$RandomAccessFilterStrategy *self, PyObject *args, PyObject *kwds)
        {
          FilteredQuery$RandomAccessFilterStrategy object((jobject) NULL);

          INT_CALL(object = FilteredQuery$RandomAccessFilterStrategy());
          self->object = object;

          return 0;
        }

        static PyObject *t_FilteredQuery$RandomAccessFilterStrategy_filteredScorer(t_FilteredQuery$RandomAccessFilterStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::Weight a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet a2((jobject) NULL);
          ::org::apache::lucene::search::Scorer result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::search::Weight::initializeClass, ::org::apache::lucene::search::DocIdSet::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.filteredScorer(a0, a1, a2));
            return ::org::apache::lucene::search::t_Scorer::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredQuery$RandomAccessFilterStrategy), (PyObject *) self, "filteredScorer", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TopFieldCollector.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/FieldValueHitQueue$Entry.h"
#include "org/apache/lucene/search/FieldDoc.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TopFieldCollector::class$ = NULL;
        jmethodID *TopFieldCollector::mids$ = NULL;
        bool TopFieldCollector::live$ = false;

        jclass TopFieldCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TopFieldCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_create_ea5994c0] = env->getStaticMethodID(cls, "create", "(Lorg/apache/lucene/search/Sort;IZZZZ)Lorg/apache/lucene/search/TopFieldCollector;");
            mids$[mid_create_be0959c2] = env->getStaticMethodID(cls, "create", "(Lorg/apache/lucene/search/Sort;ILorg/apache/lucene/search/FieldDoc;ZZZZ)Lorg/apache/lucene/search/TopFieldCollector;");
            mids$[mid_populateResults_fbb5e76c] = env->getMethodID(cls, "populateResults", "([Lorg/apache/lucene/search/ScoreDoc;I)V");
            mids$[mid_newTopDocs_a5bceb12] = env->getMethodID(cls, "newTopDocs", "([Lorg/apache/lucene/search/ScoreDoc;I)Lorg/apache/lucene/search/TopDocs;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean TopFieldCollector::acceptsDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
        }

        TopFieldCollector TopFieldCollector::create(const ::org::apache::lucene::search::Sort & a0, jint a1, jboolean a2, jboolean a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return TopFieldCollector(env->callStaticObjectMethod(cls, mids$[mid_create_ea5994c0], a0.this$, a1, a2, a3, a4, a5));
        }

        TopFieldCollector TopFieldCollector::create(const ::org::apache::lucene::search::Sort & a0, jint a1, const ::org::apache::lucene::search::FieldDoc & a2, jboolean a3, jboolean a4, jboolean a5, jboolean a6)
        {
          jclass cls = env->getClass(initializeClass);
          return TopFieldCollector(env->callStaticObjectMethod(cls, mids$[mid_create_be0959c2], a0.this$, a1, a2.this$, a3, a4, a5, a6));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TopFieldCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopFieldCollector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopFieldCollector_of_(t_TopFieldCollector *self, PyObject *args);
        static PyObject *t_TopFieldCollector_acceptsDocsOutOfOrder(t_TopFieldCollector *self, PyObject *args);
        static PyObject *t_TopFieldCollector_create(PyTypeObject *type, PyObject *args);
        static PyObject *t_TopFieldCollector_get__parameters_(t_TopFieldCollector *self, void *data);
        static PyGetSetDef t_TopFieldCollector__fields_[] = {
          DECLARE_GET_FIELD(t_TopFieldCollector, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopFieldCollector__methods_[] = {
          DECLARE_METHOD(t_TopFieldCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopFieldCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopFieldCollector, of_, METH_VARARGS),
          DECLARE_METHOD(t_TopFieldCollector, acceptsDocsOutOfOrder, METH_VARARGS),
          DECLARE_METHOD(t_TopFieldCollector, create, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopFieldCollector, t_TopFieldCollector, ::org::apache::lucene::search::TopDocsCollector, TopFieldCollector, abstract_init, 0, 0, t_TopFieldCollector__fields_, 0, 0);
        PyObject *t_TopFieldCollector::wrap_Object(const TopFieldCollector& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopFieldCollector::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopFieldCollector *self = (t_TopFieldCollector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopFieldCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopFieldCollector::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopFieldCollector *self = (t_TopFieldCollector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopFieldCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(TopFieldCollector), module, "TopFieldCollector", 0);
        }

        void t_TopFieldCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopFieldCollector).tp_dict, "class_", make_descriptor(TopFieldCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopFieldCollector).tp_dict, "wrapfn_", make_descriptor(t_TopFieldCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopFieldCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopFieldCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopFieldCollector::initializeClass, 1)))
            return NULL;
          return t_TopFieldCollector::wrap_Object(TopFieldCollector(((t_TopFieldCollector *) arg)->object.this$));
        }
        static PyObject *t_TopFieldCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopFieldCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopFieldCollector_of_(t_TopFieldCollector *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_TopFieldCollector_acceptsDocsOutOfOrder(t_TopFieldCollector *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TopFieldCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
        }

        static PyObject *t_TopFieldCollector_create(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 6:
            {
              ::org::apache::lucene::search::Sort a0((jobject) NULL);
              jint a1;
              jboolean a2;
              jboolean a3;
              jboolean a4;
              jboolean a5;
              TopFieldCollector result((jobject) NULL);

              if (!parseArgs(args, "kIZZZZ", ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::TopFieldCollector::create(a0, a1, a2, a3, a4, a5));
                return t_TopFieldCollector::wrap_Object(result);
              }
            }
            break;
           case 7:
            {
              ::org::apache::lucene::search::Sort a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::search::FieldDoc a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              jboolean a5;
              jboolean a6;
              TopFieldCollector result((jobject) NULL);

              if (!parseArgs(args, "kIkZZZZ", ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::FieldDoc::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::TopFieldCollector::create(a0, a1, a2, a3, a4, a5, a6));
                return t_TopFieldCollector::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "create", args);
          return NULL;
        }
        static PyObject *t_TopFieldCollector_get__parameters_(t_TopFieldCollector *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$unary_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$unary_return::class$ = NULL;
          jmethodID *JavascriptParser$unary_return::mids$ = NULL;
          bool JavascriptParser$unary_return::live$ = false;

          jclass JavascriptParser$unary_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$unary_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$unary_return::JavascriptParser$unary_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$unary_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$unary_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$unary_return_init_(t_JavascriptParser$unary_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$unary_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$unary_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$unary_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$unary_return, t_JavascriptParser$unary_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$unary_return, t_JavascriptParser$unary_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$unary_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$unary_return), module, "JavascriptParser$unary_return", 0);
          }

          void t_JavascriptParser$unary_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$unary_return).tp_dict, "class_", make_descriptor(JavascriptParser$unary_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$unary_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$unary_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$unary_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$unary_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$unary_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$unary_return::wrap_Object(JavascriptParser$unary_return(((t_JavascriptParser$unary_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$unary_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$unary_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$unary_return_init_(t_JavascriptParser$unary_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$unary_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$unary_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$arguments_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$arguments_return::class$ = NULL;
          jmethodID *JavascriptParser$arguments_return::mids$ = NULL;
          bool JavascriptParser$arguments_return::live$ = false;

          jclass JavascriptParser$arguments_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$arguments_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$arguments_return::JavascriptParser$arguments_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$arguments_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$arguments_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$arguments_return_init_(t_JavascriptParser$arguments_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$arguments_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$arguments_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$arguments_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$arguments_return, t_JavascriptParser$arguments_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$arguments_return, t_JavascriptParser$arguments_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$arguments_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$arguments_return), module, "JavascriptParser$arguments_return", 0);
          }

          void t_JavascriptParser$arguments_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$arguments_return).tp_dict, "class_", make_descriptor(JavascriptParser$arguments_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$arguments_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$arguments_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$arguments_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$arguments_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$arguments_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$arguments_return::wrap_Object(JavascriptParser$arguments_return(((t_JavascriptParser$arguments_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$arguments_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$arguments_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$arguments_return_init_(t_JavascriptParser$arguments_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$arguments_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$arguments_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/analysis/PythonAnalyzer.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {

        ::java::lang::Class *PythonAnalyzer::class$ = NULL;
        jmethodID *PythonAnalyzer::mids$ = NULL;
        bool PythonAnalyzer::live$ = false;

        jclass PythonAnalyzer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/analysis/PythonAnalyzer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonAnalyzer::PythonAnalyzer() : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonAnalyzer::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonAnalyzer::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonAnalyzer::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {
        static PyObject *t_PythonAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonAnalyzer_init_(t_PythonAnalyzer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonAnalyzer_finalize(t_PythonAnalyzer *self);
        static PyObject *t_PythonAnalyzer_pythonExtension(t_PythonAnalyzer *self, PyObject *args);
        static jobject JNICALL t_PythonAnalyzer_createComponents0(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
        static void JNICALL t_PythonAnalyzer_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonAnalyzer_get__self(t_PythonAnalyzer *self, void *data);
        static PyGetSetDef t_PythonAnalyzer__fields_[] = {
          DECLARE_GET_FIELD(t_PythonAnalyzer, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonAnalyzer__methods_[] = {
          DECLARE_METHOD(t_PythonAnalyzer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonAnalyzer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonAnalyzer, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonAnalyzer, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonAnalyzer, t_PythonAnalyzer, ::org::apache::lucene::analysis::Analyzer, PythonAnalyzer, t_PythonAnalyzer_init_, 0, 0, t_PythonAnalyzer__fields_, 0, 0);

        void t_PythonAnalyzer::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonAnalyzer), module, "PythonAnalyzer", 1);
        }

        void t_PythonAnalyzer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonAnalyzer).tp_dict, "class_", make_descriptor(PythonAnalyzer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_PythonAnalyzer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonAnalyzer::initializeClass);
          JNINativeMethod methods[] = {
            { "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;", (void *) t_PythonAnalyzer_createComponents0 },
            { "pythonDecRef", "()V", (void *) t_PythonAnalyzer_pythonDecRef1 },
          };
          env->registerNatives(cls, methods, 2);
        }

        static PyObject *t_PythonAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonAnalyzer::initializeClass, 1)))
            return NULL;
          return t_PythonAnalyzer::wrap_Object(PythonAnalyzer(((t_PythonAnalyzer *) arg)->object.this$));
        }
        static PyObject *t_PythonAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonAnalyzer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonAnalyzer_init_(t_PythonAnalyzer *self, PyObject *args, PyObject *kwds)
        {
          PythonAnalyzer object((jobject) NULL);

          INT_CALL(object = PythonAnalyzer());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonAnalyzer_finalize(t_PythonAnalyzer *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonAnalyzer_pythonExtension(t_PythonAnalyzer *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jobject JNICALL t_PythonAnalyzer_createComponents0(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAnalyzer::mids$[PythonAnalyzer::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents value((jobject) NULL);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *o1 = ::java::io::t_Reader::wrap_Object(::java::io::Reader(a1));
          PyObject *result = PyObject_CallMethod(obj, "createComponents", "OO", o0, o1);
          Py_DECREF(o0);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents::initializeClass, &value))
          {
            throwTypeError("createComponents", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonAnalyzer_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAnalyzer::mids$[PythonAnalyzer::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonAnalyzer::mids$[PythonAnalyzer::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonAnalyzer_get__self(t_PythonAnalyzer *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/KeywordRepeatFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *KeywordRepeatFilterFactory::class$ = NULL;
          jmethodID *KeywordRepeatFilterFactory::mids$ = NULL;
          bool KeywordRepeatFilterFactory::live$ = false;

          jclass KeywordRepeatFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/KeywordRepeatFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordRepeatFilterFactory::KeywordRepeatFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream KeywordRepeatFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_KeywordRepeatFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordRepeatFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordRepeatFilterFactory_init_(t_KeywordRepeatFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeywordRepeatFilterFactory_create(t_KeywordRepeatFilterFactory *self, PyObject *args);

          static PyMethodDef t_KeywordRepeatFilterFactory__methods_[] = {
            DECLARE_METHOD(t_KeywordRepeatFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordRepeatFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordRepeatFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordRepeatFilterFactory, t_KeywordRepeatFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, KeywordRepeatFilterFactory, t_KeywordRepeatFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_KeywordRepeatFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordRepeatFilterFactory), module, "KeywordRepeatFilterFactory", 0);
          }

          void t_KeywordRepeatFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordRepeatFilterFactory).tp_dict, "class_", make_descriptor(KeywordRepeatFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordRepeatFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_KeywordRepeatFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordRepeatFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeywordRepeatFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordRepeatFilterFactory::initializeClass, 1)))
              return NULL;
            return t_KeywordRepeatFilterFactory::wrap_Object(KeywordRepeatFilterFactory(((t_KeywordRepeatFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_KeywordRepeatFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordRepeatFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordRepeatFilterFactory_init_(t_KeywordRepeatFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            KeywordRepeatFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = KeywordRepeatFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeywordRepeatFilterFactory_create(t_KeywordRepeatFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(KeywordRepeatFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharArrayMap$EntryIterator.h"
#include "java/util/Iterator.h"
#include "java/lang/String.h"
#include "java/util/Map$Entry.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharArrayMap$EntryIterator::class$ = NULL;
          jmethodID *CharArrayMap$EntryIterator::mids$ = NULL;
          bool CharArrayMap$EntryIterator::live$ = false;

          jclass CharArrayMap$EntryIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharArrayMap$EntryIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_currentValue_846352c3] = env->getMethodID(cls, "currentValue", "()Ljava/lang/Object;");
              mids$[mid_hasNext_54c6a16a] = env->getMethodID(cls, "hasNext", "()Z");
              mids$[mid_next_2971780b] = env->getMethodID(cls, "next", "()Ljava/util/Map$Entry;");
              mids$[mid_nextKey_dab10e7f] = env->getMethodID(cls, "nextKey", "()[C");
              mids$[mid_nextKeyString_14c7b5c5] = env->getMethodID(cls, "nextKeyString", "()Ljava/lang/String;");
              mids$[mid_remove_54c6a166] = env->getMethodID(cls, "remove", "()V");
              mids$[mid_setValue_a932a95f] = env->getMethodID(cls, "setValue", "(Ljava/lang/Object;)Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Object CharArrayMap$EntryIterator::currentValue() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_currentValue_846352c3]));
          }

          jboolean CharArrayMap$EntryIterator::hasNext() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasNext_54c6a16a]);
          }

          ::java::util::Map$Entry CharArrayMap$EntryIterator::next() const
          {
            return ::java::util::Map$Entry(env->callObjectMethod(this$, mids$[mid_next_2971780b]));
          }

          JArray< jchar > CharArrayMap$EntryIterator::nextKey() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_nextKey_dab10e7f]));
          }

          ::java::lang::String CharArrayMap$EntryIterator::nextKeyString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_nextKeyString_14c7b5c5]));
          }

          void CharArrayMap$EntryIterator::remove() const
          {
            env->callVoidMethod(this$, mids$[mid_remove_54c6a166]);
          }

          ::java::lang::Object CharArrayMap$EntryIterator::setValue(const ::java::lang::Object & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_setValue_a932a95f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharArrayMap$EntryIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayMap$EntryIterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayMap$EntryIterator_of_(t_CharArrayMap$EntryIterator *self, PyObject *args);
          static PyObject *t_CharArrayMap$EntryIterator_currentValue(t_CharArrayMap$EntryIterator *self);
          static PyObject *t_CharArrayMap$EntryIterator_hasNext(t_CharArrayMap$EntryIterator *self);
          static PyObject *t_CharArrayMap$EntryIterator_next(t_CharArrayMap$EntryIterator *self);
          static PyObject *t_CharArrayMap$EntryIterator_nextKey(t_CharArrayMap$EntryIterator *self);
          static PyObject *t_CharArrayMap$EntryIterator_nextKeyString(t_CharArrayMap$EntryIterator *self);
          static PyObject *t_CharArrayMap$EntryIterator_remove(t_CharArrayMap$EntryIterator *self);
          static PyObject *t_CharArrayMap$EntryIterator_setValue(t_CharArrayMap$EntryIterator *self, PyObject *arg);
          static int t_CharArrayMap$EntryIterator_set__value(t_CharArrayMap$EntryIterator *self, PyObject *arg, void *data);
          static PyObject *t_CharArrayMap$EntryIterator_get__parameters_(t_CharArrayMap$EntryIterator *self, void *data);
          static PyGetSetDef t_CharArrayMap$EntryIterator__fields_[] = {
            DECLARE_SET_FIELD(t_CharArrayMap$EntryIterator, value),
            DECLARE_GET_FIELD(t_CharArrayMap$EntryIterator, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharArrayMap$EntryIterator__methods_[] = {
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, of_, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, currentValue, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, hasNext, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, next, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, nextKey, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, nextKeyString, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, remove, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, setValue, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharArrayMap$EntryIterator, t_CharArrayMap$EntryIterator, ::java::lang::Object, CharArrayMap$EntryIterator, abstract_init, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Iterator *)) get_generic_iterator_next< ::java::util::t_Iterator,::java::util::t_Map$Entry >), t_CharArrayMap$EntryIterator__fields_, 0, 0);
          PyObject *t_CharArrayMap$EntryIterator::wrap_Object(const CharArrayMap$EntryIterator& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharArrayMap$EntryIterator::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharArrayMap$EntryIterator *self = (t_CharArrayMap$EntryIterator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_CharArrayMap$EntryIterator::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharArrayMap$EntryIterator::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharArrayMap$EntryIterator *self = (t_CharArrayMap$EntryIterator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_CharArrayMap$EntryIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(CharArrayMap$EntryIterator), module, "CharArrayMap$EntryIterator", 0);
          }

          void t_CharArrayMap$EntryIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharArrayMap$EntryIterator).tp_dict, "class_", make_descriptor(CharArrayMap$EntryIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharArrayMap$EntryIterator).tp_dict, "wrapfn_", make_descriptor(t_CharArrayMap$EntryIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharArrayMap$EntryIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharArrayMap$EntryIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharArrayMap$EntryIterator::initializeClass, 1)))
              return NULL;
            return t_CharArrayMap$EntryIterator::wrap_Object(CharArrayMap$EntryIterator(((t_CharArrayMap$EntryIterator *) arg)->object.this$));
          }
          static PyObject *t_CharArrayMap$EntryIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharArrayMap$EntryIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharArrayMap$EntryIterator_of_(t_CharArrayMap$EntryIterator *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_CharArrayMap$EntryIterator_currentValue(t_CharArrayMap$EntryIterator *self)
          {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.currentValue());
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          static PyObject *t_CharArrayMap$EntryIterator_hasNext(t_CharArrayMap$EntryIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasNext());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_CharArrayMap$EntryIterator_next(t_CharArrayMap$EntryIterator *self)
          {
            ::java::util::Map$Entry result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::java::util::t_Map$Entry::wrap_Object(result, &::java::lang::PY_TYPE(Object), self->parameters[0]);
          }

          static PyObject *t_CharArrayMap$EntryIterator_nextKey(t_CharArrayMap$EntryIterator *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.nextKey());
            return result.wrap();
          }

          static PyObject *t_CharArrayMap$EntryIterator_nextKeyString(t_CharArrayMap$EntryIterator *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.nextKeyString());
            return j2p(result);
          }

          static PyObject *t_CharArrayMap$EntryIterator_remove(t_CharArrayMap$EntryIterator *self)
          {
            OBJ_CALL(self->object.remove());
            Py_RETURN_NONE;
          }

          static PyObject *t_CharArrayMap$EntryIterator_setValue(t_CharArrayMap$EntryIterator *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArg(arg, "o", &a0))
            {
              OBJ_CALL(result = self->object.setValue(a0));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setValue", arg);
            return NULL;
          }
          static PyObject *t_CharArrayMap$EntryIterator_get__parameters_(t_CharArrayMap$EntryIterator *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_CharArrayMap$EntryIterator_set__value(t_CharArrayMap$EntryIterator *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::Object value((jobject) NULL);
              if (!parseArg(arg, "o", &value))
              {
                INT_CALL(self->object.setValue(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/FieldMaskingSpanQuery.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/TermContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *FieldMaskingSpanQuery::class$ = NULL;
          jmethodID *FieldMaskingSpanQuery::mids$ = NULL;
          bool FieldMaskingSpanQuery::live$ = false;

          jclass FieldMaskingSpanQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/FieldMaskingSpanQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_58455a11] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Ljava/lang/String;)V");
              mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getMaskedQuery_d3aa0332] = env->getMethodID(cls, "getMaskedQuery", "()Lorg/apache/lucene/search/spans/SpanQuery;");
              mids$[mid_getSpans_f003cb44] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldMaskingSpanQuery::FieldMaskingSpanQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::java::lang::String & a1) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_58455a11, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::Weight FieldMaskingSpanQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
          }

          jboolean FieldMaskingSpanQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void FieldMaskingSpanQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          ::java::lang::String FieldMaskingSpanQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::search::spans::SpanQuery FieldMaskingSpanQuery::getMaskedQuery() const
          {
            return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_getMaskedQuery_d3aa0332]));
          }

          ::org::apache::lucene::search::spans::Spans FieldMaskingSpanQuery::getSpans(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::util::Map & a2) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_f003cb44], a0.this$, a1.this$, a2.this$));
          }

          jint FieldMaskingSpanQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query FieldMaskingSpanQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          ::java::lang::String FieldMaskingSpanQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_FieldMaskingSpanQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldMaskingSpanQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldMaskingSpanQuery_init_(t_FieldMaskingSpanQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldMaskingSpanQuery_createWeight(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_equals(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_extractTerms(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_getField(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_getMaskedQuery(t_FieldMaskingSpanQuery *self);
          static PyObject *t_FieldMaskingSpanQuery_getSpans(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_hashCode(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_rewrite(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_toString(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_get__field(t_FieldMaskingSpanQuery *self, void *data);
          static PyObject *t_FieldMaskingSpanQuery_get__maskedQuery(t_FieldMaskingSpanQuery *self, void *data);
          static PyGetSetDef t_FieldMaskingSpanQuery__fields_[] = {
            DECLARE_GET_FIELD(t_FieldMaskingSpanQuery, field),
            DECLARE_GET_FIELD(t_FieldMaskingSpanQuery, maskedQuery),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldMaskingSpanQuery__methods_[] = {
            DECLARE_METHOD(t_FieldMaskingSpanQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, getMaskedQuery, METH_NOARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldMaskingSpanQuery, t_FieldMaskingSpanQuery, ::org::apache::lucene::search::spans::SpanQuery, FieldMaskingSpanQuery, t_FieldMaskingSpanQuery_init_, 0, 0, t_FieldMaskingSpanQuery__fields_, 0, 0);

          void t_FieldMaskingSpanQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldMaskingSpanQuery), module, "FieldMaskingSpanQuery", 0);
          }

          void t_FieldMaskingSpanQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldMaskingSpanQuery).tp_dict, "class_", make_descriptor(FieldMaskingSpanQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldMaskingSpanQuery).tp_dict, "wrapfn_", make_descriptor(t_FieldMaskingSpanQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldMaskingSpanQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldMaskingSpanQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldMaskingSpanQuery::initializeClass, 1)))
              return NULL;
            return t_FieldMaskingSpanQuery::wrap_Object(FieldMaskingSpanQuery(((t_FieldMaskingSpanQuery *) arg)->object.this$));
          }
          static PyObject *t_FieldMaskingSpanQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldMaskingSpanQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldMaskingSpanQuery_init_(t_FieldMaskingSpanQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            FieldMaskingSpanQuery object((jobject) NULL);

            if (!parseArgs(args, "ks", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1))
            {
              INT_CALL(object = FieldMaskingSpanQuery(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldMaskingSpanQuery_createWeight(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.createWeight(a0));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_equals(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_extractTerms(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_getField(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_getMaskedQuery(t_FieldMaskingSpanQuery *self)
          {
            ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);
            OBJ_CALL(result = self->object.getMaskedQuery());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
          }

          static PyObject *t_FieldMaskingSpanQuery_getSpans(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_hashCode(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_rewrite(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_toString(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_get__field(t_FieldMaskingSpanQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_FieldMaskingSpanQuery_get__maskedQuery(t_FieldMaskingSpanQuery *self, void *data)
          {
            ::org::apache::lucene::search::spans::SpanQuery value((jobject) NULL);
            OBJ_CALL(value = self->object.getMaskedQuery());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/PrefixWildcardQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *PrefixWildcardQueryNode::class$ = NULL;
              jmethodID *PrefixWildcardQueryNode::mids$ = NULL;
              bool PrefixWildcardQueryNode::live$ = false;

              jclass PrefixWildcardQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/PrefixWildcardQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_ddeda85c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode;)V");
                  mids$[mid_init$_ddd81d4e] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;II)V");
                  mids$[mid_cloneTree_45dffc2c] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/standard/nodes/PrefixWildcardQueryNode;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PrefixWildcardQueryNode::PrefixWildcardQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode & a0) : ::org::apache::lucene::queryparser::flexible::standard::nodes::WildcardQueryNode(env->newObject(initializeClass, &mids$, mid_init$_ddeda85c, a0.this$)) {}

              PrefixWildcardQueryNode::PrefixWildcardQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1, jint a2, jint a3) : ::org::apache::lucene::queryparser::flexible::standard::nodes::WildcardQueryNode(env->newObject(initializeClass, &mids$, mid_init$_ddd81d4e, a0.this$, a1.this$, a2, a3)) {}

              PrefixWildcardQueryNode PrefixWildcardQueryNode::cloneTree() const
              {
                return PrefixWildcardQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_45dffc2c]));
              }

              ::java::lang::String PrefixWildcardQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_PrefixWildcardQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PrefixWildcardQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PrefixWildcardQueryNode_init_(t_PrefixWildcardQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PrefixWildcardQueryNode_cloneTree(t_PrefixWildcardQueryNode *self, PyObject *args);
              static PyObject *t_PrefixWildcardQueryNode_toString(t_PrefixWildcardQueryNode *self, PyObject *args);

              static PyMethodDef t_PrefixWildcardQueryNode__methods_[] = {
                DECLARE_METHOD(t_PrefixWildcardQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PrefixWildcardQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PrefixWildcardQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_PrefixWildcardQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(PrefixWildcardQueryNode, t_PrefixWildcardQueryNode, ::org::apache::lucene::queryparser::flexible::standard::nodes::WildcardQueryNode, PrefixWildcardQueryNode, t_PrefixWildcardQueryNode_init_, 0, 0, 0, 0, 0);

              void t_PrefixWildcardQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(PrefixWildcardQueryNode), module, "PrefixWildcardQueryNode", 0);
              }

              void t_PrefixWildcardQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(PrefixWildcardQueryNode).tp_dict, "class_", make_descriptor(PrefixWildcardQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(PrefixWildcardQueryNode).tp_dict, "wrapfn_", make_descriptor(t_PrefixWildcardQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(PrefixWildcardQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PrefixWildcardQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PrefixWildcardQueryNode::initializeClass, 1)))
                  return NULL;
                return t_PrefixWildcardQueryNode::wrap_Object(PrefixWildcardQueryNode(((t_PrefixWildcardQueryNode *) arg)->object.this$));
              }
              static PyObject *t_PrefixWildcardQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PrefixWildcardQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PrefixWildcardQueryNode_init_(t_PrefixWildcardQueryNode *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode a0((jobject) NULL);
                    PrefixWildcardQueryNode object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode::initializeClass, &a0))
                    {
                      INT_CALL(object = PrefixWildcardQueryNode(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 4:
                  {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    ::java::lang::CharSequence a1((jobject) NULL);
                    jint a2;
                    jint a3;
                    PrefixWildcardQueryNode object((jobject) NULL);

                    if (!parseArgs(args, "OOII", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                    {
                      INT_CALL(object = PrefixWildcardQueryNode(a0, a1, a2, a3));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_PrefixWildcardQueryNode_cloneTree(t_PrefixWildcardQueryNode *self, PyObject *args)
              {
                PrefixWildcardQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_PrefixWildcardQueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(PrefixWildcardQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_PrefixWildcardQueryNode_toString(t_PrefixWildcardQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(PrefixWildcardQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModelIne.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModelIne::class$ = NULL;
          jmethodID *BasicModelIne::mids$ = NULL;
          bool BasicModelIne::live$ = false;

          jclass BasicModelIne::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModelIne");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModelIne::BasicModelIne() : ::org::apache::lucene::search::similarities::BasicModel(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat BasicModelIne::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String BasicModelIne::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModelIne_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModelIne_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModelIne_init_(t_BasicModelIne *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModelIne_score(t_BasicModelIne *self, PyObject *args);
          static PyObject *t_BasicModelIne_toString(t_BasicModelIne *self, PyObject *args);

          static PyMethodDef t_BasicModelIne__methods_[] = {
            DECLARE_METHOD(t_BasicModelIne, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelIne, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelIne, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelIne, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicModelIne, t_BasicModelIne, ::org::apache::lucene::search::similarities::BasicModel, BasicModelIne, t_BasicModelIne_init_, 0, 0, 0, 0, 0);

          void t_BasicModelIne::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModelIne), module, "BasicModelIne", 0);
          }

          void t_BasicModelIne::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicModelIne).tp_dict, "class_", make_descriptor(BasicModelIne::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicModelIne).tp_dict, "wrapfn_", make_descriptor(t_BasicModelIne::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicModelIne).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModelIne_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModelIne::initializeClass, 1)))
              return NULL;
            return t_BasicModelIne::wrap_Object(BasicModelIne(((t_BasicModelIne *) arg)->object.this$));
          }
          static PyObject *t_BasicModelIne_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModelIne::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModelIne_init_(t_BasicModelIne *self, PyObject *args, PyObject *kwds)
          {
            BasicModelIne object((jobject) NULL);

            INT_CALL(object = BasicModelIne());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModelIne_score(t_BasicModelIne *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(BasicModelIne), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_BasicModelIne_toString(t_BasicModelIne *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BasicModelIne), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/LevenshteinAutomata.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *LevenshteinAutomata::class$ = NULL;
          jmethodID *LevenshteinAutomata::mids$ = NULL;
          bool LevenshteinAutomata::live$ = false;
          jint LevenshteinAutomata::MAXIMUM_SUPPORTED_DISTANCE = (jint) 0;

          jclass LevenshteinAutomata::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/LevenshteinAutomata");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f3691645] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Z)V");
              mids$[mid_init$_1525174f] = env->getMethodID(cls, "<init>", "([IIZ)V");
              mids$[mid_toAutomaton_d5b8a843] = env->getMethodID(cls, "toAutomaton", "(I)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_toAutomaton_bc444e2d] = env->getMethodID(cls, "toAutomaton", "(ILjava/lang/String;)Lorg/apache/lucene/util/automaton/Automaton;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MAXIMUM_SUPPORTED_DISTANCE = env->getStaticIntField(cls, "MAXIMUM_SUPPORTED_DISTANCE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LevenshteinAutomata::LevenshteinAutomata(const ::java::lang::String & a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f3691645, a0.this$, a1)) {}

          LevenshteinAutomata::LevenshteinAutomata(const JArray< jint > & a0, jint a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1525174f, a0.this$, a1, a2)) {}

          ::org::apache::lucene::util::automaton::Automaton LevenshteinAutomata::toAutomaton(jint a0) const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_toAutomaton_d5b8a843], a0));
          }

          ::org::apache::lucene::util::automaton::Automaton LevenshteinAutomata::toAutomaton(jint a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_toAutomaton_bc444e2d], a0, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_LevenshteinAutomata_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LevenshteinAutomata_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LevenshteinAutomata_init_(t_LevenshteinAutomata *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LevenshteinAutomata_toAutomaton(t_LevenshteinAutomata *self, PyObject *args);

          static PyMethodDef t_LevenshteinAutomata__methods_[] = {
            DECLARE_METHOD(t_LevenshteinAutomata, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LevenshteinAutomata, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LevenshteinAutomata, toAutomaton, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LevenshteinAutomata, t_LevenshteinAutomata, ::java::lang::Object, LevenshteinAutomata, t_LevenshteinAutomata_init_, 0, 0, 0, 0, 0);

          void t_LevenshteinAutomata::install(PyObject *module)
          {
            installType(&PY_TYPE(LevenshteinAutomata), module, "LevenshteinAutomata", 0);
          }

          void t_LevenshteinAutomata::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LevenshteinAutomata).tp_dict, "class_", make_descriptor(LevenshteinAutomata::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LevenshteinAutomata).tp_dict, "wrapfn_", make_descriptor(t_LevenshteinAutomata::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LevenshteinAutomata).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(LevenshteinAutomata::initializeClass);
            PyDict_SetItemString(PY_TYPE(LevenshteinAutomata).tp_dict, "MAXIMUM_SUPPORTED_DISTANCE", make_descriptor(LevenshteinAutomata::MAXIMUM_SUPPORTED_DISTANCE));
          }

          static PyObject *t_LevenshteinAutomata_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LevenshteinAutomata::initializeClass, 1)))
              return NULL;
            return t_LevenshteinAutomata::wrap_Object(LevenshteinAutomata(((t_LevenshteinAutomata *) arg)->object.this$));
          }
          static PyObject *t_LevenshteinAutomata_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LevenshteinAutomata::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LevenshteinAutomata_init_(t_LevenshteinAutomata *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean a1;
                LevenshteinAutomata object((jobject) NULL);

                if (!parseArgs(args, "sZ", &a0, &a1))
                {
                  INT_CALL(object = LevenshteinAutomata(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                JArray< jint > a0((jobject) NULL);
                jint a1;
                jboolean a2;
                LevenshteinAutomata object((jobject) NULL);

                if (!parseArgs(args, "[IIZ", &a0, &a1, &a2))
                {
                  INT_CALL(object = LevenshteinAutomata(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LevenshteinAutomata_toAutomaton(t_LevenshteinAutomata *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.toAutomaton(a0));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "Is", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.toAutomaton(a0, a1));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "toAutomaton", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/BlockPackedReaderIterator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/util/LongsRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *BlockPackedReaderIterator::class$ = NULL;
          jmethodID *BlockPackedReaderIterator::mids$ = NULL;
          bool BlockPackedReaderIterator::live$ = false;

          jclass BlockPackedReaderIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/BlockPackedReaderIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_71304522] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;IIJ)V");
              mids$[mid_next_54c6a17a] = env->getMethodID(cls, "next", "()J");
              mids$[mid_next_a3d07a9b] = env->getMethodID(cls, "next", "(I)Lorg/apache/lucene/util/LongsRef;");
              mids$[mid_ord_54c6a17a] = env->getMethodID(cls, "ord", "()J");
              mids$[mid_reset_394617c2] = env->getMethodID(cls, "reset", "(Lorg/apache/lucene/store/DataInput;J)V");
              mids$[mid_skip_0ee6df2f] = env->getMethodID(cls, "skip", "(J)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockPackedReaderIterator::BlockPackedReaderIterator(const ::org::apache::lucene::store::DataInput & a0, jint a1, jint a2, jlong a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_71304522, a0.this$, a1, a2, a3)) {}

          jlong BlockPackedReaderIterator::next() const
          {
            return env->callLongMethod(this$, mids$[mid_next_54c6a17a]);
          }

          ::org::apache::lucene::util::LongsRef BlockPackedReaderIterator::next(jint a0) const
          {
            return ::org::apache::lucene::util::LongsRef(env->callObjectMethod(this$, mids$[mid_next_a3d07a9b], a0));
          }

          jlong BlockPackedReaderIterator::ord() const
          {
            return env->callLongMethod(this$, mids$[mid_ord_54c6a17a]);
          }

          void BlockPackedReaderIterator::reset(const ::org::apache::lucene::store::DataInput & a0, jlong a1) const
          {
            env->callVoidMethod(this$, mids$[mid_reset_394617c2], a0.this$, a1);
          }

          void BlockPackedReaderIterator::skip(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skip_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_BlockPackedReaderIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockPackedReaderIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockPackedReaderIterator_init_(t_BlockPackedReaderIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BlockPackedReaderIterator_next(t_BlockPackedReaderIterator *self, PyObject *args);
          static PyObject *t_BlockPackedReaderIterator_ord(t_BlockPackedReaderIterator *self);
          static PyObject *t_BlockPackedReaderIterator_reset(t_BlockPackedReaderIterator *self, PyObject *args);
          static PyObject *t_BlockPackedReaderIterator_skip(t_BlockPackedReaderIterator *self, PyObject *arg);

          static PyMethodDef t_BlockPackedReaderIterator__methods_[] = {
            DECLARE_METHOD(t_BlockPackedReaderIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockPackedReaderIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockPackedReaderIterator, next, METH_VARARGS),
            DECLARE_METHOD(t_BlockPackedReaderIterator, ord, METH_NOARGS),
            DECLARE_METHOD(t_BlockPackedReaderIterator, reset, METH_VARARGS),
            DECLARE_METHOD(t_BlockPackedReaderIterator, skip, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BlockPackedReaderIterator, t_BlockPackedReaderIterator, ::java::lang::Object, BlockPackedReaderIterator, t_BlockPackedReaderIterator_init_, 0, 0, 0, 0, 0);

          void t_BlockPackedReaderIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockPackedReaderIterator), module, "BlockPackedReaderIterator", 0);
          }

          void t_BlockPackedReaderIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BlockPackedReaderIterator).tp_dict, "class_", make_descriptor(BlockPackedReaderIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BlockPackedReaderIterator).tp_dict, "wrapfn_", make_descriptor(t_BlockPackedReaderIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BlockPackedReaderIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockPackedReaderIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockPackedReaderIterator::initializeClass, 1)))
              return NULL;
            return t_BlockPackedReaderIterator::wrap_Object(BlockPackedReaderIterator(((t_BlockPackedReaderIterator *) arg)->object.this$));
          }
          static PyObject *t_BlockPackedReaderIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockPackedReaderIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockPackedReaderIterator_init_(t_BlockPackedReaderIterator *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            jint a1;
            jint a2;
            jlong a3;
            BlockPackedReaderIterator object((jobject) NULL);

            if (!parseArgs(args, "kIIJ", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = BlockPackedReaderIterator(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BlockPackedReaderIterator_next(t_BlockPackedReaderIterator *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.next());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jint a0;
                ::org::apache::lucene::util::LongsRef result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.next(a0));
                  return ::org::apache::lucene::util::t_LongsRef::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "next", args);
            return NULL;
          }

          static PyObject *t_BlockPackedReaderIterator_ord(t_BlockPackedReaderIterator *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ord());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BlockPackedReaderIterator_reset(t_BlockPackedReaderIterator *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            jlong a1;

            if (!parseArgs(args, "kJ", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.reset(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "reset", args);
            return NULL;
          }

          static PyObject *t_BlockPackedReaderIterator_skip(t_BlockPackedReaderIterator *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.skip(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "skip", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentReadState::class$ = NULL;
        jmethodID *SegmentReadState::mids$ = NULL;
        jfieldID *SegmentReadState::fids$ = NULL;
        bool SegmentReadState::live$ = false;

        jclass SegmentReadState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentReadState");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_de7693af] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentReadState;Ljava/lang/String;)V");
            mids$[mid_init$_2ca58583] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;I)V");
            mids$[mid_init$_29b19e65] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;ILjava/lang/String;)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_context] = env->getFieldID(cls, "context", "Lorg/apache/lucene/store/IOContext;");
            fids$[fid_directory] = env->getFieldID(cls, "directory", "Lorg/apache/lucene/store/Directory;");
            fids$[fid_fieldInfos] = env->getFieldID(cls, "fieldInfos", "Lorg/apache/lucene/index/FieldInfos;");
            fids$[fid_segmentInfo] = env->getFieldID(cls, "segmentInfo", "Lorg/apache/lucene/index/SegmentInfo;");
            fids$[fid_segmentSuffix] = env->getFieldID(cls, "segmentSuffix", "Ljava/lang/String;");
            fids$[fid_termsIndexDivisor] = env->getFieldID(cls, "termsIndexDivisor", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentReadState::SegmentReadState(const SegmentReadState & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_de7693af, a0.this$, a1.this$)) {}

        SegmentReadState::SegmentReadState(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3, jint a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2ca58583, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

        SegmentReadState::SegmentReadState(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3, jint a4, const ::java::lang::String & a5) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_29b19e65, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5.this$)) {}

        ::org::apache::lucene::store::IOContext SegmentReadState::_get_context() const
        {
          return ::org::apache::lucene::store::IOContext(env->getObjectField(this$, fids$[fid_context]));
        }

        ::org::apache::lucene::store::Directory SegmentReadState::_get_directory() const
        {
          return ::org::apache::lucene::store::Directory(env->getObjectField(this$, fids$[fid_directory]));
        }

        ::org::apache::lucene::index::FieldInfos SegmentReadState::_get_fieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->getObjectField(this$, fids$[fid_fieldInfos]));
        }

        ::org::apache::lucene::index::SegmentInfo SegmentReadState::_get_segmentInfo() const
        {
          return ::org::apache::lucene::index::SegmentInfo(env->getObjectField(this$, fids$[fid_segmentInfo]));
        }

        ::java::lang::String SegmentReadState::_get_segmentSuffix() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_segmentSuffix]));
        }

        jint SegmentReadState::_get_termsIndexDivisor() const
        {
          return env->getIntField(this$, fids$[fid_termsIndexDivisor]);
        }

        void SegmentReadState::_set_termsIndexDivisor(jint a0) const
        {
          env->setIntField(this$, fids$[fid_termsIndexDivisor], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentReadState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentReadState_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SegmentReadState_init_(t_SegmentReadState *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentReadState_get__context(t_SegmentReadState *self, void *data);
        static PyObject *t_SegmentReadState_get__directory(t_SegmentReadState *self, void *data);
        static PyObject *t_SegmentReadState_get__fieldInfos(t_SegmentReadState *self, void *data);
        static PyObject *t_SegmentReadState_get__segmentInfo(t_SegmentReadState *self, void *data);
        static PyObject *t_SegmentReadState_get__segmentSuffix(t_SegmentReadState *self, void *data);
        static PyObject *t_SegmentReadState_get__termsIndexDivisor(t_SegmentReadState *self, void *data);
        static int t_SegmentReadState_set__termsIndexDivisor(t_SegmentReadState *self, PyObject *arg, void *data);

        static PyGetSetDef t_SegmentReadState__fields_[] = {
          DECLARE_GET_FIELD(t_SegmentReadState, context),
          DECLARE_GET_FIELD(t_SegmentReadState, directory),
          DECLARE_GET_FIELD(t_SegmentReadState, fieldInfos),
          DECLARE_GET_FIELD(t_SegmentReadState, segmentInfo),
          DECLARE_GET_FIELD(t_SegmentReadState, segmentSuffix),
          DECLARE_GETSET_FIELD(t_SegmentReadState, termsIndexDivisor),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentReadState__methods_[] = {
          DECLARE_METHOD(t_SegmentReadState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentReadState, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentReadState, t_SegmentReadState, ::java::lang::Object, SegmentReadState, t_SegmentReadState_init_, 0, 0, t_SegmentReadState__fields_, 0, 0);

        void t_SegmentReadState::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentReadState), module, "SegmentReadState", 0);
        }

        void t_SegmentReadState::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentReadState).tp_dict, "class_", make_descriptor(SegmentReadState::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentReadState).tp_dict, "wrapfn_", make_descriptor(t_SegmentReadState::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentReadState).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentReadState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentReadState::initializeClass, 1)))
            return NULL;
          return t_SegmentReadState::wrap_Object(SegmentReadState(((t_SegmentReadState *) arg)->object.this$));
        }
        static PyObject *t_SegmentReadState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentReadState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SegmentReadState_init_(t_SegmentReadState *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              SegmentReadState a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              SegmentReadState object((jobject) NULL);

              if (!parseArgs(args, "ks", SegmentReadState::initializeClass, &a0, &a1))
              {
                INT_CALL(object = SegmentReadState(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 5:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
              ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
              ::org::apache::lucene::store::IOContext a3((jobject) NULL);
              jint a4;
              SegmentReadState object((jobject) NULL);

              if (!parseArgs(args, "kkkkI", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = SegmentReadState(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
            goto err;
           case 6:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
              ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
              ::org::apache::lucene::store::IOContext a3((jobject) NULL);
              jint a4;
              ::java::lang::String a5((jobject) NULL);
              SegmentReadState object((jobject) NULL);

              if (!parseArgs(args, "kkkkIs", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                INT_CALL(object = SegmentReadState(a0, a1, a2, a3, a4, a5));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SegmentReadState_get__context(t_SegmentReadState *self, void *data)
        {
          ::org::apache::lucene::store::IOContext value((jobject) NULL);
          OBJ_CALL(value = self->object._get_context());
          return ::org::apache::lucene::store::t_IOContext::wrap_Object(value);
        }

        static PyObject *t_SegmentReadState_get__directory(t_SegmentReadState *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object._get_directory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_SegmentReadState_get__fieldInfos(t_SegmentReadState *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object._get_fieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_SegmentReadState_get__segmentInfo(t_SegmentReadState *self, void *data)
        {
          ::org::apache::lucene::index::SegmentInfo value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentInfo());
          return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(value);
        }

        static PyObject *t_SegmentReadState_get__segmentSuffix(t_SegmentReadState *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentSuffix());
          return j2p(value);
        }

        static PyObject *t_SegmentReadState_get__termsIndexDivisor(t_SegmentReadState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_termsIndexDivisor());
          return PyInt_FromLong((long) value);
        }
        static int t_SegmentReadState_set__termsIndexDivisor(t_SegmentReadState *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_termsIndexDivisor(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "termsIndexDivisor", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *Tokenizer::class$ = NULL;
        jmethodID *Tokenizer::mids$ = NULL;
        bool Tokenizer::live$ = false;

        jclass Tokenizer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/Tokenizer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_setReader_cf2e3c10] = env->getMethodID(cls, "setReader", "(Ljava/io/Reader;)V");
            mids$[mid_correctOffset_39c7bd23] = env->getMethodID(cls, "correctOffset", "(I)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void Tokenizer::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void Tokenizer::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }

        void Tokenizer::setReader(const ::java::io::Reader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setReader_cf2e3c10], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_Tokenizer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Tokenizer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Tokenizer_close(t_Tokenizer *self, PyObject *args);
        static PyObject *t_Tokenizer_reset(t_Tokenizer *self, PyObject *args);
        static PyObject *t_Tokenizer_setReader(t_Tokenizer *self, PyObject *arg);
        static int t_Tokenizer_set__reader(t_Tokenizer *self, PyObject *arg, void *data);
        static PyGetSetDef t_Tokenizer__fields_[] = {
          DECLARE_SET_FIELD(t_Tokenizer, reader),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Tokenizer__methods_[] = {
          DECLARE_METHOD(t_Tokenizer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Tokenizer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Tokenizer, close, METH_VARARGS),
          DECLARE_METHOD(t_Tokenizer, reset, METH_VARARGS),
          DECLARE_METHOD(t_Tokenizer, setReader, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Tokenizer, t_Tokenizer, ::org::apache::lucene::analysis::TokenStream, Tokenizer, abstract_init, 0, 0, t_Tokenizer__fields_, 0, 0);

        void t_Tokenizer::install(PyObject *module)
        {
          installType(&PY_TYPE(Tokenizer), module, "Tokenizer", 0);
        }

        void t_Tokenizer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Tokenizer).tp_dict, "class_", make_descriptor(Tokenizer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Tokenizer).tp_dict, "wrapfn_", make_descriptor(t_Tokenizer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Tokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Tokenizer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Tokenizer::initializeClass, 1)))
            return NULL;
          return t_Tokenizer::wrap_Object(Tokenizer(((t_Tokenizer *) arg)->object.this$));
        }
        static PyObject *t_Tokenizer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Tokenizer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Tokenizer_close(t_Tokenizer *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(Tokenizer), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_Tokenizer_reset(t_Tokenizer *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(Tokenizer), (PyObject *) self, "reset", args, 2);
        }

        static PyObject *t_Tokenizer_setReader(t_Tokenizer *self, PyObject *arg)
        {
          ::java::io::Reader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setReader(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setReader", arg);
          return NULL;
        }

        static int t_Tokenizer_set__reader(t_Tokenizer *self, PyObject *arg, void *data)
        {
          {
            ::java::io::Reader value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &value))
            {
              INT_CALL(self->object.setReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "reader", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/String.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "java/lang/Iterable.h"
#include "java/lang/CharSequence.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Comparable.h"
#include "java/io/Serializable.h"
#include "java/util/Locale.h"
#include "java/lang/StringBuffer.h"
#include "java/io/UnsupportedEncodingException.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *String::class$ = NULL;
    jmethodID *String::mids$ = NULL;
    bool String::live$ = false;
    ::java::util::Comparator *String::CASE_INSENSITIVE_ORDER = NULL;

    jclass String::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/String");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_9f94ae34] = env->getMethodID(cls, "<init>", "(Ljava/lang/StringBuilder;)V");
        mids$[mid_init$_44634788] = env->getMethodID(cls, "<init>", "(Ljava/lang/StringBuffer;)V");
        mids$[mid_init$_49b4f12b] = env->getMethodID(cls, "<init>", "([B)V");
        mids$[mid_init$_700e23d6] = env->getMethodID(cls, "<init>", "([C)V");
        mids$[mid_init$_1a0c6fd5] = env->getMethodID(cls, "<init>", "([BLjava/lang/String;)V");
        mids$[mid_init$_b8354c43] = env->getMethodID(cls, "<init>", "([BI)V");
        mids$[mid_init$_86f4435f] = env->getMethodID(cls, "<init>", "([BII)V");
        mids$[mid_init$_3e1ea22c] = env->getMethodID(cls, "<init>", "([III)V");
        mids$[mid_init$_6f0bb356] = env->getMethodID(cls, "<init>", "([CII)V");
        mids$[mid_init$_5ab96441] = env->getMethodID(cls, "<init>", "([BIILjava/lang/String;)V");
        mids$[mid_init$_96a25f0b] = env->getMethodID(cls, "<init>", "([BIII)V");
        mids$[mid_charAt_39c7bd29] = env->getMethodID(cls, "charAt", "(I)C");
        mids$[mid_codePointAt_39c7bd23] = env->getMethodID(cls, "codePointAt", "(I)I");
        mids$[mid_codePointBefore_39c7bd23] = env->getMethodID(cls, "codePointBefore", "(I)I");
        mids$[mid_codePointCount_d8d154b9] = env->getMethodID(cls, "codePointCount", "(II)I");
        mids$[mid_compareTo_5fdc3f57] = env->getMethodID(cls, "compareTo", "(Ljava/lang/String;)I");
        mids$[mid_compareToIgnoreCase_5fdc3f57] = env->getMethodID(cls, "compareToIgnoreCase", "(Ljava/lang/String;)I");
        mids$[mid_concat_97a5258f] = env->getMethodID(cls, "concat", "(Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_contains_a8afc646] = env->getMethodID(cls, "contains", "(Ljava/lang/CharSequence;)Z");
        mids$[mid_contentEquals_a8afc646] = env->getMethodID(cls, "contentEquals", "(Ljava/lang/CharSequence;)Z");
        mids$[mid_contentEquals_44634784] = env->getMethodID(cls, "contentEquals", "(Ljava/lang/StringBuffer;)Z");
        mids$[mid_copyValueOf_c783d655] = env->getStaticMethodID(cls, "copyValueOf", "([C)Ljava/lang/String;");
        mids$[mid_copyValueOf_ddb60785] = env->getStaticMethodID(cls, "copyValueOf", "([CII)Ljava/lang/String;");
        mids$[mid_endsWith_5fdc3f44] = env->getMethodID(cls, "endsWith", "(Ljava/lang/String;)Z");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_equalsIgnoreCase_5fdc3f44] = env->getMethodID(cls, "equalsIgnoreCase", "(Ljava/lang/String;)Z");
        mids$[mid_format_0fb26e3b] = env->getStaticMethodID(cls, "format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;");
        mids$[mid_format_84ed7d06] = env->getStaticMethodID(cls, "format", "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;");
        mids$[mid_getBytes_dab10e7e] = env->getMethodID(cls, "getBytes", "()[B");
        mids$[mid_getBytes_94a731a4] = env->getMethodID(cls, "getBytes", "(Ljava/lang/String;)[B");
        mids$[mid_getBytes_fdf97d27] = env->getMethodID(cls, "getBytes", "(II[BI)V");
        mids$[mid_getChars_06518f84] = env->getMethodID(cls, "getChars", "(II[CI)V");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_indexOf_39c7bd23] = env->getMethodID(cls, "indexOf", "(I)I");
        mids$[mid_indexOf_5fdc3f57] = env->getMethodID(cls, "indexOf", "(Ljava/lang/String;)I");
        mids$[mid_indexOf_6e53ccd9] = env->getMethodID(cls, "indexOf", "(Ljava/lang/String;I)I");
        mids$[mid_indexOf_d8d154b9] = env->getMethodID(cls, "indexOf", "(II)I");
        mids$[mid_intern_14c7b5c5] = env->getMethodID(cls, "intern", "()Ljava/lang/String;");
        mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
        mids$[mid_join_914ef00d] = env->getStaticMethodID(cls, "join", "(Ljava/lang/CharSequence;[Ljava/lang/CharSequence;)Ljava/lang/String;");
        mids$[mid_join_900052c8] = env->getStaticMethodID(cls, "join", "(Ljava/lang/CharSequence;Ljava/lang/Iterable;)Ljava/lang/String;");
        mids$[mid_lastIndexOf_39c7bd23] = env->getMethodID(cls, "lastIndexOf", "(I)I");
        mids$[mid_lastIndexOf_5fdc3f57] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/String;)I");
        mids$[mid_lastIndexOf_d8d154b9] = env->getMethodID(cls, "lastIndexOf", "(II)I");
        mids$[mid_lastIndexOf_6e53ccd9] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/String;I)I");
        mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
        mids$[mid_matches_5fdc3f44] = env->getMethodID(cls, "matches", "(Ljava/lang/String;)Z");
        mids$[mid_offsetByCodePoints_d8d154b9] = env->getMethodID(cls, "offsetByCodePoints", "(II)I");
        mids$[mid_regionMatches_344d8cb6] = env->getMethodID(cls, "regionMatches", "(ILjava/lang/String;II)Z");
        mids$[mid_regionMatches_35f2560d] = env->getMethodID(cls, "regionMatches", "(ZILjava/lang/String;II)Z");
        mids$[mid_replace_f1c62e0d] = env->getMethodID(cls, "replace", "(CC)Ljava/lang/String;");
        mids$[mid_replace_103b702d] = env->getMethodID(cls, "replace", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;");
        mids$[mid_replaceAll_aacea7e9] = env->getMethodID(cls, "replaceAll", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_replaceFirst_aacea7e9] = env->getMethodID(cls, "replaceFirst", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_split_1f6a174f] = env->getMethodID(cls, "split", "(Ljava/lang/String;)[Ljava/lang/String;");
        mids$[mid_split_3384fe85] = env->getMethodID(cls, "split", "(Ljava/lang/String;I)[Ljava/lang/String;");
        mids$[mid_startsWith_5fdc3f44] = env->getMethodID(cls, "startsWith", "(Ljava/lang/String;)Z");
        mids$[mid_startsWith_6e53ccca] = env->getMethodID(cls, "startsWith", "(Ljava/lang/String;I)Z");
        mids$[mid_subSequence_f88dfd57] = env->getMethodID(cls, "subSequence", "(II)Ljava/lang/CharSequence;");
        mids$[mid_substring_141401b3] = env->getMethodID(cls, "substring", "(I)Ljava/lang/String;");
        mids$[mid_substring_f9118fe5] = env->getMethodID(cls, "substring", "(II)Ljava/lang/String;");
        mids$[mid_toCharArray_dab10e7f] = env->getMethodID(cls, "toCharArray", "()[C");
        mids$[mid_toLowerCase_14c7b5c5] = env->getMethodID(cls, "toLowerCase", "()Ljava/lang/String;");
        mids$[mid_toLowerCase_c0fb304e] = env->getMethodID(cls, "toLowerCase", "(Ljava/util/Locale;)Ljava/lang/String;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toUpperCase_14c7b5c5] = env->getMethodID(cls, "toUpperCase", "()Ljava/lang/String;");
        mids$[mid_toUpperCase_c0fb304e] = env->getMethodID(cls, "toUpperCase", "(Ljava/util/Locale;)Ljava/lang/String;");
        mids$[mid_trim_14c7b5c5] = env->getMethodID(cls, "trim", "()Ljava/lang/String;");
        mids$[mid_valueOf_445a175e] = env->getStaticMethodID(cls, "valueOf", "(Z)Ljava/lang/String;");
        mids$[mid_valueOf_c9db4eed] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/Object;)Ljava/lang/String;");
        mids$[mid_valueOf_5ded254a] = env->getStaticMethodID(cls, "valueOf", "(F)Ljava/lang/String;");
        mids$[mid_valueOf_1b4624f8] = env->getStaticMethodID(cls, "valueOf", "(D)Ljava/lang/String;");
        mids$[mid_valueOf_141401b3] = env->getStaticMethodID(cls, "valueOf", "(I)Ljava/lang/String;");
        mids$[mid_valueOf_c783d655] = env->getStaticMethodID(cls, "valueOf", "([C)Ljava/lang/String;");
        mids$[mid_valueOf_7611a535] = env->getStaticMethodID(cls, "valueOf", "(C)Ljava/lang/String;");
        mids$[mid_valueOf_3e02f30e] = env->getStaticMethodID(cls, "valueOf", "(J)Ljava/lang/String;");
        mids$[mid_valueOf_ddb60785] = env->getStaticMethodID(cls, "valueOf", "([CII)Ljava/lang/String;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        CASE_INSENSITIVE_ORDER = new ::java::util::Comparator(env->getStaticObjectField(cls, "CASE_INSENSITIVE_ORDER", "Ljava/util/Comparator;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    String::String() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    String::String(const ::java::lang::StringBuilder & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9f94ae34, a0.this$)) {}

    String::String(const ::java::lang::StringBuffer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_44634788, a0.this$)) {}

    String::String(const JArray< jbyte > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_49b4f12b, a0.this$)) {}

    String::String(const JArray< jchar > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_700e23d6, a0.this$)) {}

    String::String(const JArray< jbyte > & a0, const String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1a0c6fd5, a0.this$, a1.this$)) {}

    String::String(const JArray< jbyte > & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b8354c43, a0.this$, a1)) {}

    String::String(const JArray< jbyte > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_86f4435f, a0.this$, a1, a2)) {}

    String::String(const JArray< jint > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3e1ea22c, a0.this$, a1, a2)) {}

    String::String(const JArray< jchar > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6f0bb356, a0.this$, a1, a2)) {}

    String::String(const JArray< jbyte > & a0, jint a1, jint a2, const String & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5ab96441, a0.this$, a1, a2, a3.this$)) {}

    String::String(const JArray< jbyte > & a0, jint a1, jint a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_96a25f0b, a0.this$, a1, a2, a3)) {}

    jchar String::charAt(jint a0) const
    {
      return env->callCharMethod(this$, mids$[mid_charAt_39c7bd29], a0);
    }

    jint String::codePointAt(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_codePointAt_39c7bd23], a0);
    }

    jint String::codePointBefore(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_codePointBefore_39c7bd23], a0);
    }

    jint String::codePointCount(jint a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_codePointCount_d8d154b9], a0, a1);
    }

    jint String::compareTo(const String & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_5fdc3f57], a0.this$);
    }

    jint String::compareToIgnoreCase(const String & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareToIgnoreCase_5fdc3f57], a0.this$);
    }

    String String::concat(const String & a0) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_concat_97a5258f], a0.this$));
    }

    jboolean String::contains(const ::java::lang::CharSequence & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_contains_a8afc646], a0.this$);
    }

    jboolean String::contentEquals(const ::java::lang::CharSequence & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_contentEquals_a8afc646], a0.this$);
    }

    jboolean String::contentEquals(const ::java::lang::StringBuffer & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_contentEquals_44634784], a0.this$);
    }

    String String::copyValueOf(const JArray< jchar > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_copyValueOf_c783d655], a0.this$));
    }

    String String::copyValueOf(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_copyValueOf_ddb60785], a0.this$, a1, a2));
    }

    jboolean String::endsWith(const String & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_endsWith_5fdc3f44], a0.this$);
    }

    jboolean String::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jboolean String::equalsIgnoreCase(const String & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equalsIgnoreCase_5fdc3f44], a0.this$);
    }

    String String::format(const String & a0, const JArray< ::java::lang::Object > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_format_0fb26e3b], a0.this$, a1.this$));
    }

    String String::format(const ::java::util::Locale & a0, const String & a1, const JArray< ::java::lang::Object > & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_format_84ed7d06], a0.this$, a1.this$, a2.this$));
    }

    JArray< jbyte > String::getBytes() const
    {
      return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getBytes_dab10e7e]));
    }

    JArray< jbyte > String::getBytes(const String & a0) const
    {
      return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getBytes_94a731a4], a0.this$));
    }

    void String::getBytes(jint a0, jint a1, const JArray< jbyte > & a2, jint a3) const
    {
      env->callVoidMethod(this$, mids$[mid_getBytes_fdf97d27], a0, a1, a2.this$, a3);
    }

    void String::getChars(jint a0, jint a1, const JArray< jchar > & a2, jint a3) const
    {
      env->callVoidMethod(this$, mids$[mid_getChars_06518f84], a0, a1, a2.this$, a3);
    }

    jint String::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jint String::indexOf(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_indexOf_39c7bd23], a0);
    }

    jint String::indexOf(const String & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_indexOf_5fdc3f57], a0.this$);
    }

    jint String::indexOf(const String & a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_indexOf_6e53ccd9], a0.this$, a1);
    }

    jint String::indexOf(jint a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_indexOf_d8d154b9], a0, a1);
    }

    String String::intern() const
    {
      return String(env->callObjectMethod(this$, mids$[mid_intern_14c7b5c5]));
    }

    jboolean String::isEmpty() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
    }

    String String::join(const ::java::lang::CharSequence & a0, const JArray< ::java::lang::CharSequence > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_join_914ef00d], a0.this$, a1.this$));
    }

    String String::join(const ::java::lang::CharSequence & a0, const ::java::lang::Iterable & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_join_900052c8], a0.this$, a1.this$));
    }

    jint String::lastIndexOf(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_lastIndexOf_39c7bd23], a0);
    }

    jint String::lastIndexOf(const String & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_lastIndexOf_5fdc3f57], a0.this$);
    }

    jint String::lastIndexOf(jint a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_lastIndexOf_d8d154b9], a0, a1);
    }

    jint String::lastIndexOf(const String & a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_lastIndexOf_6e53ccd9], a0.this$, a1);
    }

    jint String::length() const
    {
      return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
    }

    jboolean String::matches(const String & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_matches_5fdc3f44], a0.this$);
    }

    jint String::offsetByCodePoints(jint a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_offsetByCodePoints_d8d154b9], a0, a1);
    }

    jboolean String::regionMatches(jint a0, const String & a1, jint a2, jint a3) const
    {
      return env->callBooleanMethod(this$, mids$[mid_regionMatches_344d8cb6], a0, a1.this$, a2, a3);
    }

    jboolean String::regionMatches(jboolean a0, jint a1, const String & a2, jint a3, jint a4) const
    {
      return env->callBooleanMethod(this$, mids$[mid_regionMatches_35f2560d], a0, a1, a2.this$, a3, a4);
    }

    String String::replace(jchar a0, jchar a1) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_replace_f1c62e0d], a0, a1));
    }

    String String::replace(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_replace_103b702d], a0.this$, a1.this$));
    }

    String String::replaceAll(const String & a0, const String & a1) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_replaceAll_aacea7e9], a0.this$, a1.this$));
    }

    String String::replaceFirst(const String & a0, const String & a1) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_replaceFirst_aacea7e9], a0.this$, a1.this$));
    }

    JArray< String > String::split(const String & a0) const
    {
      return JArray< String >(env->callObjectMethod(this$, mids$[mid_split_1f6a174f], a0.this$));
    }

    JArray< String > String::split(const String & a0, jint a1) const
    {
      return JArray< String >(env->callObjectMethod(this$, mids$[mid_split_3384fe85], a0.this$, a1));
    }

    jboolean String::startsWith(const String & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_startsWith_5fdc3f44], a0.this$);
    }

    jboolean String::startsWith(const String & a0, jint a1) const
    {
      return env->callBooleanMethod(this$, mids$[mid_startsWith_6e53ccca], a0.this$, a1);
    }

    ::java::lang::CharSequence String::subSequence(jint a0, jint a1) const
    {
      return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_subSequence_f88dfd57], a0, a1));
    }

    String String::substring(jint a0) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_substring_141401b3], a0));
    }

    String String::substring(jint a0, jint a1) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_substring_f9118fe5], a0, a1));
    }

    JArray< jchar > String::toCharArray() const
    {
      return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_toCharArray_dab10e7f]));
    }

    String String::toLowerCase() const
    {
      return String(env->callObjectMethod(this$, mids$[mid_toLowerCase_14c7b5c5]));
    }

    String String::toLowerCase(const ::java::util::Locale & a0) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_toLowerCase_c0fb304e], a0.this$));
    }

    String String::toString() const
    {
      return String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    String String::toUpperCase() const
    {
      return String(env->callObjectMethod(this$, mids$[mid_toUpperCase_14c7b5c5]));
    }

    String String::toUpperCase(const ::java::util::Locale & a0) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_toUpperCase_c0fb304e], a0.this$));
    }

    String String::trim() const
    {
      return String(env->callObjectMethod(this$, mids$[mid_trim_14c7b5c5]));
    }

    String String::valueOf(jboolean a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_445a175e], a0));
    }

    String String::valueOf(const ::java::lang::Object & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_c9db4eed], a0.this$));
    }

    String String::valueOf(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_5ded254a], a0));
    }

    String String::valueOf(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_1b4624f8], a0));
    }

    String String::valueOf(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_141401b3], a0));
    }

    String String::valueOf(const JArray< jchar > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_c783d655], a0.this$));
    }

    String String::valueOf(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_7611a535], a0));
    }

    String String::valueOf(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_3e02f30e], a0));
    }

    String String::valueOf(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ddb60785], a0.this$, a1, a2));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_String_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_String_instance_(PyTypeObject *type, PyObject *arg);
    static int t_String_init_(t_String *self, PyObject *args, PyObject *kwds);
    static PyObject *t_String_charAt(t_String *self, PyObject *arg);
    static PyObject *t_String_codePointAt(t_String *self, PyObject *arg);
    static PyObject *t_String_codePointBefore(t_String *self, PyObject *arg);
    static PyObject *t_String_codePointCount(t_String *self, PyObject *args);
    static PyObject *t_String_compareTo(t_String *self, PyObject *arg);
    static PyObject *t_String_compareToIgnoreCase(t_String *self, PyObject *arg);
    static PyObject *t_String_concat(t_String *self, PyObject *arg);
    static PyObject *t_String_contains(t_String *self, PyObject *arg);
    static PyObject *t_String_contentEquals(t_String *self, PyObject *args);
    static PyObject *t_String_copyValueOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_String_endsWith(t_String *self, PyObject *arg);
    static PyObject *t_String_equals(t_String *self, PyObject *args);
    static PyObject *t_String_equalsIgnoreCase(t_String *self, PyObject *arg);
    static PyObject *t_String_format(PyTypeObject *type, PyObject *args);
    static PyObject *t_String_getBytes(t_String *self, PyObject *args);
    static PyObject *t_String_getChars(t_String *self, PyObject *args);
    static PyObject *t_String_hashCode(t_String *self, PyObject *args);
    static PyObject *t_String_indexOf(t_String *self, PyObject *args);
    static PyObject *t_String_intern(t_String *self);
    static PyObject *t_String_isEmpty(t_String *self);
    static PyObject *t_String_join(PyTypeObject *type, PyObject *args);
    static PyObject *t_String_lastIndexOf(t_String *self, PyObject *args);
    static PyObject *t_String_length(t_String *self);
    static PyObject *t_String_matches(t_String *self, PyObject *arg);
    static PyObject *t_String_offsetByCodePoints(t_String *self, PyObject *args);
    static PyObject *t_String_regionMatches(t_String *self, PyObject *args);
    static PyObject *t_String_replace(t_String *self, PyObject *args);
    static PyObject *t_String_replaceAll(t_String *self, PyObject *args);
    static PyObject *t_String_replaceFirst(t_String *self, PyObject *args);
    static PyObject *t_String_split(t_String *self, PyObject *args);
    static PyObject *t_String_startsWith(t_String *self, PyObject *args);
    static PyObject *t_String_subSequence(t_String *self, PyObject *args);
    static PyObject *t_String_substring(t_String *self, PyObject *args);
    static PyObject *t_String_toCharArray(t_String *self);
    static PyObject *t_String_toLowerCase(t_String *self, PyObject *args);
    static PyObject *t_String_toString(t_String *self, PyObject *args);
    static PyObject *t_String_toUpperCase(t_String *self, PyObject *args);
    static PyObject *t_String_trim(t_String *self);
    static PyObject *t_String_valueOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_String_get__bytes(t_String *self, void *data);
    static PyObject *t_String_get__empty(t_String *self, void *data);
    static PyGetSetDef t_String__fields_[] = {
      DECLARE_GET_FIELD(t_String, bytes),
      DECLARE_GET_FIELD(t_String, empty),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_String__methods_[] = {
      DECLARE_METHOD(t_String, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_String, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_String, charAt, METH_O),
      DECLARE_METHOD(t_String, codePointAt, METH_O),
      DECLARE_METHOD(t_String, codePointBefore, METH_O),
      DECLARE_METHOD(t_String, codePointCount, METH_VARARGS),
      DECLARE_METHOD(t_String, compareTo, METH_O),
      DECLARE_METHOD(t_String, compareToIgnoreCase, METH_O),
      DECLARE_METHOD(t_String, concat, METH_O),
      DECLARE_METHOD(t_String, contains, METH_O),
      DECLARE_METHOD(t_String, contentEquals, METH_VARARGS),
      DECLARE_METHOD(t_String, copyValueOf, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_String, endsWith, METH_O),
      DECLARE_METHOD(t_String, equals, METH_VARARGS),
      DECLARE_METHOD(t_String, equalsIgnoreCase, METH_O),
      DECLARE_METHOD(t_String, format, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_String, getBytes, METH_VARARGS),
      DECLARE_METHOD(t_String, getChars, METH_VARARGS),
      DECLARE_METHOD(t_String, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_String, indexOf, METH_VARARGS),
      DECLARE_METHOD(t_String, intern, METH_NOARGS),
      DECLARE_METHOD(t_String, isEmpty, METH_NOARGS),
      DECLARE_METHOD(t_String, join, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_String, lastIndexOf, METH_VARARGS),
      DECLARE_METHOD(t_String, length, METH_NOARGS),
      DECLARE_METHOD(t_String, matches, METH_O),
      DECLARE_METHOD(t_String, offsetByCodePoints, METH_VARARGS),
      DECLARE_METHOD(t_String, regionMatches, METH_VARARGS),
      DECLARE_METHOD(t_String, replace, METH_VARARGS),
      DECLARE_METHOD(t_String, replaceAll, METH_VARARGS),
      DECLARE_METHOD(t_String, replaceFirst, METH_VARARGS),
      DECLARE_METHOD(t_String, split, METH_VARARGS),
      DECLARE_METHOD(t_String, startsWith, METH_VARARGS),
      DECLARE_METHOD(t_String, subSequence, METH_VARARGS),
      DECLARE_METHOD(t_String, substring, METH_VARARGS),
      DECLARE_METHOD(t_String, toCharArray, METH_NOARGS),
      DECLARE_METHOD(t_String, toLowerCase, METH_VARARGS),
      DECLARE_METHOD(t_String, toString, METH_VARARGS),
      DECLARE_METHOD(t_String, toUpperCase, METH_VARARGS),
      DECLARE_METHOD(t_String, trim, METH_NOARGS),
      DECLARE_METHOD(t_String, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(String, t_String, ::java::lang::Object, String, t_String_init_, 0, 0, t_String__fields_, 0, 0);

    void t_String::install(PyObject *module)
    {
      installType(&PY_TYPE(String), module, "String", 0);
    }

    void t_String::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(String).tp_dict, "class_", make_descriptor(String::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(String).tp_dict, "wrapfn_", make_descriptor(unboxString));
      PyDict_SetItemString(PY_TYPE(String).tp_dict, "boxfn_", make_descriptor(boxString));
      env->getClass(String::initializeClass);
      PyDict_SetItemString(PY_TYPE(String).tp_dict, "CASE_INSENSITIVE_ORDER", make_descriptor(::java::util::t_Comparator::wrap_Object(*String::CASE_INSENSITIVE_ORDER)));
    }

    static PyObject *t_String_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, String::initializeClass, 1)))
        return NULL;
      return t_String::wrap_Object(String(((t_String *) arg)->object.this$));
    }
    static PyObject *t_String_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, String::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_String_init_(t_String *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          String object((jobject) NULL);

          INT_CALL(object = String());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::StringBuilder a0((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::StringBuilder::initializeClass, &a0))
          {
            INT_CALL(object = String(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::StringBuffer a0((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::StringBuffer::initializeClass, &a0))
          {
            INT_CALL(object = String(a0));
            self->object = object;
            break;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "[B", &a0))
          {
            INT_CALL(object = String(a0));
            self->object = object;
            break;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            INT_CALL(object = String(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          JArray< jbyte > a0((jobject) NULL);
          String a1((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "[Bs", &a0, &a1))
          {
            INT_CALL(object = String(a0, a1));
            self->object = object;
            break;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          String object((jobject) NULL);

          if (!parseArgs(args, "[BI", &a0, &a1))
          {
            INT_CALL(object = String(a0, a1));
            self->object = object;
            break;
          }
        }
        goto err;
       case 3:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          String object((jobject) NULL);

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            INT_CALL(object = String(a0, a1, a2));
            self->object = object;
            break;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;
          String object((jobject) NULL);

          if (!parseArgs(args, "[III", &a0, &a1, &a2))
          {
            INT_CALL(object = String(a0, a1, a2));
            self->object = object;
            break;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          String object((jobject) NULL);

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            INT_CALL(object = String(a0, a1, a2));
            self->object = object;
            break;
          }
        }
        goto err;
       case 4:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          String a3((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "[BIIs", &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = String(a0, a1, a2, a3));
            self->object = object;
            break;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint a3;
          String object((jobject) NULL);

          if (!parseArgs(args, "[BIII", &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = String(a0, a1, a2, a3));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_String_charAt(t_String *self, PyObject *arg)
    {
      jint a0;
      jchar result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.charAt(a0));
        return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
      }

      PyErr_SetArgsError((PyObject *) self, "charAt", arg);
      return NULL;
    }

    static PyObject *t_String_codePointAt(t_String *self, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.codePointAt(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "codePointAt", arg);
      return NULL;
    }

    static PyObject *t_String_codePointBefore(t_String *self, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.codePointBefore(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "codePointBefore", arg);
      return NULL;
    }

    static PyObject *t_String_codePointCount(t_String *self, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = self->object.codePointCount(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "codePointCount", args);
      return NULL;
    }

    static PyObject *t_String_compareTo(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_String_compareToIgnoreCase(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.compareToIgnoreCase(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareToIgnoreCase", arg);
      return NULL;
    }

    static PyObject *t_String_concat(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      String result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.concat(a0));
        return j2p(result);
      }

      PyErr_SetArgsError((PyObject *) self, "concat", arg);
      return NULL;
    }

    static PyObject *t_String_contains(t_String *self, PyObject *arg)
    {
      ::java::lang::CharSequence a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
      {
        OBJ_CALL(result = self->object.contains(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "contains", arg);
      return NULL;
    }

    static PyObject *t_String_contentEquals(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
          {
            OBJ_CALL(result = self->object.contentEquals(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          ::java::lang::StringBuffer a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "k", ::java::lang::StringBuffer::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.contentEquals(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "contentEquals", args);
      return NULL;
    }

    static PyObject *t_String_copyValueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jchar > a0((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::copyValueOf(a0));
            return j2p(result);
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          String result((jobject) NULL);

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::String::copyValueOf(a0, a1, a2));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "copyValueOf", args);
      return NULL;
    }

    static PyObject *t_String_endsWith(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.endsWith(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "endsWith", arg);
      return NULL;
    }

    static PyObject *t_String_equals(t_String *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(String), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_String_equalsIgnoreCase(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.equalsIgnoreCase(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "equalsIgnoreCase", arg);
      return NULL;
    }

    static PyObject *t_String_format(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          String a0((jobject) NULL);
          JArray< ::java::lang::Object > a1((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "s[o", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::String::format(a0, a1));
            return j2p(result);
          }
        }
        break;
       case 3:
        {
          ::java::util::Locale a0((jobject) NULL);
          String a1((jobject) NULL);
          JArray< ::java::lang::Object > a2((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "ks[o", ::java::util::Locale::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::String::format(a0, a1, a2));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "format", args);
      return NULL;
    }

    static PyObject *t_String_getBytes(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          JArray< jbyte > result((jobject) NULL);
          OBJ_CALL(result = self->object.getBytes());
          return result.wrap();
        }
        break;
       case 1:
        {
          String a0((jobject) NULL);
          JArray< jbyte > result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBytes(a0));
            return result.wrap();
          }
        }
        break;
       case 4:
        {
          jint a0;
          jint a1;
          JArray< jbyte > a2((jobject) NULL);
          jint a3;

          if (!parseArgs(args, "II[BI", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.getBytes(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "getBytes", args);
      return NULL;
    }

    static PyObject *t_String_getChars(t_String *self, PyObject *args)
    {
      jint a0;
      jint a1;
      JArray< jchar > a2((jobject) NULL);
      jint a3;

      if (!parseArgs(args, "II[CI", &a0, &a1, &a2, &a3))
      {
        OBJ_CALL(self->object.getChars(a0, a1, a2, a3));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "getChars", args);
      return NULL;
    }

    static PyObject *t_String_hashCode(t_String *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(String), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_String_indexOf(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.indexOf(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.indexOf(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 2:
        {
          String a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = self->object.indexOf(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.indexOf(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "indexOf", args);
      return NULL;
    }

    static PyObject *t_String_intern(t_String *self)
    {
      String result((jobject) NULL);
      OBJ_CALL(result = self->object.intern());
      return j2p(result);
    }

    static PyObject *t_String_isEmpty(t_String *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isEmpty());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_String_join(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          JArray< ::java::lang::CharSequence > a1((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "O[O", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::String::join(a0, a1));
            return j2p(result);
          }
        }
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          ::java::lang::Iterable a1((jobject) NULL);
          PyTypeObject **p1;
          String result((jobject) NULL);

          if (!parseArgs(args, "OK", &::java::lang::PY_TYPE(CharSequence), ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(result = ::java::lang::String::join(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "join", args);
      return NULL;
    }

    static PyObject *t_String_lastIndexOf(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.lastIndexOf(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.lastIndexOf(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 2:
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.lastIndexOf(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          String a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = self->object.lastIndexOf(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "lastIndexOf", args);
      return NULL;
    }

    static PyObject *t_String_length(t_String *self)
    {
      jint result;
      OBJ_CALL(result = self->object.length());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_String_matches(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.matches(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "matches", arg);
      return NULL;
    }

    static PyObject *t_String_offsetByCodePoints(t_String *self, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = self->object.offsetByCodePoints(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "offsetByCodePoints", args);
      return NULL;
    }

    static PyObject *t_String_regionMatches(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 4:
        {
          jint a0;
          String a1((jobject) NULL);
          jint a2;
          jint a3;
          jboolean result;

          if (!parseArgs(args, "IsII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.regionMatches(a0, a1, a2, a3));
            Py_RETURN_BOOL(result);
          }
        }
        break;
       case 5:
        {
          jboolean a0;
          jint a1;
          String a2((jobject) NULL);
          jint a3;
          jint a4;
          jboolean result;

          if (!parseArgs(args, "ZIsII", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = self->object.regionMatches(a0, a1, a2, a3, a4));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "regionMatches", args);
      return NULL;
    }

    static PyObject *t_String_replace(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          jchar a0;
          jchar a1;
          String result((jobject) NULL);

          if (!parseArgs(args, "CC", &a0, &a1))
          {
            OBJ_CALL(result = self->object.replace(a0, a1));
            return j2p(result);
          }
        }
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          ::java::lang::CharSequence a1((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
          {
            OBJ_CALL(result = self->object.replace(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "replace", args);
      return NULL;
    }

    static PyObject *t_String_replaceAll(t_String *self, PyObject *args)
    {
      String a0((jobject) NULL);
      String a1((jobject) NULL);
      String result((jobject) NULL);

      if (!parseArgs(args, "ss", &a0, &a1))
      {
        OBJ_CALL(result = self->object.replaceAll(a0, a1));
        return j2p(result);
      }

      PyErr_SetArgsError((PyObject *) self, "replaceAll", args);
      return NULL;
    }

    static PyObject *t_String_replaceFirst(t_String *self, PyObject *args)
    {
      String a0((jobject) NULL);
      String a1((jobject) NULL);
      String result((jobject) NULL);

      if (!parseArgs(args, "ss", &a0, &a1))
      {
        OBJ_CALL(result = self->object.replaceFirst(a0, a1));
        return j2p(result);
      }

      PyErr_SetArgsError((PyObject *) self, "replaceFirst", args);
      return NULL;
    }

    static PyObject *t_String_split(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          String a0((jobject) NULL);
          JArray< String > result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.split(a0));
            return JArray<jstring>(result.this$).wrap();
          }
        }
        break;
       case 2:
        {
          String a0((jobject) NULL);
          jint a1;
          JArray< String > result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = self->object.split(a0, a1));
            return JArray<jstring>(result.this$).wrap();
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "split", args);
      return NULL;
    }

    static PyObject *t_String_startsWith(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.startsWith(a0));
            Py_RETURN_BOOL(result);
          }
        }
        break;
       case 2:
        {
          String a0((jobject) NULL);
          jint a1;
          jboolean result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = self->object.startsWith(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "startsWith", args);
      return NULL;
    }

    static PyObject *t_String_subSequence(t_String *self, PyObject *args)
    {
      jint a0;
      jint a1;
      ::java::lang::CharSequence result((jobject) NULL);

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = self->object.subSequence(a0, a1));
        return ::java::lang::t_CharSequence::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "subSequence", args);
      return NULL;
    }

    static PyObject *t_String_substring(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.substring(a0));
            return j2p(result);
          }
        }
        break;
       case 2:
        {
          jint a0;
          jint a1;
          String result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.substring(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "substring", args);
      return NULL;
    }

    static PyObject *t_String_toCharArray(t_String *self)
    {
      JArray< jchar > result((jobject) NULL);
      OBJ_CALL(result = self->object.toCharArray());
      return result.wrap();
    }

    static PyObject *t_String_toLowerCase(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          String result((jobject) NULL);
          OBJ_CALL(result = self->object.toLowerCase());
          return j2p(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.toLowerCase(a0));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "toLowerCase", args);
      return NULL;
    }

    static PyObject *t_String_toString(t_String *self, PyObject *args)
    {
      String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(String), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_String_toUpperCase(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          String result((jobject) NULL);
          OBJ_CALL(result = self->object.toUpperCase());
          return j2p(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.toUpperCase(a0));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "toUpperCase", args);
      return NULL;
    }

    static PyObject *t_String_trim(t_String *self)
    {
      String result((jobject) NULL);
      OBJ_CALL(result = self->object.trim());
      return j2p(result);
    }

    static PyObject *t_String_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jboolean a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "Z", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          ::java::lang::Object a0((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          jfloat a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          jdouble a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          jint a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          jchar a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          jlong a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          String result((jobject) NULL);

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0, a1, a2));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }

    static PyObject *t_String_get__bytes(t_String *self, void *data)
    {
      JArray< jbyte > value((jobject) NULL);
      OBJ_CALL(value = self->object.getBytes());
      return value.wrap();
    }

    static PyObject *t_String_get__empty(t_String *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEmpty());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/TopOrdAndFloatQueue$OrdAndValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *TopOrdAndFloatQueue$OrdAndValue::class$ = NULL;
        jmethodID *TopOrdAndFloatQueue$OrdAndValue::mids$ = NULL;
        jfieldID *TopOrdAndFloatQueue$OrdAndValue::fids$ = NULL;
        bool TopOrdAndFloatQueue$OrdAndValue::live$ = false;

        jclass TopOrdAndFloatQueue$OrdAndValue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/TopOrdAndFloatQueue$OrdAndValue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_ord] = env->getFieldID(cls, "ord", "I");
            fids$[fid_value] = env->getFieldID(cls, "value", "F");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopOrdAndFloatQueue$OrdAndValue::TopOrdAndFloatQueue$OrdAndValue() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jint TopOrdAndFloatQueue$OrdAndValue::_get_ord() const
        {
          return env->getIntField(this$, fids$[fid_ord]);
        }

        void TopOrdAndFloatQueue$OrdAndValue::_set_ord(jint a0) const
        {
          env->setIntField(this$, fids$[fid_ord], a0);
        }

        jfloat TopOrdAndFloatQueue$OrdAndValue::_get_value() const
        {
          return env->getFloatField(this$, fids$[fid_value]);
        }

        void TopOrdAndFloatQueue$OrdAndValue::_set_value(jfloat a0) const
        {
          env->setFloatField(this$, fids$[fid_value], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_of_(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *args);
        static int t_TopOrdAndFloatQueue$OrdAndValue_init_(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_get__ord(t_TopOrdAndFloatQueue$OrdAndValue *self, void *data);
        static int t_TopOrdAndFloatQueue$OrdAndValue_set__ord(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *arg, void *data);
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_get__value(t_TopOrdAndFloatQueue$OrdAndValue *self, void *data);
        static int t_TopOrdAndFloatQueue$OrdAndValue_set__value(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *arg, void *data);

        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_get__parameters_(t_TopOrdAndFloatQueue$OrdAndValue *self, void *data);
        static PyGetSetDef t_TopOrdAndFloatQueue$OrdAndValue__fields_[] = {
          DECLARE_GETSET_FIELD(t_TopOrdAndFloatQueue$OrdAndValue, ord),
          DECLARE_GETSET_FIELD(t_TopOrdAndFloatQueue$OrdAndValue, value),
          DECLARE_GET_FIELD(t_TopOrdAndFloatQueue$OrdAndValue, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopOrdAndFloatQueue$OrdAndValue__methods_[] = {
          DECLARE_METHOD(t_TopOrdAndFloatQueue$OrdAndValue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndFloatQueue$OrdAndValue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndFloatQueue$OrdAndValue, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopOrdAndFloatQueue$OrdAndValue, t_TopOrdAndFloatQueue$OrdAndValue, ::java::lang::Object, TopOrdAndFloatQueue$OrdAndValue, t_TopOrdAndFloatQueue$OrdAndValue_init_, 0, 0, t_TopOrdAndFloatQueue$OrdAndValue__fields_, 0, 0);
        PyObject *t_TopOrdAndFloatQueue$OrdAndValue::wrap_Object(const TopOrdAndFloatQueue$OrdAndValue& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndFloatQueue$OrdAndValue::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndFloatQueue$OrdAndValue *self = (t_TopOrdAndFloatQueue$OrdAndValue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopOrdAndFloatQueue$OrdAndValue::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndFloatQueue$OrdAndValue::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndFloatQueue$OrdAndValue *self = (t_TopOrdAndFloatQueue$OrdAndValue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopOrdAndFloatQueue$OrdAndValue::install(PyObject *module)
        {
          installType(&PY_TYPE(TopOrdAndFloatQueue$OrdAndValue), module, "TopOrdAndFloatQueue$OrdAndValue", 0);
        }

        void t_TopOrdAndFloatQueue$OrdAndValue::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopOrdAndFloatQueue$OrdAndValue).tp_dict, "class_", make_descriptor(TopOrdAndFloatQueue$OrdAndValue::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopOrdAndFloatQueue$OrdAndValue).tp_dict, "wrapfn_", make_descriptor(t_TopOrdAndFloatQueue$OrdAndValue::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopOrdAndFloatQueue$OrdAndValue).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopOrdAndFloatQueue$OrdAndValue::initializeClass, 1)))
            return NULL;
          return t_TopOrdAndFloatQueue$OrdAndValue::wrap_Object(TopOrdAndFloatQueue$OrdAndValue(((t_TopOrdAndFloatQueue$OrdAndValue *) arg)->object.this$));
        }
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopOrdAndFloatQueue$OrdAndValue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_of_(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_TopOrdAndFloatQueue$OrdAndValue_init_(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *args, PyObject *kwds)
        {
          TopOrdAndFloatQueue$OrdAndValue object((jobject) NULL);

          INT_CALL(object = TopOrdAndFloatQueue$OrdAndValue());
          self->object = object;
          self->parameters[0] = &::org::apache::lucene::facet::PY_TYPE(TopOrdAndFloatQueue$OrdAndValue);

          return 0;
        }
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_get__parameters_(t_TopOrdAndFloatQueue$OrdAndValue *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_get__ord(t_TopOrdAndFloatQueue$OrdAndValue *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_ord());
          return PyInt_FromLong((long) value);
        }
        static int t_TopOrdAndFloatQueue$OrdAndValue_set__ord(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_ord(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "ord", arg);
          return -1;
        }

        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_get__value(t_TopOrdAndFloatQueue$OrdAndValue *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object._get_value());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TopOrdAndFloatQueue$OrdAndValue_set__value(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *arg, void *data)
        {
          jfloat value;
          if (!parseArg(arg, "F", &value))
          {
            INT_CALL(self->object._set_value(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "value", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocValues$MultiSortedSetDocValues.h"
#include "org/apache/lucene/index/MultiDocValues$OrdinalMap.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocValues$MultiSortedSetDocValues::class$ = NULL;
        jmethodID *MultiDocValues$MultiSortedSetDocValues::mids$ = NULL;
        jfieldID *MultiDocValues$MultiSortedSetDocValues::fids$ = NULL;
        bool MultiDocValues$MultiSortedSetDocValues::live$ = false;

        jclass MultiDocValues$MultiSortedSetDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocValues$MultiSortedSetDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getValueCount_54c6a17a] = env->getMethodID(cls, "getValueCount", "()J");
            mids$[mid_lookupOrd_9c59b7f4] = env->getMethodID(cls, "lookupOrd", "(J)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_nextOrd_54c6a17a] = env->getMethodID(cls, "nextOrd", "()J");
            mids$[mid_setDocument_39c7bd3c] = env->getMethodID(cls, "setDocument", "(I)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docStarts] = env->getFieldID(cls, "docStarts", "[I");
            fids$[fid_mapping] = env->getFieldID(cls, "mapping", "Lorg/apache/lucene/index/MultiDocValues$OrdinalMap;");
            fids$[fid_values] = env->getFieldID(cls, "values", "[Lorg/apache/lucene/index/SortedSetDocValues;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong MultiDocValues$MultiSortedSetDocValues::getValueCount() const
        {
          return env->callLongMethod(this$, mids$[mid_getValueCount_54c6a17a]);
        }

        ::org::apache::lucene::util::BytesRef MultiDocValues$MultiSortedSetDocValues::lookupOrd(jlong a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_lookupOrd_9c59b7f4], a0));
        }

        jlong MultiDocValues$MultiSortedSetDocValues::nextOrd() const
        {
          return env->callLongMethod(this$, mids$[mid_nextOrd_54c6a17a]);
        }

        void MultiDocValues$MultiSortedSetDocValues::setDocument(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDocument_39c7bd3c], a0);
        }

        JArray< jint > MultiDocValues$MultiSortedSetDocValues::_get_docStarts() const
        {
          return JArray< jint >(env->getObjectField(this$, fids$[fid_docStarts]));
        }

        ::org::apache::lucene::index::MultiDocValues$OrdinalMap MultiDocValues$MultiSortedSetDocValues::_get_mapping() const
        {
          return ::org::apache::lucene::index::MultiDocValues$OrdinalMap(env->getObjectField(this$, fids$[fid_mapping]));
        }

        JArray< ::org::apache::lucene::index::SortedSetDocValues > MultiDocValues$MultiSortedSetDocValues::_get_values() const
        {
          return JArray< ::org::apache::lucene::index::SortedSetDocValues >(env->getObjectField(this$, fids$[fid_values]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_getValueCount(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_lookupOrd(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_nextOrd(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_setDocument(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__docStarts(t_MultiDocValues$MultiSortedSetDocValues *self, void *data);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__mapping(t_MultiDocValues$MultiSortedSetDocValues *self, void *data);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__values(t_MultiDocValues$MultiSortedSetDocValues *self, void *data);

        static int t_MultiDocValues$MultiSortedSetDocValues_set__document(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *arg, void *data);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__valueCount(t_MultiDocValues$MultiSortedSetDocValues *self, void *data);
        static PyGetSetDef t_MultiDocValues$MultiSortedSetDocValues__fields_[] = {
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedSetDocValues, docStarts),
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedSetDocValues, mapping),
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedSetDocValues, values),
          DECLARE_SET_FIELD(t_MultiDocValues$MultiSortedSetDocValues, document),
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedSetDocValues, valueCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiDocValues$MultiSortedSetDocValues__methods_[] = {
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, getValueCount, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, lookupOrd, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, nextOrd, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, setDocument, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiDocValues$MultiSortedSetDocValues, t_MultiDocValues$MultiSortedSetDocValues, ::org::apache::lucene::index::SortedSetDocValues, MultiDocValues$MultiSortedSetDocValues, abstract_init, 0, 0, t_MultiDocValues$MultiSortedSetDocValues__fields_, 0, 0);

        void t_MultiDocValues$MultiSortedSetDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocValues$MultiSortedSetDocValues), module, "MultiDocValues$MultiSortedSetDocValues", 0);
        }

        void t_MultiDocValues$MultiSortedSetDocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiDocValues$MultiSortedSetDocValues).tp_dict, "class_", make_descriptor(MultiDocValues$MultiSortedSetDocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiDocValues$MultiSortedSetDocValues).tp_dict, "wrapfn_", make_descriptor(t_MultiDocValues$MultiSortedSetDocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiDocValues$MultiSortedSetDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocValues$MultiSortedSetDocValues::initializeClass, 1)))
            return NULL;
          return t_MultiDocValues$MultiSortedSetDocValues::wrap_Object(MultiDocValues$MultiSortedSetDocValues(((t_MultiDocValues$MultiSortedSetDocValues *) arg)->object.this$));
        }
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocValues$MultiSortedSetDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_getValueCount(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getValueCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiDocValues$MultiSortedSetDocValues), (PyObject *) self, "getValueCount", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_lookupOrd(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args)
        {
          jlong a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = self->object.lookupOrd(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiDocValues$MultiSortedSetDocValues), (PyObject *) self, "lookupOrd", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_nextOrd(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextOrd());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiDocValues$MultiSortedSetDocValues), (PyObject *) self, "nextOrd", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_setDocument(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setDocument(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(MultiDocValues$MultiSortedSetDocValues), (PyObject *) self, "setDocument", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__docStarts(t_MultiDocValues$MultiSortedSetDocValues *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docStarts());
          return value.wrap();
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__mapping(t_MultiDocValues$MultiSortedSetDocValues *self, void *data)
        {
          ::org::apache::lucene::index::MultiDocValues$OrdinalMap value((jobject) NULL);
          OBJ_CALL(value = self->object._get_mapping());
          return ::org::apache::lucene::index::t_MultiDocValues$OrdinalMap::wrap_Object(value);
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__values(t_MultiDocValues$MultiSortedSetDocValues *self, void *data)
        {
          JArray< ::org::apache::lucene::index::SortedSetDocValues > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_values());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_SortedSetDocValues::wrap_jobject);
        }

        static int t_MultiDocValues$MultiSortedSetDocValues_set__document(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setDocument(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "document", arg);
          return -1;
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__valueCount(t_MultiDocValues$MultiSortedSetDocValues *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getValueCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/Reader.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Readable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *Reader::class$ = NULL;
    jmethodID *Reader::mids$ = NULL;
    bool Reader::live$ = false;

    jclass Reader::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/Reader");

        mids$ = new jmethodID[max_mid];
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_mark_39c7bd3c] = env->getMethodID(cls, "mark", "(I)V");
        mids$[mid_markSupported_54c6a16a] = env->getMethodID(cls, "markSupported", "()Z");
        mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
        mids$[mid_read_700e23c9] = env->getMethodID(cls, "read", "([C)I");
        mids$[mid_read_6f0bb349] = env->getMethodID(cls, "read", "([CII)I");
        mids$[mid_ready_54c6a16a] = env->getMethodID(cls, "ready", "()Z");
        mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
        mids$[mid_skip_0ee6df33] = env->getMethodID(cls, "skip", "(J)J");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    void Reader::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    void Reader::mark(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_mark_39c7bd3c], a0);
    }

    jboolean Reader::markSupported() const
    {
      return env->callBooleanMethod(this$, mids$[mid_markSupported_54c6a16a]);
    }

    jint Reader::read() const
    {
      return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
    }

    jint Reader::read(const JArray< jchar > & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_read_700e23c9], a0.this$);
    }

    jint Reader::read(const JArray< jchar > & a0, jint a1, jint a2) const
    {
      return env->callIntMethod(this$, mids$[mid_read_6f0bb349], a0.this$, a1, a2);
    }

    jboolean Reader::ready() const
    {
      return env->callBooleanMethod(this$, mids$[mid_ready_54c6a16a]);
    }

    void Reader::reset() const
    {
      env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
    }

    jlong Reader::skip(jlong a0) const
    {
      return env->callLongMethod(this$, mids$[mid_skip_0ee6df33], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_Reader_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Reader_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Reader_close(t_Reader *self);
    static PyObject *t_Reader_mark(t_Reader *self, PyObject *arg);
    static PyObject *t_Reader_markSupported(t_Reader *self);
    static PyObject *t_Reader_read(t_Reader *self, PyObject *args);
    static PyObject *t_Reader_ready(t_Reader *self);
    static PyObject *t_Reader_reset(t_Reader *self);
    static PyObject *t_Reader_skip(t_Reader *self, PyObject *arg);

    static PyMethodDef t_Reader__methods_[] = {
      DECLARE_METHOD(t_Reader, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Reader, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Reader, close, METH_NOARGS),
      DECLARE_METHOD(t_Reader, mark, METH_O),
      DECLARE_METHOD(t_Reader, markSupported, METH_NOARGS),
      DECLARE_METHOD(t_Reader, read, METH_VARARGS),
      DECLARE_METHOD(t_Reader, ready, METH_NOARGS),
      DECLARE_METHOD(t_Reader, reset, METH_NOARGS),
      DECLARE_METHOD(t_Reader, skip, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Reader, t_Reader, ::java::lang::Object, Reader, abstract_init, 0, 0, 0, 0, 0);

    void t_Reader::install(PyObject *module)
    {
      installType(&PY_TYPE(Reader), module, "Reader", 0);
    }

    void t_Reader::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Reader).tp_dict, "class_", make_descriptor(Reader::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Reader).tp_dict, "wrapfn_", make_descriptor(t_Reader::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Reader).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Reader_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Reader::initializeClass, 1)))
        return NULL;
      return t_Reader::wrap_Object(Reader(((t_Reader *) arg)->object.this$));
    }
    static PyObject *t_Reader_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Reader::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Reader_close(t_Reader *self)
    {
      OBJ_CALL(self->object.close());
      Py_RETURN_NONE;
    }

    static PyObject *t_Reader_mark(t_Reader *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.mark(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "mark", arg);
      return NULL;
    }

    static PyObject *t_Reader_markSupported(t_Reader *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.markSupported());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Reader_read(t_Reader *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          jint result;
          OBJ_CALL(result = self->object.read());
          return PyInt_FromLong((long) result);
        }
        break;
       case 1:
        {
          JArray< jchar > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(result = self->object.read(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "read", args);
      return NULL;
    }

    static PyObject *t_Reader_ready(t_Reader *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.ready());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Reader_reset(t_Reader *self)
    {
      OBJ_CALL(self->object.reset());
      Py_RETURN_NONE;
    }

    static PyObject *t_Reader_skip(t_Reader *self, PyObject *arg)
    {
      jlong a0;
      jlong result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = self->object.skip(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError((PyObject *) self, "skip", arg);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DisjunctionMaxQuery.h"
#include "java/util/ArrayList.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/Iterable.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/util/Iterator.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DisjunctionMaxQuery::class$ = NULL;
        jmethodID *DisjunctionMaxQuery::mids$ = NULL;
        bool DisjunctionMaxQuery::live$ = false;

        jclass DisjunctionMaxQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DisjunctionMaxQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
            mids$[mid_init$_30a7c9ca] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;F)V");
            mids$[mid_add_9bfb370d] = env->getMethodID(cls, "add", "(Ljava/util/Collection;)V");
            mids$[mid_add_6e301113] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/Query;)V");
            mids$[mid_clone_ca9043ca] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/DisjunctionMaxQuery;");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getDisjuncts_21eb51b0] = env->getMethodID(cls, "getDisjuncts", "()Ljava/util/ArrayList;");
            mids$[mid_getTieBreakerMultiplier_54c6a176] = env->getMethodID(cls, "getTieBreakerMultiplier", "()F");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DisjunctionMaxQuery::DisjunctionMaxQuery(jfloat a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

        DisjunctionMaxQuery::DisjunctionMaxQuery(const ::java::util::Collection & a0, jfloat a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_30a7c9ca, a0.this$, a1)) {}

        void DisjunctionMaxQuery::add(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_9bfb370d], a0.this$);
        }

        void DisjunctionMaxQuery::add(const ::org::apache::lucene::search::Query & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_6e301113], a0.this$);
        }

        DisjunctionMaxQuery DisjunctionMaxQuery::clone() const
        {
          return DisjunctionMaxQuery(env->callObjectMethod(this$, mids$[mid_clone_ca9043ca]));
        }

        ::org::apache::lucene::search::Weight DisjunctionMaxQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean DisjunctionMaxQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void DisjunctionMaxQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        ::java::util::ArrayList DisjunctionMaxQuery::getDisjuncts() const
        {
          return ::java::util::ArrayList(env->callObjectMethod(this$, mids$[mid_getDisjuncts_21eb51b0]));
        }

        jfloat DisjunctionMaxQuery::getTieBreakerMultiplier() const
        {
          return env->callFloatMethod(this$, mids$[mid_getTieBreakerMultiplier_54c6a176]);
        }

        jint DisjunctionMaxQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::util::Iterator DisjunctionMaxQuery::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        ::org::apache::lucene::search::Query DisjunctionMaxQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        ::java::lang::String DisjunctionMaxQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DisjunctionMaxQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DisjunctionMaxQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DisjunctionMaxQuery_init_(t_DisjunctionMaxQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DisjunctionMaxQuery_add(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_clone(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_createWeight(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_equals(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_extractTerms(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_getDisjuncts(t_DisjunctionMaxQuery *self);
        static PyObject *t_DisjunctionMaxQuery_getTieBreakerMultiplier(t_DisjunctionMaxQuery *self);
        static PyObject *t_DisjunctionMaxQuery_hashCode(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_iterator(t_DisjunctionMaxQuery *self);
        static PyObject *t_DisjunctionMaxQuery_rewrite(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_toString(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_get__disjuncts(t_DisjunctionMaxQuery *self, void *data);
        static PyObject *t_DisjunctionMaxQuery_get__tieBreakerMultiplier(t_DisjunctionMaxQuery *self, void *data);
        static PyGetSetDef t_DisjunctionMaxQuery__fields_[] = {
          DECLARE_GET_FIELD(t_DisjunctionMaxQuery, disjuncts),
          DECLARE_GET_FIELD(t_DisjunctionMaxQuery, tieBreakerMultiplier),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DisjunctionMaxQuery__methods_[] = {
          DECLARE_METHOD(t_DisjunctionMaxQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, add, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, clone, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, getDisjuncts, METH_NOARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, getTieBreakerMultiplier, METH_NOARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, iterator, METH_NOARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DisjunctionMaxQuery, t_DisjunctionMaxQuery, ::org::apache::lucene::search::Query, DisjunctionMaxQuery, t_DisjunctionMaxQuery_init_, ((PyObject *(*)(t_DisjunctionMaxQuery *)) get_iterator< t_DisjunctionMaxQuery >), 0, t_DisjunctionMaxQuery__fields_, 0, 0);

        void t_DisjunctionMaxQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(DisjunctionMaxQuery), module, "DisjunctionMaxQuery", 0);
        }

        void t_DisjunctionMaxQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DisjunctionMaxQuery).tp_dict, "class_", make_descriptor(DisjunctionMaxQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DisjunctionMaxQuery).tp_dict, "wrapfn_", make_descriptor(t_DisjunctionMaxQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DisjunctionMaxQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DisjunctionMaxQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DisjunctionMaxQuery::initializeClass, 1)))
            return NULL;
          return t_DisjunctionMaxQuery::wrap_Object(DisjunctionMaxQuery(((t_DisjunctionMaxQuery *) arg)->object.this$));
        }
        static PyObject *t_DisjunctionMaxQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DisjunctionMaxQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DisjunctionMaxQuery_init_(t_DisjunctionMaxQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jfloat a0;
              DisjunctionMaxQuery object((jobject) NULL);

              if (!parseArgs(args, "F", &a0))
              {
                INT_CALL(object = DisjunctionMaxQuery(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;
              jfloat a1;
              DisjunctionMaxQuery object((jobject) NULL);

              if (!parseArgs(args, "KF", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1))
              {
                INT_CALL(object = DisjunctionMaxQuery(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DisjunctionMaxQuery_add(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_DisjunctionMaxQuery_clone(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          DisjunctionMaxQuery result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_DisjunctionMaxQuery::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_createWeight(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_equals(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_extractTerms(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_getDisjuncts(t_DisjunctionMaxQuery *self)
        {
          ::java::util::ArrayList result((jobject) NULL);
          OBJ_CALL(result = self->object.getDisjuncts());
          return ::java::util::t_ArrayList::wrap_Object(result, &::org::apache::lucene::search::PY_TYPE(Query));
        }

        static PyObject *t_DisjunctionMaxQuery_getTieBreakerMultiplier(t_DisjunctionMaxQuery *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getTieBreakerMultiplier());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_DisjunctionMaxQuery_hashCode(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_iterator(t_DisjunctionMaxQuery *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::search::PY_TYPE(Query));
        }

        static PyObject *t_DisjunctionMaxQuery_rewrite(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_toString(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_get__disjuncts(t_DisjunctionMaxQuery *self, void *data)
        {
          ::java::util::ArrayList value((jobject) NULL);
          OBJ_CALL(value = self->object.getDisjuncts());
          return ::java::util::t_ArrayList::wrap_Object(value);
        }

        static PyObject *t_DisjunctionMaxQuery_get__tieBreakerMultiplier(t_DisjunctionMaxQuery *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getTieBreakerMultiplier());
          return PyFloat_FromDouble((double) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *StandardQueryBuilder::class$ = NULL;
              jmethodID *StandardQueryBuilder::mids$ = NULL;
              bool StandardQueryBuilder::live$ = false;

              jclass StandardQueryBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_build_7f6ce179] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/Query;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::org::apache::lucene::search::Query StandardQueryBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_build_7f6ce179], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_StandardQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryBuilder_build(t_StandardQueryBuilder *self, PyObject *args);

              static PyMethodDef t_StandardQueryBuilder__methods_[] = {
                DECLARE_METHOD(t_StandardQueryBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryBuilder, build, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardQueryBuilder, t_StandardQueryBuilder, ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder, StandardQueryBuilder, abstract_init, 0, 0, 0, 0, 0);

              void t_StandardQueryBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardQueryBuilder), module, "StandardQueryBuilder", 0);
              }

              void t_StandardQueryBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardQueryBuilder).tp_dict, "class_", make_descriptor(StandardQueryBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_StandardQueryBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StandardQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardQueryBuilder::initializeClass, 1)))
                  return NULL;
                return t_StandardQueryBuilder::wrap_Object(StandardQueryBuilder(((t_StandardQueryBuilder *) arg)->object.this$));
              }
              static PyObject *t_StandardQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardQueryBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_StandardQueryBuilder_build(t_StandardQueryBuilder *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(StandardQueryBuilder), (PyObject *) self, "build", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *Analyzer$TokenStreamComponents::class$ = NULL;
        jmethodID *Analyzer$TokenStreamComponents::mids$ = NULL;
        bool Analyzer$TokenStreamComponents::live$ = false;

        jclass Analyzer$TokenStreamComponents::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/Analyzer$TokenStreamComponents");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_789fa946] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Tokenizer;)V");
            mids$[mid_init$_f0015a14] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Tokenizer;Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_getTokenStream_71f550c9] = env->getMethodID(cls, "getTokenStream", "()Lorg/apache/lucene/analysis/TokenStream;");
            mids$[mid_getTokenizer_6c9709bb] = env->getMethodID(cls, "getTokenizer", "()Lorg/apache/lucene/analysis/Tokenizer;");
            mids$[mid_setReader_cf2e3c10] = env->getMethodID(cls, "setReader", "(Ljava/io/Reader;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Analyzer$TokenStreamComponents::Analyzer$TokenStreamComponents(const ::org::apache::lucene::analysis::Tokenizer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_789fa946, a0.this$)) {}

        Analyzer$TokenStreamComponents::Analyzer$TokenStreamComponents(const ::org::apache::lucene::analysis::Tokenizer & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f0015a14, a0.this$, a1.this$)) {}

        ::org::apache::lucene::analysis::TokenStream Analyzer$TokenStreamComponents::getTokenStream() const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_getTokenStream_71f550c9]));
        }

        ::org::apache::lucene::analysis::Tokenizer Analyzer$TokenStreamComponents::getTokenizer() const
        {
          return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_getTokenizer_6c9709bb]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_Analyzer$TokenStreamComponents_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Analyzer$TokenStreamComponents_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Analyzer$TokenStreamComponents_init_(t_Analyzer$TokenStreamComponents *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Analyzer$TokenStreamComponents_getTokenStream(t_Analyzer$TokenStreamComponents *self);
        static PyObject *t_Analyzer$TokenStreamComponents_getTokenizer(t_Analyzer$TokenStreamComponents *self);
        static PyObject *t_Analyzer$TokenStreamComponents_get__tokenStream(t_Analyzer$TokenStreamComponents *self, void *data);
        static PyObject *t_Analyzer$TokenStreamComponents_get__tokenizer(t_Analyzer$TokenStreamComponents *self, void *data);
        static PyGetSetDef t_Analyzer$TokenStreamComponents__fields_[] = {
          DECLARE_GET_FIELD(t_Analyzer$TokenStreamComponents, tokenStream),
          DECLARE_GET_FIELD(t_Analyzer$TokenStreamComponents, tokenizer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Analyzer$TokenStreamComponents__methods_[] = {
          DECLARE_METHOD(t_Analyzer$TokenStreamComponents, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$TokenStreamComponents, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$TokenStreamComponents, getTokenStream, METH_NOARGS),
          DECLARE_METHOD(t_Analyzer$TokenStreamComponents, getTokenizer, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Analyzer$TokenStreamComponents, t_Analyzer$TokenStreamComponents, ::java::lang::Object, Analyzer$TokenStreamComponents, t_Analyzer$TokenStreamComponents_init_, 0, 0, t_Analyzer$TokenStreamComponents__fields_, 0, 0);

        void t_Analyzer$TokenStreamComponents::install(PyObject *module)
        {
          installType(&PY_TYPE(Analyzer$TokenStreamComponents), module, "Analyzer$TokenStreamComponents", 0);
        }

        void t_Analyzer$TokenStreamComponents::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Analyzer$TokenStreamComponents).tp_dict, "class_", make_descriptor(Analyzer$TokenStreamComponents::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Analyzer$TokenStreamComponents).tp_dict, "wrapfn_", make_descriptor(t_Analyzer$TokenStreamComponents::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Analyzer$TokenStreamComponents).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Analyzer$TokenStreamComponents_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Analyzer$TokenStreamComponents::initializeClass, 1)))
            return NULL;
          return t_Analyzer$TokenStreamComponents::wrap_Object(Analyzer$TokenStreamComponents(((t_Analyzer$TokenStreamComponents *) arg)->object.this$));
        }
        static PyObject *t_Analyzer$TokenStreamComponents_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Analyzer$TokenStreamComponents::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Analyzer$TokenStreamComponents_init_(t_Analyzer$TokenStreamComponents *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::analysis::Tokenizer a0((jobject) NULL);
              Analyzer$TokenStreamComponents object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Tokenizer::initializeClass, &a0))
              {
                INT_CALL(object = Analyzer$TokenStreamComponents(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::analysis::Tokenizer a0((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
              Analyzer$TokenStreamComponents object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Tokenizer::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
              {
                INT_CALL(object = Analyzer$TokenStreamComponents(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Analyzer$TokenStreamComponents_getTokenStream(t_Analyzer$TokenStreamComponents *self)
        {
          ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);
          OBJ_CALL(result = self->object.getTokenStream());
          return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
        }

        static PyObject *t_Analyzer$TokenStreamComponents_getTokenizer(t_Analyzer$TokenStreamComponents *self)
        {
          ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);
          OBJ_CALL(result = self->object.getTokenizer());
          return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
        }

        static PyObject *t_Analyzer$TokenStreamComponents_get__tokenStream(t_Analyzer$TokenStreamComponents *self, void *data)
        {
          ::org::apache::lucene::analysis::TokenStream value((jobject) NULL);
          OBJ_CALL(value = self->object.getTokenStream());
          return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(value);
        }

        static PyObject *t_Analyzer$TokenStreamComponents_get__tokenizer(t_Analyzer$TokenStreamComponents *self, void *data)
        {
          ::org::apache::lucene::analysis::Tokenizer value((jobject) NULL);
          OBJ_CALL(value = self->object.getTokenizer());
          return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexDeletionPolicy.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexDeletionPolicy::class$ = NULL;
        jmethodID *IndexDeletionPolicy::mids$ = NULL;
        bool IndexDeletionPolicy::live$ = false;

        jclass IndexDeletionPolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexDeletionPolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_onCommit_1fde8fc3] = env->getMethodID(cls, "onCommit", "(Ljava/util/List;)V");
            mids$[mid_onInit_1fde8fc3] = env->getMethodID(cls, "onInit", "(Ljava/util/List;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void IndexDeletionPolicy::onCommit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onCommit_1fde8fc3], a0.this$);
        }

        void IndexDeletionPolicy::onInit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onInit_1fde8fc3], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexDeletionPolicy_onCommit(t_IndexDeletionPolicy *self, PyObject *arg);
        static PyObject *t_IndexDeletionPolicy_onInit(t_IndexDeletionPolicy *self, PyObject *arg);

        static PyMethodDef t_IndexDeletionPolicy__methods_[] = {
          DECLARE_METHOD(t_IndexDeletionPolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexDeletionPolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexDeletionPolicy, onCommit, METH_O),
          DECLARE_METHOD(t_IndexDeletionPolicy, onInit, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexDeletionPolicy, t_IndexDeletionPolicy, ::java::lang::Object, IndexDeletionPolicy, abstract_init, 0, 0, 0, 0, 0);

        void t_IndexDeletionPolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexDeletionPolicy), module, "IndexDeletionPolicy", 0);
        }

        void t_IndexDeletionPolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexDeletionPolicy).tp_dict, "class_", make_descriptor(IndexDeletionPolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexDeletionPolicy).tp_dict, "wrapfn_", make_descriptor(t_IndexDeletionPolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexDeletionPolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexDeletionPolicy::initializeClass, 1)))
            return NULL;
          return t_IndexDeletionPolicy::wrap_Object(IndexDeletionPolicy(((t_IndexDeletionPolicy *) arg)->object.this$));
        }
        static PyObject *t_IndexDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexDeletionPolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexDeletionPolicy_onCommit(t_IndexDeletionPolicy *self, PyObject *arg)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onCommit(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "onCommit", arg);
          return NULL;
        }

        static PyObject *t_IndexDeletionPolicy_onInit(t_IndexDeletionPolicy *self, PyObject *arg)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onInit(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "onInit", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/DanishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *DanishStemmer::class$ = NULL;
        jmethodID *DanishStemmer::mids$ = NULL;
        bool DanishStemmer::live$ = false;

        jclass DanishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/DanishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DanishStemmer::DanishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean DanishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint DanishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean DanishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_DanishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DanishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DanishStemmer_init_(t_DanishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DanishStemmer_equals(t_DanishStemmer *self, PyObject *args);
        static PyObject *t_DanishStemmer_hashCode(t_DanishStemmer *self, PyObject *args);
        static PyObject *t_DanishStemmer_stem(t_DanishStemmer *self, PyObject *args);

        static PyMethodDef t_DanishStemmer__methods_[] = {
          DECLARE_METHOD(t_DanishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DanishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DanishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_DanishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_DanishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DanishStemmer, t_DanishStemmer, ::org::tartarus::snowball::SnowballProgram, DanishStemmer, t_DanishStemmer_init_, 0, 0, 0, 0, 0);

        void t_DanishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(DanishStemmer), module, "DanishStemmer", 0);
        }

        void t_DanishStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DanishStemmer).tp_dict, "class_", make_descriptor(DanishStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DanishStemmer).tp_dict, "wrapfn_", make_descriptor(t_DanishStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DanishStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DanishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DanishStemmer::initializeClass, 1)))
            return NULL;
          return t_DanishStemmer::wrap_Object(DanishStemmer(((t_DanishStemmer *) arg)->object.this$));
        }
        static PyObject *t_DanishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DanishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DanishStemmer_init_(t_DanishStemmer *self, PyObject *args, PyObject *kwds)
        {
          DanishStemmer object((jobject) NULL);

          INT_CALL(object = DanishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_DanishStemmer_equals(t_DanishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DanishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_DanishStemmer_hashCode(t_DanishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(DanishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_DanishStemmer_stem(t_DanishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DanishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/PositionSpan.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *PositionSpan::class$ = NULL;
          jmethodID *PositionSpan::mids$ = NULL;
          bool PositionSpan::live$ = false;

          jclass PositionSpan::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/PositionSpan");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PositionSpan::PositionSpan(jint a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_PositionSpan_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionSpan_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PositionSpan_init_(t_PositionSpan *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_PositionSpan__methods_[] = {
            DECLARE_METHOD(t_PositionSpan, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionSpan, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PositionSpan, t_PositionSpan, ::java::lang::Object, PositionSpan, t_PositionSpan_init_, 0, 0, 0, 0, 0);

          void t_PositionSpan::install(PyObject *module)
          {
            installType(&PY_TYPE(PositionSpan), module, "PositionSpan", 0);
          }

          void t_PositionSpan::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PositionSpan).tp_dict, "class_", make_descriptor(PositionSpan::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PositionSpan).tp_dict, "wrapfn_", make_descriptor(t_PositionSpan::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PositionSpan).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositionSpan_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositionSpan::initializeClass, 1)))
              return NULL;
            return t_PositionSpan::wrap_Object(PositionSpan(((t_PositionSpan *) arg)->object.this$));
          }
          static PyObject *t_PositionSpan_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositionSpan::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PositionSpan_init_(t_PositionSpan *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            PositionSpan object((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              INT_CALL(object = PositionSpan(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/path/PathHierarchyTokenizer.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace path {

          ::java::lang::Class *PathHierarchyTokenizer::class$ = NULL;
          jmethodID *PathHierarchyTokenizer::mids$ = NULL;
          bool PathHierarchyTokenizer::live$ = false;
          jchar PathHierarchyTokenizer::DEFAULT_DELIMITER = (jchar) 0;
          jint PathHierarchyTokenizer::DEFAULT_SKIP = (jint) 0;

          jclass PathHierarchyTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/path/PathHierarchyTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_8c604f56] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;I)V");
              mids$[mid_init$_944d83a2] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;IC)V");
              mids$[mid_init$_94478bac] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;CC)V");
              mids$[mid_init$_94f21e72] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;CCI)V");
              mids$[mid_init$_df655116] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;CCI)V");
              mids$[mid_init$_5df3b604] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;ICCI)V");
              mids$[mid_init$_0b338d38] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;ICCI)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_DELIMITER = env->getStaticCharField(cls, "DEFAULT_DELIMITER");
              DEFAULT_SKIP = env->getStaticIntField(cls, "DEFAULT_SKIP");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::java::io::Reader & a0, jint a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_8c604f56, a0.this$, a1)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::java::io::Reader & a0, jint a1, jchar a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_944d83a2, a0.this$, a1, a2)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::java::io::Reader & a0, jchar a1, jchar a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_94478bac, a0.this$, a1, a2)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::java::io::Reader & a0, jchar a1, jchar a2, jint a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_94f21e72, a0.this$, a1, a2, a3)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, jchar a2, jchar a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_df655116, a0.this$, a1.this$, a2, a3, a4)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::java::io::Reader & a0, jint a1, jchar a2, jchar a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_5df3b604, a0.this$, a1, a2, a3, a4)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, jint a2, jchar a3, jchar a4, jint a5) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_0b338d38, a0.this$, a1.this$, a2, a3, a4, a5)) {}

          void PathHierarchyTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean PathHierarchyTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void PathHierarchyTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace path {
          static PyObject *t_PathHierarchyTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PathHierarchyTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PathHierarchyTokenizer_init_(t_PathHierarchyTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PathHierarchyTokenizer_end(t_PathHierarchyTokenizer *self, PyObject *args);
          static PyObject *t_PathHierarchyTokenizer_incrementToken(t_PathHierarchyTokenizer *self, PyObject *args);
          static PyObject *t_PathHierarchyTokenizer_reset(t_PathHierarchyTokenizer *self, PyObject *args);

          static PyMethodDef t_PathHierarchyTokenizer__methods_[] = {
            DECLARE_METHOD(t_PathHierarchyTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PathHierarchyTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PathHierarchyTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_PathHierarchyTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_PathHierarchyTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PathHierarchyTokenizer, t_PathHierarchyTokenizer, ::org::apache::lucene::analysis::Tokenizer, PathHierarchyTokenizer, t_PathHierarchyTokenizer_init_, 0, 0, 0, 0, 0);

          void t_PathHierarchyTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(PathHierarchyTokenizer), module, "PathHierarchyTokenizer", 0);
          }

          void t_PathHierarchyTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PathHierarchyTokenizer).tp_dict, "class_", make_descriptor(PathHierarchyTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PathHierarchyTokenizer).tp_dict, "wrapfn_", make_descriptor(t_PathHierarchyTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PathHierarchyTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PathHierarchyTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(PathHierarchyTokenizer).tp_dict, "DEFAULT_DELIMITER", make_descriptor(PathHierarchyTokenizer::DEFAULT_DELIMITER));
            PyDict_SetItemString(PY_TYPE(PathHierarchyTokenizer).tp_dict, "DEFAULT_SKIP", make_descriptor(PathHierarchyTokenizer::DEFAULT_SKIP));
          }

          static PyObject *t_PathHierarchyTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PathHierarchyTokenizer::initializeClass, 1)))
              return NULL;
            return t_PathHierarchyTokenizer::wrap_Object(PathHierarchyTokenizer(((t_PathHierarchyTokenizer *) arg)->object.this$));
          }
          static PyObject *t_PathHierarchyTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PathHierarchyTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PathHierarchyTokenizer_init_(t_PathHierarchyTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kI", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                jchar a2;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kIC", ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                jchar a1;
                jchar a2;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kCC", ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::io::Reader a0((jobject) NULL);
                jchar a1;
                jchar a2;
                jint a3;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kCCI", ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jchar a2;
                jchar a3;
                jint a4;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkCCI", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                jchar a2;
                jchar a3;
                jint a4;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kICCI", ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 6:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                jchar a3;
                jchar a4;
                jint a5;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkICCI", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PathHierarchyTokenizer_end(t_PathHierarchyTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PathHierarchyTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_PathHierarchyTokenizer_incrementToken(t_PathHierarchyTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PathHierarchyTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_PathHierarchyTokenizer_reset(t_PathHierarchyTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PathHierarchyTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene42/Lucene42TermVectorsFormat.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {

          ::java::lang::Class *Lucene42TermVectorsFormat::class$ = NULL;
          jmethodID *Lucene42TermVectorsFormat::mids$ = NULL;
          bool Lucene42TermVectorsFormat::live$ = false;

          jclass Lucene42TermVectorsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene42/Lucene42TermVectorsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene42TermVectorsFormat::Lucene42TermVectorsFormat() : ::org::apache::lucene::codecs::compressing::CompressingTermVectorsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {
          static PyObject *t_Lucene42TermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene42TermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene42TermVectorsFormat_init_(t_Lucene42TermVectorsFormat *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_Lucene42TermVectorsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene42TermVectorsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42TermVectorsFormat, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene42TermVectorsFormat, t_Lucene42TermVectorsFormat, ::org::apache::lucene::codecs::compressing::CompressingTermVectorsFormat, Lucene42TermVectorsFormat, t_Lucene42TermVectorsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene42TermVectorsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene42TermVectorsFormat), module, "Lucene42TermVectorsFormat", 0);
          }

          void t_Lucene42TermVectorsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene42TermVectorsFormat).tp_dict, "class_", make_descriptor(Lucene42TermVectorsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene42TermVectorsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene42TermVectorsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene42TermVectorsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene42TermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene42TermVectorsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene42TermVectorsFormat::wrap_Object(Lucene42TermVectorsFormat(((t_Lucene42TermVectorsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene42TermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene42TermVectorsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene42TermVectorsFormat_init_(t_Lucene42TermVectorsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene42TermVectorsFormat object((jobject) NULL);

            INT_CALL(object = Lucene42TermVectorsFormat());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/BaseDirectory.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/Lock.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *BaseDirectory::class$ = NULL;
        jmethodID *BaseDirectory::mids$ = NULL;
        bool BaseDirectory::live$ = false;

        jclass BaseDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/BaseDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_getLockFactory_e4e9c36d] = env->getMethodID(cls, "getLockFactory", "()Lorg/apache/lucene/store/LockFactory;");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_setLockFactory_9892eb8c] = env->getMethodID(cls, "setLockFactory", "(Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_ensureOpen_54c6a166] = env->getMethodID(cls, "ensureOpen", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void BaseDirectory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        ::org::apache::lucene::store::LockFactory BaseDirectory::getLockFactory() const
        {
          return ::org::apache::lucene::store::LockFactory(env->callObjectMethod(this$, mids$[mid_getLockFactory_e4e9c36d]));
        }

        ::org::apache::lucene::store::Lock BaseDirectory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }

        void BaseDirectory::setLockFactory(const ::org::apache::lucene::store::LockFactory & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLockFactory_9892eb8c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_BaseDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BaseDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BaseDirectory_clearLock(t_BaseDirectory *self, PyObject *args);
        static PyObject *t_BaseDirectory_getLockFactory(t_BaseDirectory *self, PyObject *args);
        static PyObject *t_BaseDirectory_makeLock(t_BaseDirectory *self, PyObject *args);
        static PyObject *t_BaseDirectory_setLockFactory(t_BaseDirectory *self, PyObject *args);
        static PyObject *t_BaseDirectory_get__lockFactory(t_BaseDirectory *self, void *data);
        static int t_BaseDirectory_set__lockFactory(t_BaseDirectory *self, PyObject *arg, void *data);
        static PyGetSetDef t_BaseDirectory__fields_[] = {
          DECLARE_GETSET_FIELD(t_BaseDirectory, lockFactory),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BaseDirectory__methods_[] = {
          DECLARE_METHOD(t_BaseDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BaseDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BaseDirectory, clearLock, METH_VARARGS),
          DECLARE_METHOD(t_BaseDirectory, getLockFactory, METH_VARARGS),
          DECLARE_METHOD(t_BaseDirectory, makeLock, METH_VARARGS),
          DECLARE_METHOD(t_BaseDirectory, setLockFactory, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BaseDirectory, t_BaseDirectory, ::org::apache::lucene::store::Directory, BaseDirectory, abstract_init, 0, 0, t_BaseDirectory__fields_, 0, 0);

        void t_BaseDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(BaseDirectory), module, "BaseDirectory", 0);
        }

        void t_BaseDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BaseDirectory).tp_dict, "class_", make_descriptor(BaseDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BaseDirectory).tp_dict, "wrapfn_", make_descriptor(t_BaseDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BaseDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BaseDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BaseDirectory::initializeClass, 1)))
            return NULL;
          return t_BaseDirectory::wrap_Object(BaseDirectory(((t_BaseDirectory *) arg)->object.this$));
        }
        static PyObject *t_BaseDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BaseDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BaseDirectory_clearLock(t_BaseDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BaseDirectory), (PyObject *) self, "clearLock", args, 2);
        }

        static PyObject *t_BaseDirectory_getLockFactory(t_BaseDirectory *self, PyObject *args)
        {
          ::org::apache::lucene::store::LockFactory result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLockFactory());
            return ::org::apache::lucene::store::t_LockFactory::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BaseDirectory), (PyObject *) self, "getLockFactory", args, 2);
        }

        static PyObject *t_BaseDirectory_makeLock(t_BaseDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BaseDirectory), (PyObject *) self, "makeLock", args, 2);
        }

        static PyObject *t_BaseDirectory_setLockFactory(t_BaseDirectory *self, PyObject *args)
        {
          ::org::apache::lucene::store::LockFactory a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setLockFactory(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BaseDirectory), (PyObject *) self, "setLockFactory", args, 2);
        }

        static PyObject *t_BaseDirectory_get__lockFactory(t_BaseDirectory *self, void *data)
        {
          ::org::apache::lucene::store::LockFactory value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockFactory());
          return ::org::apache::lucene::store::t_LockFactory::wrap_Object(value);
        }
        static int t_BaseDirectory_set__lockFactory(t_BaseDirectory *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::store::LockFactory value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &value))
            {
              INT_CALL(self->object.setLockFactory(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "lockFactory", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/MultiTrie2.h"
#include "java/lang/Class.h"
#include "java/io/DataOutput.h"
#include "java/lang/CharSequence.h"
#include "org/egothor/stemmer/Trie.h"
#include "org/egothor/stemmer/Reduce.h"
#include "java/io/DataInput.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *MultiTrie2::class$ = NULL;
      jmethodID *MultiTrie2::mids$ = NULL;
      bool MultiTrie2::live$ = false;

      jclass MultiTrie2::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/MultiTrie2");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_e051d6a6] = env->getMethodID(cls, "<init>", "(Ljava/io/DataInput;)V");
          mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
          mids$[mid_add_db1d05ae] = env->getMethodID(cls, "add", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)V");
          mids$[mid_decompose_2fa560b3] = env->getMethodID(cls, "decompose", "(Ljava/lang/CharSequence;)[Ljava/lang/CharSequence;");
          mids$[mid_getFully_856f5013] = env->getMethodID(cls, "getFully", "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;");
          mids$[mid_getLastOnPath_856f5013] = env->getMethodID(cls, "getLastOnPath", "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;");
          mids$[mid_reduce_6ee87cd1] = env->getMethodID(cls, "reduce", "(Lorg/egothor/stemmer/Reduce;)Lorg/egothor/stemmer/Trie;");
          mids$[mid_store_cfb051e6] = env->getMethodID(cls, "store", "(Ljava/io/DataOutput;)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      MultiTrie2::MultiTrie2(const ::java::io::DataInput & a0) : ::org::egothor::stemmer::MultiTrie(env->newObject(initializeClass, &mids$, mid_init$_e051d6a6, a0.this$)) {}

      MultiTrie2::MultiTrie2(jboolean a0) : ::org::egothor::stemmer::MultiTrie(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

      void MultiTrie2::add(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) const
      {
        env->callVoidMethod(this$, mids$[mid_add_db1d05ae], a0.this$, a1.this$);
      }

      JArray< ::java::lang::CharSequence > MultiTrie2::decompose(const ::java::lang::CharSequence & a0) const
      {
        return JArray< ::java::lang::CharSequence >(env->callObjectMethod(this$, mids$[mid_decompose_2fa560b3], a0.this$));
      }

      ::java::lang::CharSequence MultiTrie2::getFully(const ::java::lang::CharSequence & a0) const
      {
        return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getFully_856f5013], a0.this$));
      }

      ::java::lang::CharSequence MultiTrie2::getLastOnPath(const ::java::lang::CharSequence & a0) const
      {
        return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getLastOnPath_856f5013], a0.this$));
      }

      ::org::egothor::stemmer::Trie MultiTrie2::reduce(const ::org::egothor::stemmer::Reduce & a0) const
      {
        return ::org::egothor::stemmer::Trie(env->callObjectMethod(this$, mids$[mid_reduce_6ee87cd1], a0.this$));
      }

      void MultiTrie2::store(const ::java::io::DataOutput & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_store_cfb051e6], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_MultiTrie2_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_MultiTrie2_instance_(PyTypeObject *type, PyObject *arg);
      static int t_MultiTrie2_init_(t_MultiTrie2 *self, PyObject *args, PyObject *kwds);
      static PyObject *t_MultiTrie2_add(t_MultiTrie2 *self, PyObject *args);
      static PyObject *t_MultiTrie2_decompose(t_MultiTrie2 *self, PyObject *arg);
      static PyObject *t_MultiTrie2_getFully(t_MultiTrie2 *self, PyObject *args);
      static PyObject *t_MultiTrie2_getLastOnPath(t_MultiTrie2 *self, PyObject *args);
      static PyObject *t_MultiTrie2_reduce(t_MultiTrie2 *self, PyObject *args);
      static PyObject *t_MultiTrie2_store(t_MultiTrie2 *self, PyObject *args);

      static PyMethodDef t_MultiTrie2__methods_[] = {
        DECLARE_METHOD(t_MultiTrie2, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_MultiTrie2, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_MultiTrie2, add, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie2, decompose, METH_O),
        DECLARE_METHOD(t_MultiTrie2, getFully, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie2, getLastOnPath, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie2, reduce, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie2, store, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(MultiTrie2, t_MultiTrie2, ::org::egothor::stemmer::MultiTrie, MultiTrie2, t_MultiTrie2_init_, 0, 0, 0, 0, 0);

      void t_MultiTrie2::install(PyObject *module)
      {
        installType(&PY_TYPE(MultiTrie2), module, "MultiTrie2", 0);
      }

      void t_MultiTrie2::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(MultiTrie2).tp_dict, "class_", make_descriptor(MultiTrie2::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(MultiTrie2).tp_dict, "wrapfn_", make_descriptor(t_MultiTrie2::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(MultiTrie2).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_MultiTrie2_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, MultiTrie2::initializeClass, 1)))
          return NULL;
        return t_MultiTrie2::wrap_Object(MultiTrie2(((t_MultiTrie2 *) arg)->object.this$));
      }
      static PyObject *t_MultiTrie2_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, MultiTrie2::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_MultiTrie2_init_(t_MultiTrie2 *self, PyObject *args, PyObject *kwds)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::java::io::DataInput a0((jobject) NULL);
            MultiTrie2 object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::DataInput::initializeClass, &a0))
            {
              INT_CALL(object = MultiTrie2(a0));
              self->object = object;
              break;
            }
          }
          {
            jboolean a0;
            MultiTrie2 object((jobject) NULL);

            if (!parseArgs(args, "Z", &a0))
            {
              INT_CALL(object = MultiTrie2(a0));
              self->object = object;
              break;
            }
          }
         default:
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_MultiTrie2_add(t_MultiTrie2 *self, PyObject *args)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence a1((jobject) NULL);

        if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
        {
          OBJ_CALL(self->object.add(a0, a1));
          Py_RETURN_NONE;
        }

        return callSuper(&PY_TYPE(MultiTrie2), (PyObject *) self, "add", args, 2);
      }

      static PyObject *t_MultiTrie2_decompose(t_MultiTrie2 *self, PyObject *arg)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        JArray< ::java::lang::CharSequence > result((jobject) NULL);

        if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.decompose(a0));
          return JArray<jobject>(result.this$).wrap(::java::lang::t_CharSequence::wrap_jobject);
        }

        PyErr_SetArgsError((PyObject *) self, "decompose", arg);
        return NULL;
      }

      static PyObject *t_MultiTrie2_getFully(t_MultiTrie2 *self, PyObject *args)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence result((jobject) NULL);

        if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getFully(a0));
          return ::java::lang::t_CharSequence::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(MultiTrie2), (PyObject *) self, "getFully", args, 2);
      }

      static PyObject *t_MultiTrie2_getLastOnPath(t_MultiTrie2 *self, PyObject *args)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence result((jobject) NULL);

        if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getLastOnPath(a0));
          return ::java::lang::t_CharSequence::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(MultiTrie2), (PyObject *) self, "getLastOnPath", args, 2);
      }

      static PyObject *t_MultiTrie2_reduce(t_MultiTrie2 *self, PyObject *args)
      {
        ::org::egothor::stemmer::Reduce a0((jobject) NULL);
        ::org::egothor::stemmer::Trie result((jobject) NULL);

        if (!parseArgs(args, "k", ::org::egothor::stemmer::Reduce::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.reduce(a0));
          return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(MultiTrie2), (PyObject *) self, "reduce", args, 2);
      }

      static PyObject *t_MultiTrie2_store(t_MultiTrie2 *self, PyObject *args)
      {
        ::java::io::DataOutput a0((jobject) NULL);

        if (!parseArgs(args, "k", ::java::io::DataOutput::initializeClass, &a0))
        {
          OBJ_CALL(self->object.store(a0));
          Py_RETURN_NONE;
        }

        return callSuper(&PY_TYPE(MultiTrie2), (PyObject *) self, "store", args, 2);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40StoredFieldsWriter::class$ = NULL;
          jmethodID *Lucene40StoredFieldsWriter::mids$ = NULL;
          bool Lucene40StoredFieldsWriter::live$ = false;
          ::java::lang::String *Lucene40StoredFieldsWriter::FIELDS_EXTENSION = NULL;
          ::java::lang::String *Lucene40StoredFieldsWriter::FIELDS_INDEX_EXTENSION = NULL;

          jclass Lucene40StoredFieldsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1962ccd4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
              mids$[mid_abort_54c6a166] = env->getMethodID(cls, "abort", "()V");
              mids$[mid_addRawDocuments_9a4782ba] = env->getMethodID(cls, "addRawDocuments", "(Lorg/apache/lucene/store/IndexInput;[II)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_finish_48f050c2] = env->getMethodID(cls, "finish", "(Lorg/apache/lucene/index/FieldInfos;I)V");
              mids$[mid_finishDocument_54c6a166] = env->getMethodID(cls, "finishDocument", "()V");
              mids$[mid_merge_fd0cfdeb] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;)I");
              mids$[mid_startDocument_54c6a166] = env->getMethodID(cls, "startDocument", "()V");
              mids$[mid_writeField_0de3c993] = env->getMethodID(cls, "writeField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/IndexableField;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              FIELDS_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "FIELDS_EXTENSION", "Ljava/lang/String;"));
              FIELDS_INDEX_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "FIELDS_INDEX_EXTENSION", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40StoredFieldsWriter::Lucene40StoredFieldsWriter(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) : ::org::apache::lucene::codecs::StoredFieldsWriter(env->newObject(initializeClass, &mids$, mid_init$_1962ccd4, a0.this$, a1.this$, a2.this$)) {}

          void Lucene40StoredFieldsWriter::abort() const
          {
            env->callVoidMethod(this$, mids$[mid_abort_54c6a166]);
          }

          void Lucene40StoredFieldsWriter::addRawDocuments(const ::org::apache::lucene::store::IndexInput & a0, const JArray< jint > & a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_addRawDocuments_9a4782ba], a0.this$, a1.this$, a2);
          }

          void Lucene40StoredFieldsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void Lucene40StoredFieldsWriter::finish(const ::org::apache::lucene::index::FieldInfos & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_finish_48f050c2], a0.this$, a1);
          }

          void Lucene40StoredFieldsWriter::finishDocument() const
          {
            env->callVoidMethod(this$, mids$[mid_finishDocument_54c6a166]);
          }

          jint Lucene40StoredFieldsWriter::merge(const ::org::apache::lucene::index::MergeState & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_merge_fd0cfdeb], a0.this$);
          }

          void Lucene40StoredFieldsWriter::startDocument() const
          {
            env->callVoidMethod(this$, mids$[mid_startDocument_54c6a166]);
          }

          void Lucene40StoredFieldsWriter::writeField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::IndexableField & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_writeField_0de3c993], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40StoredFieldsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40StoredFieldsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40StoredFieldsWriter_init_(t_Lucene40StoredFieldsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40StoredFieldsWriter_abort(t_Lucene40StoredFieldsWriter *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsWriter_addRawDocuments(t_Lucene40StoredFieldsWriter *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsWriter_close(t_Lucene40StoredFieldsWriter *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsWriter_finish(t_Lucene40StoredFieldsWriter *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsWriter_finishDocument(t_Lucene40StoredFieldsWriter *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsWriter_merge(t_Lucene40StoredFieldsWriter *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsWriter_startDocument(t_Lucene40StoredFieldsWriter *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsWriter_writeField(t_Lucene40StoredFieldsWriter *self, PyObject *args);

          static PyMethodDef t_Lucene40StoredFieldsWriter__methods_[] = {
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, abort, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, addRawDocuments, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, finish, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, finishDocument, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, merge, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, startDocument, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, writeField, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40StoredFieldsWriter, t_Lucene40StoredFieldsWriter, ::org::apache::lucene::codecs::StoredFieldsWriter, Lucene40StoredFieldsWriter, t_Lucene40StoredFieldsWriter_init_, 0, 0, 0, 0, 0);

          void t_Lucene40StoredFieldsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40StoredFieldsWriter), module, "Lucene40StoredFieldsWriter", 0);
          }

          void t_Lucene40StoredFieldsWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsWriter).tp_dict, "class_", make_descriptor(Lucene40StoredFieldsWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsWriter).tp_dict, "wrapfn_", make_descriptor(t_Lucene40StoredFieldsWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene40StoredFieldsWriter::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsWriter).tp_dict, "FIELDS_EXTENSION", make_descriptor(j2p(*Lucene40StoredFieldsWriter::FIELDS_EXTENSION)));
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsWriter).tp_dict, "FIELDS_INDEX_EXTENSION", make_descriptor(j2p(*Lucene40StoredFieldsWriter::FIELDS_INDEX_EXTENSION)));
          }

          static PyObject *t_Lucene40StoredFieldsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40StoredFieldsWriter::initializeClass, 1)))
              return NULL;
            return t_Lucene40StoredFieldsWriter::wrap_Object(Lucene40StoredFieldsWriter(((t_Lucene40StoredFieldsWriter *) arg)->object.this$));
          }
          static PyObject *t_Lucene40StoredFieldsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40StoredFieldsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40StoredFieldsWriter_init_(t_Lucene40StoredFieldsWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            Lucene40StoredFieldsWriter object((jobject) NULL);

            if (!parseArgs(args, "ksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = Lucene40StoredFieldsWriter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene40StoredFieldsWriter_abort(t_Lucene40StoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.abort());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsWriter), (PyObject *) self, "abort", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsWriter_addRawDocuments(t_Lucene40StoredFieldsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
            JArray< jint > a1((jobject) NULL);
            jint a2;

            if (!parseArgs(args, "k[II", ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.addRawDocuments(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addRawDocuments", args);
            return NULL;
          }

          static PyObject *t_Lucene40StoredFieldsWriter_close(t_Lucene40StoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsWriter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsWriter_finish(t_Lucene40StoredFieldsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfos a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.finish(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsWriter), (PyObject *) self, "finish", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsWriter_finishDocument(t_Lucene40StoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.finishDocument());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsWriter), (PyObject *) self, "finishDocument", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsWriter_merge(t_Lucene40StoredFieldsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::MergeState a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.merge(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsWriter), (PyObject *) self, "merge", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsWriter_startDocument(t_Lucene40StoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.startDocument());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsWriter), (PyObject *) self, "startDocument", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsWriter_writeField(t_Lucene40StoredFieldsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::index::IndexableField a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::IndexableField::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.writeField(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsWriter), (PyObject *) self, "writeField", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/PostingsConsumer.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/codecs/TermStats.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/FieldInfo$IndexOptions.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *PostingsConsumer::class$ = NULL;
        jmethodID *PostingsConsumer::mids$ = NULL;
        bool PostingsConsumer::live$ = false;

        jclass PostingsConsumer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/PostingsConsumer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_addPosition_d481f39e] = env->getMethodID(cls, "addPosition", "(ILorg/apache/lucene/util/BytesRef;II)V");
            mids$[mid_finishDoc_54c6a166] = env->getMethodID(cls, "finishDoc", "()V");
            mids$[mid_merge_3a3a1af6] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;Lorg/apache/lucene/index/FieldInfo$IndexOptions;Lorg/apache/lucene/index/DocsEnum;Lorg/apache/lucene/util/FixedBitSet;)Lorg/apache/lucene/codecs/TermStats;");
            mids$[mid_startDoc_d8d154a6] = env->getMethodID(cls, "startDoc", "(II)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void PostingsConsumer::addPosition(jint a0, const ::org::apache::lucene::util::BytesRef & a1, jint a2, jint a3) const
        {
          env->callVoidMethod(this$, mids$[mid_addPosition_d481f39e], a0, a1.this$, a2, a3);
        }

        void PostingsConsumer::finishDoc() const
        {
          env->callVoidMethod(this$, mids$[mid_finishDoc_54c6a166]);
        }

        ::org::apache::lucene::codecs::TermStats PostingsConsumer::merge(const ::org::apache::lucene::index::MergeState & a0, const ::org::apache::lucene::index::FieldInfo$IndexOptions & a1, const ::org::apache::lucene::index::DocsEnum & a2, const ::org::apache::lucene::util::FixedBitSet & a3) const
        {
          return ::org::apache::lucene::codecs::TermStats(env->callObjectMethod(this$, mids$[mid_merge_3a3a1af6], a0.this$, a1.this$, a2.this$, a3.this$));
        }

        void PostingsConsumer::startDoc(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_startDoc_d8d154a6], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_PostingsConsumer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsConsumer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsConsumer_addPosition(t_PostingsConsumer *self, PyObject *args);
        static PyObject *t_PostingsConsumer_finishDoc(t_PostingsConsumer *self);
        static PyObject *t_PostingsConsumer_merge(t_PostingsConsumer *self, PyObject *args);
        static PyObject *t_PostingsConsumer_startDoc(t_PostingsConsumer *self, PyObject *args);

        static PyMethodDef t_PostingsConsumer__methods_[] = {
          DECLARE_METHOD(t_PostingsConsumer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsConsumer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsConsumer, addPosition, METH_VARARGS),
          DECLARE_METHOD(t_PostingsConsumer, finishDoc, METH_NOARGS),
          DECLARE_METHOD(t_PostingsConsumer, merge, METH_VARARGS),
          DECLARE_METHOD(t_PostingsConsumer, startDoc, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PostingsConsumer, t_PostingsConsumer, ::java::lang::Object, PostingsConsumer, abstract_init, 0, 0, 0, 0, 0);

        void t_PostingsConsumer::install(PyObject *module)
        {
          installType(&PY_TYPE(PostingsConsumer), module, "PostingsConsumer", 0);
        }

        void t_PostingsConsumer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PostingsConsumer).tp_dict, "class_", make_descriptor(PostingsConsumer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PostingsConsumer).tp_dict, "wrapfn_", make_descriptor(t_PostingsConsumer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PostingsConsumer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PostingsConsumer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PostingsConsumer::initializeClass, 1)))
            return NULL;
          return t_PostingsConsumer::wrap_Object(PostingsConsumer(((t_PostingsConsumer *) arg)->object.this$));
        }
        static PyObject *t_PostingsConsumer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PostingsConsumer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PostingsConsumer_addPosition(t_PostingsConsumer *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          jint a2;
          jint a3;

          if (!parseArgs(args, "IkII", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.addPosition(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addPosition", args);
          return NULL;
        }

        static PyObject *t_PostingsConsumer_finishDoc(t_PostingsConsumer *self)
        {
          OBJ_CALL(self->object.finishDoc());
          Py_RETURN_NONE;
        }

        static PyObject *t_PostingsConsumer_merge(t_PostingsConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);
          ::org::apache::lucene::index::FieldInfo$IndexOptions a1((jobject) NULL);
          PyTypeObject **p1;
          ::org::apache::lucene::index::DocsEnum a2((jobject) NULL);
          ::org::apache::lucene::util::FixedBitSet a3((jobject) NULL);
          ::org::apache::lucene::codecs::TermStats result((jobject) NULL);

          if (!parseArgs(args, "kKkk", ::org::apache::lucene::index::MergeState::initializeClass, ::org::apache::lucene::index::FieldInfo$IndexOptions::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, ::org::apache::lucene::util::FixedBitSet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_FieldInfo$IndexOptions::parameters_, &a2, &a3))
          {
            OBJ_CALL(result = self->object.merge(a0, a1, a2, a3));
            return ::org::apache::lucene::codecs::t_TermStats::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "merge", args);
          return NULL;
        }

        static PyObject *t_PostingsConsumer_startDoc(t_PostingsConsumer *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.startDoc(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "startDoc", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonDoubleParser.h"
#include "org/apache/lucene/search/FieldCache$DoubleParser.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonDoubleParser::class$ = NULL;
        jmethodID *PythonDoubleParser::mids$ = NULL;
        bool PythonDoubleParser::live$ = false;

        jclass PythonDoubleParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonDoubleParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_parseDouble_7bc03dd6] = env->getMethodID(cls, "parseDouble", "(Lorg/apache/lucene/util/BytesRef;)D");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_termsEnum_fb3ac14e] = env->getMethodID(cls, "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonDoubleParser::PythonDoubleParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonDoubleParser::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonDoubleParser::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonDoubleParser::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonDoubleParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonDoubleParser_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonDoubleParser_init_(t_PythonDoubleParser *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonDoubleParser_finalize(t_PythonDoubleParser *self);
        static PyObject *t_PythonDoubleParser_pythonExtension(t_PythonDoubleParser *self, PyObject *args);
        static jdouble JNICALL t_PythonDoubleParser_parseDouble0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonDoubleParser_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonDoubleParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonDoubleParser_get__self(t_PythonDoubleParser *self, void *data);
        static PyGetSetDef t_PythonDoubleParser__fields_[] = {
          DECLARE_GET_FIELD(t_PythonDoubleParser, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonDoubleParser__methods_[] = {
          DECLARE_METHOD(t_PythonDoubleParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonDoubleParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonDoubleParser, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonDoubleParser, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonDoubleParser, t_PythonDoubleParser, ::java::lang::Object, PythonDoubleParser, t_PythonDoubleParser_init_, 0, 0, t_PythonDoubleParser__fields_, 0, 0);

        void t_PythonDoubleParser::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonDoubleParser), module, "PythonDoubleParser", 1);
        }

        void t_PythonDoubleParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonDoubleParser).tp_dict, "class_", make_descriptor(PythonDoubleParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonDoubleParser).tp_dict, "wrapfn_", make_descriptor(t_PythonDoubleParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonDoubleParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonDoubleParser::initializeClass);
          JNINativeMethod methods[] = {
            { "parseDouble", "(Lorg/apache/lucene/util/BytesRef;)D", (void *) t_PythonDoubleParser_parseDouble0 },
            { "pythonDecRef", "()V", (void *) t_PythonDoubleParser_pythonDecRef1 },
            { "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;", (void *) t_PythonDoubleParser_termsEnum2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonDoubleParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonDoubleParser::initializeClass, 1)))
            return NULL;
          return t_PythonDoubleParser::wrap_Object(PythonDoubleParser(((t_PythonDoubleParser *) arg)->object.this$));
        }
        static PyObject *t_PythonDoubleParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonDoubleParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonDoubleParser_init_(t_PythonDoubleParser *self, PyObject *args, PyObject *kwds)
        {
          PythonDoubleParser object((jobject) NULL);

          INT_CALL(object = PythonDoubleParser());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonDoubleParser_finalize(t_PythonDoubleParser *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonDoubleParser_pythonExtension(t_PythonDoubleParser *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jdouble JNICALL t_PythonDoubleParser_parseDouble0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDoubleParser::mids$[PythonDoubleParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jdouble value;
          PyObject *o0 = ::org::apache::lucene::util::t_BytesRef::wrap_Object(::org::apache::lucene::util::BytesRef(a0));
          PyObject *result = PyObject_CallMethod(obj, "parseDouble", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "D", &value))
          {
            throwTypeError("parseDouble", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jdouble) 0;
        }

        static void JNICALL t_PythonDoubleParser_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDoubleParser::mids$[PythonDoubleParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonDoubleParser::mids$[PythonDoubleParser::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jobject JNICALL t_PythonDoubleParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDoubleParser::mids$[PythonDoubleParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::index::TermsEnum value((jobject) NULL);
          PyObject *o0 = ::org::apache::lucene::index::t_Terms::wrap_Object(::org::apache::lucene::index::Terms(a0));
          PyObject *result = PyObject_CallMethod(obj, "termsEnum", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &value))
          {
            throwTypeError("termsEnum", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonDoubleParser_get__self(t_PythonDoubleParser *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/codecs/StoredFieldsWriter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingStoredFieldsFormat::class$ = NULL;
          jmethodID *CompressingStoredFieldsFormat::mids$ = NULL;
          bool CompressingStoredFieldsFormat::live$ = false;

          jclass CompressingStoredFieldsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_41920a78] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/codecs/compressing/CompressionMode;I)V");
              mids$[mid_init$_5a706bd2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/codecs/compressing/CompressionMode;I)V");
              mids$[mid_fieldsReader_bbe26ec4] = env->getMethodID(cls, "fieldsReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsReader;");
              mids$[mid_fieldsWriter_c73cceda] = env->getMethodID(cls, "fieldsWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsWriter;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompressingStoredFieldsFormat::CompressingStoredFieldsFormat(const ::java::lang::String & a0, const ::org::apache::lucene::codecs::compressing::CompressionMode & a1, jint a2) : ::org::apache::lucene::codecs::StoredFieldsFormat(env->newObject(initializeClass, &mids$, mid_init$_41920a78, a0.this$, a1.this$, a2)) {}

          CompressingStoredFieldsFormat::CompressingStoredFieldsFormat(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::codecs::compressing::CompressionMode & a2, jint a3) : ::org::apache::lucene::codecs::StoredFieldsFormat(env->newObject(initializeClass, &mids$, mid_init$_5a706bd2, a0.this$, a1.this$, a2.this$, a3)) {}

          ::org::apache::lucene::codecs::StoredFieldsReader CompressingStoredFieldsFormat::fieldsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            return ::org::apache::lucene::codecs::StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_fieldsReader_bbe26ec4], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::codecs::StoredFieldsWriter CompressingStoredFieldsFormat::fieldsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::codecs::StoredFieldsWriter(env->callObjectMethod(this$, mids$[mid_fieldsWriter_c73cceda], a0.this$, a1.this$, a2.this$));
          }

          ::java::lang::String CompressingStoredFieldsFormat::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingStoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingStoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CompressingStoredFieldsFormat_init_(t_CompressingStoredFieldsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CompressingStoredFieldsFormat_fieldsReader(t_CompressingStoredFieldsFormat *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsFormat_fieldsWriter(t_CompressingStoredFieldsFormat *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsFormat_toString(t_CompressingStoredFieldsFormat *self, PyObject *args);

          static PyMethodDef t_CompressingStoredFieldsFormat__methods_[] = {
            DECLARE_METHOD(t_CompressingStoredFieldsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsFormat, fieldsReader, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsFormat, fieldsWriter, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsFormat, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressingStoredFieldsFormat, t_CompressingStoredFieldsFormat, ::org::apache::lucene::codecs::StoredFieldsFormat, CompressingStoredFieldsFormat, t_CompressingStoredFieldsFormat_init_, 0, 0, 0, 0, 0);

          void t_CompressingStoredFieldsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingStoredFieldsFormat), module, "CompressingStoredFieldsFormat", 0);
          }

          void t_CompressingStoredFieldsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsFormat).tp_dict, "class_", make_descriptor(CompressingStoredFieldsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsFormat).tp_dict, "wrapfn_", make_descriptor(t_CompressingStoredFieldsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingStoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingStoredFieldsFormat::initializeClass, 1)))
              return NULL;
            return t_CompressingStoredFieldsFormat::wrap_Object(CompressingStoredFieldsFormat(((t_CompressingStoredFieldsFormat *) arg)->object.this$));
          }
          static PyObject *t_CompressingStoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingStoredFieldsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CompressingStoredFieldsFormat_init_(t_CompressingStoredFieldsFormat *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::codecs::compressing::CompressionMode a1((jobject) NULL);
                jint a2;
                CompressingStoredFieldsFormat object((jobject) NULL);

                if (!parseArgs(args, "skI", ::org::apache::lucene::codecs::compressing::CompressionMode::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = CompressingStoredFieldsFormat(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::codecs::compressing::CompressionMode a2((jobject) NULL);
                jint a3;
                CompressingStoredFieldsFormat object((jobject) NULL);

                if (!parseArgs(args, "sskI", ::org::apache::lucene::codecs::compressing::CompressionMode::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = CompressingStoredFieldsFormat(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CompressingStoredFieldsFormat_fieldsReader(t_CompressingStoredFieldsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::org::apache::lucene::codecs::StoredFieldsReader result((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.fieldsReader(a0, a1, a2, a3));
              return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsFormat), (PyObject *) self, "fieldsReader", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsFormat_fieldsWriter(t_CompressingStoredFieldsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::codecs::StoredFieldsWriter result((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.fieldsWriter(a0, a1, a2));
              return ::org::apache::lucene::codecs::t_StoredFieldsWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsFormat), (PyObject *) self, "fieldsWriter", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsFormat_toString(t_CompressingStoredFieldsFormat *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsFormat), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$numeric_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$numeric_return::class$ = NULL;
          jmethodID *JavascriptParser$numeric_return::mids$ = NULL;
          bool JavascriptParser$numeric_return::live$ = false;

          jclass JavascriptParser$numeric_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$numeric_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$numeric_return::JavascriptParser$numeric_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$numeric_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$numeric_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$numeric_return_init_(t_JavascriptParser$numeric_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$numeric_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$numeric_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$numeric_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$numeric_return, t_JavascriptParser$numeric_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$numeric_return, t_JavascriptParser$numeric_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$numeric_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$numeric_return), module, "JavascriptParser$numeric_return", 0);
          }

          void t_JavascriptParser$numeric_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$numeric_return).tp_dict, "class_", make_descriptor(JavascriptParser$numeric_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$numeric_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$numeric_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$numeric_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$numeric_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$numeric_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$numeric_return::wrap_Object(JavascriptParser$numeric_return(((t_JavascriptParser$numeric_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$numeric_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$numeric_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$numeric_return_init_(t_JavascriptParser$numeric_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$numeric_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$numeric_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/LongBitSet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *LongBitSet::class$ = NULL;
        jmethodID *LongBitSet::mids$ = NULL;
        bool LongBitSet::live$ = false;

        jclass LongBitSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/LongBitSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_0ee6df2f] = env->getMethodID(cls, "<init>", "(J)V");
            mids$[mid_init$_4c830bd0] = env->getMethodID(cls, "<init>", "([JJ)V");
            mids$[mid_and_6e24e395] = env->getMethodID(cls, "and", "(Lorg/apache/lucene/util/LongBitSet;)V");
            mids$[mid_andNot_6e24e395] = env->getMethodID(cls, "andNot", "(Lorg/apache/lucene/util/LongBitSet;)V");
            mids$[mid_bits2words_0ee6df30] = env->getStaticMethodID(cls, "bits2words", "(J)I");
            mids$[mid_cardinality_54c6a17a] = env->getMethodID(cls, "cardinality", "()J");
            mids$[mid_clear_0ee6df2f] = env->getMethodID(cls, "clear", "(J)V");
            mids$[mid_clear_a7e12ca4] = env->getMethodID(cls, "clear", "(JJ)V");
            mids$[mid_clone_47551698] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/LongBitSet;");
            mids$[mid_ensureCapacity_b4f3a668] = env->getStaticMethodID(cls, "ensureCapacity", "(Lorg/apache/lucene/util/LongBitSet;J)Lorg/apache/lucene/util/LongBitSet;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_flip_a7e12ca4] = env->getMethodID(cls, "flip", "(JJ)V");
            mids$[mid_get_0ee6df23] = env->getMethodID(cls, "get", "(J)Z");
            mids$[mid_getAndClear_0ee6df23] = env->getMethodID(cls, "getAndClear", "(J)Z");
            mids$[mid_getAndSet_0ee6df23] = env->getMethodID(cls, "getAndSet", "(J)Z");
            mids$[mid_getBits_dab10e76] = env->getMethodID(cls, "getBits", "()[J");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_intersects_6e24e399] = env->getMethodID(cls, "intersects", "(Lorg/apache/lucene/util/LongBitSet;)Z");
            mids$[mid_length_54c6a17a] = env->getMethodID(cls, "length", "()J");
            mids$[mid_nextSetBit_0ee6df33] = env->getMethodID(cls, "nextSetBit", "(J)J");
            mids$[mid_or_6e24e395] = env->getMethodID(cls, "or", "(Lorg/apache/lucene/util/LongBitSet;)V");
            mids$[mid_prevSetBit_0ee6df33] = env->getMethodID(cls, "prevSetBit", "(J)J");
            mids$[mid_set_0ee6df2f] = env->getMethodID(cls, "set", "(J)V");
            mids$[mid_set_a7e12ca4] = env->getMethodID(cls, "set", "(JJ)V");
            mids$[mid_xor_6e24e395] = env->getMethodID(cls, "xor", "(Lorg/apache/lucene/util/LongBitSet;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LongBitSet::LongBitSet(jlong a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0ee6df2f, a0)) {}

        LongBitSet::LongBitSet(const JArray< jlong > & a0, jlong a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4c830bd0, a0.this$, a1)) {}

        void LongBitSet::and$(const LongBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_and_6e24e395], a0.this$);
        }

        void LongBitSet::andNot(const LongBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_andNot_6e24e395], a0.this$);
        }

        jint LongBitSet::bits2words(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_bits2words_0ee6df30], a0);
        }

        jlong LongBitSet::cardinality() const
        {
          return env->callLongMethod(this$, mids$[mid_cardinality_54c6a17a]);
        }

        void LongBitSet::clear(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_0ee6df2f], a0);
        }

        void LongBitSet::clear(jlong a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_a7e12ca4], a0, a1);
        }

        LongBitSet LongBitSet::clone() const
        {
          return LongBitSet(env->callObjectMethod(this$, mids$[mid_clone_47551698]));
        }

        LongBitSet LongBitSet::ensureCapacity(const LongBitSet & a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          return LongBitSet(env->callStaticObjectMethod(cls, mids$[mid_ensureCapacity_b4f3a668], a0.this$, a1));
        }

        jboolean LongBitSet::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void LongBitSet::flip(jlong a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_flip_a7e12ca4], a0, a1);
        }

        jboolean LongBitSet::get(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_0ee6df23], a0);
        }

        jboolean LongBitSet::getAndClear(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_getAndClear_0ee6df23], a0);
        }

        jboolean LongBitSet::getAndSet(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_getAndSet_0ee6df23], a0);
        }

        JArray< jlong > LongBitSet::getBits() const
        {
          return JArray< jlong >(env->callObjectMethod(this$, mids$[mid_getBits_dab10e76]));
        }

        jint LongBitSet::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean LongBitSet::intersects(const LongBitSet & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_intersects_6e24e399], a0.this$);
        }

        jlong LongBitSet::length() const
        {
          return env->callLongMethod(this$, mids$[mid_length_54c6a17a]);
        }

        jlong LongBitSet::nextSetBit(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_nextSetBit_0ee6df33], a0);
        }

        void LongBitSet::or$(const LongBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_or_6e24e395], a0.this$);
        }

        jlong LongBitSet::prevSetBit(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_prevSetBit_0ee6df33], a0);
        }

        void LongBitSet::set(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_set_0ee6df2f], a0);
        }

        void LongBitSet::set(jlong a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_set_a7e12ca4], a0, a1);
        }

        void LongBitSet::xor$(const LongBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_xor_6e24e395], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_LongBitSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongBitSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LongBitSet_init_(t_LongBitSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LongBitSet_and(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_andNot(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_bits2words(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongBitSet_cardinality(t_LongBitSet *self);
        static PyObject *t_LongBitSet_clear(t_LongBitSet *self, PyObject *args);
        static PyObject *t_LongBitSet_clone(t_LongBitSet *self);
        static PyObject *t_LongBitSet_ensureCapacity(PyTypeObject *type, PyObject *args);
        static PyObject *t_LongBitSet_equals(t_LongBitSet *self, PyObject *args);
        static PyObject *t_LongBitSet_flip(t_LongBitSet *self, PyObject *args);
        static PyObject *t_LongBitSet_get(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_getAndClear(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_getAndSet(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_getBits(t_LongBitSet *self);
        static PyObject *t_LongBitSet_hashCode(t_LongBitSet *self, PyObject *args);
        static PyObject *t_LongBitSet_intersects(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_length(t_LongBitSet *self);
        static PyObject *t_LongBitSet_nextSetBit(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_or(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_prevSetBit(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_set(t_LongBitSet *self, PyObject *args);
        static PyObject *t_LongBitSet_xor(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_get__bits(t_LongBitSet *self, void *data);
        static PyGetSetDef t_LongBitSet__fields_[] = {
          DECLARE_GET_FIELD(t_LongBitSet, bits),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LongBitSet__methods_[] = {
          DECLARE_METHOD(t_LongBitSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongBitSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongBitSet, and, METH_O),
          DECLARE_METHOD(t_LongBitSet, andNot, METH_O),
          DECLARE_METHOD(t_LongBitSet, bits2words, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongBitSet, cardinality, METH_NOARGS),
          DECLARE_METHOD(t_LongBitSet, clear, METH_VARARGS),
          DECLARE_METHOD(t_LongBitSet, clone, METH_NOARGS),
          DECLARE_METHOD(t_LongBitSet, ensureCapacity, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LongBitSet, equals, METH_VARARGS),
          DECLARE_METHOD(t_LongBitSet, flip, METH_VARARGS),
          DECLARE_METHOD(t_LongBitSet, get, METH_O),
          DECLARE_METHOD(t_LongBitSet, getAndClear, METH_O),
          DECLARE_METHOD(t_LongBitSet, getAndSet, METH_O),
          DECLARE_METHOD(t_LongBitSet, getBits, METH_NOARGS),
          DECLARE_METHOD(t_LongBitSet, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_LongBitSet, intersects, METH_O),
          DECLARE_METHOD(t_LongBitSet, length, METH_NOARGS),
          DECLARE_METHOD(t_LongBitSet, nextSetBit, METH_O),
          DECLARE_METHOD(t_LongBitSet, or, METH_O),
          DECLARE_METHOD(t_LongBitSet, prevSetBit, METH_O),
          DECLARE_METHOD(t_LongBitSet, set, METH_VARARGS),
          DECLARE_METHOD(t_LongBitSet, xor, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LongBitSet, t_LongBitSet, ::java::lang::Object, LongBitSet, t_LongBitSet_init_, 0, 0, t_LongBitSet__fields_, 0, 0);

        void t_LongBitSet::install(PyObject *module)
        {
          installType(&PY_TYPE(LongBitSet), module, "LongBitSet", 0);
        }

        void t_LongBitSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LongBitSet).tp_dict, "class_", make_descriptor(LongBitSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LongBitSet).tp_dict, "wrapfn_", make_descriptor(t_LongBitSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LongBitSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LongBitSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LongBitSet::initializeClass, 1)))
            return NULL;
          return t_LongBitSet::wrap_Object(LongBitSet(((t_LongBitSet *) arg)->object.this$));
        }
        static PyObject *t_LongBitSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LongBitSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LongBitSet_init_(t_LongBitSet *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              LongBitSet object((jobject) NULL);

              if (!parseArgs(args, "J", &a0))
              {
                INT_CALL(object = LongBitSet(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              JArray< jlong > a0((jobject) NULL);
              jlong a1;
              LongBitSet object((jobject) NULL);

              if (!parseArgs(args, "[JJ", &a0, &a1))
              {
                INT_CALL(object = LongBitSet(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LongBitSet_and(t_LongBitSet *self, PyObject *arg)
        {
          LongBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", LongBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.and$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "and", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_andNot(t_LongBitSet *self, PyObject *arg)
        {
          LongBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", LongBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.andNot(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "andNot", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_bits2words(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          jint result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::LongBitSet::bits2words(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "bits2words", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_cardinality(t_LongBitSet *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.cardinality());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_LongBitSet_clear(t_LongBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.clear(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jlong a0;
              jlong a1;

              if (!parseArgs(args, "JJ", &a0, &a1))
              {
                OBJ_CALL(self->object.clear(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "clear", args);
          return NULL;
        }

        static PyObject *t_LongBitSet_clone(t_LongBitSet *self)
        {
          LongBitSet result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_LongBitSet::wrap_Object(result);
        }

        static PyObject *t_LongBitSet_ensureCapacity(PyTypeObject *type, PyObject *args)
        {
          LongBitSet a0((jobject) NULL);
          jlong a1;
          LongBitSet result((jobject) NULL);

          if (!parseArgs(args, "kJ", LongBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::LongBitSet::ensureCapacity(a0, a1));
            return t_LongBitSet::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "ensureCapacity", args);
          return NULL;
        }

        static PyObject *t_LongBitSet_equals(t_LongBitSet *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(LongBitSet), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_LongBitSet_flip(t_LongBitSet *self, PyObject *args)
        {
          jlong a0;
          jlong a1;

          if (!parseArgs(args, "JJ", &a0, &a1))
          {
            OBJ_CALL(self->object.flip(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "flip", args);
          return NULL;
        }

        static PyObject *t_LongBitSet_get(t_LongBitSet *self, PyObject *arg)
        {
          jlong a0;
          jboolean result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_getAndClear(t_LongBitSet *self, PyObject *arg)
        {
          jlong a0;
          jboolean result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.getAndClear(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAndClear", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_getAndSet(t_LongBitSet *self, PyObject *arg)
        {
          jlong a0;
          jboolean result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.getAndSet(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAndSet", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_getBits(t_LongBitSet *self)
        {
          JArray< jlong > result((jobject) NULL);
          OBJ_CALL(result = self->object.getBits());
          return result.wrap();
        }

        static PyObject *t_LongBitSet_hashCode(t_LongBitSet *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(LongBitSet), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_LongBitSet_intersects(t_LongBitSet *self, PyObject *arg)
        {
          LongBitSet a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", LongBitSet::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.intersects(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "intersects", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_length(t_LongBitSet *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.length());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_LongBitSet_nextSetBit(t_LongBitSet *self, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.nextSetBit(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "nextSetBit", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_or(t_LongBitSet *self, PyObject *arg)
        {
          LongBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", LongBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.or$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "or", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_prevSetBit(t_LongBitSet *self, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.prevSetBit(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "prevSetBit", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_set(t_LongBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.set(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jlong a0;
              jlong a1;

              if (!parseArgs(args, "JJ", &a0, &a1))
              {
                OBJ_CALL(self->object.set(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "set", args);
          return NULL;
        }

        static PyObject *t_LongBitSet_xor(t_LongBitSet *self, PyObject *arg)
        {
          LongBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", LongBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.xor$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "xor", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_get__bits(t_LongBitSet *self, void *data)
        {
          JArray< jlong > value((jobject) NULL);
          OBJ_CALL(value = self->object.getBits());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RandomAccessInput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RandomAccessInput::class$ = NULL;
        jmethodID *RandomAccessInput::mids$ = NULL;
        bool RandomAccessInput::live$ = false;

        jclass RandomAccessInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RandomAccessInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_readByte_0ee6df3b] = env->getMethodID(cls, "readByte", "(J)B");
            mids$[mid_readInt_0ee6df30] = env->getMethodID(cls, "readInt", "(J)I");
            mids$[mid_readLong_0ee6df33] = env->getMethodID(cls, "readLong", "(J)J");
            mids$[mid_readShort_0ee6df2a] = env->getMethodID(cls, "readShort", "(J)S");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jbyte RandomAccessInput::readByte(jlong a0) const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_0ee6df3b], a0);
        }

        jint RandomAccessInput::readInt(jlong a0) const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_0ee6df30], a0);
        }

        jlong RandomAccessInput::readLong(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_readLong_0ee6df33], a0);
        }

        jshort RandomAccessInput::readShort(jlong a0) const
        {
          return env->callShortMethod(this$, mids$[mid_readShort_0ee6df2a], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RandomAccessInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RandomAccessInput_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RandomAccessInput_readByte(t_RandomAccessInput *self, PyObject *arg);
        static PyObject *t_RandomAccessInput_readInt(t_RandomAccessInput *self, PyObject *arg);
        static PyObject *t_RandomAccessInput_readLong(t_RandomAccessInput *self, PyObject *arg);
        static PyObject *t_RandomAccessInput_readShort(t_RandomAccessInput *self, PyObject *arg);

        static PyMethodDef t_RandomAccessInput__methods_[] = {
          DECLARE_METHOD(t_RandomAccessInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RandomAccessInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RandomAccessInput, readByte, METH_O),
          DECLARE_METHOD(t_RandomAccessInput, readInt, METH_O),
          DECLARE_METHOD(t_RandomAccessInput, readLong, METH_O),
          DECLARE_METHOD(t_RandomAccessInput, readShort, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RandomAccessInput, t_RandomAccessInput, ::java::lang::Object, RandomAccessInput, abstract_init, 0, 0, 0, 0, 0);

        void t_RandomAccessInput::install(PyObject *module)
        {
          installType(&PY_TYPE(RandomAccessInput), module, "RandomAccessInput", 0);
        }

        void t_RandomAccessInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RandomAccessInput).tp_dict, "class_", make_descriptor(RandomAccessInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RandomAccessInput).tp_dict, "wrapfn_", make_descriptor(t_RandomAccessInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RandomAccessInput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RandomAccessInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RandomAccessInput::initializeClass, 1)))
            return NULL;
          return t_RandomAccessInput::wrap_Object(RandomAccessInput(((t_RandomAccessInput *) arg)->object.this$));
        }
        static PyObject *t_RandomAccessInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RandomAccessInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RandomAccessInput_readByte(t_RandomAccessInput *self, PyObject *arg)
        {
          jlong a0;
          jbyte result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.readByte(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "readByte", arg);
          return NULL;
        }

        static PyObject *t_RandomAccessInput_readInt(t_RandomAccessInput *self, PyObject *arg)
        {
          jlong a0;
          jint result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.readInt(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "readInt", arg);
          return NULL;
        }

        static PyObject *t_RandomAccessInput_readLong(t_RandomAccessInput *self, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.readLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "readLong", arg);
          return NULL;
        }

        static PyObject *t_RandomAccessInput_readShort(t_RandomAccessInput *self, PyObject *arg)
        {
          jlong a0;
          jshort result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.readShort(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "readShort", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Long.h"
#include "java/lang/Class.h"
#include "java/lang/Comparable.h"
#include "java/lang/Object.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Long::class$ = NULL;
    jmethodID *Long::mids$ = NULL;
    bool Long::live$ = false;
    jint Long::BYTES = (jint) 0;
    jlong Long::MAX_VALUE = (jlong) 0;
    jlong Long::MIN_VALUE = (jlong) 0;
    jint Long::SIZE = (jint) 0;
    ::java::lang::Class *Long::TYPE = NULL;

    jclass Long::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Long");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_0ee6df2f] = env->getMethodID(cls, "<init>", "(J)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_bitCount_0ee6df30] = env->getStaticMethodID(cls, "bitCount", "(J)I");
        mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_compare_a7e12cbb] = env->getStaticMethodID(cls, "compare", "(JJ)I");
        mids$[mid_compareTo_da55802e] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Long;)I");
        mids$[mid_compareUnsigned_a7e12cbb] = env->getStaticMethodID(cls, "compareUnsigned", "(JJ)I");
        mids$[mid_decode_ee9f94be] = env->getStaticMethodID(cls, "decode", "(Ljava/lang/String;)Ljava/lang/Long;");
        mids$[mid_divideUnsigned_a7e12cb8] = env->getStaticMethodID(cls, "divideUnsigned", "(JJ)J");
        mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_getLong_ee9f94be] = env->getStaticMethodID(cls, "getLong", "(Ljava/lang/String;)Ljava/lang/Long;");
        mids$[mid_getLong_9f081a1d] = env->getStaticMethodID(cls, "getLong", "(Ljava/lang/String;J)Ljava/lang/Long;");
        mids$[mid_getLong_9a12142f] = env->getStaticMethodID(cls, "getLong", "(Ljava/lang/String;Ljava/lang/Long;)Ljava/lang/Long;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_hashCode_0ee6df30] = env->getStaticMethodID(cls, "hashCode", "(J)I");
        mids$[mid_highestOneBit_0ee6df33] = env->getStaticMethodID(cls, "highestOneBit", "(J)J");
        mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_lowestOneBit_0ee6df33] = env->getStaticMethodID(cls, "lowestOneBit", "(J)J");
        mids$[mid_max_a7e12cb8] = env->getStaticMethodID(cls, "max", "(JJ)J");
        mids$[mid_min_a7e12cb8] = env->getStaticMethodID(cls, "min", "(JJ)J");
        mids$[mid_numberOfLeadingZeros_0ee6df30] = env->getStaticMethodID(cls, "numberOfLeadingZeros", "(J)I");
        mids$[mid_numberOfTrailingZeros_0ee6df30] = env->getStaticMethodID(cls, "numberOfTrailingZeros", "(J)I");
        mids$[mid_parseLong_5fdc3f54] = env->getStaticMethodID(cls, "parseLong", "(Ljava/lang/String;)J");
        mids$[mid_parseLong_6e53ccda] = env->getStaticMethodID(cls, "parseLong", "(Ljava/lang/String;I)J");
        mids$[mid_parseUnsignedLong_5fdc3f54] = env->getStaticMethodID(cls, "parseUnsignedLong", "(Ljava/lang/String;)J");
        mids$[mid_parseUnsignedLong_6e53ccda] = env->getStaticMethodID(cls, "parseUnsignedLong", "(Ljava/lang/String;I)J");
        mids$[mid_remainderUnsigned_a7e12cb8] = env->getStaticMethodID(cls, "remainderUnsigned", "(JJ)J");
        mids$[mid_reverse_0ee6df33] = env->getStaticMethodID(cls, "reverse", "(J)J");
        mids$[mid_reverseBytes_0ee6df33] = env->getStaticMethodID(cls, "reverseBytes", "(J)J");
        mids$[mid_rotateLeft_25d05c93] = env->getStaticMethodID(cls, "rotateLeft", "(JI)J");
        mids$[mid_rotateRight_25d05c93] = env->getStaticMethodID(cls, "rotateRight", "(JI)J");
        mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");
        mids$[mid_signum_0ee6df30] = env->getStaticMethodID(cls, "signum", "(J)I");
        mids$[mid_sum_a7e12cb8] = env->getStaticMethodID(cls, "sum", "(JJ)J");
        mids$[mid_toBinaryString_3e02f30e] = env->getStaticMethodID(cls, "toBinaryString", "(J)Ljava/lang/String;");
        mids$[mid_toHexString_3e02f30e] = env->getStaticMethodID(cls, "toHexString", "(J)Ljava/lang/String;");
        mids$[mid_toOctalString_3e02f30e] = env->getStaticMethodID(cls, "toOctalString", "(J)Ljava/lang/String;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_3e02f30e] = env->getStaticMethodID(cls, "toString", "(J)Ljava/lang/String;");
        mids$[mid_toString_36a2b01a] = env->getStaticMethodID(cls, "toString", "(JI)Ljava/lang/String;");
        mids$[mid_toUnsignedString_3e02f30e] = env->getStaticMethodID(cls, "toUnsignedString", "(J)Ljava/lang/String;");
        mids$[mid_toUnsignedString_36a2b01a] = env->getStaticMethodID(cls, "toUnsignedString", "(JI)Ljava/lang/String;");
        mids$[mid_valueOf_62a69723] = env->getStaticMethodID(cls, "valueOf", "(J)Ljava/lang/Long;");
        mids$[mid_valueOf_ee9f94be] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Long;");
        mids$[mid_valueOf_212f058c] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;I)Ljava/lang/Long;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        BYTES = env->getStaticIntField(cls, "BYTES");
        MAX_VALUE = env->getStaticLongField(cls, "MAX_VALUE");
        MIN_VALUE = env->getStaticLongField(cls, "MIN_VALUE");
        SIZE = env->getStaticIntField(cls, "SIZE");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Long::Long(jlong a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_0ee6df2f, a0)) {}

    Long::Long(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    jint Long::bitCount(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_bitCount_0ee6df30], a0);
    }

    jbyte Long::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
    }

    jint Long::compare(jlong a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_a7e12cbb], a0, a1);
    }

    jint Long::compareTo(const Long & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_da55802e], a0.this$);
    }

    jint Long::compareUnsigned(jlong a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compareUnsigned_a7e12cbb], a0, a1);
    }

    Long Long::decode(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_decode_ee9f94be], a0.this$));
    }

    jlong Long::divideUnsigned(jlong a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_divideUnsigned_a7e12cb8], a0, a1);
    }

    jdouble Long::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
    }

    jboolean Long::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jfloat Long::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
    }

    Long Long::getLong(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_getLong_ee9f94be], a0.this$));
    }

    Long Long::getLong(const ::java::lang::String & a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_getLong_9f081a1d], a0.this$, a1));
    }

    Long Long::getLong(const ::java::lang::String & a0, const Long & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_getLong_9a12142f], a0.this$, a1.this$));
    }

    jint Long::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jint Long::hashCode(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_0ee6df30], a0);
    }

    jlong Long::highestOneBit(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_highestOneBit_0ee6df33], a0);
    }

    jint Long::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
    }

    jlong Long::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
    }

    jlong Long::lowestOneBit(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_lowestOneBit_0ee6df33], a0);
    }

    jlong Long::max$(jlong a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_max_a7e12cb8], a0, a1);
    }

    jlong Long::min$(jlong a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_min_a7e12cb8], a0, a1);
    }

    jint Long::numberOfLeadingZeros(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_numberOfLeadingZeros_0ee6df30], a0);
    }

    jint Long::numberOfTrailingZeros(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_numberOfTrailingZeros_0ee6df30], a0);
    }

    jlong Long::parseLong(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_parseLong_5fdc3f54], a0.this$);
    }

    jlong Long::parseLong(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_parseLong_6e53ccda], a0.this$, a1);
    }

    jlong Long::parseUnsignedLong(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_parseUnsignedLong_5fdc3f54], a0.this$);
    }

    jlong Long::parseUnsignedLong(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_parseUnsignedLong_6e53ccda], a0.this$, a1);
    }

    jlong Long::remainderUnsigned(jlong a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_remainderUnsigned_a7e12cb8], a0, a1);
    }

    jlong Long::reverse(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_reverse_0ee6df33], a0);
    }

    jlong Long::reverseBytes(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_reverseBytes_0ee6df33], a0);
    }

    jlong Long::rotateLeft(jlong a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_rotateLeft_25d05c93], a0, a1);
    }

    jlong Long::rotateRight(jlong a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_rotateRight_25d05c93], a0, a1);
    }

    jshort Long::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
    }

    jint Long::signum(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_signum_0ee6df30], a0);
    }

    jlong Long::sum(jlong a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_sum_a7e12cb8], a0, a1);
    }

    ::java::lang::String Long::toBinaryString(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toBinaryString_3e02f30e], a0));
    }

    ::java::lang::String Long::toHexString(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toHexString_3e02f30e], a0));
    }

    ::java::lang::String Long::toOctalString(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toOctalString_3e02f30e], a0));
    }

    ::java::lang::String Long::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Long::toString(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_3e02f30e], a0));
    }

    ::java::lang::String Long::toString(jlong a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_36a2b01a], a0, a1));
    }

    ::java::lang::String Long::toUnsignedString(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toUnsignedString_3e02f30e], a0));
    }

    ::java::lang::String Long::toUnsignedString(jlong a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toUnsignedString_36a2b01a], a0, a1));
    }

    Long Long::valueOf(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_valueOf_62a69723], a0));
    }

    Long Long::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ee9f94be], a0.this$));
    }

    Long Long::valueOf(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_valueOf_212f058c], a0.this$, a1));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Long_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Long_init_(t_Long *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Long_bitCount(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_byteValue(t_Long *self, PyObject *args);
    static PyObject *t_Long_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_compareTo(t_Long *self, PyObject *arg);
    static PyObject *t_Long_compareUnsigned(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_decode(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_divideUnsigned(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_doubleValue(t_Long *self, PyObject *args);
    static PyObject *t_Long_equals(t_Long *self, PyObject *args);
    static PyObject *t_Long_floatValue(t_Long *self, PyObject *args);
    static PyObject *t_Long_getLong(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_hashCode(t_Long *self, PyObject *args);
    static PyObject *t_Long_hashCode_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_highestOneBit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_intValue(t_Long *self, PyObject *args);
    static PyObject *t_Long_longValue(t_Long *self, PyObject *args);
    static PyObject *t_Long_lowestOneBit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_max(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_min(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_numberOfLeadingZeros(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_numberOfTrailingZeros(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_parseLong(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_parseUnsignedLong(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_remainderUnsigned(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_reverse(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_reverseBytes(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_rotateLeft(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_rotateRight(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_shortValue(t_Long *self, PyObject *args);
    static PyObject *t_Long_signum(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_sum(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_toBinaryString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_toHexString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_toOctalString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_toString(t_Long *self, PyObject *args);
    static PyObject *t_Long_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_toUnsignedString(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_valueOf(PyTypeObject *type, PyObject *args);

    static PyMethodDef t_Long__methods_[] = {
      DECLARE_METHOD(t_Long, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, bitCount, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, byteValue, METH_VARARGS),
      DECLARE_METHOD(t_Long, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, compareTo, METH_O),
      DECLARE_METHOD(t_Long, compareUnsigned, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, decode, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, divideUnsigned, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, doubleValue, METH_VARARGS),
      DECLARE_METHOD(t_Long, equals, METH_VARARGS),
      DECLARE_METHOD(t_Long, floatValue, METH_VARARGS),
      DECLARE_METHOD(t_Long, getLong, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Long, hashCode_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, highestOneBit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, intValue, METH_VARARGS),
      DECLARE_METHOD(t_Long, longValue, METH_VARARGS),
      DECLARE_METHOD(t_Long, lowestOneBit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, max, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, min, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, numberOfLeadingZeros, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, numberOfTrailingZeros, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, parseLong, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, parseUnsignedLong, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, remainderUnsigned, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, reverse, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, reverseBytes, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, rotateLeft, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, rotateRight, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, shortValue, METH_VARARGS),
      DECLARE_METHOD(t_Long, signum, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, sum, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, toBinaryString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, toHexString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, toOctalString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, toString, METH_VARARGS),
      DECLARE_METHOD(t_Long, toString_, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, toUnsignedString, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Long, t_Long, ::java::lang::Number, Long, t_Long_init_, 0, 0, 0, 0, 0);

    void t_Long::install(PyObject *module)
    {
      installType(&PY_TYPE(Long), module, "Long", 0);
    }

    void t_Long::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Long).tp_dict, "class_", make_descriptor(Long::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Long).tp_dict, "wrapfn_", make_descriptor(unboxLong));
      PyDict_SetItemString(PY_TYPE(Long).tp_dict, "boxfn_", make_descriptor(boxLong));
      env->getClass(Long::initializeClass);
      PyDict_SetItemString(PY_TYPE(Long).tp_dict, "BYTES", make_descriptor(Long::BYTES));
      PyDict_SetItemString(PY_TYPE(Long).tp_dict, "MAX_VALUE", make_descriptor(Long::MAX_VALUE));
      PyDict_SetItemString(PY_TYPE(Long).tp_dict, "MIN_VALUE", make_descriptor(Long::MIN_VALUE));
      PyDict_SetItemString(PY_TYPE(Long).tp_dict, "SIZE", make_descriptor(Long::SIZE));
      PyDict_SetItemString(PY_TYPE(Long).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Long::TYPE)));
    }

    static PyObject *t_Long_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Long::initializeClass, 1)))
        return NULL;
      return t_Long::wrap_Object(Long(((t_Long *) arg)->object.this$));
    }
    static PyObject *t_Long_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Long::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Long_init_(t_Long *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jlong a0;
          Long object((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            INT_CALL(object = Long(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Long object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Long(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Long_bitCount(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jint result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::bitCount(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "bitCount", arg);
      return NULL;
    }

    static PyObject *t_Long_byteValue(t_Long *self, PyObject *args)
    {
      jbyte result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.byteValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "byteValue", args, 2);
    }

    static PyObject *t_Long_compare(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jlong a1;
      jint result;

      if (!parseArgs(args, "JJ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Long::compare(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Long_compareTo(t_Long *self, PyObject *arg)
    {
      Long a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Long), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Long_compareUnsigned(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jlong a1;
      jint result;

      if (!parseArgs(args, "JJ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Long::compareUnsigned(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compareUnsigned", args);
      return NULL;
    }

    static PyObject *t_Long_decode(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      Long result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::decode(a0));
        return t_Long::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "decode", arg);
      return NULL;
    }

    static PyObject *t_Long_divideUnsigned(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jlong a1;
      jlong result;

      if (!parseArgs(args, "JJ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Long::divideUnsigned(a0, a1));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "divideUnsigned", args);
      return NULL;
    }

    static PyObject *t_Long_doubleValue(t_Long *self, PyObject *args)
    {
      jdouble result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.doubleValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "doubleValue", args, 2);
    }

    static PyObject *t_Long_equals(t_Long *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Long_floatValue(t_Long *self, PyObject *args)
    {
      jfloat result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.floatValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "floatValue", args, 2);
    }

    static PyObject *t_Long_getLong(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Long result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Long::getLong(a0));
            return t_Long::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          Long result((jobject) NULL);

          if (!parseArgs(args, "sJ", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Long::getLong(a0, a1));
            return t_Long::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Long a1((jobject) NULL);
          Long result((jobject) NULL);

          if (!parseArgs(args, "sO", &::java::lang::PY_TYPE(Long), &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Long::getLong(a0, a1));
            return t_Long::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getLong", args);
      return NULL;
    }

    static PyObject *t_Long_hashCode(t_Long *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Long_hashCode_(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jint result;

      if (!parseArgs(args, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::hashCode(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "hashCode_", args);
      return NULL;
    }

    static PyObject *t_Long_highestOneBit(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jlong result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::highestOneBit(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "highestOneBit", arg);
      return NULL;
    }

    static PyObject *t_Long_intValue(t_Long *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.intValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "intValue", args, 2);
    }

    static PyObject *t_Long_longValue(t_Long *self, PyObject *args)
    {
      jlong result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.longValue());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "longValue", args, 2);
    }

    static PyObject *t_Long_lowestOneBit(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jlong result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::lowestOneBit(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "lowestOneBit", arg);
      return NULL;
    }

    static PyObject *t_Long_max(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jlong a1;
      jlong result;

      if (!parseArgs(args, "JJ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Long::max$(a0, a1));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "max", args);
      return NULL;
    }

    static PyObject *t_Long_min(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jlong a1;
      jlong result;

      if (!parseArgs(args, "JJ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Long::min$(a0, a1));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "min", args);
      return NULL;
    }

    static PyObject *t_Long_numberOfLeadingZeros(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jint result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::numberOfLeadingZeros(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "numberOfLeadingZeros", arg);
      return NULL;
    }

    static PyObject *t_Long_numberOfTrailingZeros(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jint result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::numberOfTrailingZeros(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "numberOfTrailingZeros", arg);
      return NULL;
    }

    static PyObject *t_Long_parseLong(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Long::parseLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jlong result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Long::parseLong(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }

      PyErr_SetArgsError(type, "parseLong", args);
      return NULL;
    }

    static PyObject *t_Long_parseUnsignedLong(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Long::parseUnsignedLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jlong result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Long::parseUnsignedLong(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }

      PyErr_SetArgsError(type, "parseUnsignedLong", args);
      return NULL;
    }

    static PyObject *t_Long_remainderUnsigned(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jlong a1;
      jlong result;

      if (!parseArgs(args, "JJ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Long::remainderUnsigned(a0, a1));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "remainderUnsigned", args);
      return NULL;
    }

    static PyObject *t_Long_reverse(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jlong result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::reverse(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "reverse", arg);
      return NULL;
    }

    static PyObject *t_Long_reverseBytes(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jlong result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::reverseBytes(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "reverseBytes", arg);
      return NULL;
    }

    static PyObject *t_Long_rotateLeft(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jint a1;
      jlong result;

      if (!parseArgs(args, "JI", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Long::rotateLeft(a0, a1));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "rotateLeft", args);
      return NULL;
    }

    static PyObject *t_Long_rotateRight(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jint a1;
      jlong result;

      if (!parseArgs(args, "JI", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Long::rotateRight(a0, a1));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "rotateRight", args);
      return NULL;
    }

    static PyObject *t_Long_shortValue(t_Long *self, PyObject *args)
    {
      jshort result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.shortValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "shortValue", args, 2);
    }

    static PyObject *t_Long_signum(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jint result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::signum(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "signum", arg);
      return NULL;
    }

    static PyObject *t_Long_sum(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jlong a1;
      jlong result;

      if (!parseArgs(args, "JJ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Long::sum(a0, a1));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "sum", args);
      return NULL;
    }

    static PyObject *t_Long_toBinaryString(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::toBinaryString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toBinaryString", arg);
      return NULL;
    }

    static PyObject *t_Long_toHexString(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::toHexString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toHexString", arg);
      return NULL;
    }

    static PyObject *t_Long_toOctalString(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::toOctalString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toOctalString", arg);
      return NULL;
    }

    static PyObject *t_Long_toString(t_Long *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Long_toString_(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jlong a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = ::java::lang::Long::toString(a0));
            return j2p(result);
          }
        }
        break;
       case 2:
        {
          jlong a0;
          jint a1;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Long::toString(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Long_toUnsignedString(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jlong a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = ::java::lang::Long::toUnsignedString(a0));
            return j2p(result);
          }
        }
        break;
       case 2:
        {
          jlong a0;
          jint a1;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Long::toUnsignedString(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "toUnsignedString", args);
      return NULL;
    }

    static PyObject *t_Long_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jlong a0;
          Long result((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = ::java::lang::Long::valueOf(a0));
            return t_Long::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Long result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Long::valueOf(a0));
            return t_Long::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          Long result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Long::valueOf(a0, a1));
            return t_Long::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/FixedBitSet$FixedBitSetIterator.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *FixedBitSet$FixedBitSetIterator::class$ = NULL;
        jmethodID *FixedBitSet$FixedBitSetIterator::mids$ = NULL;
        bool FixedBitSet$FixedBitSetIterator::live$ = false;

        jclass FixedBitSet$FixedBitSetIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/FixedBitSet$FixedBitSetIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_ef674644] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/FixedBitSet;)V");
            mids$[mid_init$_6ae021e7] = env->getMethodID(cls, "<init>", "([JII)V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FixedBitSet$FixedBitSetIterator::FixedBitSet$FixedBitSetIterator(const ::org::apache::lucene::util::FixedBitSet & a0) : ::org::apache::lucene::search::DocIdSetIterator(env->newObject(initializeClass, &mids$, mid_init$_ef674644, a0.this$)) {}

        FixedBitSet$FixedBitSetIterator::FixedBitSet$FixedBitSetIterator(const JArray< jlong > & a0, jint a1, jint a2) : ::org::apache::lucene::search::DocIdSetIterator(env->newObject(initializeClass, &mids$, mid_init$_6ae021e7, a0.this$, a1, a2)) {}

        jint FixedBitSet$FixedBitSetIterator::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        jlong FixedBitSet$FixedBitSetIterator::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint FixedBitSet$FixedBitSetIterator::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint FixedBitSet$FixedBitSetIterator::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_FixedBitSet$FixedBitSetIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FixedBitSet$FixedBitSetIterator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FixedBitSet$FixedBitSetIterator_init_(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FixedBitSet$FixedBitSetIterator_advance(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args);
        static PyObject *t_FixedBitSet$FixedBitSetIterator_cost(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args);
        static PyObject *t_FixedBitSet$FixedBitSetIterator_docID(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args);
        static PyObject *t_FixedBitSet$FixedBitSetIterator_nextDoc(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args);

        static PyMethodDef t_FixedBitSet$FixedBitSetIterator__methods_[] = {
          DECLARE_METHOD(t_FixedBitSet$FixedBitSetIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet$FixedBitSetIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet$FixedBitSetIterator, advance, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet$FixedBitSetIterator, cost, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet$FixedBitSetIterator, docID, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet$FixedBitSetIterator, nextDoc, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FixedBitSet$FixedBitSetIterator, t_FixedBitSet$FixedBitSetIterator, ::org::apache::lucene::search::DocIdSetIterator, FixedBitSet$FixedBitSetIterator, t_FixedBitSet$FixedBitSetIterator_init_, 0, 0, 0, 0, 0);

        void t_FixedBitSet$FixedBitSetIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(FixedBitSet$FixedBitSetIterator), module, "FixedBitSet$FixedBitSetIterator", 0);
        }

        void t_FixedBitSet$FixedBitSetIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FixedBitSet$FixedBitSetIterator).tp_dict, "class_", make_descriptor(FixedBitSet$FixedBitSetIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FixedBitSet$FixedBitSetIterator).tp_dict, "wrapfn_", make_descriptor(t_FixedBitSet$FixedBitSetIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FixedBitSet$FixedBitSetIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FixedBitSet$FixedBitSetIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FixedBitSet$FixedBitSetIterator::initializeClass, 1)))
            return NULL;
          return t_FixedBitSet$FixedBitSetIterator::wrap_Object(FixedBitSet$FixedBitSetIterator(((t_FixedBitSet$FixedBitSetIterator *) arg)->object.this$));
        }
        static PyObject *t_FixedBitSet$FixedBitSetIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FixedBitSet$FixedBitSetIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FixedBitSet$FixedBitSetIterator_init_(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::FixedBitSet a0((jobject) NULL);
              FixedBitSet$FixedBitSetIterator object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::FixedBitSet::initializeClass, &a0))
              {
                INT_CALL(object = FixedBitSet$FixedBitSetIterator(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              jint a2;
              FixedBitSet$FixedBitSetIterator object((jobject) NULL);

              if (!parseArgs(args, "[JII", &a0, &a1, &a2))
              {
                INT_CALL(object = FixedBitSet$FixedBitSetIterator(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FixedBitSet$FixedBitSetIterator_advance(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FixedBitSet$FixedBitSetIterator), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_FixedBitSet$FixedBitSetIterator_cost(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FixedBitSet$FixedBitSetIterator), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_FixedBitSet$FixedBitSetIterator_docID(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FixedBitSet$FixedBitSetIterator), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_FixedBitSet$FixedBitSetIterator_nextDoc(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FixedBitSet$FixedBitSetIterator), (PyObject *) self, "nextDoc", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/similarities/PythonDefaultSimilarity.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *PythonDefaultSimilarity::class$ = NULL;
          jmethodID *PythonDefaultSimilarity::mids$ = NULL;
          bool PythonDefaultSimilarity::live$ = false;

          jclass PythonDefaultSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/pylucene/search/similarities/PythonDefaultSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_coord_d8d154b6] = env->getMethodID(cls, "coord", "(II)F");
              mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
              mids$[mid_idf_a7e12cb4] = env->getMethodID(cls, "idf", "(JJ)F");
              mids$[mid_idfExplain_be4c9f2b] = env->getMethodID(cls, "idfExplain", "(Lorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_lengthNorm_6ff84e02] = env->getMethodID(cls, "lengthNorm", "(Lorg/apache/lucene/index/FieldInvertState;)F");
              mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
              mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
              mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
              mids$[mid_queryNorm_06298cbb] = env->getMethodID(cls, "queryNorm", "(F)F");
              mids$[mid_sloppyFreq_39c7bd2c] = env->getMethodID(cls, "sloppyFreq", "(I)F");
              mids$[mid_tf_06298cbb] = env->getMethodID(cls, "tf", "(F)F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PythonDefaultSimilarity::PythonDefaultSimilarity() : ::org::apache::lucene::search::similarities::DefaultSimilarity(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat PythonDefaultSimilarity::coord(jint a0, jint a1) const
          {
            return env->callNonvirtualFloatMethod(this$, (jclass) ::org::apache::lucene::search::similarities::DefaultSimilarity::class$->this$, ::org::apache::lucene::search::similarities::DefaultSimilarity::mids$[::org::apache::lucene::search::similarities::DefaultSimilarity::mid_coord_d8d154b6], a0, a1);
          }

          void PythonDefaultSimilarity::finalize() const
          {
            env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
          }

          jfloat PythonDefaultSimilarity::idf(jlong a0, jlong a1) const
          {
            return env->callNonvirtualFloatMethod(this$, (jclass) ::org::apache::lucene::search::similarities::DefaultSimilarity::class$->this$, ::org::apache::lucene::search::similarities::DefaultSimilarity::mids$[::org::apache::lucene::search::similarities::DefaultSimilarity::mid_idf_a7e12cb4], a0, a1);
          }

          ::org::apache::lucene::search::Explanation PythonDefaultSimilarity::idfExplain(const ::org::apache::lucene::search::CollectionStatistics & a0, const JArray< ::org::apache::lucene::search::TermStatistics > & a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::search::similarities::DefaultSimilarity::class$->this$, ::org::apache::lucene::search::similarities::TFIDFSimilarity::mids$[::org::apache::lucene::search::similarities::TFIDFSimilarity::mid_idfExplain_be4c9f2b], a0.this$, a1.this$));
          }

          jfloat PythonDefaultSimilarity::lengthNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callNonvirtualFloatMethod(this$, (jclass) ::org::apache::lucene::search::similarities::DefaultSimilarity::class$->this$, ::org::apache::lucene::search::similarities::DefaultSimilarity::mids$[::org::apache::lucene::search::similarities::DefaultSimilarity::mid_lengthNorm_6ff84e02], a0.this$);
          }

          jlong PythonDefaultSimilarity::pythonExtension() const
          {
            return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
          }

          void PythonDefaultSimilarity::pythonExtension(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
          }

          jfloat PythonDefaultSimilarity::queryNorm(jfloat a0) const
          {
            return env->callNonvirtualFloatMethod(this$, (jclass) ::org::apache::lucene::search::similarities::DefaultSimilarity::class$->this$, ::org::apache::lucene::search::similarities::DefaultSimilarity::mids$[::org::apache::lucene::search::similarities::DefaultSimilarity::mid_queryNorm_06298cbb], a0);
          }

          jfloat PythonDefaultSimilarity::sloppyFreq(jint a0) const
          {
            return env->callNonvirtualFloatMethod(this$, (jclass) ::org::apache::lucene::search::similarities::DefaultSimilarity::class$->this$, ::org::apache::lucene::search::similarities::DefaultSimilarity::mids$[::org::apache::lucene::search::similarities::DefaultSimilarity::mid_sloppyFreq_39c7bd2c], a0);
          }

          jfloat PythonDefaultSimilarity::tf(jfloat a0) const
          {
            return env->callNonvirtualFloatMethod(this$, (jclass) ::org::apache::lucene::search::similarities::DefaultSimilarity::class$->this$, ::org::apache::lucene::search::similarities::DefaultSimilarity::mids$[::org::apache::lucene::search::similarities::DefaultSimilarity::mid_tf_06298cbb], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace similarities {
          static PyObject *t_PythonDefaultSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PythonDefaultSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PythonDefaultSimilarity_init_(t_PythonDefaultSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PythonDefaultSimilarity_coord(t_PythonDefaultSimilarity *self, PyObject *args);
          static PyObject *t_PythonDefaultSimilarity_finalize(t_PythonDefaultSimilarity *self);
          static PyObject *t_PythonDefaultSimilarity_idf(t_PythonDefaultSimilarity *self, PyObject *args);
          static PyObject *t_PythonDefaultSimilarity_idfExplain(t_PythonDefaultSimilarity *self, PyObject *args);
          static PyObject *t_PythonDefaultSimilarity_lengthNorm(t_PythonDefaultSimilarity *self, PyObject *args);
          static PyObject *t_PythonDefaultSimilarity_pythonExtension(t_PythonDefaultSimilarity *self, PyObject *args);
          static PyObject *t_PythonDefaultSimilarity_queryNorm(t_PythonDefaultSimilarity *self, PyObject *args);
          static PyObject *t_PythonDefaultSimilarity_sloppyFreq(t_PythonDefaultSimilarity *self, PyObject *args);
          static PyObject *t_PythonDefaultSimilarity_tf(t_PythonDefaultSimilarity *self, PyObject *args);
          static jfloat JNICALL t_PythonDefaultSimilarity_coord0(JNIEnv *jenv, jobject jobj, jint a0, jint a1);
          static jfloat JNICALL t_PythonDefaultSimilarity_idf1(JNIEnv *jenv, jobject jobj, jlong a0, jlong a1);
          static jobject JNICALL t_PythonDefaultSimilarity_idfExplain2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static jfloat JNICALL t_PythonDefaultSimilarity_lengthNorm3(JNIEnv *jenv, jobject jobj, jobject a0);
          static void JNICALL t_PythonDefaultSimilarity_pythonDecRef4(JNIEnv *jenv, jobject jobj);
          static jfloat JNICALL t_PythonDefaultSimilarity_queryNorm5(JNIEnv *jenv, jobject jobj, jfloat a0);
          static jfloat JNICALL t_PythonDefaultSimilarity_sloppyFreq6(JNIEnv *jenv, jobject jobj, jint a0);
          static jfloat JNICALL t_PythonDefaultSimilarity_tf7(JNIEnv *jenv, jobject jobj, jfloat a0);
          static PyObject *t_PythonDefaultSimilarity_get__self(t_PythonDefaultSimilarity *self, void *data);
          static PyGetSetDef t_PythonDefaultSimilarity__fields_[] = {
            DECLARE_GET_FIELD(t_PythonDefaultSimilarity, self),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PythonDefaultSimilarity__methods_[] = {
            DECLARE_METHOD(t_PythonDefaultSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, coord, METH_VARARGS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, finalize, METH_NOARGS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, idf, METH_VARARGS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, idfExplain, METH_VARARGS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, lengthNorm, METH_VARARGS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, pythonExtension, METH_VARARGS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, queryNorm, METH_VARARGS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, sloppyFreq, METH_VARARGS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, tf, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PythonDefaultSimilarity, t_PythonDefaultSimilarity, ::org::apache::lucene::search::similarities::DefaultSimilarity, PythonDefaultSimilarity, t_PythonDefaultSimilarity_init_, 0, 0, t_PythonDefaultSimilarity__fields_, 0, 0);

          void t_PythonDefaultSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(PythonDefaultSimilarity), module, "PythonDefaultSimilarity", 1);
          }

          void t_PythonDefaultSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PythonDefaultSimilarity).tp_dict, "class_", make_descriptor(PythonDefaultSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PythonDefaultSimilarity).tp_dict, "wrapfn_", make_descriptor(t_PythonDefaultSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PythonDefaultSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
            jclass cls = env->getClass(PythonDefaultSimilarity::initializeClass);
            JNINativeMethod methods[] = {
              { "coord", "(II)F", (void *) t_PythonDefaultSimilarity_coord0 },
              { "idf", "(JJ)F", (void *) t_PythonDefaultSimilarity_idf1 },
              { "idfExplain", "(Lorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/Explanation;", (void *) t_PythonDefaultSimilarity_idfExplain2 },
              { "lengthNorm", "(Lorg/apache/lucene/index/FieldInvertState;)F", (void *) t_PythonDefaultSimilarity_lengthNorm3 },
              { "pythonDecRef", "()V", (void *) t_PythonDefaultSimilarity_pythonDecRef4 },
              { "queryNorm", "(F)F", (void *) t_PythonDefaultSimilarity_queryNorm5 },
              { "sloppyFreq", "(I)F", (void *) t_PythonDefaultSimilarity_sloppyFreq6 },
              { "tf", "(F)F", (void *) t_PythonDefaultSimilarity_tf7 },
            };
            env->registerNatives(cls, methods, 8);
          }

          static PyObject *t_PythonDefaultSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PythonDefaultSimilarity::initializeClass, 1)))
              return NULL;
            return t_PythonDefaultSimilarity::wrap_Object(PythonDefaultSimilarity(((t_PythonDefaultSimilarity *) arg)->object.this$));
          }
          static PyObject *t_PythonDefaultSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PythonDefaultSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PythonDefaultSimilarity_init_(t_PythonDefaultSimilarity *self, PyObject *args, PyObject *kwds)
          {
            PythonDefaultSimilarity object((jobject) NULL);

            INT_CALL(object = PythonDefaultSimilarity());
            self->object = object;

            Py_INCREF((PyObject *) self);
            self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

            return 0;
          }

          static PyObject *t_PythonDefaultSimilarity_coord(t_PythonDefaultSimilarity *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jfloat result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.coord(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(PythonDefaultSimilarity), (PyObject *) self, "coord", args, 2);
          }

          static PyObject *t_PythonDefaultSimilarity_finalize(t_PythonDefaultSimilarity *self)
          {
            OBJ_CALL(self->object.finalize());
            Py_RETURN_NONE;
          }

          static PyObject *t_PythonDefaultSimilarity_idf(t_PythonDefaultSimilarity *self, PyObject *args)
          {
            jlong a0;
            jlong a1;
            jfloat result;

            if (!parseArgs(args, "JJ", &a0, &a1))
            {
              OBJ_CALL(result = self->object.idf(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(PythonDefaultSimilarity), (PyObject *) self, "idf", args, 2);
          }

          static PyObject *t_PythonDefaultSimilarity_idfExplain(t_PythonDefaultSimilarity *self, PyObject *args)
          {
            ::org::apache::lucene::search::CollectionStatistics a0((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a1((jobject) NULL);
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "k[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.idfExplain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PythonDefaultSimilarity), (PyObject *) self, "idfExplain", args, 2);
          }

          static PyObject *t_PythonDefaultSimilarity_lengthNorm(t_PythonDefaultSimilarity *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.lengthNorm(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(PythonDefaultSimilarity), (PyObject *) self, "lengthNorm", args, 2);
          }

          static PyObject *t_PythonDefaultSimilarity_pythonExtension(t_PythonDefaultSimilarity *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.pythonExtension());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.pythonExtension(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
            return NULL;
          }

          static PyObject *t_PythonDefaultSimilarity_queryNorm(t_PythonDefaultSimilarity *self, PyObject *args)
          {
            jfloat a0;
            jfloat result;

            if (!parseArgs(args, "F", &a0))
            {
              OBJ_CALL(result = self->object.queryNorm(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(PythonDefaultSimilarity), (PyObject *) self, "queryNorm", args, 2);
          }

          static PyObject *t_PythonDefaultSimilarity_sloppyFreq(t_PythonDefaultSimilarity *self, PyObject *args)
          {
            jint a0;
            jfloat result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.sloppyFreq(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(PythonDefaultSimilarity), (PyObject *) self, "sloppyFreq", args, 2);
          }

          static PyObject *t_PythonDefaultSimilarity_tf(t_PythonDefaultSimilarity *self, PyObject *args)
          {
            jfloat a0;
            jfloat result;

            if (!parseArgs(args, "F", &a0))
            {
              OBJ_CALL(result = self->object.tf(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(PythonDefaultSimilarity), (PyObject *) self, "tf", args, 2);
          }

          static jfloat JNICALL t_PythonDefaultSimilarity_coord0(JNIEnv *jenv, jobject jobj, jint a0, jint a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jfloat value;
            PyObject *result = PyObject_CallMethod(obj, "coord", "ii", (int) a0, (int) a1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "F", &value))
            {
              throwTypeError("coord", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jfloat) 0;
          }

          static jfloat JNICALL t_PythonDefaultSimilarity_idf1(JNIEnv *jenv, jobject jobj, jlong a0, jlong a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jfloat value;
            PyObject *result = PyObject_CallMethod(obj, "idf", "LL", (long long) a0, (long long) a1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "F", &value))
            {
              throwTypeError("idf", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jfloat) 0;
          }

          static jobject JNICALL t_PythonDefaultSimilarity_idfExplain2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Explanation value((jobject) NULL);
            PyObject *o0 = ::org::apache::lucene::search::t_CollectionStatistics::wrap_Object(::org::apache::lucene::search::CollectionStatistics(a0));
            PyObject *o1 = JArray<jobject>(a1).wrap(::org::apache::lucene::search::t_TermStatistics::wrap_jobject);
            PyObject *result = PyObject_CallMethod(obj, "idfExplain", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Explanation::initializeClass, &value))
            {
              throwTypeError("idfExplain", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jfloat JNICALL t_PythonDefaultSimilarity_lengthNorm3(JNIEnv *jenv, jobject jobj, jobject a0)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jfloat value;
            PyObject *o0 = ::org::apache::lucene::index::t_FieldInvertState::wrap_Object(::org::apache::lucene::index::FieldInvertState(a0));
            PyObject *result = PyObject_CallMethod(obj, "lengthNorm", "O", o0);
            Py_DECREF(o0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "F", &value))
            {
              throwTypeError("lengthNorm", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jfloat) 0;
          }

          static void JNICALL t_PythonDefaultSimilarity_pythonDecRef4(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              jenv->CallVoidMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_0ee6df2f], (jlong) 0);
              env->finalizeObject(jenv, obj);
            }
          }

          static jfloat JNICALL t_PythonDefaultSimilarity_queryNorm5(JNIEnv *jenv, jobject jobj, jfloat a0)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jfloat value;
            PyObject *result = PyObject_CallMethod(obj, "queryNorm", "f", (float) a0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "F", &value))
            {
              throwTypeError("queryNorm", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jfloat) 0;
          }

          static jfloat JNICALL t_PythonDefaultSimilarity_sloppyFreq6(JNIEnv *jenv, jobject jobj, jint a0)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jfloat value;
            PyObject *result = PyObject_CallMethod(obj, "sloppyFreq", "i", (int) a0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "F", &value))
            {
              throwTypeError("sloppyFreq", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jfloat) 0;
          }

          static jfloat JNICALL t_PythonDefaultSimilarity_tf7(JNIEnv *jenv, jobject jobj, jfloat a0)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jfloat value;
            PyObject *result = PyObject_CallMethod(obj, "tf", "f", (float) a0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "F", &value))
            {
              throwTypeError("tf", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jfloat) 0;
          }

          static PyObject *t_PythonDefaultSimilarity_get__self(t_PythonDefaultSimilarity *self, void *data)
          {
            jlong ptr;
            OBJ_CALL(ptr = self->object.pythonExtension());
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              Py_INCREF(obj);
              return obj;
            }
            else
              Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/OutputStreamIndexOutput.h"
#include "java/io/OutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *OutputStreamIndexOutput::class$ = NULL;
        jmethodID *OutputStreamIndexOutput::mids$ = NULL;
        bool OutputStreamIndexOutput::live$ = false;

        jclass OutputStreamIndexOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/OutputStreamIndexOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_20acd1f6] = env->getMethodID(cls, "<init>", "(Ljava/io/OutputStream;I)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
            mids$[mid_getChecksum_54c6a17a] = env->getMethodID(cls, "getChecksum", "()J");
            mids$[mid_getFilePointer_54c6a17a] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_writeByte_b2271687] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_86f4435f] = env->getMethodID(cls, "writeBytes", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OutputStreamIndexOutput::OutputStreamIndexOutput(const ::java::io::OutputStream & a0, jint a1) : ::org::apache::lucene::store::IndexOutput(env->newObject(initializeClass, &mids$, mid_init$_20acd1f6, a0.this$, a1)) {}

        void OutputStreamIndexOutput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void OutputStreamIndexOutput::flush() const
        {
          env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
        }

        jlong OutputStreamIndexOutput::getChecksum() const
        {
          return env->callLongMethod(this$, mids$[mid_getChecksum_54c6a17a]);
        }

        jlong OutputStreamIndexOutput::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_54c6a17a]);
        }

        void OutputStreamIndexOutput::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_b2271687], a0);
        }

        void OutputStreamIndexOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_86f4435f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_OutputStreamIndexOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OutputStreamIndexOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OutputStreamIndexOutput_init_(t_OutputStreamIndexOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OutputStreamIndexOutput_close(t_OutputStreamIndexOutput *self, PyObject *args);
        static PyObject *t_OutputStreamIndexOutput_flush(t_OutputStreamIndexOutput *self, PyObject *args);
        static PyObject *t_OutputStreamIndexOutput_getChecksum(t_OutputStreamIndexOutput *self, PyObject *args);
        static PyObject *t_OutputStreamIndexOutput_getFilePointer(t_OutputStreamIndexOutput *self, PyObject *args);
        static PyObject *t_OutputStreamIndexOutput_writeByte(t_OutputStreamIndexOutput *self, PyObject *args);
        static PyObject *t_OutputStreamIndexOutput_writeBytes(t_OutputStreamIndexOutput *self, PyObject *args);
        static PyObject *t_OutputStreamIndexOutput_get__checksum(t_OutputStreamIndexOutput *self, void *data);
        static PyObject *t_OutputStreamIndexOutput_get__filePointer(t_OutputStreamIndexOutput *self, void *data);
        static PyGetSetDef t_OutputStreamIndexOutput__fields_[] = {
          DECLARE_GET_FIELD(t_OutputStreamIndexOutput, checksum),
          DECLARE_GET_FIELD(t_OutputStreamIndexOutput, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_OutputStreamIndexOutput__methods_[] = {
          DECLARE_METHOD(t_OutputStreamIndexOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, close, METH_VARARGS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, flush, METH_VARARGS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, getChecksum, METH_VARARGS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, getFilePointer, METH_VARARGS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, writeByte, METH_VARARGS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, writeBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OutputStreamIndexOutput, t_OutputStreamIndexOutput, ::org::apache::lucene::store::IndexOutput, OutputStreamIndexOutput, t_OutputStreamIndexOutput_init_, 0, 0, t_OutputStreamIndexOutput__fields_, 0, 0);

        void t_OutputStreamIndexOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(OutputStreamIndexOutput), module, "OutputStreamIndexOutput", 0);
        }

        void t_OutputStreamIndexOutput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OutputStreamIndexOutput).tp_dict, "class_", make_descriptor(OutputStreamIndexOutput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OutputStreamIndexOutput).tp_dict, "wrapfn_", make_descriptor(t_OutputStreamIndexOutput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OutputStreamIndexOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OutputStreamIndexOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OutputStreamIndexOutput::initializeClass, 1)))
            return NULL;
          return t_OutputStreamIndexOutput::wrap_Object(OutputStreamIndexOutput(((t_OutputStreamIndexOutput *) arg)->object.this$));
        }
        static PyObject *t_OutputStreamIndexOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OutputStreamIndexOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OutputStreamIndexOutput_init_(t_OutputStreamIndexOutput *self, PyObject *args, PyObject *kwds)
        {
          ::java::io::OutputStream a0((jobject) NULL);
          jint a1;
          OutputStreamIndexOutput object((jobject) NULL);

          if (!parseArgs(args, "kI", ::java::io::OutputStream::initializeClass, &a0, &a1))
          {
            INT_CALL(object = OutputStreamIndexOutput(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OutputStreamIndexOutput_close(t_OutputStreamIndexOutput *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(OutputStreamIndexOutput), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_OutputStreamIndexOutput_flush(t_OutputStreamIndexOutput *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.flush());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(OutputStreamIndexOutput), (PyObject *) self, "flush", args, 2);
        }

        static PyObject *t_OutputStreamIndexOutput_getChecksum(t_OutputStreamIndexOutput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getChecksum());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(OutputStreamIndexOutput), (PyObject *) self, "getChecksum", args, 2);
        }

        static PyObject *t_OutputStreamIndexOutput_getFilePointer(t_OutputStreamIndexOutput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFilePointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(OutputStreamIndexOutput), (PyObject *) self, "getFilePointer", args, 2);
        }

        static PyObject *t_OutputStreamIndexOutput_writeByte(t_OutputStreamIndexOutput *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(OutputStreamIndexOutput), (PyObject *) self, "writeByte", args, 2);
        }

        static PyObject *t_OutputStreamIndexOutput_writeBytes(t_OutputStreamIndexOutput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(OutputStreamIndexOutput), (PyObject *) self, "writeBytes", args, 2);
        }

        static PyObject *t_OutputStreamIndexOutput_get__checksum(t_OutputStreamIndexOutput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_OutputStreamIndexOutput_get__filePointer(t_OutputStreamIndexOutput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseLightStemFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseLightStemFilterFactory::class$ = NULL;
          jmethodID *PortugueseLightStemFilterFactory::mids$ = NULL;
          bool PortugueseLightStemFilterFactory::live$ = false;

          jclass PortugueseLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseLightStemFilterFactory::PortugueseLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream PortugueseLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseLightStemFilterFactory_init_(t_PortugueseLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseLightStemFilterFactory_create(t_PortugueseLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_PortugueseLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PortugueseLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseLightStemFilterFactory, t_PortugueseLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, PortugueseLightStemFilterFactory, t_PortugueseLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_PortugueseLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseLightStemFilterFactory), module, "PortugueseLightStemFilterFactory", 0);
          }

          void t_PortugueseLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemFilterFactory).tp_dict, "class_", make_descriptor(PortugueseLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PortugueseLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PortugueseLightStemFilterFactory::wrap_Object(PortugueseLightStemFilterFactory(((t_PortugueseLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PortugueseLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseLightStemFilterFactory_init_(t_PortugueseLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PortugueseLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PortugueseLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseLightStemFilterFactory_create(t_PortugueseLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PortugueseLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/config/AbstractQueryConfig.h"
#include "org/apache/lucene/queryparser/flexible/core/config/ConfigurationKey.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {

              ::java::lang::Class *AbstractQueryConfig::class$ = NULL;
              jmethodID *AbstractQueryConfig::mids$ = NULL;
              bool AbstractQueryConfig::live$ = false;

              jclass AbstractQueryConfig::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/config/AbstractQueryConfig");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_get_96b6da60] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;)Ljava/lang/Object;");
                  mids$[mid_has_d605f87f] = env->getMethodID(cls, "has", "(Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;)Z");
                  mids$[mid_set_55cc58cf] = env->getMethodID(cls, "set", "(Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;Ljava/lang/Object;)V");
                  mids$[mid_unset_d605f87f] = env->getMethodID(cls, "unset", "(Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;)Z");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::Object AbstractQueryConfig::get(const ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey & a0) const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_96b6da60], a0.this$));
              }

              jboolean AbstractQueryConfig::has(const ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_has_d605f87f], a0.this$);
              }

              void AbstractQueryConfig::set(const ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey & a0, const ::java::lang::Object & a1) const
              {
                env->callVoidMethod(this$, mids$[mid_set_55cc58cf], a0.this$, a1.this$);
              }

              jboolean AbstractQueryConfig::unset(const ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_unset_d605f87f], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {
              static PyObject *t_AbstractQueryConfig_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AbstractQueryConfig_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AbstractQueryConfig_get(t_AbstractQueryConfig *self, PyObject *arg);
              static PyObject *t_AbstractQueryConfig_has(t_AbstractQueryConfig *self, PyObject *arg);
              static PyObject *t_AbstractQueryConfig_set(t_AbstractQueryConfig *self, PyObject *args);
              static PyObject *t_AbstractQueryConfig_unset(t_AbstractQueryConfig *self, PyObject *arg);

              static PyMethodDef t_AbstractQueryConfig__methods_[] = {
                DECLARE_METHOD(t_AbstractQueryConfig, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AbstractQueryConfig, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AbstractQueryConfig, get, METH_O),
                DECLARE_METHOD(t_AbstractQueryConfig, has, METH_O),
                DECLARE_METHOD(t_AbstractQueryConfig, set, METH_VARARGS),
                DECLARE_METHOD(t_AbstractQueryConfig, unset, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(AbstractQueryConfig, t_AbstractQueryConfig, ::java::lang::Object, AbstractQueryConfig, abstract_init, 0, 0, 0, 0, 0);

              void t_AbstractQueryConfig::install(PyObject *module)
              {
                installType(&PY_TYPE(AbstractQueryConfig), module, "AbstractQueryConfig", 0);
              }

              void t_AbstractQueryConfig::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(AbstractQueryConfig).tp_dict, "class_", make_descriptor(AbstractQueryConfig::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(AbstractQueryConfig).tp_dict, "wrapfn_", make_descriptor(t_AbstractQueryConfig::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(AbstractQueryConfig).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AbstractQueryConfig_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AbstractQueryConfig::initializeClass, 1)))
                  return NULL;
                return t_AbstractQueryConfig::wrap_Object(AbstractQueryConfig(((t_AbstractQueryConfig *) arg)->object.this$));
              }
              static PyObject *t_AbstractQueryConfig_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AbstractQueryConfig::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_AbstractQueryConfig_get(t_AbstractQueryConfig *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::Object result((jobject) NULL);

                if (!parseArg(arg, "K", ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::parameters_))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "get", arg);
                return NULL;
              }

              static PyObject *t_AbstractQueryConfig_has(t_AbstractQueryConfig *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean result;

                if (!parseArg(arg, "K", ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::parameters_))
                {
                  OBJ_CALL(result = self->object.has(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "has", arg);
                return NULL;
              }

              static PyObject *t_AbstractQueryConfig_set(t_AbstractQueryConfig *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::Object a1((jobject) NULL);

                if (!parseArgs(args, "Ko", ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::parameters_, &a1))
                {
                  OBJ_CALL(self->object.set(a0, a1));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "set", args);
                return NULL;
              }

              static PyObject *t_AbstractQueryConfig_unset(t_AbstractQueryConfig *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean result;

                if (!parseArg(arg, "K", ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::parameters_))
                {
                  OBJ_CALL(result = self->object.unset(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "unset", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/ExternalRefSorter.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/suggest/fst/BytesRefSorter.h"
#include "org/apache/lucene/util/OfflineSorter.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *ExternalRefSorter::class$ = NULL;
            jmethodID *ExternalRefSorter::mids$ = NULL;
            bool ExternalRefSorter::live$ = false;

            jclass ExternalRefSorter::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/ExternalRefSorter");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_6859decd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/OfflineSorter;)V");
                mids$[mid_add_7bc03dc4] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
                mids$[mid_iterator_534dea83] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/util/BytesRefIterator;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ExternalRefSorter::ExternalRefSorter(const ::org::apache::lucene::util::OfflineSorter & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6859decd, a0.this$)) {}

            void ExternalRefSorter::add(const ::org::apache::lucene::util::BytesRef & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_add_7bc03dc4], a0.this$);
            }

            void ExternalRefSorter::close() const
            {
              env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
            }

            ::java::util::Comparator ExternalRefSorter::getComparator() const
            {
              return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
            }

            ::org::apache::lucene::util::BytesRefIterator ExternalRefSorter::iterator() const
            {
              return ::org::apache::lucene::util::BytesRefIterator(env->callObjectMethod(this$, mids$[mid_iterator_534dea83]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_ExternalRefSorter_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ExternalRefSorter_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ExternalRefSorter_init_(t_ExternalRefSorter *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ExternalRefSorter_add(t_ExternalRefSorter *self, PyObject *arg);
            static PyObject *t_ExternalRefSorter_close(t_ExternalRefSorter *self);
            static PyObject *t_ExternalRefSorter_getComparator(t_ExternalRefSorter *self);
            static PyObject *t_ExternalRefSorter_iterator(t_ExternalRefSorter *self);
            static PyObject *t_ExternalRefSorter_get__comparator(t_ExternalRefSorter *self, void *data);
            static PyGetSetDef t_ExternalRefSorter__fields_[] = {
              DECLARE_GET_FIELD(t_ExternalRefSorter, comparator),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ExternalRefSorter__methods_[] = {
              DECLARE_METHOD(t_ExternalRefSorter, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ExternalRefSorter, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ExternalRefSorter, add, METH_O),
              DECLARE_METHOD(t_ExternalRefSorter, close, METH_NOARGS),
              DECLARE_METHOD(t_ExternalRefSorter, getComparator, METH_NOARGS),
              DECLARE_METHOD(t_ExternalRefSorter, iterator, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ExternalRefSorter, t_ExternalRefSorter, ::java::lang::Object, ExternalRefSorter, t_ExternalRefSorter_init_, 0, 0, t_ExternalRefSorter__fields_, 0, 0);

            void t_ExternalRefSorter::install(PyObject *module)
            {
              installType(&PY_TYPE(ExternalRefSorter), module, "ExternalRefSorter", 0);
            }

            void t_ExternalRefSorter::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ExternalRefSorter).tp_dict, "class_", make_descriptor(ExternalRefSorter::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ExternalRefSorter).tp_dict, "wrapfn_", make_descriptor(t_ExternalRefSorter::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ExternalRefSorter).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ExternalRefSorter_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ExternalRefSorter::initializeClass, 1)))
                return NULL;
              return t_ExternalRefSorter::wrap_Object(ExternalRefSorter(((t_ExternalRefSorter *) arg)->object.this$));
            }
            static PyObject *t_ExternalRefSorter_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ExternalRefSorter::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ExternalRefSorter_init_(t_ExternalRefSorter *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::util::OfflineSorter a0((jobject) NULL);
              ExternalRefSorter object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::OfflineSorter::initializeClass, &a0))
              {
                INT_CALL(object = ExternalRefSorter(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ExternalRefSorter_add(t_ExternalRefSorter *self, PyObject *arg)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "add", arg);
              return NULL;
            }

            static PyObject *t_ExternalRefSorter_close(t_ExternalRefSorter *self)
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            static PyObject *t_ExternalRefSorter_getComparator(t_ExternalRefSorter *self)
            {
              ::java::util::Comparator result((jobject) NULL);
              OBJ_CALL(result = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
            }

            static PyObject *t_ExternalRefSorter_iterator(t_ExternalRefSorter *self)
            {
              ::org::apache::lucene::util::BytesRefIterator result((jobject) NULL);
              OBJ_CALL(result = self->object.iterator());
              return ::org::apache::lucene::util::t_BytesRefIterator::wrap_Object(result);
            }

            static PyObject *t_ExternalRefSorter_get__comparator(t_ExternalRefSorter *self, void *data)
            {
              ::java::util::Comparator value((jobject) NULL);
              OBJ_CALL(value = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/MatchNoDocsQueryNode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *MatchNoDocsQueryNode::class$ = NULL;
              jmethodID *MatchNoDocsQueryNode::mids$ = NULL;
              bool MatchNoDocsQueryNode::live$ = false;

              jclass MatchNoDocsQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/MatchNoDocsQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MatchNoDocsQueryNode::MatchNoDocsQueryNode() : ::org::apache::lucene::queryparser::flexible::core::nodes::DeletedQueryNode(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::java::lang::String MatchNoDocsQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_MatchNoDocsQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MatchNoDocsQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MatchNoDocsQueryNode_init_(t_MatchNoDocsQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_MatchNoDocsQueryNode_toString(t_MatchNoDocsQueryNode *self, PyObject *args);

              static PyMethodDef t_MatchNoDocsQueryNode__methods_[] = {
                DECLARE_METHOD(t_MatchNoDocsQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchNoDocsQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchNoDocsQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MatchNoDocsQueryNode, t_MatchNoDocsQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::DeletedQueryNode, MatchNoDocsQueryNode, t_MatchNoDocsQueryNode_init_, 0, 0, 0, 0, 0);

              void t_MatchNoDocsQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(MatchNoDocsQueryNode), module, "MatchNoDocsQueryNode", 0);
              }

              void t_MatchNoDocsQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MatchNoDocsQueryNode).tp_dict, "class_", make_descriptor(MatchNoDocsQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MatchNoDocsQueryNode).tp_dict, "wrapfn_", make_descriptor(t_MatchNoDocsQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MatchNoDocsQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MatchNoDocsQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MatchNoDocsQueryNode::initializeClass, 1)))
                  return NULL;
                return t_MatchNoDocsQueryNode::wrap_Object(MatchNoDocsQueryNode(((t_MatchNoDocsQueryNode *) arg)->object.this$));
              }
              static PyObject *t_MatchNoDocsQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MatchNoDocsQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MatchNoDocsQueryNode_init_(t_MatchNoDocsQueryNode *self, PyObject *args, PyObject *kwds)
              {
                MatchNoDocsQueryNode object((jobject) NULL);

                INT_CALL(object = MatchNoDocsQueryNode());
                self->object = object;

                return 0;
              }

              static PyObject *t_MatchNoDocsQueryNode_toString(t_MatchNoDocsQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(MatchNoDocsQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKBigramFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKBigramFilterFactory::class$ = NULL;
          jmethodID *CJKBigramFilterFactory::mids$ = NULL;
          bool CJKBigramFilterFactory::live$ = false;

          jclass CJKBigramFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKBigramFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKBigramFilterFactory::CJKBigramFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream CJKBigramFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKBigramFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKBigramFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKBigramFilterFactory_init_(t_CJKBigramFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKBigramFilterFactory_create(t_CJKBigramFilterFactory *self, PyObject *args);

          static PyMethodDef t_CJKBigramFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CJKBigramFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKBigramFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKBigramFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CJKBigramFilterFactory, t_CJKBigramFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, CJKBigramFilterFactory, t_CJKBigramFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_CJKBigramFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKBigramFilterFactory), module, "CJKBigramFilterFactory", 0);
          }

          void t_CJKBigramFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CJKBigramFilterFactory).tp_dict, "class_", make_descriptor(CJKBigramFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CJKBigramFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CJKBigramFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKBigramFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CJKBigramFilterFactory::wrap_Object(CJKBigramFilterFactory(((t_CJKBigramFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CJKBigramFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKBigramFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKBigramFilterFactory_init_(t_CJKBigramFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CJKBigramFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CJKBigramFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKBigramFilterFactory_create(t_CJKBigramFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CJKBigramFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
