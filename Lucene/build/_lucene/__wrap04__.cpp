#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/CompressionTools.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *CompressionTools::class$ = NULL;
        jmethodID *CompressionTools::mids$ = NULL;
        bool CompressionTools::live$ = false;

        jclass CompressionTools::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/CompressionTools");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compress_1193226d] = env->getStaticMethodID(cls, "compress", "([B)[B");
            mids$[mid_compress_3d448975] = env->getStaticMethodID(cls, "compress", "([BII)[B");
            mids$[mid_compress_dad27ce1] = env->getStaticMethodID(cls, "compress", "([BIII)[B");
            mids$[mid_compressString_94a731a4] = env->getStaticMethodID(cls, "compressString", "(Ljava/lang/String;)[B");
            mids$[mid_compressString_7bb29782] = env->getStaticMethodID(cls, "compressString", "(Ljava/lang/String;I)[B");
            mids$[mid_decompress_1193226d] = env->getStaticMethodID(cls, "decompress", "([B)[B");
            mids$[mid_decompress_942a4f60] = env->getStaticMethodID(cls, "decompress", "(Lorg/apache/lucene/util/BytesRef;)[B");
            mids$[mid_decompress_3d448975] = env->getStaticMethodID(cls, "decompress", "([BII)[B");
            mids$[mid_decompressString_edfda73b] = env->getStaticMethodID(cls, "decompressString", "(Lorg/apache/lucene/util/BytesRef;)Ljava/lang/String;");
            mids$[mid_decompressString_0f6e0f86] = env->getStaticMethodID(cls, "decompressString", "([B)Ljava/lang/String;");
            mids$[mid_decompressString_f7ab0d9e] = env->getStaticMethodID(cls, "decompressString", "([BII)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        JArray< jbyte > CompressionTools::compress(const JArray< jbyte > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_compress_1193226d], a0.this$));
        }

        JArray< jbyte > CompressionTools::compress(const JArray< jbyte > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_compress_3d448975], a0.this$, a1, a2));
        }

        JArray< jbyte > CompressionTools::compress(const JArray< jbyte > & a0, jint a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_compress_dad27ce1], a0.this$, a1, a2, a3));
        }

        JArray< jbyte > CompressionTools::compressString(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_compressString_94a731a4], a0.this$));
        }

        JArray< jbyte > CompressionTools::compressString(const ::java::lang::String & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_compressString_7bb29782], a0.this$, a1));
        }

        JArray< jbyte > CompressionTools::decompress(const JArray< jbyte > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_decompress_1193226d], a0.this$));
        }

        JArray< jbyte > CompressionTools::decompress(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_decompress_942a4f60], a0.this$));
        }

        JArray< jbyte > CompressionTools::decompress(const JArray< jbyte > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_decompress_3d448975], a0.this$, a1, a2));
        }

        ::java::lang::String CompressionTools::decompressString(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_decompressString_edfda73b], a0.this$));
        }

        ::java::lang::String CompressionTools::decompressString(const JArray< jbyte > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_decompressString_0f6e0f86], a0.this$));
        }

        ::java::lang::String CompressionTools::decompressString(const JArray< jbyte > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_decompressString_f7ab0d9e], a0.this$, a1, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_CompressionTools_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompressionTools_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompressionTools_compress(PyTypeObject *type, PyObject *args);
        static PyObject *t_CompressionTools_compressString(PyTypeObject *type, PyObject *args);
        static PyObject *t_CompressionTools_decompress(PyTypeObject *type, PyObject *args);
        static PyObject *t_CompressionTools_decompressString(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_CompressionTools__methods_[] = {
          DECLARE_METHOD(t_CompressionTools, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompressionTools, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompressionTools, compress, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CompressionTools, compressString, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CompressionTools, decompress, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CompressionTools, decompressString, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CompressionTools, t_CompressionTools, ::java::lang::Object, CompressionTools, abstract_init, 0, 0, 0, 0, 0);

        void t_CompressionTools::install(PyObject *module)
        {
          installType(&PY_TYPE(CompressionTools), module, "CompressionTools", 0);
        }

        void t_CompressionTools::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CompressionTools).tp_dict, "class_", make_descriptor(CompressionTools::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CompressionTools).tp_dict, "wrapfn_", make_descriptor(t_CompressionTools::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CompressionTools).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CompressionTools_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CompressionTools::initializeClass, 1)))
            return NULL;
          return t_CompressionTools::wrap_Object(CompressionTools(((t_CompressionTools *) arg)->object.this$));
        }
        static PyObject *t_CompressionTools_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CompressionTools::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CompressionTools_compress(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::compress(a0));
                return result.wrap();
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::compress(a0, a1, a2));
                return result.wrap();
              }
            }
            break;
           case 4:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[BIII", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::compress(a0, a1, a2, a3));
                return result.wrap();
              }
            }
          }

          PyErr_SetArgsError(type, "compress", args);
          return NULL;
        }

        static PyObject *t_CompressionTools_compressString(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::compressString(a0));
                return result.wrap();
              }
            }
            break;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "sI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::compressString(a0, a1));
                return result.wrap();
              }
            }
          }

          PyErr_SetArgsError(type, "compressString", args);
          return NULL;
        }

        static PyObject *t_CompressionTools_decompress(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::decompress(a0));
                return result.wrap();
              }
            }
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::decompress(a0));
                return result.wrap();
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::decompress(a0, a1, a2));
                return result.wrap();
              }
            }
          }

          PyErr_SetArgsError(type, "decompress", args);
          return NULL;
        }

        static PyObject *t_CompressionTools_decompressString(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::decompressString(a0));
                return j2p(result);
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::decompressString(a0));
                return j2p(result);
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::decompressString(a0, a1, a2));
                return j2p(result);
              }
            }
          }

          PyErr_SetArgsError(type, "decompressString", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tr/TurkishAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {

          ::java::lang::Class *TurkishAnalyzer::class$ = NULL;
          jmethodID *TurkishAnalyzer::mids$ = NULL;
          bool TurkishAnalyzer::live$ = false;
          ::java::lang::String *TurkishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass TurkishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tr/TurkishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_3ea629c6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TurkishAnalyzer::TurkishAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          TurkishAnalyzer::TurkishAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          TurkishAnalyzer::TurkishAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          TurkishAnalyzer::TurkishAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_3ea629c6, a0.this$, a1.this$)) {}

          TurkishAnalyzer::TurkishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          TurkishAnalyzer::TurkishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet TurkishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {
          static PyObject *t_TurkishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TurkishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TurkishAnalyzer_init_(t_TurkishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TurkishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_TurkishAnalyzer_get__defaultStopSet(t_TurkishAnalyzer *self, void *data);
          static PyGetSetDef t_TurkishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_TurkishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TurkishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_TurkishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TurkishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TurkishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TurkishAnalyzer, t_TurkishAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, TurkishAnalyzer, t_TurkishAnalyzer_init_, 0, 0, t_TurkishAnalyzer__fields_, 0, 0);

          void t_TurkishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(TurkishAnalyzer), module, "TurkishAnalyzer", 0);
          }

          void t_TurkishAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TurkishAnalyzer).tp_dict, "class_", make_descriptor(TurkishAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TurkishAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_TurkishAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TurkishAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(TurkishAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(TurkishAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*TurkishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_TurkishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TurkishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_TurkishAnalyzer::wrap_Object(TurkishAnalyzer(((t_TurkishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_TurkishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TurkishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TurkishAnalyzer_init_(t_TurkishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                TurkishAnalyzer object((jobject) NULL);

                INT_CALL(object = TurkishAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                TurkishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = TurkishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                TurkishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = TurkishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                TurkishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = TurkishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                TurkishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = TurkishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                TurkishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = TurkishAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TurkishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::tr::TurkishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_TurkishAnalyzer_get__defaultStopSet(t_TurkishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/index/PythonIndexDeletionPolicy.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace index {

        ::java::lang::Class *PythonIndexDeletionPolicy::class$ = NULL;
        jmethodID *PythonIndexDeletionPolicy::mids$ = NULL;
        bool PythonIndexDeletionPolicy::live$ = false;

        jclass PythonIndexDeletionPolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/index/PythonIndexDeletionPolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_onCommit_1fde8fc3] = env->getMethodID(cls, "onCommit", "(Ljava/util/List;)V");
            mids$[mid_onInit_1fde8fc3] = env->getMethodID(cls, "onInit", "(Ljava/util/List;)V");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonIndexDeletionPolicy::PythonIndexDeletionPolicy() : ::org::apache::lucene::index::IndexDeletionPolicy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonIndexDeletionPolicy::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonIndexDeletionPolicy::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonIndexDeletionPolicy::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace index {
        static PyObject *t_PythonIndexDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonIndexDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonIndexDeletionPolicy_init_(t_PythonIndexDeletionPolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonIndexDeletionPolicy_finalize(t_PythonIndexDeletionPolicy *self);
        static PyObject *t_PythonIndexDeletionPolicy_pythonExtension(t_PythonIndexDeletionPolicy *self, PyObject *args);
        static void JNICALL t_PythonIndexDeletionPolicy_onCommit0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonIndexDeletionPolicy_onInit1(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonIndexDeletionPolicy_pythonDecRef2(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonIndexDeletionPolicy_get__self(t_PythonIndexDeletionPolicy *self, void *data);
        static PyGetSetDef t_PythonIndexDeletionPolicy__fields_[] = {
          DECLARE_GET_FIELD(t_PythonIndexDeletionPolicy, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonIndexDeletionPolicy__methods_[] = {
          DECLARE_METHOD(t_PythonIndexDeletionPolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIndexDeletionPolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIndexDeletionPolicy, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonIndexDeletionPolicy, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonIndexDeletionPolicy, t_PythonIndexDeletionPolicy, ::org::apache::lucene::index::IndexDeletionPolicy, PythonIndexDeletionPolicy, t_PythonIndexDeletionPolicy_init_, 0, 0, t_PythonIndexDeletionPolicy__fields_, 0, 0);

        void t_PythonIndexDeletionPolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonIndexDeletionPolicy), module, "PythonIndexDeletionPolicy", 1);
        }

        void t_PythonIndexDeletionPolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonIndexDeletionPolicy).tp_dict, "class_", make_descriptor(PythonIndexDeletionPolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonIndexDeletionPolicy).tp_dict, "wrapfn_", make_descriptor(t_PythonIndexDeletionPolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonIndexDeletionPolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonIndexDeletionPolicy::initializeClass);
          JNINativeMethod methods[] = {
            { "onCommit", "(Ljava/util/List;)V", (void *) t_PythonIndexDeletionPolicy_onCommit0 },
            { "onInit", "(Ljava/util/List;)V", (void *) t_PythonIndexDeletionPolicy_onInit1 },
            { "pythonDecRef", "()V", (void *) t_PythonIndexDeletionPolicy_pythonDecRef2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonIndexDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonIndexDeletionPolicy::initializeClass, 1)))
            return NULL;
          return t_PythonIndexDeletionPolicy::wrap_Object(PythonIndexDeletionPolicy(((t_PythonIndexDeletionPolicy *) arg)->object.this$));
        }
        static PyObject *t_PythonIndexDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonIndexDeletionPolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonIndexDeletionPolicy_init_(t_PythonIndexDeletionPolicy *self, PyObject *args, PyObject *kwds)
        {
          PythonIndexDeletionPolicy object((jobject) NULL);

          INT_CALL(object = PythonIndexDeletionPolicy());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonIndexDeletionPolicy_finalize(t_PythonIndexDeletionPolicy *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonIndexDeletionPolicy_pythonExtension(t_PythonIndexDeletionPolicy *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static void JNICALL t_PythonIndexDeletionPolicy_onCommit0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexDeletionPolicy::mids$[PythonIndexDeletionPolicy::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = ::java::util::t_List::wrap_Object(::java::util::List(a0));
          PyObject *result = PyObject_CallMethod(obj, "onCommit", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonIndexDeletionPolicy_onInit1(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexDeletionPolicy::mids$[PythonIndexDeletionPolicy::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = ::java::util::t_List::wrap_Object(::java::util::List(a0));
          PyObject *result = PyObject_CallMethod(obj, "onInit", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonIndexDeletionPolicy_pythonDecRef2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexDeletionPolicy::mids$[PythonIndexDeletionPolicy::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonIndexDeletionPolicy::mids$[PythonIndexDeletionPolicy::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonIndexDeletionPolicy_get__self(t_PythonIndexDeletionPolicy *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/AllowLeadingWildcardProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *AllowLeadingWildcardProcessor::class$ = NULL;
              jmethodID *AllowLeadingWildcardProcessor::mids$ = NULL;
              bool AllowLeadingWildcardProcessor::live$ = false;

              jclass AllowLeadingWildcardProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/AllowLeadingWildcardProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              AllowLeadingWildcardProcessor::AllowLeadingWildcardProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode AllowLeadingWildcardProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_AllowLeadingWildcardProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AllowLeadingWildcardProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_AllowLeadingWildcardProcessor_init_(t_AllowLeadingWildcardProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_AllowLeadingWildcardProcessor_process(t_AllowLeadingWildcardProcessor *self, PyObject *args);

              static PyMethodDef t_AllowLeadingWildcardProcessor__methods_[] = {
                DECLARE_METHOD(t_AllowLeadingWildcardProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AllowLeadingWildcardProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AllowLeadingWildcardProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(AllowLeadingWildcardProcessor, t_AllowLeadingWildcardProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, AllowLeadingWildcardProcessor, t_AllowLeadingWildcardProcessor_init_, 0, 0, 0, 0, 0);

              void t_AllowLeadingWildcardProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(AllowLeadingWildcardProcessor), module, "AllowLeadingWildcardProcessor", 0);
              }

              void t_AllowLeadingWildcardProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(AllowLeadingWildcardProcessor).tp_dict, "class_", make_descriptor(AllowLeadingWildcardProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(AllowLeadingWildcardProcessor).tp_dict, "wrapfn_", make_descriptor(t_AllowLeadingWildcardProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(AllowLeadingWildcardProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AllowLeadingWildcardProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AllowLeadingWildcardProcessor::initializeClass, 1)))
                  return NULL;
                return t_AllowLeadingWildcardProcessor::wrap_Object(AllowLeadingWildcardProcessor(((t_AllowLeadingWildcardProcessor *) arg)->object.this$));
              }
              static PyObject *t_AllowLeadingWildcardProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AllowLeadingWildcardProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_AllowLeadingWildcardProcessor_init_(t_AllowLeadingWildcardProcessor *self, PyObject *args, PyObject *kwds)
              {
                AllowLeadingWildcardProcessor object((jobject) NULL);

                INT_CALL(object = AllowLeadingWildcardProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_AllowLeadingWildcardProcessor_process(t_AllowLeadingWildcardProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(AllowLeadingWildcardProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanNearPayloadCheckQuery.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/spans/SpanNearQuery.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanNearPayloadCheckQuery::class$ = NULL;
          jmethodID *SpanNearPayloadCheckQuery::mids$ = NULL;
          bool SpanNearPayloadCheckQuery::live$ = false;

          jclass SpanNearPayloadCheckQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanNearPayloadCheckQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cc218b3a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanNearQuery;Ljava/util/Collection;)V");
              mids$[mid_clone_efae1086] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/spans/SpanNearPayloadCheckQuery;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_acceptPosition_5342f73f] = env->getMethodID(cls, "acceptPosition", "(Lorg/apache/lucene/search/spans/Spans;)Lorg/apache/lucene/search/spans/SpanPositionCheckQuery$AcceptStatus;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanNearPayloadCheckQuery::SpanNearPayloadCheckQuery(const ::org::apache::lucene::search::spans::SpanNearQuery & a0, const ::java::util::Collection & a1) : ::org::apache::lucene::search::spans::SpanPositionCheckQuery(env->newObject(initializeClass, &mids$, mid_init$_cc218b3a, a0.this$, a1.this$)) {}

          SpanNearPayloadCheckQuery SpanNearPayloadCheckQuery::clone() const
          {
            return SpanNearPayloadCheckQuery(env->callObjectMethod(this$, mids$[mid_clone_efae1086]));
          }

          jboolean SpanNearPayloadCheckQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint SpanNearPayloadCheckQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String SpanNearPayloadCheckQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanNearPayloadCheckQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanNearPayloadCheckQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanNearPayloadCheckQuery_init_(t_SpanNearPayloadCheckQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanNearPayloadCheckQuery_clone(t_SpanNearPayloadCheckQuery *self, PyObject *args);
          static PyObject *t_SpanNearPayloadCheckQuery_equals(t_SpanNearPayloadCheckQuery *self, PyObject *args);
          static PyObject *t_SpanNearPayloadCheckQuery_hashCode(t_SpanNearPayloadCheckQuery *self, PyObject *args);
          static PyObject *t_SpanNearPayloadCheckQuery_toString(t_SpanNearPayloadCheckQuery *self, PyObject *args);

          static PyMethodDef t_SpanNearPayloadCheckQuery__methods_[] = {
            DECLARE_METHOD(t_SpanNearPayloadCheckQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNearPayloadCheckQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNearPayloadCheckQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearPayloadCheckQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearPayloadCheckQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearPayloadCheckQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanNearPayloadCheckQuery, t_SpanNearPayloadCheckQuery, ::org::apache::lucene::search::spans::SpanPositionCheckQuery, SpanNearPayloadCheckQuery, t_SpanNearPayloadCheckQuery_init_, 0, 0, 0, 0, 0);

          void t_SpanNearPayloadCheckQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanNearPayloadCheckQuery), module, "SpanNearPayloadCheckQuery", 0);
          }

          void t_SpanNearPayloadCheckQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanNearPayloadCheckQuery).tp_dict, "class_", make_descriptor(SpanNearPayloadCheckQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanNearPayloadCheckQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanNearPayloadCheckQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanNearPayloadCheckQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanNearPayloadCheckQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanNearPayloadCheckQuery::initializeClass, 1)))
              return NULL;
            return t_SpanNearPayloadCheckQuery::wrap_Object(SpanNearPayloadCheckQuery(((t_SpanNearPayloadCheckQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanNearPayloadCheckQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanNearPayloadCheckQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanNearPayloadCheckQuery_init_(t_SpanNearPayloadCheckQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanNearQuery a0((jobject) NULL);
            ::java::util::Collection a1((jobject) NULL);
            PyTypeObject **p1;
            SpanNearPayloadCheckQuery object((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::search::spans::SpanNearQuery::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
            {
              INT_CALL(object = SpanNearPayloadCheckQuery(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanNearPayloadCheckQuery_clone(t_SpanNearPayloadCheckQuery *self, PyObject *args)
          {
            SpanNearPayloadCheckQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_SpanNearPayloadCheckQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanNearPayloadCheckQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_SpanNearPayloadCheckQuery_equals(t_SpanNearPayloadCheckQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanNearPayloadCheckQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanNearPayloadCheckQuery_hashCode(t_SpanNearPayloadCheckQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanNearPayloadCheckQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanNearPayloadCheckQuery_toString(t_SpanNearPayloadCheckQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanNearPayloadCheckQuery), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/term/TermDistinctValuesCollector.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "org/apache/lucene/search/grouping/term/TermDistinctValuesCollector$GroupCount.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/util/List.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {

            ::java::lang::Class *TermDistinctValuesCollector::class$ = NULL;
            jmethodID *TermDistinctValuesCollector::mids$ = NULL;
            bool TermDistinctValuesCollector::live$ = false;

            jclass TermDistinctValuesCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/term/TermDistinctValuesCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_e9bd6d29] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/util/Collection;)V");
                mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
                mids$[mid_getGroups_87851566] = env->getMethodID(cls, "getGroups", "()Ljava/util/List;");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermDistinctValuesCollector::TermDistinctValuesCollector(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::util::Collection & a2) : ::org::apache::lucene::search::grouping::AbstractDistinctValuesCollector(env->newObject(initializeClass, &mids$, mid_init$_e9bd6d29, a0.this$, a1.this$, a2.this$)) {}

            void TermDistinctValuesCollector::collect(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
            }

            ::java::util::List TermDistinctValuesCollector::getGroups() const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getGroups_87851566]));
            }

            void TermDistinctValuesCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {
            static PyObject *t_TermDistinctValuesCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermDistinctValuesCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermDistinctValuesCollector_of_(t_TermDistinctValuesCollector *self, PyObject *args);
            static int t_TermDistinctValuesCollector_init_(t_TermDistinctValuesCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TermDistinctValuesCollector_collect(t_TermDistinctValuesCollector *self, PyObject *args);
            static PyObject *t_TermDistinctValuesCollector_getGroups(t_TermDistinctValuesCollector *self, PyObject *args);
            static PyObject *t_TermDistinctValuesCollector_setNextReader(t_TermDistinctValuesCollector *self, PyObject *args);
            static PyObject *t_TermDistinctValuesCollector_get__groups(t_TermDistinctValuesCollector *self, void *data);
            static int t_TermDistinctValuesCollector_set__nextReader(t_TermDistinctValuesCollector *self, PyObject *arg, void *data);
            static PyObject *t_TermDistinctValuesCollector_get__parameters_(t_TermDistinctValuesCollector *self, void *data);
            static PyGetSetDef t_TermDistinctValuesCollector__fields_[] = {
              DECLARE_GET_FIELD(t_TermDistinctValuesCollector, groups),
              DECLARE_SET_FIELD(t_TermDistinctValuesCollector, nextReader),
              DECLARE_GET_FIELD(t_TermDistinctValuesCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TermDistinctValuesCollector__methods_[] = {
              DECLARE_METHOD(t_TermDistinctValuesCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermDistinctValuesCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermDistinctValuesCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_TermDistinctValuesCollector, collect, METH_VARARGS),
              DECLARE_METHOD(t_TermDistinctValuesCollector, getGroups, METH_VARARGS),
              DECLARE_METHOD(t_TermDistinctValuesCollector, setNextReader, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermDistinctValuesCollector, t_TermDistinctValuesCollector, ::org::apache::lucene::search::grouping::AbstractDistinctValuesCollector, TermDistinctValuesCollector, t_TermDistinctValuesCollector_init_, 0, 0, t_TermDistinctValuesCollector__fields_, 0, 0);
            PyObject *t_TermDistinctValuesCollector::wrap_Object(const TermDistinctValuesCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermDistinctValuesCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermDistinctValuesCollector *self = (t_TermDistinctValuesCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_TermDistinctValuesCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermDistinctValuesCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermDistinctValuesCollector *self = (t_TermDistinctValuesCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_TermDistinctValuesCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(TermDistinctValuesCollector), module, "TermDistinctValuesCollector", 0);
              PyDict_SetItemString(PY_TYPE(TermDistinctValuesCollector).tp_dict, "GroupCount", make_descriptor(&PY_TYPE(TermDistinctValuesCollector$GroupCount)));
            }

            void t_TermDistinctValuesCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermDistinctValuesCollector).tp_dict, "class_", make_descriptor(TermDistinctValuesCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermDistinctValuesCollector).tp_dict, "wrapfn_", make_descriptor(t_TermDistinctValuesCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermDistinctValuesCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermDistinctValuesCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermDistinctValuesCollector::initializeClass, 1)))
                return NULL;
              return t_TermDistinctValuesCollector::wrap_Object(TermDistinctValuesCollector(((t_TermDistinctValuesCollector *) arg)->object.this$));
            }
            static PyObject *t_TermDistinctValuesCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermDistinctValuesCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TermDistinctValuesCollector_of_(t_TermDistinctValuesCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_TermDistinctValuesCollector_init_(t_TermDistinctValuesCollector *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::util::Collection a2((jobject) NULL);
              PyTypeObject **p2;
              TermDistinctValuesCollector object((jobject) NULL);

              if (!parseArgs(args, "ssK", ::java::util::Collection::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Collection::parameters_))
              {
                INT_CALL(object = TermDistinctValuesCollector(a0, a1, a2));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::search::grouping::term::PY_TYPE(TermDistinctValuesCollector$GroupCount);
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TermDistinctValuesCollector_collect(t_TermDistinctValuesCollector *self, PyObject *args)
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.collect(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(TermDistinctValuesCollector), (PyObject *) self, "collect", args, 2);
            }

            static PyObject *t_TermDistinctValuesCollector_getGroups(t_TermDistinctValuesCollector *self, PyObject *args)
            {
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getGroups());
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::grouping::term::PY_TYPE(TermDistinctValuesCollector$GroupCount));
              }

              return callSuper(&PY_TYPE(TermDistinctValuesCollector), (PyObject *) self, "getGroups", args, 2);
            }

            static PyObject *t_TermDistinctValuesCollector_setNextReader(t_TermDistinctValuesCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(TermDistinctValuesCollector), (PyObject *) self, "setNextReader", args, 2);
            }
            static PyObject *t_TermDistinctValuesCollector_get__parameters_(t_TermDistinctValuesCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static PyObject *t_TermDistinctValuesCollector_get__groups(t_TermDistinctValuesCollector *self, void *data)
            {
              ::java::util::List value((jobject) NULL);
              OBJ_CALL(value = self->object.getGroups());
              return ::java::util::t_List::wrap_Object(value);
            }

            static int t_TermDistinctValuesCollector_set__nextReader(t_TermDistinctValuesCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/KeepOnlyLastCommitDeletionPolicy.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *KeepOnlyLastCommitDeletionPolicy::class$ = NULL;
        jmethodID *KeepOnlyLastCommitDeletionPolicy::mids$ = NULL;
        bool KeepOnlyLastCommitDeletionPolicy::live$ = false;

        jclass KeepOnlyLastCommitDeletionPolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/KeepOnlyLastCommitDeletionPolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_onCommit_1fde8fc3] = env->getMethodID(cls, "onCommit", "(Ljava/util/List;)V");
            mids$[mid_onInit_1fde8fc3] = env->getMethodID(cls, "onInit", "(Ljava/util/List;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        KeepOnlyLastCommitDeletionPolicy::KeepOnlyLastCommitDeletionPolicy() : ::org::apache::lucene::index::IndexDeletionPolicy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void KeepOnlyLastCommitDeletionPolicy::onCommit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onCommit_1fde8fc3], a0.this$);
        }

        void KeepOnlyLastCommitDeletionPolicy::onInit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onInit_1fde8fc3], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_KeepOnlyLastCommitDeletionPolicy_init_(t_KeepOnlyLastCommitDeletionPolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_onCommit(t_KeepOnlyLastCommitDeletionPolicy *self, PyObject *args);
        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_onInit(t_KeepOnlyLastCommitDeletionPolicy *self, PyObject *args);

        static PyMethodDef t_KeepOnlyLastCommitDeletionPolicy__methods_[] = {
          DECLARE_METHOD(t_KeepOnlyLastCommitDeletionPolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_KeepOnlyLastCommitDeletionPolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_KeepOnlyLastCommitDeletionPolicy, onCommit, METH_VARARGS),
          DECLARE_METHOD(t_KeepOnlyLastCommitDeletionPolicy, onInit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(KeepOnlyLastCommitDeletionPolicy, t_KeepOnlyLastCommitDeletionPolicy, ::org::apache::lucene::index::IndexDeletionPolicy, KeepOnlyLastCommitDeletionPolicy, t_KeepOnlyLastCommitDeletionPolicy_init_, 0, 0, 0, 0, 0);

        void t_KeepOnlyLastCommitDeletionPolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(KeepOnlyLastCommitDeletionPolicy), module, "KeepOnlyLastCommitDeletionPolicy", 0);
        }

        void t_KeepOnlyLastCommitDeletionPolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(KeepOnlyLastCommitDeletionPolicy).tp_dict, "class_", make_descriptor(KeepOnlyLastCommitDeletionPolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(KeepOnlyLastCommitDeletionPolicy).tp_dict, "wrapfn_", make_descriptor(t_KeepOnlyLastCommitDeletionPolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(KeepOnlyLastCommitDeletionPolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, KeepOnlyLastCommitDeletionPolicy::initializeClass, 1)))
            return NULL;
          return t_KeepOnlyLastCommitDeletionPolicy::wrap_Object(KeepOnlyLastCommitDeletionPolicy(((t_KeepOnlyLastCommitDeletionPolicy *) arg)->object.this$));
        }
        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, KeepOnlyLastCommitDeletionPolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_KeepOnlyLastCommitDeletionPolicy_init_(t_KeepOnlyLastCommitDeletionPolicy *self, PyObject *args, PyObject *kwds)
        {
          KeepOnlyLastCommitDeletionPolicy object((jobject) NULL);

          INT_CALL(object = KeepOnlyLastCommitDeletionPolicy());
          self->object = object;

          return 0;
        }

        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_onCommit(t_KeepOnlyLastCommitDeletionPolicy *self, PyObject *args)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onCommit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(KeepOnlyLastCommitDeletionPolicy), (PyObject *) self, "onCommit", args, 2);
        }

        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_onInit(t_KeepOnlyLastCommitDeletionPolicy *self, PyObject *args)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onInit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(KeepOnlyLastCommitDeletionPolicy), (PyObject *) self, "onInit", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/FrenchStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *FrenchStemmer::class$ = NULL;
        jmethodID *FrenchStemmer::mids$ = NULL;
        bool FrenchStemmer::live$ = false;

        jclass FrenchStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/FrenchStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FrenchStemmer::FrenchStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean FrenchStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint FrenchStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean FrenchStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_FrenchStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FrenchStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FrenchStemmer_init_(t_FrenchStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FrenchStemmer_equals(t_FrenchStemmer *self, PyObject *args);
        static PyObject *t_FrenchStemmer_hashCode(t_FrenchStemmer *self, PyObject *args);
        static PyObject *t_FrenchStemmer_stem(t_FrenchStemmer *self, PyObject *args);

        static PyMethodDef t_FrenchStemmer__methods_[] = {
          DECLARE_METHOD(t_FrenchStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FrenchStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FrenchStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_FrenchStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FrenchStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FrenchStemmer, t_FrenchStemmer, ::org::tartarus::snowball::SnowballProgram, FrenchStemmer, t_FrenchStemmer_init_, 0, 0, 0, 0, 0);

        void t_FrenchStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(FrenchStemmer), module, "FrenchStemmer", 0);
        }

        void t_FrenchStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FrenchStemmer).tp_dict, "class_", make_descriptor(FrenchStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FrenchStemmer).tp_dict, "wrapfn_", make_descriptor(t_FrenchStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FrenchStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FrenchStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FrenchStemmer::initializeClass, 1)))
            return NULL;
          return t_FrenchStemmer::wrap_Object(FrenchStemmer(((t_FrenchStemmer *) arg)->object.this$));
        }
        static PyObject *t_FrenchStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FrenchStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FrenchStemmer_init_(t_FrenchStemmer *self, PyObject *args, PyObject *kwds)
        {
          FrenchStemmer object((jobject) NULL);

          INT_CALL(object = FrenchStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_FrenchStemmer_equals(t_FrenchStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FrenchStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FrenchStemmer_hashCode(t_FrenchStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FrenchStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FrenchStemmer_stem(t_FrenchStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FrenchStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/DutchStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *DutchStemmer::class$ = NULL;
        jmethodID *DutchStemmer::mids$ = NULL;
        bool DutchStemmer::live$ = false;

        jclass DutchStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/DutchStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DutchStemmer::DutchStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean DutchStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint DutchStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean DutchStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_DutchStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DutchStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DutchStemmer_init_(t_DutchStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DutchStemmer_equals(t_DutchStemmer *self, PyObject *args);
        static PyObject *t_DutchStemmer_hashCode(t_DutchStemmer *self, PyObject *args);
        static PyObject *t_DutchStemmer_stem(t_DutchStemmer *self, PyObject *args);

        static PyMethodDef t_DutchStemmer__methods_[] = {
          DECLARE_METHOD(t_DutchStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DutchStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DutchStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_DutchStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_DutchStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DutchStemmer, t_DutchStemmer, ::org::tartarus::snowball::SnowballProgram, DutchStemmer, t_DutchStemmer_init_, 0, 0, 0, 0, 0);

        void t_DutchStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(DutchStemmer), module, "DutchStemmer", 0);
        }

        void t_DutchStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DutchStemmer).tp_dict, "class_", make_descriptor(DutchStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DutchStemmer).tp_dict, "wrapfn_", make_descriptor(t_DutchStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DutchStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DutchStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DutchStemmer::initializeClass, 1)))
            return NULL;
          return t_DutchStemmer::wrap_Object(DutchStemmer(((t_DutchStemmer *) arg)->object.this$));
        }
        static PyObject *t_DutchStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DutchStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DutchStemmer_init_(t_DutchStemmer *self, PyObject *args, PyObject *kwds)
        {
          DutchStemmer object((jobject) NULL);

          INT_CALL(object = DutchStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_DutchStemmer_equals(t_DutchStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DutchStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_DutchStemmer_hashCode(t_DutchStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(DutchStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_DutchStemmer_stem(t_DutchStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DutchStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexFormatTooNewException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexFormatTooNewException::class$ = NULL;
        jmethodID *IndexFormatTooNewException::mids$ = NULL;
        bool IndexFormatTooNewException::live$ = false;

        jclass IndexFormatTooNewException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexFormatTooNewException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_b8e753a2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;III)V");
            mids$[mid_init$_9c112331] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;III)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexFormatTooNewException::IndexFormatTooNewException(const ::java::lang::String & a0, jint a1, jint a2, jint a3) : ::org::apache::lucene::index::CorruptIndexException(env->newObject(initializeClass, &mids$, mid_init$_b8e753a2, a0.this$, a1, a2, a3)) {}

        IndexFormatTooNewException::IndexFormatTooNewException(const ::org::apache::lucene::store::DataInput & a0, jint a1, jint a2, jint a3) : ::org::apache::lucene::index::CorruptIndexException(env->newObject(initializeClass, &mids$, mid_init$_9c112331, a0.this$, a1, a2, a3)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexFormatTooNewException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFormatTooNewException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexFormatTooNewException_init_(t_IndexFormatTooNewException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_IndexFormatTooNewException__methods_[] = {
          DECLARE_METHOD(t_IndexFormatTooNewException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFormatTooNewException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexFormatTooNewException, t_IndexFormatTooNewException, ::org::apache::lucene::index::CorruptIndexException, IndexFormatTooNewException, t_IndexFormatTooNewException_init_, 0, 0, 0, 0, 0);

        void t_IndexFormatTooNewException::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexFormatTooNewException), module, "IndexFormatTooNewException", 0);
        }

        void t_IndexFormatTooNewException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexFormatTooNewException).tp_dict, "class_", make_descriptor(IndexFormatTooNewException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexFormatTooNewException).tp_dict, "wrapfn_", make_descriptor(t_IndexFormatTooNewException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexFormatTooNewException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexFormatTooNewException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexFormatTooNewException::initializeClass, 1)))
            return NULL;
          return t_IndexFormatTooNewException::wrap_Object(IndexFormatTooNewException(((t_IndexFormatTooNewException *) arg)->object.this$));
        }
        static PyObject *t_IndexFormatTooNewException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexFormatTooNewException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexFormatTooNewException_init_(t_IndexFormatTooNewException *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 4:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              IndexFormatTooNewException object((jobject) NULL);

              if (!parseArgs(args, "sIII", &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = IndexFormatTooNewException(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              IndexFormatTooNewException object((jobject) NULL);

              if (!parseArgs(args, "kIII", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = IndexFormatTooNewException(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/TermFreqValueSource.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *TermFreqValueSource::class$ = NULL;
            jmethodID *TermFreqValueSource::mids$ = NULL;
            bool TermFreqValueSource::live$ = false;

            jclass TermFreqValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/TermFreqValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b45b6622] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermFreqValueSource::TermFreqValueSource(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3) : ::org::apache::lucene::queries::function::valuesource::DocFreqValueSource(env->newObject(initializeClass, &mids$, mid_init$_b45b6622, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues TermFreqValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            ::java::lang::String TermFreqValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_TermFreqValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermFreqValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TermFreqValueSource_init_(t_TermFreqValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TermFreqValueSource_getValues(t_TermFreqValueSource *self, PyObject *args);
            static PyObject *t_TermFreqValueSource_name(t_TermFreqValueSource *self, PyObject *args);

            static PyMethodDef t_TermFreqValueSource__methods_[] = {
              DECLARE_METHOD(t_TermFreqValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermFreqValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermFreqValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_TermFreqValueSource, name, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermFreqValueSource, t_TermFreqValueSource, ::org::apache::lucene::queries::function::valuesource::DocFreqValueSource, TermFreqValueSource, t_TermFreqValueSource_init_, 0, 0, 0, 0, 0);

            void t_TermFreqValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(TermFreqValueSource), module, "TermFreqValueSource", 0);
            }

            void t_TermFreqValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermFreqValueSource).tp_dict, "class_", make_descriptor(TermFreqValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermFreqValueSource).tp_dict, "wrapfn_", make_descriptor(t_TermFreqValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermFreqValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermFreqValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermFreqValueSource::initializeClass, 1)))
                return NULL;
              return t_TermFreqValueSource::wrap_Object(TermFreqValueSource(((t_TermFreqValueSource *) arg)->object.this$));
            }
            static PyObject *t_TermFreqValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermFreqValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TermFreqValueSource_init_(t_TermFreqValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              TermFreqValueSource object((jobject) NULL);

              if (!parseArgs(args, "sssk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = TermFreqValueSource(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TermFreqValueSource_getValues(t_TermFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(TermFreqValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_TermFreqValueSource_name(t_TermFreqValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.name());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(TermFreqValueSource), (PyObject *) self, "name", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/io/Closeable.h"
#include "java/lang/Iterable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "java/lang/Number.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *DocValuesConsumer::class$ = NULL;
        jmethodID *DocValuesConsumer::mids$ = NULL;
        bool DocValuesConsumer::live$ = false;

        jclass DocValuesConsumer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/DocValuesConsumer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_addBinaryField_1dd3fb83] = env->getMethodID(cls, "addBinaryField", "(Lorg/apache/lucene/index/FieldInfo;Ljava/lang/Iterable;)V");
            mids$[mid_addNumericField_1dd3fb83] = env->getMethodID(cls, "addNumericField", "(Lorg/apache/lucene/index/FieldInfo;Ljava/lang/Iterable;)V");
            mids$[mid_addSortedField_4e727c10] = env->getMethodID(cls, "addSortedField", "(Lorg/apache/lucene/index/FieldInfo;Ljava/lang/Iterable;Ljava/lang/Iterable;)V");
            mids$[mid_addSortedNumericField_4e727c10] = env->getMethodID(cls, "addSortedNumericField", "(Lorg/apache/lucene/index/FieldInfo;Ljava/lang/Iterable;Ljava/lang/Iterable;)V");
            mids$[mid_addSortedSetField_eef27e8b] = env->getMethodID(cls, "addSortedSetField", "(Lorg/apache/lucene/index/FieldInfo;Ljava/lang/Iterable;Ljava/lang/Iterable;Ljava/lang/Iterable;)V");
            mids$[mid_isSingleValued_d1cac209] = env->getStaticMethodID(cls, "isSingleValued", "(Ljava/lang/Iterable;)Z");
            mids$[mid_mergeBinaryField_1705fbe6] = env->getMethodID(cls, "mergeBinaryField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/MergeState;Ljava/util/List;Ljava/util/List;)V");
            mids$[mid_mergeNumericField_1705fbe6] = env->getMethodID(cls, "mergeNumericField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/MergeState;Ljava/util/List;Ljava/util/List;)V");
            mids$[mid_mergeSortedField_eba53503] = env->getMethodID(cls, "mergeSortedField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/MergeState;Ljava/util/List;)V");
            mids$[mid_mergeSortedNumericField_eba53503] = env->getMethodID(cls, "mergeSortedNumericField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/MergeState;Ljava/util/List;)V");
            mids$[mid_mergeSortedSetField_eba53503] = env->getMethodID(cls, "mergeSortedSetField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/MergeState;Ljava/util/List;)V");
            mids$[mid_singletonView_0e65223a] = env->getStaticMethodID(cls, "singletonView", "(Ljava/lang/Iterable;Ljava/lang/Iterable;Ljava/lang/Number;)Ljava/lang/Iterable;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void DocValuesConsumer::addBinaryField(const ::org::apache::lucene::index::FieldInfo & a0, const ::java::lang::Iterable & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_addBinaryField_1dd3fb83], a0.this$, a1.this$);
        }

        void DocValuesConsumer::addNumericField(const ::org::apache::lucene::index::FieldInfo & a0, const ::java::lang::Iterable & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_addNumericField_1dd3fb83], a0.this$, a1.this$);
        }

        void DocValuesConsumer::addSortedField(const ::org::apache::lucene::index::FieldInfo & a0, const ::java::lang::Iterable & a1, const ::java::lang::Iterable & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_addSortedField_4e727c10], a0.this$, a1.this$, a2.this$);
        }

        void DocValuesConsumer::addSortedNumericField(const ::org::apache::lucene::index::FieldInfo & a0, const ::java::lang::Iterable & a1, const ::java::lang::Iterable & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_addSortedNumericField_4e727c10], a0.this$, a1.this$, a2.this$);
        }

        void DocValuesConsumer::addSortedSetField(const ::org::apache::lucene::index::FieldInfo & a0, const ::java::lang::Iterable & a1, const ::java::lang::Iterable & a2, const ::java::lang::Iterable & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_addSortedSetField_eef27e8b], a0.this$, a1.this$, a2.this$, a3.this$);
        }

        jboolean DocValuesConsumer::isSingleValued(const ::java::lang::Iterable & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_isSingleValued_d1cac209], a0.this$);
        }

        void DocValuesConsumer::mergeBinaryField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::MergeState & a1, const ::java::util::List & a2, const ::java::util::List & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_mergeBinaryField_1705fbe6], a0.this$, a1.this$, a2.this$, a3.this$);
        }

        void DocValuesConsumer::mergeNumericField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::MergeState & a1, const ::java::util::List & a2, const ::java::util::List & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_mergeNumericField_1705fbe6], a0.this$, a1.this$, a2.this$, a3.this$);
        }

        void DocValuesConsumer::mergeSortedField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::MergeState & a1, const ::java::util::List & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_mergeSortedField_eba53503], a0.this$, a1.this$, a2.this$);
        }

        void DocValuesConsumer::mergeSortedNumericField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::MergeState & a1, const ::java::util::List & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_mergeSortedNumericField_eba53503], a0.this$, a1.this$, a2.this$);
        }

        void DocValuesConsumer::mergeSortedSetField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::MergeState & a1, const ::java::util::List & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_mergeSortedSetField_eba53503], a0.this$, a1.this$, a2.this$);
        }

        ::java::lang::Iterable DocValuesConsumer::singletonView(const ::java::lang::Iterable & a0, const ::java::lang::Iterable & a1, const ::java::lang::Number & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::Iterable(env->callStaticObjectMethod(cls, mids$[mid_singletonView_0e65223a], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_DocValuesConsumer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesConsumer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesConsumer_addBinaryField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_addNumericField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_addSortedField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_addSortedNumericField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_addSortedSetField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_isSingleValued(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesConsumer_mergeBinaryField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_mergeNumericField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_mergeSortedField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_mergeSortedNumericField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_mergeSortedSetField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_singletonView(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_DocValuesConsumer__methods_[] = {
          DECLARE_METHOD(t_DocValuesConsumer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesConsumer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesConsumer, addBinaryField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, addNumericField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, addSortedField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, addSortedNumericField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, addSortedSetField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, isSingleValued, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesConsumer, mergeBinaryField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, mergeNumericField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, mergeSortedField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, mergeSortedNumericField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, mergeSortedSetField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, singletonView, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocValuesConsumer, t_DocValuesConsumer, ::java::lang::Object, DocValuesConsumer, abstract_init, 0, 0, 0, 0, 0);

        void t_DocValuesConsumer::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValuesConsumer), module, "DocValuesConsumer", 0);
        }

        void t_DocValuesConsumer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocValuesConsumer).tp_dict, "class_", make_descriptor(DocValuesConsumer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocValuesConsumer).tp_dict, "wrapfn_", make_descriptor(t_DocValuesConsumer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocValuesConsumer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValuesConsumer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValuesConsumer::initializeClass, 1)))
            return NULL;
          return t_DocValuesConsumer::wrap_Object(DocValuesConsumer(((t_DocValuesConsumer *) arg)->object.this$));
        }
        static PyObject *t_DocValuesConsumer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValuesConsumer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocValuesConsumer_addBinaryField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::java::lang::Iterable a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "kK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(self->object.addBinaryField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addBinaryField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_addNumericField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::java::lang::Iterable a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "kK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(self->object.addNumericField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addNumericField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_addSortedField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::java::lang::Iterable a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::Iterable a2((jobject) NULL);
          PyTypeObject **p2;

          if (!parseArgs(args, "kKK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::java::lang::Iterable::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2, &p2, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(self->object.addSortedField(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addSortedField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_addSortedNumericField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::java::lang::Iterable a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::Iterable a2((jobject) NULL);
          PyTypeObject **p2;

          if (!parseArgs(args, "kKK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::java::lang::Iterable::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2, &p2, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(self->object.addSortedNumericField(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addSortedNumericField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_addSortedSetField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::java::lang::Iterable a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::Iterable a2((jobject) NULL);
          PyTypeObject **p2;
          ::java::lang::Iterable a3((jobject) NULL);
          PyTypeObject **p3;

          if (!parseArgs(args, "kKKK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::java::lang::Iterable::initializeClass, ::java::lang::Iterable::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2, &p2, ::java::lang::t_Iterable::parameters_, &a3, &p3, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(self->object.addSortedSetField(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addSortedSetField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_isSingleValued(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::Iterable a0((jobject) NULL);
          PyTypeObject **p0;
          jboolean result;

          if (!parseArg(arg, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::DocValuesConsumer::isSingleValued(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "isSingleValued", arg);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_mergeBinaryField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::MergeState a1((jobject) NULL);
          ::java::util::List a2((jobject) NULL);
          PyTypeObject **p2;
          ::java::util::List a3((jobject) NULL);
          PyTypeObject **p3;

          if (!parseArgs(args, "kkKK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::MergeState::initializeClass, ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_, &a3, &p3, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.mergeBinaryField(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "mergeBinaryField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_mergeNumericField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::MergeState a1((jobject) NULL);
          ::java::util::List a2((jobject) NULL);
          PyTypeObject **p2;
          ::java::util::List a3((jobject) NULL);
          PyTypeObject **p3;

          if (!parseArgs(args, "kkKK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::MergeState::initializeClass, ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_, &a3, &p3, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.mergeNumericField(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "mergeNumericField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_mergeSortedField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::MergeState a1((jobject) NULL);
          ::java::util::List a2((jobject) NULL);
          PyTypeObject **p2;

          if (!parseArgs(args, "kkK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::MergeState::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.mergeSortedField(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "mergeSortedField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_mergeSortedNumericField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::MergeState a1((jobject) NULL);
          ::java::util::List a2((jobject) NULL);
          PyTypeObject **p2;

          if (!parseArgs(args, "kkK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::MergeState::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.mergeSortedNumericField(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "mergeSortedNumericField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_mergeSortedSetField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::MergeState a1((jobject) NULL);
          ::java::util::List a2((jobject) NULL);
          PyTypeObject **p2;

          if (!parseArgs(args, "kkK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::MergeState::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.mergeSortedSetField(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "mergeSortedSetField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_singletonView(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::Iterable a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Iterable a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::Number a2((jobject) NULL);
          ::java::lang::Iterable result((jobject) NULL);

          if (!parseArgs(args, "KKO", ::java::lang::Iterable::initializeClass, ::java::lang::Iterable::initializeClass, &::java::lang::PY_TYPE(Number), &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::DocValuesConsumer::singletonView(a0, a1, a2));
            return ::java::lang::t_Iterable::wrap_Object(result, &::java::lang::PY_TYPE(Number));
          }

          PyErr_SetArgsError(type, "singletonView", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LimitTokenCountFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LimitTokenCountFilterFactory::class$ = NULL;
          jmethodID *LimitTokenCountFilterFactory::mids$ = NULL;
          bool LimitTokenCountFilterFactory::live$ = false;
          ::java::lang::String *LimitTokenCountFilterFactory::CONSUME_ALL_TOKENS_KEY = NULL;
          ::java::lang::String *LimitTokenCountFilterFactory::MAX_TOKEN_COUNT_KEY = NULL;

          jclass LimitTokenCountFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LimitTokenCountFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              CONSUME_ALL_TOKENS_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "CONSUME_ALL_TOKENS_KEY", "Ljava/lang/String;"));
              MAX_TOKEN_COUNT_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MAX_TOKEN_COUNT_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LimitTokenCountFilterFactory::LimitTokenCountFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream LimitTokenCountFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LimitTokenCountFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LimitTokenCountFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LimitTokenCountFilterFactory_init_(t_LimitTokenCountFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LimitTokenCountFilterFactory_create(t_LimitTokenCountFilterFactory *self, PyObject *args);

          static PyMethodDef t_LimitTokenCountFilterFactory__methods_[] = {
            DECLARE_METHOD(t_LimitTokenCountFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenCountFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenCountFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LimitTokenCountFilterFactory, t_LimitTokenCountFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, LimitTokenCountFilterFactory, t_LimitTokenCountFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_LimitTokenCountFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LimitTokenCountFilterFactory), module, "LimitTokenCountFilterFactory", 0);
          }

          void t_LimitTokenCountFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LimitTokenCountFilterFactory).tp_dict, "class_", make_descriptor(LimitTokenCountFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LimitTokenCountFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_LimitTokenCountFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LimitTokenCountFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(LimitTokenCountFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(LimitTokenCountFilterFactory).tp_dict, "CONSUME_ALL_TOKENS_KEY", make_descriptor(j2p(*LimitTokenCountFilterFactory::CONSUME_ALL_TOKENS_KEY)));
            PyDict_SetItemString(PY_TYPE(LimitTokenCountFilterFactory).tp_dict, "MAX_TOKEN_COUNT_KEY", make_descriptor(j2p(*LimitTokenCountFilterFactory::MAX_TOKEN_COUNT_KEY)));
          }

          static PyObject *t_LimitTokenCountFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LimitTokenCountFilterFactory::initializeClass, 1)))
              return NULL;
            return t_LimitTokenCountFilterFactory::wrap_Object(LimitTokenCountFilterFactory(((t_LimitTokenCountFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_LimitTokenCountFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LimitTokenCountFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LimitTokenCountFilterFactory_init_(t_LimitTokenCountFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LimitTokenCountFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LimitTokenCountFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LimitTokenCountFilterFactory_create(t_LimitTokenCountFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LimitTokenCountFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiTermsEnum.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/ReaderSlice.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiTermsEnum::class$ = NULL;
        jmethodID *MultiTermsEnum::mids$ = NULL;
        bool MultiTermsEnum::live$ = false;

        jclass MultiTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a8f03305] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/ReaderSlice;)V");
            mids$[mid_docFreq_54c6a179] = env->getMethodID(cls, "docFreq", "()I");
            mids$[mid_docs_e6d4c3ef] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_docsAndPositions_b5d9c11b] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_getMatchCount_54c6a179] = env->getMethodID(cls, "getMatchCount", "()I");
            mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_ord_54c6a17a] = env->getMethodID(cls, "ord", "()J");
            mids$[mid_seekCeil_fa9d72c4] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
            mids$[mid_seekExact_7bc03dc8] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_seekExact_0ee6df2f] = env->getMethodID(cls, "seekExact", "(J)V");
            mids$[mid_term_4ae19461] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_totalTermFreq_54c6a17a] = env->getMethodID(cls, "totalTermFreq", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTermsEnum::MultiTermsEnum(const JArray< ::org::apache::lucene::index::ReaderSlice > & a0) : ::org::apache::lucene::index::TermsEnum(env->newObject(initializeClass, &mids$, mid_init$_a8f03305, a0.this$)) {}

        jint MultiTermsEnum::docFreq() const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_54c6a179]);
        }

        ::org::apache::lucene::index::DocsEnum MultiTermsEnum::docs(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_e6d4c3ef], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum MultiTermsEnum::docsAndPositions(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsAndPositionsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_b5d9c11b], a0.this$, a1.this$, a2));
        }

        ::java::util::Comparator MultiTermsEnum::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        jint MultiTermsEnum::getMatchCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getMatchCount_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef MultiTermsEnum::next() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
        }

        jlong MultiTermsEnum::ord() const
        {
          return env->callLongMethod(this$, mids$[mid_ord_54c6a17a]);
        }

        ::org::apache::lucene::index::TermsEnum$SeekStatus MultiTermsEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_fa9d72c4], a0.this$));
        }

        jboolean MultiTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_seekExact_7bc03dc8], a0.this$);
        }

        void MultiTermsEnum::seekExact(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_0ee6df2f], a0);
        }

        ::org::apache::lucene::util::BytesRef MultiTermsEnum::term() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_4ae19461]));
        }

        ::java::lang::String MultiTermsEnum::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jlong MultiTermsEnum::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiTermsEnum_init_(t_MultiTermsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTermsEnum_docFreq(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_docs(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_docsAndPositions(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_getComparator(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_getMatchCount(t_MultiTermsEnum *self);
        static PyObject *t_MultiTermsEnum_next(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_ord(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_seekCeil(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_seekExact(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_term(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_toString(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_totalTermFreq(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_get__comparator(t_MultiTermsEnum *self, void *data);
        static PyObject *t_MultiTermsEnum_get__matchCount(t_MultiTermsEnum *self, void *data);
        static PyGetSetDef t_MultiTermsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTermsEnum, comparator),
          DECLARE_GET_FIELD(t_MultiTermsEnum, matchCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTermsEnum__methods_[] = {
          DECLARE_METHOD(t_MultiTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermsEnum, docFreq, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, docs, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, docsAndPositions, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, getMatchCount, METH_NOARGS),
          DECLARE_METHOD(t_MultiTermsEnum, next, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, ord, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, seekCeil, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, seekExact, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, term, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, toString, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, totalTermFreq, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiTermsEnum, t_MultiTermsEnum, ::org::apache::lucene::index::TermsEnum, MultiTermsEnum, t_MultiTermsEnum_init_, PyObject_SelfIter, ((PyObject *(*)(t_MultiTermsEnum *)) get_next< t_MultiTermsEnum,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_MultiTermsEnum__fields_, 0, 0);

        void t_MultiTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermsEnum), module, "MultiTermsEnum", 0);
        }

        void t_MultiTermsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiTermsEnum).tp_dict, "class_", make_descriptor(MultiTermsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_MultiTermsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermsEnum::initializeClass, 1)))
            return NULL;
          return t_MultiTermsEnum::wrap_Object(MultiTermsEnum(((t_MultiTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_MultiTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiTermsEnum_init_(t_MultiTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          JArray< ::org::apache::lucene::index::ReaderSlice > a0((jobject) NULL);
          MultiTermsEnum object((jobject) NULL);

          if (!parseArgs(args, "[k", ::org::apache::lucene::index::ReaderSlice::initializeClass, &a0))
          {
            INT_CALL(object = MultiTermsEnum(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiTermsEnum_docFreq(t_MultiTermsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docFreq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "docFreq", args, 2);
        }

        static PyObject *t_MultiTermsEnum_docs(t_MultiTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          ::org::apache::lucene::index::DocsEnum a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.docs(a0, a1, a2));
            return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "docs", args, 2);
        }

        static PyObject *t_MultiTermsEnum_docsAndPositions(t_MultiTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          ::org::apache::lucene::index::DocsAndPositionsEnum a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2));
            return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "docsAndPositions", args, 2);
        }

        static PyObject *t_MultiTermsEnum_getComparator(t_MultiTermsEnum *self, PyObject *args)
        {
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "getComparator", args, 2);
        }

        static PyObject *t_MultiTermsEnum_getMatchCount(t_MultiTermsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMatchCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MultiTermsEnum_next(t_MultiTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "next", args, 2);
        }

        static PyObject *t_MultiTermsEnum_ord(t_MultiTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ord());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "ord", args, 2);
        }

        static PyObject *t_MultiTermsEnum_seekCeil(t_MultiTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.seekCeil(a0));
            return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "seekCeil", args, 2);
        }

        static PyObject *t_MultiTermsEnum_seekExact(t_MultiTermsEnum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.seekExact(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.seekExact(a0));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "seekExact", args, 2);
        }

        static PyObject *t_MultiTermsEnum_term(t_MultiTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.term());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "term", args, 2);
        }

        static PyObject *t_MultiTermsEnum_toString(t_MultiTermsEnum *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MultiTermsEnum_totalTermFreq(t_MultiTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.totalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "totalTermFreq", args, 2);
        }

        static PyObject *t_MultiTermsEnum_get__comparator(t_MultiTermsEnum *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_MultiTermsEnum_get__matchCount(t_MultiTermsEnum *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMatchCount());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/io/IOException.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *IndexOutput::class$ = NULL;
        jmethodID *IndexOutput::mids$ = NULL;
        bool IndexOutput::live$ = false;

        jclass IndexOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/IndexOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
            mids$[mid_getChecksum_54c6a17a] = env->getMethodID(cls, "getChecksum", "()J");
            mids$[mid_getFilePointer_54c6a17a] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_length_54c6a17a] = env->getMethodID(cls, "length", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexOutput::IndexOutput() : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void IndexOutput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void IndexOutput::flush() const
        {
          env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
        }

        jlong IndexOutput::getChecksum() const
        {
          return env->callLongMethod(this$, mids$[mid_getChecksum_54c6a17a]);
        }

        jlong IndexOutput::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_54c6a17a]);
        }

        jlong IndexOutput::length() const
        {
          return env->callLongMethod(this$, mids$[mid_length_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_IndexOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexOutput_init_(t_IndexOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexOutput_close(t_IndexOutput *self);
        static PyObject *t_IndexOutput_flush(t_IndexOutput *self);
        static PyObject *t_IndexOutput_getChecksum(t_IndexOutput *self);
        static PyObject *t_IndexOutput_getFilePointer(t_IndexOutput *self);
        static PyObject *t_IndexOutput_length(t_IndexOutput *self);
        static PyObject *t_IndexOutput_get__checksum(t_IndexOutput *self, void *data);
        static PyObject *t_IndexOutput_get__filePointer(t_IndexOutput *self, void *data);
        static PyGetSetDef t_IndexOutput__fields_[] = {
          DECLARE_GET_FIELD(t_IndexOutput, checksum),
          DECLARE_GET_FIELD(t_IndexOutput, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexOutput__methods_[] = {
          DECLARE_METHOD(t_IndexOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexOutput, close, METH_NOARGS),
          DECLARE_METHOD(t_IndexOutput, flush, METH_NOARGS),
          DECLARE_METHOD(t_IndexOutput, getChecksum, METH_NOARGS),
          DECLARE_METHOD(t_IndexOutput, getFilePointer, METH_NOARGS),
          DECLARE_METHOD(t_IndexOutput, length, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexOutput, t_IndexOutput, ::org::apache::lucene::store::DataOutput, IndexOutput, t_IndexOutput_init_, 0, 0, t_IndexOutput__fields_, 0, 0);

        void t_IndexOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexOutput), module, "IndexOutput", 0);
        }

        void t_IndexOutput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexOutput).tp_dict, "class_", make_descriptor(IndexOutput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexOutput).tp_dict, "wrapfn_", make_descriptor(t_IndexOutput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexOutput::initializeClass, 1)))
            return NULL;
          return t_IndexOutput::wrap_Object(IndexOutput(((t_IndexOutput *) arg)->object.this$));
        }
        static PyObject *t_IndexOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexOutput_init_(t_IndexOutput *self, PyObject *args, PyObject *kwds)
        {
          IndexOutput object((jobject) NULL);

          INT_CALL(object = IndexOutput());
          self->object = object;

          return 0;
        }

        static PyObject *t_IndexOutput_close(t_IndexOutput *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexOutput_flush(t_IndexOutput *self)
        {
          OBJ_CALL(self->object.flush());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexOutput_getChecksum(t_IndexOutput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexOutput_getFilePointer(t_IndexOutput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexOutput_length(t_IndexOutput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.length());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexOutput_get__checksum(t_IndexOutput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_IndexOutput_get__filePointer(t_IndexOutput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SrndTermQuery.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SrndTermQuery::class$ = NULL;
            jmethodID *SrndTermQuery::mids$ = NULL;
            bool SrndTermQuery::live$ = false;

            jclass SrndTermQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SrndTermQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f3691645] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Z)V");
                mids$[mid_getLuceneTerm_2864f4ee] = env->getMethodID(cls, "getLuceneTerm", "(Ljava/lang/String;)Lorg/apache/lucene/index/Term;");
                mids$[mid_getTermText_14c7b5c5] = env->getMethodID(cls, "getTermText", "()Ljava/lang/String;");
                mids$[mid_toStringUnquoted_14c7b5c5] = env->getMethodID(cls, "toStringUnquoted", "()Ljava/lang/String;");
                mids$[mid_visitMatchingTerms_330199a1] = env->getMethodID(cls, "visitMatchingTerms", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SrndTermQuery::SrndTermQuery(const ::java::lang::String & a0, jboolean a1) : ::org::apache::lucene::queryparser::surround::query::SimpleTerm(env->newObject(initializeClass, &mids$, mid_init$_f3691645, a0.this$, a1)) {}

            ::org::apache::lucene::index::Term SrndTermQuery::getLuceneTerm(const ::java::lang::String & a0) const
            {
              return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getLuceneTerm_2864f4ee], a0.this$));
            }

            ::java::lang::String SrndTermQuery::getTermText() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTermText_14c7b5c5]));
            }

            ::java::lang::String SrndTermQuery::toStringUnquoted() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringUnquoted_14c7b5c5]));
            }

            void SrndTermQuery::visitMatchingTerms(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor & a2) const
            {
              env->callVoidMethod(this$, mids$[mid_visitMatchingTerms_330199a1], a0.this$, a1.this$, a2.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SrndTermQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SrndTermQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SrndTermQuery_init_(t_SrndTermQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SrndTermQuery_getLuceneTerm(t_SrndTermQuery *self, PyObject *arg);
            static PyObject *t_SrndTermQuery_getTermText(t_SrndTermQuery *self);
            static PyObject *t_SrndTermQuery_toStringUnquoted(t_SrndTermQuery *self, PyObject *args);
            static PyObject *t_SrndTermQuery_visitMatchingTerms(t_SrndTermQuery *self, PyObject *args);
            static PyObject *t_SrndTermQuery_get__termText(t_SrndTermQuery *self, void *data);
            static PyGetSetDef t_SrndTermQuery__fields_[] = {
              DECLARE_GET_FIELD(t_SrndTermQuery, termText),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_SrndTermQuery__methods_[] = {
              DECLARE_METHOD(t_SrndTermQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndTermQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndTermQuery, getLuceneTerm, METH_O),
              DECLARE_METHOD(t_SrndTermQuery, getTermText, METH_NOARGS),
              DECLARE_METHOD(t_SrndTermQuery, toStringUnquoted, METH_VARARGS),
              DECLARE_METHOD(t_SrndTermQuery, visitMatchingTerms, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SrndTermQuery, t_SrndTermQuery, ::org::apache::lucene::queryparser::surround::query::SimpleTerm, SrndTermQuery, t_SrndTermQuery_init_, 0, 0, t_SrndTermQuery__fields_, 0, 0);

            void t_SrndTermQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(SrndTermQuery), module, "SrndTermQuery", 0);
            }

            void t_SrndTermQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SrndTermQuery).tp_dict, "class_", make_descriptor(SrndTermQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SrndTermQuery).tp_dict, "wrapfn_", make_descriptor(t_SrndTermQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SrndTermQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SrndTermQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SrndTermQuery::initializeClass, 1)))
                return NULL;
              return t_SrndTermQuery::wrap_Object(SrndTermQuery(((t_SrndTermQuery *) arg)->object.this$));
            }
            static PyObject *t_SrndTermQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SrndTermQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SrndTermQuery_init_(t_SrndTermQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              jboolean a1;
              SrndTermQuery object((jobject) NULL);

              if (!parseArgs(args, "sZ", &a0, &a1))
              {
                INT_CALL(object = SrndTermQuery(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SrndTermQuery_getLuceneTerm(t_SrndTermQuery *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::index::Term result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.getLuceneTerm(a0));
                return ::org::apache::lucene::index::t_Term::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getLuceneTerm", arg);
              return NULL;
            }

            static PyObject *t_SrndTermQuery_getTermText(t_SrndTermQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getTermText());
              return j2p(result);
            }

            static PyObject *t_SrndTermQuery_toStringUnquoted(t_SrndTermQuery *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toStringUnquoted());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(SrndTermQuery), (PyObject *) self, "toStringUnquoted", args, 2);
            }

            static PyObject *t_SrndTermQuery_visitMatchingTerms(t_SrndTermQuery *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor a2((jobject) NULL);

              if (!parseArgs(args, "ksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.visitMatchingTerms(a0, a1, a2));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(SrndTermQuery), (PyObject *) self, "visitMatchingTerms", args, 2);
            }

            static PyObject *t_SrndTermQuery_get__termText(t_SrndTermQuery *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getTermText());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hu/HungarianLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {

          ::java::lang::Class *HungarianLightStemFilter::class$ = NULL;
          jmethodID *HungarianLightStemFilter::mids$ = NULL;
          bool HungarianLightStemFilter::live$ = false;

          jclass HungarianLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hu/HungarianLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HungarianLightStemFilter::HungarianLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean HungarianLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {
          static PyObject *t_HungarianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HungarianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HungarianLightStemFilter_init_(t_HungarianLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HungarianLightStemFilter_incrementToken(t_HungarianLightStemFilter *self, PyObject *args);

          static PyMethodDef t_HungarianLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_HungarianLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HungarianLightStemFilter, t_HungarianLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, HungarianLightStemFilter, t_HungarianLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_HungarianLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HungarianLightStemFilter), module, "HungarianLightStemFilter", 0);
          }

          void t_HungarianLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HungarianLightStemFilter).tp_dict, "class_", make_descriptor(HungarianLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HungarianLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_HungarianLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HungarianLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HungarianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HungarianLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_HungarianLightStemFilter::wrap_Object(HungarianLightStemFilter(((t_HungarianLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_HungarianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HungarianLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HungarianLightStemFilter_init_(t_HungarianLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            HungarianLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = HungarianLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HungarianLightStemFilter_incrementToken(t_HungarianLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(HungarianLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/OrQuery.h"
#include "org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/surround/query/DistanceSubQuery.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *OrQuery::class$ = NULL;
            jmethodID *OrQuery::mids$ = NULL;
            bool OrQuery::live$ = false;

            jclass OrQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/OrQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_4136185e] = env->getMethodID(cls, "<init>", "(Ljava/util/List;ZLjava/lang/String;)V");
                mids$[mid_addSpanQueries_0564f431] = env->getMethodID(cls, "addSpanQueries", "(Lorg/apache/lucene/queryparser/surround/query/SpanNearClauseFactory;)V");
                mids$[mid_distanceSubQueryNotAllowed_14c7b5c5] = env->getMethodID(cls, "distanceSubQueryNotAllowed", "()Ljava/lang/String;");
                mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            OrQuery::OrQuery(const ::java::util::List & a0, jboolean a1, const ::java::lang::String & a2) : ::org::apache::lucene::queryparser::surround::query::ComposedQuery(env->newObject(initializeClass, &mids$, mid_init$_4136185e, a0.this$, a1, a2.this$)) {}

            void OrQuery::addSpanQueries(const ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addSpanQueries_0564f431], a0.this$);
            }

            ::java::lang::String OrQuery::distanceSubQueryNotAllowed() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_distanceSubQueryNotAllowed_14c7b5c5]));
            }

            ::org::apache::lucene::search::Query OrQuery::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_OrQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_OrQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_OrQuery_init_(t_OrQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_OrQuery_addSpanQueries(t_OrQuery *self, PyObject *arg);
            static PyObject *t_OrQuery_distanceSubQueryNotAllowed(t_OrQuery *self);
            static PyObject *t_OrQuery_makeLuceneQueryFieldNoBoost(t_OrQuery *self, PyObject *args);

            static PyMethodDef t_OrQuery__methods_[] = {
              DECLARE_METHOD(t_OrQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_OrQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_OrQuery, addSpanQueries, METH_O),
              DECLARE_METHOD(t_OrQuery, distanceSubQueryNotAllowed, METH_NOARGS),
              DECLARE_METHOD(t_OrQuery, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(OrQuery, t_OrQuery, ::org::apache::lucene::queryparser::surround::query::ComposedQuery, OrQuery, t_OrQuery_init_, 0, 0, 0, 0, 0);

            void t_OrQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(OrQuery), module, "OrQuery", 0);
            }

            void t_OrQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(OrQuery).tp_dict, "class_", make_descriptor(OrQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(OrQuery).tp_dict, "wrapfn_", make_descriptor(t_OrQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(OrQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_OrQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, OrQuery::initializeClass, 1)))
                return NULL;
              return t_OrQuery::wrap_Object(OrQuery(((t_OrQuery *) arg)->object.this$));
            }
            static PyObject *t_OrQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, OrQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_OrQuery_init_(t_OrQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              jboolean a1;
              ::java::lang::String a2((jobject) NULL);
              OrQuery object((jobject) NULL);

              if (!parseArgs(args, "KZs", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2))
              {
                INT_CALL(object = OrQuery(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_OrQuery_addSpanQueries(t_OrQuery *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory::initializeClass, &a0))
              {
                OBJ_CALL(self->object.addSpanQueries(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addSpanQueries", arg);
              return NULL;
            }

            static PyObject *t_OrQuery_distanceSubQueryNotAllowed(t_OrQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.distanceSubQueryNotAllowed());
              return j2p(result);
            }

            static PyObject *t_OrQuery_makeLuceneQueryFieldNoBoost(t_OrQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(OrQuery), (PyObject *) self, "makeLuceneQueryFieldNoBoost", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/WhitespaceAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *WhitespaceAnalyzer::class$ = NULL;
          jmethodID *WhitespaceAnalyzer::mids$ = NULL;
          bool WhitespaceAnalyzer::live$ = false;

          jclass WhitespaceAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/WhitespaceAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WhitespaceAnalyzer::WhitespaceAnalyzer() : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          WhitespaceAnalyzer::WhitespaceAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_WhitespaceAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WhitespaceAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WhitespaceAnalyzer_init_(t_WhitespaceAnalyzer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_WhitespaceAnalyzer__methods_[] = {
            DECLARE_METHOD(t_WhitespaceAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WhitespaceAnalyzer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WhitespaceAnalyzer, t_WhitespaceAnalyzer, ::org::apache::lucene::analysis::Analyzer, WhitespaceAnalyzer, t_WhitespaceAnalyzer_init_, 0, 0, 0, 0, 0);

          void t_WhitespaceAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(WhitespaceAnalyzer), module, "WhitespaceAnalyzer", 0);
          }

          void t_WhitespaceAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WhitespaceAnalyzer).tp_dict, "class_", make_descriptor(WhitespaceAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WhitespaceAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_WhitespaceAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WhitespaceAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WhitespaceAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WhitespaceAnalyzer::initializeClass, 1)))
              return NULL;
            return t_WhitespaceAnalyzer::wrap_Object(WhitespaceAnalyzer(((t_WhitespaceAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_WhitespaceAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WhitespaceAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WhitespaceAnalyzer_init_(t_WhitespaceAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                WhitespaceAnalyzer object((jobject) NULL);

                INT_CALL(object = WhitespaceAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                WhitespaceAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = WhitespaceAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianMinimalStemFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianMinimalStemFilterFactory::class$ = NULL;
          jmethodID *GalicianMinimalStemFilterFactory::mids$ = NULL;
          bool GalicianMinimalStemFilterFactory::live$ = false;

          jclass GalicianMinimalStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianMinimalStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianMinimalStemFilterFactory::GalicianMinimalStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream GalicianMinimalStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianMinimalStemFilterFactory_init_(t_GalicianMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianMinimalStemFilterFactory_create(t_GalicianMinimalStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_GalicianMinimalStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GalicianMinimalStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianMinimalStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianMinimalStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GalicianMinimalStemFilterFactory, t_GalicianMinimalStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, GalicianMinimalStemFilterFactory, t_GalicianMinimalStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_GalicianMinimalStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianMinimalStemFilterFactory), module, "GalicianMinimalStemFilterFactory", 0);
          }

          void t_GalicianMinimalStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemFilterFactory).tp_dict, "class_", make_descriptor(GalicianMinimalStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_GalicianMinimalStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GalicianMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianMinimalStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GalicianMinimalStemFilterFactory::wrap_Object(GalicianMinimalStemFilterFactory(((t_GalicianMinimalStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GalicianMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianMinimalStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianMinimalStemFilterFactory_init_(t_GalicianMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GalicianMinimalStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GalicianMinimalStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GalicianMinimalStemFilterFactory_create(t_GalicianMinimalStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(GalicianMinimalStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "java/lang/Comparable.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *Term::class$ = NULL;
        jmethodID *Term::mids$ = NULL;
        bool Term::live$ = false;

        jclass Term::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/Term");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_init$_43cce44e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_bytes_4ae19461] = env->getMethodID(cls, "bytes", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_compareTo_7eca6a9e] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/index/Term;)I");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_field_14c7b5c5] = env->getMethodID(cls, "field", "()Ljava/lang/String;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_text_14c7b5c5] = env->getMethodID(cls, "text", "()Ljava/lang/String;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toString_edfda73b] = env->getStaticMethodID(cls, "toString", "(Lorg/apache/lucene/util/BytesRef;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Term::Term(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        Term::Term(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

        Term::Term(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_43cce44e, a0.this$, a1.this$)) {}

        ::org::apache::lucene::util::BytesRef Term::bytes() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_bytes_4ae19461]));
        }

        jint Term::compareTo(const Term & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTo_7eca6a9e], a0.this$);
        }

        jboolean Term::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::lang::String Term::field() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_field_14c7b5c5]));
        }

        jint Term::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String Term::text() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_text_14c7b5c5]));
        }

        ::java::lang::String Term::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::String Term::toString(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_edfda73b], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_Term_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Term_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Term_init_(t_Term *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Term_bytes(t_Term *self);
        static PyObject *t_Term_compareTo(t_Term *self, PyObject *arg);
        static PyObject *t_Term_equals(t_Term *self, PyObject *args);
        static PyObject *t_Term_field(t_Term *self);
        static PyObject *t_Term_hashCode(t_Term *self, PyObject *args);
        static PyObject *t_Term_text(t_Term *self);
        static PyObject *t_Term_toString(t_Term *self, PyObject *args);
        static PyObject *t_Term_toString_(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_Term__methods_[] = {
          DECLARE_METHOD(t_Term, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Term, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Term, bytes, METH_NOARGS),
          DECLARE_METHOD(t_Term, compareTo, METH_O),
          DECLARE_METHOD(t_Term, equals, METH_VARARGS),
          DECLARE_METHOD(t_Term, field, METH_NOARGS),
          DECLARE_METHOD(t_Term, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_Term, text, METH_NOARGS),
          DECLARE_METHOD(t_Term, toString, METH_VARARGS),
          DECLARE_METHOD(t_Term, toString_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Term, t_Term, ::java::lang::Object, Term, t_Term_init_, 0, 0, 0, 0, 0);

        void t_Term::install(PyObject *module)
        {
          installType(&PY_TYPE(Term), module, "Term", 0);
        }

        void t_Term::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Term).tp_dict, "class_", make_descriptor(Term::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Term).tp_dict, "wrapfn_", make_descriptor(t_Term::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Term).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Term_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Term::initializeClass, 1)))
            return NULL;
          return t_Term::wrap_Object(Term(((t_Term *) arg)->object.this$));
        }
        static PyObject *t_Term_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Term::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Term_init_(t_Term *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              Term object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = Term(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              Term object((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                INT_CALL(object = Term(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              Term object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                INT_CALL(object = Term(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Term_bytes(t_Term *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.bytes());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_Term_compareTo(t_Term *self, PyObject *arg)
        {
          Term a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.compareTo(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
          return NULL;
        }

        static PyObject *t_Term_equals(t_Term *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(Term), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Term_field(t_Term *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.field());
          return j2p(result);
        }

        static PyObject *t_Term_hashCode(t_Term *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(Term), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Term_text(t_Term *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.text());
          return j2p(result);
        }

        static PyObject *t_Term_toString(t_Term *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(Term), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Term_toString_(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::Term::toString(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "toString_", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiTerms.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/index/ReaderSlice.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiTerms::class$ = NULL;
        jmethodID *MultiTerms::mids$ = NULL;
        bool MultiTerms::live$ = false;

        jclass MultiTerms::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiTerms");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_cc1bf630] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/Terms;[Lorg/apache/lucene/index/ReaderSlice;)V");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_getDocCount_54c6a179] = env->getMethodID(cls, "getDocCount", "()I");
            mids$[mid_getMax_4ae19461] = env->getMethodID(cls, "getMax", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getMin_4ae19461] = env->getMethodID(cls, "getMin", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getSubSlices_df2851e8] = env->getMethodID(cls, "getSubSlices", "()[Lorg/apache/lucene/index/ReaderSlice;");
            mids$[mid_getSubTerms_a3c12bfa] = env->getMethodID(cls, "getSubTerms", "()[Lorg/apache/lucene/index/Terms;");
            mids$[mid_getSumDocFreq_54c6a17a] = env->getMethodID(cls, "getSumDocFreq", "()J");
            mids$[mid_getSumTotalTermFreq_54c6a17a] = env->getMethodID(cls, "getSumTotalTermFreq", "()J");
            mids$[mid_hasFreqs_54c6a16a] = env->getMethodID(cls, "hasFreqs", "()Z");
            mids$[mid_hasOffsets_54c6a16a] = env->getMethodID(cls, "hasOffsets", "()Z");
            mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
            mids$[mid_hasPositions_54c6a16a] = env->getMethodID(cls, "hasPositions", "()Z");
            mids$[mid_intersect_b8f2b1bc] = env->getMethodID(cls, "intersect", "(Lorg/apache/lucene/util/automaton/CompiledAutomaton;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_iterator_d737078b] = env->getMethodID(cls, "iterator", "(Lorg/apache/lucene/index/TermsEnum;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_size_54c6a17a] = env->getMethodID(cls, "size", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTerms::MultiTerms(const JArray< ::org::apache::lucene::index::Terms > & a0, const JArray< ::org::apache::lucene::index::ReaderSlice > & a1) : ::org::apache::lucene::index::Terms(env->newObject(initializeClass, &mids$, mid_init$_cc1bf630, a0.this$, a1.this$)) {}

        ::java::util::Comparator MultiTerms::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        jint MultiTerms::getDocCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef MultiTerms::getMax() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getMax_4ae19461]));
        }

        ::org::apache::lucene::util::BytesRef MultiTerms::getMin() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getMin_4ae19461]));
        }

        JArray< ::org::apache::lucene::index::ReaderSlice > MultiTerms::getSubSlices() const
        {
          return JArray< ::org::apache::lucene::index::ReaderSlice >(env->callObjectMethod(this$, mids$[mid_getSubSlices_df2851e8]));
        }

        JArray< ::org::apache::lucene::index::Terms > MultiTerms::getSubTerms() const
        {
          return JArray< ::org::apache::lucene::index::Terms >(env->callObjectMethod(this$, mids$[mid_getSubTerms_a3c12bfa]));
        }

        jlong MultiTerms::getSumDocFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_getSumDocFreq_54c6a17a]);
        }

        jlong MultiTerms::getSumTotalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_54c6a17a]);
        }

        jboolean MultiTerms::hasFreqs() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasFreqs_54c6a16a]);
        }

        jboolean MultiTerms::hasOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasOffsets_54c6a16a]);
        }

        jboolean MultiTerms::hasPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
        }

        jboolean MultiTerms::hasPositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPositions_54c6a16a]);
        }

        ::org::apache::lucene::index::TermsEnum MultiTerms::intersect(const ::org::apache::lucene::util::automaton::CompiledAutomaton & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_intersect_b8f2b1bc], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::TermsEnum MultiTerms::iterator(const ::org::apache::lucene::index::TermsEnum & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_iterator_d737078b], a0.this$));
        }

        jlong MultiTerms::size() const
        {
          return env->callLongMethod(this$, mids$[mid_size_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiTerms_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTerms_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiTerms_init_(t_MultiTerms *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTerms_getComparator(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_getDocCount(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_getMax(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_getMin(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_getSubSlices(t_MultiTerms *self);
        static PyObject *t_MultiTerms_getSubTerms(t_MultiTerms *self);
        static PyObject *t_MultiTerms_getSumDocFreq(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_getSumTotalTermFreq(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_hasFreqs(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_hasOffsets(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_hasPayloads(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_hasPositions(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_intersect(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_iterator(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_size(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_get__comparator(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__docCount(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__max(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__min(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__subSlices(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__subTerms(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__sumDocFreq(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__sumTotalTermFreq(t_MultiTerms *self, void *data);
        static PyGetSetDef t_MultiTerms__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTerms, comparator),
          DECLARE_GET_FIELD(t_MultiTerms, docCount),
          DECLARE_GET_FIELD(t_MultiTerms, max),
          DECLARE_GET_FIELD(t_MultiTerms, min),
          DECLARE_GET_FIELD(t_MultiTerms, subSlices),
          DECLARE_GET_FIELD(t_MultiTerms, subTerms),
          DECLARE_GET_FIELD(t_MultiTerms, sumDocFreq),
          DECLARE_GET_FIELD(t_MultiTerms, sumTotalTermFreq),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTerms__methods_[] = {
          DECLARE_METHOD(t_MultiTerms, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTerms, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTerms, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, getDocCount, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, getMax, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, getMin, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, getSubSlices, METH_NOARGS),
          DECLARE_METHOD(t_MultiTerms, getSubTerms, METH_NOARGS),
          DECLARE_METHOD(t_MultiTerms, getSumDocFreq, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, getSumTotalTermFreq, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, hasFreqs, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, hasOffsets, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, hasPayloads, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, hasPositions, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, intersect, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, iterator, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, size, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiTerms, t_MultiTerms, ::org::apache::lucene::index::Terms, MultiTerms, t_MultiTerms_init_, 0, 0, t_MultiTerms__fields_, 0, 0);

        void t_MultiTerms::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTerms), module, "MultiTerms", 0);
        }

        void t_MultiTerms::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiTerms).tp_dict, "class_", make_descriptor(MultiTerms::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiTerms).tp_dict, "wrapfn_", make_descriptor(t_MultiTerms::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiTerms).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTerms_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTerms::initializeClass, 1)))
            return NULL;
          return t_MultiTerms::wrap_Object(MultiTerms(((t_MultiTerms *) arg)->object.this$));
        }
        static PyObject *t_MultiTerms_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTerms::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiTerms_init_(t_MultiTerms *self, PyObject *args, PyObject *kwds)
        {
          JArray< ::org::apache::lucene::index::Terms > a0((jobject) NULL);
          JArray< ::org::apache::lucene::index::ReaderSlice > a1((jobject) NULL);
          MultiTerms object((jobject) NULL);

          if (!parseArgs(args, "[k[k", ::org::apache::lucene::index::Terms::initializeClass, ::org::apache::lucene::index::ReaderSlice::initializeClass, &a0, &a1))
          {
            INT_CALL(object = MultiTerms(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiTerms_getComparator(t_MultiTerms *self, PyObject *args)
        {
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "getComparator", args, 2);
        }

        static PyObject *t_MultiTerms_getDocCount(t_MultiTerms *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getDocCount());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "getDocCount", args, 2);
        }

        static PyObject *t_MultiTerms_getMax(t_MultiTerms *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMax());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "getMax", args, 2);
        }

        static PyObject *t_MultiTerms_getMin(t_MultiTerms *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMin());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "getMin", args, 2);
        }

        static PyObject *t_MultiTerms_getSubSlices(t_MultiTerms *self)
        {
          JArray< ::org::apache::lucene::index::ReaderSlice > result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubSlices());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_ReaderSlice::wrap_jobject);
        }

        static PyObject *t_MultiTerms_getSubTerms(t_MultiTerms *self)
        {
          JArray< ::org::apache::lucene::index::Terms > result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubTerms());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_Terms::wrap_jobject);
        }

        static PyObject *t_MultiTerms_getSumDocFreq(t_MultiTerms *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getSumDocFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "getSumDocFreq", args, 2);
        }

        static PyObject *t_MultiTerms_getSumTotalTermFreq(t_MultiTerms *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getSumTotalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "getSumTotalTermFreq", args, 2);
        }

        static PyObject *t_MultiTerms_hasFreqs(t_MultiTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasFreqs());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "hasFreqs", args, 2);
        }

        static PyObject *t_MultiTerms_hasOffsets(t_MultiTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasOffsets());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "hasOffsets", args, 2);
        }

        static PyObject *t_MultiTerms_hasPayloads(t_MultiTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasPayloads());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "hasPayloads", args, 2);
        }

        static PyObject *t_MultiTerms_hasPositions(t_MultiTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasPositions());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "hasPositions", args, 2);
        }

        static PyObject *t_MultiTerms_intersect(t_MultiTerms *self, PyObject *args)
        {
          ::org::apache::lucene::util::automaton::CompiledAutomaton a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::CompiledAutomaton::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.intersect(a0, a1));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "intersect", args, 2);
        }

        static PyObject *t_MultiTerms_iterator(t_MultiTerms *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.iterator(a0));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_MultiTerms_size(t_MultiTerms *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "size", args, 2);
        }

        static PyObject *t_MultiTerms_get__comparator(t_MultiTerms *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_MultiTerms_get__docCount(t_MultiTerms *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDocCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_MultiTerms_get__max(t_MultiTerms *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getMax());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_MultiTerms_get__min(t_MultiTerms *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getMin());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_MultiTerms_get__subSlices(t_MultiTerms *self, void *data)
        {
          JArray< ::org::apache::lucene::index::ReaderSlice > value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubSlices());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_ReaderSlice::wrap_jobject);
        }

        static PyObject *t_MultiTerms_get__subTerms(t_MultiTerms *self, void *data)
        {
          JArray< ::org::apache::lucene::index::Terms > value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubTerms());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_Terms::wrap_jobject);
        }

        static PyObject *t_MultiTerms_get__sumDocFreq(t_MultiTerms *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getSumDocFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_MultiTerms_get__sumTotalTermFreq(t_MultiTerms *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getSumTotalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CompositeReaderContext.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/CompositeReader.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CompositeReaderContext::class$ = NULL;
        jmethodID *CompositeReaderContext::mids$ = NULL;
        bool CompositeReaderContext::live$ = false;

        jclass CompositeReaderContext::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CompositeReaderContext");

            mids$ = new jmethodID[max_mid];
            mids$[mid_children_87851566] = env->getMethodID(cls, "children", "()Ljava/util/List;");
            mids$[mid_leaves_87851566] = env->getMethodID(cls, "leaves", "()Ljava/util/List;");
            mids$[mid_reader_d29e58f7] = env->getMethodID(cls, "reader", "()Lorg/apache/lucene/index/CompositeReader;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::List CompositeReaderContext::children() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_children_87851566]));
        }

        ::java::util::List CompositeReaderContext::leaves() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_leaves_87851566]));
        }

        ::org::apache::lucene::index::CompositeReader CompositeReaderContext::reader() const
        {
          return ::org::apache::lucene::index::CompositeReader(env->callObjectMethod(this$, mids$[mid_reader_d29e58f7]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CompositeReaderContext_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompositeReaderContext_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompositeReaderContext_children(t_CompositeReaderContext *self, PyObject *args);
        static PyObject *t_CompositeReaderContext_leaves(t_CompositeReaderContext *self, PyObject *args);
        static PyObject *t_CompositeReaderContext_reader(t_CompositeReaderContext *self, PyObject *args);

        static PyMethodDef t_CompositeReaderContext__methods_[] = {
          DECLARE_METHOD(t_CompositeReaderContext, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompositeReaderContext, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompositeReaderContext, children, METH_VARARGS),
          DECLARE_METHOD(t_CompositeReaderContext, leaves, METH_VARARGS),
          DECLARE_METHOD(t_CompositeReaderContext, reader, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CompositeReaderContext, t_CompositeReaderContext, ::org::apache::lucene::index::IndexReaderContext, CompositeReaderContext, abstract_init, 0, 0, 0, 0, 0);

        void t_CompositeReaderContext::install(PyObject *module)
        {
          installType(&PY_TYPE(CompositeReaderContext), module, "CompositeReaderContext", 0);
        }

        void t_CompositeReaderContext::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CompositeReaderContext).tp_dict, "class_", make_descriptor(CompositeReaderContext::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CompositeReaderContext).tp_dict, "wrapfn_", make_descriptor(t_CompositeReaderContext::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CompositeReaderContext).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CompositeReaderContext_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CompositeReaderContext::initializeClass, 1)))
            return NULL;
          return t_CompositeReaderContext::wrap_Object(CompositeReaderContext(((t_CompositeReaderContext *) arg)->object.this$));
        }
        static PyObject *t_CompositeReaderContext_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CompositeReaderContext::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CompositeReaderContext_children(t_CompositeReaderContext *self, PyObject *args)
        {
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.children());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(IndexReaderContext));
          }

          return callSuper(&PY_TYPE(CompositeReaderContext), (PyObject *) self, "children", args, 2);
        }

        static PyObject *t_CompositeReaderContext_leaves(t_CompositeReaderContext *self, PyObject *args)
        {
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.leaves());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(AtomicReaderContext));
          }

          return callSuper(&PY_TYPE(CompositeReaderContext), (PyObject *) self, "leaves", args, 2);
        }

        static PyObject *t_CompositeReaderContext_reader(t_CompositeReaderContext *self, PyObject *args)
        {
          ::org::apache::lucene::index::CompositeReader result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.reader());
            return ::org::apache::lucene::index::t_CompositeReader::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CompositeReaderContext), (PyObject *) self, "reader", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/FieldCacheSanityChecker$Insanity.h"
#include "org/apache/lucene/util/FieldCacheSanityChecker$InsanityType.h"
#include "org/apache/lucene/search/FieldCache$CacheEntry.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *FieldCacheSanityChecker$Insanity::class$ = NULL;
        jmethodID *FieldCacheSanityChecker$Insanity::mids$ = NULL;
        bool FieldCacheSanityChecker$Insanity::live$ = false;

        jclass FieldCacheSanityChecker$Insanity::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/FieldCacheSanityChecker$Insanity");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9b412c8f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/FieldCacheSanityChecker$InsanityType;Ljava/lang/String;[Lorg/apache/lucene/search/FieldCache$CacheEntry;)V");
            mids$[mid_getCacheEntries_2bd7104e] = env->getMethodID(cls, "getCacheEntries", "()[Lorg/apache/lucene/search/FieldCache$CacheEntry;");
            mids$[mid_getMsg_14c7b5c5] = env->getMethodID(cls, "getMsg", "()Ljava/lang/String;");
            mids$[mid_getType_e7f4e575] = env->getMethodID(cls, "getType", "()Lorg/apache/lucene/util/FieldCacheSanityChecker$InsanityType;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCacheSanityChecker$Insanity::FieldCacheSanityChecker$Insanity(const ::org::apache::lucene::util::FieldCacheSanityChecker$InsanityType & a0, const ::java::lang::String & a1, const JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9b412c8f, a0.this$, a1.this$, a2.this$)) {}

        JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > FieldCacheSanityChecker$Insanity::getCacheEntries() const
        {
          return JArray< ::org::apache::lucene::search::FieldCache$CacheEntry >(env->callObjectMethod(this$, mids$[mid_getCacheEntries_2bd7104e]));
        }

        ::java::lang::String FieldCacheSanityChecker$Insanity::getMsg() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMsg_14c7b5c5]));
        }

        ::org::apache::lucene::util::FieldCacheSanityChecker$InsanityType FieldCacheSanityChecker$Insanity::getType() const
        {
          return ::org::apache::lucene::util::FieldCacheSanityChecker$InsanityType(env->callObjectMethod(this$, mids$[mid_getType_e7f4e575]));
        }

        ::java::lang::String FieldCacheSanityChecker$Insanity::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_FieldCacheSanityChecker$Insanity_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheSanityChecker$Insanity_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCacheSanityChecker$Insanity_init_(t_FieldCacheSanityChecker$Insanity *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCacheSanityChecker$Insanity_getCacheEntries(t_FieldCacheSanityChecker$Insanity *self);
        static PyObject *t_FieldCacheSanityChecker$Insanity_getMsg(t_FieldCacheSanityChecker$Insanity *self);
        static PyObject *t_FieldCacheSanityChecker$Insanity_getType(t_FieldCacheSanityChecker$Insanity *self);
        static PyObject *t_FieldCacheSanityChecker$Insanity_toString(t_FieldCacheSanityChecker$Insanity *self, PyObject *args);
        static PyObject *t_FieldCacheSanityChecker$Insanity_get__cacheEntries(t_FieldCacheSanityChecker$Insanity *self, void *data);
        static PyObject *t_FieldCacheSanityChecker$Insanity_get__msg(t_FieldCacheSanityChecker$Insanity *self, void *data);
        static PyObject *t_FieldCacheSanityChecker$Insanity_get__type(t_FieldCacheSanityChecker$Insanity *self, void *data);
        static PyGetSetDef t_FieldCacheSanityChecker$Insanity__fields_[] = {
          DECLARE_GET_FIELD(t_FieldCacheSanityChecker$Insanity, cacheEntries),
          DECLARE_GET_FIELD(t_FieldCacheSanityChecker$Insanity, msg),
          DECLARE_GET_FIELD(t_FieldCacheSanityChecker$Insanity, type),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldCacheSanityChecker$Insanity__methods_[] = {
          DECLARE_METHOD(t_FieldCacheSanityChecker$Insanity, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheSanityChecker$Insanity, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheSanityChecker$Insanity, getCacheEntries, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheSanityChecker$Insanity, getMsg, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheSanityChecker$Insanity, getType, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheSanityChecker$Insanity, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCacheSanityChecker$Insanity, t_FieldCacheSanityChecker$Insanity, ::java::lang::Object, FieldCacheSanityChecker$Insanity, t_FieldCacheSanityChecker$Insanity_init_, 0, 0, t_FieldCacheSanityChecker$Insanity__fields_, 0, 0);

        void t_FieldCacheSanityChecker$Insanity::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCacheSanityChecker$Insanity), module, "FieldCacheSanityChecker$Insanity", 0);
        }

        void t_FieldCacheSanityChecker$Insanity::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$Insanity).tp_dict, "class_", make_descriptor(FieldCacheSanityChecker$Insanity::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$Insanity).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheSanityChecker$Insanity::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$Insanity).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCacheSanityChecker$Insanity_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCacheSanityChecker$Insanity::initializeClass, 1)))
            return NULL;
          return t_FieldCacheSanityChecker$Insanity::wrap_Object(FieldCacheSanityChecker$Insanity(((t_FieldCacheSanityChecker$Insanity *) arg)->object.this$));
        }
        static PyObject *t_FieldCacheSanityChecker$Insanity_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCacheSanityChecker$Insanity::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCacheSanityChecker$Insanity_init_(t_FieldCacheSanityChecker$Insanity *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::FieldCacheSanityChecker$InsanityType a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > a2((jobject) NULL);
          FieldCacheSanityChecker$Insanity object((jobject) NULL);

          if (!parseArgs(args, "ks[k", ::org::apache::lucene::util::FieldCacheSanityChecker$InsanityType::initializeClass, ::org::apache::lucene::search::FieldCache$CacheEntry::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = FieldCacheSanityChecker$Insanity(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldCacheSanityChecker$Insanity_getCacheEntries(t_FieldCacheSanityChecker$Insanity *self)
        {
          JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > result((jobject) NULL);
          OBJ_CALL(result = self->object.getCacheEntries());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::t_FieldCache$CacheEntry::wrap_jobject);
        }

        static PyObject *t_FieldCacheSanityChecker$Insanity_getMsg(t_FieldCacheSanityChecker$Insanity *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getMsg());
          return j2p(result);
        }

        static PyObject *t_FieldCacheSanityChecker$Insanity_getType(t_FieldCacheSanityChecker$Insanity *self)
        {
          ::org::apache::lucene::util::FieldCacheSanityChecker$InsanityType result((jobject) NULL);
          OBJ_CALL(result = self->object.getType());
          return ::org::apache::lucene::util::t_FieldCacheSanityChecker$InsanityType::wrap_Object(result);
        }

        static PyObject *t_FieldCacheSanityChecker$Insanity_toString(t_FieldCacheSanityChecker$Insanity *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FieldCacheSanityChecker$Insanity), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FieldCacheSanityChecker$Insanity_get__cacheEntries(t_FieldCacheSanityChecker$Insanity *self, void *data)
        {
          JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > value((jobject) NULL);
          OBJ_CALL(value = self->object.getCacheEntries());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_FieldCache$CacheEntry::wrap_jobject);
        }

        static PyObject *t_FieldCacheSanityChecker$Insanity_get__msg(t_FieldCacheSanityChecker$Insanity *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getMsg());
          return j2p(value);
        }

        static PyObject *t_FieldCacheSanityChecker$Insanity_get__type(t_FieldCacheSanityChecker$Insanity *self, void *data)
        {
          ::org::apache::lucene::util::FieldCacheSanityChecker$InsanityType value((jobject) NULL);
          OBJ_CALL(value = self->object.getType());
          return ::org::apache::lucene::util::t_FieldCacheSanityChecker$InsanityType::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/RemoveEmptyNonLeafQueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *RemoveEmptyNonLeafQueryNodeProcessor::class$ = NULL;
              jmethodID *RemoveEmptyNonLeafQueryNodeProcessor::mids$ = NULL;
              bool RemoveEmptyNonLeafQueryNodeProcessor::live$ = false;

              jclass RemoveEmptyNonLeafQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/RemoveEmptyNonLeafQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              RemoveEmptyNonLeafQueryNodeProcessor::RemoveEmptyNonLeafQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode RemoveEmptyNonLeafQueryNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_RemoveEmptyNonLeafQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_RemoveEmptyNonLeafQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_RemoveEmptyNonLeafQueryNodeProcessor_init_(t_RemoveEmptyNonLeafQueryNodeProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_RemoveEmptyNonLeafQueryNodeProcessor_process(t_RemoveEmptyNonLeafQueryNodeProcessor *self, PyObject *args);

              static PyMethodDef t_RemoveEmptyNonLeafQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_RemoveEmptyNonLeafQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RemoveEmptyNonLeafQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RemoveEmptyNonLeafQueryNodeProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(RemoveEmptyNonLeafQueryNodeProcessor, t_RemoveEmptyNonLeafQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, RemoveEmptyNonLeafQueryNodeProcessor, t_RemoveEmptyNonLeafQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_RemoveEmptyNonLeafQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(RemoveEmptyNonLeafQueryNodeProcessor), module, "RemoveEmptyNonLeafQueryNodeProcessor", 0);
              }

              void t_RemoveEmptyNonLeafQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(RemoveEmptyNonLeafQueryNodeProcessor).tp_dict, "class_", make_descriptor(RemoveEmptyNonLeafQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(RemoveEmptyNonLeafQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_RemoveEmptyNonLeafQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(RemoveEmptyNonLeafQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_RemoveEmptyNonLeafQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, RemoveEmptyNonLeafQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_RemoveEmptyNonLeafQueryNodeProcessor::wrap_Object(RemoveEmptyNonLeafQueryNodeProcessor(((t_RemoveEmptyNonLeafQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_RemoveEmptyNonLeafQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, RemoveEmptyNonLeafQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_RemoveEmptyNonLeafQueryNodeProcessor_init_(t_RemoveEmptyNonLeafQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                RemoveEmptyNonLeafQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = RemoveEmptyNonLeafQueryNodeProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_RemoveEmptyNonLeafQueryNodeProcessor_process(t_RemoveEmptyNonLeafQueryNodeProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(RemoveEmptyNonLeafQueryNodeProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/InPlaceMergeSorter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *InPlaceMergeSorter::class$ = NULL;
        jmethodID *InPlaceMergeSorter::mids$ = NULL;
        bool InPlaceMergeSorter::live$ = false;

        jclass InPlaceMergeSorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/InPlaceMergeSorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_sort_d8d154a6] = env->getMethodID(cls, "sort", "(II)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        InPlaceMergeSorter::InPlaceMergeSorter() : ::org::apache::lucene::util::Sorter(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void InPlaceMergeSorter::sort(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_sort_d8d154a6], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_InPlaceMergeSorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_InPlaceMergeSorter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_InPlaceMergeSorter_init_(t_InPlaceMergeSorter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_InPlaceMergeSorter_sort(t_InPlaceMergeSorter *self, PyObject *args);

        static PyMethodDef t_InPlaceMergeSorter__methods_[] = {
          DECLARE_METHOD(t_InPlaceMergeSorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_InPlaceMergeSorter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_InPlaceMergeSorter, sort, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(InPlaceMergeSorter, t_InPlaceMergeSorter, ::org::apache::lucene::util::Sorter, InPlaceMergeSorter, t_InPlaceMergeSorter_init_, 0, 0, 0, 0, 0);

        void t_InPlaceMergeSorter::install(PyObject *module)
        {
          installType(&PY_TYPE(InPlaceMergeSorter), module, "InPlaceMergeSorter", 0);
        }

        void t_InPlaceMergeSorter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(InPlaceMergeSorter).tp_dict, "class_", make_descriptor(InPlaceMergeSorter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(InPlaceMergeSorter).tp_dict, "wrapfn_", make_descriptor(t_InPlaceMergeSorter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(InPlaceMergeSorter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_InPlaceMergeSorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, InPlaceMergeSorter::initializeClass, 1)))
            return NULL;
          return t_InPlaceMergeSorter::wrap_Object(InPlaceMergeSorter(((t_InPlaceMergeSorter *) arg)->object.this$));
        }
        static PyObject *t_InPlaceMergeSorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, InPlaceMergeSorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_InPlaceMergeSorter_init_(t_InPlaceMergeSorter *self, PyObject *args, PyObject *kwds)
        {
          InPlaceMergeSorter object((jobject) NULL);

          INT_CALL(object = InPlaceMergeSorter());
          self->object = object;

          return 0;
        }

        static PyObject *t_InPlaceMergeSorter_sort(t_InPlaceMergeSorter *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.sort(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(InPlaceMergeSorter), (PyObject *) self, "sort", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "java/util/Comparator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefIterator::class$ = NULL;
        jmethodID *BytesRefIterator::mids$ = NULL;
        bool BytesRefIterator::live$ = false;
        BytesRefIterator *BytesRefIterator::EMPTY = NULL;

        jclass BytesRefIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new BytesRefIterator(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/util/BytesRefIterator;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Comparator BytesRefIterator::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        ::org::apache::lucene::util::BytesRef BytesRefIterator::next() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefIterator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefIterator_getComparator(t_BytesRefIterator *self);
        static PyObject *t_BytesRefIterator_next(t_BytesRefIterator *self);
        static PyObject *t_BytesRefIterator_get__comparator(t_BytesRefIterator *self, void *data);
        static PyGetSetDef t_BytesRefIterator__fields_[] = {
          DECLARE_GET_FIELD(t_BytesRefIterator, comparator),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BytesRefIterator__methods_[] = {
          DECLARE_METHOD(t_BytesRefIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefIterator, getComparator, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefIterator, next, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BytesRefIterator, t_BytesRefIterator, ::java::lang::Object, BytesRefIterator, abstract_init, PyObject_SelfIter, ((PyObject *(*)(t_BytesRefIterator *)) get_next< t_BytesRefIterator,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_BytesRefIterator__fields_, 0, 0);

        void t_BytesRefIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefIterator), module, "BytesRefIterator", 0);
        }

        void t_BytesRefIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BytesRefIterator).tp_dict, "class_", make_descriptor(BytesRefIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BytesRefIterator).tp_dict, "wrapfn_", make_descriptor(t_BytesRefIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BytesRefIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(BytesRefIterator::initializeClass);
          PyDict_SetItemString(PY_TYPE(BytesRefIterator).tp_dict, "EMPTY", make_descriptor(t_BytesRefIterator::wrap_Object(*BytesRefIterator::EMPTY)));
        }

        static PyObject *t_BytesRefIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefIterator::initializeClass, 1)))
            return NULL;
          return t_BytesRefIterator::wrap_Object(BytesRefIterator(((t_BytesRefIterator *) arg)->object.this$));
        }
        static PyObject *t_BytesRefIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BytesRefIterator_getComparator(t_BytesRefIterator *self)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_BytesRefIterator_next(t_BytesRefIterator *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.next());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_BytesRefIterator_get__comparator(t_BytesRefIterator *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/NamedSPILoader.h"
#include "java/lang/Class.h"
#include "java/lang/Iterable.h"
#include "java/util/Set.h"
#include "org/apache/lucene/util/NamedSPILoader$NamedSPI.h"
#include "java/util/Iterator.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *NamedSPILoader::class$ = NULL;
        jmethodID *NamedSPILoader::mids$ = NULL;
        bool NamedSPILoader::live$ = false;

        jclass NamedSPILoader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/NamedSPILoader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a5deaff4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Class;)V");
            mids$[mid_init$_6deee997] = env->getMethodID(cls, "<init>", "(Ljava/lang/Class;Ljava/lang/ClassLoader;)V");
            mids$[mid_availableServices_03e99967] = env->getMethodID(cls, "availableServices", "()Ljava/util/Set;");
            mids$[mid_checkServiceName_5fdc3f48] = env->getStaticMethodID(cls, "checkServiceName", "(Ljava/lang/String;)V");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_lookup_f2235407] = env->getMethodID(cls, "lookup", "(Ljava/lang/String;)Lorg/apache/lucene/util/NamedSPILoader$NamedSPI;");
            mids$[mid_reload_9110048d] = env->getMethodID(cls, "reload", "(Ljava/lang/ClassLoader;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NamedSPILoader::NamedSPILoader(const ::java::lang::Class & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a5deaff4, a0.this$)) {}

        NamedSPILoader::NamedSPILoader(const ::java::lang::Class & a0, const ::java::lang::ClassLoader & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6deee997, a0.this$, a1.this$)) {}

        ::java::util::Set NamedSPILoader::availableServices() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_availableServices_03e99967]));
        }

        void NamedSPILoader::checkServiceName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_checkServiceName_5fdc3f48], a0.this$);
        }

        ::java::util::Iterator NamedSPILoader::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        ::org::apache::lucene::util::NamedSPILoader$NamedSPI NamedSPILoader::lookup(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::util::NamedSPILoader$NamedSPI(env->callObjectMethod(this$, mids$[mid_lookup_f2235407], a0.this$));
        }

        void NamedSPILoader::reload(const ::java::lang::ClassLoader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reload_9110048d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_NamedSPILoader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NamedSPILoader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NamedSPILoader_of_(t_NamedSPILoader *self, PyObject *args);
        static int t_NamedSPILoader_init_(t_NamedSPILoader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NamedSPILoader_availableServices(t_NamedSPILoader *self);
        static PyObject *t_NamedSPILoader_checkServiceName(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NamedSPILoader_iterator(t_NamedSPILoader *self);
        static PyObject *t_NamedSPILoader_lookup(t_NamedSPILoader *self, PyObject *arg);
        static PyObject *t_NamedSPILoader_reload(t_NamedSPILoader *self, PyObject *arg);
        static PyObject *t_NamedSPILoader_get__parameters_(t_NamedSPILoader *self, void *data);
        static PyGetSetDef t_NamedSPILoader__fields_[] = {
          DECLARE_GET_FIELD(t_NamedSPILoader, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NamedSPILoader__methods_[] = {
          DECLARE_METHOD(t_NamedSPILoader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedSPILoader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedSPILoader, of_, METH_VARARGS),
          DECLARE_METHOD(t_NamedSPILoader, availableServices, METH_NOARGS),
          DECLARE_METHOD(t_NamedSPILoader, checkServiceName, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedSPILoader, iterator, METH_NOARGS),
          DECLARE_METHOD(t_NamedSPILoader, lookup, METH_O),
          DECLARE_METHOD(t_NamedSPILoader, reload, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NamedSPILoader, t_NamedSPILoader, ::java::lang::Object, NamedSPILoader, t_NamedSPILoader_init_, ((PyObject *(*)(t_NamedSPILoader *)) get_generic_iterator< t_NamedSPILoader >), 0, t_NamedSPILoader__fields_, 0, 0);
        PyObject *t_NamedSPILoader::wrap_Object(const NamedSPILoader& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NamedSPILoader::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NamedSPILoader *self = (t_NamedSPILoader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_NamedSPILoader::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NamedSPILoader::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NamedSPILoader *self = (t_NamedSPILoader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_NamedSPILoader::install(PyObject *module)
        {
          installType(&PY_TYPE(NamedSPILoader), module, "NamedSPILoader", 0);
          PyDict_SetItemString(PY_TYPE(NamedSPILoader).tp_dict, "NamedSPI", make_descriptor(&PY_TYPE(NamedSPILoader$NamedSPI)));
        }

        void t_NamedSPILoader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NamedSPILoader).tp_dict, "class_", make_descriptor(NamedSPILoader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NamedSPILoader).tp_dict, "wrapfn_", make_descriptor(t_NamedSPILoader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NamedSPILoader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NamedSPILoader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NamedSPILoader::initializeClass, 1)))
            return NULL;
          return t_NamedSPILoader::wrap_Object(NamedSPILoader(((t_NamedSPILoader *) arg)->object.this$));
        }
        static PyObject *t_NamedSPILoader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NamedSPILoader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NamedSPILoader_of_(t_NamedSPILoader *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_NamedSPILoader_init_(t_NamedSPILoader *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Class a0((jobject) NULL);
              PyTypeObject **p0;
              NamedSPILoader object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
              {
                INT_CALL(object = NamedSPILoader(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::Class a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::ClassLoader a1((jobject) NULL);
              NamedSPILoader object((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::lang::Class::initializeClass, ::java::lang::ClassLoader::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
              {
                INT_CALL(object = NamedSPILoader(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NamedSPILoader_availableServices(t_NamedSPILoader *self)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = self->object.availableServices());
          return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_NamedSPILoader_checkServiceName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::util::NamedSPILoader::checkServiceName(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "checkServiceName", arg);
          return NULL;
        }

        static PyObject *t_NamedSPILoader_iterator(t_NamedSPILoader *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
        }

        static PyObject *t_NamedSPILoader_lookup(t_NamedSPILoader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::NamedSPILoader$NamedSPI result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.lookup(a0));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::util::t_NamedSPILoader$NamedSPI::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "lookup", arg);
          return NULL;
        }

        static PyObject *t_NamedSPILoader_reload(t_NamedSPILoader *self, PyObject *arg)
        {
          ::java::lang::ClassLoader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.reload(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "reload", arg);
          return NULL;
        }
        static PyObject *t_NamedSPILoader_get__parameters_(t_NamedSPILoader *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/QueryParserTokenManager.h"
#include "java/lang/Class.h"
#include "java/io/PrintStream.h"
#include "org/apache/lucene/queryparser/classic/CharStream.h"
#include "org/apache/lucene/queryparser/classic/QueryParserConstants.h"
#include "org/apache/lucene/queryparser/classic/Token.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *QueryParserTokenManager::class$ = NULL;
          jmethodID *QueryParserTokenManager::mids$ = NULL;
          jfieldID *QueryParserTokenManager::fids$ = NULL;
          bool QueryParserTokenManager::live$ = false;
          JArray< jint > *QueryParserTokenManager::jjnewLexState = NULL;
          JArray< ::java::lang::String > *QueryParserTokenManager::jjstrLiteralImages = NULL;
          JArray< ::java::lang::String > *QueryParserTokenManager::lexStateNames = NULL;

          jclass QueryParserTokenManager::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/QueryParserTokenManager");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_24bde9d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/classic/CharStream;)V");
              mids$[mid_init$_27f0394b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/classic/CharStream;I)V");
              mids$[mid_ReInit_24bde9d3] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/classic/CharStream;)V");
              mids$[mid_ReInit_27f0394b] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/classic/CharStream;I)V");
              mids$[mid_SwitchTo_39c7bd3c] = env->getMethodID(cls, "SwitchTo", "(I)V");
              mids$[mid_getNextToken_1983cf96] = env->getMethodID(cls, "getNextToken", "()Lorg/apache/lucene/queryparser/classic/Token;");
              mids$[mid_setDebugStream_1b7c898b] = env->getMethodID(cls, "setDebugStream", "(Ljava/io/PrintStream;)V");
              mids$[mid_jjFillToken_1983cf96] = env->getMethodID(cls, "jjFillToken", "()Lorg/apache/lucene/queryparser/classic/Token;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_debugStream] = env->getFieldID(cls, "debugStream", "Ljava/io/PrintStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              jjnewLexState = new JArray< jint >(env->getStaticObjectField(cls, "jjnewLexState", "[I"));
              jjstrLiteralImages = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "jjstrLiteralImages", "[Ljava/lang/String;"));
              lexStateNames = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "lexStateNames", "[Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryParserTokenManager::QueryParserTokenManager(const ::org::apache::lucene::queryparser::classic::CharStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_24bde9d3, a0.this$)) {}

          QueryParserTokenManager::QueryParserTokenManager(const ::org::apache::lucene::queryparser::classic::CharStream & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_27f0394b, a0.this$, a1)) {}

          void QueryParserTokenManager::ReInit(const ::org::apache::lucene::queryparser::classic::CharStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_ReInit_24bde9d3], a0.this$);
          }

          void QueryParserTokenManager::ReInit(const ::org::apache::lucene::queryparser::classic::CharStream & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_ReInit_27f0394b], a0.this$, a1);
          }

          void QueryParserTokenManager::SwitchTo(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_SwitchTo_39c7bd3c], a0);
          }

          ::org::apache::lucene::queryparser::classic::Token QueryParserTokenManager::getNextToken() const
          {
            return ::org::apache::lucene::queryparser::classic::Token(env->callObjectMethod(this$, mids$[mid_getNextToken_1983cf96]));
          }

          void QueryParserTokenManager::setDebugStream(const ::java::io::PrintStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDebugStream_1b7c898b], a0.this$);
          }

          ::java::io::PrintStream QueryParserTokenManager::_get_debugStream() const
          {
            return ::java::io::PrintStream(env->getObjectField(this$, fids$[fid_debugStream]));
          }

          void QueryParserTokenManager::_set_debugStream(const ::java::io::PrintStream & a0) const
          {
            env->setObjectField(this$, fids$[fid_debugStream], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_QueryParserTokenManager_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParserTokenManager_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryParserTokenManager_init_(t_QueryParserTokenManager *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryParserTokenManager_ReInit(t_QueryParserTokenManager *self, PyObject *args);
          static PyObject *t_QueryParserTokenManager_SwitchTo(t_QueryParserTokenManager *self, PyObject *arg);
          static PyObject *t_QueryParserTokenManager_getNextToken(t_QueryParserTokenManager *self);
          static PyObject *t_QueryParserTokenManager_setDebugStream(t_QueryParserTokenManager *self, PyObject *arg);

          static int t_QueryParserTokenManager_set__debugStream(t_QueryParserTokenManager *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserTokenManager_get__nextToken(t_QueryParserTokenManager *self, void *data);
          static PyGetSetDef t_QueryParserTokenManager__fields_[] = {
            DECLARE_SET_FIELD(t_QueryParserTokenManager, debugStream),
            DECLARE_GET_FIELD(t_QueryParserTokenManager, nextToken),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryParserTokenManager__methods_[] = {
            DECLARE_METHOD(t_QueryParserTokenManager, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserTokenManager, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserTokenManager, ReInit, METH_VARARGS),
            DECLARE_METHOD(t_QueryParserTokenManager, SwitchTo, METH_O),
            DECLARE_METHOD(t_QueryParserTokenManager, getNextToken, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserTokenManager, setDebugStream, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryParserTokenManager, t_QueryParserTokenManager, ::java::lang::Object, QueryParserTokenManager, t_QueryParserTokenManager_init_, 0, 0, t_QueryParserTokenManager__fields_, 0, 0);

          void t_QueryParserTokenManager::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryParserTokenManager), module, "QueryParserTokenManager", 0);
          }

          void t_QueryParserTokenManager::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "class_", make_descriptor(QueryParserTokenManager::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "wrapfn_", make_descriptor(t_QueryParserTokenManager::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(QueryParserTokenManager::initializeClass);
            PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "jjnewLexState", make_descriptor(QueryParserTokenManager::jjnewLexState->wrap()));
            PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "jjstrLiteralImages", make_descriptor(JArray<jstring>(QueryParserTokenManager::jjstrLiteralImages->this$).wrap()));
            PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "lexStateNames", make_descriptor(JArray<jstring>(QueryParserTokenManager::lexStateNames->this$).wrap()));
          }

          static PyObject *t_QueryParserTokenManager_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryParserTokenManager::initializeClass, 1)))
              return NULL;
            return t_QueryParserTokenManager::wrap_Object(QueryParserTokenManager(((t_QueryParserTokenManager *) arg)->object.this$));
          }
          static PyObject *t_QueryParserTokenManager_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryParserTokenManager::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryParserTokenManager_init_(t_QueryParserTokenManager *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);
                QueryParserTokenManager object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0))
                {
                  INT_CALL(object = QueryParserTokenManager(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);
                jint a1;
                QueryParserTokenManager object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = QueryParserTokenManager(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_QueryParserTokenManager_ReInit(t_QueryParserTokenManager *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.ReInit(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);
                jint a1;

                if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(self->object.ReInit(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "ReInit", args);
            return NULL;
          }

          static PyObject *t_QueryParserTokenManager_SwitchTo(t_QueryParserTokenManager *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.SwitchTo(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "SwitchTo", arg);
            return NULL;
          }

          static PyObject *t_QueryParserTokenManager_getNextToken(t_QueryParserTokenManager *self)
          {
            ::org::apache::lucene::queryparser::classic::Token result((jobject) NULL);
            OBJ_CALL(result = self->object.getNextToken());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(result);
          }

          static PyObject *t_QueryParserTokenManager_setDebugStream(t_QueryParserTokenManager *self, PyObject *arg)
          {
            ::java::io::PrintStream a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setDebugStream(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDebugStream", arg);
            return NULL;
          }

          static int t_QueryParserTokenManager_set__debugStream(t_QueryParserTokenManager *self, PyObject *arg, void *data)
          {
            {
              ::java::io::PrintStream value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
              {
                INT_CALL(self->object.setDebugStream(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "debugStream", arg);
            return -1;
          }

          static PyObject *t_QueryParserTokenManager_get__nextToken(t_QueryParserTokenManager *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            OBJ_CALL(value = self->object.getNextToken());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/BoostQueryNode.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *BoostQueryNode::class$ = NULL;
              jmethodID *BoostQueryNode::mids$ = NULL;
              bool BoostQueryNode::live$ = false;

              jclass BoostQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/BoostQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_36cea640] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;F)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getChild_b387c5e6] = env->getMethodID(cls, "getChild", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getValue_54c6a176] = env->getMethodID(cls, "getValue", "()F");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BoostQueryNode::BoostQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0, jfloat a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_36cea640, a0.this$, a1)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode BoostQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode BoostQueryNode::getChild() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_getChild_b387c5e6]));
              }

              jfloat BoostQueryNode::getValue() const
              {
                return env->callFloatMethod(this$, mids$[mid_getValue_54c6a176]);
              }

              ::java::lang::CharSequence BoostQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String BoostQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_BoostQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BoostQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BoostQueryNode_init_(t_BoostQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_BoostQueryNode_cloneTree(t_BoostQueryNode *self, PyObject *args);
              static PyObject *t_BoostQueryNode_getChild(t_BoostQueryNode *self);
              static PyObject *t_BoostQueryNode_getValue(t_BoostQueryNode *self);
              static PyObject *t_BoostQueryNode_toQueryString(t_BoostQueryNode *self, PyObject *args);
              static PyObject *t_BoostQueryNode_toString(t_BoostQueryNode *self, PyObject *args);
              static PyObject *t_BoostQueryNode_get__child(t_BoostQueryNode *self, void *data);
              static PyObject *t_BoostQueryNode_get__value(t_BoostQueryNode *self, void *data);
              static PyGetSetDef t_BoostQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_BoostQueryNode, child),
                DECLARE_GET_FIELD(t_BoostQueryNode, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_BoostQueryNode__methods_[] = {
                DECLARE_METHOD(t_BoostQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BoostQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BoostQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_BoostQueryNode, getChild, METH_NOARGS),
                DECLARE_METHOD(t_BoostQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_BoostQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_BoostQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BoostQueryNode, t_BoostQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, BoostQueryNode, t_BoostQueryNode_init_, 0, 0, t_BoostQueryNode__fields_, 0, 0);

              void t_BoostQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(BoostQueryNode), module, "BoostQueryNode", 0);
              }

              void t_BoostQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BoostQueryNode).tp_dict, "class_", make_descriptor(BoostQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BoostQueryNode).tp_dict, "wrapfn_", make_descriptor(t_BoostQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BoostQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BoostQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BoostQueryNode::initializeClass, 1)))
                  return NULL;
                return t_BoostQueryNode::wrap_Object(BoostQueryNode(((t_BoostQueryNode *) arg)->object.this$));
              }
              static PyObject *t_BoostQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BoostQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BoostQueryNode_init_(t_BoostQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                jfloat a1;
                BoostQueryNode object((jobject) NULL);

                if (!parseArgs(args, "kF", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = BoostQueryNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_BoostQueryNode_cloneTree(t_BoostQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(BoostQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_BoostQueryNode_getChild(t_BoostQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_BoostQueryNode_getValue(t_BoostQueryNode *self)
              {
                jfloat result;
                OBJ_CALL(result = self->object.getValue());
                return PyFloat_FromDouble((double) result);
              }

              static PyObject *t_BoostQueryNode_toQueryString(t_BoostQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(BoostQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_BoostQueryNode_toString(t_BoostQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(BoostQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_BoostQueryNode_get__child(t_BoostQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(value);
              }

              static PyObject *t_BoostQueryNode_get__value(t_BoostQueryNode *self, void *data)
              {
                jfloat value;
                OBJ_CALL(value = self->object.getValue());
                return PyFloat_FromDouble((double) value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/lang/Class.h"
#include "java/lang/Iterable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/util/Iterator.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *Fields::class$ = NULL;
        jmethodID *Fields::mids$ = NULL;
        bool Fields::live$ = false;
        JArray< Fields > *Fields::EMPTY_ARRAY = NULL;

        jclass Fields::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/Fields");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getUniqueTermCount_54c6a17a] = env->getMethodID(cls, "getUniqueTermCount", "()J");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_terms_ee262ab4] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY_ARRAY = new JArray< Fields >(env->getStaticObjectField(cls, "EMPTY_ARRAY", "[Lorg/apache/lucene/index/Fields;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong Fields::getUniqueTermCount() const
        {
          return env->callLongMethod(this$, mids$[mid_getUniqueTermCount_54c6a17a]);
        }

        ::java::util::Iterator Fields::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        jint Fields::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        ::org::apache::lucene::index::Terms Fields::terms(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_ee262ab4], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_Fields_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Fields_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Fields_getUniqueTermCount(t_Fields *self);
        static PyObject *t_Fields_iterator(t_Fields *self);
        static PyObject *t_Fields_size(t_Fields *self);
        static PyObject *t_Fields_terms(t_Fields *self, PyObject *arg);
        static PyObject *t_Fields_get__uniqueTermCount(t_Fields *self, void *data);
        static PyGetSetDef t_Fields__fields_[] = {
          DECLARE_GET_FIELD(t_Fields, uniqueTermCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Fields__methods_[] = {
          DECLARE_METHOD(t_Fields, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Fields, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Fields, getUniqueTermCount, METH_NOARGS),
          DECLARE_METHOD(t_Fields, iterator, METH_NOARGS),
          DECLARE_METHOD(t_Fields, size, METH_NOARGS),
          DECLARE_METHOD(t_Fields, terms, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Fields, t_Fields, ::java::lang::Object, Fields, abstract_init, ((PyObject *(*)(t_Fields *)) get_iterator< t_Fields >), 0, t_Fields__fields_, 0, 0);

        void t_Fields::install(PyObject *module)
        {
          installType(&PY_TYPE(Fields), module, "Fields", 0);
        }

        void t_Fields::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Fields).tp_dict, "class_", make_descriptor(Fields::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Fields).tp_dict, "wrapfn_", make_descriptor(t_Fields::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Fields).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Fields::initializeClass);
          PyDict_SetItemString(PY_TYPE(Fields).tp_dict, "EMPTY_ARRAY", make_descriptor(JArray<jobject>(Fields::EMPTY_ARRAY->this$).wrap(t_Fields::wrap_jobject)));
        }

        static PyObject *t_Fields_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Fields::initializeClass, 1)))
            return NULL;
          return t_Fields::wrap_Object(Fields(((t_Fields *) arg)->object.this$));
        }
        static PyObject *t_Fields_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Fields::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Fields_getUniqueTermCount(t_Fields *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getUniqueTermCount());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_Fields_iterator(t_Fields *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_Fields_size(t_Fields *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_Fields_terms(t_Fields *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.terms(a0));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "terms", arg);
          return NULL;
        }

        static PyObject *t_Fields_get__uniqueTermCount(t_Fields *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getUniqueTermCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/FileDictionary.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "java/io/InputStream.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *FileDictionary::class$ = NULL;
          jmethodID *FileDictionary::mids$ = NULL;
          bool FileDictionary::live$ = false;
          ::java::lang::String *FileDictionary::DEFAULT_FIELD_DELIMITER = NULL;

          jclass FileDictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/FileDictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
              mids$[mid_init$_32277d42] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;Ljava/lang/String;)V");
              mids$[mid_init$_97a84c62] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;Ljava/lang/String;)V");
              mids$[mid_getEntryIterator_23dc46b1] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_FIELD_DELIMITER = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_FIELD_DELIMITER", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FileDictionary::FileDictionary(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          FileDictionary::FileDictionary(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

          FileDictionary::FileDictionary(const ::java::io::InputStream & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_32277d42, a0.this$, a1.this$)) {}

          FileDictionary::FileDictionary(const ::java::io::Reader & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_97a84c62, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::suggest::InputIterator FileDictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_23dc46b1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_FileDictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FileDictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FileDictionary_init_(t_FileDictionary *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FileDictionary_getEntryIterator(t_FileDictionary *self);
          static PyObject *t_FileDictionary_get__entryIterator(t_FileDictionary *self, void *data);
          static PyGetSetDef t_FileDictionary__fields_[] = {
            DECLARE_GET_FIELD(t_FileDictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FileDictionary__methods_[] = {
            DECLARE_METHOD(t_FileDictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FileDictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FileDictionary, getEntryIterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FileDictionary, t_FileDictionary, ::java::lang::Object, FileDictionary, t_FileDictionary_init_, 0, 0, t_FileDictionary__fields_, 0, 0);

          void t_FileDictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(FileDictionary), module, "FileDictionary", 0);
          }

          void t_FileDictionary::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FileDictionary).tp_dict, "class_", make_descriptor(FileDictionary::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FileDictionary).tp_dict, "wrapfn_", make_descriptor(t_FileDictionary::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FileDictionary).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(FileDictionary::initializeClass);
            PyDict_SetItemString(PY_TYPE(FileDictionary).tp_dict, "DEFAULT_FIELD_DELIMITER", make_descriptor(j2p(*FileDictionary::DEFAULT_FIELD_DELIMITER)));
          }

          static PyObject *t_FileDictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FileDictionary::initializeClass, 1)))
              return NULL;
            return t_FileDictionary::wrap_Object(FileDictionary(((t_FileDictionary *) arg)->object.this$));
          }
          static PyObject *t_FileDictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FileDictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FileDictionary_init_(t_FileDictionary *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                FileDictionary object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = FileDictionary(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::InputStream a0((jobject) NULL);
                FileDictionary object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                {
                  INT_CALL(object = FileDictionary(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::io::InputStream a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                FileDictionary object((jobject) NULL);

                if (!parseArgs(args, "ks", ::java::io::InputStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = FileDictionary(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                FileDictionary object((jobject) NULL);

                if (!parseArgs(args, "ks", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = FileDictionary(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FileDictionary_getEntryIterator(t_FileDictionary *self)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
          }

          static PyObject *t_FileDictionary_get__entryIterator(t_FileDictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/CapitalizationFilter.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *CapitalizationFilter::class$ = NULL;
          jmethodID *CapitalizationFilter::mids$ = NULL;
          bool CapitalizationFilter::live$ = false;
          jint CapitalizationFilter::DEFAULT_MAX_TOKEN_LENGTH = (jint) 0;
          jint CapitalizationFilter::DEFAULT_MAX_WORD_COUNT = (jint) 0;

          jclass CapitalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/CapitalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_e833f6a2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;ZLorg/apache/lucene/analysis/util/CharArraySet;ZLjava/util/Collection;III)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_TOKEN_LENGTH = env->getStaticIntField(cls, "DEFAULT_MAX_TOKEN_LENGTH");
              DEFAULT_MAX_WORD_COUNT = env->getStaticIntField(cls, "DEFAULT_MAX_WORD_COUNT");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CapitalizationFilter::CapitalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          CapitalizationFilter::CapitalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jboolean a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2, jboolean a3, const ::java::util::Collection & a4, jint a5, jint a6, jint a7) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_e833f6a2, a0.this$, a1, a2.this$, a3, a4.this$, a5, a6, a7)) {}

          jboolean CapitalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_CapitalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CapitalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CapitalizationFilter_init_(t_CapitalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CapitalizationFilter_incrementToken(t_CapitalizationFilter *self, PyObject *args);

          static PyMethodDef t_CapitalizationFilter__methods_[] = {
            DECLARE_METHOD(t_CapitalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CapitalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CapitalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CapitalizationFilter, t_CapitalizationFilter, ::org::apache::lucene::analysis::TokenFilter, CapitalizationFilter, t_CapitalizationFilter_init_, 0, 0, 0, 0, 0);

          void t_CapitalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CapitalizationFilter), module, "CapitalizationFilter", 0);
          }

          void t_CapitalizationFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CapitalizationFilter).tp_dict, "class_", make_descriptor(CapitalizationFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilter).tp_dict, "wrapfn_", make_descriptor(t_CapitalizationFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CapitalizationFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(CapitalizationFilter).tp_dict, "DEFAULT_MAX_TOKEN_LENGTH", make_descriptor(CapitalizationFilter::DEFAULT_MAX_TOKEN_LENGTH));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilter).tp_dict, "DEFAULT_MAX_WORD_COUNT", make_descriptor(CapitalizationFilter::DEFAULT_MAX_WORD_COUNT));
          }

          static PyObject *t_CapitalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CapitalizationFilter::initializeClass, 1)))
              return NULL;
            return t_CapitalizationFilter::wrap_Object(CapitalizationFilter(((t_CapitalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_CapitalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CapitalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CapitalizationFilter_init_(t_CapitalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                CapitalizationFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = CapitalizationFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 8:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jboolean a1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                jboolean a3;
                ::java::util::Collection a4((jobject) NULL);
                PyTypeObject **p4;
                jint a5;
                jint a6;
                jint a7;
                CapitalizationFilter object((jobject) NULL);

                if (!parseArgs(args, "kZKZKIII", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a3, &a4, &p4, ::java::util::t_Collection::parameters_, &a5, &a6, &a7))
                {
                  INT_CALL(object = CapitalizationFilter(a0, a1, a2, a3, a4, a5, a6, a7));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CapitalizationFilter_incrementToken(t_CapitalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CapitalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ComplexExplanation.h"
#include "java/lang/Boolean.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ComplexExplanation::class$ = NULL;
        jmethodID *ComplexExplanation::mids$ = NULL;
        bool ComplexExplanation::live$ = false;

        jclass ComplexExplanation::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ComplexExplanation");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_2ed007a2] = env->getMethodID(cls, "<init>", "(ZFLjava/lang/String;)V");
            mids$[mid_getMatch_34327cc3] = env->getMethodID(cls, "getMatch", "()Ljava/lang/Boolean;");
            mids$[mid_isMatch_54c6a16a] = env->getMethodID(cls, "isMatch", "()Z");
            mids$[mid_setMatch_d07f0c8e] = env->getMethodID(cls, "setMatch", "(Ljava/lang/Boolean;)V");
            mids$[mid_getSummary_14c7b5c5] = env->getMethodID(cls, "getSummary", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ComplexExplanation::ComplexExplanation() : ::org::apache::lucene::search::Explanation(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ComplexExplanation::ComplexExplanation(jboolean a0, jfloat a1, const ::java::lang::String & a2) : ::org::apache::lucene::search::Explanation(env->newObject(initializeClass, &mids$, mid_init$_2ed007a2, a0, a1, a2.this$)) {}

        ::java::lang::Boolean ComplexExplanation::getMatch() const
        {
          return ::java::lang::Boolean(env->callObjectMethod(this$, mids$[mid_getMatch_34327cc3]));
        }

        jboolean ComplexExplanation::isMatch() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isMatch_54c6a16a]);
        }

        void ComplexExplanation::setMatch(const ::java::lang::Boolean & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMatch_d07f0c8e], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ComplexExplanation_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ComplexExplanation_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ComplexExplanation_init_(t_ComplexExplanation *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ComplexExplanation_getMatch(t_ComplexExplanation *self);
        static PyObject *t_ComplexExplanation_isMatch(t_ComplexExplanation *self, PyObject *args);
        static PyObject *t_ComplexExplanation_setMatch(t_ComplexExplanation *self, PyObject *arg);
        static PyObject *t_ComplexExplanation_get__match(t_ComplexExplanation *self, void *data);
        static int t_ComplexExplanation_set__match(t_ComplexExplanation *self, PyObject *arg, void *data);
        static PyGetSetDef t_ComplexExplanation__fields_[] = {
          DECLARE_GETSET_FIELD(t_ComplexExplanation, match),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ComplexExplanation__methods_[] = {
          DECLARE_METHOD(t_ComplexExplanation, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ComplexExplanation, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ComplexExplanation, getMatch, METH_NOARGS),
          DECLARE_METHOD(t_ComplexExplanation, isMatch, METH_VARARGS),
          DECLARE_METHOD(t_ComplexExplanation, setMatch, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ComplexExplanation, t_ComplexExplanation, ::org::apache::lucene::search::Explanation, ComplexExplanation, t_ComplexExplanation_init_, 0, 0, t_ComplexExplanation__fields_, 0, 0);

        void t_ComplexExplanation::install(PyObject *module)
        {
          installType(&PY_TYPE(ComplexExplanation), module, "ComplexExplanation", 0);
        }

        void t_ComplexExplanation::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ComplexExplanation).tp_dict, "class_", make_descriptor(ComplexExplanation::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ComplexExplanation).tp_dict, "wrapfn_", make_descriptor(t_ComplexExplanation::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ComplexExplanation).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ComplexExplanation_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ComplexExplanation::initializeClass, 1)))
            return NULL;
          return t_ComplexExplanation::wrap_Object(ComplexExplanation(((t_ComplexExplanation *) arg)->object.this$));
        }
        static PyObject *t_ComplexExplanation_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ComplexExplanation::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ComplexExplanation_init_(t_ComplexExplanation *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ComplexExplanation object((jobject) NULL);

              INT_CALL(object = ComplexExplanation());
              self->object = object;
              break;
            }
            goto err;
           case 3:
            {
              jboolean a0;
              jfloat a1;
              ::java::lang::String a2((jobject) NULL);
              ComplexExplanation object((jobject) NULL);

              if (!parseArgs(args, "ZFs", &a0, &a1, &a2))
              {
                INT_CALL(object = ComplexExplanation(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ComplexExplanation_getMatch(t_ComplexExplanation *self)
        {
          ::java::lang::Boolean result((jobject) NULL);
          OBJ_CALL(result = self->object.getMatch());
          return ::java::lang::t_Boolean::wrap_Object(result);
        }

        static PyObject *t_ComplexExplanation_isMatch(t_ComplexExplanation *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isMatch());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(ComplexExplanation), (PyObject *) self, "isMatch", args, 2);
        }

        static PyObject *t_ComplexExplanation_setMatch(t_ComplexExplanation *self, PyObject *arg)
        {
          ::java::lang::Boolean a0((jobject) NULL);

          if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Boolean), &a0))
          {
            OBJ_CALL(self->object.setMatch(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMatch", arg);
          return NULL;
        }

        static PyObject *t_ComplexExplanation_get__match(t_ComplexExplanation *self, void *data)
        {
          ::java::lang::Boolean value((jobject) NULL);
          OBJ_CALL(value = self->object.getMatch());
          return ::java::lang::t_Boolean::wrap_Object(value);
        }
        static int t_ComplexExplanation_set__match(t_ComplexExplanation *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Boolean value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Boolean), &value))
            {
              INT_CALL(self->object.setMatch(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "match", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractFirstPassGroupingCollector::class$ = NULL;
          jmethodID *AbstractFirstPassGroupingCollector::mids$ = NULL;
          bool AbstractFirstPassGroupingCollector::live$ = false;

          jclass AbstractFirstPassGroupingCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d50ac7b4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Sort;I)V");
              mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
              mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
              mids$[mid_getTopGroups_1d16f88d] = env->getMethodID(cls, "getTopGroups", "(IZ)Ljava/util/Collection;");
              mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
              mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
              mids$[mid_getDocGroupValue_29be6a55] = env->getMethodID(cls, "getDocGroupValue", "(I)Ljava/lang/Object;");
              mids$[mid_copyDocGroupValue_537d5bdf] = env->getMethodID(cls, "copyDocGroupValue", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractFirstPassGroupingCollector::AbstractFirstPassGroupingCollector(const ::org::apache::lucene::search::Sort & a0, jint a1) : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_d50ac7b4, a0.this$, a1)) {}

          jboolean AbstractFirstPassGroupingCollector::acceptsDocsOutOfOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
          }

          void AbstractFirstPassGroupingCollector::collect(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
          }

          ::java::util::Collection AbstractFirstPassGroupingCollector::getTopGroups(jint a0, jboolean a1) const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getTopGroups_1d16f88d], a0, a1));
          }

          void AbstractFirstPassGroupingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
          }

          void AbstractFirstPassGroupingCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractFirstPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractFirstPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractFirstPassGroupingCollector_of_(t_AbstractFirstPassGroupingCollector *self, PyObject *args);
          static int t_AbstractFirstPassGroupingCollector_init_(t_AbstractFirstPassGroupingCollector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractFirstPassGroupingCollector_acceptsDocsOutOfOrder(t_AbstractFirstPassGroupingCollector *self, PyObject *args);
          static PyObject *t_AbstractFirstPassGroupingCollector_collect(t_AbstractFirstPassGroupingCollector *self, PyObject *args);
          static PyObject *t_AbstractFirstPassGroupingCollector_getTopGroups(t_AbstractFirstPassGroupingCollector *self, PyObject *args);
          static PyObject *t_AbstractFirstPassGroupingCollector_setNextReader(t_AbstractFirstPassGroupingCollector *self, PyObject *args);
          static PyObject *t_AbstractFirstPassGroupingCollector_setScorer(t_AbstractFirstPassGroupingCollector *self, PyObject *args);
          static int t_AbstractFirstPassGroupingCollector_set__nextReader(t_AbstractFirstPassGroupingCollector *self, PyObject *arg, void *data);
          static int t_AbstractFirstPassGroupingCollector_set__scorer(t_AbstractFirstPassGroupingCollector *self, PyObject *arg, void *data);
          static PyObject *t_AbstractFirstPassGroupingCollector_get__parameters_(t_AbstractFirstPassGroupingCollector *self, void *data);
          static PyGetSetDef t_AbstractFirstPassGroupingCollector__fields_[] = {
            DECLARE_SET_FIELD(t_AbstractFirstPassGroupingCollector, nextReader),
            DECLARE_SET_FIELD(t_AbstractFirstPassGroupingCollector, scorer),
            DECLARE_GET_FIELD(t_AbstractFirstPassGroupingCollector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractFirstPassGroupingCollector__methods_[] = {
            DECLARE_METHOD(t_AbstractFirstPassGroupingCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractFirstPassGroupingCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractFirstPassGroupingCollector, of_, METH_VARARGS),
            DECLARE_METHOD(t_AbstractFirstPassGroupingCollector, acceptsDocsOutOfOrder, METH_VARARGS),
            DECLARE_METHOD(t_AbstractFirstPassGroupingCollector, collect, METH_VARARGS),
            DECLARE_METHOD(t_AbstractFirstPassGroupingCollector, getTopGroups, METH_VARARGS),
            DECLARE_METHOD(t_AbstractFirstPassGroupingCollector, setNextReader, METH_VARARGS),
            DECLARE_METHOD(t_AbstractFirstPassGroupingCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractFirstPassGroupingCollector, t_AbstractFirstPassGroupingCollector, ::org::apache::lucene::search::Collector, AbstractFirstPassGroupingCollector, t_AbstractFirstPassGroupingCollector_init_, 0, 0, t_AbstractFirstPassGroupingCollector__fields_, 0, 0);
          PyObject *t_AbstractFirstPassGroupingCollector::wrap_Object(const AbstractFirstPassGroupingCollector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractFirstPassGroupingCollector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractFirstPassGroupingCollector *self = (t_AbstractFirstPassGroupingCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractFirstPassGroupingCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractFirstPassGroupingCollector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractFirstPassGroupingCollector *self = (t_AbstractFirstPassGroupingCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractFirstPassGroupingCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractFirstPassGroupingCollector), module, "AbstractFirstPassGroupingCollector", 0);
          }

          void t_AbstractFirstPassGroupingCollector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractFirstPassGroupingCollector).tp_dict, "class_", make_descriptor(AbstractFirstPassGroupingCollector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractFirstPassGroupingCollector).tp_dict, "wrapfn_", make_descriptor(t_AbstractFirstPassGroupingCollector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractFirstPassGroupingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractFirstPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractFirstPassGroupingCollector::initializeClass, 1)))
              return NULL;
            return t_AbstractFirstPassGroupingCollector::wrap_Object(AbstractFirstPassGroupingCollector(((t_AbstractFirstPassGroupingCollector *) arg)->object.this$));
          }
          static PyObject *t_AbstractFirstPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractFirstPassGroupingCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractFirstPassGroupingCollector_of_(t_AbstractFirstPassGroupingCollector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_AbstractFirstPassGroupingCollector_init_(t_AbstractFirstPassGroupingCollector *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Sort a0((jobject) NULL);
            jint a1;
            AbstractFirstPassGroupingCollector object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1))
            {
              INT_CALL(object = AbstractFirstPassGroupingCollector(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AbstractFirstPassGroupingCollector_acceptsDocsOutOfOrder(t_AbstractFirstPassGroupingCollector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractFirstPassGroupingCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
          }

          static PyObject *t_AbstractFirstPassGroupingCollector_collect(t_AbstractFirstPassGroupingCollector *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.collect(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractFirstPassGroupingCollector), (PyObject *) self, "collect", args, 2);
          }

          static PyObject *t_AbstractFirstPassGroupingCollector_getTopGroups(t_AbstractFirstPassGroupingCollector *self, PyObject *args)
          {
            jint a0;
            jboolean a1;
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, "IZ", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getTopGroups(a0, a1));
              return ::java::util::t_Collection::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getTopGroups", args);
            return NULL;
          }

          static PyObject *t_AbstractFirstPassGroupingCollector_setNextReader(t_AbstractFirstPassGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setNextReader(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractFirstPassGroupingCollector), (PyObject *) self, "setNextReader", args, 2);
          }

          static PyObject *t_AbstractFirstPassGroupingCollector_setScorer(t_AbstractFirstPassGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorer a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractFirstPassGroupingCollector), (PyObject *) self, "setScorer", args, 2);
          }
          static PyObject *t_AbstractFirstPassGroupingCollector_get__parameters_(t_AbstractFirstPassGroupingCollector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_AbstractFirstPassGroupingCollector_set__nextReader(t_AbstractFirstPassGroupingCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
              {
                INT_CALL(self->object.setNextReader(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
            return -1;
          }

          static int t_AbstractFirstPassGroupingCollector_set__scorer(t_AbstractFirstPassGroupingCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Util$TopResults.h"
#include "java/lang/Iterable.h"
#include "java/util/Iterator.h"
#include "org/apache/lucene/util/fst/Util$Result.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Util$TopResults::class$ = NULL;
          jmethodID *Util$TopResults::mids$ = NULL;
          jfieldID *Util$TopResults::fids$ = NULL;
          bool Util$TopResults::live$ = false;

          jclass Util$TopResults::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Util$TopResults");

              mids$ = new jmethodID[max_mid];
              mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_isComplete] = env->getFieldID(cls, "isComplete", "Z");
              fids$[fid_topN] = env->getFieldID(cls, "topN", "Ljava/util/List;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::Iterator Util$TopResults::iterator() const
          {
            return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
          }

          jboolean Util$TopResults::_get_isComplete() const
          {
            return env->getBooleanField(this$, fids$[fid_isComplete]);
          }

          ::java::util::List Util$TopResults::_get_topN() const
          {
            return ::java::util::List(env->getObjectField(this$, fids$[fid_topN]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Util$TopResults_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$TopResults_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$TopResults_of_(t_Util$TopResults *self, PyObject *args);
          static PyObject *t_Util$TopResults_iterator(t_Util$TopResults *self);
          static PyObject *t_Util$TopResults_get__isComplete(t_Util$TopResults *self, void *data);
          static PyObject *t_Util$TopResults_get__topN(t_Util$TopResults *self, void *data);

          static PyObject *t_Util$TopResults_get__parameters_(t_Util$TopResults *self, void *data);
          static PyGetSetDef t_Util$TopResults__fields_[] = {
            DECLARE_GET_FIELD(t_Util$TopResults, isComplete),
            DECLARE_GET_FIELD(t_Util$TopResults, topN),
            DECLARE_GET_FIELD(t_Util$TopResults, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Util$TopResults__methods_[] = {
            DECLARE_METHOD(t_Util$TopResults, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$TopResults, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$TopResults, of_, METH_VARARGS),
            DECLARE_METHOD(t_Util$TopResults, iterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Util$TopResults, t_Util$TopResults, ::java::lang::Object, Util$TopResults, abstract_init, ((PyObject *(*)(t_Util$TopResults *)) get_generic_iterator< t_Util$TopResults >), 0, t_Util$TopResults__fields_, 0, 0);
          PyObject *t_Util$TopResults::wrap_Object(const Util$TopResults& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$TopResults::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$TopResults *self = (t_Util$TopResults *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Util$TopResults::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$TopResults::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$TopResults *self = (t_Util$TopResults *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Util$TopResults::install(PyObject *module)
          {
            installType(&PY_TYPE(Util$TopResults), module, "Util$TopResults", 0);
          }

          void t_Util$TopResults::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Util$TopResults).tp_dict, "class_", make_descriptor(Util$TopResults::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Util$TopResults).tp_dict, "wrapfn_", make_descriptor(t_Util$TopResults::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Util$TopResults).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Util$TopResults_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Util$TopResults::initializeClass, 1)))
              return NULL;
            return t_Util$TopResults::wrap_Object(Util$TopResults(((t_Util$TopResults *) arg)->object.this$));
          }
          static PyObject *t_Util$TopResults_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Util$TopResults::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Util$TopResults_of_(t_Util$TopResults *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_Util$TopResults_iterator(t_Util$TopResults *self)
          {
            ::java::util::Iterator result((jobject) NULL);
            OBJ_CALL(result = self->object.iterator());
            return ::java::util::t_Iterator::wrap_Object(result);
          }
          static PyObject *t_Util$TopResults_get__parameters_(t_Util$TopResults *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Util$TopResults_get__isComplete(t_Util$TopResults *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_isComplete());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_Util$TopResults_get__topN(t_Util$TopResults *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object._get_topN());
            return ::java::util::t_List::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ScoreDoc::class$ = NULL;
        jmethodID *ScoreDoc::mids$ = NULL;
        jfieldID *ScoreDoc::fids$ = NULL;
        bool ScoreDoc::live$ = false;

        jclass ScoreDoc::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ScoreDoc");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_abdf2c51] = env->getMethodID(cls, "<init>", "(IF)V");
            mids$[mid_init$_776c6331] = env->getMethodID(cls, "<init>", "(IFI)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_doc] = env->getFieldID(cls, "doc", "I");
            fids$[fid_score] = env->getFieldID(cls, "score", "F");
            fids$[fid_shardIndex] = env->getFieldID(cls, "shardIndex", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ScoreDoc::ScoreDoc(jint a0, jfloat a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_abdf2c51, a0, a1)) {}

        ScoreDoc::ScoreDoc(jint a0, jfloat a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_776c6331, a0, a1, a2)) {}

        ::java::lang::String ScoreDoc::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jint ScoreDoc::_get_doc() const
        {
          return env->getIntField(this$, fids$[fid_doc]);
        }

        void ScoreDoc::_set_doc(jint a0) const
        {
          env->setIntField(this$, fids$[fid_doc], a0);
        }

        jfloat ScoreDoc::_get_score() const
        {
          return env->getFloatField(this$, fids$[fid_score]);
        }

        void ScoreDoc::_set_score(jfloat a0) const
        {
          env->setFloatField(this$, fids$[fid_score], a0);
        }

        jint ScoreDoc::_get_shardIndex() const
        {
          return env->getIntField(this$, fids$[fid_shardIndex]);
        }

        void ScoreDoc::_set_shardIndex(jint a0) const
        {
          env->setIntField(this$, fids$[fid_shardIndex], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ScoreDoc_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ScoreDoc_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ScoreDoc_init_(t_ScoreDoc *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ScoreDoc_toString(t_ScoreDoc *self, PyObject *args);
        static PyObject *t_ScoreDoc_get__doc(t_ScoreDoc *self, void *data);
        static int t_ScoreDoc_set__doc(t_ScoreDoc *self, PyObject *arg, void *data);
        static PyObject *t_ScoreDoc_get__score(t_ScoreDoc *self, void *data);
        static int t_ScoreDoc_set__score(t_ScoreDoc *self, PyObject *arg, void *data);
        static PyObject *t_ScoreDoc_get__shardIndex(t_ScoreDoc *self, void *data);
        static int t_ScoreDoc_set__shardIndex(t_ScoreDoc *self, PyObject *arg, void *data);

        static PyGetSetDef t_ScoreDoc__fields_[] = {
          DECLARE_GETSET_FIELD(t_ScoreDoc, doc),
          DECLARE_GETSET_FIELD(t_ScoreDoc, score),
          DECLARE_GETSET_FIELD(t_ScoreDoc, shardIndex),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ScoreDoc__methods_[] = {
          DECLARE_METHOD(t_ScoreDoc, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScoreDoc, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScoreDoc, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ScoreDoc, t_ScoreDoc, ::java::lang::Object, ScoreDoc, t_ScoreDoc_init_, 0, 0, t_ScoreDoc__fields_, 0, 0);

        void t_ScoreDoc::install(PyObject *module)
        {
          installType(&PY_TYPE(ScoreDoc), module, "ScoreDoc", 0);
        }

        void t_ScoreDoc::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ScoreDoc).tp_dict, "class_", make_descriptor(ScoreDoc::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ScoreDoc).tp_dict, "wrapfn_", make_descriptor(t_ScoreDoc::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ScoreDoc).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ScoreDoc_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ScoreDoc::initializeClass, 1)))
            return NULL;
          return t_ScoreDoc::wrap_Object(ScoreDoc(((t_ScoreDoc *) arg)->object.this$));
        }
        static PyObject *t_ScoreDoc_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ScoreDoc::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ScoreDoc_init_(t_ScoreDoc *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jint a0;
              jfloat a1;
              ScoreDoc object((jobject) NULL);

              if (!parseArgs(args, "IF", &a0, &a1))
              {
                INT_CALL(object = ScoreDoc(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              jint a0;
              jfloat a1;
              jint a2;
              ScoreDoc object((jobject) NULL);

              if (!parseArgs(args, "IFI", &a0, &a1, &a2))
              {
                INT_CALL(object = ScoreDoc(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ScoreDoc_toString(t_ScoreDoc *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(ScoreDoc), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_ScoreDoc_get__doc(t_ScoreDoc *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_doc());
          return PyInt_FromLong((long) value);
        }
        static int t_ScoreDoc_set__doc(t_ScoreDoc *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_doc(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "doc", arg);
          return -1;
        }

        static PyObject *t_ScoreDoc_get__score(t_ScoreDoc *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object._get_score());
          return PyFloat_FromDouble((double) value);
        }
        static int t_ScoreDoc_set__score(t_ScoreDoc *self, PyObject *arg, void *data)
        {
          jfloat value;
          if (!parseArg(arg, "F", &value))
          {
            INT_CALL(self->object._set_score(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "score", arg);
          return -1;
        }

        static PyObject *t_ScoreDoc_get__shardIndex(t_ScoreDoc *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_shardIndex());
          return PyInt_FromLong((long) value);
        }
        static int t_ScoreDoc_set__shardIndex(t_ScoreDoc *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_shardIndex(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "shardIndex", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/TopOrdAndFloatQueue.h"
#include "org/apache/lucene/facet/TopOrdAndFloatQueue$OrdAndValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *TopOrdAndFloatQueue::class$ = NULL;
        jmethodID *TopOrdAndFloatQueue::mids$ = NULL;
        bool TopOrdAndFloatQueue::live$ = false;

        jclass TopOrdAndFloatQueue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/TopOrdAndFloatQueue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_lessThan_e2d62086] = env->getMethodID(cls, "lessThan", "(Lorg/apache/lucene/facet/TopOrdAndFloatQueue$OrdAndValue;Lorg/apache/lucene/facet/TopOrdAndFloatQueue$OrdAndValue;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopOrdAndFloatQueue::TopOrdAndFloatQueue(jint a0) : ::org::apache::lucene::util::PriorityQueue(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_TopOrdAndFloatQueue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndFloatQueue_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndFloatQueue_of_(t_TopOrdAndFloatQueue *self, PyObject *args);
        static int t_TopOrdAndFloatQueue_init_(t_TopOrdAndFloatQueue *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopOrdAndFloatQueue_get__parameters_(t_TopOrdAndFloatQueue *self, void *data);
        static PyGetSetDef t_TopOrdAndFloatQueue__fields_[] = {
          DECLARE_GET_FIELD(t_TopOrdAndFloatQueue, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopOrdAndFloatQueue__methods_[] = {
          DECLARE_METHOD(t_TopOrdAndFloatQueue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndFloatQueue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndFloatQueue, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopOrdAndFloatQueue, t_TopOrdAndFloatQueue, ::org::apache::lucene::util::PriorityQueue, TopOrdAndFloatQueue, t_TopOrdAndFloatQueue_init_, 0, 0, t_TopOrdAndFloatQueue__fields_, 0, 0);
        PyObject *t_TopOrdAndFloatQueue::wrap_Object(const TopOrdAndFloatQueue& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndFloatQueue::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndFloatQueue *self = (t_TopOrdAndFloatQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopOrdAndFloatQueue::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndFloatQueue::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndFloatQueue *self = (t_TopOrdAndFloatQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopOrdAndFloatQueue::install(PyObject *module)
        {
          installType(&PY_TYPE(TopOrdAndFloatQueue), module, "TopOrdAndFloatQueue", 0);
          PyDict_SetItemString(PY_TYPE(TopOrdAndFloatQueue).tp_dict, "OrdAndValue", make_descriptor(&PY_TYPE(TopOrdAndFloatQueue$OrdAndValue)));
        }

        void t_TopOrdAndFloatQueue::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopOrdAndFloatQueue).tp_dict, "class_", make_descriptor(TopOrdAndFloatQueue::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopOrdAndFloatQueue).tp_dict, "wrapfn_", make_descriptor(t_TopOrdAndFloatQueue::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopOrdAndFloatQueue).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopOrdAndFloatQueue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopOrdAndFloatQueue::initializeClass, 1)))
            return NULL;
          return t_TopOrdAndFloatQueue::wrap_Object(TopOrdAndFloatQueue(((t_TopOrdAndFloatQueue *) arg)->object.this$));
        }
        static PyObject *t_TopOrdAndFloatQueue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopOrdAndFloatQueue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopOrdAndFloatQueue_of_(t_TopOrdAndFloatQueue *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_TopOrdAndFloatQueue_init_(t_TopOrdAndFloatQueue *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          TopOrdAndFloatQueue object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = TopOrdAndFloatQueue(a0));
            self->object = object;
            self->parameters[0] = &::org::apache::lucene::facet::PY_TYPE(TopOrdAndFloatQueue$OrdAndValue);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_TopOrdAndFloatQueue_get__parameters_(t_TopOrdAndFloatQueue *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/StandardFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *StandardFilter::class$ = NULL;
          jmethodID *StandardFilter::mids$ = NULL;
          bool StandardFilter::live$ = false;

          jclass StandardFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/StandardFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_incrementTokenClassic_54c6a16a] = env->getMethodID(cls, "incrementTokenClassic", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StandardFilter::StandardFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          StandardFilter::StandardFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          jboolean StandardFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          jboolean StandardFilter::incrementTokenClassic() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementTokenClassic_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_StandardFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StandardFilter_init_(t_StandardFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StandardFilter_incrementToken(t_StandardFilter *self, PyObject *args);
          static PyObject *t_StandardFilter_incrementTokenClassic(t_StandardFilter *self);

          static PyMethodDef t_StandardFilter__methods_[] = {
            DECLARE_METHOD(t_StandardFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_StandardFilter, incrementTokenClassic, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StandardFilter, t_StandardFilter, ::org::apache::lucene::analysis::TokenFilter, StandardFilter, t_StandardFilter_init_, 0, 0, 0, 0, 0);

          void t_StandardFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(StandardFilter), module, "StandardFilter", 0);
          }

          void t_StandardFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StandardFilter).tp_dict, "class_", make_descriptor(StandardFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StandardFilter).tp_dict, "wrapfn_", make_descriptor(t_StandardFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StandardFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StandardFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StandardFilter::initializeClass, 1)))
              return NULL;
            return t_StandardFilter::wrap_Object(StandardFilter(((t_StandardFilter *) arg)->object.this$));
          }
          static PyObject *t_StandardFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StandardFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StandardFilter_init_(t_StandardFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                StandardFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = StandardFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                StandardFilter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = StandardFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StandardFilter_incrementToken(t_StandardFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(StandardFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_StandardFilter_incrementTokenClassic(t_StandardFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.incrementTokenClassic());
            Py_RETURN_BOOL(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserTokenManager.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/Token.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserConstants.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/CharStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *StandardSyntaxParserTokenManager::class$ = NULL;
              jmethodID *StandardSyntaxParserTokenManager::mids$ = NULL;
              jfieldID *StandardSyntaxParserTokenManager::fids$ = NULL;
              bool StandardSyntaxParserTokenManager::live$ = false;
              JArray< jint > *StandardSyntaxParserTokenManager::jjnewLexState = NULL;
              JArray< ::java::lang::String > *StandardSyntaxParserTokenManager::jjstrLiteralImages = NULL;
              JArray< ::java::lang::String > *StandardSyntaxParserTokenManager::lexStateNames = NULL;

              jclass StandardSyntaxParserTokenManager::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserTokenManager");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_8af5fa89] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/CharStream;)V");
                  mids$[mid_init$_954657e1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/CharStream;I)V");
                  mids$[mid_ReInit_8af5fa89] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/CharStream;)V");
                  mids$[mid_ReInit_954657e1] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/CharStream;I)V");
                  mids$[mid_SwitchTo_39c7bd3c] = env->getMethodID(cls, "SwitchTo", "(I)V");
                  mids$[mid_getNextToken_5eb4cff8] = env->getMethodID(cls, "getNextToken", "()Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  mids$[mid_setDebugStream_1b7c898b] = env->getMethodID(cls, "setDebugStream", "(Ljava/io/PrintStream;)V");
                  mids$[mid_jjFillToken_5eb4cff8] = env->getMethodID(cls, "jjFillToken", "()Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");

                  fids$ = new jfieldID[max_fid];
                  fids$[fid_debugStream] = env->getFieldID(cls, "debugStream", "Ljava/io/PrintStream;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  jjnewLexState = new JArray< jint >(env->getStaticObjectField(cls, "jjnewLexState", "[I"));
                  jjstrLiteralImages = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "jjstrLiteralImages", "[Ljava/lang/String;"));
                  lexStateNames = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "lexStateNames", "[Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardSyntaxParserTokenManager::StandardSyntaxParserTokenManager(const ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8af5fa89, a0.this$)) {}

              StandardSyntaxParserTokenManager::StandardSyntaxParserTokenManager(const ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_954657e1, a0.this$, a1)) {}

              void StandardSyntaxParserTokenManager::ReInit(const ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_ReInit_8af5fa89], a0.this$);
              }

              void StandardSyntaxParserTokenManager::ReInit(const ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream & a0, jint a1) const
              {
                env->callVoidMethod(this$, mids$[mid_ReInit_954657e1], a0.this$, a1);
              }

              void StandardSyntaxParserTokenManager::SwitchTo(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_SwitchTo_39c7bd3c], a0);
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::Token StandardSyntaxParserTokenManager::getNextToken() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::Token(env->callObjectMethod(this$, mids$[mid_getNextToken_5eb4cff8]));
              }

              void StandardSyntaxParserTokenManager::setDebugStream(const ::java::io::PrintStream & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setDebugStream_1b7c898b], a0.this$);
              }

              ::java::io::PrintStream StandardSyntaxParserTokenManager::_get_debugStream() const
              {
                return ::java::io::PrintStream(env->getObjectField(this$, fids$[fid_debugStream]));
              }

              void StandardSyntaxParserTokenManager::_set_debugStream(const ::java::io::PrintStream & a0) const
              {
                env->setObjectField(this$, fids$[fid_debugStream], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_StandardSyntaxParserTokenManager_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardSyntaxParserTokenManager_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardSyntaxParserTokenManager_init_(t_StandardSyntaxParserTokenManager *self, PyObject *args, PyObject *kwds);
              static PyObject *t_StandardSyntaxParserTokenManager_ReInit(t_StandardSyntaxParserTokenManager *self, PyObject *args);
              static PyObject *t_StandardSyntaxParserTokenManager_SwitchTo(t_StandardSyntaxParserTokenManager *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParserTokenManager_getNextToken(t_StandardSyntaxParserTokenManager *self);
              static PyObject *t_StandardSyntaxParserTokenManager_setDebugStream(t_StandardSyntaxParserTokenManager *self, PyObject *arg);

              static int t_StandardSyntaxParserTokenManager_set__debugStream(t_StandardSyntaxParserTokenManager *self, PyObject *arg, void *data);
              static PyObject *t_StandardSyntaxParserTokenManager_get__nextToken(t_StandardSyntaxParserTokenManager *self, void *data);
              static PyGetSetDef t_StandardSyntaxParserTokenManager__fields_[] = {
                DECLARE_SET_FIELD(t_StandardSyntaxParserTokenManager, debugStream),
                DECLARE_GET_FIELD(t_StandardSyntaxParserTokenManager, nextToken),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_StandardSyntaxParserTokenManager__methods_[] = {
                DECLARE_METHOD(t_StandardSyntaxParserTokenManager, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardSyntaxParserTokenManager, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardSyntaxParserTokenManager, ReInit, METH_VARARGS),
                DECLARE_METHOD(t_StandardSyntaxParserTokenManager, SwitchTo, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParserTokenManager, getNextToken, METH_NOARGS),
                DECLARE_METHOD(t_StandardSyntaxParserTokenManager, setDebugStream, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardSyntaxParserTokenManager, t_StandardSyntaxParserTokenManager, ::java::lang::Object, StandardSyntaxParserTokenManager, t_StandardSyntaxParserTokenManager_init_, 0, 0, t_StandardSyntaxParserTokenManager__fields_, 0, 0);

              void t_StandardSyntaxParserTokenManager::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardSyntaxParserTokenManager), module, "StandardSyntaxParserTokenManager", 0);
              }

              void t_StandardSyntaxParserTokenManager::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserTokenManager).tp_dict, "class_", make_descriptor(StandardSyntaxParserTokenManager::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserTokenManager).tp_dict, "wrapfn_", make_descriptor(t_StandardSyntaxParserTokenManager::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserTokenManager).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(StandardSyntaxParserTokenManager::initializeClass);
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserTokenManager).tp_dict, "jjnewLexState", make_descriptor(StandardSyntaxParserTokenManager::jjnewLexState->wrap()));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserTokenManager).tp_dict, "jjstrLiteralImages", make_descriptor(JArray<jstring>(StandardSyntaxParserTokenManager::jjstrLiteralImages->this$).wrap()));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserTokenManager).tp_dict, "lexStateNames", make_descriptor(JArray<jstring>(StandardSyntaxParserTokenManager::lexStateNames->this$).wrap()));
              }

              static PyObject *t_StandardSyntaxParserTokenManager_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardSyntaxParserTokenManager::initializeClass, 1)))
                  return NULL;
                return t_StandardSyntaxParserTokenManager::wrap_Object(StandardSyntaxParserTokenManager(((t_StandardSyntaxParserTokenManager *) arg)->object.this$));
              }
              static PyObject *t_StandardSyntaxParserTokenManager_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardSyntaxParserTokenManager::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardSyntaxParserTokenManager_init_(t_StandardSyntaxParserTokenManager *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream a0((jobject) NULL);
                    StandardSyntaxParserTokenManager object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream::initializeClass, &a0))
                    {
                      INT_CALL(object = StandardSyntaxParserTokenManager(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 2:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream a0((jobject) NULL);
                    jint a1;
                    StandardSyntaxParserTokenManager object((jobject) NULL);

                    if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream::initializeClass, &a0, &a1))
                    {
                      INT_CALL(object = StandardSyntaxParserTokenManager(a0, a1));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_StandardSyntaxParserTokenManager_ReInit(t_StandardSyntaxParserTokenManager *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream a0((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream::initializeClass, &a0))
                    {
                      OBJ_CALL(self->object.ReInit(a0));
                      Py_RETURN_NONE;
                    }
                  }
                  break;
                 case 2:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream a0((jobject) NULL);
                    jint a1;

                    if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream::initializeClass, &a0, &a1))
                    {
                      OBJ_CALL(self->object.ReInit(a0, a1));
                      Py_RETURN_NONE;
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "ReInit", args);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParserTokenManager_SwitchTo(t_StandardSyntaxParserTokenManager *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.SwitchTo(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "SwitchTo", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParserTokenManager_getNextToken(t_StandardSyntaxParserTokenManager *self)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token result((jobject) NULL);
                OBJ_CALL(result = self->object.getNextToken());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(result);
              }

              static PyObject *t_StandardSyntaxParserTokenManager_setDebugStream(t_StandardSyntaxParserTokenManager *self, PyObject *arg)
              {
                ::java::io::PrintStream a0((jobject) NULL);

                if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setDebugStream(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setDebugStream", arg);
                return NULL;
              }

              static int t_StandardSyntaxParserTokenManager_set__debugStream(t_StandardSyntaxParserTokenManager *self, PyObject *arg, void *data)
              {
                {
                  ::java::io::PrintStream value((jobject) NULL);
                  if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
                  {
                    INT_CALL(self->object.setDebugStream(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "debugStream", arg);
                return -1;
              }

              static PyObject *t_StandardSyntaxParserTokenManager_get__nextToken(t_StandardSyntaxParserTokenManager *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                OBJ_CALL(value = self->object.getNextToken());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/DeletedQueryNode.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *DeletedQueryNode::class$ = NULL;
              jmethodID *DeletedQueryNode::mids$ = NULL;
              bool DeletedQueryNode::live$ = false;

              jclass DeletedQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/DeletedQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              DeletedQueryNode::DeletedQueryNode() : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode DeletedQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::java::lang::CharSequence DeletedQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String DeletedQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_DeletedQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_DeletedQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_DeletedQueryNode_init_(t_DeletedQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_DeletedQueryNode_cloneTree(t_DeletedQueryNode *self, PyObject *args);
              static PyObject *t_DeletedQueryNode_toQueryString(t_DeletedQueryNode *self, PyObject *args);
              static PyObject *t_DeletedQueryNode_toString(t_DeletedQueryNode *self, PyObject *args);

              static PyMethodDef t_DeletedQueryNode__methods_[] = {
                DECLARE_METHOD(t_DeletedQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_DeletedQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_DeletedQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_DeletedQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_DeletedQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(DeletedQueryNode, t_DeletedQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, DeletedQueryNode, t_DeletedQueryNode_init_, 0, 0, 0, 0, 0);

              void t_DeletedQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(DeletedQueryNode), module, "DeletedQueryNode", 0);
              }

              void t_DeletedQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(DeletedQueryNode).tp_dict, "class_", make_descriptor(DeletedQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(DeletedQueryNode).tp_dict, "wrapfn_", make_descriptor(t_DeletedQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(DeletedQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_DeletedQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, DeletedQueryNode::initializeClass, 1)))
                  return NULL;
                return t_DeletedQueryNode::wrap_Object(DeletedQueryNode(((t_DeletedQueryNode *) arg)->object.this$));
              }
              static PyObject *t_DeletedQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, DeletedQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_DeletedQueryNode_init_(t_DeletedQueryNode *self, PyObject *args, PyObject *kwds)
              {
                DeletedQueryNode object((jobject) NULL);

                INT_CALL(object = DeletedQueryNode());
                self->object = object;

                return 0;
              }

              static PyObject *t_DeletedQueryNode_cloneTree(t_DeletedQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(DeletedQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_DeletedQueryNode_toQueryString(t_DeletedQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(DeletedQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_DeletedQueryNode_toString(t_DeletedQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(DeletedQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/AttributeImpl.h"
#include "org/apache/lucene/util/Attribute.h"
#include "java/lang/Class.h"
#include "java/lang/Cloneable.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *AttributeImpl::class$ = NULL;
        jmethodID *AttributeImpl::mids$ = NULL;
        bool AttributeImpl::live$ = false;

        jclass AttributeImpl::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/AttributeImpl");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_clone_a200d3c2] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/AttributeImpl;");
            mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_reflectAsString_445a175e] = env->getMethodID(cls, "reflectAsString", "(Z)Ljava/lang/String;");
            mids$[mid_reflectWith_5f3f5102] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AttributeImpl::AttributeImpl() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void AttributeImpl::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        AttributeImpl AttributeImpl::clone() const
        {
          return AttributeImpl(env->callObjectMethod(this$, mids$[mid_clone_a200d3c2]));
        }

        void AttributeImpl::copyTo(const AttributeImpl & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
        }

        ::java::lang::String AttributeImpl::reflectAsString(jboolean a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_reflectAsString_445a175e], a0));
        }

        void AttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reflectWith_5f3f5102], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_AttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
        static int t_AttributeImpl_init_(t_AttributeImpl *self, PyObject *args, PyObject *kwds);
        static PyObject *t_AttributeImpl_clear(t_AttributeImpl *self);
        static PyObject *t_AttributeImpl_clone(t_AttributeImpl *self);
        static PyObject *t_AttributeImpl_copyTo(t_AttributeImpl *self, PyObject *arg);
        static PyObject *t_AttributeImpl_reflectAsString(t_AttributeImpl *self, PyObject *arg);
        static PyObject *t_AttributeImpl_reflectWith(t_AttributeImpl *self, PyObject *arg);

        static PyMethodDef t_AttributeImpl__methods_[] = {
          DECLARE_METHOD(t_AttributeImpl, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeImpl, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeImpl, clear, METH_NOARGS),
          DECLARE_METHOD(t_AttributeImpl, clone, METH_NOARGS),
          DECLARE_METHOD(t_AttributeImpl, copyTo, METH_O),
          DECLARE_METHOD(t_AttributeImpl, reflectAsString, METH_O),
          DECLARE_METHOD(t_AttributeImpl, reflectWith, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AttributeImpl, t_AttributeImpl, ::java::lang::Object, AttributeImpl, t_AttributeImpl_init_, 0, 0, 0, 0, 0);

        void t_AttributeImpl::install(PyObject *module)
        {
          installType(&PY_TYPE(AttributeImpl), module, "AttributeImpl", 0);
        }

        void t_AttributeImpl::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AttributeImpl).tp_dict, "class_", make_descriptor(AttributeImpl::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_AttributeImpl::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AttributeImpl::initializeClass, 1)))
            return NULL;
          return t_AttributeImpl::wrap_Object(AttributeImpl(((t_AttributeImpl *) arg)->object.this$));
        }
        static PyObject *t_AttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AttributeImpl::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_AttributeImpl_init_(t_AttributeImpl *self, PyObject *args, PyObject *kwds)
        {
          AttributeImpl object((jobject) NULL);

          INT_CALL(object = AttributeImpl());
          self->object = object;

          return 0;
        }

        static PyObject *t_AttributeImpl_clear(t_AttributeImpl *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_AttributeImpl_clone(t_AttributeImpl *self)
        {
          AttributeImpl result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_AttributeImpl::wrap_Object(result);
        }

        static PyObject *t_AttributeImpl_copyTo(t_AttributeImpl *self, PyObject *arg)
        {
          AttributeImpl a0((jobject) NULL);

          if (!parseArg(arg, "k", AttributeImpl::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyTo(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyTo", arg);
          return NULL;
        }

        static PyObject *t_AttributeImpl_reflectAsString(t_AttributeImpl *self, PyObject *arg)
        {
          jboolean a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.reflectAsString(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "reflectAsString", arg);
          return NULL;
        }

        static PyObject *t_AttributeImpl_reflectWith(t_AttributeImpl *self, PyObject *arg)
        {
          ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
          {
            OBJ_CALL(self->object.reflectWith(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "reflectWith", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanStemmer::class$ = NULL;
          jmethodID *GermanStemmer::mids$ = NULL;
          bool GermanStemmer::live$ = false;

          jclass GermanStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_97a5258f] = env->getMethodID(cls, "stem", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanStemmer::GermanStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanStemmer_init_(t_GermanStemmer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_GermanStemmer__methods_[] = {
            DECLARE_METHOD(t_GermanStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanStemmer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanStemmer, t_GermanStemmer, ::java::lang::Object, GermanStemmer, t_GermanStemmer_init_, 0, 0, 0, 0, 0);

          void t_GermanStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanStemmer), module, "GermanStemmer", 0);
          }

          void t_GermanStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanStemmer).tp_dict, "class_", make_descriptor(GermanStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanStemmer).tp_dict, "wrapfn_", make_descriptor(t_GermanStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanStemmer::initializeClass, 1)))
              return NULL;
            return t_GermanStemmer::wrap_Object(GermanStemmer(((t_GermanStemmer *) arg)->object.this$));
          }
          static PyObject *t_GermanStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanStemmer_init_(t_GermanStemmer *self, PyObject *args, PyObject *kwds)
          {
            GermanStemmer object((jobject) NULL);

            INT_CALL(object = GermanStemmer());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "java/lang/String.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *FacetLabel::class$ = NULL;
          jmethodID *FacetLabel::mids$ = NULL;
          jfieldID *FacetLabel::fids$ = NULL;
          bool FacetLabel::live$ = false;
          jint FacetLabel::MAX_CATEGORY_PATH_LENGTH = (jint) 0;

          jclass FacetLabel::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/FacetLabel");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4dd4540c] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;)V");
              mids$[mid_init$_ba45d66a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Ljava/lang/String;)V");
              mids$[mid_compareTo_283f83f5] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_longHashCode_54c6a17a] = env->getMethodID(cls, "longHashCode", "()J");
              mids$[mid_subpath_38cf071d] = env->getMethodID(cls, "subpath", "(I)Lorg/apache/lucene/facet/taxonomy/FacetLabel;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_components] = env->getFieldID(cls, "components", "[Ljava/lang/String;");
              fids$[fid_length] = env->getFieldID(cls, "length", "I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MAX_CATEGORY_PATH_LENGTH = env->getStaticIntField(cls, "MAX_CATEGORY_PATH_LENGTH");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FacetLabel::FacetLabel(const JArray< ::java::lang::String > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4dd4540c, a0.this$)) {}

          FacetLabel::FacetLabel(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ba45d66a, a0.this$, a1.this$)) {}

          jint FacetLabel::compareTo(const FacetLabel & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_283f83f5], a0.this$);
          }

          jboolean FacetLabel::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint FacetLabel::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jlong FacetLabel::longHashCode() const
          {
            return env->callLongMethod(this$, mids$[mid_longHashCode_54c6a17a]);
          }

          FacetLabel FacetLabel::subpath(jint a0) const
          {
            return FacetLabel(env->callObjectMethod(this$, mids$[mid_subpath_38cf071d], a0));
          }

          ::java::lang::String FacetLabel::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          JArray< ::java::lang::String > FacetLabel::_get_components() const
          {
            return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_components]));
          }

          jint FacetLabel::_get_length() const
          {
            return env->getIntField(this$, fids$[fid_length]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_FacetLabel_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FacetLabel_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FacetLabel_init_(t_FacetLabel *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FacetLabel_compareTo(t_FacetLabel *self, PyObject *arg);
          static PyObject *t_FacetLabel_equals(t_FacetLabel *self, PyObject *args);
          static PyObject *t_FacetLabel_hashCode(t_FacetLabel *self, PyObject *args);
          static PyObject *t_FacetLabel_longHashCode(t_FacetLabel *self);
          static PyObject *t_FacetLabel_subpath(t_FacetLabel *self, PyObject *arg);
          static PyObject *t_FacetLabel_toString(t_FacetLabel *self, PyObject *args);
          static PyObject *t_FacetLabel_get__components(t_FacetLabel *self, void *data);
          static PyObject *t_FacetLabel_get__length(t_FacetLabel *self, void *data);

          static PyGetSetDef t_FacetLabel__fields_[] = {
            DECLARE_GET_FIELD(t_FacetLabel, components),
            DECLARE_GET_FIELD(t_FacetLabel, length),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FacetLabel__methods_[] = {
            DECLARE_METHOD(t_FacetLabel, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FacetLabel, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FacetLabel, compareTo, METH_O),
            DECLARE_METHOD(t_FacetLabel, equals, METH_VARARGS),
            DECLARE_METHOD(t_FacetLabel, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FacetLabel, longHashCode, METH_NOARGS),
            DECLARE_METHOD(t_FacetLabel, subpath, METH_O),
            DECLARE_METHOD(t_FacetLabel, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FacetLabel, t_FacetLabel, ::java::lang::Object, FacetLabel, t_FacetLabel_init_, 0, 0, t_FacetLabel__fields_, 0, 0);

          void t_FacetLabel::install(PyObject *module)
          {
            installType(&PY_TYPE(FacetLabel), module, "FacetLabel", 0);
          }

          void t_FacetLabel::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FacetLabel).tp_dict, "class_", make_descriptor(FacetLabel::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FacetLabel).tp_dict, "wrapfn_", make_descriptor(t_FacetLabel::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FacetLabel).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(FacetLabel::initializeClass);
            PyDict_SetItemString(PY_TYPE(FacetLabel).tp_dict, "MAX_CATEGORY_PATH_LENGTH", make_descriptor(FacetLabel::MAX_CATEGORY_PATH_LENGTH));
          }

          static PyObject *t_FacetLabel_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FacetLabel::initializeClass, 1)))
              return NULL;
            return t_FacetLabel::wrap_Object(FacetLabel(((t_FacetLabel *) arg)->object.this$));
          }
          static PyObject *t_FacetLabel_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FacetLabel::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FacetLabel_init_(t_FacetLabel *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                FacetLabel object((jobject) NULL);

                if (!parseArgs(args, "[s", &a0))
                {
                  INT_CALL(object = FacetLabel(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                FacetLabel object((jobject) NULL);

                if (!parseArgs(args, "s[s", &a0, &a1))
                {
                  INT_CALL(object = FacetLabel(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FacetLabel_compareTo(t_FacetLabel *self, PyObject *arg)
          {
            FacetLabel a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", FacetLabel::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_FacetLabel_equals(t_FacetLabel *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FacetLabel), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FacetLabel_hashCode(t_FacetLabel *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FacetLabel), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FacetLabel_longHashCode(t_FacetLabel *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.longHashCode());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FacetLabel_subpath(t_FacetLabel *self, PyObject *arg)
          {
            jint a0;
            FacetLabel result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.subpath(a0));
              return t_FacetLabel::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "subpath", arg);
            return NULL;
          }

          static PyObject *t_FacetLabel_toString(t_FacetLabel *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FacetLabel), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FacetLabel_get__components(t_FacetLabel *self, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_components());
            return JArray<jstring>(value.this$).wrap();
          }

          static PyObject *t_FacetLabel_get__length(t_FacetLabel *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_length());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$IntComparator.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/lang/Integer.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/FieldCache$Parser.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$IntComparator::class$ = NULL;
        jmethodID *FieldComparator$IntComparator::mids$ = NULL;
        bool FieldComparator$IntComparator::live$ = false;

        jclass FieldComparator$IntComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$IntComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_138a2154] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;Lorg/apache/lucene/search/FieldCache$Parser;Ljava/lang/Integer;)V");
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_af7b73a4] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Integer;)V");
            mids$[mid_value_7266dabb] = env->getMethodID(cls, "value", "(I)Ljava/lang/Integer;");
            mids$[mid_getIntValues_7d7d264d] = env->getMethodID(cls, "getIntValues", "(Lorg/apache/lucene/index/AtomicReaderContext;Ljava/lang/String;)Lorg/apache/lucene/search/FieldCache$Ints;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparator$IntComparator::FieldComparator$IntComparator(jint a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$Parser & a2, const ::java::lang::Integer & a3) : ::org::apache::lucene::search::FieldComparator$NumericComparator(env->newObject(initializeClass, &mids$, mid_init$_138a2154, a0, a1.this$, a2.this$, a3.this$)) {}

        jint FieldComparator$IntComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$IntComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$IntComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        void FieldComparator$IntComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$IntComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$IntComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$IntComparator::setTopValue(const ::java::lang::Integer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_af7b73a4], a0.this$);
        }

        ::java::lang::Integer FieldComparator$IntComparator::value(jint a0) const
        {
          return ::java::lang::Integer(env->callObjectMethod(this$, mids$[mid_value_7266dabb], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$IntComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$IntComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$IntComparator_of_(t_FieldComparator$IntComparator *self, PyObject *args);
        static int t_FieldComparator$IntComparator_init_(t_FieldComparator$IntComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparator$IntComparator_compare(t_FieldComparator$IntComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$IntComparator_compareBottom(t_FieldComparator$IntComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$IntComparator_compareTop(t_FieldComparator$IntComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$IntComparator_copy(t_FieldComparator$IntComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$IntComparator_setBottom(t_FieldComparator$IntComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$IntComparator_setNextReader(t_FieldComparator$IntComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$IntComparator_setTopValue(t_FieldComparator$IntComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$IntComparator_value(t_FieldComparator$IntComparator *self, PyObject *args);
        static int t_FieldComparator$IntComparator_set__bottom(t_FieldComparator$IntComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$IntComparator_set__nextReader(t_FieldComparator$IntComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$IntComparator_set__topValue(t_FieldComparator$IntComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$IntComparator_get__parameters_(t_FieldComparator$IntComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$IntComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$IntComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$IntComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$IntComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$IntComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$IntComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$IntComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$IntComparator, t_FieldComparator$IntComparator, ::org::apache::lucene::search::FieldComparator$NumericComparator, FieldComparator$IntComparator, t_FieldComparator$IntComparator_init_, 0, 0, t_FieldComparator$IntComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$IntComparator::wrap_Object(const FieldComparator$IntComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$IntComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$IntComparator *self = (t_FieldComparator$IntComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$IntComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$IntComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$IntComparator *self = (t_FieldComparator$IntComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$IntComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$IntComparator), module, "FieldComparator$IntComparator", 0);
        }

        void t_FieldComparator$IntComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$IntComparator).tp_dict, "class_", make_descriptor(FieldComparator$IntComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$IntComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$IntComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$IntComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$IntComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$IntComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$IntComparator::wrap_Object(FieldComparator$IntComparator(((t_FieldComparator$IntComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$IntComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$IntComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$IntComparator_of_(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldComparator$IntComparator_init_(t_FieldComparator$IntComparator *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::search::FieldCache$Parser a2((jobject) NULL);
          ::java::lang::Integer a3((jobject) NULL);
          FieldComparator$IntComparator object((jobject) NULL);

          if (!parseArgs(args, "IskO", ::org::apache::lucene::search::FieldCache$Parser::initializeClass, &::java::lang::PY_TYPE(Integer), &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = FieldComparator$IntComparator(a0, a1, a2, a3));
            self->object = object;
            self->parameters[0] = &::java::lang::PY_TYPE(Integer);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldComparator$IntComparator_compare(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$IntComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$IntComparator_compareBottom(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$IntComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$IntComparator_compareTop(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$IntComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$IntComparator_copy(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$IntComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$IntComparator_setBottom(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$IntComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$IntComparator_setNextReader(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
          }

          return callSuper(&PY_TYPE(FieldComparator$IntComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$IntComparator_setTopValue(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          ::java::lang::Integer a0((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Integer), &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$IntComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$IntComparator_value(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          jint a0;
          ::java::lang::Integer result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::java::lang::t_Integer::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$IntComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$IntComparator_get__parameters_(t_FieldComparator$IntComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$IntComparator_set__bottom(t_FieldComparator$IntComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$IntComparator_set__nextReader(t_FieldComparator$IntComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$IntComparator_set__topValue(t_FieldComparator$IntComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Integer value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Integer), &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts.h"
#include "org/apache/lucene/util/packed/PackedInts$Encoder.h"
#include "org/apache/lucene/util/packed/PackedInts$Reader.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/packed/PackedInts$Mutable.h"
#include "org/apache/lucene/util/packed/PackedInts$Header.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/packed/PackedInts$Format.h"
#include "org/apache/lucene/util/packed/PackedInts$Decoder.h"
#include "org/apache/lucene/util/packed/PackedInts$FormatAndBits.h"
#include "org/apache/lucene/util/packed/PackedInts$Writer.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/packed/PackedInts$ReaderIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts::class$ = NULL;
          jmethodID *PackedInts::mids$ = NULL;
          bool PackedInts::live$ = false;
          ::java::lang::String *PackedInts::CODEC_NAME = NULL;
          jfloat PackedInts::COMPACT = (jfloat) 0;
          jfloat PackedInts::DEFAULT = (jfloat) 0;
          jint PackedInts::DEFAULT_BUFFER_SIZE = (jint) 0;
          jfloat PackedInts::FAST = (jfloat) 0;
          jfloat PackedInts::FASTEST = (jfloat) 0;
          jint PackedInts::VERSION_BYTE_ALIGNED = (jint) 0;
          jint PackedInts::VERSION_CURRENT = (jint) 0;
          jint PackedInts::VERSION_MONOTONIC_WITHOUT_ZIGZAG = (jint) 0;
          jint PackedInts::VERSION_START = (jint) 0;

          jclass PackedInts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_bitsRequired_0ee6df30] = env->getStaticMethodID(cls, "bitsRequired", "(J)I");
              mids$[mid_checkVersion_39c7bd3c] = env->getStaticMethodID(cls, "checkVersion", "(I)V");
              mids$[mid_copy_5dfb99d8] = env->getStaticMethodID(cls, "copy", "(Lorg/apache/lucene/util/packed/PackedInts$Reader;ILorg/apache/lucene/util/packed/PackedInts$Mutable;III)V");
              mids$[mid_fastestFormatAndBits_a44dbe2e] = env->getStaticMethodID(cls, "fastestFormatAndBits", "(IIF)Lorg/apache/lucene/util/packed/PackedInts$FormatAndBits;");
              mids$[mid_getDecoder_a1fc44e7] = env->getStaticMethodID(cls, "getDecoder", "(Lorg/apache/lucene/util/packed/PackedInts$Format;II)Lorg/apache/lucene/util/packed/PackedInts$Decoder;");
              mids$[mid_getDirectReader_dd96fa63] = env->getStaticMethodID(cls, "getDirectReader", "(Lorg/apache/lucene/store/IndexInput;)Lorg/apache/lucene/util/packed/PackedInts$Reader;");
              mids$[mid_getDirectReaderNoHeader_6d5658ed] = env->getStaticMethodID(cls, "getDirectReaderNoHeader", "(Lorg/apache/lucene/store/IndexInput;Lorg/apache/lucene/util/packed/PackedInts$Header;)Lorg/apache/lucene/util/packed/PackedInts$Reader;");
              mids$[mid_getDirectReaderNoHeader_185fc68d] = env->getStaticMethodID(cls, "getDirectReaderNoHeader", "(Lorg/apache/lucene/store/IndexInput;Lorg/apache/lucene/util/packed/PackedInts$Format;III)Lorg/apache/lucene/util/packed/PackedInts$Reader;");
              mids$[mid_getEncoder_82bbe26f] = env->getStaticMethodID(cls, "getEncoder", "(Lorg/apache/lucene/util/packed/PackedInts$Format;II)Lorg/apache/lucene/util/packed/PackedInts$Encoder;");
              mids$[mid_getMutable_5fda8e82] = env->getStaticMethodID(cls, "getMutable", "(IIF)Lorg/apache/lucene/util/packed/PackedInts$Mutable;");
              mids$[mid_getMutable_2ab94ab5] = env->getStaticMethodID(cls, "getMutable", "(IILorg/apache/lucene/util/packed/PackedInts$Format;)Lorg/apache/lucene/util/packed/PackedInts$Mutable;");
              mids$[mid_getReader_5e1a18f4] = env->getStaticMethodID(cls, "getReader", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/util/packed/PackedInts$Reader;");
              mids$[mid_getReaderIterator_edd93a0e] = env->getStaticMethodID(cls, "getReaderIterator", "(Lorg/apache/lucene/store/DataInput;I)Lorg/apache/lucene/util/packed/PackedInts$ReaderIterator;");
              mids$[mid_getReaderIteratorNoHeader_25f812d4] = env->getStaticMethodID(cls, "getReaderIteratorNoHeader", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/util/packed/PackedInts$Format;IIII)Lorg/apache/lucene/util/packed/PackedInts$ReaderIterator;");
              mids$[mid_getReaderNoHeader_5f216dfc] = env->getStaticMethodID(cls, "getReaderNoHeader", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/util/packed/PackedInts$Header;)Lorg/apache/lucene/util/packed/PackedInts$Reader;");
              mids$[mid_getReaderNoHeader_6f168df2] = env->getStaticMethodID(cls, "getReaderNoHeader", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/util/packed/PackedInts$Format;III)Lorg/apache/lucene/util/packed/PackedInts$Reader;");
              mids$[mid_getWriter_7e94d221] = env->getStaticMethodID(cls, "getWriter", "(Lorg/apache/lucene/store/DataOutput;IIF)Lorg/apache/lucene/util/packed/PackedInts$Writer;");
              mids$[mid_getWriterNoHeader_ec8145b0] = env->getStaticMethodID(cls, "getWriterNoHeader", "(Lorg/apache/lucene/store/DataOutput;Lorg/apache/lucene/util/packed/PackedInts$Format;III)Lorg/apache/lucene/util/packed/PackedInts$Writer;");
              mids$[mid_maxValue_39c7bd20] = env->getStaticMethodID(cls, "maxValue", "(I)J");
              mids$[mid_readHeader_1e64173a] = env->getStaticMethodID(cls, "readHeader", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/util/packed/PackedInts$Header;");
              mids$[mid_unsignedBitsRequired_0ee6df30] = env->getStaticMethodID(cls, "unsignedBitsRequired", "(J)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              CODEC_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "CODEC_NAME", "Ljava/lang/String;"));
              COMPACT = env->getStaticFloatField(cls, "COMPACT");
              DEFAULT = env->getStaticFloatField(cls, "DEFAULT");
              DEFAULT_BUFFER_SIZE = env->getStaticIntField(cls, "DEFAULT_BUFFER_SIZE");
              FAST = env->getStaticFloatField(cls, "FAST");
              FASTEST = env->getStaticFloatField(cls, "FASTEST");
              VERSION_BYTE_ALIGNED = env->getStaticIntField(cls, "VERSION_BYTE_ALIGNED");
              VERSION_CURRENT = env->getStaticIntField(cls, "VERSION_CURRENT");
              VERSION_MONOTONIC_WITHOUT_ZIGZAG = env->getStaticIntField(cls, "VERSION_MONOTONIC_WITHOUT_ZIGZAG");
              VERSION_START = env->getStaticIntField(cls, "VERSION_START");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts::PackedInts() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint PackedInts::bitsRequired(jlong a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_bitsRequired_0ee6df30], a0);
          }

          void PackedInts::checkVersion(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_checkVersion_39c7bd3c], a0);
          }

          void PackedInts::copy(const ::org::apache::lucene::util::packed::PackedInts$Reader & a0, jint a1, const ::org::apache::lucene::util::packed::PackedInts$Mutable & a2, jint a3, jint a4, jint a5)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_copy_5dfb99d8], a0.this$, a1, a2.this$, a3, a4, a5);
          }

          ::org::apache::lucene::util::packed::PackedInts$FormatAndBits PackedInts::fastestFormatAndBits(jint a0, jint a1, jfloat a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$FormatAndBits(env->callStaticObjectMethod(cls, mids$[mid_fastestFormatAndBits_a44dbe2e], a0, a1, a2));
          }

          ::org::apache::lucene::util::packed::PackedInts$Decoder PackedInts::getDecoder(const ::org::apache::lucene::util::packed::PackedInts$Format & a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Decoder(env->callStaticObjectMethod(cls, mids$[mid_getDecoder_a1fc44e7], a0.this$, a1, a2));
          }

          ::org::apache::lucene::util::packed::PackedInts$Reader PackedInts::getDirectReader(const ::org::apache::lucene::store::IndexInput & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Reader(env->callStaticObjectMethod(cls, mids$[mid_getDirectReader_dd96fa63], a0.this$));
          }

          ::org::apache::lucene::util::packed::PackedInts$Reader PackedInts::getDirectReaderNoHeader(const ::org::apache::lucene::store::IndexInput & a0, const ::org::apache::lucene::util::packed::PackedInts$Header & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Reader(env->callStaticObjectMethod(cls, mids$[mid_getDirectReaderNoHeader_6d5658ed], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::packed::PackedInts$Reader PackedInts::getDirectReaderNoHeader(const ::org::apache::lucene::store::IndexInput & a0, const ::org::apache::lucene::util::packed::PackedInts$Format & a1, jint a2, jint a3, jint a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Reader(env->callStaticObjectMethod(cls, mids$[mid_getDirectReaderNoHeader_185fc68d], a0.this$, a1.this$, a2, a3, a4));
          }

          ::org::apache::lucene::util::packed::PackedInts$Encoder PackedInts::getEncoder(const ::org::apache::lucene::util::packed::PackedInts$Format & a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Encoder(env->callStaticObjectMethod(cls, mids$[mid_getEncoder_82bbe26f], a0.this$, a1, a2));
          }

          ::org::apache::lucene::util::packed::PackedInts$Mutable PackedInts::getMutable(jint a0, jint a1, jfloat a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Mutable(env->callStaticObjectMethod(cls, mids$[mid_getMutable_5fda8e82], a0, a1, a2));
          }

          ::org::apache::lucene::util::packed::PackedInts$Mutable PackedInts::getMutable(jint a0, jint a1, const ::org::apache::lucene::util::packed::PackedInts$Format & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Mutable(env->callStaticObjectMethod(cls, mids$[mid_getMutable_2ab94ab5], a0, a1, a2.this$));
          }

          ::org::apache::lucene::util::packed::PackedInts$Reader PackedInts::getReader(const ::org::apache::lucene::store::DataInput & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Reader(env->callStaticObjectMethod(cls, mids$[mid_getReader_5e1a18f4], a0.this$));
          }

          ::org::apache::lucene::util::packed::PackedInts$ReaderIterator PackedInts::getReaderIterator(const ::org::apache::lucene::store::DataInput & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$ReaderIterator(env->callStaticObjectMethod(cls, mids$[mid_getReaderIterator_edd93a0e], a0.this$, a1));
          }

          ::org::apache::lucene::util::packed::PackedInts$ReaderIterator PackedInts::getReaderIteratorNoHeader(const ::org::apache::lucene::store::DataInput & a0, const ::org::apache::lucene::util::packed::PackedInts$Format & a1, jint a2, jint a3, jint a4, jint a5)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$ReaderIterator(env->callStaticObjectMethod(cls, mids$[mid_getReaderIteratorNoHeader_25f812d4], a0.this$, a1.this$, a2, a3, a4, a5));
          }

          ::org::apache::lucene::util::packed::PackedInts$Reader PackedInts::getReaderNoHeader(const ::org::apache::lucene::store::DataInput & a0, const ::org::apache::lucene::util::packed::PackedInts$Header & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Reader(env->callStaticObjectMethod(cls, mids$[mid_getReaderNoHeader_5f216dfc], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::packed::PackedInts$Reader PackedInts::getReaderNoHeader(const ::org::apache::lucene::store::DataInput & a0, const ::org::apache::lucene::util::packed::PackedInts$Format & a1, jint a2, jint a3, jint a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Reader(env->callStaticObjectMethod(cls, mids$[mid_getReaderNoHeader_6f168df2], a0.this$, a1.this$, a2, a3, a4));
          }

          ::org::apache::lucene::util::packed::PackedInts$Writer PackedInts::getWriter(const ::org::apache::lucene::store::DataOutput & a0, jint a1, jint a2, jfloat a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Writer(env->callStaticObjectMethod(cls, mids$[mid_getWriter_7e94d221], a0.this$, a1, a2, a3));
          }

          ::org::apache::lucene::util::packed::PackedInts$Writer PackedInts::getWriterNoHeader(const ::org::apache::lucene::store::DataOutput & a0, const ::org::apache::lucene::util::packed::PackedInts$Format & a1, jint a2, jint a3, jint a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Writer(env->callStaticObjectMethod(cls, mids$[mid_getWriterNoHeader_ec8145b0], a0.this$, a1.this$, a2, a3, a4));
          }

          jlong PackedInts::maxValue(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticLongMethod(cls, mids$[mid_maxValue_39c7bd20], a0);
          }

          ::org::apache::lucene::util::packed::PackedInts$Header PackedInts::readHeader(const ::org::apache::lucene::store::DataInput & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Header(env->callStaticObjectMethod(cls, mids$[mid_readHeader_1e64173a], a0.this$));
          }

          jint PackedInts::unsignedBitsRequired(jlong a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_unsignedBitsRequired_0ee6df30], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/packed/PackedInts$NullReader.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedInts_init_(t_PackedInts *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedInts_bitsRequired(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_checkVersion(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_copy(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_fastestFormatAndBits(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getDecoder(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getDirectReader(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_getDirectReaderNoHeader(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getEncoder(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getMutable(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getReader(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_getReaderIterator(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getReaderIteratorNoHeader(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getReaderNoHeader(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getWriter(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getWriterNoHeader(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_maxValue(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_readHeader(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_unsignedBitsRequired(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_PackedInts__methods_[] = {
            DECLARE_METHOD(t_PackedInts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, bitsRequired, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, checkVersion, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, copy, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, fastestFormatAndBits, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getDecoder, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getDirectReader, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getDirectReaderNoHeader, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getEncoder, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getMutable, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getReader, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getReaderIterator, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getReaderIteratorNoHeader, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getReaderNoHeader, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getWriter, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getWriterNoHeader, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, maxValue, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, readHeader, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, unsignedBitsRequired, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts, t_PackedInts, ::java::lang::Object, PackedInts, t_PackedInts_init_, 0, 0, 0, 0, 0);

          void t_PackedInts::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts), module, "PackedInts", 0);
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "Header", make_descriptor(&PY_TYPE(PackedInts$Header)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "Writer", make_descriptor(&PY_TYPE(PackedInts$Writer)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "NullReader", make_descriptor(&PY_TYPE(PackedInts$NullReader)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "Mutable", make_descriptor(&PY_TYPE(PackedInts$Mutable)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "ReaderIterator", make_descriptor(&PY_TYPE(PackedInts$ReaderIterator)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "Reader", make_descriptor(&PY_TYPE(PackedInts$Reader)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "Encoder", make_descriptor(&PY_TYPE(PackedInts$Encoder)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "Decoder", make_descriptor(&PY_TYPE(PackedInts$Decoder)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "FormatAndBits", make_descriptor(&PY_TYPE(PackedInts$FormatAndBits)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "Format", make_descriptor(&PY_TYPE(PackedInts$Format)));
          }

          void t_PackedInts::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "class_", make_descriptor(PackedInts::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "wrapfn_", make_descriptor(t_PackedInts::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PackedInts::initializeClass);
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "CODEC_NAME", make_descriptor(j2p(*PackedInts::CODEC_NAME)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "COMPACT", make_descriptor(PackedInts::COMPACT));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "DEFAULT", make_descriptor(PackedInts::DEFAULT));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "DEFAULT_BUFFER_SIZE", make_descriptor(PackedInts::DEFAULT_BUFFER_SIZE));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "FAST", make_descriptor(PackedInts::FAST));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "FASTEST", make_descriptor(PackedInts::FASTEST));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "VERSION_BYTE_ALIGNED", make_descriptor(PackedInts::VERSION_BYTE_ALIGNED));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "VERSION_CURRENT", make_descriptor(PackedInts::VERSION_CURRENT));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "VERSION_MONOTONIC_WITHOUT_ZIGZAG", make_descriptor(PackedInts::VERSION_MONOTONIC_WITHOUT_ZIGZAG));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "VERSION_START", make_descriptor(PackedInts::VERSION_START));
          }

          static PyObject *t_PackedInts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts::initializeClass, 1)))
              return NULL;
            return t_PackedInts::wrap_Object(PackedInts(((t_PackedInts *) arg)->object.this$));
          }
          static PyObject *t_PackedInts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedInts_init_(t_PackedInts *self, PyObject *args, PyObject *kwds)
          {
            PackedInts object((jobject) NULL);

            INT_CALL(object = PackedInts());
            self->object = object;

            return 0;
          }

          static PyObject *t_PackedInts_bitsRequired(PyTypeObject *type, PyObject *arg)
          {
            jlong a0;
            jint result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::bitsRequired(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "bitsRequired", arg);
            return NULL;
          }

          static PyObject *t_PackedInts_checkVersion(PyTypeObject *type, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(::org::apache::lucene::util::packed::PackedInts::checkVersion(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "checkVersion", arg);
            return NULL;
          }

          static PyObject *t_PackedInts_copy(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::packed::PackedInts$Reader a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::util::packed::PackedInts$Mutable a2((jobject) NULL);
            jint a3;
            jint a4;
            jint a5;

            if (!parseArgs(args, "kIkIII", ::org::apache::lucene::util::packed::PackedInts$Reader::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Mutable::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              OBJ_CALL(::org::apache::lucene::util::packed::PackedInts::copy(a0, a1, a2, a3, a4, a5));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "copy", args);
            return NULL;
          }

          static PyObject *t_PackedInts_fastestFormatAndBits(PyTypeObject *type, PyObject *args)
          {
            jint a0;
            jint a1;
            jfloat a2;
            ::org::apache::lucene::util::packed::PackedInts$FormatAndBits result((jobject) NULL);

            if (!parseArgs(args, "IIF", &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::fastestFormatAndBits(a0, a1, a2));
              return ::org::apache::lucene::util::packed::t_PackedInts$FormatAndBits::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "fastestFormatAndBits", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getDecoder(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::packed::PackedInts$Format a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::packed::PackedInts$Decoder result((jobject) NULL);

            if (!parseArgs(args, "KII", ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &p0, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getDecoder(a0, a1, a2));
              return ::org::apache::lucene::util::packed::t_PackedInts$Decoder::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getDecoder", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getDirectReader(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
            ::org::apache::lucene::util::packed::PackedInts$Reader result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getDirectReader(a0));
              return ::org::apache::lucene::util::packed::t_PackedInts$Reader::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getDirectReader", arg);
            return NULL;
          }

          static PyObject *t_PackedInts_getDirectReaderNoHeader(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
                ::org::apache::lucene::util::packed::PackedInts$Header a1((jobject) NULL);
                ::org::apache::lucene::util::packed::PackedInts$Reader result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::store::IndexInput::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Header::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getDirectReaderNoHeader(a0, a1));
                  return ::org::apache::lucene::util::packed::t_PackedInts$Reader::wrap_Object(result);
                }
              }
              break;
             case 5:
              {
                ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
                ::org::apache::lucene::util::packed::PackedInts$Format a1((jobject) NULL);
                PyTypeObject **p1;
                jint a2;
                jint a3;
                jint a4;
                ::org::apache::lucene::util::packed::PackedInts$Reader result((jobject) NULL);

                if (!parseArgs(args, "kKIII", ::org::apache::lucene::store::IndexInput::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getDirectReaderNoHeader(a0, a1, a2, a3, a4));
                  return ::org::apache::lucene::util::packed::t_PackedInts$Reader::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getDirectReaderNoHeader", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getEncoder(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::packed::PackedInts$Format a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::packed::PackedInts$Encoder result((jobject) NULL);

            if (!parseArgs(args, "KII", ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &p0, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getEncoder(a0, a1, a2));
              return ::org::apache::lucene::util::packed::t_PackedInts$Encoder::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getEncoder", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getMutable(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                jint a0;
                jint a1;
                jfloat a2;
                ::org::apache::lucene::util::packed::PackedInts$Mutable result((jobject) NULL);

                if (!parseArgs(args, "IIF", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getMutable(a0, a1, a2));
                  return ::org::apache::lucene::util::packed::t_PackedInts$Mutable::wrap_Object(result);
                }
              }
              {
                jint a0;
                jint a1;
                ::org::apache::lucene::util::packed::PackedInts$Format a2((jobject) NULL);
                PyTypeObject **p2;
                ::org::apache::lucene::util::packed::PackedInts$Mutable result((jobject) NULL);

                if (!parseArgs(args, "IIK", ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getMutable(a0, a1, a2));
                  return ::org::apache::lucene::util::packed::t_PackedInts$Mutable::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getMutable", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getReader(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::packed::PackedInts$Reader result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getReader(a0));
              return ::org::apache::lucene::util::packed::t_PackedInts$Reader::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getReader", arg);
            return NULL;
          }

          static PyObject *t_PackedInts_getReaderIterator(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::util::packed::PackedInts$ReaderIterator result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getReaderIterator(a0, a1));
              return ::org::apache::lucene::util::packed::t_PackedInts$ReaderIterator::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getReaderIterator", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getReaderIteratorNoHeader(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::packed::PackedInts$Format a1((jobject) NULL);
            PyTypeObject **p1;
            jint a2;
            jint a3;
            jint a4;
            jint a5;
            ::org::apache::lucene::util::packed::PackedInts$ReaderIterator result((jobject) NULL);

            if (!parseArgs(args, "kKIIII", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a2, &a3, &a4, &a5))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getReaderIteratorNoHeader(a0, a1, a2, a3, a4, a5));
              return ::org::apache::lucene::util::packed::t_PackedInts$ReaderIterator::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getReaderIteratorNoHeader", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getReaderNoHeader(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::store::DataInput a0((jobject) NULL);
                ::org::apache::lucene::util::packed::PackedInts$Header a1((jobject) NULL);
                ::org::apache::lucene::util::packed::PackedInts$Reader result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Header::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getReaderNoHeader(a0, a1));
                  return ::org::apache::lucene::util::packed::t_PackedInts$Reader::wrap_Object(result);
                }
              }
              break;
             case 5:
              {
                ::org::apache::lucene::store::DataInput a0((jobject) NULL);
                ::org::apache::lucene::util::packed::PackedInts$Format a1((jobject) NULL);
                PyTypeObject **p1;
                jint a2;
                jint a3;
                jint a4;
                ::org::apache::lucene::util::packed::PackedInts$Reader result((jobject) NULL);

                if (!parseArgs(args, "kKIII", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getReaderNoHeader(a0, a1, a2, a3, a4));
                  return ::org::apache::lucene::util::packed::t_PackedInts$Reader::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getReaderNoHeader", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getWriter(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            jint a1;
            jint a2;
            jfloat a3;
            ::org::apache::lucene::util::packed::PackedInts$Writer result((jobject) NULL);

            if (!parseArgs(args, "kIIF", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getWriter(a0, a1, a2, a3));
              return ::org::apache::lucene::util::packed::t_PackedInts$Writer::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getWriter", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getWriterNoHeader(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            ::org::apache::lucene::util::packed::PackedInts$Format a1((jobject) NULL);
            PyTypeObject **p1;
            jint a2;
            jint a3;
            jint a4;
            ::org::apache::lucene::util::packed::PackedInts$Writer result((jobject) NULL);

            if (!parseArgs(args, "kKIII", ::org::apache::lucene::store::DataOutput::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a2, &a3, &a4))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getWriterNoHeader(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::util::packed::t_PackedInts$Writer::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getWriterNoHeader", args);
            return NULL;
          }

          static PyObject *t_PackedInts_maxValue(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            jlong result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::maxValue(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError(type, "maxValue", arg);
            return NULL;
          }

          static PyObject *t_PackedInts_readHeader(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::packed::PackedInts$Header result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::readHeader(a0));
              return ::org::apache::lucene::util::packed::t_PackedInts$Header::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "readHeader", arg);
            return NULL;
          }

          static PyObject *t_PackedInts_unsignedBitsRequired(PyTypeObject *type, PyObject *arg)
          {
            jlong a0;
            jint result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::unsignedBitsRequired(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "unsignedBitsRequired", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene49/Lucene49Codec.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene49 {

          ::java::lang::Class *Lucene49Codec::class$ = NULL;
          jmethodID *Lucene49Codec::mids$ = NULL;
          bool Lucene49Codec::live$ = false;

          jclass Lucene49Codec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene49/Lucene49Codec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_getDocValuesFormatForField_36ef78ba] = env->getMethodID(cls, "getDocValuesFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_getPostingsFormatForField_19d2f1c6] = env->getMethodID(cls, "getPostingsFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene49Codec::Lucene49Codec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesFormat Lucene49Codec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene49Codec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
          }

          ::org::apache::lucene::codecs::DocValuesFormat Lucene49Codec::getDocValuesFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_getDocValuesFormatForField_36ef78ba], a0.this$));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene49Codec::getPostingsFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_getPostingsFormatForField_19d2f1c6], a0.this$));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene49Codec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene49Codec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene49Codec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene49Codec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene49Codec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene49Codec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene49 {
          static PyObject *t_Lucene49Codec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene49Codec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene49Codec_init_(t_Lucene49Codec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene49Codec_docValuesFormat(t_Lucene49Codec *self, PyObject *args);
          static PyObject *t_Lucene49Codec_fieldInfosFormat(t_Lucene49Codec *self, PyObject *args);
          static PyObject *t_Lucene49Codec_getDocValuesFormatForField(t_Lucene49Codec *self, PyObject *arg);
          static PyObject *t_Lucene49Codec_getPostingsFormatForField(t_Lucene49Codec *self, PyObject *arg);
          static PyObject *t_Lucene49Codec_liveDocsFormat(t_Lucene49Codec *self, PyObject *args);
          static PyObject *t_Lucene49Codec_normsFormat(t_Lucene49Codec *self, PyObject *args);
          static PyObject *t_Lucene49Codec_postingsFormat(t_Lucene49Codec *self, PyObject *args);
          static PyObject *t_Lucene49Codec_segmentInfoFormat(t_Lucene49Codec *self, PyObject *args);
          static PyObject *t_Lucene49Codec_storedFieldsFormat(t_Lucene49Codec *self, PyObject *args);
          static PyObject *t_Lucene49Codec_termVectorsFormat(t_Lucene49Codec *self, PyObject *args);

          static PyMethodDef t_Lucene49Codec__methods_[] = {
            DECLARE_METHOD(t_Lucene49Codec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene49Codec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene49Codec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49Codec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49Codec, getDocValuesFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene49Codec, getPostingsFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene49Codec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49Codec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49Codec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49Codec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49Codec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49Codec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene49Codec, t_Lucene49Codec, ::org::apache::lucene::codecs::Codec, Lucene49Codec, t_Lucene49Codec_init_, 0, 0, 0, 0, 0);

          void t_Lucene49Codec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene49Codec), module, "Lucene49Codec", 0);
          }

          void t_Lucene49Codec::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene49Codec).tp_dict, "class_", make_descriptor(Lucene49Codec::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene49Codec).tp_dict, "wrapfn_", make_descriptor(t_Lucene49Codec::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene49Codec).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene49Codec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene49Codec::initializeClass, 1)))
              return NULL;
            return t_Lucene49Codec::wrap_Object(Lucene49Codec(((t_Lucene49Codec *) arg)->object.this$));
          }
          static PyObject *t_Lucene49Codec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene49Codec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene49Codec_init_(t_Lucene49Codec *self, PyObject *args, PyObject *kwds)
          {
            Lucene49Codec object((jobject) NULL);

            INT_CALL(object = Lucene49Codec());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene49Codec_docValuesFormat(t_Lucene49Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49Codec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene49Codec_fieldInfosFormat(t_Lucene49Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49Codec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene49Codec_getDocValuesFormatForField(t_Lucene49Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getDocValuesFormatForField(a0));
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDocValuesFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene49Codec_getPostingsFormatForField(t_Lucene49Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPostingsFormatForField(a0));
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPostingsFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene49Codec_liveDocsFormat(t_Lucene49Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49Codec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene49Codec_normsFormat(t_Lucene49Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49Codec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene49Codec_postingsFormat(t_Lucene49Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49Codec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene49Codec_segmentInfoFormat(t_Lucene49Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49Codec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene49Codec_storedFieldsFormat(t_Lucene49Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49Codec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene49Codec_termVectorsFormat(t_Lucene49Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49Codec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sinks/TokenRangeSinkFilter.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {

          ::java::lang::Class *TokenRangeSinkFilter::class$ = NULL;
          jmethodID *TokenRangeSinkFilter::mids$ = NULL;
          bool TokenRangeSinkFilter::live$ = false;

          jclass TokenRangeSinkFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sinks/TokenRangeSinkFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_accept_aea2d6e6] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/AttributeSource;)Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenRangeSinkFilter::TokenRangeSinkFilter(jint a0, jint a1) : ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

          jboolean TokenRangeSinkFilter::accept(const ::org::apache::lucene::util::AttributeSource & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_aea2d6e6], a0.this$);
          }

          void TokenRangeSinkFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {
          static PyObject *t_TokenRangeSinkFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenRangeSinkFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenRangeSinkFilter_init_(t_TokenRangeSinkFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenRangeSinkFilter_accept(t_TokenRangeSinkFilter *self, PyObject *args);
          static PyObject *t_TokenRangeSinkFilter_reset(t_TokenRangeSinkFilter *self, PyObject *args);

          static PyMethodDef t_TokenRangeSinkFilter__methods_[] = {
            DECLARE_METHOD(t_TokenRangeSinkFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenRangeSinkFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenRangeSinkFilter, accept, METH_VARARGS),
            DECLARE_METHOD(t_TokenRangeSinkFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenRangeSinkFilter, t_TokenRangeSinkFilter, ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter, TokenRangeSinkFilter, t_TokenRangeSinkFilter_init_, 0, 0, 0, 0, 0);

          void t_TokenRangeSinkFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenRangeSinkFilter), module, "TokenRangeSinkFilter", 0);
          }

          void t_TokenRangeSinkFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenRangeSinkFilter).tp_dict, "class_", make_descriptor(TokenRangeSinkFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenRangeSinkFilter).tp_dict, "wrapfn_", make_descriptor(t_TokenRangeSinkFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenRangeSinkFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenRangeSinkFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenRangeSinkFilter::initializeClass, 1)))
              return NULL;
            return t_TokenRangeSinkFilter::wrap_Object(TokenRangeSinkFilter(((t_TokenRangeSinkFilter *) arg)->object.this$));
          }
          static PyObject *t_TokenRangeSinkFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenRangeSinkFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenRangeSinkFilter_init_(t_TokenRangeSinkFilter *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            TokenRangeSinkFilter object((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              INT_CALL(object = TokenRangeSinkFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenRangeSinkFilter_accept(t_TokenRangeSinkFilter *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeSource a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeSource::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.accept(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TokenRangeSinkFilter), (PyObject *) self, "accept", args, 2);
          }

          static PyObject *t_TokenRangeSinkFilter_reset(t_TokenRangeSinkFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(TokenRangeSinkFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/TotalTermFreqValueSource.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *TotalTermFreqValueSource::class$ = NULL;
            jmethodID *TotalTermFreqValueSource::mids$ = NULL;
            bool TotalTermFreqValueSource::live$ = false;

            jclass TotalTermFreqValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/TotalTermFreqValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b45b6622] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TotalTermFreqValueSource::TotalTermFreqValueSource(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_b45b6622, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            void TotalTermFreqValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String TotalTermFreqValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean TotalTermFreqValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues TotalTermFreqValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint TotalTermFreqValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String TotalTermFreqValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_TotalTermFreqValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TotalTermFreqValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TotalTermFreqValueSource_init_(t_TotalTermFreqValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TotalTermFreqValueSource_createWeight(t_TotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_TotalTermFreqValueSource_description(t_TotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_TotalTermFreqValueSource_equals(t_TotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_TotalTermFreqValueSource_getValues(t_TotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_TotalTermFreqValueSource_hashCode(t_TotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_TotalTermFreqValueSource_name(t_TotalTermFreqValueSource *self);

            static PyMethodDef t_TotalTermFreqValueSource__methods_[] = {
              DECLARE_METHOD(t_TotalTermFreqValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TotalTermFreqValueSource, t_TotalTermFreqValueSource, ::org::apache::lucene::queries::function::ValueSource, TotalTermFreqValueSource, t_TotalTermFreqValueSource_init_, 0, 0, 0, 0, 0);

            void t_TotalTermFreqValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(TotalTermFreqValueSource), module, "TotalTermFreqValueSource", 0);
            }

            void t_TotalTermFreqValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TotalTermFreqValueSource).tp_dict, "class_", make_descriptor(TotalTermFreqValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TotalTermFreqValueSource).tp_dict, "wrapfn_", make_descriptor(t_TotalTermFreqValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TotalTermFreqValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TotalTermFreqValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TotalTermFreqValueSource::initializeClass, 1)))
                return NULL;
              return t_TotalTermFreqValueSource::wrap_Object(TotalTermFreqValueSource(((t_TotalTermFreqValueSource *) arg)->object.this$));
            }
            static PyObject *t_TotalTermFreqValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TotalTermFreqValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TotalTermFreqValueSource_init_(t_TotalTermFreqValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              TotalTermFreqValueSource object((jobject) NULL);

              if (!parseArgs(args, "sssk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = TotalTermFreqValueSource(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TotalTermFreqValueSource_createWeight(t_TotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(TotalTermFreqValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_TotalTermFreqValueSource_description(t_TotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(TotalTermFreqValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_TotalTermFreqValueSource_equals(t_TotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(TotalTermFreqValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_TotalTermFreqValueSource_getValues(t_TotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(TotalTermFreqValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_TotalTermFreqValueSource_hashCode(t_TotalTermFreqValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(TotalTermFreqValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_TotalTermFreqValueSource_name(t_TotalTermFreqValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/SpanishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *SpanishStemmer::class$ = NULL;
        jmethodID *SpanishStemmer::mids$ = NULL;
        bool SpanishStemmer::live$ = false;

        jclass SpanishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/SpanishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SpanishStemmer::SpanishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean SpanishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint SpanishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean SpanishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_SpanishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SpanishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SpanishStemmer_init_(t_SpanishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SpanishStemmer_equals(t_SpanishStemmer *self, PyObject *args);
        static PyObject *t_SpanishStemmer_hashCode(t_SpanishStemmer *self, PyObject *args);
        static PyObject *t_SpanishStemmer_stem(t_SpanishStemmer *self, PyObject *args);

        static PyMethodDef t_SpanishStemmer__methods_[] = {
          DECLARE_METHOD(t_SpanishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SpanishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SpanishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_SpanishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_SpanishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SpanishStemmer, t_SpanishStemmer, ::org::tartarus::snowball::SnowballProgram, SpanishStemmer, t_SpanishStemmer_init_, 0, 0, 0, 0, 0);

        void t_SpanishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(SpanishStemmer), module, "SpanishStemmer", 0);
        }

        void t_SpanishStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SpanishStemmer).tp_dict, "class_", make_descriptor(SpanishStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SpanishStemmer).tp_dict, "wrapfn_", make_descriptor(t_SpanishStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SpanishStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SpanishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SpanishStemmer::initializeClass, 1)))
            return NULL;
          return t_SpanishStemmer::wrap_Object(SpanishStemmer(((t_SpanishStemmer *) arg)->object.this$));
        }
        static PyObject *t_SpanishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SpanishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SpanishStemmer_init_(t_SpanishStemmer *self, PyObject *args, PyObject *kwds)
        {
          SpanishStemmer object((jobject) NULL);

          INT_CALL(object = SpanishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_SpanishStemmer_equals(t_SpanishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(SpanishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_SpanishStemmer_hashCode(t_SpanishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SpanishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_SpanishStemmer_stem(t_SpanishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(SpanishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SearcherLifetimeManager$PruneByAge.h"
#include "org/apache/lucene/search/SearcherLifetimeManager$Pruner.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SearcherLifetimeManager$PruneByAge::class$ = NULL;
        jmethodID *SearcherLifetimeManager$PruneByAge::mids$ = NULL;
        bool SearcherLifetimeManager$PruneByAge::live$ = false;

        jclass SearcherLifetimeManager$PruneByAge::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SearcherLifetimeManager$PruneByAge");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5d1c7645] = env->getMethodID(cls, "<init>", "(D)V");
            mids$[mid_doPrune_362c747b] = env->getMethodID(cls, "doPrune", "(DLorg/apache/lucene/search/IndexSearcher;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SearcherLifetimeManager$PruneByAge::SearcherLifetimeManager$PruneByAge(jdouble a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5d1c7645, a0)) {}

        jboolean SearcherLifetimeManager$PruneByAge::doPrune(jdouble a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
        {
          return env->callBooleanMethod(this$, mids$[mid_doPrune_362c747b], a0, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SearcherLifetimeManager$PruneByAge_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager$PruneByAge_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SearcherLifetimeManager$PruneByAge_init_(t_SearcherLifetimeManager$PruneByAge *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SearcherLifetimeManager$PruneByAge_doPrune(t_SearcherLifetimeManager$PruneByAge *self, PyObject *args);

        static PyMethodDef t_SearcherLifetimeManager$PruneByAge__methods_[] = {
          DECLARE_METHOD(t_SearcherLifetimeManager$PruneByAge, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherLifetimeManager$PruneByAge, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherLifetimeManager$PruneByAge, doPrune, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SearcherLifetimeManager$PruneByAge, t_SearcherLifetimeManager$PruneByAge, ::java::lang::Object, SearcherLifetimeManager$PruneByAge, t_SearcherLifetimeManager$PruneByAge_init_, 0, 0, 0, 0, 0);

        void t_SearcherLifetimeManager$PruneByAge::install(PyObject *module)
        {
          installType(&PY_TYPE(SearcherLifetimeManager$PruneByAge), module, "SearcherLifetimeManager$PruneByAge", 0);
        }

        void t_SearcherLifetimeManager$PruneByAge::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager$PruneByAge).tp_dict, "class_", make_descriptor(SearcherLifetimeManager$PruneByAge::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager$PruneByAge).tp_dict, "wrapfn_", make_descriptor(t_SearcherLifetimeManager$PruneByAge::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager$PruneByAge).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SearcherLifetimeManager$PruneByAge_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SearcherLifetimeManager$PruneByAge::initializeClass, 1)))
            return NULL;
          return t_SearcherLifetimeManager$PruneByAge::wrap_Object(SearcherLifetimeManager$PruneByAge(((t_SearcherLifetimeManager$PruneByAge *) arg)->object.this$));
        }
        static PyObject *t_SearcherLifetimeManager$PruneByAge_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SearcherLifetimeManager$PruneByAge::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SearcherLifetimeManager$PruneByAge_init_(t_SearcherLifetimeManager$PruneByAge *self, PyObject *args, PyObject *kwds)
        {
          jdouble a0;
          SearcherLifetimeManager$PruneByAge object((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            INT_CALL(object = SearcherLifetimeManager$PruneByAge(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SearcherLifetimeManager$PruneByAge_doPrune(t_SearcherLifetimeManager$PruneByAge *self, PyObject *args)
        {
          jdouble a0;
          ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "Dk", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.doPrune(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "doPrune", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/es/SpanishAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {

          ::java::lang::Class *SpanishAnalyzer::class$ = NULL;
          jmethodID *SpanishAnalyzer::mids$ = NULL;
          bool SpanishAnalyzer::live$ = false;
          ::java::lang::String *SpanishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass SpanishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/es/SpanishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_3ea629c6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanishAnalyzer::SpanishAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          SpanishAnalyzer::SpanishAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          SpanishAnalyzer::SpanishAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          SpanishAnalyzer::SpanishAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_3ea629c6, a0.this$, a1.this$)) {}

          SpanishAnalyzer::SpanishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          SpanishAnalyzer::SpanishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet SpanishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {
          static PyObject *t_SpanishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanishAnalyzer_init_(t_SpanishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_SpanishAnalyzer_get__defaultStopSet(t_SpanishAnalyzer *self, void *data);
          static PyGetSetDef t_SpanishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_SpanishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_SpanishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanishAnalyzer, t_SpanishAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, SpanishAnalyzer, t_SpanishAnalyzer_init_, 0, 0, t_SpanishAnalyzer__fields_, 0, 0);

          void t_SpanishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanishAnalyzer), module, "SpanishAnalyzer", 0);
          }

          void t_SpanishAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanishAnalyzer).tp_dict, "class_", make_descriptor(SpanishAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanishAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_SpanishAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanishAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SpanishAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(SpanishAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*SpanishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_SpanishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_SpanishAnalyzer::wrap_Object(SpanishAnalyzer(((t_SpanishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_SpanishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanishAnalyzer_init_(t_SpanishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                SpanishAnalyzer object((jobject) NULL);

                INT_CALL(object = SpanishAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                SpanishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SpanishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                SpanishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = SpanishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                SpanishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SpanishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                SpanishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SpanishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                SpanishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SpanishAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::es::SpanishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_SpanishAnalyzer_get__defaultStopSet(t_SpanishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/DateTools$Resolution.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *DateTools$Resolution::class$ = NULL;
        jmethodID *DateTools$Resolution::mids$ = NULL;
        bool DateTools$Resolution::live$ = false;
        DateTools$Resolution *DateTools$Resolution::DAY = NULL;
        DateTools$Resolution *DateTools$Resolution::HOUR = NULL;
        DateTools$Resolution *DateTools$Resolution::MILLISECOND = NULL;
        DateTools$Resolution *DateTools$Resolution::MINUTE = NULL;
        DateTools$Resolution *DateTools$Resolution::MONTH = NULL;
        DateTools$Resolution *DateTools$Resolution::SECOND = NULL;
        DateTools$Resolution *DateTools$Resolution::YEAR = NULL;

        jclass DateTools$Resolution::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/DateTools$Resolution");

            mids$ = new jmethodID[max_mid];
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_valueOf_65edc44f] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/document/DateTools$Resolution;");
            mids$[mid_values_aa4de4a9] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/document/DateTools$Resolution;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DAY = new DateTools$Resolution(env->getStaticObjectField(cls, "DAY", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            HOUR = new DateTools$Resolution(env->getStaticObjectField(cls, "HOUR", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            MILLISECOND = new DateTools$Resolution(env->getStaticObjectField(cls, "MILLISECOND", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            MINUTE = new DateTools$Resolution(env->getStaticObjectField(cls, "MINUTE", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            MONTH = new DateTools$Resolution(env->getStaticObjectField(cls, "MONTH", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            SECOND = new DateTools$Resolution(env->getStaticObjectField(cls, "SECOND", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            YEAR = new DateTools$Resolution(env->getStaticObjectField(cls, "YEAR", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String DateTools$Resolution::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        DateTools$Resolution DateTools$Resolution::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DateTools$Resolution(env->callStaticObjectMethod(cls, mids$[mid_valueOf_65edc44f], a0.this$));
        }

        JArray< DateTools$Resolution > DateTools$Resolution::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< DateTools$Resolution >(env->callStaticObjectMethod(cls, mids$[mid_values_aa4de4a9]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_DateTools$Resolution_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DateTools$Resolution_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DateTools$Resolution_of_(t_DateTools$Resolution *self, PyObject *args);
        static PyObject *t_DateTools$Resolution_toString(t_DateTools$Resolution *self, PyObject *args);
        static PyObject *t_DateTools$Resolution_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_DateTools$Resolution_values(PyTypeObject *type);
        static PyObject *t_DateTools$Resolution_get__parameters_(t_DateTools$Resolution *self, void *data);
        static PyGetSetDef t_DateTools$Resolution__fields_[] = {
          DECLARE_GET_FIELD(t_DateTools$Resolution, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DateTools$Resolution__methods_[] = {
          DECLARE_METHOD(t_DateTools$Resolution, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DateTools$Resolution, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DateTools$Resolution, of_, METH_VARARGS),
          DECLARE_METHOD(t_DateTools$Resolution, toString, METH_VARARGS),
          DECLARE_METHOD(t_DateTools$Resolution, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DateTools$Resolution, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DateTools$Resolution, t_DateTools$Resolution, ::java::lang::Enum, DateTools$Resolution, abstract_init, 0, 0, t_DateTools$Resolution__fields_, 0, 0);
        PyObject *t_DateTools$Resolution::wrap_Object(const DateTools$Resolution& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DateTools$Resolution::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DateTools$Resolution *self = (t_DateTools$Resolution *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_DateTools$Resolution::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DateTools$Resolution::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DateTools$Resolution *self = (t_DateTools$Resolution *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_DateTools$Resolution::install(PyObject *module)
        {
          installType(&PY_TYPE(DateTools$Resolution), module, "DateTools$Resolution", 0);
        }

        void t_DateTools$Resolution::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "class_", make_descriptor(DateTools$Resolution::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "wrapfn_", make_descriptor(t_DateTools$Resolution::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DateTools$Resolution::initializeClass);
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "DAY", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::DAY)));
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "HOUR", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::HOUR)));
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "MILLISECOND", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::MILLISECOND)));
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "MINUTE", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::MINUTE)));
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "MONTH", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::MONTH)));
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "SECOND", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::SECOND)));
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "YEAR", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::YEAR)));
        }

        static PyObject *t_DateTools$Resolution_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DateTools$Resolution::initializeClass, 1)))
            return NULL;
          return t_DateTools$Resolution::wrap_Object(DateTools$Resolution(((t_DateTools$Resolution *) arg)->object.this$));
        }
        static PyObject *t_DateTools$Resolution_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DateTools$Resolution::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DateTools$Resolution_of_(t_DateTools$Resolution *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_DateTools$Resolution_toString(t_DateTools$Resolution *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(DateTools$Resolution), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_DateTools$Resolution_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          DateTools$Resolution result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DateTools$Resolution::valueOf(a0));
            return t_DateTools$Resolution::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_DateTools$Resolution_values(PyTypeObject *type)
        {
          JArray< DateTools$Resolution > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::document::DateTools$Resolution::values());
          return JArray<jobject>(result.this$).wrap(t_DateTools$Resolution::wrap_jobject);
        }
        static PyObject *t_DateTools$Resolution_get__parameters_(t_DateTools$Resolution *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacets.h"
#include "java/util/List.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyFacets::class$ = NULL;
          jmethodID *TaxonomyFacets::mids$ = NULL;
          bool TaxonomyFacets::live$ = false;

          jclass TaxonomyFacets::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyFacets");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getAllDims_cdc2a528] = env->getMethodID(cls, "getAllDims", "(I)Ljava/util/List;");
              mids$[mid_verifyDim_7d95dc61] = env->getMethodID(cls, "verifyDim", "(Ljava/lang/String;)Lorg/apache/lucene/facet/FacetsConfig$DimConfig;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::List TaxonomyFacets::getAllDims(jint a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getAllDims_cdc2a528], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyFacets_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacets_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacets_getAllDims(t_TaxonomyFacets *self, PyObject *args);

          static PyMethodDef t_TaxonomyFacets__methods_[] = {
            DECLARE_METHOD(t_TaxonomyFacets, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacets, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacets, getAllDims, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyFacets, t_TaxonomyFacets, ::org::apache::lucene::facet::Facets, TaxonomyFacets, abstract_init, 0, 0, 0, 0, 0);

          void t_TaxonomyFacets::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyFacets), module, "TaxonomyFacets", 0);
          }

          void t_TaxonomyFacets::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyFacets).tp_dict, "class_", make_descriptor(TaxonomyFacets::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacets).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyFacets::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacets).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyFacets_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyFacets::initializeClass, 1)))
              return NULL;
            return t_TaxonomyFacets::wrap_Object(TaxonomyFacets(((t_TaxonomyFacets *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyFacets_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyFacets::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TaxonomyFacets_getAllDims(t_TaxonomyFacets *self, PyObject *args)
          {
            jint a0;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.getAllDims(a0));
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::facet::PY_TYPE(FacetResult));
            }

            return callSuper(&PY_TYPE(TaxonomyFacets), (PyObject *) self, "getAllDims", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo$Toffs.h"
#include "java/lang/String.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldPhraseList$WeightedPhraseInfo$Toffs::class$ = NULL;
          jmethodID *FieldPhraseList$WeightedPhraseInfo$Toffs::mids$ = NULL;
          bool FieldPhraseList$WeightedPhraseInfo$Toffs::live$ = false;

          jclass FieldPhraseList$WeightedPhraseInfo$Toffs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo$Toffs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_compareTo_7779971e] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo$Toffs;)I");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getEndOffset_54c6a179] = env->getMethodID(cls, "getEndOffset", "()I");
              mids$[mid_getStartOffset_54c6a179] = env->getMethodID(cls, "getStartOffset", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setEndOffset_39c7bd3c] = env->getMethodID(cls, "setEndOffset", "(I)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldPhraseList$WeightedPhraseInfo$Toffs::FieldPhraseList$WeightedPhraseInfo$Toffs(jint a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

          jint FieldPhraseList$WeightedPhraseInfo$Toffs::compareTo(const FieldPhraseList$WeightedPhraseInfo$Toffs & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_7779971e], a0.this$);
          }

          jboolean FieldPhraseList$WeightedPhraseInfo$Toffs::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint FieldPhraseList$WeightedPhraseInfo$Toffs::getEndOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndOffset_54c6a179]);
          }

          jint FieldPhraseList$WeightedPhraseInfo$Toffs::getStartOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getStartOffset_54c6a179]);
          }

          jint FieldPhraseList$WeightedPhraseInfo$Toffs::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void FieldPhraseList$WeightedPhraseInfo$Toffs::setEndOffset(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setEndOffset_39c7bd3c], a0);
          }

          ::java::lang::String FieldPhraseList$WeightedPhraseInfo$Toffs::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldPhraseList$WeightedPhraseInfo$Toffs_init_(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_compareTo(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *arg);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_equals(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_getEndOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_getStartOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_hashCode(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_setEndOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *arg);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_toString(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_get__endOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, void *data);
          static int t_FieldPhraseList$WeightedPhraseInfo$Toffs_set__endOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *arg, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_get__startOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, void *data);
          static PyGetSetDef t_FieldPhraseList$WeightedPhraseInfo$Toffs__fields_[] = {
            DECLARE_GETSET_FIELD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, endOffset),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, startOffset),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldPhraseList$WeightedPhraseInfo$Toffs__methods_[] = {
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, compareTo, METH_O),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, equals, METH_VARARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, getEndOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, getStartOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, setEndOffset, METH_O),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs, t_FieldPhraseList$WeightedPhraseInfo$Toffs, ::java::lang::Object, FieldPhraseList$WeightedPhraseInfo$Toffs, t_FieldPhraseList$WeightedPhraseInfo$Toffs_init_, 0, 0, t_FieldPhraseList$WeightedPhraseInfo$Toffs__fields_, 0, 0);

          void t_FieldPhraseList$WeightedPhraseInfo$Toffs::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs), module, "FieldPhraseList$WeightedPhraseInfo$Toffs", 0);
          }

          void t_FieldPhraseList$WeightedPhraseInfo$Toffs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs).tp_dict, "class_", make_descriptor(FieldPhraseList$WeightedPhraseInfo$Toffs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs).tp_dict, "wrapfn_", make_descriptor(t_FieldPhraseList$WeightedPhraseInfo$Toffs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldPhraseList$WeightedPhraseInfo$Toffs::initializeClass, 1)))
              return NULL;
            return t_FieldPhraseList$WeightedPhraseInfo$Toffs::wrap_Object(FieldPhraseList$WeightedPhraseInfo$Toffs(((t_FieldPhraseList$WeightedPhraseInfo$Toffs *) arg)->object.this$));
          }
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldPhraseList$WeightedPhraseInfo$Toffs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldPhraseList$WeightedPhraseInfo$Toffs_init_(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            FieldPhraseList$WeightedPhraseInfo$Toffs object((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              INT_CALL(object = FieldPhraseList$WeightedPhraseInfo$Toffs(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_compareTo(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *arg)
          {
            FieldPhraseList$WeightedPhraseInfo$Toffs a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", FieldPhraseList$WeightedPhraseInfo$Toffs::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_equals(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_getEndOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_getStartOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStartOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_hashCode(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_setEndOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setEndOffset(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setEndOffset", arg);
            return NULL;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_toString(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_get__endOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndOffset());
            return PyInt_FromLong((long) value);
          }
          static int t_FieldPhraseList$WeightedPhraseInfo$Toffs_set__endOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setEndOffset(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "endOffset", arg);
            return -1;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_get__startOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStartOffset());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinFieldComparator$Lowest.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ToParentBlockJoinFieldComparator$Lowest::class$ = NULL;
          jmethodID *ToParentBlockJoinFieldComparator$Lowest::mids$ = NULL;
          bool ToParentBlockJoinFieldComparator$Lowest::live$ = false;

          jclass ToParentBlockJoinFieldComparator$Lowest::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ToParentBlockJoinFieldComparator$Lowest");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2105569] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/FieldComparator;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/Filter;I)V");
              mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
              mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
              mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ToParentBlockJoinFieldComparator$Lowest::ToParentBlockJoinFieldComparator$Lowest(const ::org::apache::lucene::search::FieldComparator & a0, const ::org::apache::lucene::search::Filter & a1, const ::org::apache::lucene::search::Filter & a2, jint a3) : ::org::apache::lucene::search::join::ToParentBlockJoinFieldComparator(env->newObject(initializeClass, &mids$, mid_init$_f2105569, a0.this$, a1.this$, a2.this$, a3)) {}

          jint ToParentBlockJoinFieldComparator$Lowest::compareBottom(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
          }

          jint ToParentBlockJoinFieldComparator$Lowest::compareTop(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
          }

          void ToParentBlockJoinFieldComparator$Lowest::copy(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_of_(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args);
          static int t_ToParentBlockJoinFieldComparator$Lowest_init_(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_compareBottom(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_compareTop(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_copy(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_get__parameters_(t_ToParentBlockJoinFieldComparator$Lowest *self, void *data);
          static PyGetSetDef t_ToParentBlockJoinFieldComparator$Lowest__fields_[] = {
            DECLARE_GET_FIELD(t_ToParentBlockJoinFieldComparator$Lowest, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ToParentBlockJoinFieldComparator$Lowest__methods_[] = {
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Lowest, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Lowest, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Lowest, of_, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Lowest, compareBottom, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Lowest, compareTop, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Lowest, copy, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ToParentBlockJoinFieldComparator$Lowest, t_ToParentBlockJoinFieldComparator$Lowest, ::org::apache::lucene::search::join::ToParentBlockJoinFieldComparator, ToParentBlockJoinFieldComparator$Lowest, t_ToParentBlockJoinFieldComparator$Lowest_init_, 0, 0, t_ToParentBlockJoinFieldComparator$Lowest__fields_, 0, 0);
          PyObject *t_ToParentBlockJoinFieldComparator$Lowest::wrap_Object(const ToParentBlockJoinFieldComparator$Lowest& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ToParentBlockJoinFieldComparator$Lowest::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ToParentBlockJoinFieldComparator$Lowest *self = (t_ToParentBlockJoinFieldComparator$Lowest *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_ToParentBlockJoinFieldComparator$Lowest::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ToParentBlockJoinFieldComparator$Lowest::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ToParentBlockJoinFieldComparator$Lowest *self = (t_ToParentBlockJoinFieldComparator$Lowest *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_ToParentBlockJoinFieldComparator$Lowest::install(PyObject *module)
          {
            installType(&PY_TYPE(ToParentBlockJoinFieldComparator$Lowest), module, "ToParentBlockJoinFieldComparator$Lowest", 0);
          }

          void t_ToParentBlockJoinFieldComparator$Lowest::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator$Lowest).tp_dict, "class_", make_descriptor(ToParentBlockJoinFieldComparator$Lowest::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator$Lowest).tp_dict, "wrapfn_", make_descriptor(t_ToParentBlockJoinFieldComparator$Lowest::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator$Lowest).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ToParentBlockJoinFieldComparator$Lowest::initializeClass, 1)))
              return NULL;
            return t_ToParentBlockJoinFieldComparator$Lowest::wrap_Object(ToParentBlockJoinFieldComparator$Lowest(((t_ToParentBlockJoinFieldComparator$Lowest *) arg)->object.this$));
          }
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ToParentBlockJoinFieldComparator$Lowest::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_of_(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_ToParentBlockJoinFieldComparator$Lowest_init_(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::FieldComparator a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::search::Filter a1((jobject) NULL);
            ::org::apache::lucene::search::Filter a2((jobject) NULL);
            jint a3;
            ToParentBlockJoinFieldComparator$Lowest object((jobject) NULL);

            if (!parseArgs(args, "KkkI", ::org::apache::lucene::search::FieldComparator::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_FieldComparator::parameters_, &a1, &a2, &a3))
            {
              INT_CALL(object = ToParentBlockJoinFieldComparator$Lowest(a0, a1, a2, a3));
              self->object = object;
              self->parameters[0] = &::java::lang::PY_TYPE(Object);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_compareBottom(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.compareBottom(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator$Lowest), (PyObject *) self, "compareBottom", args, 2);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_compareTop(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.compareTop(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator$Lowest), (PyObject *) self, "compareTop", args, 2);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_copy(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.copy(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator$Lowest), (PyObject *) self, "copy", args, 2);
          }
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_get__parameters_(t_ToParentBlockJoinFieldComparator$Lowest *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfigListener.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfig.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {

              ::java::lang::Class *FieldConfigListener::class$ = NULL;
              jmethodID *FieldConfigListener::mids$ = NULL;
              bool FieldConfigListener::live$ = false;

              jclass FieldConfigListener::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/config/FieldConfigListener");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_buildFieldConfig_aaab7c6b] = env->getMethodID(cls, "buildFieldConfig", "(Lorg/apache/lucene/queryparser/flexible/core/config/FieldConfig;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              void FieldConfigListener::buildFieldConfig(const ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_buildFieldConfig_aaab7c6b], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {
              static PyObject *t_FieldConfigListener_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldConfigListener_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldConfigListener_buildFieldConfig(t_FieldConfigListener *self, PyObject *arg);

              static PyMethodDef t_FieldConfigListener__methods_[] = {
                DECLARE_METHOD(t_FieldConfigListener, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldConfigListener, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldConfigListener, buildFieldConfig, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FieldConfigListener, t_FieldConfigListener, ::java::lang::Object, FieldConfigListener, abstract_init, 0, 0, 0, 0, 0);

              void t_FieldConfigListener::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldConfigListener), module, "FieldConfigListener", 0);
              }

              void t_FieldConfigListener::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FieldConfigListener).tp_dict, "class_", make_descriptor(FieldConfigListener::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FieldConfigListener).tp_dict, "wrapfn_", make_descriptor(t_FieldConfigListener::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FieldConfigListener).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldConfigListener_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldConfigListener::initializeClass, 1)))
                  return NULL;
                return t_FieldConfigListener::wrap_Object(FieldConfigListener(((t_FieldConfigListener *) arg)->object.this$));
              }
              static PyObject *t_FieldConfigListener_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldConfigListener::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_FieldConfigListener_buildFieldConfig(t_FieldConfigListener *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.buildFieldConfig(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "buildFieldConfig", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "org/apache/lucene/index/TermContext.h"
#include "org/apache/lucene/search/TopFieldDocs.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/search/Collector.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "org/apache/lucene/document/Document.h"
#include "org/apache/lucene/index/Term.h"
#include "java/util/concurrent/ExecutorService.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *IndexSearcher::class$ = NULL;
        jmethodID *IndexSearcher::mids$ = NULL;
        bool IndexSearcher::live$ = false;

        jclass IndexSearcher::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/IndexSearcher");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7d7eaea9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;)V");
            mids$[mid_init$_4df5686b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReaderContext;)V");
            mids$[mid_init$_b62f0212] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReaderContext;Ljava/util/concurrent/ExecutorService;)V");
            mids$[mid_init$_17c46694] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/util/concurrent/ExecutorService;)V");
            mids$[mid_collectionStatistics_3acb4b2e] = env->getMethodID(cls, "collectionStatistics", "(Ljava/lang/String;)Lorg/apache/lucene/search/CollectionStatistics;");
            mids$[mid_createNormalizedWeight_fd935220] = env->getMethodID(cls, "createNormalizedWeight", "(Lorg/apache/lucene/search/Query;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_doc_9c2cfcf9] = env->getMethodID(cls, "doc", "(I)Lorg/apache/lucene/document/Document;");
            mids$[mid_doc_f65cb155] = env->getMethodID(cls, "doc", "(ILjava/util/Set;)Lorg/apache/lucene/document/Document;");
            mids$[mid_doc_a2ea3ebe] = env->getMethodID(cls, "doc", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_document_f65cb155] = env->getMethodID(cls, "document", "(ILjava/util/Set;)Lorg/apache/lucene/document/Document;");
            mids$[mid_explain_5241f7f4] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Query;I)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_getDefaultSimilarity_efcb1233] = env->getStaticMethodID(cls, "getDefaultSimilarity", "()Lorg/apache/lucene/search/similarities/Similarity;");
            mids$[mid_getIndexReader_94bbd010] = env->getMethodID(cls, "getIndexReader", "()Lorg/apache/lucene/index/IndexReader;");
            mids$[mid_getSimilarity_efcb1233] = env->getMethodID(cls, "getSimilarity", "()Lorg/apache/lucene/search/similarities/Similarity;");
            mids$[mid_getTopReaderContext_5823c99a] = env->getMethodID(cls, "getTopReaderContext", "()Lorg/apache/lucene/index/IndexReaderContext;");
            mids$[mid_rewrite_b1155c95] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/search/Query;)Lorg/apache/lucene/search/Query;");
            mids$[mid_search_01552069] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Collector;)V");
            mids$[mid_search_5e8d6ed3] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_search_d8b721b3] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/Collector;)V");
            mids$[mid_search_8e69de9d] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_search_9a382bd2] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;ILorg/apache/lucene/search/Sort;)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_search_e8c6fc04] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Sort;)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_search_e0d35976] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Sort;ZZ)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_searchAfter_131bd79f] = env->getMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_searchAfter_fb33e921] = env->getMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;ILorg/apache/lucene/search/Sort;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_searchAfter_86183cf1] = env->getMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_searchAfter_59c01c23] = env->getMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Sort;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_searchAfter_3f95b001] = env->getMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Sort;ZZ)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_setSimilarity_3b778066] = env->getMethodID(cls, "setSimilarity", "(Lorg/apache/lucene/search/similarities/Similarity;)V");
            mids$[mid_termStatistics_699f82fc] = env->getMethodID(cls, "termStatistics", "(Lorg/apache/lucene/index/Term;Lorg/apache/lucene/index/TermContext;)Lorg/apache/lucene/search/TermStatistics;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_search_d30ddef1] = env->getMethodID(cls, "search", "(Ljava/util/List;Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/search/Collector;)V");
            mids$[mid_search_8ccf64e3] = env->getMethodID(cls, "search", "(Ljava/util/List;Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/search/FieldDoc;ILorg/apache/lucene/search/Sort;ZZZ)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_search_ec76ede8] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/search/FieldDoc;ILorg/apache/lucene/search/Sort;ZZZ)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_search_1352a6c3] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Weight;ILorg/apache/lucene/search/Sort;ZZ)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_search_4d4907ad] = env->getMethodID(cls, "search", "(Ljava/util/List;Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/search/ScoreDoc;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_search_5b056f10] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/search/ScoreDoc;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_explain_423d06cb] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Weight;I)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_slices_240d90fc] = env->getMethodID(cls, "slices", "(Ljava/util/List;)[Lorg/apache/lucene/search/IndexSearcher$LeafSlice;");
            mids$[mid_wrapFilter_d642d32f] = env->getMethodID(cls, "wrapFilter", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;)Lorg/apache/lucene/search/Query;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexSearcher::IndexSearcher(const ::org::apache::lucene::index::IndexReader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7d7eaea9, a0.this$)) {}

        IndexSearcher::IndexSearcher(const ::org::apache::lucene::index::IndexReaderContext & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4df5686b, a0.this$)) {}

        IndexSearcher::IndexSearcher(const ::org::apache::lucene::index::IndexReaderContext & a0, const ::java::util::concurrent::ExecutorService & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b62f0212, a0.this$, a1.this$)) {}

        IndexSearcher::IndexSearcher(const ::org::apache::lucene::index::IndexReader & a0, const ::java::util::concurrent::ExecutorService & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_17c46694, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::CollectionStatistics IndexSearcher::collectionStatistics(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::search::CollectionStatistics(env->callObjectMethod(this$, mids$[mid_collectionStatistics_3acb4b2e], a0.this$));
        }

        ::org::apache::lucene::search::Weight IndexSearcher::createNormalizedWeight(const ::org::apache::lucene::search::Query & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createNormalizedWeight_fd935220], a0.this$));
        }

        ::org::apache::lucene::document::Document IndexSearcher::doc(jint a0) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_doc_9c2cfcf9], a0));
        }

        ::org::apache::lucene::document::Document IndexSearcher::doc(jint a0, const ::java::util::Set & a1) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_doc_f65cb155], a0, a1.this$));
        }

        void IndexSearcher::doc(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_doc_a2ea3ebe], a0, a1.this$);
        }

        ::org::apache::lucene::document::Document IndexSearcher::document(jint a0, const ::java::util::Set & a1) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_document_f65cb155], a0, a1.this$));
        }

        ::org::apache::lucene::search::Explanation IndexSearcher::explain(const ::org::apache::lucene::search::Query & a0, jint a1) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_5241f7f4], a0.this$, a1));
        }

        ::org::apache::lucene::search::similarities::Similarity IndexSearcher::getDefaultSimilarity()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::similarities::Similarity(env->callStaticObjectMethod(cls, mids$[mid_getDefaultSimilarity_efcb1233]));
        }

        ::org::apache::lucene::index::IndexReader IndexSearcher::getIndexReader() const
        {
          return ::org::apache::lucene::index::IndexReader(env->callObjectMethod(this$, mids$[mid_getIndexReader_94bbd010]));
        }

        ::org::apache::lucene::search::similarities::Similarity IndexSearcher::getSimilarity() const
        {
          return ::org::apache::lucene::search::similarities::Similarity(env->callObjectMethod(this$, mids$[mid_getSimilarity_efcb1233]));
        }

        ::org::apache::lucene::index::IndexReaderContext IndexSearcher::getTopReaderContext() const
        {
          return ::org::apache::lucene::index::IndexReaderContext(env->callObjectMethod(this$, mids$[mid_getTopReaderContext_5823c99a]));
        }

        ::org::apache::lucene::search::Query IndexSearcher::rewrite(const ::org::apache::lucene::search::Query & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_b1155c95], a0.this$));
        }

        void IndexSearcher::search(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Collector & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_search_01552069], a0.this$, a1.this$);
        }

        ::org::apache::lucene::search::TopDocs IndexSearcher::search(const ::org::apache::lucene::search::Query & a0, jint a1) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_search_5e8d6ed3], a0.this$, a1));
        }

        void IndexSearcher::search(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Filter & a1, const ::org::apache::lucene::search::Collector & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_search_d8b721b3], a0.this$, a1.this$, a2.this$);
        }

        ::org::apache::lucene::search::TopDocs IndexSearcher::search(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Filter & a1, jint a2) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_search_8e69de9d], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::TopFieldDocs IndexSearcher::search(const ::org::apache::lucene::search::Query & a0, jint a1, const ::org::apache::lucene::search::Sort & a2) const
        {
          return ::org::apache::lucene::search::TopFieldDocs(env->callObjectMethod(this$, mids$[mid_search_9a382bd2], a0.this$, a1, a2.this$));
        }

        ::org::apache::lucene::search::TopFieldDocs IndexSearcher::search(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Filter & a1, jint a2, const ::org::apache::lucene::search::Sort & a3) const
        {
          return ::org::apache::lucene::search::TopFieldDocs(env->callObjectMethod(this$, mids$[mid_search_e8c6fc04], a0.this$, a1.this$, a2, a3.this$));
        }

        ::org::apache::lucene::search::TopFieldDocs IndexSearcher::search(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Filter & a1, jint a2, const ::org::apache::lucene::search::Sort & a3, jboolean a4, jboolean a5) const
        {
          return ::org::apache::lucene::search::TopFieldDocs(env->callObjectMethod(this$, mids$[mid_search_e0d35976], a0.this$, a1.this$, a2, a3.this$, a4, a5));
        }

        ::org::apache::lucene::search::TopDocs IndexSearcher::searchAfter(const ::org::apache::lucene::search::ScoreDoc & a0, const ::org::apache::lucene::search::Query & a1, jint a2) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_searchAfter_131bd79f], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::TopDocs IndexSearcher::searchAfter(const ::org::apache::lucene::search::ScoreDoc & a0, const ::org::apache::lucene::search::Query & a1, jint a2, const ::org::apache::lucene::search::Sort & a3) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_searchAfter_fb33e921], a0.this$, a1.this$, a2, a3.this$));
        }

        ::org::apache::lucene::search::TopDocs IndexSearcher::searchAfter(const ::org::apache::lucene::search::ScoreDoc & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::Filter & a2, jint a3) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_searchAfter_86183cf1], a0.this$, a1.this$, a2.this$, a3));
        }

        ::org::apache::lucene::search::TopDocs IndexSearcher::searchAfter(const ::org::apache::lucene::search::ScoreDoc & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::Filter & a2, jint a3, const ::org::apache::lucene::search::Sort & a4) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_searchAfter_59c01c23], a0.this$, a1.this$, a2.this$, a3, a4.this$));
        }

        ::org::apache::lucene::search::TopDocs IndexSearcher::searchAfter(const ::org::apache::lucene::search::ScoreDoc & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::Filter & a2, jint a3, const ::org::apache::lucene::search::Sort & a4, jboolean a5, jboolean a6) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_searchAfter_3f95b001], a0.this$, a1.this$, a2.this$, a3, a4.this$, a5, a6));
        }

        void IndexSearcher::setSimilarity(const ::org::apache::lucene::search::similarities::Similarity & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setSimilarity_3b778066], a0.this$);
        }

        ::org::apache::lucene::search::TermStatistics IndexSearcher::termStatistics(const ::org::apache::lucene::index::Term & a0, const ::org::apache::lucene::index::TermContext & a1) const
        {
          return ::org::apache::lucene::search::TermStatistics(env->callObjectMethod(this$, mids$[mid_termStatistics_699f82fc], a0.this$, a1.this$));
        }

        ::java::lang::String IndexSearcher::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/IndexSearcher$LeafSlice.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_IndexSearcher_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexSearcher_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexSearcher_init_(t_IndexSearcher *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexSearcher_collectionStatistics(t_IndexSearcher *self, PyObject *arg);
        static PyObject *t_IndexSearcher_createNormalizedWeight(t_IndexSearcher *self, PyObject *arg);
        static PyObject *t_IndexSearcher_doc(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_document(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_explain(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_getDefaultSimilarity(PyTypeObject *type);
        static PyObject *t_IndexSearcher_getIndexReader(t_IndexSearcher *self);
        static PyObject *t_IndexSearcher_getSimilarity(t_IndexSearcher *self);
        static PyObject *t_IndexSearcher_getTopReaderContext(t_IndexSearcher *self);
        static PyObject *t_IndexSearcher_rewrite(t_IndexSearcher *self, PyObject *arg);
        static PyObject *t_IndexSearcher_search(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_searchAfter(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_setSimilarity(t_IndexSearcher *self, PyObject *arg);
        static PyObject *t_IndexSearcher_termStatistics(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_toString(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_get__defaultSimilarity(t_IndexSearcher *self, void *data);
        static PyObject *t_IndexSearcher_get__indexReader(t_IndexSearcher *self, void *data);
        static PyObject *t_IndexSearcher_get__similarity(t_IndexSearcher *self, void *data);
        static int t_IndexSearcher_set__similarity(t_IndexSearcher *self, PyObject *arg, void *data);
        static PyObject *t_IndexSearcher_get__topReaderContext(t_IndexSearcher *self, void *data);
        static PyGetSetDef t_IndexSearcher__fields_[] = {
          DECLARE_GET_FIELD(t_IndexSearcher, defaultSimilarity),
          DECLARE_GET_FIELD(t_IndexSearcher, indexReader),
          DECLARE_GETSET_FIELD(t_IndexSearcher, similarity),
          DECLARE_GET_FIELD(t_IndexSearcher, topReaderContext),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexSearcher__methods_[] = {
          DECLARE_METHOD(t_IndexSearcher, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSearcher, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSearcher, collectionStatistics, METH_O),
          DECLARE_METHOD(t_IndexSearcher, createNormalizedWeight, METH_O),
          DECLARE_METHOD(t_IndexSearcher, doc, METH_VARARGS),
          DECLARE_METHOD(t_IndexSearcher, document, METH_VARARGS),
          DECLARE_METHOD(t_IndexSearcher, explain, METH_VARARGS),
          DECLARE_METHOD(t_IndexSearcher, getDefaultSimilarity, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexSearcher, getIndexReader, METH_NOARGS),
          DECLARE_METHOD(t_IndexSearcher, getSimilarity, METH_NOARGS),
          DECLARE_METHOD(t_IndexSearcher, getTopReaderContext, METH_NOARGS),
          DECLARE_METHOD(t_IndexSearcher, rewrite, METH_O),
          DECLARE_METHOD(t_IndexSearcher, search, METH_VARARGS),
          DECLARE_METHOD(t_IndexSearcher, searchAfter, METH_VARARGS),
          DECLARE_METHOD(t_IndexSearcher, setSimilarity, METH_O),
          DECLARE_METHOD(t_IndexSearcher, termStatistics, METH_VARARGS),
          DECLARE_METHOD(t_IndexSearcher, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexSearcher, t_IndexSearcher, ::java::lang::Object, IndexSearcher, t_IndexSearcher_init_, 0, 0, t_IndexSearcher__fields_, 0, 0);

        void t_IndexSearcher::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexSearcher), module, "IndexSearcher", 0);
          PyDict_SetItemString(PY_TYPE(IndexSearcher).tp_dict, "LeafSlice", make_descriptor(&PY_TYPE(IndexSearcher$LeafSlice)));
        }

        void t_IndexSearcher::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexSearcher).tp_dict, "class_", make_descriptor(IndexSearcher::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexSearcher).tp_dict, "wrapfn_", make_descriptor(t_IndexSearcher::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexSearcher).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexSearcher_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexSearcher::initializeClass, 1)))
            return NULL;
          return t_IndexSearcher::wrap_Object(IndexSearcher(((t_IndexSearcher *) arg)->object.this$));
        }
        static PyObject *t_IndexSearcher_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexSearcher::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexSearcher_init_(t_IndexSearcher *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              IndexSearcher object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
              {
                INT_CALL(object = IndexSearcher(a0));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
              IndexSearcher object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReaderContext::initializeClass, &a0))
              {
                INT_CALL(object = IndexSearcher(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
              ::java::util::concurrent::ExecutorService a1((jobject) NULL);
              IndexSearcher object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReaderContext::initializeClass, ::java::util::concurrent::ExecutorService::initializeClass, &a0, &a1))
              {
                INT_CALL(object = IndexSearcher(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::util::concurrent::ExecutorService a1((jobject) NULL);
              IndexSearcher object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::java::util::concurrent::ExecutorService::initializeClass, &a0, &a1))
              {
                INT_CALL(object = IndexSearcher(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndexSearcher_collectionStatistics(t_IndexSearcher *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::search::CollectionStatistics result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.collectionStatistics(a0));
            return ::org::apache::lucene::search::t_CollectionStatistics::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "collectionStatistics", arg);
          return NULL;
        }

        static PyObject *t_IndexSearcher_createNormalizedWeight(t_IndexSearcher *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createNormalizedWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "createNormalizedWeight", arg);
          return NULL;
        }

        static PyObject *t_IndexSearcher_doc(t_IndexSearcher *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              ::org::apache::lucene::document::Document result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.doc(a0));
                return ::org::apache::lucene::document::t_Document::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              jint a0;
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::document::Document result((jobject) NULL);

              if (!parseArgs(args, "IK", ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_))
              {
                OBJ_CALL(result = self->object.doc(a0, a1));
                return ::org::apache::lucene::document::t_Document::wrap_Object(result);
              }
            }
            {
              jint a0;
              ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

              if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.doc(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "doc", args);
          return NULL;
        }

        static PyObject *t_IndexSearcher_document(t_IndexSearcher *self, PyObject *args)
        {
          jint a0;
          ::java::util::Set a1((jobject) NULL);
          PyTypeObject **p1;
          ::org::apache::lucene::document::Document result((jobject) NULL);

          if (!parseArgs(args, "IK", ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(result = self->object.document(a0, a1));
            return ::org::apache::lucene::document::t_Document::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "document", args);
          return NULL;
        }

        static PyObject *t_IndexSearcher_explain(t_IndexSearcher *self, PyObject *args)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::search::Explanation result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.explain(a0, a1));
            return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "explain", args);
          return NULL;
        }

        static PyObject *t_IndexSearcher_getDefaultSimilarity(PyTypeObject *type)
        {
          ::org::apache::lucene::search::similarities::Similarity result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::IndexSearcher::getDefaultSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(result);
        }

        static PyObject *t_IndexSearcher_getIndexReader(t_IndexSearcher *self)
        {
          ::org::apache::lucene::index::IndexReader result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexReader());
          return ::org::apache::lucene::index::t_IndexReader::wrap_Object(result);
        }

        static PyObject *t_IndexSearcher_getSimilarity(t_IndexSearcher *self)
        {
          ::org::apache::lucene::search::similarities::Similarity result((jobject) NULL);
          OBJ_CALL(result = self->object.getSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(result);
        }

        static PyObject *t_IndexSearcher_getTopReaderContext(t_IndexSearcher *self)
        {
          ::org::apache::lucene::index::IndexReaderContext result((jobject) NULL);
          OBJ_CALL(result = self->object.getTopReaderContext());
          return ::org::apache::lucene::index::t_IndexReaderContext::wrap_Object(result);
        }

        static PyObject *t_IndexSearcher_rewrite(t_IndexSearcher *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "rewrite", arg);
          return NULL;
        }

        static PyObject *t_IndexSearcher_search(t_IndexSearcher *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::Collector a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.search(a0, a1));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.search(a0, a1));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::Filter a1((jobject) NULL);
              ::org::apache::lucene::search::Collector a2((jobject) NULL);

              if (!parseArgs(args, "kkk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.search(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::Filter a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkI", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.search(a0, a1, a2));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::search::Sort a2((jobject) NULL);
              ::org::apache::lucene::search::TopFieldDocs result((jobject) NULL);

              if (!parseArgs(args, "kIk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.search(a0, a1, a2));
                return ::org::apache::lucene::search::t_TopFieldDocs::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::Filter a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::Sort a3((jobject) NULL);
              ::org::apache::lucene::search::TopFieldDocs result((jobject) NULL);

              if (!parseArgs(args, "kkIk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.search(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_TopFieldDocs::wrap_Object(result);
              }
            }
            break;
           case 6:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::Filter a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::Sort a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              ::org::apache::lucene::search::TopFieldDocs result((jobject) NULL);

              if (!parseArgs(args, "kkIkZZ", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = self->object.search(a0, a1, a2, a3, a4, a5));
                return ::org::apache::lucene::search::t_TopFieldDocs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "search", args);
          return NULL;
        }

        static PyObject *t_IndexSearcher_searchAfter(t_IndexSearcher *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::search::ScoreDoc a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkI", ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.searchAfter(a0, a1, a2));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::search::ScoreDoc a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::Sort a3((jobject) NULL);
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkIk", ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.searchAfter(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::search::ScoreDoc a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              ::org::apache::lucene::search::Filter a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkI", ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.searchAfter(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 5:
            {
              ::org::apache::lucene::search::ScoreDoc a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              ::org::apache::lucene::search::Filter a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::Sort a4((jobject) NULL);
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkIk", ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = self->object.searchAfter(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 7:
            {
              ::org::apache::lucene::search::ScoreDoc a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              ::org::apache::lucene::search::Filter a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::Sort a4((jobject) NULL);
              jboolean a5;
              jboolean a6;
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkIkZZ", ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
              {
                OBJ_CALL(result = self->object.searchAfter(a0, a1, a2, a3, a4, a5, a6));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "searchAfter", args);
          return NULL;
        }

        static PyObject *t_IndexSearcher_setSimilarity(t_IndexSearcher *self, PyObject *arg)
        {
          ::org::apache::lucene::search::similarities::Similarity a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::Similarity::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setSimilarity(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setSimilarity", arg);
          return NULL;
        }

        static PyObject *t_IndexSearcher_termStatistics(t_IndexSearcher *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::org::apache::lucene::index::TermContext a1((jobject) NULL);
          ::org::apache::lucene::search::TermStatistics result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::TermContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.termStatistics(a0, a1));
            return ::org::apache::lucene::search::t_TermStatistics::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "termStatistics", args);
          return NULL;
        }

        static PyObject *t_IndexSearcher_toString(t_IndexSearcher *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(IndexSearcher), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_IndexSearcher_get__defaultSimilarity(t_IndexSearcher *self, void *data)
        {
          ::org::apache::lucene::search::similarities::Similarity value((jobject) NULL);
          OBJ_CALL(value = self->object.getDefaultSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(value);
        }

        static PyObject *t_IndexSearcher_get__indexReader(t_IndexSearcher *self, void *data)
        {
          ::org::apache::lucene::index::IndexReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexReader());
          return ::org::apache::lucene::index::t_IndexReader::wrap_Object(value);
        }

        static PyObject *t_IndexSearcher_get__similarity(t_IndexSearcher *self, void *data)
        {
          ::org::apache::lucene::search::similarities::Similarity value((jobject) NULL);
          OBJ_CALL(value = self->object.getSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(value);
        }
        static int t_IndexSearcher_set__similarity(t_IndexSearcher *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::similarities::Similarity value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::Similarity::initializeClass, &value))
            {
              INT_CALL(self->object.setSimilarity(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "similarity", arg);
          return -1;
        }

        static PyObject *t_IndexSearcher_get__topReaderContext(t_IndexSearcher *self, void *data)
        {
          ::org::apache::lucene::index::IndexReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object.getTopReaderContext());
          return ::org::apache::lucene::index::t_IndexReaderContext::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *StringDistance::class$ = NULL;
          jmethodID *StringDistance::mids$ = NULL;
          bool StringDistance::live$ = false;

          jclass StringDistance::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/StringDistance");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getDistance_4a264752] = env->getMethodID(cls, "getDistance", "(Ljava/lang/String;Ljava/lang/String;)F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jfloat StringDistance::getDistance(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_getDistance_4a264752], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_StringDistance_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StringDistance_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StringDistance_getDistance(t_StringDistance *self, PyObject *args);

          static PyMethodDef t_StringDistance__methods_[] = {
            DECLARE_METHOD(t_StringDistance, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StringDistance, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StringDistance, getDistance, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StringDistance, t_StringDistance, ::java::lang::Object, StringDistance, abstract_init, 0, 0, 0, 0, 0);

          void t_StringDistance::install(PyObject *module)
          {
            installType(&PY_TYPE(StringDistance), module, "StringDistance", 0);
          }

          void t_StringDistance::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StringDistance).tp_dict, "class_", make_descriptor(StringDistance::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StringDistance).tp_dict, "wrapfn_", make_descriptor(t_StringDistance::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StringDistance).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StringDistance_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StringDistance::initializeClass, 1)))
              return NULL;
            return t_StringDistance::wrap_Object(StringDistance(((t_StringDistance *) arg)->object.this$));
          }
          static PyObject *t_StringDistance_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StringDistance::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_StringDistance_getDistance(t_StringDistance *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDistance", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ru/RussianLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {

          ::java::lang::Class *RussianLightStemmer::class$ = NULL;
          jmethodID *RussianLightStemmer::mids$ = NULL;
          bool RussianLightStemmer::live$ = false;

          jclass RussianLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ru/RussianLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RussianLightStemmer::RussianLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint RussianLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {
          static PyObject *t_RussianLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RussianLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RussianLightStemmer_init_(t_RussianLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RussianLightStemmer_stem(t_RussianLightStemmer *self, PyObject *args);

          static PyMethodDef t_RussianLightStemmer__methods_[] = {
            DECLARE_METHOD(t_RussianLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RussianLightStemmer, t_RussianLightStemmer, ::java::lang::Object, RussianLightStemmer, t_RussianLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_RussianLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(RussianLightStemmer), module, "RussianLightStemmer", 0);
          }

          void t_RussianLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RussianLightStemmer).tp_dict, "class_", make_descriptor(RussianLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RussianLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_RussianLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RussianLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RussianLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RussianLightStemmer::initializeClass, 1)))
              return NULL;
            return t_RussianLightStemmer::wrap_Object(RussianLightStemmer(((t_RussianLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_RussianLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RussianLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RussianLightStemmer_init_(t_RussianLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            RussianLightStemmer object((jobject) NULL);

            INT_CALL(object = RussianLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_RussianLightStemmer_stem(t_RussianLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/PorterStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *PorterStemmer::class$ = NULL;
        jmethodID *PorterStemmer::mids$ = NULL;
        bool PorterStemmer::live$ = false;

        jclass PorterStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/PorterStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PorterStemmer::PorterStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean PorterStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint PorterStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean PorterStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_PorterStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PorterStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PorterStemmer_init_(t_PorterStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PorterStemmer_equals(t_PorterStemmer *self, PyObject *args);
        static PyObject *t_PorterStemmer_hashCode(t_PorterStemmer *self, PyObject *args);
        static PyObject *t_PorterStemmer_stem(t_PorterStemmer *self, PyObject *args);

        static PyMethodDef t_PorterStemmer__methods_[] = {
          DECLARE_METHOD(t_PorterStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PorterStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PorterStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_PorterStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_PorterStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PorterStemmer, t_PorterStemmer, ::org::tartarus::snowball::SnowballProgram, PorterStemmer, t_PorterStemmer_init_, 0, 0, 0, 0, 0);

        void t_PorterStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(PorterStemmer), module, "PorterStemmer", 0);
        }

        void t_PorterStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PorterStemmer).tp_dict, "class_", make_descriptor(PorterStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PorterStemmer).tp_dict, "wrapfn_", make_descriptor(t_PorterStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PorterStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PorterStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PorterStemmer::initializeClass, 1)))
            return NULL;
          return t_PorterStemmer::wrap_Object(PorterStemmer(((t_PorterStemmer *) arg)->object.this$));
        }
        static PyObject *t_PorterStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PorterStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PorterStemmer_init_(t_PorterStemmer *self, PyObject *args, PyObject *kwds)
        {
          PorterStemmer object((jobject) NULL);

          INT_CALL(object = PorterStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_PorterStemmer_equals(t_PorterStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PorterStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PorterStemmer_hashCode(t_PorterStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(PorterStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_PorterStemmer_stem(t_PorterStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PorterStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/UnsortedInputIterator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/util/Set.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *UnsortedInputIterator::class$ = NULL;
          jmethodID *UnsortedInputIterator::mids$ = NULL;
          bool UnsortedInputIterator::live$ = false;

          jclass UnsortedInputIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/UnsortedInputIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1754a234] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
              mids$[mid_contexts_03e99967] = env->getMethodID(cls, "contexts", "()Ljava/util/Set;");
              mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_payload_4ae19461] = env->getMethodID(cls, "payload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UnsortedInputIterator::UnsortedInputIterator(const ::org::apache::lucene::search::suggest::InputIterator & a0) : ::org::apache::lucene::search::suggest::BufferedInputIterator(env->newObject(initializeClass, &mids$, mid_init$_1754a234, a0.this$)) {}

          ::java::util::Set UnsortedInputIterator::contexts() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_contexts_03e99967]));
          }

          ::org::apache::lucene::util::BytesRef UnsortedInputIterator::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
          }

          ::org::apache::lucene::util::BytesRef UnsortedInputIterator::payload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_payload_4ae19461]));
          }

          jlong UnsortedInputIterator::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_UnsortedInputIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UnsortedInputIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UnsortedInputIterator_init_(t_UnsortedInputIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UnsortedInputIterator_contexts(t_UnsortedInputIterator *self, PyObject *args);
          static PyObject *t_UnsortedInputIterator_next(t_UnsortedInputIterator *self, PyObject *args);
          static PyObject *t_UnsortedInputIterator_payload(t_UnsortedInputIterator *self, PyObject *args);
          static PyObject *t_UnsortedInputIterator_weight(t_UnsortedInputIterator *self, PyObject *args);

          static PyMethodDef t_UnsortedInputIterator__methods_[] = {
            DECLARE_METHOD(t_UnsortedInputIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UnsortedInputIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UnsortedInputIterator, contexts, METH_VARARGS),
            DECLARE_METHOD(t_UnsortedInputIterator, next, METH_VARARGS),
            DECLARE_METHOD(t_UnsortedInputIterator, payload, METH_VARARGS),
            DECLARE_METHOD(t_UnsortedInputIterator, weight, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(UnsortedInputIterator, t_UnsortedInputIterator, ::org::apache::lucene::search::suggest::BufferedInputIterator, UnsortedInputIterator, t_UnsortedInputIterator_init_, PyObject_SelfIter, ((PyObject *(*)(t_UnsortedInputIterator *)) get_next< t_UnsortedInputIterator,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), 0, 0, 0);

          void t_UnsortedInputIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(UnsortedInputIterator), module, "UnsortedInputIterator", 0);
          }

          void t_UnsortedInputIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(UnsortedInputIterator).tp_dict, "class_", make_descriptor(UnsortedInputIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(UnsortedInputIterator).tp_dict, "wrapfn_", make_descriptor(t_UnsortedInputIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(UnsortedInputIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_UnsortedInputIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UnsortedInputIterator::initializeClass, 1)))
              return NULL;
            return t_UnsortedInputIterator::wrap_Object(UnsortedInputIterator(((t_UnsortedInputIterator *) arg)->object.this$));
          }
          static PyObject *t_UnsortedInputIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UnsortedInputIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UnsortedInputIterator_init_(t_UnsortedInputIterator *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);
            UnsortedInputIterator object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
            {
              INT_CALL(object = UnsortedInputIterator(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UnsortedInputIterator_contexts(t_UnsortedInputIterator *self, PyObject *args)
          {
            ::java::util::Set result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.contexts());
              return ::java::util::t_Set::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
            }

            return callSuper(&PY_TYPE(UnsortedInputIterator), (PyObject *) self, "contexts", args, 2);
          }

          static PyObject *t_UnsortedInputIterator_next(t_UnsortedInputIterator *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.next());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(UnsortedInputIterator), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_UnsortedInputIterator_payload(t_UnsortedInputIterator *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.payload());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(UnsortedInputIterator), (PyObject *) self, "payload", args, 2);
          }

          static PyObject *t_UnsortedInputIterator_weight(t_UnsortedInputIterator *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.weight());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(UnsortedInputIterator), (PyObject *) self, "weight", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/FileNotFoundException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *FileNotFoundException::class$ = NULL;
    jmethodID *FileNotFoundException::mids$ = NULL;
    bool FileNotFoundException::live$ = false;

    jclass FileNotFoundException::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/FileNotFoundException");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    FileNotFoundException::FileNotFoundException() : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    FileNotFoundException::FileNotFoundException(const ::java::lang::String & a0) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_FileNotFoundException_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_FileNotFoundException_instance_(PyTypeObject *type, PyObject *arg);
    static int t_FileNotFoundException_init_(t_FileNotFoundException *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_FileNotFoundException__methods_[] = {
      DECLARE_METHOD(t_FileNotFoundException, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_FileNotFoundException, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(FileNotFoundException, t_FileNotFoundException, ::java::io::IOException, FileNotFoundException, t_FileNotFoundException_init_, 0, 0, 0, 0, 0);

    void t_FileNotFoundException::install(PyObject *module)
    {
      installType(&PY_TYPE(FileNotFoundException), module, "FileNotFoundException", 0);
    }

    void t_FileNotFoundException::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(FileNotFoundException).tp_dict, "class_", make_descriptor(FileNotFoundException::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(FileNotFoundException).tp_dict, "wrapfn_", make_descriptor(t_FileNotFoundException::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(FileNotFoundException).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_FileNotFoundException_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, FileNotFoundException::initializeClass, 1)))
        return NULL;
      return t_FileNotFoundException::wrap_Object(FileNotFoundException(((t_FileNotFoundException *) arg)->object.this$));
    }
    static PyObject *t_FileNotFoundException_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, FileNotFoundException::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_FileNotFoundException_init_(t_FileNotFoundException *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          FileNotFoundException object((jobject) NULL);

          INT_CALL(object = FileNotFoundException());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          FileNotFoundException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = FileNotFoundException(a0));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {

              ::java::lang::Class *QueryNodeProcessor::class$ = NULL;
              jmethodID *QueryNodeProcessor::mids$ = NULL;
              bool QueryNodeProcessor::live$ = false;

              jclass QueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_getQueryConfigHandler_3636d8c3] = env->getMethodID(cls, "getQueryConfigHandler", "()Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setQueryConfigHandler_0b1f7132] = env->getMethodID(cls, "setQueryConfigHandler", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler QueryNodeProcessor::getQueryConfigHandler() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->callObjectMethod(this$, mids$[mid_getQueryConfigHandler_3636d8c3]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }

              void QueryNodeProcessor::setQueryConfigHandler(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setQueryConfigHandler_0b1f7132], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {
              static PyObject *t_QueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeProcessor_getQueryConfigHandler(t_QueryNodeProcessor *self);
              static PyObject *t_QueryNodeProcessor_process(t_QueryNodeProcessor *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessor_setQueryConfigHandler(t_QueryNodeProcessor *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessor_get__queryConfigHandler(t_QueryNodeProcessor *self, void *data);
              static int t_QueryNodeProcessor_set__queryConfigHandler(t_QueryNodeProcessor *self, PyObject *arg, void *data);
              static PyGetSetDef t_QueryNodeProcessor__fields_[] = {
                DECLARE_GETSET_FIELD(t_QueryNodeProcessor, queryConfigHandler),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_QueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_QueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeProcessor, getQueryConfigHandler, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessor, process, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessor, setQueryConfigHandler, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryNodeProcessor, t_QueryNodeProcessor, ::java::lang::Object, QueryNodeProcessor, abstract_init, 0, 0, t_QueryNodeProcessor__fields_, 0, 0);

              void t_QueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryNodeProcessor), module, "QueryNodeProcessor", 0);
              }

              void t_QueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessor).tp_dict, "class_", make_descriptor(QueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_QueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_QueryNodeProcessor::wrap_Object(QueryNodeProcessor(((t_QueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_QueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_QueryNodeProcessor_getQueryConfigHandler(t_QueryNodeProcessor *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler result((jobject) NULL);
                OBJ_CALL(result = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(result);
              }

              static PyObject *t_QueryNodeProcessor_process(t_QueryNodeProcessor *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "process", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessor_setQueryConfigHandler(t_QueryNodeProcessor *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setQueryConfigHandler(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setQueryConfigHandler", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessor_get__queryConfigHandler(t_QueryNodeProcessor *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                OBJ_CALL(value = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(value);
              }
              static int t_QueryNodeProcessor_set__queryConfigHandler(t_QueryNodeProcessor *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &value))
                  {
                    INT_CALL(self->object.setQueryConfigHandler(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "queryConfigHandler", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/NumericRangeQuery.h"
#include "java/lang/Integer.h"
#include "java/lang/Double.h"
#include "java/lang/Class.h"
#include "java/lang/Long.h"
#include "java/lang/Float.h"
#include "java/lang/Object.h"
#include "java/lang/Number.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *NumericRangeQuery::class$ = NULL;
        jmethodID *NumericRangeQuery::mids$ = NULL;
        bool NumericRangeQuery::live$ = false;

        jclass NumericRangeQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/NumericRangeQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getMax_ee47e3e1] = env->getMethodID(cls, "getMax", "()Ljava/lang/Number;");
            mids$[mid_getMin_ee47e3e1] = env->getMethodID(cls, "getMin", "()Ljava/lang/Number;");
            mids$[mid_getPrecisionStep_54c6a179] = env->getMethodID(cls, "getPrecisionStep", "()I");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_includesMax_54c6a16a] = env->getMethodID(cls, "includesMax", "()Z");
            mids$[mid_includesMin_54c6a16a] = env->getMethodID(cls, "includesMin", "()Z");
            mids$[mid_newDoubleRange_132cc8c2] = env->getStaticMethodID(cls, "newDoubleRange", "(Ljava/lang/String;Ljava/lang/Double;Ljava/lang/Double;ZZ)Lorg/apache/lucene/search/NumericRangeQuery;");
            mids$[mid_newDoubleRange_b1350bd0] = env->getStaticMethodID(cls, "newDoubleRange", "(Ljava/lang/String;ILjava/lang/Double;Ljava/lang/Double;ZZ)Lorg/apache/lucene/search/NumericRangeQuery;");
            mids$[mid_newFloatRange_ff7ed1ca] = env->getStaticMethodID(cls, "newFloatRange", "(Ljava/lang/String;Ljava/lang/Float;Ljava/lang/Float;ZZ)Lorg/apache/lucene/search/NumericRangeQuery;");
            mids$[mid_newFloatRange_3f37d14c] = env->getStaticMethodID(cls, "newFloatRange", "(Ljava/lang/String;ILjava/lang/Float;Ljava/lang/Float;ZZ)Lorg/apache/lucene/search/NumericRangeQuery;");
            mids$[mid_newIntRange_dfaf9ce2] = env->getStaticMethodID(cls, "newIntRange", "(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Integer;ZZ)Lorg/apache/lucene/search/NumericRangeQuery;");
            mids$[mid_newIntRange_25dc6448] = env->getStaticMethodID(cls, "newIntRange", "(Ljava/lang/String;ILjava/lang/Integer;Ljava/lang/Integer;ZZ)Lorg/apache/lucene/search/NumericRangeQuery;");
            mids$[mid_newLongRange_8e5c5fbe] = env->getStaticMethodID(cls, "newLongRange", "(Ljava/lang/String;Ljava/lang/Long;Ljava/lang/Long;ZZ)Lorg/apache/lucene/search/NumericRangeQuery;");
            mids$[mid_newLongRange_d325b43c] = env->getStaticMethodID(cls, "newLongRange", "(Ljava/lang/String;ILjava/lang/Long;Ljava/lang/Long;ZZ)Lorg/apache/lucene/search/NumericRangeQuery;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getTermsEnum_67b5a29a] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean NumericRangeQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::lang::Number NumericRangeQuery::getMax() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getMax_ee47e3e1]));
        }

        ::java::lang::Number NumericRangeQuery::getMin() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getMin_ee47e3e1]));
        }

        jint NumericRangeQuery::getPrecisionStep() const
        {
          return env->callIntMethod(this$, mids$[mid_getPrecisionStep_54c6a179]);
        }

        jint NumericRangeQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean NumericRangeQuery::includesMax() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesMax_54c6a16a]);
        }

        jboolean NumericRangeQuery::includesMin() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesMin_54c6a16a]);
        }

        NumericRangeQuery NumericRangeQuery::newDoubleRange(const ::java::lang::String & a0, const ::java::lang::Double & a1, const ::java::lang::Double & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newDoubleRange_132cc8c2], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        NumericRangeQuery NumericRangeQuery::newDoubleRange(const ::java::lang::String & a0, jint a1, const ::java::lang::Double & a2, const ::java::lang::Double & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newDoubleRange_b1350bd0], a0.this$, a1, a2.this$, a3.this$, a4, a5));
        }

        NumericRangeQuery NumericRangeQuery::newFloatRange(const ::java::lang::String & a0, const ::java::lang::Float & a1, const ::java::lang::Float & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newFloatRange_ff7ed1ca], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        NumericRangeQuery NumericRangeQuery::newFloatRange(const ::java::lang::String & a0, jint a1, const ::java::lang::Float & a2, const ::java::lang::Float & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newFloatRange_3f37d14c], a0.this$, a1, a2.this$, a3.this$, a4, a5));
        }

        NumericRangeQuery NumericRangeQuery::newIntRange(const ::java::lang::String & a0, const ::java::lang::Integer & a1, const ::java::lang::Integer & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newIntRange_dfaf9ce2], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        NumericRangeQuery NumericRangeQuery::newIntRange(const ::java::lang::String & a0, jint a1, const ::java::lang::Integer & a2, const ::java::lang::Integer & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newIntRange_25dc6448], a0.this$, a1, a2.this$, a3.this$, a4, a5));
        }

        NumericRangeQuery NumericRangeQuery::newLongRange(const ::java::lang::String & a0, const ::java::lang::Long & a1, const ::java::lang::Long & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newLongRange_8e5c5fbe], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        NumericRangeQuery NumericRangeQuery::newLongRange(const ::java::lang::String & a0, jint a1, const ::java::lang::Long & a2, const ::java::lang::Long & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newLongRange_d325b43c], a0.this$, a1, a2.this$, a3.this$, a4, a5));
        }

        ::java::lang::String NumericRangeQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_NumericRangeQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericRangeQuery_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericRangeQuery_of_(t_NumericRangeQuery *self, PyObject *args);
        static PyObject *t_NumericRangeQuery_equals(t_NumericRangeQuery *self, PyObject *args);
        static PyObject *t_NumericRangeQuery_getMax(t_NumericRangeQuery *self);
        static PyObject *t_NumericRangeQuery_getMin(t_NumericRangeQuery *self);
        static PyObject *t_NumericRangeQuery_getPrecisionStep(t_NumericRangeQuery *self);
        static PyObject *t_NumericRangeQuery_hashCode(t_NumericRangeQuery *self, PyObject *args);
        static PyObject *t_NumericRangeQuery_includesMax(t_NumericRangeQuery *self);
        static PyObject *t_NumericRangeQuery_includesMin(t_NumericRangeQuery *self);
        static PyObject *t_NumericRangeQuery_newDoubleRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericRangeQuery_newFloatRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericRangeQuery_newIntRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericRangeQuery_newLongRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericRangeQuery_toString(t_NumericRangeQuery *self, PyObject *args);
        static PyObject *t_NumericRangeQuery_get__max(t_NumericRangeQuery *self, void *data);
        static PyObject *t_NumericRangeQuery_get__min(t_NumericRangeQuery *self, void *data);
        static PyObject *t_NumericRangeQuery_get__precisionStep(t_NumericRangeQuery *self, void *data);
        static PyObject *t_NumericRangeQuery_get__parameters_(t_NumericRangeQuery *self, void *data);
        static PyGetSetDef t_NumericRangeQuery__fields_[] = {
          DECLARE_GET_FIELD(t_NumericRangeQuery, max),
          DECLARE_GET_FIELD(t_NumericRangeQuery, min),
          DECLARE_GET_FIELD(t_NumericRangeQuery, precisionStep),
          DECLARE_GET_FIELD(t_NumericRangeQuery, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NumericRangeQuery__methods_[] = {
          DECLARE_METHOD(t_NumericRangeQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeQuery, of_, METH_VARARGS),
          DECLARE_METHOD(t_NumericRangeQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_NumericRangeQuery, getMax, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeQuery, getMin, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeQuery, getPrecisionStep, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_NumericRangeQuery, includesMax, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeQuery, includesMin, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeQuery, newDoubleRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeQuery, newFloatRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeQuery, newIntRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeQuery, newLongRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericRangeQuery, t_NumericRangeQuery, ::org::apache::lucene::search::MultiTermQuery, NumericRangeQuery, abstract_init, 0, 0, t_NumericRangeQuery__fields_, 0, 0);
        PyObject *t_NumericRangeQuery::wrap_Object(const NumericRangeQuery& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NumericRangeQuery::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NumericRangeQuery *self = (t_NumericRangeQuery *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_NumericRangeQuery::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NumericRangeQuery::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NumericRangeQuery *self = (t_NumericRangeQuery *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_NumericRangeQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericRangeQuery), module, "NumericRangeQuery", 0);
        }

        void t_NumericRangeQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericRangeQuery).tp_dict, "class_", make_descriptor(NumericRangeQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericRangeQuery).tp_dict, "wrapfn_", make_descriptor(t_NumericRangeQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericRangeQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NumericRangeQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericRangeQuery::initializeClass, 1)))
            return NULL;
          return t_NumericRangeQuery::wrap_Object(NumericRangeQuery(((t_NumericRangeQuery *) arg)->object.this$));
        }
        static PyObject *t_NumericRangeQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericRangeQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NumericRangeQuery_of_(t_NumericRangeQuery *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_NumericRangeQuery_equals(t_NumericRangeQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(NumericRangeQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_NumericRangeQuery_getMax(t_NumericRangeQuery *self)
        {
          ::java::lang::Number result((jobject) NULL);
          OBJ_CALL(result = self->object.getMax());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Number::wrap_Object(result);
        }

        static PyObject *t_NumericRangeQuery_getMin(t_NumericRangeQuery *self)
        {
          ::java::lang::Number result((jobject) NULL);
          OBJ_CALL(result = self->object.getMin());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Number::wrap_Object(result);
        }

        static PyObject *t_NumericRangeQuery_getPrecisionStep(t_NumericRangeQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPrecisionStep());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericRangeQuery_hashCode(t_NumericRangeQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(NumericRangeQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_NumericRangeQuery_includesMax(t_NumericRangeQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesMax());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_NumericRangeQuery_includesMin(t_NumericRangeQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesMin());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_NumericRangeQuery_newDoubleRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Double a1((jobject) NULL);
              ::java::lang::Double a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              NumericRangeQuery result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Double), &::java::lang::PY_TYPE(Double), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeQuery::newDoubleRange(a0, a1, a2, a3, a4));
                return t_NumericRangeQuery::wrap_Object(result, &::java::lang::PY_TYPE(Double));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::lang::Double a2((jobject) NULL);
              ::java::lang::Double a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              NumericRangeQuery result((jobject) NULL);

              if (!parseArgs(args, "sIOOZZ", &::java::lang::PY_TYPE(Double), &::java::lang::PY_TYPE(Double), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeQuery::newDoubleRange(a0, a1, a2, a3, a4, a5));
                return t_NumericRangeQuery::wrap_Object(result, &::java::lang::PY_TYPE(Double));
              }
            }
          }

          PyErr_SetArgsError(type, "newDoubleRange", args);
          return NULL;
        }

        static PyObject *t_NumericRangeQuery_newFloatRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Float a1((jobject) NULL);
              ::java::lang::Float a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              NumericRangeQuery result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Float), &::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeQuery::newFloatRange(a0, a1, a2, a3, a4));
                return t_NumericRangeQuery::wrap_Object(result, &::java::lang::PY_TYPE(Float));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::lang::Float a2((jobject) NULL);
              ::java::lang::Float a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              NumericRangeQuery result((jobject) NULL);

              if (!parseArgs(args, "sIOOZZ", &::java::lang::PY_TYPE(Float), &::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeQuery::newFloatRange(a0, a1, a2, a3, a4, a5));
                return t_NumericRangeQuery::wrap_Object(result, &::java::lang::PY_TYPE(Float));
              }
            }
          }

          PyErr_SetArgsError(type, "newFloatRange", args);
          return NULL;
        }

        static PyObject *t_NumericRangeQuery_newIntRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Integer a1((jobject) NULL);
              ::java::lang::Integer a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              NumericRangeQuery result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Integer), &::java::lang::PY_TYPE(Integer), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeQuery::newIntRange(a0, a1, a2, a3, a4));
                return t_NumericRangeQuery::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::lang::Integer a2((jobject) NULL);
              ::java::lang::Integer a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              NumericRangeQuery result((jobject) NULL);

              if (!parseArgs(args, "sIOOZZ", &::java::lang::PY_TYPE(Integer), &::java::lang::PY_TYPE(Integer), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeQuery::newIntRange(a0, a1, a2, a3, a4, a5));
                return t_NumericRangeQuery::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
              }
            }
          }

          PyErr_SetArgsError(type, "newIntRange", args);
          return NULL;
        }

        static PyObject *t_NumericRangeQuery_newLongRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Long a1((jobject) NULL);
              ::java::lang::Long a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              NumericRangeQuery result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeQuery::newLongRange(a0, a1, a2, a3, a4));
                return t_NumericRangeQuery::wrap_Object(result, &::java::lang::PY_TYPE(Long));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::lang::Long a2((jobject) NULL);
              ::java::lang::Long a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              NumericRangeQuery result((jobject) NULL);

              if (!parseArgs(args, "sIOOZZ", &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeQuery::newLongRange(a0, a1, a2, a3, a4, a5));
                return t_NumericRangeQuery::wrap_Object(result, &::java::lang::PY_TYPE(Long));
              }
            }
          }

          PyErr_SetArgsError(type, "newLongRange", args);
          return NULL;
        }

        static PyObject *t_NumericRangeQuery_toString(t_NumericRangeQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(NumericRangeQuery), (PyObject *) self, "toString", args, 2);
        }
        static PyObject *t_NumericRangeQuery_get__parameters_(t_NumericRangeQuery *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_NumericRangeQuery_get__max(t_NumericRangeQuery *self, void *data)
        {
          ::java::lang::Number value((jobject) NULL);
          OBJ_CALL(value = self->object.getMax());
          return ::java::lang::t_Number::wrap_Object(value);
        }

        static PyObject *t_NumericRangeQuery_get__min(t_NumericRangeQuery *self, void *data)
        {
          ::java::lang::Number value((jobject) NULL);
          OBJ_CALL(value = self->object.getMin());
          return ::java::lang::t_Number::wrap_Object(value);
        }

        static PyObject *t_NumericRangeQuery_get__precisionStep(t_NumericRangeQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPrecisionStep());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/Field.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/document/FieldType.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "org/apache/lucene/document/Field$TermVector.h"
#include "org/apache/lucene/document/Field$Index.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "java/lang/Number.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *Field::class$ = NULL;
        jmethodID *Field::mids$ = NULL;
        bool Field::live$ = false;

        jclass Field::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/Field");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_23e5278e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/io/Reader;)V");
            mids$[mid_init$_97e62b21] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[B)V");
            mids$[mid_init$_7d0c5392] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_init$_36a37f8e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/document/Field$TermVector;)V");
            mids$[mid_init$_65c4643a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/io/Reader;Lorg/apache/lucene/document/Field$TermVector;)V");
            mids$[mid_init$_4a37b91f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[BLorg/apache/lucene/document/FieldType;)V");
            mids$[mid_init$_3af3ec14] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/document/FieldType;)V");
            mids$[mid_init$_406439e8] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/io/Reader;Lorg/apache/lucene/document/FieldType;)V");
            mids$[mid_init$_7ccdd79c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/document/FieldType;)V");
            mids$[mid_init$_9c27c9b4] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/document/FieldType;)V");
            mids$[mid_init$_eab5cd19] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[BII)V");
            mids$[mid_init$_5c377d43] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/document/Field$Store;Lorg/apache/lucene/document/Field$Index;)V");
            mids$[mid_init$_596be1b9] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/document/Field$Store;Lorg/apache/lucene/document/Field$Index;Lorg/apache/lucene/document/Field$TermVector;)V");
            mids$[mid_init$_b94bfb2f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[BIILorg/apache/lucene/document/FieldType;)V");
            mids$[mid_binaryValue_4ae19461] = env->getMethodID(cls, "binaryValue", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_boost_54c6a176] = env->getMethodID(cls, "boost", "()F");
            mids$[mid_fieldType_a2615189] = env->getMethodID(cls, "fieldType", "()Lorg/apache/lucene/document/FieldType;");
            mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
            mids$[mid_numericValue_ee47e3e1] = env->getMethodID(cls, "numericValue", "()Ljava/lang/Number;");
            mids$[mid_readerValue_b6f16bdd] = env->getMethodID(cls, "readerValue", "()Ljava/io/Reader;");
            mids$[mid_setBoost_06298cab] = env->getMethodID(cls, "setBoost", "(F)V");
            mids$[mid_setByteValue_b2271687] = env->getMethodID(cls, "setByteValue", "(B)V");
            mids$[mid_setBytesValue_49b4f12b] = env->getMethodID(cls, "setBytesValue", "([B)V");
            mids$[mid_setBytesValue_7bc03dc4] = env->getMethodID(cls, "setBytesValue", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_setDoubleValue_5d1c7645] = env->getMethodID(cls, "setDoubleValue", "(D)V");
            mids$[mid_setFloatValue_06298cab] = env->getMethodID(cls, "setFloatValue", "(F)V");
            mids$[mid_setIntValue_39c7bd3c] = env->getMethodID(cls, "setIntValue", "(I)V");
            mids$[mid_setLongValue_0ee6df2f] = env->getMethodID(cls, "setLongValue", "(J)V");
            mids$[mid_setReaderValue_cf2e3c10] = env->getMethodID(cls, "setReaderValue", "(Ljava/io/Reader;)V");
            mids$[mid_setShortValue_3bc40c6a] = env->getMethodID(cls, "setShortValue", "(S)V");
            mids$[mid_setStringValue_5fdc3f48] = env->getMethodID(cls, "setStringValue", "(Ljava/lang/String;)V");
            mids$[mid_setTokenStream_c7c794dc] = env->getMethodID(cls, "setTokenStream", "(Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_stringValue_14c7b5c5] = env->getMethodID(cls, "stringValue", "()Ljava/lang/String;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_tokenStream_cea65119] = env->getMethodID(cls, "tokenStream", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
            mids$[mid_tokenStreamValue_71f550c9] = env->getMethodID(cls, "tokenStreamValue", "()Lorg/apache/lucene/analysis/TokenStream;");
            mids$[mid_translateFieldType_2095598c] = env->getStaticMethodID(cls, "translateFieldType", "(Lorg/apache/lucene/document/Field$Store;Lorg/apache/lucene/document/Field$Index;Lorg/apache/lucene/document/Field$TermVector;)Lorg/apache/lucene/document/FieldType;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Field::Field(const ::java::lang::String & a0, const ::java::io::Reader & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_23e5278e, a0.this$, a1.this$)) {}

        Field::Field(const ::java::lang::String & a0, const JArray< jbyte > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_97e62b21, a0.this$, a1.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7d0c5392, a0.this$, a1.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::document::Field$TermVector & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_36a37f8e, a0.this$, a1.this$, a2.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::java::io::Reader & a1, const ::org::apache::lucene::document::Field$TermVector & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_65c4643a, a0.this$, a1.this$, a2.this$)) {}

        Field::Field(const ::java::lang::String & a0, const JArray< jbyte > & a1, const ::org::apache::lucene::document::FieldType & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4a37b91f, a0.this$, a1.this$, a2.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::document::FieldType & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3af3ec14, a0.this$, a1.this$, a2.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::java::io::Reader & a1, const ::org::apache::lucene::document::FieldType & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_406439e8, a0.this$, a1.this$, a2.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::document::FieldType & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7ccdd79c, a0.this$, a1.this$, a2.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, const ::org::apache::lucene::document::FieldType & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9c27c9b4, a0.this$, a1.this$, a2.this$)) {}

        Field::Field(const ::java::lang::String & a0, const JArray< jbyte > & a1, jint a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_eab5cd19, a0.this$, a1.this$, a2, a3)) {}

        Field::Field(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::document::Field$Store & a2, const ::org::apache::lucene::document::Field$Index & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5c377d43, a0.this$, a1.this$, a2.this$, a3.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::document::Field$Store & a2, const ::org::apache::lucene::document::Field$Index & a3, const ::org::apache::lucene::document::Field$TermVector & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_596be1b9, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}

        Field::Field(const ::java::lang::String & a0, const JArray< jbyte > & a1, jint a2, jint a3, const ::org::apache::lucene::document::FieldType & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b94bfb2f, a0.this$, a1.this$, a2, a3, a4.this$)) {}

        ::org::apache::lucene::util::BytesRef Field::binaryValue() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_binaryValue_4ae19461]));
        }

        jfloat Field::boost() const
        {
          return env->callFloatMethod(this$, mids$[mid_boost_54c6a176]);
        }

        ::org::apache::lucene::document::FieldType Field::fieldType() const
        {
          return ::org::apache::lucene::document::FieldType(env->callObjectMethod(this$, mids$[mid_fieldType_a2615189]));
        }

        ::java::lang::String Field::name() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
        }

        ::java::lang::Number Field::numericValue() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_numericValue_ee47e3e1]));
        }

        ::java::io::Reader Field::readerValue() const
        {
          return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_readerValue_b6f16bdd]));
        }

        void Field::setBoost(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBoost_06298cab], a0);
        }

        void Field::setByteValue(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setByteValue_b2271687], a0);
        }

        void Field::setBytesValue(const JArray< jbyte > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBytesValue_49b4f12b], a0.this$);
        }

        void Field::setBytesValue(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBytesValue_7bc03dc4], a0.this$);
        }

        void Field::setDoubleValue(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDoubleValue_5d1c7645], a0);
        }

        void Field::setFloatValue(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setFloatValue_06298cab], a0);
        }

        void Field::setIntValue(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setIntValue_39c7bd3c], a0);
        }

        void Field::setLongValue(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLongValue_0ee6df2f], a0);
        }

        void Field::setReaderValue(const ::java::io::Reader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setReaderValue_cf2e3c10], a0.this$);
        }

        void Field::setShortValue(jshort a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setShortValue_3bc40c6a], a0);
        }

        void Field::setStringValue(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStringValue_5fdc3f48], a0.this$);
        }

        void Field::setTokenStream(const ::org::apache::lucene::analysis::TokenStream & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTokenStream_c7c794dc], a0.this$);
        }

        ::java::lang::String Field::stringValue() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_stringValue_14c7b5c5]));
        }

        ::java::lang::String Field::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::org::apache::lucene::analysis::TokenStream Field::tokenStream(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_tokenStream_cea65119], a0.this$, a1.this$));
        }

        ::org::apache::lucene::analysis::TokenStream Field::tokenStreamValue() const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_tokenStreamValue_71f550c9]));
        }

        ::org::apache::lucene::document::FieldType Field::translateFieldType(const ::org::apache::lucene::document::Field$Store & a0, const ::org::apache::lucene::document::Field$Index & a1, const ::org::apache::lucene::document::Field$TermVector & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::document::FieldType(env->callStaticObjectMethod(cls, mids$[mid_translateFieldType_2095598c], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_Field_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Field_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Field_init_(t_Field *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Field_binaryValue(t_Field *self);
        static PyObject *t_Field_boost(t_Field *self);
        static PyObject *t_Field_fieldType(t_Field *self);
        static PyObject *t_Field_name(t_Field *self);
        static PyObject *t_Field_numericValue(t_Field *self);
        static PyObject *t_Field_readerValue(t_Field *self);
        static PyObject *t_Field_setBoost(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setByteValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setBytesValue(t_Field *self, PyObject *args);
        static PyObject *t_Field_setDoubleValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setFloatValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setIntValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setLongValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setReaderValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setShortValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setStringValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setTokenStream(t_Field *self, PyObject *arg);
        static PyObject *t_Field_stringValue(t_Field *self);
        static PyObject *t_Field_toString(t_Field *self, PyObject *args);
        static PyObject *t_Field_tokenStream(t_Field *self, PyObject *args);
        static PyObject *t_Field_tokenStreamValue(t_Field *self);
        static PyObject *t_Field_translateFieldType(PyTypeObject *type, PyObject *args);
        static int t_Field_set__byteValue(t_Field *self, PyObject *arg, void *data);
        static int t_Field_set__bytesValue(t_Field *self, PyObject *arg, void *data);
        static int t_Field_set__doubleValue(t_Field *self, PyObject *arg, void *data);
        static int t_Field_set__floatValue(t_Field *self, PyObject *arg, void *data);
        static int t_Field_set__intValue(t_Field *self, PyObject *arg, void *data);
        static int t_Field_set__longValue(t_Field *self, PyObject *arg, void *data);
        static int t_Field_set__shortValue(t_Field *self, PyObject *arg, void *data);
        static PyGetSetDef t_Field__fields_[] = {
          DECLARE_SET_FIELD(t_Field, byteValue),
          DECLARE_SET_FIELD(t_Field, bytesValue),
          DECLARE_SET_FIELD(t_Field, doubleValue),
          DECLARE_SET_FIELD(t_Field, floatValue),
          DECLARE_SET_FIELD(t_Field, intValue),
          DECLARE_SET_FIELD(t_Field, longValue),
          DECLARE_SET_FIELD(t_Field, shortValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Field__methods_[] = {
          DECLARE_METHOD(t_Field, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field, binaryValue, METH_NOARGS),
          DECLARE_METHOD(t_Field, boost, METH_NOARGS),
          DECLARE_METHOD(t_Field, fieldType, METH_NOARGS),
          DECLARE_METHOD(t_Field, name, METH_NOARGS),
          DECLARE_METHOD(t_Field, numericValue, METH_NOARGS),
          DECLARE_METHOD(t_Field, readerValue, METH_NOARGS),
          DECLARE_METHOD(t_Field, setBoost, METH_O),
          DECLARE_METHOD(t_Field, setByteValue, METH_O),
          DECLARE_METHOD(t_Field, setBytesValue, METH_VARARGS),
          DECLARE_METHOD(t_Field, setDoubleValue, METH_O),
          DECLARE_METHOD(t_Field, setFloatValue, METH_O),
          DECLARE_METHOD(t_Field, setIntValue, METH_O),
          DECLARE_METHOD(t_Field, setLongValue, METH_O),
          DECLARE_METHOD(t_Field, setReaderValue, METH_O),
          DECLARE_METHOD(t_Field, setShortValue, METH_O),
          DECLARE_METHOD(t_Field, setStringValue, METH_O),
          DECLARE_METHOD(t_Field, setTokenStream, METH_O),
          DECLARE_METHOD(t_Field, stringValue, METH_NOARGS),
          DECLARE_METHOD(t_Field, toString, METH_VARARGS),
          DECLARE_METHOD(t_Field, tokenStream, METH_VARARGS),
          DECLARE_METHOD(t_Field, tokenStreamValue, METH_NOARGS),
          DECLARE_METHOD(t_Field, translateFieldType, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Field, t_Field, ::java::lang::Object, Field, t_Field_init_, 0, 0, t_Field__fields_, 0, 0);

        void t_Field::install(PyObject *module)
        {
          installType(&PY_TYPE(Field), module, "Field", 0);
          PyDict_SetItemString(PY_TYPE(Field).tp_dict, "TermVector", make_descriptor(&PY_TYPE(Field$TermVector)));
          PyDict_SetItemString(PY_TYPE(Field).tp_dict, "Index", make_descriptor(&PY_TYPE(Field$Index)));
          PyDict_SetItemString(PY_TYPE(Field).tp_dict, "Store", make_descriptor(&PY_TYPE(Field$Store)));
        }

        void t_Field::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Field).tp_dict, "class_", make_descriptor(Field::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Field).tp_dict, "wrapfn_", make_descriptor(t_Field::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Field).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Field_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Field::initializeClass, 1)))
            return NULL;
          return t_Field::wrap_Object(Field(((t_Field *) arg)->object.this$));
        }
        static PyObject *t_Field_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Field::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Field_init_(t_Field *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::io::Reader a1((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::io::Reader::initializeClass, &a0, &a1))
              {
                INT_CALL(object = Field(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > a1((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "s[B", &a0, &a1))
              {
                INT_CALL(object = Field(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
              {
                INT_CALL(object = Field(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
              ::org::apache::lucene::document::Field$TermVector a2((jobject) NULL);
              PyTypeObject **p2;
              Field object((jobject) NULL);

              if (!parseArgs(args, "skK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::document::Field$TermVector::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$TermVector::parameters_))
              {
                INT_CALL(object = Field(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::io::Reader a1((jobject) NULL);
              ::org::apache::lucene::document::Field$TermVector a2((jobject) NULL);
              PyTypeObject **p2;
              Field object((jobject) NULL);

              if (!parseArgs(args, "skK", ::java::io::Reader::initializeClass, ::org::apache::lucene::document::Field$TermVector::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$TermVector::parameters_))
              {
                INT_CALL(object = Field(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > a1((jobject) NULL);
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "s[Bk", ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = Field(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "skk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = Field(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::io::Reader a1((jobject) NULL);
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "skk", ::java::io::Reader::initializeClass, ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = Field(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "ssk", ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = Field(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "skk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = Field(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > a1((jobject) NULL);
              jint a2;
              jint a3;
              Field object((jobject) NULL);

              if (!parseArgs(args, "s[BII", &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = Field(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
              PyTypeObject **p2;
              ::org::apache::lucene::document::Field$Index a3((jobject) NULL);
              PyTypeObject **p3;
              Field object((jobject) NULL);

              if (!parseArgs(args, "ssKK", ::org::apache::lucene::document::Field$Store::initializeClass, ::org::apache::lucene::document::Field$Index::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_, &a3, &p3, ::org::apache::lucene::document::t_Field$Index::parameters_))
              {
                INT_CALL(object = Field(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            goto err;
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
              PyTypeObject **p2;
              ::org::apache::lucene::document::Field$Index a3((jobject) NULL);
              PyTypeObject **p3;
              ::org::apache::lucene::document::Field$TermVector a4((jobject) NULL);
              PyTypeObject **p4;
              Field object((jobject) NULL);

              if (!parseArgs(args, "ssKKK", ::org::apache::lucene::document::Field$Store::initializeClass, ::org::apache::lucene::document::Field$Index::initializeClass, ::org::apache::lucene::document::Field$TermVector::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_, &a3, &p3, ::org::apache::lucene::document::t_Field$Index::parameters_, &a4, &p4, ::org::apache::lucene::document::t_Field$TermVector::parameters_))
              {
                INT_CALL(object = Field(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > a1((jobject) NULL);
              jint a2;
              jint a3;
              ::org::apache::lucene::document::FieldType a4((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "s[BIIk", ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = Field(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Field_binaryValue(t_Field *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.binaryValue());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_Field_boost(t_Field *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.boost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_Field_fieldType(t_Field *self)
        {
          ::org::apache::lucene::document::FieldType result((jobject) NULL);
          OBJ_CALL(result = self->object.fieldType());
          return ::org::apache::lucene::document::t_FieldType::wrap_Object(result);
        }

        static PyObject *t_Field_name(t_Field *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.name());
          return j2p(result);
        }

        static PyObject *t_Field_numericValue(t_Field *self)
        {
          ::java::lang::Number result((jobject) NULL);
          OBJ_CALL(result = self->object.numericValue());
          return ::java::lang::t_Number::wrap_Object(result);
        }

        static PyObject *t_Field_readerValue(t_Field *self)
        {
          ::java::io::Reader result((jobject) NULL);
          OBJ_CALL(result = self->object.readerValue());
          return ::java::io::t_Reader::wrap_Object(result);
        }

        static PyObject *t_Field_setBoost(t_Field *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setBoost(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBoost", arg);
          return NULL;
        }

        static PyObject *t_Field_setByteValue(t_Field *self, PyObject *arg)
        {
          jbyte a0;

          if (!parseArg(arg, "B", &a0))
          {
            OBJ_CALL(self->object.setByteValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setByteValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setBytesValue(t_Field *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(self->object.setBytesValue(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setBytesValue(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "setBytesValue", args);
          return NULL;
        }

        static PyObject *t_Field_setDoubleValue(t_Field *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setDoubleValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDoubleValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setFloatValue(t_Field *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setFloatValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setFloatValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setIntValue(t_Field *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setIntValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setIntValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setLongValue(t_Field *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.setLongValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLongValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setReaderValue(t_Field *self, PyObject *arg)
        {
          ::java::io::Reader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setReaderValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setReaderValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setShortValue(t_Field *self, PyObject *arg)
        {
          jshort a0;

          if (!parseArg(arg, "S", &a0))
          {
            OBJ_CALL(self->object.setShortValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setShortValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setStringValue(t_Field *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.setStringValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStringValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setTokenStream(t_Field *self, PyObject *arg)
        {
          ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setTokenStream(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setTokenStream", arg);
          return NULL;
        }

        static PyObject *t_Field_stringValue(t_Field *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.stringValue());
          return j2p(result);
        }

        static PyObject *t_Field_toString(t_Field *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(Field), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Field_tokenStream(t_Field *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
          ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.tokenStream(a0, a1));
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "tokenStream", args);
          return NULL;
        }

        static PyObject *t_Field_tokenStreamValue(t_Field *self)
        {
          ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);
          OBJ_CALL(result = self->object.tokenStreamValue());
          return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
        }

        static PyObject *t_Field_translateFieldType(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::document::Field$Store a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::document::Field$Index a1((jobject) NULL);
          PyTypeObject **p1;
          ::org::apache::lucene::document::Field$TermVector a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::document::FieldType result((jobject) NULL);

          if (!parseArgs(args, "KKK", ::org::apache::lucene::document::Field$Store::initializeClass, ::org::apache::lucene::document::Field$Index::initializeClass, ::org::apache::lucene::document::Field$TermVector::initializeClass, &a0, &p0, ::org::apache::lucene::document::t_Field$Store::parameters_, &a1, &p1, ::org::apache::lucene::document::t_Field$Index::parameters_, &a2, &p2, ::org::apache::lucene::document::t_Field$TermVector::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::Field::translateFieldType(a0, a1, a2));
            return ::org::apache::lucene::document::t_FieldType::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "translateFieldType", args);
          return NULL;
        }

        static int t_Field_set__byteValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            jbyte value;
            if (!parseArg(arg, "B", &value))
            {
              INT_CALL(self->object.setByteValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "byteValue", arg);
          return -1;
        }

        static int t_Field_set__bytesValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            JArray< jbyte > value((jobject) NULL);
            if (!parseArg(arg, "[B", &value))
            {
              INT_CALL(self->object.setBytesValue(value));
              return 0;
            }
          }
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setBytesValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bytesValue", arg);
          return -1;
        }

        static int t_Field_set__doubleValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setDoubleValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "doubleValue", arg);
          return -1;
        }

        static int t_Field_set__floatValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setFloatValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "floatValue", arg);
          return -1;
        }

        static int t_Field_set__intValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setIntValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "intValue", arg);
          return -1;
        }

        static int t_Field_set__longValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setLongValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "longValue", arg);
          return -1;
        }

        static int t_Field_set__shortValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            jshort value;
            if (!parseArg(arg, "S", &value))
            {
              INT_CALL(self->object.setShortValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "shortValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/FloatField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *FloatField::class$ = NULL;
        jmethodID *FloatField::mids$ = NULL;
        bool FloatField::live$ = false;
        ::org::apache::lucene::document::FieldType *FloatField::TYPE_NOT_STORED = NULL;
        ::org::apache::lucene::document::FieldType *FloatField::TYPE_STORED = NULL;

        jclass FloatField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/FloatField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_866c7d94] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;FLorg/apache/lucene/document/Field$Store;)V");
            mids$[mid_init$_49ba27a3] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;FLorg/apache/lucene/document/FieldType;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_NOT_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_NOT_STORED", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_STORED", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FloatField::FloatField(const ::java::lang::String & a0, jfloat a1, const ::org::apache::lucene::document::Field$Store & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_866c7d94, a0.this$, a1, a2.this$)) {}

        FloatField::FloatField(const ::java::lang::String & a0, jfloat a1, const ::org::apache::lucene::document::FieldType & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_49ba27a3, a0.this$, a1, a2.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_FloatField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FloatField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FloatField_init_(t_FloatField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_FloatField__methods_[] = {
          DECLARE_METHOD(t_FloatField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FloatField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FloatField, t_FloatField, ::org::apache::lucene::document::Field, FloatField, t_FloatField_init_, 0, 0, 0, 0, 0);

        void t_FloatField::install(PyObject *module)
        {
          installType(&PY_TYPE(FloatField), module, "FloatField", 0);
        }

        void t_FloatField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FloatField).tp_dict, "class_", make_descriptor(FloatField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FloatField).tp_dict, "wrapfn_", make_descriptor(t_FloatField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FloatField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FloatField::initializeClass);
          PyDict_SetItemString(PY_TYPE(FloatField).tp_dict, "TYPE_NOT_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*FloatField::TYPE_NOT_STORED)));
          PyDict_SetItemString(PY_TYPE(FloatField).tp_dict, "TYPE_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*FloatField::TYPE_STORED)));
        }

        static PyObject *t_FloatField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FloatField::initializeClass, 1)))
            return NULL;
          return t_FloatField::wrap_Object(FloatField(((t_FloatField *) arg)->object.this$));
        }
        static PyObject *t_FloatField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FloatField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FloatField_init_(t_FloatField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              jfloat a1;
              ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
              PyTypeObject **p2;
              FloatField object((jobject) NULL);

              if (!parseArgs(args, "sFK", ::org::apache::lucene::document::Field$Store::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_))
              {
                INT_CALL(object = FloatField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jfloat a1;
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              FloatField object((jobject) NULL);

              if (!parseArgs(args, "sFk", ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = FloatField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/AutomatonQuery.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *AutomatonQuery::class$ = NULL;
        jmethodID *AutomatonQuery::mids$ = NULL;
        bool AutomatonQuery::live$ = false;

        jclass AutomatonQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/AutomatonQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_1b49cba7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;Lorg/apache/lucene/util/automaton/Automaton;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getAutomaton_9b0d5999] = env->getMethodID(cls, "getAutomaton", "()Lorg/apache/lucene/util/automaton/Automaton;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getTermsEnum_67b5a29a] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AutomatonQuery::AutomatonQuery(const ::org::apache::lucene::index::Term & a0, const ::org::apache::lucene::util::automaton::Automaton & a1) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_1b49cba7, a0.this$, a1.this$)) {}

        jboolean AutomatonQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::util::automaton::Automaton AutomatonQuery::getAutomaton() const
        {
          return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_getAutomaton_9b0d5999]));
        }

        jint AutomatonQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String AutomatonQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_AutomatonQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AutomatonQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_AutomatonQuery_init_(t_AutomatonQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_AutomatonQuery_equals(t_AutomatonQuery *self, PyObject *args);
        static PyObject *t_AutomatonQuery_getAutomaton(t_AutomatonQuery *self);
        static PyObject *t_AutomatonQuery_hashCode(t_AutomatonQuery *self, PyObject *args);
        static PyObject *t_AutomatonQuery_toString(t_AutomatonQuery *self, PyObject *args);
        static PyObject *t_AutomatonQuery_get__automaton(t_AutomatonQuery *self, void *data);
        static PyGetSetDef t_AutomatonQuery__fields_[] = {
          DECLARE_GET_FIELD(t_AutomatonQuery, automaton),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_AutomatonQuery__methods_[] = {
          DECLARE_METHOD(t_AutomatonQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AutomatonQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AutomatonQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_AutomatonQuery, getAutomaton, METH_NOARGS),
          DECLARE_METHOD(t_AutomatonQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_AutomatonQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AutomatonQuery, t_AutomatonQuery, ::org::apache::lucene::search::MultiTermQuery, AutomatonQuery, t_AutomatonQuery_init_, 0, 0, t_AutomatonQuery__fields_, 0, 0);

        void t_AutomatonQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(AutomatonQuery), module, "AutomatonQuery", 0);
        }

        void t_AutomatonQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AutomatonQuery).tp_dict, "class_", make_descriptor(AutomatonQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AutomatonQuery).tp_dict, "wrapfn_", make_descriptor(t_AutomatonQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AutomatonQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AutomatonQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AutomatonQuery::initializeClass, 1)))
            return NULL;
          return t_AutomatonQuery::wrap_Object(AutomatonQuery(((t_AutomatonQuery *) arg)->object.this$));
        }
        static PyObject *t_AutomatonQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AutomatonQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_AutomatonQuery_init_(t_AutomatonQuery *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
          AutomatonQuery object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
          {
            INT_CALL(object = AutomatonQuery(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_AutomatonQuery_equals(t_AutomatonQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(AutomatonQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_AutomatonQuery_getAutomaton(t_AutomatonQuery *self)
        {
          ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
          OBJ_CALL(result = self->object.getAutomaton());
          return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
        }

        static PyObject *t_AutomatonQuery_hashCode(t_AutomatonQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(AutomatonQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_AutomatonQuery_toString(t_AutomatonQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(AutomatonQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_AutomatonQuery_get__automaton(t_AutomatonQuery *self, void *data)
        {
          ::org::apache::lucene::util::automaton::Automaton value((jobject) NULL);
          OBJ_CALL(value = self->object.getAutomaton());
          return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tr/TurkishLowerCaseFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {

          ::java::lang::Class *TurkishLowerCaseFilterFactory::class$ = NULL;
          jmethodID *TurkishLowerCaseFilterFactory::mids$ = NULL;
          bool TurkishLowerCaseFilterFactory::live$ = false;

          jclass TurkishLowerCaseFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tr/TurkishLowerCaseFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TurkishLowerCaseFilterFactory::TurkishLowerCaseFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream TurkishLowerCaseFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory TurkishLowerCaseFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {
          static PyObject *t_TurkishLowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TurkishLowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TurkishLowerCaseFilterFactory_init_(t_TurkishLowerCaseFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TurkishLowerCaseFilterFactory_create(t_TurkishLowerCaseFilterFactory *self, PyObject *args);
          static PyObject *t_TurkishLowerCaseFilterFactory_getMultiTermComponent(t_TurkishLowerCaseFilterFactory *self);
          static PyObject *t_TurkishLowerCaseFilterFactory_get__multiTermComponent(t_TurkishLowerCaseFilterFactory *self, void *data);
          static PyGetSetDef t_TurkishLowerCaseFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_TurkishLowerCaseFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TurkishLowerCaseFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TurkishLowerCaseFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TurkishLowerCaseFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TurkishLowerCaseFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_TurkishLowerCaseFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TurkishLowerCaseFilterFactory, t_TurkishLowerCaseFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, TurkishLowerCaseFilterFactory, t_TurkishLowerCaseFilterFactory_init_, 0, 0, t_TurkishLowerCaseFilterFactory__fields_, 0, 0);

          void t_TurkishLowerCaseFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TurkishLowerCaseFilterFactory), module, "TurkishLowerCaseFilterFactory", 0);
          }

          void t_TurkishLowerCaseFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TurkishLowerCaseFilterFactory).tp_dict, "class_", make_descriptor(TurkishLowerCaseFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TurkishLowerCaseFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_TurkishLowerCaseFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TurkishLowerCaseFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TurkishLowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TurkishLowerCaseFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TurkishLowerCaseFilterFactory::wrap_Object(TurkishLowerCaseFilterFactory(((t_TurkishLowerCaseFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TurkishLowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TurkishLowerCaseFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TurkishLowerCaseFilterFactory_init_(t_TurkishLowerCaseFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            TurkishLowerCaseFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = TurkishLowerCaseFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TurkishLowerCaseFilterFactory_create(t_TurkishLowerCaseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TurkishLowerCaseFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_TurkishLowerCaseFilterFactory_getMultiTermComponent(t_TurkishLowerCaseFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_TurkishLowerCaseFilterFactory_get__multiTermComponent(t_TurkishLowerCaseFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/RangeMapFloatFunction.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Float.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *RangeMapFloatFunction::class$ = NULL;
            jmethodID *RangeMapFloatFunction::mids$ = NULL;
            bool RangeMapFloatFunction::live$ = false;

            jclass RangeMapFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/RangeMapFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_6ddf6b07] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;FFFLjava/lang/Float;)V");
                mids$[mid_init$_e1b244a8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;FFLorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            RangeMapFloatFunction::RangeMapFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, jfloat a1, jfloat a2, jfloat a3, const ::java::lang::Float & a4) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_6ddf6b07, a0.this$, a1, a2, a3, a4.this$)) {}

            RangeMapFloatFunction::RangeMapFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, jfloat a1, jfloat a2, const ::org::apache::lucene::queries::function::ValueSource & a3, const ::org::apache::lucene::queries::function::ValueSource & a4) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_e1b244a8, a0.this$, a1, a2, a3.this$, a4.this$)) {}

            void RangeMapFloatFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String RangeMapFloatFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean RangeMapFloatFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues RangeMapFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint RangeMapFloatFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_RangeMapFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RangeMapFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_RangeMapFloatFunction_init_(t_RangeMapFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_RangeMapFloatFunction_createWeight(t_RangeMapFloatFunction *self, PyObject *args);
            static PyObject *t_RangeMapFloatFunction_description(t_RangeMapFloatFunction *self, PyObject *args);
            static PyObject *t_RangeMapFloatFunction_equals(t_RangeMapFloatFunction *self, PyObject *args);
            static PyObject *t_RangeMapFloatFunction_getValues(t_RangeMapFloatFunction *self, PyObject *args);
            static PyObject *t_RangeMapFloatFunction_hashCode(t_RangeMapFloatFunction *self, PyObject *args);

            static PyMethodDef t_RangeMapFloatFunction__methods_[] = {
              DECLARE_METHOD(t_RangeMapFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RangeMapFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RangeMapFloatFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_RangeMapFloatFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_RangeMapFloatFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_RangeMapFloatFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_RangeMapFloatFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(RangeMapFloatFunction, t_RangeMapFloatFunction, ::org::apache::lucene::queries::function::ValueSource, RangeMapFloatFunction, t_RangeMapFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_RangeMapFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(RangeMapFloatFunction), module, "RangeMapFloatFunction", 0);
            }

            void t_RangeMapFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(RangeMapFloatFunction).tp_dict, "class_", make_descriptor(RangeMapFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(RangeMapFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_RangeMapFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(RangeMapFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_RangeMapFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, RangeMapFloatFunction::initializeClass, 1)))
                return NULL;
              return t_RangeMapFloatFunction::wrap_Object(RangeMapFloatFunction(((t_RangeMapFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_RangeMapFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, RangeMapFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_RangeMapFloatFunction_init_(t_RangeMapFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 5:
                {
                  ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
                  jfloat a1;
                  jfloat a2;
                  jfloat a3;
                  ::java::lang::Float a4((jobject) NULL);
                  RangeMapFloatFunction object((jobject) NULL);

                  if (!parseArgs(args, "kFFFO", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3, &a4))
                  {
                    INT_CALL(object = RangeMapFloatFunction(a0, a1, a2, a3, a4));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
                  jfloat a1;
                  jfloat a2;
                  ::org::apache::lucene::queries::function::ValueSource a3((jobject) NULL);
                  ::org::apache::lucene::queries::function::ValueSource a4((jobject) NULL);
                  RangeMapFloatFunction object((jobject) NULL);

                  if (!parseArgs(args, "kFFkk", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2, &a3, &a4))
                  {
                    INT_CALL(object = RangeMapFloatFunction(a0, a1, a2, a3, a4));
                    self->object = object;
                    break;
                  }
                }
               default:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_RangeMapFloatFunction_createWeight(t_RangeMapFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(RangeMapFloatFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_RangeMapFloatFunction_description(t_RangeMapFloatFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(RangeMapFloatFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_RangeMapFloatFunction_equals(t_RangeMapFloatFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(RangeMapFloatFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_RangeMapFloatFunction_getValues(t_RangeMapFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(RangeMapFloatFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_RangeMapFloatFunction_hashCode(t_RangeMapFloatFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(RangeMapFloatFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/builders/QueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace builders {

              ::java::lang::Class *QueryBuilder::class$ = NULL;
              jmethodID *QueryBuilder::mids$ = NULL;
              bool QueryBuilder::live$ = false;

              jclass QueryBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/builders/QueryBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_build_30efaf9c] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Ljava/lang/Object;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::Object QueryBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_build_30efaf9c], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace builders {
              static PyObject *t_QueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryBuilder_build(t_QueryBuilder *self, PyObject *arg);

              static PyMethodDef t_QueryBuilder__methods_[] = {
                DECLARE_METHOD(t_QueryBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryBuilder, t_QueryBuilder, ::java::lang::Object, QueryBuilder, abstract_init, 0, 0, 0, 0, 0);

              void t_QueryBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryBuilder), module, "QueryBuilder", 0);
              }

              void t_QueryBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "class_", make_descriptor(QueryBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_QueryBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryBuilder::initializeClass, 1)))
                  return NULL;
                return t_QueryBuilder::wrap_Object(QueryBuilder(((t_QueryBuilder *) arg)->object.this$));
              }
              static PyObject *t_QueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_QueryBuilder_build(t_QueryBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::java::lang::t_Object::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/IntsRefFSTEnum.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *IntsRefFSTEnum::class$ = NULL;
          jmethodID *IntsRefFSTEnum::mids$ = NULL;
          bool IntsRefFSTEnum::live$ = false;

          jclass IntsRefFSTEnum::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/IntsRefFSTEnum");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d454d65c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;)V");
              mids$[mid_current_4ce4ab35] = env->getMethodID(cls, "current", "()Lorg/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput;");
              mids$[mid_next_4ce4ab35] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput;");
              mids$[mid_seekCeil_8b422fd3] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput;");
              mids$[mid_seekExact_8b422fd3] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput;");
              mids$[mid_seekFloor_8b422fd3] = env->getMethodID(cls, "seekFloor", "(Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput;");
              mids$[mid_grow_54c6a166] = env->getMethodID(cls, "grow", "()V");
              mids$[mid_getTargetLabel_54c6a179] = env->getMethodID(cls, "getTargetLabel", "()I");
              mids$[mid_getCurrentLabel_54c6a179] = env->getMethodID(cls, "getCurrentLabel", "()I");
              mids$[mid_setCurrentLabel_39c7bd3c] = env->getMethodID(cls, "setCurrentLabel", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IntsRefFSTEnum::IntsRefFSTEnum(const ::org::apache::lucene::util::fst::FST & a0) : ::org::apache::lucene::util::fst::FSTEnum(env->newObject(initializeClass, &mids$, mid_init$_d454d65c, a0.this$)) {}

          ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput IntsRefFSTEnum::current() const
          {
            return ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_current_4ce4ab35]));
          }

          ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput IntsRefFSTEnum::next() const
          {
            return ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_next_4ce4ab35]));
          }

          ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput IntsRefFSTEnum::seekCeil(const ::org::apache::lucene::util::IntsRef & a0) const
          {
            return ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_seekCeil_8b422fd3], a0.this$));
          }

          ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput IntsRefFSTEnum::seekExact(const ::org::apache::lucene::util::IntsRef & a0) const
          {
            return ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_seekExact_8b422fd3], a0.this$));
          }

          ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput IntsRefFSTEnum::seekFloor(const ::org::apache::lucene::util::IntsRef & a0) const
          {
            return ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_seekFloor_8b422fd3], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_IntsRefFSTEnum_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum_of_(t_IntsRefFSTEnum *self, PyObject *args);
          static int t_IntsRefFSTEnum_init_(t_IntsRefFSTEnum *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IntsRefFSTEnum_current(t_IntsRefFSTEnum *self);
          static PyObject *t_IntsRefFSTEnum_next(t_IntsRefFSTEnum *self);
          static PyObject *t_IntsRefFSTEnum_seekCeil(t_IntsRefFSTEnum *self, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum_seekExact(t_IntsRefFSTEnum *self, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum_seekFloor(t_IntsRefFSTEnum *self, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum_get__parameters_(t_IntsRefFSTEnum *self, void *data);
          static PyGetSetDef t_IntsRefFSTEnum__fields_[] = {
            DECLARE_GET_FIELD(t_IntsRefFSTEnum, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IntsRefFSTEnum__methods_[] = {
            DECLARE_METHOD(t_IntsRefFSTEnum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntsRefFSTEnum, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntsRefFSTEnum, of_, METH_VARARGS),
            DECLARE_METHOD(t_IntsRefFSTEnum, current, METH_NOARGS),
            DECLARE_METHOD(t_IntsRefFSTEnum, next, METH_NOARGS),
            DECLARE_METHOD(t_IntsRefFSTEnum, seekCeil, METH_O),
            DECLARE_METHOD(t_IntsRefFSTEnum, seekExact, METH_O),
            DECLARE_METHOD(t_IntsRefFSTEnum, seekFloor, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IntsRefFSTEnum, t_IntsRefFSTEnum, ::org::apache::lucene::util::fst::FSTEnum, IntsRefFSTEnum, t_IntsRefFSTEnum_init_, PyObject_SelfIter, ((PyObject *(*)(t_IntsRefFSTEnum *)) get_generic_next< t_IntsRefFSTEnum,::org::apache::lucene::util::fst::t_IntsRefFSTEnum$InputOutput,::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput >), t_IntsRefFSTEnum__fields_, 0, 0);
          PyObject *t_IntsRefFSTEnum::wrap_Object(const IntsRefFSTEnum& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntsRefFSTEnum::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntsRefFSTEnum *self = (t_IntsRefFSTEnum *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_IntsRefFSTEnum::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntsRefFSTEnum::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntsRefFSTEnum *self = (t_IntsRefFSTEnum *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_IntsRefFSTEnum::install(PyObject *module)
          {
            installType(&PY_TYPE(IntsRefFSTEnum), module, "IntsRefFSTEnum", 0);
            PyDict_SetItemString(PY_TYPE(IntsRefFSTEnum).tp_dict, "InputOutput", make_descriptor(&PY_TYPE(IntsRefFSTEnum$InputOutput)));
          }

          void t_IntsRefFSTEnum::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IntsRefFSTEnum).tp_dict, "class_", make_descriptor(IntsRefFSTEnum::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IntsRefFSTEnum).tp_dict, "wrapfn_", make_descriptor(t_IntsRefFSTEnum::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IntsRefFSTEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntsRefFSTEnum_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntsRefFSTEnum::initializeClass, 1)))
              return NULL;
            return t_IntsRefFSTEnum::wrap_Object(IntsRefFSTEnum(((t_IntsRefFSTEnum *) arg)->object.this$));
          }
          static PyObject *t_IntsRefFSTEnum_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntsRefFSTEnum::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IntsRefFSTEnum_of_(t_IntsRefFSTEnum *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_IntsRefFSTEnum_init_(t_IntsRefFSTEnum *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            IntsRefFSTEnum object((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_))
            {
              INT_CALL(object = IntsRefFSTEnum(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IntsRefFSTEnum_current(t_IntsRefFSTEnum *self)
          {
            ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput result((jobject) NULL);
            OBJ_CALL(result = self->object.current());
            return ::org::apache::lucene::util::fst::t_IntsRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_IntsRefFSTEnum_next(t_IntsRefFSTEnum *self)
          {
            ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::fst::t_IntsRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_IntsRefFSTEnum_seekCeil(t_IntsRefFSTEnum *self, PyObject *arg)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::IntsRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekCeil(a0));
              return ::org::apache::lucene::util::fst::t_IntsRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "seekCeil", arg);
            return NULL;
          }

          static PyObject *t_IntsRefFSTEnum_seekExact(t_IntsRefFSTEnum *self, PyObject *arg)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::IntsRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekExact(a0));
              return ::org::apache::lucene::util::fst::t_IntsRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "seekExact", arg);
            return NULL;
          }

          static PyObject *t_IntsRefFSTEnum_seekFloor(t_IntsRefFSTEnum *self, PyObject *arg)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::IntsRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekFloor(a0));
              return ::org::apache::lucene::util::fst::t_IntsRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "seekFloor", arg);
            return NULL;
          }
          static PyObject *t_IntsRefFSTEnum_get__parameters_(t_IntsRefFSTEnum *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/FixedBitSetCachingWrapperFilter.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *FixedBitSetCachingWrapperFilter::class$ = NULL;
          jmethodID *FixedBitSetCachingWrapperFilter::mids$ = NULL;
          bool FixedBitSetCachingWrapperFilter::live$ = false;

          jclass FixedBitSetCachingWrapperFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/FixedBitSetCachingWrapperFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9bb37152] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Filter;)V");
              mids$[mid_docIdSetToCache_5fee2a54] = env->getMethodID(cls, "docIdSetToCache", "(Lorg/apache/lucene/search/DocIdSet;Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/search/DocIdSet;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FixedBitSetCachingWrapperFilter::FixedBitSetCachingWrapperFilter(const ::org::apache::lucene::search::Filter & a0) : ::org::apache::lucene::search::CachingWrapperFilter(env->newObject(initializeClass, &mids$, mid_init$_9bb37152, a0.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_FixedBitSetCachingWrapperFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FixedBitSetCachingWrapperFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FixedBitSetCachingWrapperFilter_init_(t_FixedBitSetCachingWrapperFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_FixedBitSetCachingWrapperFilter__methods_[] = {
            DECLARE_METHOD(t_FixedBitSetCachingWrapperFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FixedBitSetCachingWrapperFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FixedBitSetCachingWrapperFilter, t_FixedBitSetCachingWrapperFilter, ::org::apache::lucene::search::CachingWrapperFilter, FixedBitSetCachingWrapperFilter, t_FixedBitSetCachingWrapperFilter_init_, 0, 0, 0, 0, 0);

          void t_FixedBitSetCachingWrapperFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(FixedBitSetCachingWrapperFilter), module, "FixedBitSetCachingWrapperFilter", 0);
          }

          void t_FixedBitSetCachingWrapperFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FixedBitSetCachingWrapperFilter).tp_dict, "class_", make_descriptor(FixedBitSetCachingWrapperFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FixedBitSetCachingWrapperFilter).tp_dict, "wrapfn_", make_descriptor(t_FixedBitSetCachingWrapperFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FixedBitSetCachingWrapperFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FixedBitSetCachingWrapperFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FixedBitSetCachingWrapperFilter::initializeClass, 1)))
              return NULL;
            return t_FixedBitSetCachingWrapperFilter::wrap_Object(FixedBitSetCachingWrapperFilter(((t_FixedBitSetCachingWrapperFilter *) arg)->object.this$));
          }
          static PyObject *t_FixedBitSetCachingWrapperFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FixedBitSetCachingWrapperFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FixedBitSetCachingWrapperFilter_init_(t_FixedBitSetCachingWrapperFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Filter a0((jobject) NULL);
            FixedBitSetCachingWrapperFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Filter::initializeClass, &a0))
            {
              INT_CALL(object = FixedBitSetCachingWrapperFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$bitwise_and_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$bitwise_and_return::class$ = NULL;
          jmethodID *JavascriptParser$bitwise_and_return::mids$ = NULL;
          bool JavascriptParser$bitwise_and_return::live$ = false;

          jclass JavascriptParser$bitwise_and_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$bitwise_and_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$bitwise_and_return::JavascriptParser$bitwise_and_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$bitwise_and_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$bitwise_and_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$bitwise_and_return_init_(t_JavascriptParser$bitwise_and_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$bitwise_and_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$bitwise_and_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$bitwise_and_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$bitwise_and_return, t_JavascriptParser$bitwise_and_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$bitwise_and_return, t_JavascriptParser$bitwise_and_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$bitwise_and_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$bitwise_and_return), module, "JavascriptParser$bitwise_and_return", 0);
          }

          void t_JavascriptParser$bitwise_and_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_and_return).tp_dict, "class_", make_descriptor(JavascriptParser$bitwise_and_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_and_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$bitwise_and_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_and_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$bitwise_and_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$bitwise_and_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$bitwise_and_return::wrap_Object(JavascriptParser$bitwise_and_return(((t_JavascriptParser$bitwise_and_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$bitwise_and_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$bitwise_and_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$bitwise_and_return_init_(t_JavascriptParser$bitwise_and_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$bitwise_and_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$bitwise_and_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader$ChildrenIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyReader$ChildrenIterator::class$ = NULL;
          jmethodID *TaxonomyReader$ChildrenIterator::mids$ = NULL;
          bool TaxonomyReader$ChildrenIterator::live$ = false;

          jclass TaxonomyReader$ChildrenIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyReader$ChildrenIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_next_54c6a179] = env->getMethodID(cls, "next", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint TaxonomyReader$ChildrenIterator::next() const
          {
            return env->callIntMethod(this$, mids$[mid_next_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyReader$ChildrenIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyReader$ChildrenIterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyReader$ChildrenIterator_next(t_TaxonomyReader$ChildrenIterator *self);

          static PyMethodDef t_TaxonomyReader$ChildrenIterator__methods_[] = {
            DECLARE_METHOD(t_TaxonomyReader$ChildrenIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyReader$ChildrenIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyReader$ChildrenIterator, next, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyReader$ChildrenIterator, t_TaxonomyReader$ChildrenIterator, ::java::lang::Object, TaxonomyReader$ChildrenIterator, abstract_init, 0, 0, 0, 0, 0);

          void t_TaxonomyReader$ChildrenIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyReader$ChildrenIterator), module, "TaxonomyReader$ChildrenIterator", 0);
          }

          void t_TaxonomyReader$ChildrenIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyReader$ChildrenIterator).tp_dict, "class_", make_descriptor(TaxonomyReader$ChildrenIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyReader$ChildrenIterator).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyReader$ChildrenIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyReader$ChildrenIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyReader$ChildrenIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyReader$ChildrenIterator::initializeClass, 1)))
              return NULL;
            return t_TaxonomyReader$ChildrenIterator::wrap_Object(TaxonomyReader$ChildrenIterator(((t_TaxonomyReader$ChildrenIterator *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyReader$ChildrenIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyReader$ChildrenIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TaxonomyReader$ChildrenIterator_next(t_TaxonomyReader$ChildrenIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.next());
            return PyInt_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/precedence/processors/BooleanModifiersQueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace precedence {
            namespace processors {

              ::java::lang::Class *BooleanModifiersQueryNodeProcessor::class$ = NULL;
              jmethodID *BooleanModifiersQueryNodeProcessor::mids$ = NULL;
              bool BooleanModifiersQueryNodeProcessor::live$ = false;

              jclass BooleanModifiersQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/precedence/processors/BooleanModifiersQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BooleanModifiersQueryNodeProcessor::BooleanModifiersQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode BooleanModifiersQueryNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace precedence {
            namespace processors {
              static PyObject *t_BooleanModifiersQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BooleanModifiersQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BooleanModifiersQueryNodeProcessor_init_(t_BooleanModifiersQueryNodeProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_BooleanModifiersQueryNodeProcessor_process(t_BooleanModifiersQueryNodeProcessor *self, PyObject *args);

              static PyMethodDef t_BooleanModifiersQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_BooleanModifiersQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanModifiersQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanModifiersQueryNodeProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BooleanModifiersQueryNodeProcessor, t_BooleanModifiersQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, BooleanModifiersQueryNodeProcessor, t_BooleanModifiersQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_BooleanModifiersQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(BooleanModifiersQueryNodeProcessor), module, "BooleanModifiersQueryNodeProcessor", 0);
              }

              void t_BooleanModifiersQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BooleanModifiersQueryNodeProcessor).tp_dict, "class_", make_descriptor(BooleanModifiersQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BooleanModifiersQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_BooleanModifiersQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BooleanModifiersQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BooleanModifiersQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BooleanModifiersQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_BooleanModifiersQueryNodeProcessor::wrap_Object(BooleanModifiersQueryNodeProcessor(((t_BooleanModifiersQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_BooleanModifiersQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BooleanModifiersQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BooleanModifiersQueryNodeProcessor_init_(t_BooleanModifiersQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                BooleanModifiersQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = BooleanModifiersQueryNodeProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_BooleanModifiersQueryNodeProcessor_process(t_BooleanModifiersQueryNodeProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(BooleanModifiersQueryNodeProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$Bytes.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$Bytes::class$ = NULL;
        jmethodID *FieldCache$Bytes::mids$ = NULL;
        bool FieldCache$Bytes::live$ = false;
        FieldCache$Bytes *FieldCache$Bytes::EMPTY = NULL;

        jclass FieldCache$Bytes::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$Bytes");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_get_39c7bd28] = env->getMethodID(cls, "get", "(I)B");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new FieldCache$Bytes(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/FieldCache$Bytes;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCache$Bytes::FieldCache$Bytes() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jbyte FieldCache$Bytes::get(jint a0) const
        {
          return env->callByteMethod(this$, mids$[mid_get_39c7bd28], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$Bytes_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$Bytes_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCache$Bytes_init_(t_FieldCache$Bytes *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCache$Bytes_get(t_FieldCache$Bytes *self, PyObject *arg);

        static PyMethodDef t_FieldCache$Bytes__methods_[] = {
          DECLARE_METHOD(t_FieldCache$Bytes, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Bytes, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Bytes, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$Bytes, t_FieldCache$Bytes, ::java::lang::Object, FieldCache$Bytes, t_FieldCache$Bytes_init_, 0, 0, 0, 0, 0);

        void t_FieldCache$Bytes::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$Bytes), module, "FieldCache$Bytes", 0);
        }

        void t_FieldCache$Bytes::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$Bytes).tp_dict, "class_", make_descriptor(FieldCache$Bytes::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$Bytes).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$Bytes::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$Bytes).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldCache$Bytes::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldCache$Bytes).tp_dict, "EMPTY", make_descriptor(t_FieldCache$Bytes::wrap_Object(*FieldCache$Bytes::EMPTY)));
        }

        static PyObject *t_FieldCache$Bytes_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$Bytes::initializeClass, 1)))
            return NULL;
          return t_FieldCache$Bytes::wrap_Object(FieldCache$Bytes(((t_FieldCache$Bytes *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$Bytes_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$Bytes::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCache$Bytes_init_(t_FieldCache$Bytes *self, PyObject *args, PyObject *kwds)
        {
          FieldCache$Bytes object((jobject) NULL);

          INT_CALL(object = FieldCache$Bytes());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCache$Bytes_get(t_FieldCache$Bytes *self, PyObject *arg)
        {
          jint a0;
          jbyte result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/InputStream.h"
#include "java/io/IOException.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *InputStream::class$ = NULL;
    jmethodID *InputStream::mids$ = NULL;
    bool InputStream::live$ = false;

    jclass InputStream::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/InputStream");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_available_54c6a179] = env->getMethodID(cls, "available", "()I");
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_mark_39c7bd3c] = env->getMethodID(cls, "mark", "(I)V");
        mids$[mid_markSupported_54c6a16a] = env->getMethodID(cls, "markSupported", "()Z");
        mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
        mids$[mid_read_49b4f134] = env->getMethodID(cls, "read", "([B)I");
        mids$[mid_read_86f44340] = env->getMethodID(cls, "read", "([BII)I");
        mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
        mids$[mid_skip_0ee6df33] = env->getMethodID(cls, "skip", "(J)J");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    InputStream::InputStream() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    jint InputStream::available() const
    {
      return env->callIntMethod(this$, mids$[mid_available_54c6a179]);
    }

    void InputStream::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    void InputStream::mark(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_mark_39c7bd3c], a0);
    }

    jboolean InputStream::markSupported() const
    {
      return env->callBooleanMethod(this$, mids$[mid_markSupported_54c6a16a]);
    }

    jint InputStream::read() const
    {
      return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
    }

    jint InputStream::read(const JArray< jbyte > & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_read_49b4f134], a0.this$);
    }

    jint InputStream::read(const JArray< jbyte > & a0, jint a1, jint a2) const
    {
      return env->callIntMethod(this$, mids$[mid_read_86f44340], a0.this$, a1, a2);
    }

    void InputStream::reset() const
    {
      env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
    }

    jlong InputStream::skip(jlong a0) const
    {
      return env->callLongMethod(this$, mids$[mid_skip_0ee6df33], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_InputStream_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_InputStream_instance_(PyTypeObject *type, PyObject *arg);
    static int t_InputStream_init_(t_InputStream *self, PyObject *args, PyObject *kwds);
    static PyObject *t_InputStream_available(t_InputStream *self);
    static PyObject *t_InputStream_close(t_InputStream *self);
    static PyObject *t_InputStream_mark(t_InputStream *self, PyObject *arg);
    static PyObject *t_InputStream_markSupported(t_InputStream *self);
    static PyObject *t_InputStream_read(t_InputStream *self, PyObject *args);
    static PyObject *t_InputStream_reset(t_InputStream *self);
    static PyObject *t_InputStream_skip(t_InputStream *self, PyObject *arg);

    static PyMethodDef t_InputStream__methods_[] = {
      DECLARE_METHOD(t_InputStream, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_InputStream, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_InputStream, available, METH_NOARGS),
      DECLARE_METHOD(t_InputStream, close, METH_NOARGS),
      DECLARE_METHOD(t_InputStream, mark, METH_O),
      DECLARE_METHOD(t_InputStream, markSupported, METH_NOARGS),
      DECLARE_METHOD(t_InputStream, read, METH_VARARGS),
      DECLARE_METHOD(t_InputStream, reset, METH_NOARGS),
      DECLARE_METHOD(t_InputStream, skip, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(InputStream, t_InputStream, ::java::lang::Object, InputStream, t_InputStream_init_, 0, 0, 0, 0, 0);

    void t_InputStream::install(PyObject *module)
    {
      installType(&PY_TYPE(InputStream), module, "InputStream", 0);
    }

    void t_InputStream::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(InputStream).tp_dict, "class_", make_descriptor(InputStream::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(InputStream).tp_dict, "wrapfn_", make_descriptor(t_InputStream::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(InputStream).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_InputStream_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, InputStream::initializeClass, 1)))
        return NULL;
      return t_InputStream::wrap_Object(InputStream(((t_InputStream *) arg)->object.this$));
    }
    static PyObject *t_InputStream_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, InputStream::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_InputStream_init_(t_InputStream *self, PyObject *args, PyObject *kwds)
    {
      InputStream object((jobject) NULL);

      INT_CALL(object = InputStream());
      self->object = object;

      return 0;
    }

    static PyObject *t_InputStream_available(t_InputStream *self)
    {
      jint result;
      OBJ_CALL(result = self->object.available());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_InputStream_close(t_InputStream *self)
    {
      OBJ_CALL(self->object.close());
      Py_RETURN_NONE;
    }

    static PyObject *t_InputStream_mark(t_InputStream *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.mark(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "mark", arg);
      return NULL;
    }

    static PyObject *t_InputStream_markSupported(t_InputStream *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.markSupported());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_InputStream_read(t_InputStream *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          jint result;
          OBJ_CALL(result = self->object.read());
          return PyInt_FromLong((long) result);
        }
        break;
       case 1:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(result = self->object.read(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "read", args);
      return NULL;
    }

    static PyObject *t_InputStream_reset(t_InputStream *self)
    {
      OBJ_CALL(self->object.reset());
      Py_RETURN_NONE;
    }

    static PyObject *t_InputStream_skip(t_InputStream *self, PyObject *arg)
    {
      jlong a0;
      jlong result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = self->object.skip(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError((PyObject *) self, "skip", arg);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonLongParser.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/search/FieldCache$LongParser.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonLongParser::class$ = NULL;
        jmethodID *PythonLongParser::mids$ = NULL;
        bool PythonLongParser::live$ = false;

        jclass PythonLongParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonLongParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_parseLong_7bc03dd8] = env->getMethodID(cls, "parseLong", "(Lorg/apache/lucene/util/BytesRef;)J");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_termsEnum_fb3ac14e] = env->getMethodID(cls, "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonLongParser::PythonLongParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonLongParser::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonLongParser::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonLongParser::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonLongParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonLongParser_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonLongParser_init_(t_PythonLongParser *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonLongParser_finalize(t_PythonLongParser *self);
        static PyObject *t_PythonLongParser_pythonExtension(t_PythonLongParser *self, PyObject *args);
        static jlong JNICALL t_PythonLongParser_parseLong0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonLongParser_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonLongParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonLongParser_get__self(t_PythonLongParser *self, void *data);
        static PyGetSetDef t_PythonLongParser__fields_[] = {
          DECLARE_GET_FIELD(t_PythonLongParser, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonLongParser__methods_[] = {
          DECLARE_METHOD(t_PythonLongParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonLongParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonLongParser, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonLongParser, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonLongParser, t_PythonLongParser, ::java::lang::Object, PythonLongParser, t_PythonLongParser_init_, 0, 0, t_PythonLongParser__fields_, 0, 0);

        void t_PythonLongParser::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonLongParser), module, "PythonLongParser", 1);
        }

        void t_PythonLongParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonLongParser).tp_dict, "class_", make_descriptor(PythonLongParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonLongParser).tp_dict, "wrapfn_", make_descriptor(t_PythonLongParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonLongParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonLongParser::initializeClass);
          JNINativeMethod methods[] = {
            { "parseLong", "(Lorg/apache/lucene/util/BytesRef;)J", (void *) t_PythonLongParser_parseLong0 },
            { "pythonDecRef", "()V", (void *) t_PythonLongParser_pythonDecRef1 },
            { "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;", (void *) t_PythonLongParser_termsEnum2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonLongParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonLongParser::initializeClass, 1)))
            return NULL;
          return t_PythonLongParser::wrap_Object(PythonLongParser(((t_PythonLongParser *) arg)->object.this$));
        }
        static PyObject *t_PythonLongParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonLongParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonLongParser_init_(t_PythonLongParser *self, PyObject *args, PyObject *kwds)
        {
          PythonLongParser object((jobject) NULL);

          INT_CALL(object = PythonLongParser());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonLongParser_finalize(t_PythonLongParser *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonLongParser_pythonExtension(t_PythonLongParser *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jlong JNICALL t_PythonLongParser_parseLong0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLongParser::mids$[PythonLongParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jlong value;
          PyObject *o0 = ::org::apache::lucene::util::t_BytesRef::wrap_Object(::org::apache::lucene::util::BytesRef(a0));
          PyObject *result = PyObject_CallMethod(obj, "parseLong", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "J", &value))
          {
            throwTypeError("parseLong", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jlong) 0;
        }

        static void JNICALL t_PythonLongParser_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLongParser::mids$[PythonLongParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonLongParser::mids$[PythonLongParser::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jobject JNICALL t_PythonLongParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLongParser::mids$[PythonLongParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::index::TermsEnum value((jobject) NULL);
          PyObject *o0 = ::org::apache::lucene::index::t_Terms::wrap_Object(::org::apache::lucene::index::Terms(a0));
          PyObject *result = PyObject_CallMethod(obj, "termsEnum", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &value))
          {
            throwTypeError("termsEnum", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonLongParser_get__self(t_PythonLongParser *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCacheDocIdSet.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCacheDocIdSet::class$ = NULL;
        jmethodID *FieldCacheDocIdSet::mids$ = NULL;
        bool FieldCacheDocIdSet::live$ = false;

        jclass FieldCacheDocIdSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCacheDocIdSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c0d572fa] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/util/Bits;)V");
            mids$[mid_bits_03c2457d] = env->getMethodID(cls, "bits", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_iterator_dc23660c] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_matchDoc_39c7bd30] = env->getMethodID(cls, "matchDoc", "(I)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCacheDocIdSet::FieldCacheDocIdSet(jint a0, const ::org::apache::lucene::util::Bits & a1) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_c0d572fa, a0, a1.this$)) {}

        ::org::apache::lucene::util::Bits FieldCacheDocIdSet::bits() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_bits_03c2457d]));
        }

        ::org::apache::lucene::search::DocIdSetIterator FieldCacheDocIdSet::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_dc23660c]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCacheDocIdSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheDocIdSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCacheDocIdSet_init_(t_FieldCacheDocIdSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCacheDocIdSet_bits(t_FieldCacheDocIdSet *self, PyObject *args);
        static PyObject *t_FieldCacheDocIdSet_iterator(t_FieldCacheDocIdSet *self, PyObject *args);

        static PyMethodDef t_FieldCacheDocIdSet__methods_[] = {
          DECLARE_METHOD(t_FieldCacheDocIdSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheDocIdSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheDocIdSet, bits, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheDocIdSet, iterator, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCacheDocIdSet, t_FieldCacheDocIdSet, ::org::apache::lucene::search::DocIdSet, FieldCacheDocIdSet, t_FieldCacheDocIdSet_init_, 0, 0, 0, 0, 0);

        void t_FieldCacheDocIdSet::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCacheDocIdSet), module, "FieldCacheDocIdSet", 0);
        }

        void t_FieldCacheDocIdSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCacheDocIdSet).tp_dict, "class_", make_descriptor(FieldCacheDocIdSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCacheDocIdSet).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheDocIdSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCacheDocIdSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCacheDocIdSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCacheDocIdSet::initializeClass, 1)))
            return NULL;
          return t_FieldCacheDocIdSet::wrap_Object(FieldCacheDocIdSet(((t_FieldCacheDocIdSet *) arg)->object.this$));
        }
        static PyObject *t_FieldCacheDocIdSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCacheDocIdSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCacheDocIdSet_init_(t_FieldCacheDocIdSet *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          FieldCacheDocIdSet object((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            INT_CALL(object = FieldCacheDocIdSet(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldCacheDocIdSet_bits(t_FieldCacheDocIdSet *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.bits());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldCacheDocIdSet), (PyObject *) self, "bits", args, 2);
        }

        static PyObject *t_FieldCacheDocIdSet_iterator(t_FieldCacheDocIdSet *self, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldCacheDocIdSet), (PyObject *) self, "iterator", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/ComposedQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *ComposedQuery::class$ = NULL;
            jmethodID *ComposedQuery::mids$ = NULL;
            bool ComposedQuery::live$ = false;

            jclass ComposedQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/ComposedQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_4136185e] = env->getMethodID(cls, "<init>", "(Ljava/util/List;ZLjava/lang/String;)V");
                mids$[mid_getNrSubQueries_54c6a179] = env->getMethodID(cls, "getNrSubQueries", "()I");
                mids$[mid_getOperatorName_14c7b5c5] = env->getMethodID(cls, "getOperatorName", "()Ljava/lang/String;");
                mids$[mid_getSubQueriesIterator_40858c90] = env->getMethodID(cls, "getSubQueriesIterator", "()Ljava/util/Iterator;");
                mids$[mid_getSubQuery_4fe040f0] = env->getMethodID(cls, "getSubQuery", "(I)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_isFieldsSubQueryAcceptable_54c6a16a] = env->getMethodID(cls, "isFieldsSubQueryAcceptable", "()Z");
                mids$[mid_isOperatorInfix_54c6a16a] = env->getMethodID(cls, "isOperatorInfix", "()Z");
                mids$[mid_makeLuceneSubQueriesField_82c52c4c] = env->getMethodID(cls, "makeLuceneSubQueriesField", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Ljava/util/List;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_recompose_1fde8fc3] = env->getMethodID(cls, "recompose", "(Ljava/util/List;)V");
                mids$[mid_getPrefixSeparator_14c7b5c5] = env->getMethodID(cls, "getPrefixSeparator", "()Ljava/lang/String;");
                mids$[mid_getBracketOpen_14c7b5c5] = env->getMethodID(cls, "getBracketOpen", "()Ljava/lang/String;");
                mids$[mid_getBracketClose_14c7b5c5] = env->getMethodID(cls, "getBracketClose", "()Ljava/lang/String;");
                mids$[mid_infixToString_9f94ae34] = env->getMethodID(cls, "infixToString", "(Ljava/lang/StringBuilder;)V");
                mids$[mid_prefixToString_9f94ae34] = env->getMethodID(cls, "prefixToString", "(Ljava/lang/StringBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ComposedQuery::ComposedQuery(const ::java::util::List & a0, jboolean a1, const ::java::lang::String & a2) : ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->newObject(initializeClass, &mids$, mid_init$_4136185e, a0.this$, a1, a2.this$)) {}

            jint ComposedQuery::getNrSubQueries() const
            {
              return env->callIntMethod(this$, mids$[mid_getNrSubQueries_54c6a179]);
            }

            ::java::lang::String ComposedQuery::getOperatorName() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getOperatorName_14c7b5c5]));
            }

            ::java::util::Iterator ComposedQuery::getSubQueriesIterator() const
            {
              return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_getSubQueriesIterator_40858c90]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery ComposedQuery::getSubQuery(jint a0) const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_getSubQuery_4fe040f0], a0));
            }

            jboolean ComposedQuery::isFieldsSubQueryAcceptable() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isFieldsSubQueryAcceptable_54c6a16a]);
            }

            jboolean ComposedQuery::isOperatorInfix() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isOperatorInfix_54c6a16a]);
            }

            ::java::util::List ComposedQuery::makeLuceneSubQueriesField(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_makeLuceneSubQueriesField_82c52c4c], a0.this$, a1.this$));
            }

            ::java::lang::String ComposedQuery::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_ComposedQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ComposedQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ComposedQuery_init_(t_ComposedQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ComposedQuery_getNrSubQueries(t_ComposedQuery *self);
            static PyObject *t_ComposedQuery_getOperatorName(t_ComposedQuery *self);
            static PyObject *t_ComposedQuery_getSubQueriesIterator(t_ComposedQuery *self);
            static PyObject *t_ComposedQuery_getSubQuery(t_ComposedQuery *self, PyObject *arg);
            static PyObject *t_ComposedQuery_isFieldsSubQueryAcceptable(t_ComposedQuery *self, PyObject *args);
            static PyObject *t_ComposedQuery_isOperatorInfix(t_ComposedQuery *self);
            static PyObject *t_ComposedQuery_makeLuceneSubQueriesField(t_ComposedQuery *self, PyObject *args);
            static PyObject *t_ComposedQuery_toString(t_ComposedQuery *self, PyObject *args);
            static PyObject *t_ComposedQuery_get__fieldsSubQueryAcceptable(t_ComposedQuery *self, void *data);
            static PyObject *t_ComposedQuery_get__nrSubQueries(t_ComposedQuery *self, void *data);
            static PyObject *t_ComposedQuery_get__operatorInfix(t_ComposedQuery *self, void *data);
            static PyObject *t_ComposedQuery_get__operatorName(t_ComposedQuery *self, void *data);
            static PyObject *t_ComposedQuery_get__subQueriesIterator(t_ComposedQuery *self, void *data);
            static PyGetSetDef t_ComposedQuery__fields_[] = {
              DECLARE_GET_FIELD(t_ComposedQuery, fieldsSubQueryAcceptable),
              DECLARE_GET_FIELD(t_ComposedQuery, nrSubQueries),
              DECLARE_GET_FIELD(t_ComposedQuery, operatorInfix),
              DECLARE_GET_FIELD(t_ComposedQuery, operatorName),
              DECLARE_GET_FIELD(t_ComposedQuery, subQueriesIterator),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ComposedQuery__methods_[] = {
              DECLARE_METHOD(t_ComposedQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ComposedQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ComposedQuery, getNrSubQueries, METH_NOARGS),
              DECLARE_METHOD(t_ComposedQuery, getOperatorName, METH_NOARGS),
              DECLARE_METHOD(t_ComposedQuery, getSubQueriesIterator, METH_NOARGS),
              DECLARE_METHOD(t_ComposedQuery, getSubQuery, METH_O),
              DECLARE_METHOD(t_ComposedQuery, isFieldsSubQueryAcceptable, METH_VARARGS),
              DECLARE_METHOD(t_ComposedQuery, isOperatorInfix, METH_NOARGS),
              DECLARE_METHOD(t_ComposedQuery, makeLuceneSubQueriesField, METH_VARARGS),
              DECLARE_METHOD(t_ComposedQuery, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ComposedQuery, t_ComposedQuery, ::org::apache::lucene::queryparser::surround::query::SrndQuery, ComposedQuery, t_ComposedQuery_init_, 0, 0, t_ComposedQuery__fields_, 0, 0);

            void t_ComposedQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(ComposedQuery), module, "ComposedQuery", 0);
            }

            void t_ComposedQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ComposedQuery).tp_dict, "class_", make_descriptor(ComposedQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ComposedQuery).tp_dict, "wrapfn_", make_descriptor(t_ComposedQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ComposedQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ComposedQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ComposedQuery::initializeClass, 1)))
                return NULL;
              return t_ComposedQuery::wrap_Object(ComposedQuery(((t_ComposedQuery *) arg)->object.this$));
            }
            static PyObject *t_ComposedQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ComposedQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ComposedQuery_init_(t_ComposedQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              jboolean a1;
              ::java::lang::String a2((jobject) NULL);
              ComposedQuery object((jobject) NULL);

              if (!parseArgs(args, "KZs", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2))
              {
                INT_CALL(object = ComposedQuery(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ComposedQuery_getNrSubQueries(t_ComposedQuery *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNrSubQueries());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_ComposedQuery_getOperatorName(t_ComposedQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getOperatorName());
              return j2p(result);
            }

            static PyObject *t_ComposedQuery_getSubQueriesIterator(t_ComposedQuery *self)
            {
              ::java::util::Iterator result((jobject) NULL);
              OBJ_CALL(result = self->object.getSubQueriesIterator());
              return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::queryparser::surround::query::PY_TYPE(SrndQuery));
            }

            static PyObject *t_ComposedQuery_getSubQuery(t_ComposedQuery *self, PyObject *arg)
            {
              jint a0;
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getSubQuery(a0));
                return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getSubQuery", arg);
              return NULL;
            }

            static PyObject *t_ComposedQuery_isFieldsSubQueryAcceptable(t_ComposedQuery *self, PyObject *args)
            {
              jboolean result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.isFieldsSubQueryAcceptable());
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(ComposedQuery), (PyObject *) self, "isFieldsSubQueryAcceptable", args, 2);
            }

            static PyObject *t_ComposedQuery_isOperatorInfix(t_ComposedQuery *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.isOperatorInfix());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_ComposedQuery_makeLuceneSubQueriesField(t_ComposedQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneSubQueriesField(a0, a1));
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::PY_TYPE(Query));
              }

              PyErr_SetArgsError((PyObject *) self, "makeLuceneSubQueriesField", args);
              return NULL;
            }

            static PyObject *t_ComposedQuery_toString(t_ComposedQuery *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(ComposedQuery), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_ComposedQuery_get__fieldsSubQueryAcceptable(t_ComposedQuery *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isFieldsSubQueryAcceptable());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_ComposedQuery_get__nrSubQueries(t_ComposedQuery *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNrSubQueries());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_ComposedQuery_get__operatorInfix(t_ComposedQuery *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isOperatorInfix());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_ComposedQuery_get__operatorName(t_ComposedQuery *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getOperatorName());
              return j2p(value);
            }

            static PyObject *t_ComposedQuery_get__subQueriesIterator(t_ComposedQuery *self, void *data)
            {
              ::java::util::Iterator value((jobject) NULL);
              OBJ_CALL(value = self->object.getSubQueriesIterator());
              return ::java::util::t_Iterator::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/BoostingQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *BoostingQueryBuilder::class$ = NULL;
            jmethodID *BoostingQueryBuilder::mids$ = NULL;
            bool BoostingQueryBuilder::live$ = false;

            jclass BoostingQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/BoostingQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_6566a539] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/QueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BoostingQueryBuilder::BoostingQueryBuilder(const ::org::apache::lucene::queryparser::xml::QueryBuilder & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6566a539, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_BoostingQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BoostingQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BoostingQueryBuilder_init_(t_BoostingQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_BoostingQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_BoostingQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BoostingQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BoostingQueryBuilder, t_BoostingQueryBuilder, ::java::lang::Object, BoostingQueryBuilder, t_BoostingQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_BoostingQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(BoostingQueryBuilder), module, "BoostingQueryBuilder", 0);
            }

            void t_BoostingQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BoostingQueryBuilder).tp_dict, "class_", make_descriptor(BoostingQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BoostingQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_BoostingQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BoostingQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BoostingQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BoostingQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_BoostingQueryBuilder::wrap_Object(BoostingQueryBuilder(((t_BoostingQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_BoostingQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BoostingQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BoostingQueryBuilder_init_(t_BoostingQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::QueryBuilder a0((jobject) NULL);
              BoostingQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::QueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = BoostingQueryBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfig.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {

              ::java::lang::Class *FieldConfig::class$ = NULL;
              jmethodID *FieldConfig::mids$ = NULL;
              bool FieldConfig::live$ = false;

              jclass FieldConfig::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/config/FieldConfig");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                  mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FieldConfig::FieldConfig(const ::java::lang::String & a0) : ::org::apache::lucene::queryparser::flexible::core::config::AbstractQueryConfig(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

              ::java::lang::String FieldConfig::getField() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
              }

              ::java::lang::String FieldConfig::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {
              static PyObject *t_FieldConfig_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldConfig_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FieldConfig_init_(t_FieldConfig *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FieldConfig_getField(t_FieldConfig *self);
              static PyObject *t_FieldConfig_toString(t_FieldConfig *self, PyObject *args);
              static PyObject *t_FieldConfig_get__field(t_FieldConfig *self, void *data);
              static PyGetSetDef t_FieldConfig__fields_[] = {
                DECLARE_GET_FIELD(t_FieldConfig, field),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FieldConfig__methods_[] = {
                DECLARE_METHOD(t_FieldConfig, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldConfig, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldConfig, getField, METH_NOARGS),
                DECLARE_METHOD(t_FieldConfig, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FieldConfig, t_FieldConfig, ::org::apache::lucene::queryparser::flexible::core::config::AbstractQueryConfig, FieldConfig, t_FieldConfig_init_, 0, 0, t_FieldConfig__fields_, 0, 0);

              void t_FieldConfig::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldConfig), module, "FieldConfig", 0);
              }

              void t_FieldConfig::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FieldConfig).tp_dict, "class_", make_descriptor(FieldConfig::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FieldConfig).tp_dict, "wrapfn_", make_descriptor(t_FieldConfig::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FieldConfig).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldConfig_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldConfig::initializeClass, 1)))
                  return NULL;
                return t_FieldConfig::wrap_Object(FieldConfig(((t_FieldConfig *) arg)->object.this$));
              }
              static PyObject *t_FieldConfig_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldConfig::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FieldConfig_init_(t_FieldConfig *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::String a0((jobject) NULL);
                FieldConfig object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = FieldConfig(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_FieldConfig_getField(t_FieldConfig *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return j2p(result);
              }

              static PyObject *t_FieldConfig_toString(t_FieldConfig *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(FieldConfig), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_FieldConfig_get__field(t_FieldConfig *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return j2p(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/SingleFragListBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList.h"
#include "org/apache/lucene/search/vectorhighlight/FragListBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *SingleFragListBuilder::class$ = NULL;
          jmethodID *SingleFragListBuilder::mids$ = NULL;
          bool SingleFragListBuilder::live$ = false;

          jclass SingleFragListBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/SingleFragListBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_createFieldFragList_f54fd6ce] = env->getMethodID(cls, "createFieldFragList", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList;I)Lorg/apache/lucene/search/vectorhighlight/FieldFragList;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SingleFragListBuilder::SingleFragListBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::vectorhighlight::FieldFragList SingleFragListBuilder::createFieldFragList(const ::org::apache::lucene::search::vectorhighlight::FieldPhraseList & a0, jint a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldFragList(env->callObjectMethod(this$, mids$[mid_createFieldFragList_f54fd6ce], a0.this$, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_SingleFragListBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SingleFragListBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SingleFragListBuilder_init_(t_SingleFragListBuilder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SingleFragListBuilder_createFieldFragList(t_SingleFragListBuilder *self, PyObject *args);

          static PyMethodDef t_SingleFragListBuilder__methods_[] = {
            DECLARE_METHOD(t_SingleFragListBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SingleFragListBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SingleFragListBuilder, createFieldFragList, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SingleFragListBuilder, t_SingleFragListBuilder, ::java::lang::Object, SingleFragListBuilder, t_SingleFragListBuilder_init_, 0, 0, 0, 0, 0);

          void t_SingleFragListBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(SingleFragListBuilder), module, "SingleFragListBuilder", 0);
          }

          void t_SingleFragListBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SingleFragListBuilder).tp_dict, "class_", make_descriptor(SingleFragListBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SingleFragListBuilder).tp_dict, "wrapfn_", make_descriptor(t_SingleFragListBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SingleFragListBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SingleFragListBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SingleFragListBuilder::initializeClass, 1)))
              return NULL;
            return t_SingleFragListBuilder::wrap_Object(SingleFragListBuilder(((t_SingleFragListBuilder *) arg)->object.this$));
          }
          static PyObject *t_SingleFragListBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SingleFragListBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SingleFragListBuilder_init_(t_SingleFragListBuilder *self, PyObject *args, PyObject *kwds)
          {
            SingleFragListBuilder object((jobject) NULL);

            INT_CALL(object = SingleFragListBuilder());
            self->object = object;

            return 0;
          }

          static PyObject *t_SingleFragListBuilder_createFieldFragList(t_SingleFragListBuilder *self, PyObject *args)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldPhraseList a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::search::vectorhighlight::FieldFragList result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::search::vectorhighlight::FieldPhraseList::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.createFieldFragList(a0, a1));
              return ::org::apache::lucene::search::vectorhighlight::t_FieldFragList::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "createFieldFragList", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/analysis/PythonFilteringTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {

        ::java::lang::Class *PythonFilteringTokenFilter::class$ = NULL;
        jmethodID *PythonFilteringTokenFilter::mids$ = NULL;
        bool PythonFilteringTokenFilter::live$ = false;

        jclass PythonFilteringTokenFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/analysis/PythonFilteringTokenFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_accept_54c6a16a] = env->getMethodID(cls, "accept", "()Z");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonFilteringTokenFilter::PythonFilteringTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

        void PythonFilteringTokenFilter::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonFilteringTokenFilter::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonFilteringTokenFilter::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {
        static PyObject *t_PythonFilteringTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonFilteringTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonFilteringTokenFilter_init_(t_PythonFilteringTokenFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonFilteringTokenFilter_finalize(t_PythonFilteringTokenFilter *self);
        static PyObject *t_PythonFilteringTokenFilter_pythonExtension(t_PythonFilteringTokenFilter *self, PyObject *args);
        static jboolean JNICALL t_PythonFilteringTokenFilter_accept0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonFilteringTokenFilter_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonFilteringTokenFilter_get__self(t_PythonFilteringTokenFilter *self, void *data);
        static PyGetSetDef t_PythonFilteringTokenFilter__fields_[] = {
          DECLARE_GET_FIELD(t_PythonFilteringTokenFilter, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonFilteringTokenFilter__methods_[] = {
          DECLARE_METHOD(t_PythonFilteringTokenFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFilteringTokenFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFilteringTokenFilter, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonFilteringTokenFilter, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonFilteringTokenFilter, t_PythonFilteringTokenFilter, ::org::apache::lucene::analysis::util::FilteringTokenFilter, PythonFilteringTokenFilter, t_PythonFilteringTokenFilter_init_, 0, 0, t_PythonFilteringTokenFilter__fields_, 0, 0);

        void t_PythonFilteringTokenFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonFilteringTokenFilter), module, "PythonFilteringTokenFilter", 1);
        }

        void t_PythonFilteringTokenFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonFilteringTokenFilter).tp_dict, "class_", make_descriptor(PythonFilteringTokenFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonFilteringTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_PythonFilteringTokenFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonFilteringTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonFilteringTokenFilter::initializeClass);
          JNINativeMethod methods[] = {
            { "accept", "()Z", (void *) t_PythonFilteringTokenFilter_accept0 },
            { "pythonDecRef", "()V", (void *) t_PythonFilteringTokenFilter_pythonDecRef1 },
          };
          env->registerNatives(cls, methods, 2);
        }

        static PyObject *t_PythonFilteringTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonFilteringTokenFilter::initializeClass, 1)))
            return NULL;
          return t_PythonFilteringTokenFilter::wrap_Object(PythonFilteringTokenFilter(((t_PythonFilteringTokenFilter *) arg)->object.this$));
        }
        static PyObject *t_PythonFilteringTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonFilteringTokenFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonFilteringTokenFilter_init_(t_PythonFilteringTokenFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::Version a0((jobject) NULL);
          ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
          PythonFilteringTokenFilter object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
          {
            INT_CALL(object = PythonFilteringTokenFilter(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonFilteringTokenFilter_finalize(t_PythonFilteringTokenFilter *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonFilteringTokenFilter_pythonExtension(t_PythonFilteringTokenFilter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jboolean JNICALL t_PythonFilteringTokenFilter_accept0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFilteringTokenFilter::mids$[PythonFilteringTokenFilter::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "accept", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("accept", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonFilteringTokenFilter_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFilteringTokenFilter::mids$[PythonFilteringTokenFilter::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonFilteringTokenFilter::mids$[PythonFilteringTokenFilter::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonFilteringTokenFilter_get__self(t_PythonFilteringTokenFilter *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/PlainTextDictionary.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "java/io/File.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/io/InputStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *PlainTextDictionary::class$ = NULL;
          jmethodID *PlainTextDictionary::mids$ = NULL;
          bool PlainTextDictionary::live$ = false;

          jclass PlainTextDictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/PlainTextDictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
              mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
              mids$[mid_getEntryIterator_23dc46b1] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PlainTextDictionary::PlainTextDictionary(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          PlainTextDictionary::PlainTextDictionary(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

          PlainTextDictionary::PlainTextDictionary(const ::java::io::File & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

          ::org::apache::lucene::search::suggest::InputIterator PlainTextDictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_23dc46b1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_PlainTextDictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PlainTextDictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PlainTextDictionary_init_(t_PlainTextDictionary *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PlainTextDictionary_getEntryIterator(t_PlainTextDictionary *self);
          static PyObject *t_PlainTextDictionary_get__entryIterator(t_PlainTextDictionary *self, void *data);
          static PyGetSetDef t_PlainTextDictionary__fields_[] = {
            DECLARE_GET_FIELD(t_PlainTextDictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PlainTextDictionary__methods_[] = {
            DECLARE_METHOD(t_PlainTextDictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PlainTextDictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PlainTextDictionary, getEntryIterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PlainTextDictionary, t_PlainTextDictionary, ::java::lang::Object, PlainTextDictionary, t_PlainTextDictionary_init_, 0, 0, t_PlainTextDictionary__fields_, 0, 0);

          void t_PlainTextDictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(PlainTextDictionary), module, "PlainTextDictionary", 0);
          }

          void t_PlainTextDictionary::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PlainTextDictionary).tp_dict, "class_", make_descriptor(PlainTextDictionary::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PlainTextDictionary).tp_dict, "wrapfn_", make_descriptor(t_PlainTextDictionary::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PlainTextDictionary).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PlainTextDictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PlainTextDictionary::initializeClass, 1)))
              return NULL;
            return t_PlainTextDictionary::wrap_Object(PlainTextDictionary(((t_PlainTextDictionary *) arg)->object.this$));
          }
          static PyObject *t_PlainTextDictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PlainTextDictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PlainTextDictionary_init_(t_PlainTextDictionary *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                PlainTextDictionary object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = PlainTextDictionary(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::InputStream a0((jobject) NULL);
                PlainTextDictionary object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                {
                  INT_CALL(object = PlainTextDictionary(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::File a0((jobject) NULL);
                PlainTextDictionary object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
                {
                  INT_CALL(object = PlainTextDictionary(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PlainTextDictionary_getEntryIterator(t_PlainTextDictionary *self)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
          }

          static PyObject *t_PlainTextDictionary_get__entryIterator(t_PlainTextDictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniStemFilter::class$ = NULL;
          jmethodID *SoraniStemFilter::mids$ = NULL;
          bool SoraniStemFilter::live$ = false;

          jclass SoraniStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniStemFilter::SoraniStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean SoraniStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniStemFilter_init_(t_SoraniStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniStemFilter_incrementToken(t_SoraniStemFilter *self, PyObject *args);

          static PyMethodDef t_SoraniStemFilter__methods_[] = {
            DECLARE_METHOD(t_SoraniStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SoraniStemFilter, t_SoraniStemFilter, ::org::apache::lucene::analysis::TokenFilter, SoraniStemFilter, t_SoraniStemFilter_init_, 0, 0, 0, 0, 0);

          void t_SoraniStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniStemFilter), module, "SoraniStemFilter", 0);
          }

          void t_SoraniStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SoraniStemFilter).tp_dict, "class_", make_descriptor(SoraniStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SoraniStemFilter).tp_dict, "wrapfn_", make_descriptor(t_SoraniStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SoraniStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SoraniStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniStemFilter::initializeClass, 1)))
              return NULL;
            return t_SoraniStemFilter::wrap_Object(SoraniStemFilter(((t_SoraniStemFilter *) arg)->object.this$));
          }
          static PyObject *t_SoraniStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniStemFilter_init_(t_SoraniStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            SoraniStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = SoraniStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SoraniStemFilter_incrementToken(t_SoraniStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SoraniStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/AbstractRangeQueryNode.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/RangeQueryNode.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *AbstractRangeQueryNode::class$ = NULL;
              jmethodID *AbstractRangeQueryNode::mids$ = NULL;
              bool AbstractRangeQueryNode::live$ = false;

              jclass AbstractRangeQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/AbstractRangeQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getLowerBound_2906e52b] = env->getMethodID(cls, "getLowerBound", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode;");
                  mids$[mid_getUpperBound_2906e52b] = env->getMethodID(cls, "getUpperBound", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode;");
                  mids$[mid_isLowerInclusive_54c6a16a] = env->getMethodID(cls, "isLowerInclusive", "()Z");
                  mids$[mid_isUpperInclusive_54c6a16a] = env->getMethodID(cls, "isUpperInclusive", "()Z");
                  mids$[mid_setBounds_b72fdc1c] = env->getMethodID(cls, "setBounds", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode;Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode;ZZ)V");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::CharSequence AbstractRangeQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode AbstractRangeQueryNode::getLowerBound() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode(env->callObjectMethod(this$, mids$[mid_getLowerBound_2906e52b]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode AbstractRangeQueryNode::getUpperBound() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode(env->callObjectMethod(this$, mids$[mid_getUpperBound_2906e52b]));
              }

              jboolean AbstractRangeQueryNode::isLowerInclusive() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isLowerInclusive_54c6a16a]);
              }

              jboolean AbstractRangeQueryNode::isUpperInclusive() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isUpperInclusive_54c6a16a]);
              }

              void AbstractRangeQueryNode::setBounds(const ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode & a0, const ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode & a1, jboolean a2, jboolean a3) const
              {
                env->callVoidMethod(this$, mids$[mid_setBounds_b72fdc1c], a0.this$, a1.this$, a2, a3);
              }

              void AbstractRangeQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              ::java::lang::CharSequence AbstractRangeQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String AbstractRangeQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_AbstractRangeQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AbstractRangeQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AbstractRangeQueryNode_of_(t_AbstractRangeQueryNode *self, PyObject *args);
              static PyObject *t_AbstractRangeQueryNode_getField(t_AbstractRangeQueryNode *self);
              static PyObject *t_AbstractRangeQueryNode_getLowerBound(t_AbstractRangeQueryNode *self);
              static PyObject *t_AbstractRangeQueryNode_getUpperBound(t_AbstractRangeQueryNode *self);
              static PyObject *t_AbstractRangeQueryNode_isLowerInclusive(t_AbstractRangeQueryNode *self);
              static PyObject *t_AbstractRangeQueryNode_isUpperInclusive(t_AbstractRangeQueryNode *self);
              static PyObject *t_AbstractRangeQueryNode_setBounds(t_AbstractRangeQueryNode *self, PyObject *args);
              static PyObject *t_AbstractRangeQueryNode_setField(t_AbstractRangeQueryNode *self, PyObject *arg);
              static PyObject *t_AbstractRangeQueryNode_toQueryString(t_AbstractRangeQueryNode *self, PyObject *args);
              static PyObject *t_AbstractRangeQueryNode_toString(t_AbstractRangeQueryNode *self, PyObject *args);
              static PyObject *t_AbstractRangeQueryNode_get__field(t_AbstractRangeQueryNode *self, void *data);
              static int t_AbstractRangeQueryNode_set__field(t_AbstractRangeQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_AbstractRangeQueryNode_get__lowerBound(t_AbstractRangeQueryNode *self, void *data);
              static PyObject *t_AbstractRangeQueryNode_get__lowerInclusive(t_AbstractRangeQueryNode *self, void *data);
              static PyObject *t_AbstractRangeQueryNode_get__upperBound(t_AbstractRangeQueryNode *self, void *data);
              static PyObject *t_AbstractRangeQueryNode_get__upperInclusive(t_AbstractRangeQueryNode *self, void *data);
              static PyObject *t_AbstractRangeQueryNode_get__parameters_(t_AbstractRangeQueryNode *self, void *data);
              static PyGetSetDef t_AbstractRangeQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_AbstractRangeQueryNode, field),
                DECLARE_GET_FIELD(t_AbstractRangeQueryNode, lowerBound),
                DECLARE_GET_FIELD(t_AbstractRangeQueryNode, lowerInclusive),
                DECLARE_GET_FIELD(t_AbstractRangeQueryNode, upperBound),
                DECLARE_GET_FIELD(t_AbstractRangeQueryNode, upperInclusive),
                DECLARE_GET_FIELD(t_AbstractRangeQueryNode, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_AbstractRangeQueryNode__methods_[] = {
                DECLARE_METHOD(t_AbstractRangeQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, of_, METH_VARARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, getLowerBound, METH_NOARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, getUpperBound, METH_NOARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, isLowerInclusive, METH_NOARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, isUpperInclusive, METH_NOARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, setBounds, METH_VARARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, setField, METH_O),
                DECLARE_METHOD(t_AbstractRangeQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(AbstractRangeQueryNode, t_AbstractRangeQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, AbstractRangeQueryNode, abstract_init, 0, 0, t_AbstractRangeQueryNode__fields_, 0, 0);
              PyObject *t_AbstractRangeQueryNode::wrap_Object(const AbstractRangeQueryNode& object, PyTypeObject *p0)
              {
                PyObject *obj = t_AbstractRangeQueryNode::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_AbstractRangeQueryNode *self = (t_AbstractRangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_AbstractRangeQueryNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_AbstractRangeQueryNode::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_AbstractRangeQueryNode *self = (t_AbstractRangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_AbstractRangeQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(AbstractRangeQueryNode), module, "AbstractRangeQueryNode", 0);
              }

              void t_AbstractRangeQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(AbstractRangeQueryNode).tp_dict, "class_", make_descriptor(AbstractRangeQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(AbstractRangeQueryNode).tp_dict, "wrapfn_", make_descriptor(t_AbstractRangeQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(AbstractRangeQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AbstractRangeQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AbstractRangeQueryNode::initializeClass, 1)))
                  return NULL;
                return t_AbstractRangeQueryNode::wrap_Object(AbstractRangeQueryNode(((t_AbstractRangeQueryNode *) arg)->object.this$));
              }
              static PyObject *t_AbstractRangeQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AbstractRangeQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_AbstractRangeQueryNode_of_(t_AbstractRangeQueryNode *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_AbstractRangeQueryNode_getField(t_AbstractRangeQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_AbstractRangeQueryNode_getLowerBound(t_AbstractRangeQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getLowerBound());
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(result);
              }

              static PyObject *t_AbstractRangeQueryNode_getUpperBound(t_AbstractRangeQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getUpperBound());
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(result);
              }

              static PyObject *t_AbstractRangeQueryNode_isLowerInclusive(t_AbstractRangeQueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isLowerInclusive());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_AbstractRangeQueryNode_isUpperInclusive(t_AbstractRangeQueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isUpperInclusive());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_AbstractRangeQueryNode_setBounds(t_AbstractRangeQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                jboolean a3;

                if (!parseArgs(args, "KKZZ", ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::parameters_, &a1, &p1, ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::parameters_, &a2, &a3))
                {
                  OBJ_CALL(self->object.setBounds(a0, a1, a2, a3));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setBounds", args);
                return NULL;
              }

              static PyObject *t_AbstractRangeQueryNode_setField(t_AbstractRangeQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_AbstractRangeQueryNode_toQueryString(t_AbstractRangeQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(AbstractRangeQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_AbstractRangeQueryNode_toString(t_AbstractRangeQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(AbstractRangeQueryNode), (PyObject *) self, "toString", args, 2);
              }
              static PyObject *t_AbstractRangeQueryNode_get__parameters_(t_AbstractRangeQueryNode *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }

              static PyObject *t_AbstractRangeQueryNode_get__field(t_AbstractRangeQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_AbstractRangeQueryNode_set__field(t_AbstractRangeQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_AbstractRangeQueryNode_get__lowerBound(t_AbstractRangeQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getLowerBound());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(value);
              }

              static PyObject *t_AbstractRangeQueryNode_get__lowerInclusive(t_AbstractRangeQueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isLowerInclusive());
                Py_RETURN_BOOL(value);
              }

              static PyObject *t_AbstractRangeQueryNode_get__upperBound(t_AbstractRangeQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getUpperBound());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(value);
              }

              static PyObject *t_AbstractRangeQueryNode_get__upperInclusive(t_AbstractRangeQueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isUpperInclusive());
                Py_RETURN_BOOL(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/NGramTokenizer.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *NGramTokenizer::class$ = NULL;
          jmethodID *NGramTokenizer::mids$ = NULL;
          bool NGramTokenizer::live$ = false;
          jint NGramTokenizer::DEFAULT_MAX_NGRAM_SIZE = (jint) 0;
          jint NGramTokenizer::DEFAULT_MIN_NGRAM_SIZE = (jint) 0;

          jclass NGramTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/NGramTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_92513554] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;II)V");
              mids$[mid_init$_fb18a8f8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;II)V");
              mids$[mid_init$_47cfcf59] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;II)V");
              mids$[mid_init$_0c87564f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;II)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_isTokenChar_39c7bd30] = env->getMethodID(cls, "isTokenChar", "(I)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_NGRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_NGRAM_SIZE");
              DEFAULT_MIN_NGRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_NGRAM_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NGramTokenizer::NGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          NGramTokenizer::NGramTokenizer(const ::java::io::Reader & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_92513554, a0.this$, a1, a2)) {}

          NGramTokenizer::NGramTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_fb18a8f8, a0.this$, a1.this$, a2, a3)) {}

          NGramTokenizer::NGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_47cfcf59, a0.this$, a1.this$, a2, a3)) {}

          NGramTokenizer::NGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2, jint a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_0c87564f, a0.this$, a1.this$, a2.this$, a3, a4)) {}

          void NGramTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean NGramTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void NGramTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_NGramTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NGramTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NGramTokenizer_init_(t_NGramTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NGramTokenizer_end(t_NGramTokenizer *self, PyObject *args);
          static PyObject *t_NGramTokenizer_incrementToken(t_NGramTokenizer *self, PyObject *args);
          static PyObject *t_NGramTokenizer_reset(t_NGramTokenizer *self, PyObject *args);

          static PyMethodDef t_NGramTokenizer__methods_[] = {
            DECLARE_METHOD(t_NGramTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_NGramTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_NGramTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NGramTokenizer, t_NGramTokenizer, ::org::apache::lucene::analysis::Tokenizer, NGramTokenizer, t_NGramTokenizer_init_, 0, 0, 0, 0, 0);

          void t_NGramTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(NGramTokenizer), module, "NGramTokenizer", 0);
          }

          void t_NGramTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NGramTokenizer).tp_dict, "class_", make_descriptor(NGramTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NGramTokenizer).tp_dict, "wrapfn_", make_descriptor(t_NGramTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NGramTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(NGramTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(NGramTokenizer).tp_dict, "DEFAULT_MAX_NGRAM_SIZE", make_descriptor(NGramTokenizer::DEFAULT_MAX_NGRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(NGramTokenizer).tp_dict, "DEFAULT_MIN_NGRAM_SIZE", make_descriptor(NGramTokenizer::DEFAULT_MIN_NGRAM_SIZE));
          }

          static PyObject *t_NGramTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NGramTokenizer::initializeClass, 1)))
              return NULL;
            return t_NGramTokenizer::wrap_Object(NGramTokenizer(((t_NGramTokenizer *) arg)->object.this$));
          }
          static PyObject *t_NGramTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NGramTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NGramTokenizer_init_(t_NGramTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                NGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = NGramTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                jint a2;
                NGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kII", ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = NGramTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                jint a3;
                NGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkII", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = NGramTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                jint a3;
                NGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkII", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = NGramTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                jint a3;
                jint a4;
                NGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkkII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = NGramTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NGramTokenizer_end(t_NGramTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(NGramTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_NGramTokenizer_incrementToken(t_NGramTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NGramTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_NGramTokenizer_reset(t_NGramTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(NGramTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TwoPhaseCommit.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TwoPhaseCommit::class$ = NULL;
        jmethodID *TwoPhaseCommit::mids$ = NULL;
        bool TwoPhaseCommit::live$ = false;

        jclass TwoPhaseCommit::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TwoPhaseCommit");

            mids$ = new jmethodID[max_mid];
            mids$[mid_commit_54c6a166] = env->getMethodID(cls, "commit", "()V");
            mids$[mid_prepareCommit_54c6a166] = env->getMethodID(cls, "prepareCommit", "()V");
            mids$[mid_rollback_54c6a166] = env->getMethodID(cls, "rollback", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TwoPhaseCommit::commit() const
        {
          env->callVoidMethod(this$, mids$[mid_commit_54c6a166]);
        }

        void TwoPhaseCommit::prepareCommit() const
        {
          env->callVoidMethod(this$, mids$[mid_prepareCommit_54c6a166]);
        }

        void TwoPhaseCommit::rollback() const
        {
          env->callVoidMethod(this$, mids$[mid_rollback_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TwoPhaseCommit_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TwoPhaseCommit_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TwoPhaseCommit_commit(t_TwoPhaseCommit *self);
        static PyObject *t_TwoPhaseCommit_prepareCommit(t_TwoPhaseCommit *self);
        static PyObject *t_TwoPhaseCommit_rollback(t_TwoPhaseCommit *self);

        static PyMethodDef t_TwoPhaseCommit__methods_[] = {
          DECLARE_METHOD(t_TwoPhaseCommit, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TwoPhaseCommit, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TwoPhaseCommit, commit, METH_NOARGS),
          DECLARE_METHOD(t_TwoPhaseCommit, prepareCommit, METH_NOARGS),
          DECLARE_METHOD(t_TwoPhaseCommit, rollback, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TwoPhaseCommit, t_TwoPhaseCommit, ::java::lang::Object, TwoPhaseCommit, abstract_init, 0, 0, 0, 0, 0);

        void t_TwoPhaseCommit::install(PyObject *module)
        {
          installType(&PY_TYPE(TwoPhaseCommit), module, "TwoPhaseCommit", 0);
        }

        void t_TwoPhaseCommit::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommit).tp_dict, "class_", make_descriptor(TwoPhaseCommit::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommit).tp_dict, "wrapfn_", make_descriptor(t_TwoPhaseCommit::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommit).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TwoPhaseCommit_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TwoPhaseCommit::initializeClass, 1)))
            return NULL;
          return t_TwoPhaseCommit::wrap_Object(TwoPhaseCommit(((t_TwoPhaseCommit *) arg)->object.this$));
        }
        static PyObject *t_TwoPhaseCommit_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TwoPhaseCommit::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TwoPhaseCommit_commit(t_TwoPhaseCommit *self)
        {
          OBJ_CALL(self->object.commit());
          Py_RETURN_NONE;
        }

        static PyObject *t_TwoPhaseCommit_prepareCommit(t_TwoPhaseCommit *self)
        {
          OBJ_CALL(self->object.prepareCommit());
          Py_RETURN_NONE;
        }

        static PyObject *t_TwoPhaseCommit_rollback(t_TwoPhaseCommit *self)
        {
          OBJ_CALL(self->object.rollback());
          Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiTermQuery$TopTermsScoringBooleanQueryRewrite.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiTermQuery$TopTermsScoringBooleanQueryRewrite::class$ = NULL;
        jmethodID *MultiTermQuery$TopTermsScoringBooleanQueryRewrite::mids$ = NULL;
        bool MultiTermQuery$TopTermsScoringBooleanQueryRewrite::live$ = false;

        jclass MultiTermQuery$TopTermsScoringBooleanQueryRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiTermQuery$TopTermsScoringBooleanQueryRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_getTopLevelQuery_6f9339e7] = env->getMethodID(cls, "getTopLevelQuery", "()Lorg/apache/lucene/search/BooleanQuery;");
            mids$[mid_addClause_82a56efb] = env->getMethodID(cls, "addClause", "(Lorg/apache/lucene/search/BooleanQuery;Lorg/apache/lucene/index/Term;IFLorg/apache/lucene/index/TermContext;)V");
            mids$[mid_getMaxSize_54c6a179] = env->getMethodID(cls, "getMaxSize", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTermQuery$TopTermsScoringBooleanQueryRewrite::MultiTermQuery$TopTermsScoringBooleanQueryRewrite(jint a0) : ::org::apache::lucene::search::TopTermsRewrite(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_of_(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self, PyObject *args);
        static int t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_init_(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_get__parameters_(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self, void *data);
        static PyGetSetDef t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite__methods_[] = {
          DECLARE_METHOD(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiTermQuery$TopTermsScoringBooleanQueryRewrite, t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite, ::org::apache::lucene::search::TopTermsRewrite, MultiTermQuery$TopTermsScoringBooleanQueryRewrite, t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_init_, 0, 0, t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite__fields_, 0, 0);
        PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::wrap_Object(const MultiTermQuery$TopTermsScoringBooleanQueryRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self = (t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self = (t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermQuery$TopTermsScoringBooleanQueryRewrite), module, "MultiTermQuery$TopTermsScoringBooleanQueryRewrite", 0);
        }

        void t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$TopTermsScoringBooleanQueryRewrite).tp_dict, "class_", make_descriptor(MultiTermQuery$TopTermsScoringBooleanQueryRewrite::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$TopTermsScoringBooleanQueryRewrite).tp_dict, "wrapfn_", make_descriptor(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$TopTermsScoringBooleanQueryRewrite).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermQuery$TopTermsScoringBooleanQueryRewrite::initializeClass, 1)))
            return NULL;
          return t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::wrap_Object(MultiTermQuery$TopTermsScoringBooleanQueryRewrite(((t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *) arg)->object.this$));
        }
        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermQuery$TopTermsScoringBooleanQueryRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_of_(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_init_(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          MultiTermQuery$TopTermsScoringBooleanQueryRewrite object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = MultiTermQuery$TopTermsScoringBooleanQueryRewrite(a0));
            self->object = object;
            self->parameters[0] = &::org::apache::lucene::search::PY_TYPE(BooleanQuery);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_get__parameters_(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/TopOrdAndIntQueue.h"
#include "org/apache/lucene/facet/TopOrdAndIntQueue$OrdAndValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *TopOrdAndIntQueue::class$ = NULL;
        jmethodID *TopOrdAndIntQueue::mids$ = NULL;
        bool TopOrdAndIntQueue::live$ = false;

        jclass TopOrdAndIntQueue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/TopOrdAndIntQueue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_lessThan_bb8ee210] = env->getMethodID(cls, "lessThan", "(Lorg/apache/lucene/facet/TopOrdAndIntQueue$OrdAndValue;Lorg/apache/lucene/facet/TopOrdAndIntQueue$OrdAndValue;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopOrdAndIntQueue::TopOrdAndIntQueue(jint a0) : ::org::apache::lucene::util::PriorityQueue(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_TopOrdAndIntQueue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndIntQueue_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndIntQueue_of_(t_TopOrdAndIntQueue *self, PyObject *args);
        static int t_TopOrdAndIntQueue_init_(t_TopOrdAndIntQueue *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopOrdAndIntQueue_get__parameters_(t_TopOrdAndIntQueue *self, void *data);
        static PyGetSetDef t_TopOrdAndIntQueue__fields_[] = {
          DECLARE_GET_FIELD(t_TopOrdAndIntQueue, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopOrdAndIntQueue__methods_[] = {
          DECLARE_METHOD(t_TopOrdAndIntQueue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndIntQueue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndIntQueue, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopOrdAndIntQueue, t_TopOrdAndIntQueue, ::org::apache::lucene::util::PriorityQueue, TopOrdAndIntQueue, t_TopOrdAndIntQueue_init_, 0, 0, t_TopOrdAndIntQueue__fields_, 0, 0);
        PyObject *t_TopOrdAndIntQueue::wrap_Object(const TopOrdAndIntQueue& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndIntQueue::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndIntQueue *self = (t_TopOrdAndIntQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopOrdAndIntQueue::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndIntQueue::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndIntQueue *self = (t_TopOrdAndIntQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopOrdAndIntQueue::install(PyObject *module)
        {
          installType(&PY_TYPE(TopOrdAndIntQueue), module, "TopOrdAndIntQueue", 0);
          PyDict_SetItemString(PY_TYPE(TopOrdAndIntQueue).tp_dict, "OrdAndValue", make_descriptor(&PY_TYPE(TopOrdAndIntQueue$OrdAndValue)));
        }

        void t_TopOrdAndIntQueue::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopOrdAndIntQueue).tp_dict, "class_", make_descriptor(TopOrdAndIntQueue::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopOrdAndIntQueue).tp_dict, "wrapfn_", make_descriptor(t_TopOrdAndIntQueue::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopOrdAndIntQueue).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopOrdAndIntQueue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopOrdAndIntQueue::initializeClass, 1)))
            return NULL;
          return t_TopOrdAndIntQueue::wrap_Object(TopOrdAndIntQueue(((t_TopOrdAndIntQueue *) arg)->object.this$));
        }
        static PyObject *t_TopOrdAndIntQueue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopOrdAndIntQueue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopOrdAndIntQueue_of_(t_TopOrdAndIntQueue *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_TopOrdAndIntQueue_init_(t_TopOrdAndIntQueue *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          TopOrdAndIntQueue object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = TopOrdAndIntQueue(a0));
            self->object = object;
            self->parameters[0] = &::org::apache::lucene::facet::PY_TYPE(TopOrdAndIntQueue$OrdAndValue);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_TopOrdAndIntQueue_get__parameters_(t_TopOrdAndIntQueue *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/SegmentInfoReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *SegmentInfoReader::class$ = NULL;
        jmethodID *SegmentInfoReader::mids$ = NULL;
        bool SegmentInfoReader::live$ = false;

        jclass SegmentInfoReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/SegmentInfoReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_read_ff05cda4] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/index/SegmentInfo;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::SegmentInfo SegmentInfoReader::read(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) const
        {
          return ::org::apache::lucene::index::SegmentInfo(env->callObjectMethod(this$, mids$[mid_read_ff05cda4], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_SegmentInfoReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfoReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfoReader_read(t_SegmentInfoReader *self, PyObject *args);

        static PyMethodDef t_SegmentInfoReader__methods_[] = {
          DECLARE_METHOD(t_SegmentInfoReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfoReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfoReader, read, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentInfoReader, t_SegmentInfoReader, ::java::lang::Object, SegmentInfoReader, abstract_init, 0, 0, 0, 0, 0);

        void t_SegmentInfoReader::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentInfoReader), module, "SegmentInfoReader", 0);
        }

        void t_SegmentInfoReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentInfoReader).tp_dict, "class_", make_descriptor(SegmentInfoReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentInfoReader).tp_dict, "wrapfn_", make_descriptor(t_SegmentInfoReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentInfoReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentInfoReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentInfoReader::initializeClass, 1)))
            return NULL;
          return t_SegmentInfoReader::wrap_Object(SegmentInfoReader(((t_SegmentInfoReader *) arg)->object.this$));
        }
        static PyObject *t_SegmentInfoReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentInfoReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SegmentInfoReader_read(t_SegmentInfoReader *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo result((jobject) NULL);

          if (!parseArgs(args, "ksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "read", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace query {

          ::java::lang::Class *QueryAutoStopWordAnalyzer::class$ = NULL;
          jmethodID *QueryAutoStopWordAnalyzer::mids$ = NULL;
          bool QueryAutoStopWordAnalyzer::live$ = false;
          jfloat QueryAutoStopWordAnalyzer::defaultMaxDocFreqPercent = (jfloat) 0;

          jclass QueryAutoStopWordAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_86541bdf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/IndexReader;)V");
              mids$[mid_init$_1bc62338] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/IndexReader;F)V");
              mids$[mid_init$_960dc4ff] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/IndexReader;I)V");
              mids$[mid_init$_61930096] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/IndexReader;Ljava/util/Collection;I)V");
              mids$[mid_init$_35bdfeb1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/IndexReader;Ljava/util/Collection;F)V");
              mids$[mid_getStopWords_2b86e588] = env->getMethodID(cls, "getStopWords", "()[Lorg/apache/lucene/index/Term;");
              mids$[mid_getStopWords_1f6a174f] = env->getMethodID(cls, "getStopWords", "(Ljava/lang/String;)[Ljava/lang/String;");
              mids$[mid_getWrappedAnalyzer_29a2299f] = env->getMethodID(cls, "getWrappedAnalyzer", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer;");
              mids$[mid_wrapComponents_46d74455] = env->getMethodID(cls, "wrapComponents", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              defaultMaxDocFreqPercent = env->getStaticFloatField(cls, "defaultMaxDocFreqPercent");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryAutoStopWordAnalyzer::QueryAutoStopWordAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::index::IndexReader & a1) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_86541bdf, a0.this$, a1.this$)) {}

          QueryAutoStopWordAnalyzer::QueryAutoStopWordAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::index::IndexReader & a1, jfloat a2) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_1bc62338, a0.this$, a1.this$, a2)) {}

          QueryAutoStopWordAnalyzer::QueryAutoStopWordAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::index::IndexReader & a1, jint a2) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_960dc4ff, a0.this$, a1.this$, a2)) {}

          QueryAutoStopWordAnalyzer::QueryAutoStopWordAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::index::IndexReader & a1, const ::java::util::Collection & a2, jint a3) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_61930096, a0.this$, a1.this$, a2.this$, a3)) {}

          QueryAutoStopWordAnalyzer::QueryAutoStopWordAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::index::IndexReader & a1, const ::java::util::Collection & a2, jfloat a3) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_35bdfeb1, a0.this$, a1.this$, a2.this$, a3)) {}

          JArray< ::org::apache::lucene::index::Term > QueryAutoStopWordAnalyzer::getStopWords() const
          {
            return JArray< ::org::apache::lucene::index::Term >(env->callObjectMethod(this$, mids$[mid_getStopWords_2b86e588]));
          }

          JArray< ::java::lang::String > QueryAutoStopWordAnalyzer::getStopWords(const ::java::lang::String & a0) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getStopWords_1f6a174f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace query {
          static PyObject *t_QueryAutoStopWordAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryAutoStopWordAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryAutoStopWordAnalyzer_init_(t_QueryAutoStopWordAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryAutoStopWordAnalyzer_getStopWords(t_QueryAutoStopWordAnalyzer *self, PyObject *args);
          static PyObject *t_QueryAutoStopWordAnalyzer_get__stopWords(t_QueryAutoStopWordAnalyzer *self, void *data);
          static PyGetSetDef t_QueryAutoStopWordAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_QueryAutoStopWordAnalyzer, stopWords),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryAutoStopWordAnalyzer__methods_[] = {
            DECLARE_METHOD(t_QueryAutoStopWordAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryAutoStopWordAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryAutoStopWordAnalyzer, getStopWords, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryAutoStopWordAnalyzer, t_QueryAutoStopWordAnalyzer, ::org::apache::lucene::analysis::AnalyzerWrapper, QueryAutoStopWordAnalyzer, t_QueryAutoStopWordAnalyzer_init_, 0, 0, t_QueryAutoStopWordAnalyzer__fields_, 0, 0);

          void t_QueryAutoStopWordAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryAutoStopWordAnalyzer), module, "QueryAutoStopWordAnalyzer", 0);
          }

          void t_QueryAutoStopWordAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryAutoStopWordAnalyzer).tp_dict, "class_", make_descriptor(QueryAutoStopWordAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryAutoStopWordAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_QueryAutoStopWordAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryAutoStopWordAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(QueryAutoStopWordAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(QueryAutoStopWordAnalyzer).tp_dict, "defaultMaxDocFreqPercent", make_descriptor(QueryAutoStopWordAnalyzer::defaultMaxDocFreqPercent));
          }

          static PyObject *t_QueryAutoStopWordAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryAutoStopWordAnalyzer::initializeClass, 1)))
              return NULL;
            return t_QueryAutoStopWordAnalyzer::wrap_Object(QueryAutoStopWordAnalyzer(((t_QueryAutoStopWordAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_QueryAutoStopWordAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryAutoStopWordAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryAutoStopWordAnalyzer_init_(t_QueryAutoStopWordAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                QueryAutoStopWordAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = QueryAutoStopWordAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                jfloat a2;
                QueryAutoStopWordAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kkF", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = QueryAutoStopWordAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                jint a2;
                QueryAutoStopWordAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kkI", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = QueryAutoStopWordAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                ::java::util::Collection a2((jobject) NULL);
                PyTypeObject **p2;
                jint a3;
                QueryAutoStopWordAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kkKI", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Collection::parameters_, &a3))
                {
                  INT_CALL(object = QueryAutoStopWordAnalyzer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                ::java::util::Collection a2((jobject) NULL);
                PyTypeObject **p2;
                jfloat a3;
                QueryAutoStopWordAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kkKF", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Collection::parameters_, &a3))
                {
                  INT_CALL(object = QueryAutoStopWordAnalyzer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_QueryAutoStopWordAnalyzer_getStopWords(t_QueryAutoStopWordAnalyzer *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                JArray< ::org::apache::lucene::index::Term > result((jobject) NULL);
                OBJ_CALL(result = self->object.getStopWords());
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_Term::wrap_jobject);
              }
              break;
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.getStopWords(a0));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getStopWords", args);
            return NULL;
          }

          static PyObject *t_QueryAutoStopWordAnalyzer_get__stopWords(t_QueryAutoStopWordAnalyzer *self, void *data)
          {
            JArray< ::org::apache::lucene::index::Term > value((jobject) NULL);
            OBJ_CALL(value = self->object.getStopWords());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_Term::wrap_jobject);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ca/CatalanAnalyzer.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ca {

          ::java::lang::Class *CatalanAnalyzer::class$ = NULL;
          jmethodID *CatalanAnalyzer::mids$ = NULL;
          bool CatalanAnalyzer::live$ = false;
          ::java::lang::String *CatalanAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass CatalanAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ca/CatalanAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_3ea629c6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CatalanAnalyzer::CatalanAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          CatalanAnalyzer::CatalanAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          CatalanAnalyzer::CatalanAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          CatalanAnalyzer::CatalanAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          CatalanAnalyzer::CatalanAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_3ea629c6, a0.this$, a1.this$)) {}

          CatalanAnalyzer::CatalanAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet CatalanAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ca {
          static PyObject *t_CatalanAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CatalanAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CatalanAnalyzer_init_(t_CatalanAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CatalanAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_CatalanAnalyzer_get__defaultStopSet(t_CatalanAnalyzer *self, void *data);
          static PyGetSetDef t_CatalanAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_CatalanAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CatalanAnalyzer__methods_[] = {
            DECLARE_METHOD(t_CatalanAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CatalanAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CatalanAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CatalanAnalyzer, t_CatalanAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, CatalanAnalyzer, t_CatalanAnalyzer_init_, 0, 0, t_CatalanAnalyzer__fields_, 0, 0);

          void t_CatalanAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(CatalanAnalyzer), module, "CatalanAnalyzer", 0);
          }

          void t_CatalanAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CatalanAnalyzer).tp_dict, "class_", make_descriptor(CatalanAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CatalanAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_CatalanAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CatalanAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CatalanAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(CatalanAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*CatalanAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_CatalanAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CatalanAnalyzer::initializeClass, 1)))
              return NULL;
            return t_CatalanAnalyzer::wrap_Object(CatalanAnalyzer(((t_CatalanAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_CatalanAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CatalanAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CatalanAnalyzer_init_(t_CatalanAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                CatalanAnalyzer object((jobject) NULL);

                INT_CALL(object = CatalanAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                CatalanAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = CatalanAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                CatalanAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = CatalanAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                CatalanAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = CatalanAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                CatalanAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = CatalanAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                CatalanAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = CatalanAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CatalanAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ca::CatalanAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_CatalanAnalyzer_get__defaultStopSet(t_CatalanAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/codecs/PostingsWriterBase.h"
#include "org/apache/lucene/codecs/TermsConsumer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace idversion {

          ::java::lang::Class *VersionBlockTreeTermsWriter::class$ = NULL;
          jmethodID *VersionBlockTreeTermsWriter::mids$ = NULL;
          bool VersionBlockTreeTermsWriter::live$ = false;
          jint VersionBlockTreeTermsWriter::DEFAULT_MAX_BLOCK_SIZE = (jint) 0;
          jint VersionBlockTreeTermsWriter::DEFAULT_MIN_BLOCK_SIZE = (jint) 0;
          jint VersionBlockTreeTermsWriter::VERSION_CURRENT = (jint) 0;
          jint VersionBlockTreeTermsWriter::VERSION_START = (jint) 0;

          jclass VersionBlockTreeTermsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_3f2db6e1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentWriteState;Lorg/apache/lucene/codecs/PostingsWriterBase;II)V");
              mids$[mid_addField_eb6fab90] = env->getMethodID(cls, "addField", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/codecs/TermsConsumer;");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_BLOCK_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_BLOCK_SIZE");
              DEFAULT_MIN_BLOCK_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_BLOCK_SIZE");
              VERSION_CURRENT = env->getStaticIntField(cls, "VERSION_CURRENT");
              VERSION_START = env->getStaticIntField(cls, "VERSION_START");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          VersionBlockTreeTermsWriter::VersionBlockTreeTermsWriter(const ::org::apache::lucene::index::SegmentWriteState & a0, const ::org::apache::lucene::codecs::PostingsWriterBase & a1, jint a2, jint a3) : ::org::apache::lucene::codecs::FieldsConsumer(env->newObject(initializeClass, &mids$, mid_init$_3f2db6e1, a0.this$, a1.this$, a2, a3)) {}

          ::org::apache::lucene::codecs::TermsConsumer VersionBlockTreeTermsWriter::addField(const ::org::apache::lucene::index::FieldInfo & a0) const
          {
            return ::org::apache::lucene::codecs::TermsConsumer(env->callObjectMethod(this$, mids$[mid_addField_eb6fab90], a0.this$));
          }

          void VersionBlockTreeTermsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace idversion {
          static PyObject *t_VersionBlockTreeTermsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_VersionBlockTreeTermsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_VersionBlockTreeTermsWriter_init_(t_VersionBlockTreeTermsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_VersionBlockTreeTermsWriter_addField(t_VersionBlockTreeTermsWriter *self, PyObject *args);
          static PyObject *t_VersionBlockTreeTermsWriter_close(t_VersionBlockTreeTermsWriter *self, PyObject *args);

          static PyMethodDef t_VersionBlockTreeTermsWriter__methods_[] = {
            DECLARE_METHOD(t_VersionBlockTreeTermsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_VersionBlockTreeTermsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_VersionBlockTreeTermsWriter, addField, METH_VARARGS),
            DECLARE_METHOD(t_VersionBlockTreeTermsWriter, close, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(VersionBlockTreeTermsWriter, t_VersionBlockTreeTermsWriter, ::org::apache::lucene::codecs::FieldsConsumer, VersionBlockTreeTermsWriter, t_VersionBlockTreeTermsWriter_init_, 0, 0, 0, 0, 0);

          void t_VersionBlockTreeTermsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(VersionBlockTreeTermsWriter), module, "VersionBlockTreeTermsWriter", 0);
          }

          void t_VersionBlockTreeTermsWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(VersionBlockTreeTermsWriter).tp_dict, "class_", make_descriptor(VersionBlockTreeTermsWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(VersionBlockTreeTermsWriter).tp_dict, "wrapfn_", make_descriptor(t_VersionBlockTreeTermsWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(VersionBlockTreeTermsWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(VersionBlockTreeTermsWriter::initializeClass);
            PyDict_SetItemString(PY_TYPE(VersionBlockTreeTermsWriter).tp_dict, "DEFAULT_MAX_BLOCK_SIZE", make_descriptor(VersionBlockTreeTermsWriter::DEFAULT_MAX_BLOCK_SIZE));
            PyDict_SetItemString(PY_TYPE(VersionBlockTreeTermsWriter).tp_dict, "DEFAULT_MIN_BLOCK_SIZE", make_descriptor(VersionBlockTreeTermsWriter::DEFAULT_MIN_BLOCK_SIZE));
            PyDict_SetItemString(PY_TYPE(VersionBlockTreeTermsWriter).tp_dict, "VERSION_CURRENT", make_descriptor(VersionBlockTreeTermsWriter::VERSION_CURRENT));
            PyDict_SetItemString(PY_TYPE(VersionBlockTreeTermsWriter).tp_dict, "VERSION_START", make_descriptor(VersionBlockTreeTermsWriter::VERSION_START));
          }

          static PyObject *t_VersionBlockTreeTermsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, VersionBlockTreeTermsWriter::initializeClass, 1)))
              return NULL;
            return t_VersionBlockTreeTermsWriter::wrap_Object(VersionBlockTreeTermsWriter(((t_VersionBlockTreeTermsWriter *) arg)->object.this$));
          }
          static PyObject *t_VersionBlockTreeTermsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, VersionBlockTreeTermsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_VersionBlockTreeTermsWriter_init_(t_VersionBlockTreeTermsWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsWriterBase a1((jobject) NULL);
            jint a2;
            jint a3;
            VersionBlockTreeTermsWriter object((jobject) NULL);

            if (!parseArgs(args, "kkII", ::org::apache::lucene::index::SegmentWriteState::initializeClass, ::org::apache::lucene::codecs::PostingsWriterBase::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = VersionBlockTreeTermsWriter(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_VersionBlockTreeTermsWriter_addField(t_VersionBlockTreeTermsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::codecs::TermsConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.addField(a0));
              return ::org::apache::lucene::codecs::t_TermsConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(VersionBlockTreeTermsWriter), (PyObject *) self, "addField", args, 2);
          }

          static PyObject *t_VersionBlockTreeTermsWriter_close(t_VersionBlockTreeTermsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(VersionBlockTreeTermsWriter), (PyObject *) self, "close", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/GroupQueryNode.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *GroupQueryNode::class$ = NULL;
              jmethodID *GroupQueryNode::mids$ = NULL;
              bool GroupQueryNode::live$ = false;

              jclass GroupQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/GroupQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_cc04aeef] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getChild_b387c5e6] = env->getMethodID(cls, "getChild", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChild_cc04aeef] = env->getMethodID(cls, "setChild", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              GroupQueryNode::GroupQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_cc04aeef, a0.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode GroupQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode GroupQueryNode::getChild() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_getChild_b387c5e6]));
              }

              void GroupQueryNode::setChild(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setChild_cc04aeef], a0.this$);
              }

              ::java::lang::CharSequence GroupQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String GroupQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_GroupQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_GroupQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_GroupQueryNode_init_(t_GroupQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_GroupQueryNode_cloneTree(t_GroupQueryNode *self, PyObject *args);
              static PyObject *t_GroupQueryNode_getChild(t_GroupQueryNode *self);
              static PyObject *t_GroupQueryNode_setChild(t_GroupQueryNode *self, PyObject *arg);
              static PyObject *t_GroupQueryNode_toQueryString(t_GroupQueryNode *self, PyObject *args);
              static PyObject *t_GroupQueryNode_toString(t_GroupQueryNode *self, PyObject *args);
              static PyObject *t_GroupQueryNode_get__child(t_GroupQueryNode *self, void *data);
              static int t_GroupQueryNode_set__child(t_GroupQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_GroupQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_GroupQueryNode, child),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_GroupQueryNode__methods_[] = {
                DECLARE_METHOD(t_GroupQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_GroupQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_GroupQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_GroupQueryNode, getChild, METH_NOARGS),
                DECLARE_METHOD(t_GroupQueryNode, setChild, METH_O),
                DECLARE_METHOD(t_GroupQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_GroupQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(GroupQueryNode, t_GroupQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, GroupQueryNode, t_GroupQueryNode_init_, 0, 0, t_GroupQueryNode__fields_, 0, 0);

              void t_GroupQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(GroupQueryNode), module, "GroupQueryNode", 0);
              }

              void t_GroupQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(GroupQueryNode).tp_dict, "class_", make_descriptor(GroupQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(GroupQueryNode).tp_dict, "wrapfn_", make_descriptor(t_GroupQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(GroupQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_GroupQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, GroupQueryNode::initializeClass, 1)))
                  return NULL;
                return t_GroupQueryNode::wrap_Object(GroupQueryNode(((t_GroupQueryNode *) arg)->object.this$));
              }
              static PyObject *t_GroupQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, GroupQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_GroupQueryNode_init_(t_GroupQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                GroupQueryNode object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  INT_CALL(object = GroupQueryNode(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_GroupQueryNode_cloneTree(t_GroupQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(GroupQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_GroupQueryNode_getChild(t_GroupQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_GroupQueryNode_setChild(t_GroupQueryNode *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setChild(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setChild", arg);
                return NULL;
              }

              static PyObject *t_GroupQueryNode_toQueryString(t_GroupQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(GroupQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_GroupQueryNode_toString(t_GroupQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(GroupQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_GroupQueryNode_get__child(t_GroupQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(value);
              }
              static int t_GroupQueryNode_set__child(t_GroupQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &value))
                  {
                    INT_CALL(self->object.setChild(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "child", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/in/IndicNormalizationFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {

          ::java::lang::Class *IndicNormalizationFilter::class$ = NULL;
          jmethodID *IndicNormalizationFilter::mids$ = NULL;
          bool IndicNormalizationFilter::live$ = false;

          jclass IndicNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/in/IndicNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndicNormalizationFilter::IndicNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean IndicNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {
          static PyObject *t_IndicNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndicNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndicNormalizationFilter_init_(t_IndicNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndicNormalizationFilter_incrementToken(t_IndicNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_IndicNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_IndicNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IndicNormalizationFilter, t_IndicNormalizationFilter, ::org::apache::lucene::analysis::TokenFilter, IndicNormalizationFilter, t_IndicNormalizationFilter_init_, 0, 0, 0, 0, 0);

          void t_IndicNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(IndicNormalizationFilter), module, "IndicNormalizationFilter", 0);
          }

          void t_IndicNormalizationFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IndicNormalizationFilter).tp_dict, "class_", make_descriptor(IndicNormalizationFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IndicNormalizationFilter).tp_dict, "wrapfn_", make_descriptor(t_IndicNormalizationFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IndicNormalizationFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndicNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndicNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_IndicNormalizationFilter::wrap_Object(IndicNormalizationFilter(((t_IndicNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_IndicNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndicNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndicNormalizationFilter_init_(t_IndicNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            IndicNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = IndicNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IndicNormalizationFilter_incrementToken(t_IndicNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(IndicNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/Fragmenter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *Fragmenter::class$ = NULL;
          jmethodID *Fragmenter::mids$ = NULL;
          bool Fragmenter::live$ = false;

          jclass Fragmenter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/Fragmenter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_isNewFragment_54c6a16a] = env->getMethodID(cls, "isNewFragment", "()Z");
              mids$[mid_start_7d0c5392] = env->getMethodID(cls, "start", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean Fragmenter::isNewFragment() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isNewFragment_54c6a16a]);
          }

          void Fragmenter::start(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_start_7d0c5392], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_Fragmenter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Fragmenter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Fragmenter_isNewFragment(t_Fragmenter *self);
          static PyObject *t_Fragmenter_start(t_Fragmenter *self, PyObject *args);
          static PyObject *t_Fragmenter_get__newFragment(t_Fragmenter *self, void *data);
          static PyGetSetDef t_Fragmenter__fields_[] = {
            DECLARE_GET_FIELD(t_Fragmenter, newFragment),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Fragmenter__methods_[] = {
            DECLARE_METHOD(t_Fragmenter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Fragmenter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Fragmenter, isNewFragment, METH_NOARGS),
            DECLARE_METHOD(t_Fragmenter, start, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Fragmenter, t_Fragmenter, ::java::lang::Object, Fragmenter, abstract_init, 0, 0, t_Fragmenter__fields_, 0, 0);

          void t_Fragmenter::install(PyObject *module)
          {
            installType(&PY_TYPE(Fragmenter), module, "Fragmenter", 0);
          }

          void t_Fragmenter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Fragmenter).tp_dict, "class_", make_descriptor(Fragmenter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Fragmenter).tp_dict, "wrapfn_", make_descriptor(t_Fragmenter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Fragmenter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Fragmenter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Fragmenter::initializeClass, 1)))
              return NULL;
            return t_Fragmenter::wrap_Object(Fragmenter(((t_Fragmenter *) arg)->object.this$));
          }
          static PyObject *t_Fragmenter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Fragmenter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Fragmenter_isNewFragment(t_Fragmenter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isNewFragment());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_Fragmenter_start(t_Fragmenter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.start(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "start", args);
            return NULL;
          }

          static PyObject *t_Fragmenter_get__newFragment(t_Fragmenter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isNewFragment());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/SlowFuzzyQuery.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *SlowFuzzyQuery::class$ = NULL;
          jmethodID *SlowFuzzyQuery::mids$ = NULL;
          bool SlowFuzzyQuery::live$ = false;
          jint SlowFuzzyQuery::defaultMaxExpansions = (jint) 0;
          jfloat SlowFuzzyQuery::defaultMinSimilarity = (jfloat) 0;
          jint SlowFuzzyQuery::defaultPrefixLength = (jint) 0;

          jclass SlowFuzzyQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/SlowFuzzyQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
              mids$[mid_init$_286d05ee] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;F)V");
              mids$[mid_init$_6199618c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;FI)V");
              mids$[mid_init$_b597dde2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;FII)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getMinSimilarity_54c6a176] = env->getMethodID(cls, "getMinSimilarity", "()F");
              mids$[mid_getPrefixLength_54c6a179] = env->getMethodID(cls, "getPrefixLength", "()I");
              mids$[mid_getTerm_0f71f314] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/index/Term;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_getTermsEnum_67b5a29a] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              defaultMaxExpansions = env->getStaticIntField(cls, "defaultMaxExpansions");
              defaultMinSimilarity = env->getStaticFloatField(cls, "defaultMinSimilarity");
              defaultPrefixLength = env->getStaticIntField(cls, "defaultPrefixLength");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SlowFuzzyQuery::SlowFuzzyQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

          SlowFuzzyQuery::SlowFuzzyQuery(const ::org::apache::lucene::index::Term & a0, jfloat a1) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_286d05ee, a0.this$, a1)) {}

          SlowFuzzyQuery::SlowFuzzyQuery(const ::org::apache::lucene::index::Term & a0, jfloat a1, jint a2) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_6199618c, a0.this$, a1, a2)) {}

          SlowFuzzyQuery::SlowFuzzyQuery(const ::org::apache::lucene::index::Term & a0, jfloat a1, jint a2, jint a3) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_b597dde2, a0.this$, a1, a2, a3)) {}

          jboolean SlowFuzzyQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jfloat SlowFuzzyQuery::getMinSimilarity() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMinSimilarity_54c6a176]);
          }

          jint SlowFuzzyQuery::getPrefixLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getPrefixLength_54c6a179]);
          }

          ::org::apache::lucene::index::Term SlowFuzzyQuery::getTerm() const
          {
            return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getTerm_0f71f314]));
          }

          jint SlowFuzzyQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String SlowFuzzyQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_SlowFuzzyQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SlowFuzzyQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SlowFuzzyQuery_init_(t_SlowFuzzyQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SlowFuzzyQuery_equals(t_SlowFuzzyQuery *self, PyObject *args);
          static PyObject *t_SlowFuzzyQuery_getMinSimilarity(t_SlowFuzzyQuery *self);
          static PyObject *t_SlowFuzzyQuery_getPrefixLength(t_SlowFuzzyQuery *self);
          static PyObject *t_SlowFuzzyQuery_getTerm(t_SlowFuzzyQuery *self);
          static PyObject *t_SlowFuzzyQuery_hashCode(t_SlowFuzzyQuery *self, PyObject *args);
          static PyObject *t_SlowFuzzyQuery_toString(t_SlowFuzzyQuery *self, PyObject *args);
          static PyObject *t_SlowFuzzyQuery_get__minSimilarity(t_SlowFuzzyQuery *self, void *data);
          static PyObject *t_SlowFuzzyQuery_get__prefixLength(t_SlowFuzzyQuery *self, void *data);
          static PyObject *t_SlowFuzzyQuery_get__term(t_SlowFuzzyQuery *self, void *data);
          static PyGetSetDef t_SlowFuzzyQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SlowFuzzyQuery, minSimilarity),
            DECLARE_GET_FIELD(t_SlowFuzzyQuery, prefixLength),
            DECLARE_GET_FIELD(t_SlowFuzzyQuery, term),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SlowFuzzyQuery__methods_[] = {
            DECLARE_METHOD(t_SlowFuzzyQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowFuzzyQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowFuzzyQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SlowFuzzyQuery, getMinSimilarity, METH_NOARGS),
            DECLARE_METHOD(t_SlowFuzzyQuery, getPrefixLength, METH_NOARGS),
            DECLARE_METHOD(t_SlowFuzzyQuery, getTerm, METH_NOARGS),
            DECLARE_METHOD(t_SlowFuzzyQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SlowFuzzyQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SlowFuzzyQuery, t_SlowFuzzyQuery, ::org::apache::lucene::search::MultiTermQuery, SlowFuzzyQuery, t_SlowFuzzyQuery_init_, 0, 0, t_SlowFuzzyQuery__fields_, 0, 0);

          void t_SlowFuzzyQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SlowFuzzyQuery), module, "SlowFuzzyQuery", 0);
          }

          void t_SlowFuzzyQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SlowFuzzyQuery).tp_dict, "class_", make_descriptor(SlowFuzzyQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SlowFuzzyQuery).tp_dict, "wrapfn_", make_descriptor(t_SlowFuzzyQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SlowFuzzyQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SlowFuzzyQuery::initializeClass);
            PyDict_SetItemString(PY_TYPE(SlowFuzzyQuery).tp_dict, "defaultMaxExpansions", make_descriptor(SlowFuzzyQuery::defaultMaxExpansions));
            PyDict_SetItemString(PY_TYPE(SlowFuzzyQuery).tp_dict, "defaultMinSimilarity", make_descriptor(SlowFuzzyQuery::defaultMinSimilarity));
            PyDict_SetItemString(PY_TYPE(SlowFuzzyQuery).tp_dict, "defaultPrefixLength", make_descriptor(SlowFuzzyQuery::defaultPrefixLength));
          }

          static PyObject *t_SlowFuzzyQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SlowFuzzyQuery::initializeClass, 1)))
              return NULL;
            return t_SlowFuzzyQuery::wrap_Object(SlowFuzzyQuery(((t_SlowFuzzyQuery *) arg)->object.this$));
          }
          static PyObject *t_SlowFuzzyQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SlowFuzzyQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SlowFuzzyQuery_init_(t_SlowFuzzyQuery *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                SlowFuzzyQuery object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
                {
                  INT_CALL(object = SlowFuzzyQuery(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                jfloat a1;
                SlowFuzzyQuery object((jobject) NULL);

                if (!parseArgs(args, "kF", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SlowFuzzyQuery(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                jfloat a1;
                jint a2;
                SlowFuzzyQuery object((jobject) NULL);

                if (!parseArgs(args, "kFI", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SlowFuzzyQuery(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                jfloat a1;
                jint a2;
                jint a3;
                SlowFuzzyQuery object((jobject) NULL);

                if (!parseArgs(args, "kFII", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = SlowFuzzyQuery(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SlowFuzzyQuery_equals(t_SlowFuzzyQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SlowFuzzyQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SlowFuzzyQuery_getMinSimilarity(t_SlowFuzzyQuery *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMinSimilarity());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_SlowFuzzyQuery_getPrefixLength(t_SlowFuzzyQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPrefixLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_SlowFuzzyQuery_getTerm(t_SlowFuzzyQuery *self)
          {
            ::org::apache::lucene::index::Term result((jobject) NULL);
            OBJ_CALL(result = self->object.getTerm());
            return ::org::apache::lucene::index::t_Term::wrap_Object(result);
          }

          static PyObject *t_SlowFuzzyQuery_hashCode(t_SlowFuzzyQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SlowFuzzyQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SlowFuzzyQuery_toString(t_SlowFuzzyQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SlowFuzzyQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SlowFuzzyQuery_get__minSimilarity(t_SlowFuzzyQuery *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMinSimilarity());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_SlowFuzzyQuery_get__prefixLength(t_SlowFuzzyQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPrefixLength());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_SlowFuzzyQuery_get__term(t_SlowFuzzyQuery *self, void *data)
          {
            ::org::apache::lucene::index::Term value((jobject) NULL);
            OBJ_CALL(value = self->object.getTerm());
            return ::org::apache::lucene::index::t_Term::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RefCount.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RefCount::class$ = NULL;
        jmethodID *RefCount::mids$ = NULL;
        bool RefCount::live$ = false;

        jclass RefCount::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RefCount");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_290588ee] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;)V");
            mids$[mid_decRef_54c6a166] = env->getMethodID(cls, "decRef", "()V");
            mids$[mid_get_846352c3] = env->getMethodID(cls, "get", "()Ljava/lang/Object;");
            mids$[mid_getRefCount_54c6a179] = env->getMethodID(cls, "getRefCount", "()I");
            mids$[mid_incRef_54c6a166] = env->getMethodID(cls, "incRef", "()V");
            mids$[mid_release_54c6a166] = env->getMethodID(cls, "release", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RefCount::RefCount(const ::java::lang::Object & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_290588ee, a0.this$)) {}

        void RefCount::decRef() const
        {
          env->callVoidMethod(this$, mids$[mid_decRef_54c6a166]);
        }

        ::java::lang::Object RefCount::get() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_846352c3]));
        }

        jint RefCount::getRefCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getRefCount_54c6a179]);
        }

        void RefCount::incRef() const
        {
          env->callVoidMethod(this$, mids$[mid_incRef_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RefCount_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RefCount_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RefCount_of_(t_RefCount *self, PyObject *args);
        static int t_RefCount_init_(t_RefCount *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RefCount_decRef(t_RefCount *self);
        static PyObject *t_RefCount_get(t_RefCount *self);
        static PyObject *t_RefCount_getRefCount(t_RefCount *self);
        static PyObject *t_RefCount_incRef(t_RefCount *self);
        static PyObject *t_RefCount_get__refCount(t_RefCount *self, void *data);
        static PyObject *t_RefCount_get__parameters_(t_RefCount *self, void *data);
        static PyGetSetDef t_RefCount__fields_[] = {
          DECLARE_GET_FIELD(t_RefCount, refCount),
          DECLARE_GET_FIELD(t_RefCount, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RefCount__methods_[] = {
          DECLARE_METHOD(t_RefCount, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RefCount, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RefCount, of_, METH_VARARGS),
          DECLARE_METHOD(t_RefCount, decRef, METH_NOARGS),
          DECLARE_METHOD(t_RefCount, get, METH_NOARGS),
          DECLARE_METHOD(t_RefCount, getRefCount, METH_NOARGS),
          DECLARE_METHOD(t_RefCount, incRef, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RefCount, t_RefCount, ::java::lang::Object, RefCount, t_RefCount_init_, 0, 0, t_RefCount__fields_, 0, 0);
        PyObject *t_RefCount::wrap_Object(const RefCount& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RefCount::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RefCount *self = (t_RefCount *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_RefCount::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RefCount::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RefCount *self = (t_RefCount *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_RefCount::install(PyObject *module)
        {
          installType(&PY_TYPE(RefCount), module, "RefCount", 0);
        }

        void t_RefCount::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RefCount).tp_dict, "class_", make_descriptor(RefCount::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RefCount).tp_dict, "wrapfn_", make_descriptor(t_RefCount::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RefCount).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RefCount_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RefCount::initializeClass, 1)))
            return NULL;
          return t_RefCount::wrap_Object(RefCount(((t_RefCount *) arg)->object.this$));
        }
        static PyObject *t_RefCount_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RefCount::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RefCount_of_(t_RefCount *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_RefCount_init_(t_RefCount *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::Object a0((jobject) NULL);
          RefCount object((jobject) NULL);

          if (!parseArgs(args, "o", &a0))
          {
            INT_CALL(object = RefCount(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RefCount_decRef(t_RefCount *self)
        {
          OBJ_CALL(self->object.decRef());
          Py_RETURN_NONE;
        }

        static PyObject *t_RefCount_get(t_RefCount *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.get());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_RefCount_getRefCount(t_RefCount *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getRefCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_RefCount_incRef(t_RefCount *self)
        {
          OBJ_CALL(self->object.incRef());
          Py_RETURN_NONE;
        }
        static PyObject *t_RefCount_get__parameters_(t_RefCount *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_RefCount_get__refCount(t_RefCount *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getRefCount());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40TermVectorsReader::class$ = NULL;
          jmethodID *Lucene40TermVectorsReader::mids$ = NULL;
          bool Lucene40TermVectorsReader::live$ = false;

          jclass Lucene40TermVectorsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_3589180f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)V");
              mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_clone_475a2624] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/TermVectorsReader;");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_get_ef1c9c73] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/index/Fields;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40TermVectorsReader::Lucene40TermVectorsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) : ::org::apache::lucene::codecs::TermVectorsReader(env->newObject(initializeClass, &mids$, mid_init$_3589180f, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          void Lucene40TermVectorsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
          }

          ::org::apache::lucene::codecs::TermVectorsReader Lucene40TermVectorsReader::clone() const
          {
            return ::org::apache::lucene::codecs::TermVectorsReader(env->callObjectMethod(this$, mids$[mid_clone_475a2624]));
          }

          void Lucene40TermVectorsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          ::org::apache::lucene::index::Fields Lucene40TermVectorsReader::get(jint a0) const
          {
            return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_get_ef1c9c73], a0));
          }

          jlong Lucene40TermVectorsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40TermVectorsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40TermVectorsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40TermVectorsReader_init_(t_Lucene40TermVectorsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40TermVectorsReader_checkIntegrity(t_Lucene40TermVectorsReader *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsReader_clone(t_Lucene40TermVectorsReader *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsReader_close(t_Lucene40TermVectorsReader *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsReader_get(t_Lucene40TermVectorsReader *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsReader_ramBytesUsed(t_Lucene40TermVectorsReader *self, PyObject *args);

          static PyMethodDef t_Lucene40TermVectorsReader__methods_[] = {
            DECLARE_METHOD(t_Lucene40TermVectorsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40TermVectorsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40TermVectorsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsReader, clone, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsReader, get, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsReader, ramBytesUsed, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40TermVectorsReader, t_Lucene40TermVectorsReader, ::org::apache::lucene::codecs::TermVectorsReader, Lucene40TermVectorsReader, t_Lucene40TermVectorsReader_init_, 0, 0, 0, 0, 0);

          void t_Lucene40TermVectorsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40TermVectorsReader), module, "Lucene40TermVectorsReader", 0);
          }

          void t_Lucene40TermVectorsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsReader).tp_dict, "class_", make_descriptor(Lucene40TermVectorsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsReader).tp_dict, "wrapfn_", make_descriptor(t_Lucene40TermVectorsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40TermVectorsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40TermVectorsReader::initializeClass, 1)))
              return NULL;
            return t_Lucene40TermVectorsReader::wrap_Object(Lucene40TermVectorsReader(((t_Lucene40TermVectorsReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene40TermVectorsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40TermVectorsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40TermVectorsReader_init_(t_Lucene40TermVectorsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            Lucene40TermVectorsReader object((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = Lucene40TermVectorsReader(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene40TermVectorsReader_checkIntegrity(t_Lucene40TermVectorsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsReader_clone(t_Lucene40TermVectorsReader *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsReader), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsReader_close(t_Lucene40TermVectorsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsReader_get(t_Lucene40TermVectorsReader *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::index::Fields result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsReader), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsReader_ramBytesUsed(t_Lucene40TermVectorsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ru/RussianLetterTokenizerFactory.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/analysis/ru/RussianLetterTokenizer.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {

          ::java::lang::Class *RussianLetterTokenizerFactory::class$ = NULL;
          jmethodID *RussianLetterTokenizerFactory::mids$ = NULL;
          bool RussianLetterTokenizerFactory::live$ = false;

          jclass RussianLetterTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ru/RussianLetterTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ef75db74] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/ru/RussianLetterTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RussianLetterTokenizerFactory::RussianLetterTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::ru::RussianLetterTokenizer RussianLetterTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::ru::RussianLetterTokenizer(env->callObjectMethod(this$, mids$[mid_create_ef75db74], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {
          static PyObject *t_RussianLetterTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RussianLetterTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RussianLetterTokenizerFactory_init_(t_RussianLetterTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RussianLetterTokenizerFactory_create(t_RussianLetterTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_RussianLetterTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_RussianLetterTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLetterTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLetterTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RussianLetterTokenizerFactory, t_RussianLetterTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, RussianLetterTokenizerFactory, t_RussianLetterTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_RussianLetterTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(RussianLetterTokenizerFactory), module, "RussianLetterTokenizerFactory", 0);
          }

          void t_RussianLetterTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RussianLetterTokenizerFactory).tp_dict, "class_", make_descriptor(RussianLetterTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RussianLetterTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_RussianLetterTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RussianLetterTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RussianLetterTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RussianLetterTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_RussianLetterTokenizerFactory::wrap_Object(RussianLetterTokenizerFactory(((t_RussianLetterTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_RussianLetterTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RussianLetterTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RussianLetterTokenizerFactory_init_(t_RussianLetterTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            RussianLetterTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = RussianLetterTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RussianLetterTokenizerFactory_create(t_RussianLetterTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::ru::RussianLetterTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::ru::t_RussianLetterTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(RussianLetterTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Sorter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Sorter::class$ = NULL;
        jmethodID *Sorter::mids$ = NULL;
        bool Sorter::live$ = false;

        jclass Sorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Sorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_sort_d8d154a6] = env->getMethodID(cls, "sort", "(II)V");
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_swap_d8d154a6] = env->getMethodID(cls, "swap", "(II)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void Sorter::sort(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_sort_d8d154a6], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Sorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Sorter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Sorter_sort(t_Sorter *self, PyObject *args);

        static PyMethodDef t_Sorter__methods_[] = {
          DECLARE_METHOD(t_Sorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Sorter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Sorter, sort, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Sorter, t_Sorter, ::java::lang::Object, Sorter, abstract_init, 0, 0, 0, 0, 0);

        void t_Sorter::install(PyObject *module)
        {
          installType(&PY_TYPE(Sorter), module, "Sorter", 0);
        }

        void t_Sorter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Sorter).tp_dict, "class_", make_descriptor(Sorter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Sorter).tp_dict, "wrapfn_", make_descriptor(t_Sorter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Sorter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Sorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Sorter::initializeClass, 1)))
            return NULL;
          return t_Sorter::wrap_Object(Sorter(((t_Sorter *) arg)->object.this$));
        }
        static PyObject *t_Sorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Sorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Sorter_sort(t_Sorter *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.sort(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "sort", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/util/QueryNodeOperation.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace util {

              ::java::lang::Class *QueryNodeOperation::class$ = NULL;
              jmethodID *QueryNodeOperation::mids$ = NULL;
              bool QueryNodeOperation::live$ = false;

              jclass QueryNodeOperation::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/util/QueryNodeOperation");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_logicalAnd_f8fdf1b4] = env->getStaticMethodID(cls, "logicalAnd", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeOperation::logicalAnd(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0, const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a1)
              {
                jclass cls = env->getClass(initializeClass);
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callStaticObjectMethod(cls, mids$[mid_logicalAnd_f8fdf1b4], a0.this$, a1.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace util {
              static PyObject *t_QueryNodeOperation_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeOperation_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeOperation_logicalAnd(PyTypeObject *type, PyObject *args);

              static PyMethodDef t_QueryNodeOperation__methods_[] = {
                DECLARE_METHOD(t_QueryNodeOperation, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeOperation, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeOperation, logicalAnd, METH_VARARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryNodeOperation, t_QueryNodeOperation, ::java::lang::Object, QueryNodeOperation, abstract_init, 0, 0, 0, 0, 0);

              void t_QueryNodeOperation::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryNodeOperation), module, "QueryNodeOperation", 0);
              }

              void t_QueryNodeOperation::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryNodeOperation).tp_dict, "class_", make_descriptor(QueryNodeOperation::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryNodeOperation).tp_dict, "wrapfn_", make_descriptor(t_QueryNodeOperation::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryNodeOperation).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryNodeOperation_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryNodeOperation::initializeClass, 1)))
                  return NULL;
                return t_QueryNodeOperation::wrap_Object(QueryNodeOperation(((t_QueryNodeOperation *) arg)->object.this$));
              }
              static PyObject *t_QueryNodeOperation_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryNodeOperation::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_QueryNodeOperation_logicalAnd(PyTypeObject *type, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a1((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::util::QueryNodeOperation::logicalAnd(a0, a1));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError(type, "logicalAnd", args);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene410/Lucene410DocValuesFormat.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene410 {

          ::java::lang::Class *Lucene410DocValuesFormat::class$ = NULL;
          jmethodID *Lucene410DocValuesFormat::mids$ = NULL;
          bool Lucene410DocValuesFormat::live$ = false;

          jclass Lucene410DocValuesFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene410/Lucene410DocValuesFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsConsumer_025deb44] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_fieldsProducer_9b0d4e4a] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene410DocValuesFormat::Lucene410DocValuesFormat() : ::org::apache::lucene::codecs::DocValuesFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer Lucene410DocValuesFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_025deb44], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer Lucene410DocValuesFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_9b0d4e4a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene410 {
          static PyObject *t_Lucene410DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene410DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene410DocValuesFormat_init_(t_Lucene410DocValuesFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene410DocValuesFormat_fieldsConsumer(t_Lucene410DocValuesFormat *self, PyObject *args);
          static PyObject *t_Lucene410DocValuesFormat_fieldsProducer(t_Lucene410DocValuesFormat *self, PyObject *args);

          static PyMethodDef t_Lucene410DocValuesFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene410DocValuesFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene410DocValuesFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene410DocValuesFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene410DocValuesFormat, fieldsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene410DocValuesFormat, t_Lucene410DocValuesFormat, ::org::apache::lucene::codecs::DocValuesFormat, Lucene410DocValuesFormat, t_Lucene410DocValuesFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene410DocValuesFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene410DocValuesFormat), module, "Lucene410DocValuesFormat", 0);
          }

          void t_Lucene410DocValuesFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene410DocValuesFormat).tp_dict, "class_", make_descriptor(Lucene410DocValuesFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene410DocValuesFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene410DocValuesFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene410DocValuesFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene410DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene410DocValuesFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene410DocValuesFormat::wrap_Object(Lucene410DocValuesFormat(((t_Lucene410DocValuesFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene410DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene410DocValuesFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene410DocValuesFormat_init_(t_Lucene410DocValuesFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene410DocValuesFormat object((jobject) NULL);

            INT_CALL(object = Lucene410DocValuesFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene410DocValuesFormat_fieldsConsumer(t_Lucene410DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene410DocValuesFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_Lucene410DocValuesFormat_fieldsProducer(t_Lucene410DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene410DocValuesFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergePolicy$DocMap.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergePolicy$DocMap::class$ = NULL;
        jmethodID *MergePolicy$DocMap::mids$ = NULL;
        bool MergePolicy$DocMap::live$ = false;

        jclass MergePolicy$DocMap::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergePolicy$DocMap");

            mids$ = new jmethodID[max_mid];
            mids$[mid_map_39c7bd23] = env->getMethodID(cls, "map", "(I)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint MergePolicy$DocMap::map(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_map_39c7bd23], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergePolicy$DocMap_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy$DocMap_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy$DocMap_map(t_MergePolicy$DocMap *self, PyObject *arg);

        static PyMethodDef t_MergePolicy$DocMap__methods_[] = {
          DECLARE_METHOD(t_MergePolicy$DocMap, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$DocMap, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$DocMap, map, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergePolicy$DocMap, t_MergePolicy$DocMap, ::java::lang::Object, MergePolicy$DocMap, abstract_init, 0, 0, 0, 0, 0);

        void t_MergePolicy$DocMap::install(PyObject *module)
        {
          installType(&PY_TYPE(MergePolicy$DocMap), module, "MergePolicy$DocMap", 0);
        }

        void t_MergePolicy$DocMap::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergePolicy$DocMap).tp_dict, "class_", make_descriptor(MergePolicy$DocMap::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergePolicy$DocMap).tp_dict, "wrapfn_", make_descriptor(t_MergePolicy$DocMap::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergePolicy$DocMap).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergePolicy$DocMap_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergePolicy$DocMap::initializeClass, 1)))
            return NULL;
          return t_MergePolicy$DocMap::wrap_Object(MergePolicy$DocMap(((t_MergePolicy$DocMap *) arg)->object.this$));
        }
        static PyObject *t_MergePolicy$DocMap_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergePolicy$DocMap::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MergePolicy$DocMap_map(t_MergePolicy$DocMap *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.map(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "map", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LMDirichletSimilarity.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$CollectionModel.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LMDirichletSimilarity::class$ = NULL;
          jmethodID *LMDirichletSimilarity::mids$ = NULL;
          bool LMDirichletSimilarity::live$ = false;

          jclass LMDirichletSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LMDirichletSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_fb5c3f12] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/LMSimilarity$CollectionModel;)V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_init$_75020b37] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/LMSimilarity$CollectionModel;F)V");
              mids$[mid_getMu_54c6a176] = env->getMethodID(cls, "getMu", "()F");
              mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
              mids$[mid_score_63482206] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_explain_347d95f8] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Explanation;Lorg/apache/lucene/search/similarities/BasicStats;IFF)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LMDirichletSimilarity::LMDirichletSimilarity() : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          LMDirichletSimilarity::LMDirichletSimilarity(const ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel & a0) : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_fb5c3f12, a0.this$)) {}

          LMDirichletSimilarity::LMDirichletSimilarity(jfloat a0) : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          LMDirichletSimilarity::LMDirichletSimilarity(const ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel & a0, jfloat a1) : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_75020b37, a0.this$, a1)) {}

          jfloat LMDirichletSimilarity::getMu() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMu_54c6a176]);
          }

          ::java::lang::String LMDirichletSimilarity::getName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LMDirichletSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMDirichletSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LMDirichletSimilarity_init_(t_LMDirichletSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LMDirichletSimilarity_getMu(t_LMDirichletSimilarity *self);
          static PyObject *t_LMDirichletSimilarity_getName(t_LMDirichletSimilarity *self, PyObject *args);
          static PyObject *t_LMDirichletSimilarity_get__mu(t_LMDirichletSimilarity *self, void *data);
          static PyObject *t_LMDirichletSimilarity_get__name(t_LMDirichletSimilarity *self, void *data);
          static PyGetSetDef t_LMDirichletSimilarity__fields_[] = {
            DECLARE_GET_FIELD(t_LMDirichletSimilarity, mu),
            DECLARE_GET_FIELD(t_LMDirichletSimilarity, name),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LMDirichletSimilarity__methods_[] = {
            DECLARE_METHOD(t_LMDirichletSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMDirichletSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMDirichletSimilarity, getMu, METH_NOARGS),
            DECLARE_METHOD(t_LMDirichletSimilarity, getName, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LMDirichletSimilarity, t_LMDirichletSimilarity, ::org::apache::lucene::search::similarities::LMSimilarity, LMDirichletSimilarity, t_LMDirichletSimilarity_init_, 0, 0, t_LMDirichletSimilarity__fields_, 0, 0);

          void t_LMDirichletSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(LMDirichletSimilarity), module, "LMDirichletSimilarity", 0);
          }

          void t_LMDirichletSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LMDirichletSimilarity).tp_dict, "class_", make_descriptor(LMDirichletSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LMDirichletSimilarity).tp_dict, "wrapfn_", make_descriptor(t_LMDirichletSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LMDirichletSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LMDirichletSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LMDirichletSimilarity::initializeClass, 1)))
              return NULL;
            return t_LMDirichletSimilarity::wrap_Object(LMDirichletSimilarity(((t_LMDirichletSimilarity *) arg)->object.this$));
          }
          static PyObject *t_LMDirichletSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LMDirichletSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LMDirichletSimilarity_init_(t_LMDirichletSimilarity *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                LMDirichletSimilarity object((jobject) NULL);

                INT_CALL(object = LMDirichletSimilarity());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel a0((jobject) NULL);
                LMDirichletSimilarity object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel::initializeClass, &a0))
                {
                  INT_CALL(object = LMDirichletSimilarity(a0));
                  self->object = object;
                  break;
                }
              }
              {
                jfloat a0;
                LMDirichletSimilarity object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = LMDirichletSimilarity(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel a0((jobject) NULL);
                jfloat a1;
                LMDirichletSimilarity object((jobject) NULL);

                if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = LMDirichletSimilarity(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LMDirichletSimilarity_getMu(t_LMDirichletSimilarity *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMu());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_LMDirichletSimilarity_getName(t_LMDirichletSimilarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getName());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LMDirichletSimilarity), (PyObject *) self, "getName", args, 2);
          }

          static PyObject *t_LMDirichletSimilarity_get__mu(t_LMDirichletSimilarity *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMu());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_LMDirichletSimilarity_get__name(t_LMDirichletSimilarity *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/MathUtil.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *MathUtil::class$ = NULL;
        jmethodID *MathUtil::mids$ = NULL;
        bool MathUtil::live$ = false;

        jclass MathUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/MathUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_acosh_5d1c7657] = env->getStaticMethodID(cls, "acosh", "(D)D");
            mids$[mid_asinh_5d1c7657] = env->getStaticMethodID(cls, "asinh", "(D)D");
            mids$[mid_atanh_5d1c7657] = env->getStaticMethodID(cls, "atanh", "(D)D");
            mids$[mid_gcd_a7e12cb8] = env->getStaticMethodID(cls, "gcd", "(JJ)J");
            mids$[mid_log_b1e2866a] = env->getStaticMethodID(cls, "log", "(DD)D");
            mids$[mid_log_25d05c90] = env->getStaticMethodID(cls, "log", "(JI)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jdouble MathUtil::acosh(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_acosh_5d1c7657], a0);
        }

        jdouble MathUtil::asinh(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_asinh_5d1c7657], a0);
        }

        jdouble MathUtil::atanh(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_atanh_5d1c7657], a0);
        }

        jlong MathUtil::gcd(jlong a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_gcd_a7e12cb8], a0, a1);
        }

        jdouble MathUtil::log(jdouble a0, jdouble a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_log_b1e2866a], a0, a1);
        }

        jint MathUtil::log(jlong a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_log_25d05c90], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_MathUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MathUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MathUtil_acosh(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MathUtil_asinh(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MathUtil_atanh(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MathUtil_gcd(PyTypeObject *type, PyObject *args);
        static PyObject *t_MathUtil_log(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_MathUtil__methods_[] = {
          DECLARE_METHOD(t_MathUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MathUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MathUtil, acosh, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MathUtil, asinh, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MathUtil, atanh, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MathUtil, gcd, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MathUtil, log, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MathUtil, t_MathUtil, ::java::lang::Object, MathUtil, abstract_init, 0, 0, 0, 0, 0);

        void t_MathUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(MathUtil), module, "MathUtil", 0);
        }

        void t_MathUtil::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MathUtil).tp_dict, "class_", make_descriptor(MathUtil::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MathUtil).tp_dict, "wrapfn_", make_descriptor(t_MathUtil::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MathUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MathUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MathUtil::initializeClass, 1)))
            return NULL;
          return t_MathUtil::wrap_Object(MathUtil(((t_MathUtil *) arg)->object.this$));
        }
        static PyObject *t_MathUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MathUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MathUtil_acosh(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::MathUtil::acosh(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "acosh", arg);
          return NULL;
        }

        static PyObject *t_MathUtil_asinh(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::MathUtil::asinh(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "asinh", arg);
          return NULL;
        }

        static PyObject *t_MathUtil_atanh(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::MathUtil::atanh(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "atanh", arg);
          return NULL;
        }

        static PyObject *t_MathUtil_gcd(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          jlong a1;
          jlong result;

          if (!parseArgs(args, "JJ", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::MathUtil::gcd(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "gcd", args);
          return NULL;
        }

        static PyObject *t_MathUtil_log(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jdouble a0;
              jdouble a1;
              jdouble result;

              if (!parseArgs(args, "DD", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::MathUtil::log(a0, a1));
                return PyFloat_FromDouble((double) result);
              }
            }
            {
              jlong a0;
              jint a1;
              jint result;

              if (!parseArgs(args, "JI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::MathUtil::log(a0, a1));
                return PyInt_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError(type, "log", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TermAutomatonQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TermAutomatonQuery::class$ = NULL;
        jmethodID *TermAutomatonQuery::mids$ = NULL;
        bool TermAutomatonQuery::live$ = false;

        jclass TermAutomatonQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TermAutomatonQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_addAnyTransition_d8d154a6] = env->getMethodID(cls, "addAnyTransition", "(II)V");
            mids$[mid_addTransition_490a7ef0] = env->getMethodID(cls, "addTransition", "(IILjava/lang/String;)V");
            mids$[mid_addTransition_362d2138] = env->getMethodID(cls, "addTransition", "(IILorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_createState_54c6a179] = env->getMethodID(cls, "createState", "()I");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_finish_54c6a166] = env->getMethodID(cls, "finish", "()V");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_setAccept_b3a85a05] = env->getMethodID(cls, "setAccept", "(IZ)V");
            mids$[mid_toDot_14c7b5c5] = env->getMethodID(cls, "toDot", "()Ljava/lang/String;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermAutomatonQuery::TermAutomatonQuery(const ::java::lang::String & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        void TermAutomatonQuery::addAnyTransition(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_addAnyTransition_d8d154a6], a0, a1);
        }

        void TermAutomatonQuery::addTransition(jint a0, jint a1, const ::java::lang::String & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_addTransition_490a7ef0], a0, a1, a2.this$);
        }

        void TermAutomatonQuery::addTransition(jint a0, jint a1, const ::org::apache::lucene::util::BytesRef & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_addTransition_362d2138], a0, a1, a2.this$);
        }

        jint TermAutomatonQuery::createState() const
        {
          return env->callIntMethod(this$, mids$[mid_createState_54c6a179]);
        }

        ::org::apache::lucene::search::Weight TermAutomatonQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean TermAutomatonQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void TermAutomatonQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        void TermAutomatonQuery::finish() const
        {
          env->callVoidMethod(this$, mids$[mid_finish_54c6a166]);
        }

        jint TermAutomatonQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        void TermAutomatonQuery::setAccept(jint a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setAccept_b3a85a05], a0, a1);
        }

        ::java::lang::String TermAutomatonQuery::toDot() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toDot_14c7b5c5]));
        }

        ::java::lang::String TermAutomatonQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TermAutomatonQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermAutomatonQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermAutomatonQuery_init_(t_TermAutomatonQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermAutomatonQuery_addAnyTransition(t_TermAutomatonQuery *self, PyObject *args);
        static PyObject *t_TermAutomatonQuery_addTransition(t_TermAutomatonQuery *self, PyObject *args);
        static PyObject *t_TermAutomatonQuery_createState(t_TermAutomatonQuery *self);
        static PyObject *t_TermAutomatonQuery_createWeight(t_TermAutomatonQuery *self, PyObject *args);
        static PyObject *t_TermAutomatonQuery_equals(t_TermAutomatonQuery *self, PyObject *args);
        static PyObject *t_TermAutomatonQuery_extractTerms(t_TermAutomatonQuery *self, PyObject *args);
        static PyObject *t_TermAutomatonQuery_finish(t_TermAutomatonQuery *self);
        static PyObject *t_TermAutomatonQuery_hashCode(t_TermAutomatonQuery *self, PyObject *args);
        static PyObject *t_TermAutomatonQuery_setAccept(t_TermAutomatonQuery *self, PyObject *args);
        static PyObject *t_TermAutomatonQuery_toDot(t_TermAutomatonQuery *self);
        static PyObject *t_TermAutomatonQuery_toString(t_TermAutomatonQuery *self, PyObject *args);

        static PyMethodDef t_TermAutomatonQuery__methods_[] = {
          DECLARE_METHOD(t_TermAutomatonQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermAutomatonQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermAutomatonQuery, addAnyTransition, METH_VARARGS),
          DECLARE_METHOD(t_TermAutomatonQuery, addTransition, METH_VARARGS),
          DECLARE_METHOD(t_TermAutomatonQuery, createState, METH_NOARGS),
          DECLARE_METHOD(t_TermAutomatonQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_TermAutomatonQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_TermAutomatonQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_TermAutomatonQuery, finish, METH_NOARGS),
          DECLARE_METHOD(t_TermAutomatonQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_TermAutomatonQuery, setAccept, METH_VARARGS),
          DECLARE_METHOD(t_TermAutomatonQuery, toDot, METH_NOARGS),
          DECLARE_METHOD(t_TermAutomatonQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermAutomatonQuery, t_TermAutomatonQuery, ::org::apache::lucene::search::Query, TermAutomatonQuery, t_TermAutomatonQuery_init_, 0, 0, 0, 0, 0);

        void t_TermAutomatonQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(TermAutomatonQuery), module, "TermAutomatonQuery", 0);
        }

        void t_TermAutomatonQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermAutomatonQuery).tp_dict, "class_", make_descriptor(TermAutomatonQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermAutomatonQuery).tp_dict, "wrapfn_", make_descriptor(t_TermAutomatonQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermAutomatonQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermAutomatonQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermAutomatonQuery::initializeClass, 1)))
            return NULL;
          return t_TermAutomatonQuery::wrap_Object(TermAutomatonQuery(((t_TermAutomatonQuery *) arg)->object.this$));
        }
        static PyObject *t_TermAutomatonQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermAutomatonQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermAutomatonQuery_init_(t_TermAutomatonQuery *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          TermAutomatonQuery object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = TermAutomatonQuery(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermAutomatonQuery_addAnyTransition(t_TermAutomatonQuery *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.addAnyTransition(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addAnyTransition", args);
          return NULL;
        }

        static PyObject *t_TermAutomatonQuery_addTransition(t_TermAutomatonQuery *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              jint a0;
              jint a1;
              ::java::lang::String a2((jobject) NULL);

              if (!parseArgs(args, "IIs", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.addTransition(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
            {
              jint a0;
              jint a1;
              ::org::apache::lucene::util::BytesRef a2((jobject) NULL);

              if (!parseArgs(args, "IIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.addTransition(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addTransition", args);
          return NULL;
        }

        static PyObject *t_TermAutomatonQuery_createState(t_TermAutomatonQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.createState());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_TermAutomatonQuery_createWeight(t_TermAutomatonQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(TermAutomatonQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_TermAutomatonQuery_equals(t_TermAutomatonQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TermAutomatonQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_TermAutomatonQuery_extractTerms(t_TermAutomatonQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TermAutomatonQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_TermAutomatonQuery_finish(t_TermAutomatonQuery *self)
        {
          OBJ_CALL(self->object.finish());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermAutomatonQuery_hashCode(t_TermAutomatonQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(TermAutomatonQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_TermAutomatonQuery_setAccept(t_TermAutomatonQuery *self, PyObject *args)
        {
          jint a0;
          jboolean a1;

          if (!parseArgs(args, "IZ", &a0, &a1))
          {
            OBJ_CALL(self->object.setAccept(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setAccept", args);
          return NULL;
        }

        static PyObject *t_TermAutomatonQuery_toDot(t_TermAutomatonQuery *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.toDot());
          return j2p(result);
        }

        static PyObject *t_TermAutomatonQuery_toString(t_TermAutomatonQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(TermAutomatonQuery), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$unary_operator_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$unary_operator_return::class$ = NULL;
          jmethodID *JavascriptParser$unary_operator_return::mids$ = NULL;
          bool JavascriptParser$unary_operator_return::live$ = false;

          jclass JavascriptParser$unary_operator_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$unary_operator_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$unary_operator_return::JavascriptParser$unary_operator_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$unary_operator_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$unary_operator_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$unary_operator_return_init_(t_JavascriptParser$unary_operator_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$unary_operator_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$unary_operator_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$unary_operator_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$unary_operator_return, t_JavascriptParser$unary_operator_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$unary_operator_return, t_JavascriptParser$unary_operator_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$unary_operator_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$unary_operator_return), module, "JavascriptParser$unary_operator_return", 0);
          }

          void t_JavascriptParser$unary_operator_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$unary_operator_return).tp_dict, "class_", make_descriptor(JavascriptParser$unary_operator_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$unary_operator_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$unary_operator_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$unary_operator_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$unary_operator_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$unary_operator_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$unary_operator_return::wrap_Object(JavascriptParser$unary_operator_return(((t_JavascriptParser$unary_operator_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$unary_operator_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$unary_operator_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$unary_operator_return_init_(t_JavascriptParser$unary_operator_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$unary_operator_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$unary_operator_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/AbstractPagedMutable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *AbstractPagedMutable::class$ = NULL;
          jmethodID *AbstractPagedMutable::mids$ = NULL;
          bool AbstractPagedMutable::live$ = false;

          jclass AbstractPagedMutable::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/AbstractPagedMutable");

              mids$ = new jmethodID[max_mid];
              mids$[mid_get_0ee6df33] = env->getMethodID(cls, "get", "(J)J");
              mids$[mid_grow_3bfef47c] = env->getMethodID(cls, "grow", "()Lorg/apache/lucene/util/packed/AbstractPagedMutable;");
              mids$[mid_grow_5f2a2a5f] = env->getMethodID(cls, "grow", "(J)Lorg/apache/lucene/util/packed/AbstractPagedMutable;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_resize_5f2a2a5f] = env->getMethodID(cls, "resize", "(J)Lorg/apache/lucene/util/packed/AbstractPagedMutable;");
              mids$[mid_set_a7e12ca4] = env->getMethodID(cls, "set", "(JJ)V");
              mids$[mid_size_54c6a17a] = env->getMethodID(cls, "size", "()J");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_baseRamBytesUsed_54c6a17a] = env->getMethodID(cls, "baseRamBytesUsed", "()J");
              mids$[mid_fillPages_54c6a166] = env->getMethodID(cls, "fillPages", "()V");
              mids$[mid_newMutable_48ebd249] = env->getMethodID(cls, "newMutable", "(II)Lorg/apache/lucene/util/packed/PackedInts$Mutable;");
              mids$[mid_newUnfilledCopy_5f2a2a5f] = env->getMethodID(cls, "newUnfilledCopy", "(J)Lorg/apache/lucene/util/packed/AbstractPagedMutable;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jlong AbstractPagedMutable::get(jlong a0) const
          {
            return env->callLongMethod(this$, mids$[mid_get_0ee6df33], a0);
          }

          AbstractPagedMutable AbstractPagedMutable::grow() const
          {
            return AbstractPagedMutable(env->callObjectMethod(this$, mids$[mid_grow_3bfef47c]));
          }

          AbstractPagedMutable AbstractPagedMutable::grow(jlong a0) const
          {
            return AbstractPagedMutable(env->callObjectMethod(this$, mids$[mid_grow_5f2a2a5f], a0));
          }

          jlong AbstractPagedMutable::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          AbstractPagedMutable AbstractPagedMutable::resize(jlong a0) const
          {
            return AbstractPagedMutable(env->callObjectMethod(this$, mids$[mid_resize_5f2a2a5f], a0));
          }

          void AbstractPagedMutable::set(jlong a0, jlong a1) const
          {
            env->callVoidMethod(this$, mids$[mid_set_a7e12ca4], a0, a1);
          }

          jlong AbstractPagedMutable::size() const
          {
            return env->callLongMethod(this$, mids$[mid_size_54c6a17a]);
          }

          ::java::lang::String AbstractPagedMutable::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_AbstractPagedMutable_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractPagedMutable_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractPagedMutable_of_(t_AbstractPagedMutable *self, PyObject *args);
          static PyObject *t_AbstractPagedMutable_get(t_AbstractPagedMutable *self, PyObject *args);
          static PyObject *t_AbstractPagedMutable_grow(t_AbstractPagedMutable *self, PyObject *args);
          static PyObject *t_AbstractPagedMutable_ramBytesUsed(t_AbstractPagedMutable *self);
          static PyObject *t_AbstractPagedMutable_resize(t_AbstractPagedMutable *self, PyObject *arg);
          static PyObject *t_AbstractPagedMutable_set(t_AbstractPagedMutable *self, PyObject *args);
          static PyObject *t_AbstractPagedMutable_size(t_AbstractPagedMutable *self);
          static PyObject *t_AbstractPagedMutable_toString(t_AbstractPagedMutable *self, PyObject *args);
          static PyObject *t_AbstractPagedMutable_get__parameters_(t_AbstractPagedMutable *self, void *data);
          static PyGetSetDef t_AbstractPagedMutable__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractPagedMutable, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractPagedMutable__methods_[] = {
            DECLARE_METHOD(t_AbstractPagedMutable, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractPagedMutable, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractPagedMutable, of_, METH_VARARGS),
            DECLARE_METHOD(t_AbstractPagedMutable, get, METH_VARARGS),
            DECLARE_METHOD(t_AbstractPagedMutable, grow, METH_VARARGS),
            DECLARE_METHOD(t_AbstractPagedMutable, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_AbstractPagedMutable, resize, METH_O),
            DECLARE_METHOD(t_AbstractPagedMutable, set, METH_VARARGS),
            DECLARE_METHOD(t_AbstractPagedMutable, size, METH_NOARGS),
            DECLARE_METHOD(t_AbstractPagedMutable, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractPagedMutable, t_AbstractPagedMutable, ::org::apache::lucene::util::LongValues, AbstractPagedMutable, abstract_init, 0, 0, t_AbstractPagedMutable__fields_, 0, 0);
          PyObject *t_AbstractPagedMutable::wrap_Object(const AbstractPagedMutable& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractPagedMutable::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractPagedMutable *self = (t_AbstractPagedMutable *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractPagedMutable::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractPagedMutable::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractPagedMutable *self = (t_AbstractPagedMutable *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractPagedMutable::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractPagedMutable), module, "AbstractPagedMutable", 0);
          }

          void t_AbstractPagedMutable::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractPagedMutable).tp_dict, "class_", make_descriptor(AbstractPagedMutable::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractPagedMutable).tp_dict, "wrapfn_", make_descriptor(t_AbstractPagedMutable::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractPagedMutable).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractPagedMutable_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractPagedMutable::initializeClass, 1)))
              return NULL;
            return t_AbstractPagedMutable::wrap_Object(AbstractPagedMutable(((t_AbstractPagedMutable *) arg)->object.this$));
          }
          static PyObject *t_AbstractPagedMutable_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractPagedMutable::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractPagedMutable_of_(t_AbstractPagedMutable *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_AbstractPagedMutable_get(t_AbstractPagedMutable *self, PyObject *args)
          {
            jlong a0;
            jlong result;

            if (!parseArgs(args, "J", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(AbstractPagedMutable), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_AbstractPagedMutable_grow(t_AbstractPagedMutable *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                AbstractPagedMutable result((jobject) NULL);
                OBJ_CALL(result = self->object.grow());
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : t_AbstractPagedMutable::wrap_Object(result);
              }
              break;
             case 1:
              {
                jlong a0;
                AbstractPagedMutable result((jobject) NULL);

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(result = self->object.grow(a0));
                  return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : t_AbstractPagedMutable::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "grow", args);
            return NULL;
          }

          static PyObject *t_AbstractPagedMutable_ramBytesUsed(t_AbstractPagedMutable *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_AbstractPagedMutable_resize(t_AbstractPagedMutable *self, PyObject *arg)
          {
            jlong a0;
            AbstractPagedMutable result((jobject) NULL);

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = self->object.resize(a0));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : t_AbstractPagedMutable::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "resize", arg);
            return NULL;
          }

          static PyObject *t_AbstractPagedMutable_set(t_AbstractPagedMutable *self, PyObject *args)
          {
            jlong a0;
            jlong a1;

            if (!parseArgs(args, "JJ", &a0, &a1))
            {
              OBJ_CALL(self->object.set(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "set", args);
            return NULL;
          }

          static PyObject *t_AbstractPagedMutable_size(t_AbstractPagedMutable *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_AbstractPagedMutable_toString(t_AbstractPagedMutable *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(AbstractPagedMutable), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_AbstractPagedMutable_get__parameters_(t_AbstractPagedMutable *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "java/lang/Cloneable.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Query::class$ = NULL;
        jmethodID *Query::mids$ = NULL;
        bool Query::live$ = false;

        jclass Query::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Query");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clone_97e3851a] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getBoost_54c6a176] = env->getMethodID(cls, "getBoost", "()F");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setBoost_06298cab] = env->getMethodID(cls, "setBoost", "(F)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Query::Query() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        Query Query::clone() const
        {
          return Query(env->callObjectMethod(this$, mids$[mid_clone_97e3851a]));
        }

        ::org::apache::lucene::search::Weight Query::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean Query::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void Query::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        jfloat Query::getBoost() const
        {
          return env->callFloatMethod(this$, mids$[mid_getBoost_54c6a176]);
        }

        jint Query::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        Query Query::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        void Query::setBoost(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBoost_06298cab], a0);
        }

        ::java::lang::String Query::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::String Query::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Query_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Query_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Query_init_(t_Query *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Query_clone(t_Query *self);
        static PyObject *t_Query_createWeight(t_Query *self, PyObject *arg);
        static PyObject *t_Query_equals(t_Query *self, PyObject *args);
        static PyObject *t_Query_extractTerms(t_Query *self, PyObject *arg);
        static PyObject *t_Query_getBoost(t_Query *self);
        static PyObject *t_Query_hashCode(t_Query *self, PyObject *args);
        static PyObject *t_Query_rewrite(t_Query *self, PyObject *arg);
        static PyObject *t_Query_setBoost(t_Query *self, PyObject *arg);
        static PyObject *t_Query_toString(t_Query *self, PyObject *args);
        static PyObject *t_Query_get__boost(t_Query *self, void *data);
        static int t_Query_set__boost(t_Query *self, PyObject *arg, void *data);
        static PyGetSetDef t_Query__fields_[] = {
          DECLARE_GETSET_FIELD(t_Query, boost),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Query__methods_[] = {
          DECLARE_METHOD(t_Query, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Query, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Query, clone, METH_NOARGS),
          DECLARE_METHOD(t_Query, createWeight, METH_O),
          DECLARE_METHOD(t_Query, equals, METH_VARARGS),
          DECLARE_METHOD(t_Query, extractTerms, METH_O),
          DECLARE_METHOD(t_Query, getBoost, METH_NOARGS),
          DECLARE_METHOD(t_Query, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_Query, rewrite, METH_O),
          DECLARE_METHOD(t_Query, setBoost, METH_O),
          DECLARE_METHOD(t_Query, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Query, t_Query, ::java::lang::Object, Query, t_Query_init_, 0, 0, t_Query__fields_, 0, 0);

        void t_Query::install(PyObject *module)
        {
          installType(&PY_TYPE(Query), module, "Query", 0);
        }

        void t_Query::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Query).tp_dict, "class_", make_descriptor(Query::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Query).tp_dict, "wrapfn_", make_descriptor(t_Query::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Query).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Query_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Query::initializeClass, 1)))
            return NULL;
          return t_Query::wrap_Object(Query(((t_Query *) arg)->object.this$));
        }
        static PyObject *t_Query_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Query::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Query_init_(t_Query *self, PyObject *args, PyObject *kwds)
        {
          Query object((jobject) NULL);

          INT_CALL(object = Query());
          self->object = object;

          return 0;
        }

        static PyObject *t_Query_clone(t_Query *self)
        {
          Query result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_Query::wrap_Object(result);
        }

        static PyObject *t_Query_createWeight(t_Query *self, PyObject *arg)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "createWeight", arg);
          return NULL;
        }

        static PyObject *t_Query_equals(t_Query *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(Query), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Query_extractTerms(t_Query *self, PyObject *arg)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "extractTerms", arg);
          return NULL;
        }

        static PyObject *t_Query_getBoost(t_Query *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getBoost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_Query_hashCode(t_Query *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(Query), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Query_rewrite(t_Query *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          Query result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "rewrite", arg);
          return NULL;
        }

        static PyObject *t_Query_setBoost(t_Query *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setBoost(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBoost", arg);
          return NULL;
        }

        static PyObject *t_Query_toString(t_Query *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }
            break;
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }
            }
          }

          return callSuper(&PY_TYPE(Query), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Query_get__boost(t_Query *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getBoost());
          return PyFloat_FromDouble((double) value);
        }
        static int t_Query_set__boost(t_Query *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setBoost(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "boost", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanNormalizationFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanNormalizationFilter::class$ = NULL;
          jmethodID *GermanNormalizationFilter::mids$ = NULL;
          bool GermanNormalizationFilter::live$ = false;

          jclass GermanNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanNormalizationFilter::GermanNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean GermanNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanNormalizationFilter_init_(t_GermanNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanNormalizationFilter_incrementToken(t_GermanNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_GermanNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_GermanNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanNormalizationFilter, t_GermanNormalizationFilter, ::org::apache::lucene::analysis::TokenFilter, GermanNormalizationFilter, t_GermanNormalizationFilter_init_, 0, 0, 0, 0, 0);

          void t_GermanNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanNormalizationFilter), module, "GermanNormalizationFilter", 0);
          }

          void t_GermanNormalizationFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanNormalizationFilter).tp_dict, "class_", make_descriptor(GermanNormalizationFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanNormalizationFilter).tp_dict, "wrapfn_", make_descriptor(t_GermanNormalizationFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanNormalizationFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_GermanNormalizationFilter::wrap_Object(GermanNormalizationFilter(((t_GermanNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_GermanNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanNormalizationFilter_init_(t_GermanNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GermanNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GermanNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanNormalizationFilter_incrementToken(t_GermanNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(GermanNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoWriter.h"
#include "org/apache/lucene/codecs/SegmentInfoReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *SegmentInfoFormat::class$ = NULL;
        jmethodID *SegmentInfoFormat::mids$ = NULL;
        bool SegmentInfoFormat::live$ = false;

        jclass SegmentInfoFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/SegmentInfoFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getSegmentInfoReader_1e88b6e7] = env->getMethodID(cls, "getSegmentInfoReader", "()Lorg/apache/lucene/codecs/SegmentInfoReader;");
            mids$[mid_getSegmentInfoWriter_2d4ab533] = env->getMethodID(cls, "getSegmentInfoWriter", "()Lorg/apache/lucene/codecs/SegmentInfoWriter;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::SegmentInfoReader SegmentInfoFormat::getSegmentInfoReader() const
        {
          return ::org::apache::lucene::codecs::SegmentInfoReader(env->callObjectMethod(this$, mids$[mid_getSegmentInfoReader_1e88b6e7]));
        }

        ::org::apache::lucene::codecs::SegmentInfoWriter SegmentInfoFormat::getSegmentInfoWriter() const
        {
          return ::org::apache::lucene::codecs::SegmentInfoWriter(env->callObjectMethod(this$, mids$[mid_getSegmentInfoWriter_2d4ab533]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_SegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfoFormat_getSegmentInfoReader(t_SegmentInfoFormat *self);
        static PyObject *t_SegmentInfoFormat_getSegmentInfoWriter(t_SegmentInfoFormat *self);
        static PyObject *t_SegmentInfoFormat_get__segmentInfoReader(t_SegmentInfoFormat *self, void *data);
        static PyObject *t_SegmentInfoFormat_get__segmentInfoWriter(t_SegmentInfoFormat *self, void *data);
        static PyGetSetDef t_SegmentInfoFormat__fields_[] = {
          DECLARE_GET_FIELD(t_SegmentInfoFormat, segmentInfoReader),
          DECLARE_GET_FIELD(t_SegmentInfoFormat, segmentInfoWriter),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentInfoFormat__methods_[] = {
          DECLARE_METHOD(t_SegmentInfoFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfoFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfoFormat, getSegmentInfoReader, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfoFormat, getSegmentInfoWriter, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentInfoFormat, t_SegmentInfoFormat, ::java::lang::Object, SegmentInfoFormat, abstract_init, 0, 0, t_SegmentInfoFormat__fields_, 0, 0);

        void t_SegmentInfoFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentInfoFormat), module, "SegmentInfoFormat", 0);
        }

        void t_SegmentInfoFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentInfoFormat).tp_dict, "class_", make_descriptor(SegmentInfoFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentInfoFormat).tp_dict, "wrapfn_", make_descriptor(t_SegmentInfoFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentInfoFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentInfoFormat::initializeClass, 1)))
            return NULL;
          return t_SegmentInfoFormat::wrap_Object(SegmentInfoFormat(((t_SegmentInfoFormat *) arg)->object.this$));
        }
        static PyObject *t_SegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentInfoFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SegmentInfoFormat_getSegmentInfoReader(t_SegmentInfoFormat *self)
        {
          ::org::apache::lucene::codecs::SegmentInfoReader result((jobject) NULL);
          OBJ_CALL(result = self->object.getSegmentInfoReader());
          return ::org::apache::lucene::codecs::t_SegmentInfoReader::wrap_Object(result);
        }

        static PyObject *t_SegmentInfoFormat_getSegmentInfoWriter(t_SegmentInfoFormat *self)
        {
          ::org::apache::lucene::codecs::SegmentInfoWriter result((jobject) NULL);
          OBJ_CALL(result = self->object.getSegmentInfoWriter());
          return ::org::apache::lucene::codecs::t_SegmentInfoWriter::wrap_Object(result);
        }

        static PyObject *t_SegmentInfoFormat_get__segmentInfoReader(t_SegmentInfoFormat *self, void *data)
        {
          ::org::apache::lucene::codecs::SegmentInfoReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getSegmentInfoReader());
          return ::org::apache::lucene::codecs::t_SegmentInfoReader::wrap_Object(value);
        }

        static PyObject *t_SegmentInfoFormat_get__segmentInfoWriter(t_SegmentInfoFormat *self, void *data)
        {
          ::org::apache::lucene::codecs::SegmentInfoWriter value((jobject) NULL);
          OBJ_CALL(value = self->object.getSegmentInfoWriter());
          return ::org::apache::lucene::codecs::t_SegmentInfoWriter::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FilteredQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/FilteredQuery$FilterStrategy.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FilteredQuery::class$ = NULL;
        jmethodID *FilteredQuery::mids$ = NULL;
        bool FilteredQuery::live$ = false;
        ::org::apache::lucene::search::FilteredQuery$FilterStrategy *FilteredQuery::LEAP_FROG_FILTER_FIRST_STRATEGY = NULL;
        ::org::apache::lucene::search::FilteredQuery$FilterStrategy *FilteredQuery::LEAP_FROG_QUERY_FIRST_STRATEGY = NULL;
        ::org::apache::lucene::search::FilteredQuery$FilterStrategy *FilteredQuery::QUERY_FIRST_FILTER_STRATEGY = NULL;
        ::org::apache::lucene::search::FilteredQuery$FilterStrategy *FilteredQuery::RANDOM_ACCESS_FILTER_STRATEGY = NULL;

        jclass FilteredQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FilteredQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_96ca297d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;)V");
            mids$[mid_init$_61c4287b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/FilteredQuery$FilterStrategy;)V");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getFilter_b40f961f] = env->getMethodID(cls, "getFilter", "()Lorg/apache/lucene/search/Filter;");
            mids$[mid_getFilterStrategy_98d3690b] = env->getMethodID(cls, "getFilterStrategy", "()Lorg/apache/lucene/search/FilteredQuery$FilterStrategy;");
            mids$[mid_getQuery_97e3851a] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            LEAP_FROG_FILTER_FIRST_STRATEGY = new ::org::apache::lucene::search::FilteredQuery$FilterStrategy(env->getStaticObjectField(cls, "LEAP_FROG_FILTER_FIRST_STRATEGY", "Lorg/apache/lucene/search/FilteredQuery$FilterStrategy;"));
            LEAP_FROG_QUERY_FIRST_STRATEGY = new ::org::apache::lucene::search::FilteredQuery$FilterStrategy(env->getStaticObjectField(cls, "LEAP_FROG_QUERY_FIRST_STRATEGY", "Lorg/apache/lucene/search/FilteredQuery$FilterStrategy;"));
            QUERY_FIRST_FILTER_STRATEGY = new ::org::apache::lucene::search::FilteredQuery$FilterStrategy(env->getStaticObjectField(cls, "QUERY_FIRST_FILTER_STRATEGY", "Lorg/apache/lucene/search/FilteredQuery$FilterStrategy;"));
            RANDOM_ACCESS_FILTER_STRATEGY = new ::org::apache::lucene::search::FilteredQuery$FilterStrategy(env->getStaticObjectField(cls, "RANDOM_ACCESS_FILTER_STRATEGY", "Lorg/apache/lucene/search/FilteredQuery$FilterStrategy;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilteredQuery::FilteredQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Filter & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_96ca297d, a0.this$, a1.this$)) {}

        FilteredQuery::FilteredQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Filter & a1, const ::org::apache::lucene::search::FilteredQuery$FilterStrategy & a2) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_61c4287b, a0.this$, a1.this$, a2.this$)) {}

        ::org::apache::lucene::search::Weight FilteredQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean FilteredQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void FilteredQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        ::org::apache::lucene::search::Filter FilteredQuery::getFilter() const
        {
          return ::org::apache::lucene::search::Filter(env->callObjectMethod(this$, mids$[mid_getFilter_b40f961f]));
        }

        ::org::apache::lucene::search::FilteredQuery$FilterStrategy FilteredQuery::getFilterStrategy() const
        {
          return ::org::apache::lucene::search::FilteredQuery$FilterStrategy(env->callObjectMethod(this$, mids$[mid_getFilterStrategy_98d3690b]));
        }

        ::org::apache::lucene::search::Query FilteredQuery::getQuery() const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_97e3851a]));
        }

        jint FilteredQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query FilteredQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        ::java::lang::String FilteredQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/FilteredQuery$RandomAccessFilterStrategy.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FilteredQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilteredQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilteredQuery_init_(t_FilteredQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilteredQuery_createWeight(t_FilteredQuery *self, PyObject *args);
        static PyObject *t_FilteredQuery_equals(t_FilteredQuery *self, PyObject *args);
        static PyObject *t_FilteredQuery_extractTerms(t_FilteredQuery *self, PyObject *args);
        static PyObject *t_FilteredQuery_getFilter(t_FilteredQuery *self);
        static PyObject *t_FilteredQuery_getFilterStrategy(t_FilteredQuery *self);
        static PyObject *t_FilteredQuery_getQuery(t_FilteredQuery *self);
        static PyObject *t_FilteredQuery_hashCode(t_FilteredQuery *self, PyObject *args);
        static PyObject *t_FilteredQuery_rewrite(t_FilteredQuery *self, PyObject *args);
        static PyObject *t_FilteredQuery_toString(t_FilteredQuery *self, PyObject *args);
        static PyObject *t_FilteredQuery_get__filter(t_FilteredQuery *self, void *data);
        static PyObject *t_FilteredQuery_get__filterStrategy(t_FilteredQuery *self, void *data);
        static PyObject *t_FilteredQuery_get__query(t_FilteredQuery *self, void *data);
        static PyGetSetDef t_FilteredQuery__fields_[] = {
          DECLARE_GET_FIELD(t_FilteredQuery, filter),
          DECLARE_GET_FIELD(t_FilteredQuery, filterStrategy),
          DECLARE_GET_FIELD(t_FilteredQuery, query),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilteredQuery__methods_[] = {
          DECLARE_METHOD(t_FilteredQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_FilteredQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_FilteredQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_FilteredQuery, getFilter, METH_NOARGS),
          DECLARE_METHOD(t_FilteredQuery, getFilterStrategy, METH_NOARGS),
          DECLARE_METHOD(t_FilteredQuery, getQuery, METH_NOARGS),
          DECLARE_METHOD(t_FilteredQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FilteredQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_FilteredQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilteredQuery, t_FilteredQuery, ::org::apache::lucene::search::Query, FilteredQuery, t_FilteredQuery_init_, 0, 0, t_FilteredQuery__fields_, 0, 0);

        void t_FilteredQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(FilteredQuery), module, "FilteredQuery", 0);
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "RandomAccessFilterStrategy", make_descriptor(&PY_TYPE(FilteredQuery$RandomAccessFilterStrategy)));
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "FilterStrategy", make_descriptor(&PY_TYPE(FilteredQuery$FilterStrategy)));
        }

        void t_FilteredQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "class_", make_descriptor(FilteredQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "wrapfn_", make_descriptor(t_FilteredQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FilteredQuery::initializeClass);
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "LEAP_FROG_FILTER_FIRST_STRATEGY", make_descriptor(::org::apache::lucene::search::t_FilteredQuery$FilterStrategy::wrap_Object(*FilteredQuery::LEAP_FROG_FILTER_FIRST_STRATEGY)));
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "LEAP_FROG_QUERY_FIRST_STRATEGY", make_descriptor(::org::apache::lucene::search::t_FilteredQuery$FilterStrategy::wrap_Object(*FilteredQuery::LEAP_FROG_QUERY_FIRST_STRATEGY)));
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "QUERY_FIRST_FILTER_STRATEGY", make_descriptor(::org::apache::lucene::search::t_FilteredQuery$FilterStrategy::wrap_Object(*FilteredQuery::QUERY_FIRST_FILTER_STRATEGY)));
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "RANDOM_ACCESS_FILTER_STRATEGY", make_descriptor(::org::apache::lucene::search::t_FilteredQuery$FilterStrategy::wrap_Object(*FilteredQuery::RANDOM_ACCESS_FILTER_STRATEGY)));
        }

        static PyObject *t_FilteredQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilteredQuery::initializeClass, 1)))
            return NULL;
          return t_FilteredQuery::wrap_Object(FilteredQuery(((t_FilteredQuery *) arg)->object.this$));
        }
        static PyObject *t_FilteredQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilteredQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilteredQuery_init_(t_FilteredQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::Filter a1((jobject) NULL);
              FilteredQuery object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1))
              {
                INT_CALL(object = FilteredQuery(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::Filter a1((jobject) NULL);
              ::org::apache::lucene::search::FilteredQuery$FilterStrategy a2((jobject) NULL);
              FilteredQuery object((jobject) NULL);

              if (!parseArgs(args, "kkk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::FilteredQuery$FilterStrategy::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = FilteredQuery(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilteredQuery_createWeight(t_FilteredQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_FilteredQuery_equals(t_FilteredQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilteredQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FilteredQuery_extractTerms(t_FilteredQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilteredQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_FilteredQuery_getFilter(t_FilteredQuery *self)
        {
          ::org::apache::lucene::search::Filter result((jobject) NULL);
          OBJ_CALL(result = self->object.getFilter());
          return ::org::apache::lucene::search::t_Filter::wrap_Object(result);
        }

        static PyObject *t_FilteredQuery_getFilterStrategy(t_FilteredQuery *self)
        {
          ::org::apache::lucene::search::FilteredQuery$FilterStrategy result((jobject) NULL);
          OBJ_CALL(result = self->object.getFilterStrategy());
          return ::org::apache::lucene::search::t_FilteredQuery$FilterStrategy::wrap_Object(result);
        }

        static PyObject *t_FilteredQuery_getQuery(t_FilteredQuery *self)
        {
          ::org::apache::lucene::search::Query result((jobject) NULL);
          OBJ_CALL(result = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(result);
        }

        static PyObject *t_FilteredQuery_hashCode(t_FilteredQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilteredQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FilteredQuery_rewrite(t_FilteredQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_FilteredQuery_toString(t_FilteredQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FilteredQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FilteredQuery_get__filter(t_FilteredQuery *self, void *data)
        {
          ::org::apache::lucene::search::Filter value((jobject) NULL);
          OBJ_CALL(value = self->object.getFilter());
          return ::org::apache::lucene::search::t_Filter::wrap_Object(value);
        }

        static PyObject *t_FilteredQuery_get__filterStrategy(t_FilteredQuery *self, void *data)
        {
          ::org::apache::lucene::search::FilteredQuery$FilterStrategy value((jobject) NULL);
          OBJ_CALL(value = self->object.getFilterStrategy());
          return ::org::apache::lucene::search::t_FilteredQuery$FilterStrategy::wrap_Object(value);
        }

        static PyObject *t_FilteredQuery_get__query(t_FilteredQuery *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ru/RussianLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {

          ::java::lang::Class *RussianLightStemFilter::class$ = NULL;
          jmethodID *RussianLightStemFilter::mids$ = NULL;
          bool RussianLightStemFilter::live$ = false;

          jclass RussianLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ru/RussianLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RussianLightStemFilter::RussianLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean RussianLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {
          static PyObject *t_RussianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RussianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RussianLightStemFilter_init_(t_RussianLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RussianLightStemFilter_incrementToken(t_RussianLightStemFilter *self, PyObject *args);

          static PyMethodDef t_RussianLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_RussianLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RussianLightStemFilter, t_RussianLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, RussianLightStemFilter, t_RussianLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_RussianLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(RussianLightStemFilter), module, "RussianLightStemFilter", 0);
          }

          void t_RussianLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RussianLightStemFilter).tp_dict, "class_", make_descriptor(RussianLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RussianLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_RussianLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RussianLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RussianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RussianLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_RussianLightStemFilter::wrap_Object(RussianLightStemFilter(((t_RussianLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_RussianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RussianLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RussianLightStemFilter_init_(t_RussianLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            RussianLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = RussianLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RussianLightStemFilter_incrementToken(t_RussianLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(RussianLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/SingleTokenTokenStream.h"
#include "org/apache/lucene/analysis/Token.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *SingleTokenTokenStream::class$ = NULL;
          jmethodID *SingleTokenTokenStream::mids$ = NULL;
          bool SingleTokenTokenStream::live$ = false;

          jclass SingleTokenTokenStream::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/SingleTokenTokenStream");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4f6e7002] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Token;)V");
              mids$[mid_getToken_55852c17] = env->getMethodID(cls, "getToken", "()Lorg/apache/lucene/analysis/Token;");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setToken_4f6e7002] = env->getMethodID(cls, "setToken", "(Lorg/apache/lucene/analysis/Token;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SingleTokenTokenStream::SingleTokenTokenStream(const ::org::apache::lucene::analysis::Token & a0) : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_4f6e7002, a0.this$)) {}

          ::org::apache::lucene::analysis::Token SingleTokenTokenStream::getToken() const
          {
            return ::org::apache::lucene::analysis::Token(env->callObjectMethod(this$, mids$[mid_getToken_55852c17]));
          }

          jboolean SingleTokenTokenStream::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void SingleTokenTokenStream::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          void SingleTokenTokenStream::setToken(const ::org::apache::lucene::analysis::Token & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setToken_4f6e7002], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_SingleTokenTokenStream_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SingleTokenTokenStream_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SingleTokenTokenStream_init_(t_SingleTokenTokenStream *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SingleTokenTokenStream_getToken(t_SingleTokenTokenStream *self);
          static PyObject *t_SingleTokenTokenStream_incrementToken(t_SingleTokenTokenStream *self, PyObject *args);
          static PyObject *t_SingleTokenTokenStream_reset(t_SingleTokenTokenStream *self, PyObject *args);
          static PyObject *t_SingleTokenTokenStream_setToken(t_SingleTokenTokenStream *self, PyObject *arg);
          static PyObject *t_SingleTokenTokenStream_get__token(t_SingleTokenTokenStream *self, void *data);
          static int t_SingleTokenTokenStream_set__token(t_SingleTokenTokenStream *self, PyObject *arg, void *data);
          static PyGetSetDef t_SingleTokenTokenStream__fields_[] = {
            DECLARE_GETSET_FIELD(t_SingleTokenTokenStream, token),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SingleTokenTokenStream__methods_[] = {
            DECLARE_METHOD(t_SingleTokenTokenStream, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SingleTokenTokenStream, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SingleTokenTokenStream, getToken, METH_NOARGS),
            DECLARE_METHOD(t_SingleTokenTokenStream, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_SingleTokenTokenStream, reset, METH_VARARGS),
            DECLARE_METHOD(t_SingleTokenTokenStream, setToken, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SingleTokenTokenStream, t_SingleTokenTokenStream, ::org::apache::lucene::analysis::TokenStream, SingleTokenTokenStream, t_SingleTokenTokenStream_init_, 0, 0, t_SingleTokenTokenStream__fields_, 0, 0);

          void t_SingleTokenTokenStream::install(PyObject *module)
          {
            installType(&PY_TYPE(SingleTokenTokenStream), module, "SingleTokenTokenStream", 0);
          }

          void t_SingleTokenTokenStream::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SingleTokenTokenStream).tp_dict, "class_", make_descriptor(SingleTokenTokenStream::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SingleTokenTokenStream).tp_dict, "wrapfn_", make_descriptor(t_SingleTokenTokenStream::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SingleTokenTokenStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SingleTokenTokenStream_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SingleTokenTokenStream::initializeClass, 1)))
              return NULL;
            return t_SingleTokenTokenStream::wrap_Object(SingleTokenTokenStream(((t_SingleTokenTokenStream *) arg)->object.this$));
          }
          static PyObject *t_SingleTokenTokenStream_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SingleTokenTokenStream::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SingleTokenTokenStream_init_(t_SingleTokenTokenStream *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::Token a0((jobject) NULL);
            SingleTokenTokenStream object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Token::initializeClass, &a0))
            {
              INT_CALL(object = SingleTokenTokenStream(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SingleTokenTokenStream_getToken(t_SingleTokenTokenStream *self)
          {
            ::org::apache::lucene::analysis::Token result((jobject) NULL);
            OBJ_CALL(result = self->object.getToken());
            return ::org::apache::lucene::analysis::t_Token::wrap_Object(result);
          }

          static PyObject *t_SingleTokenTokenStream_incrementToken(t_SingleTokenTokenStream *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SingleTokenTokenStream), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_SingleTokenTokenStream_reset(t_SingleTokenTokenStream *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SingleTokenTokenStream), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_SingleTokenTokenStream_setToken(t_SingleTokenTokenStream *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::Token a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Token::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setToken(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setToken", arg);
            return NULL;
          }

          static PyObject *t_SingleTokenTokenStream_get__token(t_SingleTokenTokenStream *self, void *data)
          {
            ::org::apache::lucene::analysis::Token value((jobject) NULL);
            OBJ_CALL(value = self->object.getToken());
            return ::org::apache::lucene::analysis::t_Token::wrap_Object(value);
          }
          static int t_SingleTokenTokenStream_set__token(t_SingleTokenTokenStream *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::Token value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Token::initializeClass, &value))
              {
                INT_CALL(self->object.setToken(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "token", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/br/BrazilianStemFilterFactory.h"
#include "org/apache/lucene/analysis/br/BrazilianStemFilter.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {

          ::java::lang::Class *BrazilianStemFilterFactory::class$ = NULL;
          jmethodID *BrazilianStemFilterFactory::mids$ = NULL;
          bool BrazilianStemFilterFactory::live$ = false;

          jclass BrazilianStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/br/BrazilianStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_84777f61] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/br/BrazilianStemFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BrazilianStemFilterFactory::BrazilianStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::br::BrazilianStemFilter BrazilianStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::br::BrazilianStemFilter(env->callObjectMethod(this$, mids$[mid_create_84777f61], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {
          static PyObject *t_BrazilianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BrazilianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BrazilianStemFilterFactory_init_(t_BrazilianStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BrazilianStemFilterFactory_create(t_BrazilianStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_BrazilianStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_BrazilianStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BrazilianStemFilterFactory, t_BrazilianStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, BrazilianStemFilterFactory, t_BrazilianStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_BrazilianStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(BrazilianStemFilterFactory), module, "BrazilianStemFilterFactory", 0);
          }

          void t_BrazilianStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BrazilianStemFilterFactory).tp_dict, "class_", make_descriptor(BrazilianStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BrazilianStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_BrazilianStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BrazilianStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BrazilianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BrazilianStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_BrazilianStemFilterFactory::wrap_Object(BrazilianStemFilterFactory(((t_BrazilianStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_BrazilianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BrazilianStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BrazilianStemFilterFactory_init_(t_BrazilianStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            BrazilianStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = BrazilianStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BrazilianStemFilterFactory_create(t_BrazilianStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::br::BrazilianStemFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::br::t_BrazilianStemFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BrazilianStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/SimpleFSLockFactory.h"
#include "java/io/IOException.h"
#include "java/io/File.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *SimpleFSLockFactory::class$ = NULL;
        jmethodID *SimpleFSLockFactory::mids$ = NULL;
        bool SimpleFSLockFactory::live$ = false;

        jclass SimpleFSLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/SimpleFSLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SimpleFSLockFactory::SimpleFSLockFactory() : ::org::apache::lucene::store::FSLockFactory(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        SimpleFSLockFactory::SimpleFSLockFactory(const ::java::lang::String & a0) : ::org::apache::lucene::store::FSLockFactory(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        SimpleFSLockFactory::SimpleFSLockFactory(const ::java::io::File & a0) : ::org::apache::lucene::store::FSLockFactory(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

        void SimpleFSLockFactory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        ::org::apache::lucene::store::Lock SimpleFSLockFactory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_SimpleFSLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SimpleFSLockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SimpleFSLockFactory_init_(t_SimpleFSLockFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SimpleFSLockFactory_clearLock(t_SimpleFSLockFactory *self, PyObject *args);
        static PyObject *t_SimpleFSLockFactory_makeLock(t_SimpleFSLockFactory *self, PyObject *args);

        static PyMethodDef t_SimpleFSLockFactory__methods_[] = {
          DECLARE_METHOD(t_SimpleFSLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleFSLockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleFSLockFactory, clearLock, METH_VARARGS),
          DECLARE_METHOD(t_SimpleFSLockFactory, makeLock, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SimpleFSLockFactory, t_SimpleFSLockFactory, ::org::apache::lucene::store::FSLockFactory, SimpleFSLockFactory, t_SimpleFSLockFactory_init_, 0, 0, 0, 0, 0);

        void t_SimpleFSLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(SimpleFSLockFactory), module, "SimpleFSLockFactory", 0);
        }

        void t_SimpleFSLockFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SimpleFSLockFactory).tp_dict, "class_", make_descriptor(SimpleFSLockFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SimpleFSLockFactory).tp_dict, "wrapfn_", make_descriptor(t_SimpleFSLockFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SimpleFSLockFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SimpleFSLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SimpleFSLockFactory::initializeClass, 1)))
            return NULL;
          return t_SimpleFSLockFactory::wrap_Object(SimpleFSLockFactory(((t_SimpleFSLockFactory *) arg)->object.this$));
        }
        static PyObject *t_SimpleFSLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SimpleFSLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SimpleFSLockFactory_init_(t_SimpleFSLockFactory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              SimpleFSLockFactory object((jobject) NULL);

              INT_CALL(object = SimpleFSLockFactory());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              SimpleFSLockFactory object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = SimpleFSLockFactory(a0));
                self->object = object;
                break;
              }
            }
            {
              ::java::io::File a0((jobject) NULL);
              SimpleFSLockFactory object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                INT_CALL(object = SimpleFSLockFactory(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SimpleFSLockFactory_clearLock(t_SimpleFSLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SimpleFSLockFactory), (PyObject *) self, "clearLock", args, 2);
        }

        static PyObject *t_SimpleFSLockFactory_makeLock(t_SimpleFSLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SimpleFSLockFactory), (PyObject *) self, "makeLock", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/stempel/StempelStemmer.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "org/egothor/stemmer/Trie.h"
#include "java/lang/StringBuilder.h"
#include "java/io/InputStream.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace stempel {

          ::java::lang::Class *StempelStemmer::class$ = NULL;
          jmethodID *StempelStemmer::mids$ = NULL;
          bool StempelStemmer::live$ = false;

          jclass StempelStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/stempel/StempelStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
              mids$[mid_init$_366af231] = env->getMethodID(cls, "<init>", "(Lorg/egothor/stemmer/Trie;)V");
              mids$[mid_load_850f7b4e] = env->getStaticMethodID(cls, "load", "(Ljava/io/InputStream;)Lorg/egothor/stemmer/Trie;");
              mids$[mid_stem_50083a71] = env->getMethodID(cls, "stem", "(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StempelStemmer::StempelStemmer(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

          StempelStemmer::StempelStemmer(const ::org::egothor::stemmer::Trie & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_366af231, a0.this$)) {}

          ::org::egothor::stemmer::Trie StempelStemmer::load(const ::java::io::InputStream & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::egothor::stemmer::Trie(env->callStaticObjectMethod(cls, mids$[mid_load_850f7b4e], a0.this$));
          }

          ::java::lang::StringBuilder StempelStemmer::stem(const ::java::lang::CharSequence & a0) const
          {
            return ::java::lang::StringBuilder(env->callObjectMethod(this$, mids$[mid_stem_50083a71], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace stempel {
          static PyObject *t_StempelStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StempelStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StempelStemmer_init_(t_StempelStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StempelStemmer_load(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StempelStemmer_stem(t_StempelStemmer *self, PyObject *arg);

          static PyMethodDef t_StempelStemmer__methods_[] = {
            DECLARE_METHOD(t_StempelStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelStemmer, load, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelStemmer, stem, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StempelStemmer, t_StempelStemmer, ::java::lang::Object, StempelStemmer, t_StempelStemmer_init_, 0, 0, 0, 0, 0);

          void t_StempelStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(StempelStemmer), module, "StempelStemmer", 0);
          }

          void t_StempelStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StempelStemmer).tp_dict, "class_", make_descriptor(StempelStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StempelStemmer).tp_dict, "wrapfn_", make_descriptor(t_StempelStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StempelStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StempelStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StempelStemmer::initializeClass, 1)))
              return NULL;
            return t_StempelStemmer::wrap_Object(StempelStemmer(((t_StempelStemmer *) arg)->object.this$));
          }
          static PyObject *t_StempelStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StempelStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StempelStemmer_init_(t_StempelStemmer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::InputStream a0((jobject) NULL);
                StempelStemmer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                {
                  INT_CALL(object = StempelStemmer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::egothor::stemmer::Trie a0((jobject) NULL);
                StempelStemmer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::egothor::stemmer::Trie::initializeClass, &a0))
                {
                  INT_CALL(object = StempelStemmer(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StempelStemmer_load(PyTypeObject *type, PyObject *arg)
          {
            ::java::io::InputStream a0((jobject) NULL);
            ::org::egothor::stemmer::Trie result((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::stempel::StempelStemmer::load(a0));
              return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "load", arg);
            return NULL;
          }

          static PyObject *t_StempelStemmer_stem(t_StempelStemmer *self, PyObject *arg)
          {
            ::java::lang::CharSequence a0((jobject) NULL);
            ::java::lang::StringBuilder result((jobject) NULL);

            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
            {
              OBJ_CALL(result = self->object.stem(a0));
              return ::java::lang::t_StringBuilder::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode$QueryText.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Cloneable.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *PathQueryNode$QueryText::class$ = NULL;
              jmethodID *PathQueryNode$QueryText::mids$ = NULL;
              bool PathQueryNode$QueryText::live$ = false;

              jclass PathQueryNode$QueryText::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode$QueryText");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_6cc8d7e2] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;II)V");
                  mids$[mid_clone_ec4055b6] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode$QueryText;");
                  mids$[mid_getBegin_54c6a179] = env->getMethodID(cls, "getBegin", "()I");
                  mids$[mid_getEnd_54c6a179] = env->getMethodID(cls, "getEnd", "()I");
                  mids$[mid_getValue_e0adba2f] = env->getMethodID(cls, "getValue", "()Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PathQueryNode$QueryText::PathQueryNode$QueryText(const ::java::lang::CharSequence & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6cc8d7e2, a0.this$, a1, a2)) {}

              PathQueryNode$QueryText PathQueryNode$QueryText::clone() const
              {
                return PathQueryNode$QueryText(env->callObjectMethod(this$, mids$[mid_clone_ec4055b6]));
              }

              jint PathQueryNode$QueryText::getBegin() const
              {
                return env->callIntMethod(this$, mids$[mid_getBegin_54c6a179]);
              }

              jint PathQueryNode$QueryText::getEnd() const
              {
                return env->callIntMethod(this$, mids$[mid_getEnd_54c6a179]);
              }

              ::java::lang::CharSequence PathQueryNode$QueryText::getValue() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getValue_e0adba2f]));
              }

              ::java::lang::String PathQueryNode$QueryText::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_PathQueryNode$QueryText_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PathQueryNode$QueryText_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PathQueryNode$QueryText_init_(t_PathQueryNode$QueryText *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PathQueryNode$QueryText_clone(t_PathQueryNode$QueryText *self);
              static PyObject *t_PathQueryNode$QueryText_getBegin(t_PathQueryNode$QueryText *self);
              static PyObject *t_PathQueryNode$QueryText_getEnd(t_PathQueryNode$QueryText *self);
              static PyObject *t_PathQueryNode$QueryText_getValue(t_PathQueryNode$QueryText *self);
              static PyObject *t_PathQueryNode$QueryText_toString(t_PathQueryNode$QueryText *self, PyObject *args);
              static PyObject *t_PathQueryNode$QueryText_get__begin(t_PathQueryNode$QueryText *self, void *data);
              static PyObject *t_PathQueryNode$QueryText_get__end(t_PathQueryNode$QueryText *self, void *data);
              static PyObject *t_PathQueryNode$QueryText_get__value(t_PathQueryNode$QueryText *self, void *data);
              static PyGetSetDef t_PathQueryNode$QueryText__fields_[] = {
                DECLARE_GET_FIELD(t_PathQueryNode$QueryText, begin),
                DECLARE_GET_FIELD(t_PathQueryNode$QueryText, end),
                DECLARE_GET_FIELD(t_PathQueryNode$QueryText, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_PathQueryNode$QueryText__methods_[] = {
                DECLARE_METHOD(t_PathQueryNode$QueryText, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PathQueryNode$QueryText, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PathQueryNode$QueryText, clone, METH_NOARGS),
                DECLARE_METHOD(t_PathQueryNode$QueryText, getBegin, METH_NOARGS),
                DECLARE_METHOD(t_PathQueryNode$QueryText, getEnd, METH_NOARGS),
                DECLARE_METHOD(t_PathQueryNode$QueryText, getValue, METH_NOARGS),
                DECLARE_METHOD(t_PathQueryNode$QueryText, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(PathQueryNode$QueryText, t_PathQueryNode$QueryText, ::java::lang::Object, PathQueryNode$QueryText, t_PathQueryNode$QueryText_init_, 0, 0, t_PathQueryNode$QueryText__fields_, 0, 0);

              void t_PathQueryNode$QueryText::install(PyObject *module)
              {
                installType(&PY_TYPE(PathQueryNode$QueryText), module, "PathQueryNode$QueryText", 0);
              }

              void t_PathQueryNode$QueryText::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(PathQueryNode$QueryText).tp_dict, "class_", make_descriptor(PathQueryNode$QueryText::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(PathQueryNode$QueryText).tp_dict, "wrapfn_", make_descriptor(t_PathQueryNode$QueryText::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(PathQueryNode$QueryText).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PathQueryNode$QueryText_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PathQueryNode$QueryText::initializeClass, 1)))
                  return NULL;
                return t_PathQueryNode$QueryText::wrap_Object(PathQueryNode$QueryText(((t_PathQueryNode$QueryText *) arg)->object.this$));
              }
              static PyObject *t_PathQueryNode$QueryText_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PathQueryNode$QueryText::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PathQueryNode$QueryText_init_(t_PathQueryNode$QueryText *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jint a1;
                jint a2;
                PathQueryNode$QueryText object((jobject) NULL);

                if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                {
                  INT_CALL(object = PathQueryNode$QueryText(a0, a1, a2));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_PathQueryNode$QueryText_clone(t_PathQueryNode$QueryText *self)
              {
                PathQueryNode$QueryText result((jobject) NULL);
                OBJ_CALL(result = self->object.clone());
                return t_PathQueryNode$QueryText::wrap_Object(result);
              }

              static PyObject *t_PathQueryNode$QueryText_getBegin(t_PathQueryNode$QueryText *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getBegin());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_PathQueryNode$QueryText_getEnd(t_PathQueryNode$QueryText *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getEnd());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_PathQueryNode$QueryText_getValue(t_PathQueryNode$QueryText *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getValue());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_PathQueryNode$QueryText_toString(t_PathQueryNode$QueryText *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(PathQueryNode$QueryText), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_PathQueryNode$QueryText_get__begin(t_PathQueryNode$QueryText *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getBegin());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_PathQueryNode$QueryText_get__end(t_PathQueryNode$QueryText *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getEnd());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_PathQueryNode$QueryText_get__value(t_PathQueryNode$QueryText *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getValue());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/OutputStreamDataOutput.h"
#include "java/io/OutputStream.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *OutputStreamDataOutput::class$ = NULL;
        jmethodID *OutputStreamDataOutput::mids$ = NULL;
        bool OutputStreamDataOutput::live$ = false;

        jclass OutputStreamDataOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/OutputStreamDataOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_82d865f8] = env->getMethodID(cls, "<init>", "(Ljava/io/OutputStream;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_writeByte_b2271687] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_86f4435f] = env->getMethodID(cls, "writeBytes", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OutputStreamDataOutput::OutputStreamDataOutput(const ::java::io::OutputStream & a0) : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_82d865f8, a0.this$)) {}

        void OutputStreamDataOutput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void OutputStreamDataOutput::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_b2271687], a0);
        }

        void OutputStreamDataOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_86f4435f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_OutputStreamDataOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OutputStreamDataOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OutputStreamDataOutput_init_(t_OutputStreamDataOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OutputStreamDataOutput_close(t_OutputStreamDataOutput *self);
        static PyObject *t_OutputStreamDataOutput_writeByte(t_OutputStreamDataOutput *self, PyObject *args);
        static PyObject *t_OutputStreamDataOutput_writeBytes(t_OutputStreamDataOutput *self, PyObject *args);

        static PyMethodDef t_OutputStreamDataOutput__methods_[] = {
          DECLARE_METHOD(t_OutputStreamDataOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OutputStreamDataOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OutputStreamDataOutput, close, METH_NOARGS),
          DECLARE_METHOD(t_OutputStreamDataOutput, writeByte, METH_VARARGS),
          DECLARE_METHOD(t_OutputStreamDataOutput, writeBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OutputStreamDataOutput, t_OutputStreamDataOutput, ::org::apache::lucene::store::DataOutput, OutputStreamDataOutput, t_OutputStreamDataOutput_init_, 0, 0, 0, 0, 0);

        void t_OutputStreamDataOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(OutputStreamDataOutput), module, "OutputStreamDataOutput", 0);
        }

        void t_OutputStreamDataOutput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OutputStreamDataOutput).tp_dict, "class_", make_descriptor(OutputStreamDataOutput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OutputStreamDataOutput).tp_dict, "wrapfn_", make_descriptor(t_OutputStreamDataOutput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OutputStreamDataOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OutputStreamDataOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OutputStreamDataOutput::initializeClass, 1)))
            return NULL;
          return t_OutputStreamDataOutput::wrap_Object(OutputStreamDataOutput(((t_OutputStreamDataOutput *) arg)->object.this$));
        }
        static PyObject *t_OutputStreamDataOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OutputStreamDataOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OutputStreamDataOutput_init_(t_OutputStreamDataOutput *self, PyObject *args, PyObject *kwds)
        {
          ::java::io::OutputStream a0((jobject) NULL);
          OutputStreamDataOutput object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::OutputStream::initializeClass, &a0))
          {
            INT_CALL(object = OutputStreamDataOutput(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OutputStreamDataOutput_close(t_OutputStreamDataOutput *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_OutputStreamDataOutput_writeByte(t_OutputStreamDataOutput *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(OutputStreamDataOutput), (PyObject *) self, "writeByte", args, 2);
        }

        static PyObject *t_OutputStreamDataOutput_writeBytes(t_OutputStreamDataOutput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(OutputStreamDataOutput), (PyObject *) self, "writeBytes", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Collections.h"
#include "java/util/Deque.h"
#include "java/util/NavigableMap.h"
#include "java/lang/Boolean.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "java/util/SortedMap.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "java/util/ArrayList.h"
#include "java/util/Random.h"
#include "java/util/ListIterator.h"
#include "java/util/NavigableSet.h"
#include "java/util/List.h"
#include "java/util/Enumeration.h"
#include "java/util/SortedSet.h"
#include "java/util/Comparator.h"
#include "java/util/Queue.h"
#include "java/lang/Comparable.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *Collections::class$ = NULL;
    jmethodID *Collections::mids$ = NULL;
    bool Collections::live$ = false;
    ::java::util::List *Collections::EMPTY_LIST = NULL;
    ::java::util::Map *Collections::EMPTY_MAP = NULL;
    ::java::util::Set *Collections::EMPTY_SET = NULL;

    jclass Collections::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/Collections");

        mids$ = new jmethodID[max_mid];
        mids$[mid_addAll_7d28570f] = env->getStaticMethodID(cls, "addAll", "(Ljava/util/Collection;[Ljava/lang/Object;)Z");
        mids$[mid_asLifoQueue_69ff1ef4] = env->getStaticMethodID(cls, "asLifoQueue", "(Ljava/util/Deque;)Ljava/util/Queue;");
        mids$[mid_binarySearch_632fb920] = env->getStaticMethodID(cls, "binarySearch", "(Ljava/util/List;Ljava/lang/Object;)I");
        mids$[mid_binarySearch_b1262297] = env->getStaticMethodID(cls, "binarySearch", "(Ljava/util/List;Ljava/lang/Object;Ljava/util/Comparator;)I");
        mids$[mid_checkedCollection_cdb515a1] = env->getStaticMethodID(cls, "checkedCollection", "(Ljava/util/Collection;Ljava/lang/Class;)Ljava/util/Collection;");
        mids$[mid_checkedList_8575df61] = env->getStaticMethodID(cls, "checkedList", "(Ljava/util/List;Ljava/lang/Class;)Ljava/util/List;");
        mids$[mid_checkedMap_92913187] = env->getStaticMethodID(cls, "checkedMap", "(Ljava/util/Map;Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/Map;");
        mids$[mid_checkedNavigableMap_f52dc087] = env->getStaticMethodID(cls, "checkedNavigableMap", "(Ljava/util/NavigableMap;Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/NavigableMap;");
        mids$[mid_checkedNavigableSet_d66e5e45] = env->getStaticMethodID(cls, "checkedNavigableSet", "(Ljava/util/NavigableSet;Ljava/lang/Class;)Ljava/util/NavigableSet;");
        mids$[mid_checkedQueue_1b729da3] = env->getStaticMethodID(cls, "checkedQueue", "(Ljava/util/Queue;Ljava/lang/Class;)Ljava/util/Queue;");
        mids$[mid_checkedSet_0862698d] = env->getStaticMethodID(cls, "checkedSet", "(Ljava/util/Set;Ljava/lang/Class;)Ljava/util/Set;");
        mids$[mid_checkedSortedMap_5e4bff0f] = env->getStaticMethodID(cls, "checkedSortedMap", "(Ljava/util/SortedMap;Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/SortedMap;");
        mids$[mid_checkedSortedSet_342d53e3] = env->getStaticMethodID(cls, "checkedSortedSet", "(Ljava/util/SortedSet;Ljava/lang/Class;)Ljava/util/SortedSet;");
        mids$[mid_copy_cbe63a12] = env->getStaticMethodID(cls, "copy", "(Ljava/util/List;Ljava/util/List;)V");
        mids$[mid_disjoint_05108b4e] = env->getStaticMethodID(cls, "disjoint", "(Ljava/util/Collection;Ljava/util/Collection;)Z");
        mids$[mid_emptyEnumeration_39f88070] = env->getStaticMethodID(cls, "emptyEnumeration", "()Ljava/util/Enumeration;");
        mids$[mid_emptyIterator_40858c90] = env->getStaticMethodID(cls, "emptyIterator", "()Ljava/util/Iterator;");
        mids$[mid_emptyList_87851566] = env->getStaticMethodID(cls, "emptyList", "()Ljava/util/List;");
        mids$[mid_emptyListIterator_b5be4e14] = env->getStaticMethodID(cls, "emptyListIterator", "()Ljava/util/ListIterator;");
        mids$[mid_emptyMap_db60befd] = env->getStaticMethodID(cls, "emptyMap", "()Ljava/util/Map;");
        mids$[mid_emptyNavigableMap_6ede266b] = env->getStaticMethodID(cls, "emptyNavigableMap", "()Ljava/util/NavigableMap;");
        mids$[mid_emptyNavigableSet_1d81e42d] = env->getStaticMethodID(cls, "emptyNavigableSet", "()Ljava/util/NavigableSet;");
        mids$[mid_emptySet_03e99967] = env->getStaticMethodID(cls, "emptySet", "()Ljava/util/Set;");
        mids$[mid_emptySortedMap_ffaadd34] = env->getStaticMethodID(cls, "emptySortedMap", "()Ljava/util/SortedMap;");
        mids$[mid_emptySortedSet_b86b014a] = env->getStaticMethodID(cls, "emptySortedSet", "()Ljava/util/SortedSet;");
        mids$[mid_enumeration_8f4c58e7] = env->getStaticMethodID(cls, "enumeration", "(Ljava/util/Collection;)Ljava/util/Enumeration;");
        mids$[mid_fill_632fb93f] = env->getStaticMethodID(cls, "fill", "(Ljava/util/List;Ljava/lang/Object;)V");
        mids$[mid_frequency_6b08c59a] = env->getStaticMethodID(cls, "frequency", "(Ljava/util/Collection;Ljava/lang/Object;)I");
        mids$[mid_indexOfSubList_cbe63a0d] = env->getStaticMethodID(cls, "indexOfSubList", "(Ljava/util/List;Ljava/util/List;)I");
        mids$[mid_lastIndexOfSubList_cbe63a0d] = env->getStaticMethodID(cls, "lastIndexOfSubList", "(Ljava/util/List;Ljava/util/List;)I");
        mids$[mid_list_0729353f] = env->getStaticMethodID(cls, "list", "(Ljava/util/Enumeration;)Ljava/util/ArrayList;");
        mids$[mid_max_abd1a366] = env->getStaticMethodID(cls, "max", "(Ljava/util/Collection;)Ljava/lang/Object;");
        mids$[mid_max_24cad27f] = env->getStaticMethodID(cls, "max", "(Ljava/util/Collection;Ljava/util/Comparator;)Ljava/lang/Object;");
        mids$[mid_min_abd1a366] = env->getStaticMethodID(cls, "min", "(Ljava/util/Collection;)Ljava/lang/Object;");
        mids$[mid_min_24cad27f] = env->getStaticMethodID(cls, "min", "(Ljava/util/Collection;Ljava/util/Comparator;)Ljava/lang/Object;");
        mids$[mid_nCopies_a26611d0] = env->getStaticMethodID(cls, "nCopies", "(ILjava/lang/Object;)Ljava/util/List;");
        mids$[mid_newSetFromMap_d56f8575] = env->getStaticMethodID(cls, "newSetFromMap", "(Ljava/util/Map;)Ljava/util/Set;");
        mids$[mid_replaceAll_37ceb42b] = env->getStaticMethodID(cls, "replaceAll", "(Ljava/util/List;Ljava/lang/Object;Ljava/lang/Object;)Z");
        mids$[mid_reverse_1fde8fc3] = env->getStaticMethodID(cls, "reverse", "(Ljava/util/List;)V");
        mids$[mid_reverseOrder_5a7ff2fc] = env->getStaticMethodID(cls, "reverseOrder", "()Ljava/util/Comparator;");
        mids$[mid_reverseOrder_4ed2c59d] = env->getStaticMethodID(cls, "reverseOrder", "(Ljava/util/Comparator;)Ljava/util/Comparator;");
        mids$[mid_rotate_fff63b2f] = env->getStaticMethodID(cls, "rotate", "(Ljava/util/List;I)V");
        mids$[mid_shuffle_1fde8fc3] = env->getStaticMethodID(cls, "shuffle", "(Ljava/util/List;)V");
        mids$[mid_shuffle_06ba5e4b] = env->getStaticMethodID(cls, "shuffle", "(Ljava/util/List;Ljava/util/Random;)V");
        mids$[mid_singleton_4c6d62c3] = env->getStaticMethodID(cls, "singleton", "(Ljava/lang/Object;)Ljava/util/Set;");
        mids$[mid_singletonList_71371966] = env->getStaticMethodID(cls, "singletonList", "(Ljava/lang/Object;)Ljava/util/List;");
        mids$[mid_singletonMap_65580ae9] = env->getStaticMethodID(cls, "singletonMap", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;");
        mids$[mid_sort_1fde8fc3] = env->getStaticMethodID(cls, "sort", "(Ljava/util/List;)V");
        mids$[mid_sort_b59215b8] = env->getStaticMethodID(cls, "sort", "(Ljava/util/List;Ljava/util/Comparator;)V");
        mids$[mid_swap_d5c0aeaf] = env->getStaticMethodID(cls, "swap", "(Ljava/util/List;II)V");
        mids$[mid_synchronizedCollection_55c0b625] = env->getStaticMethodID(cls, "synchronizedCollection", "(Ljava/util/Collection;)Ljava/util/Collection;");
        mids$[mid_synchronizedList_4f378251] = env->getStaticMethodID(cls, "synchronizedList", "(Ljava/util/List;)Ljava/util/List;");
        mids$[mid_synchronizedMap_c606628b] = env->getStaticMethodID(cls, "synchronizedMap", "(Ljava/util/Map;)Ljava/util/Map;");
        mids$[mid_synchronizedNavigableMap_8e2dd723] = env->getStaticMethodID(cls, "synchronizedNavigableMap", "(Ljava/util/NavigableMap;)Ljava/util/NavigableMap;");
        mids$[mid_synchronizedNavigableSet_cf367097] = env->getStaticMethodID(cls, "synchronizedNavigableSet", "(Ljava/util/NavigableSet;)Ljava/util/NavigableSet;");
        mids$[mid_synchronizedSet_390c573f] = env->getStaticMethodID(cls, "synchronizedSet", "(Ljava/util/Set;)Ljava/util/Set;");
        mids$[mid_synchronizedSortedMap_93ac548b] = env->getStaticMethodID(cls, "synchronizedSortedMap", "(Ljava/util/SortedMap;)Ljava/util/SortedMap;");
        mids$[mid_synchronizedSortedSet_b705ec3b] = env->getStaticMethodID(cls, "synchronizedSortedSet", "(Ljava/util/SortedSet;)Ljava/util/SortedSet;");
        mids$[mid_unmodifiableCollection_55c0b625] = env->getStaticMethodID(cls, "unmodifiableCollection", "(Ljava/util/Collection;)Ljava/util/Collection;");
        mids$[mid_unmodifiableList_4f378251] = env->getStaticMethodID(cls, "unmodifiableList", "(Ljava/util/List;)Ljava/util/List;");
        mids$[mid_unmodifiableMap_c606628b] = env->getStaticMethodID(cls, "unmodifiableMap", "(Ljava/util/Map;)Ljava/util/Map;");
        mids$[mid_unmodifiableNavigableMap_8e2dd723] = env->getStaticMethodID(cls, "unmodifiableNavigableMap", "(Ljava/util/NavigableMap;)Ljava/util/NavigableMap;");
        mids$[mid_unmodifiableNavigableSet_cf367097] = env->getStaticMethodID(cls, "unmodifiableNavigableSet", "(Ljava/util/NavigableSet;)Ljava/util/NavigableSet;");
        mids$[mid_unmodifiableSet_390c573f] = env->getStaticMethodID(cls, "unmodifiableSet", "(Ljava/util/Set;)Ljava/util/Set;");
        mids$[mid_unmodifiableSortedMap_93ac548b] = env->getStaticMethodID(cls, "unmodifiableSortedMap", "(Ljava/util/SortedMap;)Ljava/util/SortedMap;");
        mids$[mid_unmodifiableSortedSet_b705ec3b] = env->getStaticMethodID(cls, "unmodifiableSortedSet", "(Ljava/util/SortedSet;)Ljava/util/SortedSet;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        EMPTY_LIST = new ::java::util::List(env->getStaticObjectField(cls, "EMPTY_LIST", "Ljava/util/List;"));
        EMPTY_MAP = new ::java::util::Map(env->getStaticObjectField(cls, "EMPTY_MAP", "Ljava/util/Map;"));
        EMPTY_SET = new ::java::util::Set(env->getStaticObjectField(cls, "EMPTY_SET", "Ljava/util/Set;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jboolean Collections::addAll(const ::java::util::Collection & a0, const JArray< ::java::lang::Object > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_addAll_7d28570f], a0.this$, a1.this$);
    }

    ::java::util::Queue Collections::asLifoQueue(const ::java::util::Deque & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Queue(env->callStaticObjectMethod(cls, mids$[mid_asLifoQueue_69ff1ef4], a0.this$));
    }

    jint Collections::binarySearch(const ::java::util::List & a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_632fb920], a0.this$, a1.this$);
    }

    jint Collections::binarySearch(const ::java::util::List & a0, const ::java::lang::Object & a1, const ::java::util::Comparator & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_b1262297], a0.this$, a1.this$, a2.this$);
    }

    ::java::util::Collection Collections::checkedCollection(const ::java::util::Collection & a0, const ::java::lang::Class & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Collection(env->callStaticObjectMethod(cls, mids$[mid_checkedCollection_cdb515a1], a0.this$, a1.this$));
    }

    ::java::util::List Collections::checkedList(const ::java::util::List & a0, const ::java::lang::Class & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_checkedList_8575df61], a0.this$, a1.this$));
    }

    ::java::util::Map Collections::checkedMap(const ::java::util::Map & a0, const ::java::lang::Class & a1, const ::java::lang::Class & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_checkedMap_92913187], a0.this$, a1.this$, a2.this$));
    }

    ::java::util::NavigableMap Collections::checkedNavigableMap(const ::java::util::NavigableMap & a0, const ::java::lang::Class & a1, const ::java::lang::Class & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::NavigableMap(env->callStaticObjectMethod(cls, mids$[mid_checkedNavigableMap_f52dc087], a0.this$, a1.this$, a2.this$));
    }

    ::java::util::NavigableSet Collections::checkedNavigableSet(const ::java::util::NavigableSet & a0, const ::java::lang::Class & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::NavigableSet(env->callStaticObjectMethod(cls, mids$[mid_checkedNavigableSet_d66e5e45], a0.this$, a1.this$));
    }

    ::java::util::Queue Collections::checkedQueue(const ::java::util::Queue & a0, const ::java::lang::Class & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Queue(env->callStaticObjectMethod(cls, mids$[mid_checkedQueue_1b729da3], a0.this$, a1.this$));
    }

    ::java::util::Set Collections::checkedSet(const ::java::util::Set & a0, const ::java::lang::Class & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_checkedSet_0862698d], a0.this$, a1.this$));
    }

    ::java::util::SortedMap Collections::checkedSortedMap(const ::java::util::SortedMap & a0, const ::java::lang::Class & a1, const ::java::lang::Class & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedMap(env->callStaticObjectMethod(cls, mids$[mid_checkedSortedMap_5e4bff0f], a0.this$, a1.this$, a2.this$));
    }

    ::java::util::SortedSet Collections::checkedSortedSet(const ::java::util::SortedSet & a0, const ::java::lang::Class & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedSet(env->callStaticObjectMethod(cls, mids$[mid_checkedSortedSet_342d53e3], a0.this$, a1.this$));
    }

    void Collections::copy(const ::java::util::List & a0, const ::java::util::List & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_copy_cbe63a12], a0.this$, a1.this$);
    }

    jboolean Collections::disjoint(const ::java::util::Collection & a0, const ::java::util::Collection & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_disjoint_05108b4e], a0.this$, a1.this$);
    }

    ::java::util::Enumeration Collections::emptyEnumeration()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Enumeration(env->callStaticObjectMethod(cls, mids$[mid_emptyEnumeration_39f88070]));
    }

    ::java::util::Iterator Collections::emptyIterator()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Iterator(env->callStaticObjectMethod(cls, mids$[mid_emptyIterator_40858c90]));
    }

    ::java::util::List Collections::emptyList()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_emptyList_87851566]));
    }

    ::java::util::ListIterator Collections::emptyListIterator()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::ListIterator(env->callStaticObjectMethod(cls, mids$[mid_emptyListIterator_b5be4e14]));
    }

    ::java::util::Map Collections::emptyMap()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_emptyMap_db60befd]));
    }

    ::java::util::NavigableMap Collections::emptyNavigableMap()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::NavigableMap(env->callStaticObjectMethod(cls, mids$[mid_emptyNavigableMap_6ede266b]));
    }

    ::java::util::NavigableSet Collections::emptyNavigableSet()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::NavigableSet(env->callStaticObjectMethod(cls, mids$[mid_emptyNavigableSet_1d81e42d]));
    }

    ::java::util::Set Collections::emptySet()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_emptySet_03e99967]));
    }

    ::java::util::SortedMap Collections::emptySortedMap()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedMap(env->callStaticObjectMethod(cls, mids$[mid_emptySortedMap_ffaadd34]));
    }

    ::java::util::SortedSet Collections::emptySortedSet()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedSet(env->callStaticObjectMethod(cls, mids$[mid_emptySortedSet_b86b014a]));
    }

    ::java::util::Enumeration Collections::enumeration(const ::java::util::Collection & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Enumeration(env->callStaticObjectMethod(cls, mids$[mid_enumeration_8f4c58e7], a0.this$));
    }

    void Collections::fill(const ::java::util::List & a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_632fb93f], a0.this$, a1.this$);
    }

    jint Collections::frequency(const ::java::util::Collection & a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_frequency_6b08c59a], a0.this$, a1.this$);
    }

    jint Collections::indexOfSubList(const ::java::util::List & a0, const ::java::util::List & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_indexOfSubList_cbe63a0d], a0.this$, a1.this$);
    }

    jint Collections::lastIndexOfSubList(const ::java::util::List & a0, const ::java::util::List & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_lastIndexOfSubList_cbe63a0d], a0.this$, a1.this$);
    }

    ::java::util::ArrayList Collections::list(const ::java::util::Enumeration & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::ArrayList(env->callStaticObjectMethod(cls, mids$[mid_list_0729353f], a0.this$));
    }

    ::java::lang::Object Collections::max$(const ::java::util::Collection & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::Object(env->callStaticObjectMethod(cls, mids$[mid_max_abd1a366], a0.this$));
    }

    ::java::lang::Object Collections::max$(const ::java::util::Collection & a0, const ::java::util::Comparator & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::Object(env->callStaticObjectMethod(cls, mids$[mid_max_24cad27f], a0.this$, a1.this$));
    }

    ::java::lang::Object Collections::min$(const ::java::util::Collection & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::Object(env->callStaticObjectMethod(cls, mids$[mid_min_abd1a366], a0.this$));
    }

    ::java::lang::Object Collections::min$(const ::java::util::Collection & a0, const ::java::util::Comparator & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::Object(env->callStaticObjectMethod(cls, mids$[mid_min_24cad27f], a0.this$, a1.this$));
    }

    ::java::util::List Collections::nCopies(jint a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_nCopies_a26611d0], a0, a1.this$));
    }

    ::java::util::Set Collections::newSetFromMap(const ::java::util::Map & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_newSetFromMap_d56f8575], a0.this$));
    }

    jboolean Collections::replaceAll(const ::java::util::List & a0, const ::java::lang::Object & a1, const ::java::lang::Object & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_replaceAll_37ceb42b], a0.this$, a1.this$, a2.this$);
    }

    void Collections::reverse(const ::java::util::List & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_reverse_1fde8fc3], a0.this$);
    }

    ::java::util::Comparator Collections::reverseOrder()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_reverseOrder_5a7ff2fc]));
    }

    ::java::util::Comparator Collections::reverseOrder(const ::java::util::Comparator & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_reverseOrder_4ed2c59d], a0.this$));
    }

    void Collections::rotate(const ::java::util::List & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_rotate_fff63b2f], a0.this$, a1);
    }

    void Collections::shuffle(const ::java::util::List & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_shuffle_1fde8fc3], a0.this$);
    }

    void Collections::shuffle(const ::java::util::List & a0, const ::java::util::Random & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_shuffle_06ba5e4b], a0.this$, a1.this$);
    }

    ::java::util::Set Collections::singleton(const ::java::lang::Object & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_singleton_4c6d62c3], a0.this$));
    }

    ::java::util::List Collections::singletonList(const ::java::lang::Object & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_singletonList_71371966], a0.this$));
    }

    ::java::util::Map Collections::singletonMap(const ::java::lang::Object & a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_singletonMap_65580ae9], a0.this$, a1.this$));
    }

    void Collections::sort(const ::java::util::List & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_1fde8fc3], a0.this$);
    }

    void Collections::sort(const ::java::util::List & a0, const ::java::util::Comparator & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_b59215b8], a0.this$, a1.this$);
    }

    void Collections::swap(const ::java::util::List & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_swap_d5c0aeaf], a0.this$, a1, a2);
    }

    ::java::util::Collection Collections::synchronizedCollection(const ::java::util::Collection & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Collection(env->callStaticObjectMethod(cls, mids$[mid_synchronizedCollection_55c0b625], a0.this$));
    }

    ::java::util::List Collections::synchronizedList(const ::java::util::List & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_synchronizedList_4f378251], a0.this$));
    }

    ::java::util::Map Collections::synchronizedMap(const ::java::util::Map & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_synchronizedMap_c606628b], a0.this$));
    }

    ::java::util::NavigableMap Collections::synchronizedNavigableMap(const ::java::util::NavigableMap & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::NavigableMap(env->callStaticObjectMethod(cls, mids$[mid_synchronizedNavigableMap_8e2dd723], a0.this$));
    }

    ::java::util::NavigableSet Collections::synchronizedNavigableSet(const ::java::util::NavigableSet & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::NavigableSet(env->callStaticObjectMethod(cls, mids$[mid_synchronizedNavigableSet_cf367097], a0.this$));
    }

    ::java::util::Set Collections::synchronizedSet(const ::java::util::Set & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_synchronizedSet_390c573f], a0.this$));
    }

    ::java::util::SortedMap Collections::synchronizedSortedMap(const ::java::util::SortedMap & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedMap(env->callStaticObjectMethod(cls, mids$[mid_synchronizedSortedMap_93ac548b], a0.this$));
    }

    ::java::util::SortedSet Collections::synchronizedSortedSet(const ::java::util::SortedSet & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedSet(env->callStaticObjectMethod(cls, mids$[mid_synchronizedSortedSet_b705ec3b], a0.this$));
    }

    ::java::util::Collection Collections::unmodifiableCollection(const ::java::util::Collection & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Collection(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableCollection_55c0b625], a0.this$));
    }

    ::java::util::List Collections::unmodifiableList(const ::java::util::List & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableList_4f378251], a0.this$));
    }

    ::java::util::Map Collections::unmodifiableMap(const ::java::util::Map & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableMap_c606628b], a0.this$));
    }

    ::java::util::NavigableMap Collections::unmodifiableNavigableMap(const ::java::util::NavigableMap & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::NavigableMap(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableNavigableMap_8e2dd723], a0.this$));
    }

    ::java::util::NavigableSet Collections::unmodifiableNavigableSet(const ::java::util::NavigableSet & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::NavigableSet(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableNavigableSet_cf367097], a0.this$));
    }

    ::java::util::Set Collections::unmodifiableSet(const ::java::util::Set & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableSet_390c573f], a0.this$));
    }

    ::java::util::SortedMap Collections::unmodifiableSortedMap(const ::java::util::SortedMap & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedMap(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableSortedMap_93ac548b], a0.this$));
    }

    ::java::util::SortedSet Collections::unmodifiableSortedSet(const ::java::util::SortedSet & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedSet(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableSortedSet_b705ec3b], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_Collections_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_addAll(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_asLifoQueue(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_binarySearch(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedCollection(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedList(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedMap(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedNavigableMap(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedNavigableSet(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedQueue(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedSet(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedSortedMap(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedSortedSet(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_copy(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_disjoint(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_emptyEnumeration(PyTypeObject *type);
    static PyObject *t_Collections_emptyIterator(PyTypeObject *type);
    static PyObject *t_Collections_emptyList(PyTypeObject *type);
    static PyObject *t_Collections_emptyListIterator(PyTypeObject *type);
    static PyObject *t_Collections_emptyMap(PyTypeObject *type);
    static PyObject *t_Collections_emptyNavigableMap(PyTypeObject *type);
    static PyObject *t_Collections_emptyNavigableSet(PyTypeObject *type);
    static PyObject *t_Collections_emptySet(PyTypeObject *type);
    static PyObject *t_Collections_emptySortedMap(PyTypeObject *type);
    static PyObject *t_Collections_emptySortedSet(PyTypeObject *type);
    static PyObject *t_Collections_enumeration(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_fill(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_frequency(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_indexOfSubList(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_lastIndexOfSubList(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_list(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_max(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_min(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_nCopies(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_newSetFromMap(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_replaceAll(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_reverse(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_reverseOrder(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_rotate(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_shuffle(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_singleton(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_singletonList(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_singletonMap(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_sort(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_swap(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_synchronizedCollection(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_synchronizedList(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_synchronizedMap(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_synchronizedNavigableMap(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_synchronizedNavigableSet(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_synchronizedSet(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_synchronizedSortedMap(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_synchronizedSortedSet(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableCollection(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableList(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableMap(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableNavigableMap(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableNavigableSet(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableSet(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableSortedMap(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableSortedSet(PyTypeObject *type, PyObject *arg);

    static PyMethodDef t_Collections__methods_[] = {
      DECLARE_METHOD(t_Collections, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, addAll, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, asLifoQueue, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, binarySearch, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedCollection, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedList, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedMap, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedNavigableMap, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedNavigableSet, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedQueue, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedSet, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedSortedMap, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedSortedSet, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, copy, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, disjoint, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptyEnumeration, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptyIterator, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptyList, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptyListIterator, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptyMap, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptyNavigableMap, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptyNavigableSet, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptySet, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptySortedMap, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptySortedSet, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, enumeration, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, fill, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, frequency, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, indexOfSubList, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, lastIndexOfSubList, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, list, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, max, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, min, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, nCopies, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, newSetFromMap, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, replaceAll, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, reverse, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, reverseOrder, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, rotate, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, shuffle, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, singleton, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, singletonList, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, singletonMap, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, sort, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, swap, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedCollection, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedList, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedMap, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedNavigableMap, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedNavigableSet, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedSet, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedSortedMap, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedSortedSet, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableCollection, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableList, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableMap, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableNavigableMap, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableNavigableSet, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableSet, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableSortedMap, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableSortedSet, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Collections, t_Collections, ::java::lang::Object, Collections, abstract_init, 0, 0, 0, 0, 0);

    void t_Collections::install(PyObject *module)
    {
      installType(&PY_TYPE(Collections), module, "Collections", 0);
    }

    void t_Collections::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Collections).tp_dict, "class_", make_descriptor(Collections::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Collections).tp_dict, "wrapfn_", make_descriptor(t_Collections::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Collections).tp_dict, "boxfn_", make_descriptor(boxObject));
      env->getClass(Collections::initializeClass);
      PyDict_SetItemString(PY_TYPE(Collections).tp_dict, "EMPTY_LIST", make_descriptor(::java::util::t_List::wrap_Object(*Collections::EMPTY_LIST)));
      PyDict_SetItemString(PY_TYPE(Collections).tp_dict, "EMPTY_MAP", make_descriptor(::java::util::t_Map::wrap_Object(*Collections::EMPTY_MAP)));
      PyDict_SetItemString(PY_TYPE(Collections).tp_dict, "EMPTY_SET", make_descriptor(::java::util::t_Set::wrap_Object(*Collections::EMPTY_SET)));
    }

    static PyObject *t_Collections_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Collections::initializeClass, 1)))
        return NULL;
      return t_Collections::wrap_Object(Collections(((t_Collections *) arg)->object.this$));
    }
    static PyObject *t_Collections_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Collections::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Collections_addAll(PyTypeObject *type, PyObject *args)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      JArray< ::java::lang::Object > a1((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "K[o", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1))
      {
        OBJ_CALL(result = ::java::util::Collections::addAll(a0, a1));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "addAll", args);
      return NULL;
    }

    static PyObject *t_Collections_asLifoQueue(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Deque a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Queue result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Deque::initializeClass, &a0, &p0, ::java::util::t_Deque::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::asLifoQueue(a0));
        return ::java::util::t_Queue::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "asLifoQueue", arg);
      return NULL;
    }

    static PyObject *t_Collections_binarySearch(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "Ko", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
          {
            OBJ_CALL(result = ::java::util::Collections::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object a1((jobject) NULL);
          ::java::util::Comparator a2((jobject) NULL);
          PyTypeObject **p2;
          jint result;

          if (!parseArgs(args, "KoK", ::java::util::List::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2, &p2, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Collections::binarySearch(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "binarySearch", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedCollection(PyTypeObject *type, PyObject *args)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::util::Collection result((jobject) NULL);

      if (!parseArgs(args, "KK", ::java::util::Collection::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedCollection(a0, a1));
        return ::java::util::t_Collection::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedCollection", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedList(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::util::List result((jobject) NULL);

      if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedList(a0, a1));
        return ::java::util::t_List::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedList", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedMap(PyTypeObject *type, PyObject *args)
    {
      ::java::util::Map a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::lang::Class a2((jobject) NULL);
      PyTypeObject **p2;
      ::java::util::Map result((jobject) NULL);

      if (!parseArgs(args, "KKK", ::java::util::Map::initializeClass, ::java::lang::Class::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_, &a2, &p2, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedMap(a0, a1, a2));
        return ::java::util::t_Map::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedMap", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedNavigableMap(PyTypeObject *type, PyObject *args)
    {
      ::java::util::NavigableMap a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::lang::Class a2((jobject) NULL);
      PyTypeObject **p2;
      ::java::util::NavigableMap result((jobject) NULL);

      if (!parseArgs(args, "KKK", ::java::util::NavigableMap::initializeClass, ::java::lang::Class::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_NavigableMap::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_, &a2, &p2, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedNavigableMap(a0, a1, a2));
        return ::java::util::t_NavigableMap::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedNavigableMap", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedNavigableSet(PyTypeObject *type, PyObject *args)
    {
      ::java::util::NavigableSet a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::util::NavigableSet result((jobject) NULL);

      if (!parseArgs(args, "KK", ::java::util::NavigableSet::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_NavigableSet::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedNavigableSet(a0, a1));
        return ::java::util::t_NavigableSet::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedNavigableSet", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedQueue(PyTypeObject *type, PyObject *args)
    {
      ::java::util::Queue a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::util::Queue result((jobject) NULL);

      if (!parseArgs(args, "KK", ::java::util::Queue::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_Queue::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedQueue(a0, a1));
        return ::java::util::t_Queue::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedQueue", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedSet(PyTypeObject *type, PyObject *args)
    {
      ::java::util::Set a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::util::Set result((jobject) NULL);

      if (!parseArgs(args, "KK", ::java::util::Set::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedSet(a0, a1));
        return ::java::util::t_Set::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedSet", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedSortedMap(PyTypeObject *type, PyObject *args)
    {
      ::java::util::SortedMap a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::lang::Class a2((jobject) NULL);
      PyTypeObject **p2;
      ::java::util::SortedMap result((jobject) NULL);

      if (!parseArgs(args, "KKK", ::java::util::SortedMap::initializeClass, ::java::lang::Class::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_SortedMap::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_, &a2, &p2, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedSortedMap(a0, a1, a2));
        return ::java::util::t_SortedMap::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedSortedMap", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedSortedSet(PyTypeObject *type, PyObject *args)
    {
      ::java::util::SortedSet a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::util::SortedSet result((jobject) NULL);

      if (!parseArgs(args, "KK", ::java::util::SortedSet::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_SortedSet::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedSortedSet(a0, a1));
        return ::java::util::t_SortedSet::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedSortedSet", args);
      return NULL;
    }

    static PyObject *t_Collections_copy(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::List a1((jobject) NULL);
      PyTypeObject **p1;

      if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_List::parameters_))
      {
        OBJ_CALL(::java::util::Collections::copy(a0, a1));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "copy", args);
      return NULL;
    }

    static PyObject *t_Collections_disjoint(PyTypeObject *type, PyObject *args)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Collection a1((jobject) NULL);
      PyTypeObject **p1;
      jboolean result;

      if (!parseArgs(args, "KK", ::java::util::Collection::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1, &p1, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::disjoint(a0, a1));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "disjoint", args);
      return NULL;
    }

    static PyObject *t_Collections_emptyEnumeration(PyTypeObject *type)
    {
      ::java::util::Enumeration result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptyEnumeration());
      return ::java::util::t_Enumeration::wrap_Object(result);
    }

    static PyObject *t_Collections_emptyIterator(PyTypeObject *type)
    {
      ::java::util::Iterator result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptyIterator());
      return ::java::util::t_Iterator::wrap_Object(result);
    }

    static PyObject *t_Collections_emptyList(PyTypeObject *type)
    {
      ::java::util::List result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptyList());
      return ::java::util::t_List::wrap_Object(result);
    }

    static PyObject *t_Collections_emptyListIterator(PyTypeObject *type)
    {
      ::java::util::ListIterator result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptyListIterator());
      return ::java::util::t_ListIterator::wrap_Object(result);
    }

    static PyObject *t_Collections_emptyMap(PyTypeObject *type)
    {
      ::java::util::Map result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptyMap());
      return ::java::util::t_Map::wrap_Object(result);
    }

    static PyObject *t_Collections_emptyNavigableMap(PyTypeObject *type)
    {
      ::java::util::NavigableMap result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptyNavigableMap());
      return ::java::util::t_NavigableMap::wrap_Object(result);
    }

    static PyObject *t_Collections_emptyNavigableSet(PyTypeObject *type)
    {
      ::java::util::NavigableSet result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptyNavigableSet());
      return ::java::util::t_NavigableSet::wrap_Object(result);
    }

    static PyObject *t_Collections_emptySet(PyTypeObject *type)
    {
      ::java::util::Set result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptySet());
      return ::java::util::t_Set::wrap_Object(result);
    }

    static PyObject *t_Collections_emptySortedMap(PyTypeObject *type)
    {
      ::java::util::SortedMap result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptySortedMap());
      return ::java::util::t_SortedMap::wrap_Object(result);
    }

    static PyObject *t_Collections_emptySortedSet(PyTypeObject *type)
    {
      ::java::util::SortedSet result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptySortedSet());
      return ::java::util::t_SortedSet::wrap_Object(result);
    }

    static PyObject *t_Collections_enumeration(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Enumeration result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::enumeration(a0));
        return ::java::util::t_Enumeration::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "enumeration", arg);
      return NULL;
    }

    static PyObject *t_Collections_fill(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Object a1((jobject) NULL);

      if (!parseArgs(args, "Ko", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
      {
        OBJ_CALL(::java::util::Collections::fill(a0, a1));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "fill", args);
      return NULL;
    }

    static PyObject *t_Collections_frequency(PyTypeObject *type, PyObject *args)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Object a1((jobject) NULL);
      jint result;

      if (!parseArgs(args, "Ko", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1))
      {
        OBJ_CALL(result = ::java::util::Collections::frequency(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "frequency", args);
      return NULL;
    }

    static PyObject *t_Collections_indexOfSubList(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::List a1((jobject) NULL);
      PyTypeObject **p1;
      jint result;

      if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_List::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::indexOfSubList(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "indexOfSubList", args);
      return NULL;
    }

    static PyObject *t_Collections_lastIndexOfSubList(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::List a1((jobject) NULL);
      PyTypeObject **p1;
      jint result;

      if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_List::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::lastIndexOfSubList(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "lastIndexOfSubList", args);
      return NULL;
    }

    static PyObject *t_Collections_list(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Enumeration a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::ArrayList result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Enumeration::initializeClass, &a0, &p0, ::java::util::t_Enumeration::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::list(a0));
        return ::java::util::t_ArrayList::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "list", arg);
      return NULL;
    }

    static PyObject *t_Collections_max(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(result = ::java::util::Collections::max$(a0));
            return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::util::Comparator a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, "KK", ::java::util::Collection::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1, &p1, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Collections::max$(a0, a1));
            return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "max", args);
      return NULL;
    }

    static PyObject *t_Collections_min(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(result = ::java::util::Collections::min$(a0));
            return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::util::Comparator a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, "KK", ::java::util::Collection::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1, &p1, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Collections::min$(a0, a1));
            return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "min", args);
      return NULL;
    }

    static PyObject *t_Collections_nCopies(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      ::java::lang::Object a1((jobject) NULL);
      ::java::util::List result((jobject) NULL);

      if (!parseArgs(args, "Io", &a0, &a1))
      {
        OBJ_CALL(result = ::java::util::Collections::nCopies(a0, a1));
        return ::java::util::t_List::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "nCopies", args);
      return NULL;
    }

    static PyObject *t_Collections_newSetFromMap(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Map a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Set result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::newSetFromMap(a0));
        return ::java::util::t_Set::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "newSetFromMap", arg);
      return NULL;
    }

    static PyObject *t_Collections_replaceAll(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Object a1((jobject) NULL);
      ::java::lang::Object a2((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "Koo", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2))
      {
        OBJ_CALL(result = ::java::util::Collections::replaceAll(a0, a1, a2));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "replaceAll", args);
      return NULL;
    }

    static PyObject *t_Collections_reverse(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;

      if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
      {
        OBJ_CALL(::java::util::Collections::reverse(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "reverse", arg);
      return NULL;
    }

    static PyObject *t_Collections_reverseOrder(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = ::java::util::Collections::reverseOrder());
          return ::java::util::t_Comparator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Comparator a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Collections::reverseOrder(a0));
            return ::java::util::t_Comparator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "reverseOrder", args);
      return NULL;
    }

    static PyObject *t_Collections_rotate(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      jint a1;

      if (!parseArgs(args, "KI", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
      {
        OBJ_CALL(::java::util::Collections::rotate(a0, a1));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "rotate", args);
      return NULL;
    }

    static PyObject *t_Collections_shuffle(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(::java::util::Collections::shuffle(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 2:
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::util::Random a1((jobject) NULL);

          if (!parseArgs(args, "Kk", ::java::util::List::initializeClass, ::java::util::Random::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
          {
            OBJ_CALL(::java::util::Collections::shuffle(a0, a1));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError(type, "shuffle", args);
      return NULL;
    }

    static PyObject *t_Collections_singleton(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::util::Set result((jobject) NULL);

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = ::java::util::Collections::singleton(a0));
        return ::java::util::t_Set::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "singleton", arg);
      return NULL;
    }

    static PyObject *t_Collections_singletonList(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::util::List result((jobject) NULL);

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = ::java::util::Collections::singletonList(a0));
        return ::java::util::t_List::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "singletonList", arg);
      return NULL;
    }

    static PyObject *t_Collections_singletonMap(PyTypeObject *type, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object a1((jobject) NULL);
      ::java::util::Map result((jobject) NULL);

      if (!parseArgs(args, "oo", &a0, &a1))
      {
        OBJ_CALL(result = ::java::util::Collections::singletonMap(a0, a1));
        return ::java::util::t_Map::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "singletonMap", args);
      return NULL;
    }

    static PyObject *t_Collections_sort(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(::java::util::Collections::sort(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 2:
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::util::Comparator a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(::java::util::Collections::sort(a0, a1));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError(type, "sort", args);
      return NULL;
    }

    static PyObject *t_Collections_swap(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      jint a1;
      jint a2;

      if (!parseArgs(args, "KII", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2))
      {
        OBJ_CALL(::java::util::Collections::swap(a0, a1, a2));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "swap", args);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedCollection(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Collection result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedCollection(a0));
        return ::java::util::t_Collection::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedCollection", arg);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedList(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::List result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedList(a0));
        return ::java::util::t_List::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedList", arg);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedMap(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Map a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Map result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedMap(a0));
        return ::java::util::t_Map::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedMap", arg);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedNavigableMap(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::NavigableMap a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::NavigableMap result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::NavigableMap::initializeClass, &a0, &p0, ::java::util::t_NavigableMap::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedNavigableMap(a0));
        return ::java::util::t_NavigableMap::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedNavigableMap", arg);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedNavigableSet(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::NavigableSet a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::NavigableSet result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::NavigableSet::initializeClass, &a0, &p0, ::java::util::t_NavigableSet::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedNavigableSet(a0));
        return ::java::util::t_NavigableSet::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedNavigableSet", arg);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedSet(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Set a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Set result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedSet(a0));
        return ::java::util::t_Set::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedSet", arg);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedSortedMap(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::SortedMap a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::SortedMap result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::SortedMap::initializeClass, &a0, &p0, ::java::util::t_SortedMap::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedSortedMap(a0));
        return ::java::util::t_SortedMap::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedSortedMap", arg);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedSortedSet(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::SortedSet a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::SortedSet result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::SortedSet::initializeClass, &a0, &p0, ::java::util::t_SortedSet::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedSortedSet(a0));
        return ::java::util::t_SortedSet::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedSortedSet", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableCollection(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Collection result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableCollection(a0));
        return ::java::util::t_Collection::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableCollection", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableList(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::List result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableList(a0));
        return ::java::util::t_List::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableList", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableMap(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Map a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Map result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableMap(a0));
        return ::java::util::t_Map::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableMap", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableNavigableMap(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::NavigableMap a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::NavigableMap result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::NavigableMap::initializeClass, &a0, &p0, ::java::util::t_NavigableMap::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableNavigableMap(a0));
        return ::java::util::t_NavigableMap::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableNavigableMap", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableNavigableSet(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::NavigableSet a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::NavigableSet result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::NavigableSet::initializeClass, &a0, &p0, ::java::util::t_NavigableSet::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableNavigableSet(a0));
        return ::java::util::t_NavigableSet::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableNavigableSet", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableSet(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Set a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Set result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableSet(a0));
        return ::java::util::t_Set::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableSet", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableSortedMap(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::SortedMap a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::SortedMap result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::SortedMap::initializeClass, &a0, &p0, ::java::util::t_SortedMap::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableSortedMap(a0));
        return ::java::util::t_SortedMap::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableSortedMap", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableSortedSet(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::SortedSet a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::SortedSet result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::SortedSet::initializeClass, &a0, &p0, ::java::util::t_SortedSet::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableSortedSet(a0));
        return ::java::util::t_SortedSet::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableSortedSet", arg);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/QueryRescorer.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *QueryRescorer::class$ = NULL;
        jmethodID *QueryRescorer::mids$ = NULL;
        bool QueryRescorer::live$ = false;

        jclass QueryRescorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/QueryRescorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6e301113] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;)V");
            mids$[mid_explain_2b38e623] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Explanation;I)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_rescore_bd3343d7] = env->getMethodID(cls, "rescore", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_rescore_93dee955] = env->getStaticMethodID(cls, "rescore", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;Lorg/apache/lucene/search/Query;DI)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_combine_a950a3d1] = env->getMethodID(cls, "combine", "(FZF)F");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        QueryRescorer::QueryRescorer(const ::org::apache::lucene::search::Query & a0) : ::org::apache::lucene::search::Rescorer(env->newObject(initializeClass, &mids$, mid_init$_6e301113, a0.this$)) {}

        ::org::apache::lucene::search::Explanation QueryRescorer::explain(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Explanation & a1, jint a2) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_2b38e623], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::TopDocs QueryRescorer::rescore(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::TopDocs & a1, jint a2) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_rescore_bd3343d7], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::TopDocs QueryRescorer::rescore(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::TopDocs & a1, const ::org::apache::lucene::search::Query & a2, jdouble a3, jint a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopDocs(env->callStaticObjectMethod(cls, mids$[mid_rescore_93dee955], a0.this$, a1.this$, a2.this$, a3, a4));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_QueryRescorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_QueryRescorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_QueryRescorer_init_(t_QueryRescorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_QueryRescorer_explain(t_QueryRescorer *self, PyObject *args);
        static PyObject *t_QueryRescorer_rescore(t_QueryRescorer *self, PyObject *args);
        static PyObject *t_QueryRescorer_rescore_(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_QueryRescorer__methods_[] = {
          DECLARE_METHOD(t_QueryRescorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryRescorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryRescorer, explain, METH_VARARGS),
          DECLARE_METHOD(t_QueryRescorer, rescore, METH_VARARGS),
          DECLARE_METHOD(t_QueryRescorer, rescore_, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(QueryRescorer, t_QueryRescorer, ::org::apache::lucene::search::Rescorer, QueryRescorer, t_QueryRescorer_init_, 0, 0, 0, 0, 0);

        void t_QueryRescorer::install(PyObject *module)
        {
          installType(&PY_TYPE(QueryRescorer), module, "QueryRescorer", 0);
        }

        void t_QueryRescorer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(QueryRescorer).tp_dict, "class_", make_descriptor(QueryRescorer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(QueryRescorer).tp_dict, "wrapfn_", make_descriptor(t_QueryRescorer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(QueryRescorer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_QueryRescorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, QueryRescorer::initializeClass, 1)))
            return NULL;
          return t_QueryRescorer::wrap_Object(QueryRescorer(((t_QueryRescorer *) arg)->object.this$));
        }
        static PyObject *t_QueryRescorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, QueryRescorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_QueryRescorer_init_(t_QueryRescorer *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          QueryRescorer object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            INT_CALL(object = QueryRescorer(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_QueryRescorer_explain(t_QueryRescorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Explanation a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::search::Explanation result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Explanation::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.explain(a0, a1, a2));
            return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(QueryRescorer), (PyObject *) self, "explain", args, 2);
        }

        static PyObject *t_QueryRescorer_rescore(t_QueryRescorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::TopDocs a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::search::TopDocs result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.rescore(a0, a1, a2));
            return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(QueryRescorer), (PyObject *) self, "rescore", args, 2);
        }

        static PyObject *t_QueryRescorer_rescore_(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::TopDocs a1((jobject) NULL);
          ::org::apache::lucene::search::Query a2((jobject) NULL);
          jdouble a3;
          jint a4;
          ::org::apache::lucene::search::TopDocs result((jobject) NULL);

          if (!parseArgs(args, "kkkDI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::QueryRescorer::rescore(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "rescore_", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ByteBlockPool$DirectAllocator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ByteBlockPool$DirectAllocator::class$ = NULL;
        jmethodID *ByteBlockPool$DirectAllocator::mids$ = NULL;
        bool ByteBlockPool$DirectAllocator::live$ = false;

        jclass ByteBlockPool$DirectAllocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ByteBlockPool$DirectAllocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_recycleByteBlocks_d3ffa89f] = env->getMethodID(cls, "recycleByteBlocks", "([[BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteBlockPool$DirectAllocator::ByteBlockPool$DirectAllocator() : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ByteBlockPool$DirectAllocator::ByteBlockPool$DirectAllocator(jint a0) : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        void ByteBlockPool$DirectAllocator::recycleByteBlocks(const JArray< JArray< jbyte > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleByteBlocks_d3ffa89f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ByteBlockPool$DirectAllocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteBlockPool$DirectAllocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteBlockPool$DirectAllocator_init_(t_ByteBlockPool$DirectAllocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteBlockPool$DirectAllocator_recycleByteBlocks(t_ByteBlockPool$DirectAllocator *self, PyObject *args);

        static PyMethodDef t_ByteBlockPool$DirectAllocator__methods_[] = {
          DECLARE_METHOD(t_ByteBlockPool$DirectAllocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool$DirectAllocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool$DirectAllocator, recycleByteBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ByteBlockPool$DirectAllocator, t_ByteBlockPool$DirectAllocator, ::org::apache::lucene::util::ByteBlockPool$Allocator, ByteBlockPool$DirectAllocator, t_ByteBlockPool$DirectAllocator_init_, 0, 0, 0, 0, 0);

        void t_ByteBlockPool$DirectAllocator::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteBlockPool$DirectAllocator), module, "ByteBlockPool$DirectAllocator", 0);
        }

        void t_ByteBlockPool$DirectAllocator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$DirectAllocator).tp_dict, "class_", make_descriptor(ByteBlockPool$DirectAllocator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$DirectAllocator).tp_dict, "wrapfn_", make_descriptor(t_ByteBlockPool$DirectAllocator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$DirectAllocator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteBlockPool$DirectAllocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteBlockPool$DirectAllocator::initializeClass, 1)))
            return NULL;
          return t_ByteBlockPool$DirectAllocator::wrap_Object(ByteBlockPool$DirectAllocator(((t_ByteBlockPool$DirectAllocator *) arg)->object.this$));
        }
        static PyObject *t_ByteBlockPool$DirectAllocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteBlockPool$DirectAllocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteBlockPool$DirectAllocator_init_(t_ByteBlockPool$DirectAllocator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ByteBlockPool$DirectAllocator object((jobject) NULL);

              INT_CALL(object = ByteBlockPool$DirectAllocator());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              jint a0;
              ByteBlockPool$DirectAllocator object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = ByteBlockPool$DirectAllocator(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteBlockPool$DirectAllocator_recycleByteBlocks(t_ByteBlockPool$DirectAllocator *self, PyObject *args)
        {
          JArray< JArray< jbyte > > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.recycleByteBlocks(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ByteBlockPool$DirectAllocator), (PyObject *) self, "recycleByteBlocks", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ASCIIFoldingFilterFactory::class$ = NULL;
          jmethodID *ASCIIFoldingFilterFactory::mids$ = NULL;
          bool ASCIIFoldingFilterFactory::live$ = false;

          jclass ASCIIFoldingFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_7c6dfdbe] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ASCIIFoldingFilterFactory::ASCIIFoldingFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::ASCIIFoldingFilter ASCIIFoldingFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::ASCIIFoldingFilter(env->callObjectMethod(this$, mids$[mid_create_7c6dfdbe], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory ASCIIFoldingFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ASCIIFoldingFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ASCIIFoldingFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ASCIIFoldingFilterFactory_init_(t_ASCIIFoldingFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ASCIIFoldingFilterFactory_create(t_ASCIIFoldingFilterFactory *self, PyObject *args);
          static PyObject *t_ASCIIFoldingFilterFactory_getMultiTermComponent(t_ASCIIFoldingFilterFactory *self);
          static PyObject *t_ASCIIFoldingFilterFactory_get__multiTermComponent(t_ASCIIFoldingFilterFactory *self, void *data);
          static PyGetSetDef t_ASCIIFoldingFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_ASCIIFoldingFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ASCIIFoldingFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ASCIIFoldingFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ASCIIFoldingFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ASCIIFoldingFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_ASCIIFoldingFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ASCIIFoldingFilterFactory, t_ASCIIFoldingFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ASCIIFoldingFilterFactory, t_ASCIIFoldingFilterFactory_init_, 0, 0, t_ASCIIFoldingFilterFactory__fields_, 0, 0);

          void t_ASCIIFoldingFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ASCIIFoldingFilterFactory), module, "ASCIIFoldingFilterFactory", 0);
          }

          void t_ASCIIFoldingFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ASCIIFoldingFilterFactory).tp_dict, "class_", make_descriptor(ASCIIFoldingFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ASCIIFoldingFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ASCIIFoldingFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ASCIIFoldingFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ASCIIFoldingFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ASCIIFoldingFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ASCIIFoldingFilterFactory::wrap_Object(ASCIIFoldingFilterFactory(((t_ASCIIFoldingFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ASCIIFoldingFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ASCIIFoldingFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ASCIIFoldingFilterFactory_init_(t_ASCIIFoldingFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ASCIIFoldingFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ASCIIFoldingFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ASCIIFoldingFilterFactory_create(t_ASCIIFoldingFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::ASCIIFoldingFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_ASCIIFoldingFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ASCIIFoldingFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_ASCIIFoldingFilterFactory_getMultiTermComponent(t_ASCIIFoldingFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_ASCIIFoldingFilterFactory_get__multiTermComponent(t_ASCIIFoldingFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene41/Lucene41PostingsBaseFormat.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/PostingsWriterBase.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {

          ::java::lang::Class *Lucene41PostingsBaseFormat::class$ = NULL;
          jmethodID *Lucene41PostingsBaseFormat::mids$ = NULL;
          bool Lucene41PostingsBaseFormat::live$ = false;

          jclass Lucene41PostingsBaseFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene41/Lucene41PostingsBaseFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_postingsReaderBase_927fb3f2] = env->getMethodID(cls, "postingsReaderBase", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/PostingsReaderBase;");
              mids$[mid_postingsWriterBase_c1fe85c2] = env->getMethodID(cls, "postingsWriterBase", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/PostingsWriterBase;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene41PostingsBaseFormat::Lucene41PostingsBaseFormat() : ::org::apache::lucene::codecs::PostingsBaseFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::PostingsReaderBase Lucene41PostingsBaseFormat::postingsReaderBase(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsReaderBase(env->callObjectMethod(this$, mids$[mid_postingsReaderBase_927fb3f2], a0.this$));
          }

          ::org::apache::lucene::codecs::PostingsWriterBase Lucene41PostingsBaseFormat::postingsWriterBase(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsWriterBase(env->callObjectMethod(this$, mids$[mid_postingsWriterBase_c1fe85c2], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {
          static PyObject *t_Lucene41PostingsBaseFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene41PostingsBaseFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene41PostingsBaseFormat_init_(t_Lucene41PostingsBaseFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene41PostingsBaseFormat_postingsReaderBase(t_Lucene41PostingsBaseFormat *self, PyObject *args);
          static PyObject *t_Lucene41PostingsBaseFormat_postingsWriterBase(t_Lucene41PostingsBaseFormat *self, PyObject *args);

          static PyMethodDef t_Lucene41PostingsBaseFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene41PostingsBaseFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41PostingsBaseFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41PostingsBaseFormat, postingsReaderBase, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsBaseFormat, postingsWriterBase, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene41PostingsBaseFormat, t_Lucene41PostingsBaseFormat, ::org::apache::lucene::codecs::PostingsBaseFormat, Lucene41PostingsBaseFormat, t_Lucene41PostingsBaseFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene41PostingsBaseFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene41PostingsBaseFormat), module, "Lucene41PostingsBaseFormat", 0);
          }

          void t_Lucene41PostingsBaseFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsBaseFormat).tp_dict, "class_", make_descriptor(Lucene41PostingsBaseFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsBaseFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene41PostingsBaseFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsBaseFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene41PostingsBaseFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene41PostingsBaseFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene41PostingsBaseFormat::wrap_Object(Lucene41PostingsBaseFormat(((t_Lucene41PostingsBaseFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene41PostingsBaseFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene41PostingsBaseFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene41PostingsBaseFormat_init_(t_Lucene41PostingsBaseFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene41PostingsBaseFormat object((jobject) NULL);

            INT_CALL(object = Lucene41PostingsBaseFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene41PostingsBaseFormat_postingsReaderBase(t_Lucene41PostingsBaseFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsReaderBase result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.postingsReaderBase(a0));
              return ::org::apache::lucene::codecs::t_PostingsReaderBase::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsBaseFormat), (PyObject *) self, "postingsReaderBase", args, 2);
          }

          static PyObject *t_Lucene41PostingsBaseFormat_postingsWriterBase(t_Lucene41PostingsBaseFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsWriterBase result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.postingsWriterBase(a0));
              return ::org::apache::lucene::codecs::t_PostingsWriterBase::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsBaseFormat), (PyObject *) self, "postingsWriterBase", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Object.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Object::class$ = NULL;
    jmethodID *Object::mids$ = NULL;
    bool Object::live$ = false;

    jclass Object::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Object");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_getClass_44a5f2c9] = env->getMethodID(cls, "getClass", "()Ljava/lang/Class;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_notify_54c6a166] = env->getMethodID(cls, "notify", "()V");
        mids$[mid_notifyAll_54c6a166] = env->getMethodID(cls, "notifyAll", "()V");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_wait_54c6a166] = env->getMethodID(cls, "wait", "()V");
        mids$[mid_wait_0ee6df2f] = env->getMethodID(cls, "wait", "(J)V");
        mids$[mid_wait_25d05c8f] = env->getMethodID(cls, "wait", "(JI)V");
        mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Object::Object() : ::JObject(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    jboolean Object::equals(const Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    ::java::lang::Class Object::getClass() const
    {
      return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_getClass_44a5f2c9]));
    }

    jint Object::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    void Object::notify() const
    {
      env->callVoidMethod(this$, mids$[mid_notify_54c6a166]);
    }

    void Object::notifyAll() const
    {
      env->callVoidMethod(this$, mids$[mid_notifyAll_54c6a166]);
    }

    ::java::lang::String Object::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    void Object::wait() const
    {
      env->callVoidMethod(this$, mids$[mid_wait_54c6a166]);
    }

    void Object::wait(jlong a0) const
    {
      env->callVoidMethod(this$, mids$[mid_wait_0ee6df2f], a0);
    }

    void Object::wait(jlong a0, jint a1) const
    {
      env->callVoidMethod(this$, mids$[mid_wait_25d05c8f], a0, a1);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Object_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Object_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Object_init_(t_Object *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Object_equals(t_Object *self, PyObject *arg);
    static PyObject *t_Object_getClass(t_Object *self);
    static PyObject *t_Object_hashCode(t_Object *self);
    static PyObject *t_Object_notify(t_Object *self);
    static PyObject *t_Object_notifyAll(t_Object *self);
    static PyObject *t_Object_toString(t_Object *self);
    static PyObject *t_Object_wait(t_Object *self, PyObject *args);
    static PyObject *t_Object_get__class(t_Object *self, void *data);
    static PyGetSetDef t_Object__fields_[] = {
      DECLARE_GET_FIELD(t_Object, class),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Object__methods_[] = {
      DECLARE_METHOD(t_Object, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Object, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Object, equals, METH_O),
      DECLARE_METHOD(t_Object, getClass, METH_NOARGS),
      DECLARE_METHOD(t_Object, hashCode, METH_NOARGS),
      DECLARE_METHOD(t_Object, notify, METH_NOARGS),
      DECLARE_METHOD(t_Object, notifyAll, METH_NOARGS),
      DECLARE_METHOD(t_Object, toString, METH_NOARGS),
      DECLARE_METHOD(t_Object, wait, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Object, t_Object, JObject, Object, t_Object_init_, 0, 0, t_Object__fields_, 0, 0);

    void t_Object::install(PyObject *module)
    {
      installType(&PY_TYPE(Object), module, "Object", 0);
    }

    void t_Object::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Object).tp_dict, "class_", make_descriptor(Object::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Object).tp_dict, "wrapfn_", make_descriptor(t_Object::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Object).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Object_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Object::initializeClass, 1)))
        return NULL;
      return t_Object::wrap_Object(Object(((t_Object *) arg)->object.this$));
    }
    static PyObject *t_Object_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Object::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Object_init_(t_Object *self, PyObject *args, PyObject *kwds)
    {
      Object object((jobject) NULL);

      INT_CALL(object = Object());
      self->object = object;

      return 0;
    }

    static PyObject *t_Object_equals(t_Object *self, PyObject *arg)
    {
      Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "equals", arg);
      return NULL;
    }

    static PyObject *t_Object_getClass(t_Object *self)
    {
      ::java::lang::Class result((jobject) NULL);
      OBJ_CALL(result = self->object.getClass());
      return ::java::lang::t_Class::wrap_Object(result);
    }

    static PyObject *t_Object_hashCode(t_Object *self)
    {
      jint result;
      OBJ_CALL(result = self->object.hashCode());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Object_notify(t_Object *self)
    {
      OBJ_CALL(self->object.notify());
      Py_RETURN_NONE;
    }

    static PyObject *t_Object_notifyAll(t_Object *self)
    {
      OBJ_CALL(self->object.notifyAll());
      Py_RETURN_NONE;
    }

    static PyObject *t_Object_toString(t_Object *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.toString());
      return j2p(result);
    }

    static PyObject *t_Object_wait(t_Object *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          OBJ_CALL(self->object.wait());
          Py_RETURN_NONE;
        }
        break;
       case 1:
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.wait(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 2:
        {
          jlong a0;
          jint a1;

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(self->object.wait(a0, a1));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "wait", args);
      return NULL;
    }

    static PyObject *t_Object_get__class(t_Object *self, void *data)
    {
      ::java::lang::Class value((jobject) NULL);
      OBJ_CALL(value = self->object.getClass());
      return ::java::lang::t_Class::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/BufferedChecksum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *BufferedChecksum::class$ = NULL;
        jmethodID *BufferedChecksum::mids$ = NULL;
        bool BufferedChecksum::live$ = false;
        jint BufferedChecksum::DEFAULT_BUFFERSIZE = (jint) 0;

        jclass BufferedChecksum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/BufferedChecksum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getValue_54c6a17a] = env->getMethodID(cls, "getValue", "()J");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_update_39c7bd3c] = env->getMethodID(cls, "update", "(I)V");
            mids$[mid_update_86f4435f] = env->getMethodID(cls, "update", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_BUFFERSIZE = env->getStaticIntField(cls, "DEFAULT_BUFFERSIZE");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong BufferedChecksum::getValue() const
        {
          return env->callLongMethod(this$, mids$[mid_getValue_54c6a17a]);
        }

        void BufferedChecksum::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }

        void BufferedChecksum::update(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_update_39c7bd3c], a0);
        }

        void BufferedChecksum::update(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_update_86f4435f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_BufferedChecksum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedChecksum_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedChecksum_getValue(t_BufferedChecksum *self);
        static PyObject *t_BufferedChecksum_reset(t_BufferedChecksum *self);
        static PyObject *t_BufferedChecksum_update(t_BufferedChecksum *self, PyObject *args);
        static PyObject *t_BufferedChecksum_get__value(t_BufferedChecksum *self, void *data);
        static PyGetSetDef t_BufferedChecksum__fields_[] = {
          DECLARE_GET_FIELD(t_BufferedChecksum, value),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BufferedChecksum__methods_[] = {
          DECLARE_METHOD(t_BufferedChecksum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedChecksum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedChecksum, getValue, METH_NOARGS),
          DECLARE_METHOD(t_BufferedChecksum, reset, METH_NOARGS),
          DECLARE_METHOD(t_BufferedChecksum, update, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BufferedChecksum, t_BufferedChecksum, ::java::lang::Object, BufferedChecksum, abstract_init, 0, 0, t_BufferedChecksum__fields_, 0, 0);

        void t_BufferedChecksum::install(PyObject *module)
        {
          installType(&PY_TYPE(BufferedChecksum), module, "BufferedChecksum", 0);
        }

        void t_BufferedChecksum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BufferedChecksum).tp_dict, "class_", make_descriptor(BufferedChecksum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BufferedChecksum).tp_dict, "wrapfn_", make_descriptor(t_BufferedChecksum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BufferedChecksum).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(BufferedChecksum::initializeClass);
          PyDict_SetItemString(PY_TYPE(BufferedChecksum).tp_dict, "DEFAULT_BUFFERSIZE", make_descriptor(BufferedChecksum::DEFAULT_BUFFERSIZE));
        }

        static PyObject *t_BufferedChecksum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BufferedChecksum::initializeClass, 1)))
            return NULL;
          return t_BufferedChecksum::wrap_Object(BufferedChecksum(((t_BufferedChecksum *) arg)->object.this$));
        }
        static PyObject *t_BufferedChecksum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BufferedChecksum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BufferedChecksum_getValue(t_BufferedChecksum *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getValue());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_BufferedChecksum_reset(t_BufferedChecksum *self)
        {
          OBJ_CALL(self->object.reset());
          Py_RETURN_NONE;
        }

        static PyObject *t_BufferedChecksum_update(t_BufferedChecksum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.update(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.update(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "update", args);
          return NULL;
        }

        static PyObject *t_BufferedChecksum_get__value(t_BufferedChecksum *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getValue());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/PrintTaxonomyStats.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/lang/String.h"
#include "java/io/PrintStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *PrintTaxonomyStats::class$ = NULL;
          jmethodID *PrintTaxonomyStats::mids$ = NULL;
          bool PrintTaxonomyStats::live$ = false;

          jclass PrintTaxonomyStats::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/PrintTaxonomyStats");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
              mids$[mid_printStats_aafb31cf] = env->getStaticMethodID(cls, "printStats", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Ljava/io/PrintStream;Z)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PrintTaxonomyStats::PrintTaxonomyStats() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void PrintTaxonomyStats::main(const JArray< ::java::lang::String > & a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
          }

          void PrintTaxonomyStats::printStats(const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a0, const ::java::io::PrintStream & a1, jboolean a2)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_printStats_aafb31cf], a0.this$, a1.this$, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_PrintTaxonomyStats_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PrintTaxonomyStats_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PrintTaxonomyStats_init_(t_PrintTaxonomyStats *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PrintTaxonomyStats_main(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PrintTaxonomyStats_printStats(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_PrintTaxonomyStats__methods_[] = {
            DECLARE_METHOD(t_PrintTaxonomyStats, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrintTaxonomyStats, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrintTaxonomyStats, main, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrintTaxonomyStats, printStats, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PrintTaxonomyStats, t_PrintTaxonomyStats, ::java::lang::Object, PrintTaxonomyStats, t_PrintTaxonomyStats_init_, 0, 0, 0, 0, 0);

          void t_PrintTaxonomyStats::install(PyObject *module)
          {
            installType(&PY_TYPE(PrintTaxonomyStats), module, "PrintTaxonomyStats", 0);
          }

          void t_PrintTaxonomyStats::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PrintTaxonomyStats).tp_dict, "class_", make_descriptor(PrintTaxonomyStats::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PrintTaxonomyStats).tp_dict, "wrapfn_", make_descriptor(t_PrintTaxonomyStats::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PrintTaxonomyStats).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PrintTaxonomyStats_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PrintTaxonomyStats::initializeClass, 1)))
              return NULL;
            return t_PrintTaxonomyStats::wrap_Object(PrintTaxonomyStats(((t_PrintTaxonomyStats *) arg)->object.this$));
          }
          static PyObject *t_PrintTaxonomyStats_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PrintTaxonomyStats::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PrintTaxonomyStats_init_(t_PrintTaxonomyStats *self, PyObject *args, PyObject *kwds)
          {
            PrintTaxonomyStats object((jobject) NULL);

            INT_CALL(object = PrintTaxonomyStats());
            self->object = object;

            return 0;
          }

          static PyObject *t_PrintTaxonomyStats_main(PyTypeObject *type, PyObject *arg)
          {
            JArray< ::java::lang::String > a0((jobject) NULL);

            if (!parseArg(arg, "[s", &a0))
            {
              OBJ_CALL(::org::apache::lucene::facet::taxonomy::PrintTaxonomyStats::main(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "main", arg);
            return NULL;
          }

          static PyObject *t_PrintTaxonomyStats_printStats(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::facet::taxonomy::TaxonomyReader a0((jobject) NULL);
            ::java::io::PrintStream a1((jobject) NULL);
            jboolean a2;

            if (!parseArgs(args, "kkZ", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(::org::apache::lucene::facet::taxonomy::PrintTaxonomyStats::printStats(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "printStats", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/precedence/processors/PrecedenceQueryNodeProcessorPipeline.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace precedence {
            namespace processors {

              ::java::lang::Class *PrecedenceQueryNodeProcessorPipeline::class$ = NULL;
              jmethodID *PrecedenceQueryNodeProcessorPipeline::mids$ = NULL;
              bool PrecedenceQueryNodeProcessorPipeline::live$ = false;

              jclass PrecedenceQueryNodeProcessorPipeline::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/precedence/processors/PrecedenceQueryNodeProcessorPipeline");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_0b1f7132] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PrecedenceQueryNodeProcessorPipeline::PrecedenceQueryNodeProcessorPipeline(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::org::apache::lucene::queryparser::flexible::standard::processors::StandardQueryNodeProcessorPipeline(env->newObject(initializeClass, &mids$, mid_init$_0b1f7132, a0.this$)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace precedence {
            namespace processors {
              static PyObject *t_PrecedenceQueryNodeProcessorPipeline_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PrecedenceQueryNodeProcessorPipeline_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PrecedenceQueryNodeProcessorPipeline_init_(t_PrecedenceQueryNodeProcessorPipeline *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_PrecedenceQueryNodeProcessorPipeline__methods_[] = {
                DECLARE_METHOD(t_PrecedenceQueryNodeProcessorPipeline, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PrecedenceQueryNodeProcessorPipeline, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(PrecedenceQueryNodeProcessorPipeline, t_PrecedenceQueryNodeProcessorPipeline, ::org::apache::lucene::queryparser::flexible::standard::processors::StandardQueryNodeProcessorPipeline, PrecedenceQueryNodeProcessorPipeline, t_PrecedenceQueryNodeProcessorPipeline_init_, 0, 0, 0, 0, 0);

              void t_PrecedenceQueryNodeProcessorPipeline::install(PyObject *module)
              {
                installType(&PY_TYPE(PrecedenceQueryNodeProcessorPipeline), module, "PrecedenceQueryNodeProcessorPipeline", 0);
              }

              void t_PrecedenceQueryNodeProcessorPipeline::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(PrecedenceQueryNodeProcessorPipeline).tp_dict, "class_", make_descriptor(PrecedenceQueryNodeProcessorPipeline::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(PrecedenceQueryNodeProcessorPipeline).tp_dict, "wrapfn_", make_descriptor(t_PrecedenceQueryNodeProcessorPipeline::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(PrecedenceQueryNodeProcessorPipeline).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PrecedenceQueryNodeProcessorPipeline_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PrecedenceQueryNodeProcessorPipeline::initializeClass, 1)))
                  return NULL;
                return t_PrecedenceQueryNodeProcessorPipeline::wrap_Object(PrecedenceQueryNodeProcessorPipeline(((t_PrecedenceQueryNodeProcessorPipeline *) arg)->object.this$));
              }
              static PyObject *t_PrecedenceQueryNodeProcessorPipeline_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PrecedenceQueryNodeProcessorPipeline::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PrecedenceQueryNodeProcessorPipeline_init_(t_PrecedenceQueryNodeProcessorPipeline *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                PrecedenceQueryNodeProcessorPipeline object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  INT_CALL(object = PrecedenceQueryNodeProcessorPipeline(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SimpleTerm.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "java/lang/Comparable.h"
#include "org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor.h"
#include "org/apache/lucene/queryparser/surround/query/DistanceSubQuery.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SimpleTerm::class$ = NULL;
            jmethodID *SimpleTerm::mids$ = NULL;
            bool SimpleTerm::live$ = false;

            jclass SimpleTerm::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SimpleTerm");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
                mids$[mid_addSpanQueries_0564f431] = env->getMethodID(cls, "addSpanQueries", "(Lorg/apache/lucene/queryparser/surround/query/SpanNearClauseFactory;)V");
                mids$[mid_compareTo_a1a1be24] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/queryparser/surround/query/SimpleTerm;)I");
                mids$[mid_distanceSubQueryNotAllowed_14c7b5c5] = env->getMethodID(cls, "distanceSubQueryNotAllowed", "()Ljava/lang/String;");
                mids$[mid_getFieldOperator_14c7b5c5] = env->getMethodID(cls, "getFieldOperator", "()Ljava/lang/String;");
                mids$[mid_getQuote_14c7b5c5] = env->getMethodID(cls, "getQuote", "()Ljava/lang/String;");
                mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_toStringUnquoted_14c7b5c5] = env->getMethodID(cls, "toStringUnquoted", "()Ljava/lang/String;");
                mids$[mid_visitMatchingTerms_330199a1] = env->getMethodID(cls, "visitMatchingTerms", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor;)V");
                mids$[mid_suffixToString_9f94ae34] = env->getMethodID(cls, "suffixToString", "(Ljava/lang/StringBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SimpleTerm::SimpleTerm(jboolean a0) : ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

            void SimpleTerm::addSpanQueries(const ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addSpanQueries_0564f431], a0.this$);
            }

            jint SimpleTerm::compareTo(const SimpleTerm & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_compareTo_a1a1be24], a0.this$);
            }

            ::java::lang::String SimpleTerm::distanceSubQueryNotAllowed() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_distanceSubQueryNotAllowed_14c7b5c5]));
            }

            ::java::lang::String SimpleTerm::getFieldOperator() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldOperator_14c7b5c5]));
            }

            ::java::lang::String SimpleTerm::getQuote() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getQuote_14c7b5c5]));
            }

            ::org::apache::lucene::search::Query SimpleTerm::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30], a0.this$, a1.this$));
            }

            ::java::lang::String SimpleTerm::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }

            ::java::lang::String SimpleTerm::toStringUnquoted() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringUnquoted_14c7b5c5]));
            }

            void SimpleTerm::visitMatchingTerms(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor & a2) const
            {
              env->callVoidMethod(this$, mids$[mid_visitMatchingTerms_330199a1], a0.this$, a1.this$, a2.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SimpleTerm_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SimpleTerm_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SimpleTerm_init_(t_SimpleTerm *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SimpleTerm_addSpanQueries(t_SimpleTerm *self, PyObject *arg);
            static PyObject *t_SimpleTerm_compareTo(t_SimpleTerm *self, PyObject *arg);
            static PyObject *t_SimpleTerm_distanceSubQueryNotAllowed(t_SimpleTerm *self);
            static PyObject *t_SimpleTerm_getFieldOperator(t_SimpleTerm *self);
            static PyObject *t_SimpleTerm_getQuote(t_SimpleTerm *self);
            static PyObject *t_SimpleTerm_makeLuceneQueryFieldNoBoost(t_SimpleTerm *self, PyObject *args);
            static PyObject *t_SimpleTerm_toString(t_SimpleTerm *self, PyObject *args);
            static PyObject *t_SimpleTerm_toStringUnquoted(t_SimpleTerm *self);
            static PyObject *t_SimpleTerm_visitMatchingTerms(t_SimpleTerm *self, PyObject *args);
            static PyObject *t_SimpleTerm_get__fieldOperator(t_SimpleTerm *self, void *data);
            static PyObject *t_SimpleTerm_get__quote(t_SimpleTerm *self, void *data);
            static PyGetSetDef t_SimpleTerm__fields_[] = {
              DECLARE_GET_FIELD(t_SimpleTerm, fieldOperator),
              DECLARE_GET_FIELD(t_SimpleTerm, quote),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_SimpleTerm__methods_[] = {
              DECLARE_METHOD(t_SimpleTerm, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleTerm, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleTerm, addSpanQueries, METH_O),
              DECLARE_METHOD(t_SimpleTerm, compareTo, METH_O),
              DECLARE_METHOD(t_SimpleTerm, distanceSubQueryNotAllowed, METH_NOARGS),
              DECLARE_METHOD(t_SimpleTerm, getFieldOperator, METH_NOARGS),
              DECLARE_METHOD(t_SimpleTerm, getQuote, METH_NOARGS),
              DECLARE_METHOD(t_SimpleTerm, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              DECLARE_METHOD(t_SimpleTerm, toString, METH_VARARGS),
              DECLARE_METHOD(t_SimpleTerm, toStringUnquoted, METH_NOARGS),
              DECLARE_METHOD(t_SimpleTerm, visitMatchingTerms, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SimpleTerm, t_SimpleTerm, ::org::apache::lucene::queryparser::surround::query::SrndQuery, SimpleTerm, t_SimpleTerm_init_, 0, 0, t_SimpleTerm__fields_, 0, 0);

            void t_SimpleTerm::install(PyObject *module)
            {
              installType(&PY_TYPE(SimpleTerm), module, "SimpleTerm", 0);
              PyDict_SetItemString(PY_TYPE(SimpleTerm).tp_dict, "MatchingTermVisitor", make_descriptor(&PY_TYPE(SimpleTerm$MatchingTermVisitor)));
            }

            void t_SimpleTerm::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SimpleTerm).tp_dict, "class_", make_descriptor(SimpleTerm::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SimpleTerm).tp_dict, "wrapfn_", make_descriptor(t_SimpleTerm::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SimpleTerm).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SimpleTerm_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SimpleTerm::initializeClass, 1)))
                return NULL;
              return t_SimpleTerm::wrap_Object(SimpleTerm(((t_SimpleTerm *) arg)->object.this$));
            }
            static PyObject *t_SimpleTerm_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SimpleTerm::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SimpleTerm_init_(t_SimpleTerm *self, PyObject *args, PyObject *kwds)
            {
              jboolean a0;
              SimpleTerm object((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                INT_CALL(object = SimpleTerm(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SimpleTerm_addSpanQueries(t_SimpleTerm *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory::initializeClass, &a0))
              {
                OBJ_CALL(self->object.addSpanQueries(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addSpanQueries", arg);
              return NULL;
            }

            static PyObject *t_SimpleTerm_compareTo(t_SimpleTerm *self, PyObject *arg)
            {
              SimpleTerm a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", SimpleTerm::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.compareTo(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
              return NULL;
            }

            static PyObject *t_SimpleTerm_distanceSubQueryNotAllowed(t_SimpleTerm *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.distanceSubQueryNotAllowed());
              return j2p(result);
            }

            static PyObject *t_SimpleTerm_getFieldOperator(t_SimpleTerm *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getFieldOperator());
              return j2p(result);
            }

            static PyObject *t_SimpleTerm_getQuote(t_SimpleTerm *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getQuote());
              return j2p(result);
            }

            static PyObject *t_SimpleTerm_makeLuceneQueryFieldNoBoost(t_SimpleTerm *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(SimpleTerm), (PyObject *) self, "makeLuceneQueryFieldNoBoost", args, 2);
            }

            static PyObject *t_SimpleTerm_toString(t_SimpleTerm *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(SimpleTerm), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_SimpleTerm_toStringUnquoted(t_SimpleTerm *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.toStringUnquoted());
              return j2p(result);
            }

            static PyObject *t_SimpleTerm_visitMatchingTerms(t_SimpleTerm *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor a2((jobject) NULL);

              if (!parseArgs(args, "ksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.visitMatchingTerms(a0, a1, a2));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "visitMatchingTerms", args);
              return NULL;
            }

            static PyObject *t_SimpleTerm_get__fieldOperator(t_SimpleTerm *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getFieldOperator());
              return j2p(value);
            }

            static PyObject *t_SimpleTerm_get__quote(t_SimpleTerm *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getQuote());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/CodepointCountFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *CodepointCountFilter::class$ = NULL;
          jmethodID *CodepointCountFilter::mids$ = NULL;
          bool CodepointCountFilter::live$ = false;

          jclass CodepointCountFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/CodepointCountFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7f9e10a8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_init$_46a9ddd5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_accept_54c6a16a] = env->getMethodID(cls, "accept", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CodepointCountFilter::CodepointCountFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_7f9e10a8, a0.this$, a1, a2)) {}

          CodepointCountFilter::CodepointCountFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_46a9ddd5, a0.this$, a1.this$, a2, a3)) {}

          jboolean CodepointCountFilter::accept() const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_CodepointCountFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CodepointCountFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CodepointCountFilter_init_(t_CodepointCountFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CodepointCountFilter_accept(t_CodepointCountFilter *self);

          static PyMethodDef t_CodepointCountFilter__methods_[] = {
            DECLARE_METHOD(t_CodepointCountFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CodepointCountFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CodepointCountFilter, accept, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CodepointCountFilter, t_CodepointCountFilter, ::org::apache::lucene::analysis::util::FilteringTokenFilter, CodepointCountFilter, t_CodepointCountFilter_init_, 0, 0, 0, 0, 0);

          void t_CodepointCountFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CodepointCountFilter), module, "CodepointCountFilter", 0);
          }

          void t_CodepointCountFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CodepointCountFilter).tp_dict, "class_", make_descriptor(CodepointCountFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CodepointCountFilter).tp_dict, "wrapfn_", make_descriptor(t_CodepointCountFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CodepointCountFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CodepointCountFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CodepointCountFilter::initializeClass, 1)))
              return NULL;
            return t_CodepointCountFilter::wrap_Object(CodepointCountFilter(((t_CodepointCountFilter *) arg)->object.this$));
          }
          static PyObject *t_CodepointCountFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CodepointCountFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CodepointCountFilter_init_(t_CodepointCountFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                jint a2;
                CodepointCountFilter object((jobject) NULL);

                if (!parseArgs(args, "kII", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = CodepointCountFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jint a2;
                jint a3;
                CodepointCountFilter object((jobject) NULL);

                if (!parseArgs(args, "kkII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = CodepointCountFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CodepointCountFilter_accept(t_CodepointCountFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.accept());
            Py_RETURN_BOOL(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/el/GreekAnalyzer.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {

          ::java::lang::Class *GreekAnalyzer::class$ = NULL;
          jmethodID *GreekAnalyzer::mids$ = NULL;
          bool GreekAnalyzer::live$ = false;
          ::java::lang::String *GreekAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass GreekAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/el/GreekAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GreekAnalyzer::GreekAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          GreekAnalyzer::GreekAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          GreekAnalyzer::GreekAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          GreekAnalyzer::GreekAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet GreekAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {
          static PyObject *t_GreekAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GreekAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GreekAnalyzer_init_(t_GreekAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GreekAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_GreekAnalyzer_get__defaultStopSet(t_GreekAnalyzer *self, void *data);
          static PyGetSetDef t_GreekAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_GreekAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GreekAnalyzer__methods_[] = {
            DECLARE_METHOD(t_GreekAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GreekAnalyzer, t_GreekAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, GreekAnalyzer, t_GreekAnalyzer_init_, 0, 0, t_GreekAnalyzer__fields_, 0, 0);

          void t_GreekAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(GreekAnalyzer), module, "GreekAnalyzer", 0);
          }

          void t_GreekAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GreekAnalyzer).tp_dict, "class_", make_descriptor(GreekAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GreekAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_GreekAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GreekAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(GreekAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(GreekAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*GreekAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_GreekAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GreekAnalyzer::initializeClass, 1)))
              return NULL;
            return t_GreekAnalyzer::wrap_Object(GreekAnalyzer(((t_GreekAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_GreekAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GreekAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GreekAnalyzer_init_(t_GreekAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                GreekAnalyzer object((jobject) NULL);

                INT_CALL(object = GreekAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                GreekAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = GreekAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                GreekAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = GreekAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                GreekAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = GreekAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GreekAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::el::GreekAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_GreekAnalyzer_get__defaultStopSet(t_GreekAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexTermsEnum.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexCapabilities.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {

            ::java::lang::Class *RegexTermsEnum::class$ = NULL;
            jmethodID *RegexTermsEnum::mids$ = NULL;
            bool RegexTermsEnum::live$ = false;

            jclass RegexTermsEnum::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/regex/RegexTermsEnum");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d12accc0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;Lorg/apache/lucene/index/Term;Lorg/apache/lucene/sandbox/queries/regex/RegexCapabilities;)V");
                mids$[mid_accept_30bc08e1] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/FilteredTermsEnum$AcceptStatus;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            RegexTermsEnum::RegexTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0, const ::org::apache::lucene::index::Term & a1, const ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities & a2) : ::org::apache::lucene::index::FilteredTermsEnum(env->newObject(initializeClass, &mids$, mid_init$_d12accc0, a0.this$, a1.this$, a2.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {
            static PyObject *t_RegexTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RegexTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
            static int t_RegexTermsEnum_init_(t_RegexTermsEnum *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_RegexTermsEnum__methods_[] = {
              DECLARE_METHOD(t_RegexTermsEnum, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexTermsEnum, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(RegexTermsEnum, t_RegexTermsEnum, ::org::apache::lucene::index::FilteredTermsEnum, RegexTermsEnum, t_RegexTermsEnum_init_, 0, 0, 0, 0, 0);

            void t_RegexTermsEnum::install(PyObject *module)
            {
              installType(&PY_TYPE(RegexTermsEnum), module, "RegexTermsEnum", 0);
            }

            void t_RegexTermsEnum::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(RegexTermsEnum).tp_dict, "class_", make_descriptor(RegexTermsEnum::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(RegexTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_RegexTermsEnum::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(RegexTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_RegexTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, RegexTermsEnum::initializeClass, 1)))
                return NULL;
              return t_RegexTermsEnum::wrap_Object(RegexTermsEnum(((t_RegexTermsEnum *) arg)->object.this$));
            }
            static PyObject *t_RegexTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, RegexTermsEnum::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_RegexTermsEnum_init_(t_RegexTermsEnum *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
              ::org::apache::lucene::index::Term a1((jobject) NULL);
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities a2((jobject) NULL);
              RegexTermsEnum object((jobject) NULL);

              if (!parseArgs(args, "kkk", ::org::apache::lucene::index::TermsEnum::initializeClass, ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = RegexTermsEnum(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterDirectoryReader.h"
#include "org/apache/lucene/index/FilterDirectoryReader$SubReaderWrapper.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterDirectoryReader::class$ = NULL;
        jmethodID *FilterDirectoryReader::mids$ = NULL;
        bool FilterDirectoryReader::live$ = false;

        jclass FilterDirectoryReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterDirectoryReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_1e43081e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/DirectoryReader;)V");
            mids$[mid_init$_c3fa2163] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/DirectoryReader;Lorg/apache/lucene/index/FilterDirectoryReader$SubReaderWrapper;)V");
            mids$[mid_getIndexCommit_09307276] = env->getMethodID(cls, "getIndexCommit", "()Lorg/apache/lucene/index/IndexCommit;");
            mids$[mid_getVersion_54c6a17a] = env->getMethodID(cls, "getVersion", "()J");
            mids$[mid_isCurrent_54c6a16a] = env->getMethodID(cls, "isCurrent", "()Z");
            mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");
            mids$[mid_doOpenIfChanged_26fd6272] = env->getMethodID(cls, "doOpenIfChanged", "(Lorg/apache/lucene/index/IndexCommit;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doOpenIfChanged_e4ee522b] = env->getMethodID(cls, "doOpenIfChanged", "(Lorg/apache/lucene/index/IndexWriter;Z)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doOpenIfChanged_1de06693] = env->getMethodID(cls, "doOpenIfChanged", "()Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doWrapDirectoryReader_5bb3c60f] = env->getMethodID(cls, "doWrapDirectoryReader", "(Lorg/apache/lucene/index/DirectoryReader;)Lorg/apache/lucene/index/DirectoryReader;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterDirectoryReader::FilterDirectoryReader(const ::org::apache::lucene::index::DirectoryReader & a0) : ::org::apache::lucene::index::DirectoryReader(env->newObject(initializeClass, &mids$, mid_init$_1e43081e, a0.this$)) {}

        FilterDirectoryReader::FilterDirectoryReader(const ::org::apache::lucene::index::DirectoryReader & a0, const ::org::apache::lucene::index::FilterDirectoryReader$SubReaderWrapper & a1) : ::org::apache::lucene::index::DirectoryReader(env->newObject(initializeClass, &mids$, mid_init$_c3fa2163, a0.this$, a1.this$)) {}

        ::org::apache::lucene::index::IndexCommit FilterDirectoryReader::getIndexCommit() const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_getIndexCommit_09307276]));
        }

        jlong FilterDirectoryReader::getVersion() const
        {
          return env->callLongMethod(this$, mids$[mid_getVersion_54c6a17a]);
        }

        jboolean FilterDirectoryReader::isCurrent() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCurrent_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/FilterDirectoryReader$StandardReaderWrapper.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterDirectoryReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectoryReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectoryReader_of_(t_FilterDirectoryReader *self, PyObject *args);
        static int t_FilterDirectoryReader_init_(t_FilterDirectoryReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterDirectoryReader_getIndexCommit(t_FilterDirectoryReader *self, PyObject *args);
        static PyObject *t_FilterDirectoryReader_getVersion(t_FilterDirectoryReader *self, PyObject *args);
        static PyObject *t_FilterDirectoryReader_isCurrent(t_FilterDirectoryReader *self, PyObject *args);
        static PyObject *t_FilterDirectoryReader_get__current(t_FilterDirectoryReader *self, void *data);
        static PyObject *t_FilterDirectoryReader_get__indexCommit(t_FilterDirectoryReader *self, void *data);
        static PyObject *t_FilterDirectoryReader_get__version(t_FilterDirectoryReader *self, void *data);
        static PyObject *t_FilterDirectoryReader_get__parameters_(t_FilterDirectoryReader *self, void *data);
        static PyGetSetDef t_FilterDirectoryReader__fields_[] = {
          DECLARE_GET_FIELD(t_FilterDirectoryReader, current),
          DECLARE_GET_FIELD(t_FilterDirectoryReader, indexCommit),
          DECLARE_GET_FIELD(t_FilterDirectoryReader, version),
          DECLARE_GET_FIELD(t_FilterDirectoryReader, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterDirectoryReader__methods_[] = {
          DECLARE_METHOD(t_FilterDirectoryReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectoryReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectoryReader, of_, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectoryReader, getIndexCommit, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectoryReader, getVersion, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectoryReader, isCurrent, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterDirectoryReader, t_FilterDirectoryReader, ::org::apache::lucene::index::DirectoryReader, FilterDirectoryReader, t_FilterDirectoryReader_init_, 0, 0, t_FilterDirectoryReader__fields_, 0, 0);
        PyObject *t_FilterDirectoryReader::wrap_Object(const FilterDirectoryReader& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterDirectoryReader::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterDirectoryReader *self = (t_FilterDirectoryReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FilterDirectoryReader::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterDirectoryReader::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterDirectoryReader *self = (t_FilterDirectoryReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FilterDirectoryReader::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterDirectoryReader), module, "FilterDirectoryReader", 0);
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader).tp_dict, "StandardReaderWrapper", make_descriptor(&PY_TYPE(FilterDirectoryReader$StandardReaderWrapper)));
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader).tp_dict, "SubReaderWrapper", make_descriptor(&PY_TYPE(FilterDirectoryReader$SubReaderWrapper)));
        }

        void t_FilterDirectoryReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader).tp_dict, "class_", make_descriptor(FilterDirectoryReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader).tp_dict, "wrapfn_", make_descriptor(t_FilterDirectoryReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterDirectoryReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterDirectoryReader::initializeClass, 1)))
            return NULL;
          return t_FilterDirectoryReader::wrap_Object(FilterDirectoryReader(((t_FilterDirectoryReader *) arg)->object.this$));
        }
        static PyObject *t_FilterDirectoryReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterDirectoryReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FilterDirectoryReader_of_(t_FilterDirectoryReader *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FilterDirectoryReader_init_(t_FilterDirectoryReader *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::DirectoryReader a0((jobject) NULL);
              PyTypeObject **p0;
              FilterDirectoryReader object((jobject) NULL);

              if (!parseArgs(args, "K", ::org::apache::lucene::index::DirectoryReader::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_DirectoryReader::parameters_))
              {
                INT_CALL(object = FilterDirectoryReader(a0));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(AtomicReader);
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::DirectoryReader a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::FilterDirectoryReader$SubReaderWrapper a1((jobject) NULL);
              PyTypeObject **p1;
              FilterDirectoryReader object((jobject) NULL);

              if (!parseArgs(args, "KK", ::org::apache::lucene::index::DirectoryReader::initializeClass, ::org::apache::lucene::index::FilterDirectoryReader$SubReaderWrapper::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_DirectoryReader::parameters_, &a1, &p1, ::org::apache::lucene::index::t_FilterDirectoryReader$SubReaderWrapper::parameters_))
              {
                INT_CALL(object = FilterDirectoryReader(a0, a1));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(AtomicReader);
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterDirectoryReader_getIndexCommit(t_FilterDirectoryReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getIndexCommit());
            return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterDirectoryReader), (PyObject *) self, "getIndexCommit", args, 2);
        }

        static PyObject *t_FilterDirectoryReader_getVersion(t_FilterDirectoryReader *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getVersion());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterDirectoryReader), (PyObject *) self, "getVersion", args, 2);
        }

        static PyObject *t_FilterDirectoryReader_isCurrent(t_FilterDirectoryReader *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isCurrent());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilterDirectoryReader), (PyObject *) self, "isCurrent", args, 2);
        }
        static PyObject *t_FilterDirectoryReader_get__parameters_(t_FilterDirectoryReader *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_FilterDirectoryReader_get__current(t_FilterDirectoryReader *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCurrent());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_FilterDirectoryReader_get__indexCommit(t_FilterDirectoryReader *self, void *data)
        {
          ::org::apache::lucene::index::IndexCommit value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexCommit());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(value);
        }

        static PyObject *t_FilterDirectoryReader_get__version(t_FilterDirectoryReader *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getVersion());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector$GroupHead.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractAllGroupHeadsCollector$GroupHead::class$ = NULL;
          jmethodID *AbstractAllGroupHeadsCollector$GroupHead::mids$ = NULL;
          jfieldID *AbstractAllGroupHeadsCollector$GroupHead::fids$ = NULL;
          bool AbstractAllGroupHeadsCollector$GroupHead::live$ = false;

          jclass AbstractAllGroupHeadsCollector$GroupHead::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector$GroupHead");

              mids$ = new jmethodID[max_mid];
              mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
              mids$[mid_updateDocHead_39c7bd3c] = env->getMethodID(cls, "updateDocHead", "(I)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_doc] = env->getFieldID(cls, "doc", "I");
              fids$[fid_groupValue] = env->getFieldID(cls, "groupValue", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint AbstractAllGroupHeadsCollector$GroupHead::_get_doc() const
          {
            return env->getIntField(this$, fids$[fid_doc]);
          }

          void AbstractAllGroupHeadsCollector$GroupHead::_set_doc(jint a0) const
          {
            env->setIntField(this$, fids$[fid_doc], a0);
          }

          ::java::lang::Object AbstractAllGroupHeadsCollector$GroupHead::_get_groupValue() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_groupValue]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_of_(t_AbstractAllGroupHeadsCollector$GroupHead *self, PyObject *args);
          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_get__doc(t_AbstractAllGroupHeadsCollector$GroupHead *self, void *data);
          static int t_AbstractAllGroupHeadsCollector$GroupHead_set__doc(t_AbstractAllGroupHeadsCollector$GroupHead *self, PyObject *arg, void *data);
          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_get__groupValue(t_AbstractAllGroupHeadsCollector$GroupHead *self, void *data);

          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_get__parameters_(t_AbstractAllGroupHeadsCollector$GroupHead *self, void *data);
          static PyGetSetDef t_AbstractAllGroupHeadsCollector$GroupHead__fields_[] = {
            DECLARE_GETSET_FIELD(t_AbstractAllGroupHeadsCollector$GroupHead, doc),
            DECLARE_GET_FIELD(t_AbstractAllGroupHeadsCollector$GroupHead, groupValue),
            DECLARE_GET_FIELD(t_AbstractAllGroupHeadsCollector$GroupHead, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractAllGroupHeadsCollector$GroupHead__methods_[] = {
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector$GroupHead, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector$GroupHead, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector$GroupHead, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractAllGroupHeadsCollector$GroupHead, t_AbstractAllGroupHeadsCollector$GroupHead, ::java::lang::Object, AbstractAllGroupHeadsCollector$GroupHead, abstract_init, 0, 0, t_AbstractAllGroupHeadsCollector$GroupHead__fields_, 0, 0);
          PyObject *t_AbstractAllGroupHeadsCollector$GroupHead::wrap_Object(const AbstractAllGroupHeadsCollector$GroupHead& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractAllGroupHeadsCollector$GroupHead::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractAllGroupHeadsCollector$GroupHead *self = (t_AbstractAllGroupHeadsCollector$GroupHead *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractAllGroupHeadsCollector$GroupHead::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractAllGroupHeadsCollector$GroupHead::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractAllGroupHeadsCollector$GroupHead *self = (t_AbstractAllGroupHeadsCollector$GroupHead *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractAllGroupHeadsCollector$GroupHead::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractAllGroupHeadsCollector$GroupHead), module, "AbstractAllGroupHeadsCollector$GroupHead", 0);
          }

          void t_AbstractAllGroupHeadsCollector$GroupHead::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupHeadsCollector$GroupHead).tp_dict, "class_", make_descriptor(AbstractAllGroupHeadsCollector$GroupHead::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupHeadsCollector$GroupHead).tp_dict, "wrapfn_", make_descriptor(t_AbstractAllGroupHeadsCollector$GroupHead::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupHeadsCollector$GroupHead).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractAllGroupHeadsCollector$GroupHead::initializeClass, 1)))
              return NULL;
            return t_AbstractAllGroupHeadsCollector$GroupHead::wrap_Object(AbstractAllGroupHeadsCollector$GroupHead(((t_AbstractAllGroupHeadsCollector$GroupHead *) arg)->object.this$));
          }
          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractAllGroupHeadsCollector$GroupHead::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_of_(t_AbstractAllGroupHeadsCollector$GroupHead *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }
          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_get__parameters_(t_AbstractAllGroupHeadsCollector$GroupHead *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_get__doc(t_AbstractAllGroupHeadsCollector$GroupHead *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_doc());
            return PyInt_FromLong((long) value);
          }
          static int t_AbstractAllGroupHeadsCollector$GroupHead_set__doc(t_AbstractAllGroupHeadsCollector$GroupHead *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_doc(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "doc", arg);
            return -1;
          }

          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_get__groupValue(t_AbstractAllGroupHeadsCollector$GroupHead *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupValue());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/WordDelimiterIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *WordDelimiterIterator::class$ = NULL;
          jmethodID *WordDelimiterIterator::mids$ = NULL;
          bool WordDelimiterIterator::live$ = false;
          JArray< jbyte > *WordDelimiterIterator::DEFAULT_WORD_DELIM_TABLE = NULL;
          jint WordDelimiterIterator::DONE = (jint) 0;

          jclass WordDelimiterIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/WordDelimiterIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getType_39c7bd28] = env->getStaticMethodID(cls, "getType", "(I)B");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_WORD_DELIM_TABLE = new JArray< jbyte >(env->getStaticObjectField(cls, "DEFAULT_WORD_DELIM_TABLE", "[B"));
              DONE = env->getStaticIntField(cls, "DONE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jbyte WordDelimiterIterator::getType(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticByteMethod(cls, mids$[mid_getType_39c7bd28], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_WordDelimiterIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordDelimiterIterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordDelimiterIterator_getType(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_WordDelimiterIterator__methods_[] = {
            DECLARE_METHOD(t_WordDelimiterIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterIterator, getType, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WordDelimiterIterator, t_WordDelimiterIterator, ::java::lang::Object, WordDelimiterIterator, abstract_init, 0, 0, 0, 0, 0);

          void t_WordDelimiterIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(WordDelimiterIterator), module, "WordDelimiterIterator", 0);
          }

          void t_WordDelimiterIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WordDelimiterIterator).tp_dict, "class_", make_descriptor(WordDelimiterIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WordDelimiterIterator).tp_dict, "wrapfn_", make_descriptor(t_WordDelimiterIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WordDelimiterIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(WordDelimiterIterator::initializeClass);
            PyDict_SetItemString(PY_TYPE(WordDelimiterIterator).tp_dict, "DEFAULT_WORD_DELIM_TABLE", make_descriptor(WordDelimiterIterator::DEFAULT_WORD_DELIM_TABLE->wrap()));
            PyDict_SetItemString(PY_TYPE(WordDelimiterIterator).tp_dict, "DONE", make_descriptor(WordDelimiterIterator::DONE));
          }

          static PyObject *t_WordDelimiterIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordDelimiterIterator::initializeClass, 1)))
              return NULL;
            return t_WordDelimiterIterator::wrap_Object(WordDelimiterIterator(((t_WordDelimiterIterator *) arg)->object.this$));
          }
          static PyObject *t_WordDelimiterIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordDelimiterIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_WordDelimiterIterator_getType(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            jbyte result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::miscellaneous::WordDelimiterIterator::getType(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "getType", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/LockReleaseFailedException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *LockReleaseFailedException::class$ = NULL;
        jmethodID *LockReleaseFailedException::mids$ = NULL;
        bool LockReleaseFailedException::live$ = false;

        jclass LockReleaseFailedException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/LockReleaseFailedException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LockReleaseFailedException::LockReleaseFailedException(const ::java::lang::String & a0) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_LockReleaseFailedException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LockReleaseFailedException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LockReleaseFailedException_init_(t_LockReleaseFailedException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_LockReleaseFailedException__methods_[] = {
          DECLARE_METHOD(t_LockReleaseFailedException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockReleaseFailedException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LockReleaseFailedException, t_LockReleaseFailedException, ::java::io::IOException, LockReleaseFailedException, t_LockReleaseFailedException_init_, 0, 0, 0, 0, 0);

        void t_LockReleaseFailedException::install(PyObject *module)
        {
          installType(&PY_TYPE(LockReleaseFailedException), module, "LockReleaseFailedException", 0);
        }

        void t_LockReleaseFailedException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LockReleaseFailedException).tp_dict, "class_", make_descriptor(LockReleaseFailedException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LockReleaseFailedException).tp_dict, "wrapfn_", make_descriptor(t_LockReleaseFailedException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LockReleaseFailedException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LockReleaseFailedException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LockReleaseFailedException::initializeClass, 1)))
            return NULL;
          return t_LockReleaseFailedException::wrap_Object(LockReleaseFailedException(((t_LockReleaseFailedException *) arg)->object.this$));
        }
        static PyObject *t_LockReleaseFailedException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LockReleaseFailedException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LockReleaseFailedException_init_(t_LockReleaseFailedException *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          LockReleaseFailedException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = LockReleaseFailedException(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/StatePair.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *StatePair::class$ = NULL;
          jmethodID *StatePair::mids$ = NULL;
          bool StatePair::live$ = false;

          jclass StatePair::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/StatePair");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StatePair::StatePair(jint a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

          jboolean StatePair::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint StatePair::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String StatePair::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_StatePair_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StatePair_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StatePair_init_(t_StatePair *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StatePair_equals(t_StatePair *self, PyObject *args);
          static PyObject *t_StatePair_hashCode(t_StatePair *self, PyObject *args);
          static PyObject *t_StatePair_toString(t_StatePair *self, PyObject *args);

          static PyMethodDef t_StatePair__methods_[] = {
            DECLARE_METHOD(t_StatePair, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StatePair, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StatePair, equals, METH_VARARGS),
            DECLARE_METHOD(t_StatePair, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_StatePair, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StatePair, t_StatePair, ::java::lang::Object, StatePair, t_StatePair_init_, 0, 0, 0, 0, 0);

          void t_StatePair::install(PyObject *module)
          {
            installType(&PY_TYPE(StatePair), module, "StatePair", 0);
          }

          void t_StatePair::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StatePair).tp_dict, "class_", make_descriptor(StatePair::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StatePair).tp_dict, "wrapfn_", make_descriptor(t_StatePair::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StatePair).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StatePair_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StatePair::initializeClass, 1)))
              return NULL;
            return t_StatePair::wrap_Object(StatePair(((t_StatePair *) arg)->object.this$));
          }
          static PyObject *t_StatePair_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StatePair::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StatePair_init_(t_StatePair *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            StatePair object((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              INT_CALL(object = StatePair(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StatePair_equals(t_StatePair *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(StatePair), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_StatePair_hashCode(t_StatePair *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(StatePair), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_StatePair_toString(t_StatePair *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(StatePair), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/PayloadFunction.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *PayloadFunction::class$ = NULL;
          jmethodID *PayloadFunction::mids$ = NULL;
          bool PayloadFunction::live$ = false;

          jclass PayloadFunction::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/PayloadFunction");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_currentScore_9fe8c3f6] = env->getMethodID(cls, "currentScore", "(ILjava/lang/String;IIIFF)F");
              mids$[mid_docScore_08788a8d] = env->getMethodID(cls, "docScore", "(ILjava/lang/String;IF)F");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_explain_33812a26] = env->getMethodID(cls, "explain", "(ILjava/lang/String;IF)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PayloadFunction::PayloadFunction() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat PayloadFunction::currentScore(jint a0, const ::java::lang::String & a1, jint a2, jint a3, jint a4, jfloat a5, jfloat a6) const
          {
            return env->callFloatMethod(this$, mids$[mid_currentScore_9fe8c3f6], a0, a1.this$, a2, a3, a4, a5, a6);
          }

          jfloat PayloadFunction::docScore(jint a0, const ::java::lang::String & a1, jint a2, jfloat a3) const
          {
            return env->callFloatMethod(this$, mids$[mid_docScore_08788a8d], a0, a1.this$, a2, a3);
          }

          jboolean PayloadFunction::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::search::Explanation PayloadFunction::explain(jint a0, const ::java::lang::String & a1, jint a2, jfloat a3) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_33812a26], a0, a1.this$, a2, a3));
          }

          jint PayloadFunction::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_PayloadFunction_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadFunction_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PayloadFunction_init_(t_PayloadFunction *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PayloadFunction_currentScore(t_PayloadFunction *self, PyObject *args);
          static PyObject *t_PayloadFunction_docScore(t_PayloadFunction *self, PyObject *args);
          static PyObject *t_PayloadFunction_equals(t_PayloadFunction *self, PyObject *args);
          static PyObject *t_PayloadFunction_explain(t_PayloadFunction *self, PyObject *args);
          static PyObject *t_PayloadFunction_hashCode(t_PayloadFunction *self, PyObject *args);

          static PyMethodDef t_PayloadFunction__methods_[] = {
            DECLARE_METHOD(t_PayloadFunction, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadFunction, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadFunction, currentScore, METH_VARARGS),
            DECLARE_METHOD(t_PayloadFunction, docScore, METH_VARARGS),
            DECLARE_METHOD(t_PayloadFunction, equals, METH_VARARGS),
            DECLARE_METHOD(t_PayloadFunction, explain, METH_VARARGS),
            DECLARE_METHOD(t_PayloadFunction, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadFunction, t_PayloadFunction, ::java::lang::Object, PayloadFunction, t_PayloadFunction_init_, 0, 0, 0, 0, 0);

          void t_PayloadFunction::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadFunction), module, "PayloadFunction", 0);
          }

          void t_PayloadFunction::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadFunction).tp_dict, "class_", make_descriptor(PayloadFunction::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadFunction).tp_dict, "wrapfn_", make_descriptor(t_PayloadFunction::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadFunction_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadFunction::initializeClass, 1)))
              return NULL;
            return t_PayloadFunction::wrap_Object(PayloadFunction(((t_PayloadFunction *) arg)->object.this$));
          }
          static PyObject *t_PayloadFunction_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadFunction::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PayloadFunction_init_(t_PayloadFunction *self, PyObject *args, PyObject *kwds)
          {
            PayloadFunction object((jobject) NULL);

            INT_CALL(object = PayloadFunction());
            self->object = object;

            return 0;
          }

          static PyObject *t_PayloadFunction_currentScore(t_PayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jint a3;
            jint a4;
            jfloat a5;
            jfloat a6;
            jfloat result;

            if (!parseArgs(args, "IsIIIFF", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              OBJ_CALL(result = self->object.currentScore(a0, a1, a2, a3, a4, a5, a6));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "currentScore", args);
            return NULL;
          }

          static PyObject *t_PayloadFunction_docScore(t_PayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jfloat a3;
            jfloat result;

            if (!parseArgs(args, "IsIF", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.docScore(a0, a1, a2, a3));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "docScore", args);
            return NULL;
          }

          static PyObject *t_PayloadFunction_equals(t_PayloadFunction *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PayloadFunction), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PayloadFunction_explain(t_PayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jfloat a3;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "IsIF", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.explain(a0, a1, a2, a3));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", args);
            return NULL;
          }

          static PyObject *t_PayloadFunction_hashCode(t_PayloadFunction *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PayloadFunction), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/SimpleHTMLEncoder.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *SimpleHTMLEncoder::class$ = NULL;
          jmethodID *SimpleHTMLEncoder::mids$ = NULL;
          bool SimpleHTMLEncoder::live$ = false;

          jclass SimpleHTMLEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/SimpleHTMLEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_encodeText_97a5258f] = env->getMethodID(cls, "encodeText", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_htmlEncode_97a5258f] = env->getStaticMethodID(cls, "htmlEncode", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleHTMLEncoder::SimpleHTMLEncoder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::java::lang::String SimpleHTMLEncoder::encodeText(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_encodeText_97a5258f], a0.this$));
          }

          ::java::lang::String SimpleHTMLEncoder::htmlEncode(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_htmlEncode_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_SimpleHTMLEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleHTMLEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleHTMLEncoder_init_(t_SimpleHTMLEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleHTMLEncoder_encodeText(t_SimpleHTMLEncoder *self, PyObject *arg);
          static PyObject *t_SimpleHTMLEncoder_htmlEncode(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_SimpleHTMLEncoder__methods_[] = {
            DECLARE_METHOD(t_SimpleHTMLEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleHTMLEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleHTMLEncoder, encodeText, METH_O),
            DECLARE_METHOD(t_SimpleHTMLEncoder, htmlEncode, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleHTMLEncoder, t_SimpleHTMLEncoder, ::java::lang::Object, SimpleHTMLEncoder, t_SimpleHTMLEncoder_init_, 0, 0, 0, 0, 0);

          void t_SimpleHTMLEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleHTMLEncoder), module, "SimpleHTMLEncoder", 0);
          }

          void t_SimpleHTMLEncoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleHTMLEncoder).tp_dict, "class_", make_descriptor(SimpleHTMLEncoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleHTMLEncoder).tp_dict, "wrapfn_", make_descriptor(t_SimpleHTMLEncoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleHTMLEncoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleHTMLEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleHTMLEncoder::initializeClass, 1)))
              return NULL;
            return t_SimpleHTMLEncoder::wrap_Object(SimpleHTMLEncoder(((t_SimpleHTMLEncoder *) arg)->object.this$));
          }
          static PyObject *t_SimpleHTMLEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleHTMLEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleHTMLEncoder_init_(t_SimpleHTMLEncoder *self, PyObject *args, PyObject *kwds)
          {
            SimpleHTMLEncoder object((jobject) NULL);

            INT_CALL(object = SimpleHTMLEncoder());
            self->object = object;

            return 0;
          }

          static PyObject *t_SimpleHTMLEncoder_encodeText(t_SimpleHTMLEncoder *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.encodeText(a0));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "encodeText", arg);
            return NULL;
          }

          static PyObject *t_SimpleHTMLEncoder_htmlEncode(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::highlight::SimpleHTMLEncoder::htmlEncode(a0));
              return j2p(result);
            }

            PyErr_SetArgsError(type, "htmlEncode", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/ClasspathResourceLoader.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/lang/ClassLoader.h"
#include "java/io/InputStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *ClasspathResourceLoader::class$ = NULL;
          jmethodID *ClasspathResourceLoader::mids$ = NULL;
          bool ClasspathResourceLoader::live$ = false;

          jclass ClasspathResourceLoader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/ClasspathResourceLoader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_a5deaff4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Class;)V");
              mids$[mid_init$_9110048d] = env->getMethodID(cls, "<init>", "(Ljava/lang/ClassLoader;)V");
              mids$[mid_findClass_4aee1c89] = env->getMethodID(cls, "findClass", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Class;");
              mids$[mid_newInstance_61899367] = env->getMethodID(cls, "newInstance", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;");
              mids$[mid_openResource_222e59eb] = env->getMethodID(cls, "openResource", "(Ljava/lang/String;)Ljava/io/InputStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ClasspathResourceLoader::ClasspathResourceLoader() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ClasspathResourceLoader::ClasspathResourceLoader(const ::java::lang::Class & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a5deaff4, a0.this$)) {}

          ClasspathResourceLoader::ClasspathResourceLoader(const ::java::lang::ClassLoader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9110048d, a0.this$)) {}

          ::java::lang::Class ClasspathResourceLoader::findClass(const ::java::lang::String & a0, const ::java::lang::Class & a1) const
          {
            return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_findClass_4aee1c89], a0.this$, a1.this$));
          }

          ::java::lang::Object ClasspathResourceLoader::newInstance(const ::java::lang::String & a0, const ::java::lang::Class & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_newInstance_61899367], a0.this$, a1.this$));
          }

          ::java::io::InputStream ClasspathResourceLoader::openResource(const ::java::lang::String & a0) const
          {
            return ::java::io::InputStream(env->callObjectMethod(this$, mids$[mid_openResource_222e59eb], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_ClasspathResourceLoader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ClasspathResourceLoader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ClasspathResourceLoader_init_(t_ClasspathResourceLoader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ClasspathResourceLoader_findClass(t_ClasspathResourceLoader *self, PyObject *args);
          static PyObject *t_ClasspathResourceLoader_newInstance(t_ClasspathResourceLoader *self, PyObject *args);
          static PyObject *t_ClasspathResourceLoader_openResource(t_ClasspathResourceLoader *self, PyObject *arg);

          static PyMethodDef t_ClasspathResourceLoader__methods_[] = {
            DECLARE_METHOD(t_ClasspathResourceLoader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClasspathResourceLoader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClasspathResourceLoader, findClass, METH_VARARGS),
            DECLARE_METHOD(t_ClasspathResourceLoader, newInstance, METH_VARARGS),
            DECLARE_METHOD(t_ClasspathResourceLoader, openResource, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ClasspathResourceLoader, t_ClasspathResourceLoader, ::java::lang::Object, ClasspathResourceLoader, t_ClasspathResourceLoader_init_, 0, 0, 0, 0, 0);

          void t_ClasspathResourceLoader::install(PyObject *module)
          {
            installType(&PY_TYPE(ClasspathResourceLoader), module, "ClasspathResourceLoader", 0);
          }

          void t_ClasspathResourceLoader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ClasspathResourceLoader).tp_dict, "class_", make_descriptor(ClasspathResourceLoader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ClasspathResourceLoader).tp_dict, "wrapfn_", make_descriptor(t_ClasspathResourceLoader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ClasspathResourceLoader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ClasspathResourceLoader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ClasspathResourceLoader::initializeClass, 1)))
              return NULL;
            return t_ClasspathResourceLoader::wrap_Object(ClasspathResourceLoader(((t_ClasspathResourceLoader *) arg)->object.this$));
          }
          static PyObject *t_ClasspathResourceLoader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ClasspathResourceLoader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ClasspathResourceLoader_init_(t_ClasspathResourceLoader *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ClasspathResourceLoader object((jobject) NULL);

                INT_CALL(object = ClasspathResourceLoader());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::lang::Class a0((jobject) NULL);
                PyTypeObject **p0;
                ClasspathResourceLoader object((jobject) NULL);

                if (!parseArgs(args, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
                {
                  INT_CALL(object = ClasspathResourceLoader(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::lang::ClassLoader a0((jobject) NULL);
                ClasspathResourceLoader object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::lang::ClassLoader::initializeClass, &a0))
                {
                  INT_CALL(object = ClasspathResourceLoader(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ClasspathResourceLoader_findClass(t_ClasspathResourceLoader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Class result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = self->object.findClass(a0, a1));
              return ::java::lang::t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "findClass", args);
            return NULL;
          }

          static PyObject *t_ClasspathResourceLoader_newInstance(t_ClasspathResourceLoader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = self->object.newInstance(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "newInstance", args);
            return NULL;
          }

          static PyObject *t_ClasspathResourceLoader_openResource(t_ClasspathResourceLoader *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::io::InputStream result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.openResource(a0));
              return ::java::io::t_InputStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "openResource", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/KpStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *KpStemmer::class$ = NULL;
        jmethodID *KpStemmer::mids$ = NULL;
        bool KpStemmer::live$ = false;

        jclass KpStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/KpStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        KpStemmer::KpStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean KpStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint KpStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean KpStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_KpStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_KpStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_KpStemmer_init_(t_KpStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_KpStemmer_equals(t_KpStemmer *self, PyObject *args);
        static PyObject *t_KpStemmer_hashCode(t_KpStemmer *self, PyObject *args);
        static PyObject *t_KpStemmer_stem(t_KpStemmer *self, PyObject *args);

        static PyMethodDef t_KpStemmer__methods_[] = {
          DECLARE_METHOD(t_KpStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_KpStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_KpStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_KpStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_KpStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(KpStemmer, t_KpStemmer, ::org::tartarus::snowball::SnowballProgram, KpStemmer, t_KpStemmer_init_, 0, 0, 0, 0, 0);

        void t_KpStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(KpStemmer), module, "KpStemmer", 0);
        }

        void t_KpStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(KpStemmer).tp_dict, "class_", make_descriptor(KpStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(KpStemmer).tp_dict, "wrapfn_", make_descriptor(t_KpStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(KpStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_KpStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, KpStemmer::initializeClass, 1)))
            return NULL;
          return t_KpStemmer::wrap_Object(KpStemmer(((t_KpStemmer *) arg)->object.this$));
        }
        static PyObject *t_KpStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, KpStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_KpStemmer_init_(t_KpStemmer *self, PyObject *args, PyObject *kwds)
        {
          KpStemmer object((jobject) NULL);

          INT_CALL(object = KpStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_KpStemmer_equals(t_KpStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(KpStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_KpStemmer_hashCode(t_KpStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(KpStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_KpStemmer_stem(t_KpStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(KpStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ByteBlockPool.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/ByteBlockPool$Allocator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ByteBlockPool::class$ = NULL;
        jmethodID *ByteBlockPool::mids$ = NULL;
        jfieldID *ByteBlockPool::fids$ = NULL;
        bool ByteBlockPool::live$ = false;
        jint ByteBlockPool::BYTE_BLOCK_MASK = (jint) 0;
        jint ByteBlockPool::BYTE_BLOCK_SHIFT = (jint) 0;
        jint ByteBlockPool::BYTE_BLOCK_SIZE = (jint) 0;
        jint ByteBlockPool::FIRST_LEVEL_SIZE = (jint) 0;
        JArray< jint > *ByteBlockPool::LEVEL_SIZE_ARRAY = NULL;
        JArray< jint > *ByteBlockPool::NEXT_LEVEL_ARRAY = NULL;

        jclass ByteBlockPool::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ByteBlockPool");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5679a66b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/ByteBlockPool$Allocator;)V");
            mids$[mid_allocSlice_b8354c5c] = env->getMethodID(cls, "allocSlice", "([BI)I");
            mids$[mid_append_7bc03dc4] = env->getMethodID(cls, "append", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_newSlice_39c7bd23] = env->getMethodID(cls, "newSlice", "(I)I");
            mids$[mid_nextBuffer_54c6a166] = env->getMethodID(cls, "nextBuffer", "()V");
            mids$[mid_readBytes_d6ca92d6] = env->getMethodID(cls, "readBytes", "(J[BII)V");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_reset_46f2e2c4] = env->getMethodID(cls, "reset", "(ZZ)V");
            mids$[mid_setBytesRef_738fc2ce] = env->getMethodID(cls, "setBytesRef", "(Lorg/apache/lucene/util/BytesRef;I)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_buffer] = env->getFieldID(cls, "buffer", "[B");
            fids$[fid_buffers] = env->getFieldID(cls, "buffers", "[[B");
            fids$[fid_byteOffset] = env->getFieldID(cls, "byteOffset", "I");
            fids$[fid_byteUpto] = env->getFieldID(cls, "byteUpto", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            BYTE_BLOCK_MASK = env->getStaticIntField(cls, "BYTE_BLOCK_MASK");
            BYTE_BLOCK_SHIFT = env->getStaticIntField(cls, "BYTE_BLOCK_SHIFT");
            BYTE_BLOCK_SIZE = env->getStaticIntField(cls, "BYTE_BLOCK_SIZE");
            FIRST_LEVEL_SIZE = env->getStaticIntField(cls, "FIRST_LEVEL_SIZE");
            LEVEL_SIZE_ARRAY = new JArray< jint >(env->getStaticObjectField(cls, "LEVEL_SIZE_ARRAY", "[I"));
            NEXT_LEVEL_ARRAY = new JArray< jint >(env->getStaticObjectField(cls, "NEXT_LEVEL_ARRAY", "[I"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteBlockPool::ByteBlockPool(const ::org::apache::lucene::util::ByteBlockPool$Allocator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5679a66b, a0.this$)) {}

        jint ByteBlockPool::allocSlice(const JArray< jbyte > & a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_allocSlice_b8354c5c], a0.this$, a1);
        }

        void ByteBlockPool::append(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_append_7bc03dc4], a0.this$);
        }

        jint ByteBlockPool::newSlice(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_newSlice_39c7bd23], a0);
        }

        void ByteBlockPool::nextBuffer() const
        {
          env->callVoidMethod(this$, mids$[mid_nextBuffer_54c6a166]);
        }

        void ByteBlockPool::readBytes(jlong a0, const JArray< jbyte > & a1, jint a2, jint a3) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_d6ca92d6], a0, a1.this$, a2, a3);
        }

        void ByteBlockPool::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }

        void ByteBlockPool::reset(jboolean a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_46f2e2c4], a0, a1);
        }

        void ByteBlockPool::setBytesRef(const ::org::apache::lucene::util::BytesRef & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setBytesRef_738fc2ce], a0.this$, a1);
        }

        JArray< jbyte > ByteBlockPool::_get_buffer() const
        {
          return JArray< jbyte >(env->getObjectField(this$, fids$[fid_buffer]));
        }

        void ByteBlockPool::_set_buffer(const JArray< jbyte > & a0) const
        {
          env->setObjectField(this$, fids$[fid_buffer], a0.this$);
        }

        JArray< JArray< jbyte > > ByteBlockPool::_get_buffers() const
        {
          return JArray< JArray< jbyte > >(env->getObjectField(this$, fids$[fid_buffers]));
        }

        void ByteBlockPool::_set_buffers(const JArray< JArray< jbyte > > & a0) const
        {
          env->setObjectField(this$, fids$[fid_buffers], a0.this$);
        }

        jint ByteBlockPool::_get_byteOffset() const
        {
          return env->getIntField(this$, fids$[fid_byteOffset]);
        }

        void ByteBlockPool::_set_byteOffset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_byteOffset], a0);
        }

        jint ByteBlockPool::_get_byteUpto() const
        {
          return env->getIntField(this$, fids$[fid_byteUpto]);
        }

        void ByteBlockPool::_set_byteUpto(jint a0) const
        {
          env->setIntField(this$, fids$[fid_byteUpto], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/ByteBlockPool$DirectTrackingAllocator.h"
#include "org/apache/lucene/util/ByteBlockPool$DirectAllocator.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ByteBlockPool_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteBlockPool_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteBlockPool_init_(t_ByteBlockPool *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteBlockPool_allocSlice(t_ByteBlockPool *self, PyObject *args);
        static PyObject *t_ByteBlockPool_append(t_ByteBlockPool *self, PyObject *arg);
        static PyObject *t_ByteBlockPool_newSlice(t_ByteBlockPool *self, PyObject *arg);
        static PyObject *t_ByteBlockPool_nextBuffer(t_ByteBlockPool *self);
        static PyObject *t_ByteBlockPool_readBytes(t_ByteBlockPool *self, PyObject *args);
        static PyObject *t_ByteBlockPool_reset(t_ByteBlockPool *self, PyObject *args);
        static PyObject *t_ByteBlockPool_setBytesRef(t_ByteBlockPool *self, PyObject *args);
        static PyObject *t_ByteBlockPool_get__buffer(t_ByteBlockPool *self, void *data);
        static int t_ByteBlockPool_set__buffer(t_ByteBlockPool *self, PyObject *arg, void *data);
        static PyObject *t_ByteBlockPool_get__buffers(t_ByteBlockPool *self, void *data);
        static int t_ByteBlockPool_set__buffers(t_ByteBlockPool *self, PyObject *arg, void *data);
        static PyObject *t_ByteBlockPool_get__byteOffset(t_ByteBlockPool *self, void *data);
        static int t_ByteBlockPool_set__byteOffset(t_ByteBlockPool *self, PyObject *arg, void *data);
        static PyObject *t_ByteBlockPool_get__byteUpto(t_ByteBlockPool *self, void *data);
        static int t_ByteBlockPool_set__byteUpto(t_ByteBlockPool *self, PyObject *arg, void *data);

        static PyGetSetDef t_ByteBlockPool__fields_[] = {
          DECLARE_GETSET_FIELD(t_ByteBlockPool, buffer),
          DECLARE_GETSET_FIELD(t_ByteBlockPool, buffers),
          DECLARE_GETSET_FIELD(t_ByteBlockPool, byteOffset),
          DECLARE_GETSET_FIELD(t_ByteBlockPool, byteUpto),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ByteBlockPool__methods_[] = {
          DECLARE_METHOD(t_ByteBlockPool, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool, allocSlice, METH_VARARGS),
          DECLARE_METHOD(t_ByteBlockPool, append, METH_O),
          DECLARE_METHOD(t_ByteBlockPool, newSlice, METH_O),
          DECLARE_METHOD(t_ByteBlockPool, nextBuffer, METH_NOARGS),
          DECLARE_METHOD(t_ByteBlockPool, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_ByteBlockPool, reset, METH_VARARGS),
          DECLARE_METHOD(t_ByteBlockPool, setBytesRef, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ByteBlockPool, t_ByteBlockPool, ::java::lang::Object, ByteBlockPool, t_ByteBlockPool_init_, 0, 0, t_ByteBlockPool__fields_, 0, 0);

        void t_ByteBlockPool::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteBlockPool), module, "ByteBlockPool", 0);
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "DirectTrackingAllocator", make_descriptor(&PY_TYPE(ByteBlockPool$DirectTrackingAllocator)));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "DirectAllocator", make_descriptor(&PY_TYPE(ByteBlockPool$DirectAllocator)));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "Allocator", make_descriptor(&PY_TYPE(ByteBlockPool$Allocator)));
        }

        void t_ByteBlockPool::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "class_", make_descriptor(ByteBlockPool::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "wrapfn_", make_descriptor(t_ByteBlockPool::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(ByteBlockPool::initializeClass);
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "BYTE_BLOCK_MASK", make_descriptor(ByteBlockPool::BYTE_BLOCK_MASK));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "BYTE_BLOCK_SHIFT", make_descriptor(ByteBlockPool::BYTE_BLOCK_SHIFT));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "BYTE_BLOCK_SIZE", make_descriptor(ByteBlockPool::BYTE_BLOCK_SIZE));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "FIRST_LEVEL_SIZE", make_descriptor(ByteBlockPool::FIRST_LEVEL_SIZE));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "LEVEL_SIZE_ARRAY", make_descriptor(ByteBlockPool::LEVEL_SIZE_ARRAY->wrap()));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "NEXT_LEVEL_ARRAY", make_descriptor(ByteBlockPool::NEXT_LEVEL_ARRAY->wrap()));
        }

        static PyObject *t_ByteBlockPool_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteBlockPool::initializeClass, 1)))
            return NULL;
          return t_ByteBlockPool::wrap_Object(ByteBlockPool(((t_ByteBlockPool *) arg)->object.this$));
        }
        static PyObject *t_ByteBlockPool_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteBlockPool::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteBlockPool_init_(t_ByteBlockPool *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::ByteBlockPool$Allocator a0((jobject) NULL);
          ByteBlockPool object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::ByteBlockPool$Allocator::initializeClass, &a0))
          {
            INT_CALL(object = ByteBlockPool(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteBlockPool_allocSlice(t_ByteBlockPool *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "[BI", &a0, &a1))
          {
            OBJ_CALL(result = self->object.allocSlice(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "allocSlice", args);
          return NULL;
        }

        static PyObject *t_ByteBlockPool_append(t_ByteBlockPool *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.append(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "append", arg);
          return NULL;
        }

        static PyObject *t_ByteBlockPool_newSlice(t_ByteBlockPool *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.newSlice(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "newSlice", arg);
          return NULL;
        }

        static PyObject *t_ByteBlockPool_nextBuffer(t_ByteBlockPool *self)
        {
          OBJ_CALL(self->object.nextBuffer());
          Py_RETURN_NONE;
        }

        static PyObject *t_ByteBlockPool_readBytes(t_ByteBlockPool *self, PyObject *args)
        {
          jlong a0;
          JArray< jbyte > a1((jobject) NULL);
          jint a2;
          jint a3;

          if (!parseArgs(args, "J[BII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.readBytes(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "readBytes", args);
          return NULL;
        }

        static PyObject *t_ByteBlockPool_reset(t_ByteBlockPool *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }
            break;
           case 2:
            {
              jboolean a0;
              jboolean a1;

              if (!parseArgs(args, "ZZ", &a0, &a1))
              {
                OBJ_CALL(self->object.reset(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "reset", args);
          return NULL;
        }

        static PyObject *t_ByteBlockPool_setBytesRef(t_ByteBlockPool *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.setBytesRef(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBytesRef", args);
          return NULL;
        }

        static PyObject *t_ByteBlockPool_get__buffer(t_ByteBlockPool *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_buffer());
          return value.wrap();
        }
        static int t_ByteBlockPool_set__buffer(t_ByteBlockPool *self, PyObject *arg, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          if (!parseArg(arg, "[B", &value))
          {
            INT_CALL(self->object._set_buffer(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "buffer", arg);
          return -1;
        }

        static PyObject *t_ByteBlockPool_get__buffers(t_ByteBlockPool *self, void *data)
        {
          JArray< JArray< jbyte > > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_buffers());
          return JArray<jobject>(value.this$).wrap(NULL);
        }
        static int t_ByteBlockPool_set__buffers(t_ByteBlockPool *self, PyObject *arg, void *data)
        {
          JArray< JArray< jbyte > > value((jobject) NULL);
          if (!parseArg(arg, "[[B", &value))
          {
            INT_CALL(self->object._set_buffers(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "buffers", arg);
          return -1;
        }

        static PyObject *t_ByteBlockPool_get__byteOffset(t_ByteBlockPool *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_byteOffset());
          return PyInt_FromLong((long) value);
        }
        static int t_ByteBlockPool_set__byteOffset(t_ByteBlockPool *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_byteOffset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "byteOffset", arg);
          return -1;
        }

        static PyObject *t_ByteBlockPool_get__byteUpto(t_ByteBlockPool *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_byteUpto());
          return PyInt_FromLong((long) value);
        }
        static int t_ByteBlockPool_set__byteUpto(t_ByteBlockPool *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_byteUpto(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "byteUpto", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefHash$BytesStartArray.h"
#include "org/apache/lucene/util/Counter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefHash$BytesStartArray::class$ = NULL;
        jmethodID *BytesRefHash$BytesStartArray::mids$ = NULL;
        bool BytesRefHash$BytesStartArray::live$ = false;

        jclass BytesRefHash$BytesStartArray::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefHash$BytesStartArray");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_bytesUsed_781dd30a] = env->getMethodID(cls, "bytesUsed", "()Lorg/apache/lucene/util/Counter;");
            mids$[mid_clear_dab10e75] = env->getMethodID(cls, "clear", "()[I");
            mids$[mid_grow_dab10e75] = env->getMethodID(cls, "grow", "()[I");
            mids$[mid_init_dab10e75] = env->getMethodID(cls, "init", "()[I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BytesRefHash$BytesStartArray::BytesRefHash$BytesStartArray() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::util::Counter BytesRefHash$BytesStartArray::bytesUsed() const
        {
          return ::org::apache::lucene::util::Counter(env->callObjectMethod(this$, mids$[mid_bytesUsed_781dd30a]));
        }

        JArray< jint > BytesRefHash$BytesStartArray::clear() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_clear_dab10e75]));
        }

        JArray< jint > BytesRefHash$BytesStartArray::grow() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_grow_dab10e75]));
        }

        JArray< jint > BytesRefHash$BytesStartArray::init() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_init_dab10e75]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefHash$BytesStartArray_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefHash$BytesStartArray_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BytesRefHash$BytesStartArray_init_(t_BytesRefHash$BytesStartArray *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BytesRefHash$BytesStartArray_bytesUsed(t_BytesRefHash$BytesStartArray *self);
        static PyObject *t_BytesRefHash$BytesStartArray_clear(t_BytesRefHash$BytesStartArray *self);
        static PyObject *t_BytesRefHash$BytesStartArray_grow(t_BytesRefHash$BytesStartArray *self);
        static PyObject *t_BytesRefHash$BytesStartArray_init(t_BytesRefHash$BytesStartArray *self);

        static PyMethodDef t_BytesRefHash$BytesStartArray__methods_[] = {
          DECLARE_METHOD(t_BytesRefHash$BytesStartArray, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash$BytesStartArray, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash$BytesStartArray, bytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefHash$BytesStartArray, clear, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefHash$BytesStartArray, grow, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefHash$BytesStartArray, init, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BytesRefHash$BytesStartArray, t_BytesRefHash$BytesStartArray, ::java::lang::Object, BytesRefHash$BytesStartArray, t_BytesRefHash$BytesStartArray_init_, 0, 0, 0, 0, 0);

        void t_BytesRefHash$BytesStartArray::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefHash$BytesStartArray), module, "BytesRefHash$BytesStartArray", 0);
        }

        void t_BytesRefHash$BytesStartArray::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BytesRefHash$BytesStartArray).tp_dict, "class_", make_descriptor(BytesRefHash$BytesStartArray::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BytesRefHash$BytesStartArray).tp_dict, "wrapfn_", make_descriptor(t_BytesRefHash$BytesStartArray::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BytesRefHash$BytesStartArray).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BytesRefHash$BytesStartArray_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefHash$BytesStartArray::initializeClass, 1)))
            return NULL;
          return t_BytesRefHash$BytesStartArray::wrap_Object(BytesRefHash$BytesStartArray(((t_BytesRefHash$BytesStartArray *) arg)->object.this$));
        }
        static PyObject *t_BytesRefHash$BytesStartArray_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefHash$BytesStartArray::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BytesRefHash$BytesStartArray_init_(t_BytesRefHash$BytesStartArray *self, PyObject *args, PyObject *kwds)
        {
          BytesRefHash$BytesStartArray object((jobject) NULL);

          INT_CALL(object = BytesRefHash$BytesStartArray());
          self->object = object;

          return 0;
        }

        static PyObject *t_BytesRefHash$BytesStartArray_bytesUsed(t_BytesRefHash$BytesStartArray *self)
        {
          ::org::apache::lucene::util::Counter result((jobject) NULL);
          OBJ_CALL(result = self->object.bytesUsed());
          return ::org::apache::lucene::util::t_Counter::wrap_Object(result);
        }

        static PyObject *t_BytesRefHash$BytesStartArray_clear(t_BytesRefHash$BytesStartArray *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.clear());
          return result.wrap();
        }

        static PyObject *t_BytesRefHash$BytesStartArray_grow(t_BytesRefHash$BytesStartArray *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.grow());
          return result.wrap();
        }

        static PyObject *t_BytesRefHash$BytesStartArray_init(t_BytesRefHash$BytesStartArray *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.init());
          return result.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Bits$MatchNoBits.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Bits$MatchNoBits::class$ = NULL;
        jmethodID *Bits$MatchNoBits::mids$ = NULL;
        bool Bits$MatchNoBits::live$ = false;

        jclass Bits$MatchNoBits::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Bits$MatchNoBits");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_get_39c7bd30] = env->getMethodID(cls, "get", "(I)Z");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Bits$MatchNoBits::Bits$MatchNoBits(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        jboolean Bits$MatchNoBits::get(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_39c7bd30], a0);
        }

        jint Bits$MatchNoBits::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Bits$MatchNoBits_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Bits$MatchNoBits_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Bits$MatchNoBits_init_(t_Bits$MatchNoBits *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Bits$MatchNoBits_get(t_Bits$MatchNoBits *self, PyObject *arg);
        static PyObject *t_Bits$MatchNoBits_length(t_Bits$MatchNoBits *self);

        static PyMethodDef t_Bits$MatchNoBits__methods_[] = {
          DECLARE_METHOD(t_Bits$MatchNoBits, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bits$MatchNoBits, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bits$MatchNoBits, get, METH_O),
          DECLARE_METHOD(t_Bits$MatchNoBits, length, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Bits$MatchNoBits, t_Bits$MatchNoBits, ::java::lang::Object, Bits$MatchNoBits, t_Bits$MatchNoBits_init_, 0, 0, 0, 0, 0);

        void t_Bits$MatchNoBits::install(PyObject *module)
        {
          installType(&PY_TYPE(Bits$MatchNoBits), module, "Bits$MatchNoBits", 0);
        }

        void t_Bits$MatchNoBits::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Bits$MatchNoBits).tp_dict, "class_", make_descriptor(Bits$MatchNoBits::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Bits$MatchNoBits).tp_dict, "wrapfn_", make_descriptor(t_Bits$MatchNoBits::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Bits$MatchNoBits).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Bits$MatchNoBits_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Bits$MatchNoBits::initializeClass, 1)))
            return NULL;
          return t_Bits$MatchNoBits::wrap_Object(Bits$MatchNoBits(((t_Bits$MatchNoBits *) arg)->object.this$));
        }
        static PyObject *t_Bits$MatchNoBits_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Bits$MatchNoBits::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Bits$MatchNoBits_init_(t_Bits$MatchNoBits *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          Bits$MatchNoBits object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = Bits$MatchNoBits(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Bits$MatchNoBits_get(t_Bits$MatchNoBits *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_Bits$MatchNoBits_length(t_Bits$MatchNoBits *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonSet.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "java/util/Iterator.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonSet::class$ = NULL;
        jmethodID *PythonSet::mids$ = NULL;
        bool PythonSet::live$ = false;

        jclass PythonSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_290588e2] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
            mids$[mid_addAll_9bfb3701] = env->getMethodID(cls, "addAll", "(Ljava/util/Collection;)Z");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
            mids$[mid_containsAll_9bfb3701] = env->getMethodID(cls, "containsAll", "(Ljava/util/Collection;)Z");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
            mids$[mid_removeAll_9bfb3701] = env->getMethodID(cls, "removeAll", "(Ljava/util/Collection;)Z");
            mids$[mid_retainAll_9bfb3701] = env->getMethodID(cls, "retainAll", "(Ljava/util/Collection;)Z");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_toArray_94e49c77] = env->getMethodID(cls, "toArray", "()[Ljava/lang/Object;");
            mids$[mid_toArray_ae67dbcf] = env->getMethodID(cls, "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonSet::PythonSet() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean PythonSet::equals(const ::java::lang::Object & a0) const
        {
          return env->callNonvirtualBooleanMethod(this$, (jclass) ::java::lang::Object::class$->this$, ::java::lang::Object::mids$[::java::lang::Object::mid_equals_290588e2], a0.this$);
        }

        void PythonSet::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonSet::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonSet::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }

        JArray< ::java::lang::Object > PythonSet::toArray(const JArray< ::java::lang::Object > & a0) const
        {
          return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_ae67dbcf], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonSet_init_(t_PythonSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonSet_equals(t_PythonSet *self, PyObject *args);
        static PyObject *t_PythonSet_finalize(t_PythonSet *self);
        static PyObject *t_PythonSet_pythonExtension(t_PythonSet *self, PyObject *args);
        static PyObject *t_PythonSet_toArray(t_PythonSet *self, PyObject *arg);
        static jboolean JNICALL t_PythonSet_add0(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonSet_addAll1(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonSet_clear2(JNIEnv *jenv, jobject jobj);
        static jboolean JNICALL t_PythonSet_contains3(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonSet_containsAll4(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonSet_equals5(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonSet_isEmpty6(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonSet_iterator7(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonSet_pythonDecRef8(JNIEnv *jenv, jobject jobj);
        static jboolean JNICALL t_PythonSet_remove9(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonSet_removeAll10(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonSet_retainAll11(JNIEnv *jenv, jobject jobj, jobject a0);
        static jint JNICALL t_PythonSet_size12(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonSet_toArray13(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonSet_get__self(t_PythonSet *self, void *data);
        static PyGetSetDef t_PythonSet__fields_[] = {
          DECLARE_GET_FIELD(t_PythonSet, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonSet__methods_[] = {
          DECLARE_METHOD(t_PythonSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonSet, equals, METH_VARARGS),
          DECLARE_METHOD(t_PythonSet, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonSet, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonSet, toArray, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonSet, t_PythonSet, ::java::lang::Object, PythonSet, t_PythonSet_init_, get_extension_iterator, 0, t_PythonSet__fields_, 0, 0);

        void t_PythonSet::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonSet), module, "PythonSet", 1);
        }

        void t_PythonSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonSet).tp_dict, "class_", make_descriptor(PythonSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonSet).tp_dict, "wrapfn_", make_descriptor(t_PythonSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonSet).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonSet::initializeClass);
          JNINativeMethod methods[] = {
            { "add", "(Ljava/lang/Object;)Z", (void *) t_PythonSet_add0 },
            { "addAll", "(Ljava/util/Collection;)Z", (void *) t_PythonSet_addAll1 },
            { "clear", "()V", (void *) t_PythonSet_clear2 },
            { "contains", "(Ljava/lang/Object;)Z", (void *) t_PythonSet_contains3 },
            { "containsAll", "(Ljava/util/Collection;)Z", (void *) t_PythonSet_containsAll4 },
            { "equals", "(Ljava/lang/Object;)Z", (void *) t_PythonSet_equals5 },
            { "isEmpty", "()Z", (void *) t_PythonSet_isEmpty6 },
            { "iterator", "()Ljava/util/Iterator;", (void *) t_PythonSet_iterator7 },
            { "pythonDecRef", "()V", (void *) t_PythonSet_pythonDecRef8 },
            { "remove", "(Ljava/lang/Object;)Z", (void *) t_PythonSet_remove9 },
            { "removeAll", "(Ljava/util/Collection;)Z", (void *) t_PythonSet_removeAll10 },
            { "retainAll", "(Ljava/util/Collection;)Z", (void *) t_PythonSet_retainAll11 },
            { "size", "()I", (void *) t_PythonSet_size12 },
            { "toArray", "()[Ljava/lang/Object;", (void *) t_PythonSet_toArray13 },
          };
          env->registerNatives(cls, methods, 14);
        }

        static PyObject *t_PythonSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonSet::initializeClass, 1)))
            return NULL;
          return t_PythonSet::wrap_Object(PythonSet(((t_PythonSet *) arg)->object.this$));
        }
        static PyObject *t_PythonSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonSet_init_(t_PythonSet *self, PyObject *args, PyObject *kwds)
        {
          PythonSet object((jobject) NULL);

          INT_CALL(object = PythonSet());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonSet_equals(t_PythonSet *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PythonSet), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PythonSet_finalize(t_PythonSet *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonSet_pythonExtension(t_PythonSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonSet_toArray(t_PythonSet *self, PyObject *arg)
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArg(arg, "[o", &a0))
          {
            OBJ_CALL(result = self->object.toArray(a0));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }

          PyErr_SetArgsError((PyObject *) self, "toArray", arg);
          return NULL;
        }

        static jboolean JNICALL t_PythonSet_add0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "add", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("add", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonSet_addAll1(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "addAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("addAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonSet_clear2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "clear", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jboolean JNICALL t_PythonSet_contains3(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "contains", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("contains", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonSet_containsAll4(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "containsAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("containsAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonSet_equals5(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "equals", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("equals", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonSet_isEmpty6(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "isEmpty", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("isEmpty", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jobject JNICALL t_PythonSet_iterator7(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::util::Iterator value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "iterator", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::java::util::Iterator::initializeClass, &value))
          {
            throwTypeError("iterator", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonSet_pythonDecRef8(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jboolean JNICALL t_PythonSet_remove9(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "remove", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("remove", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonSet_removeAll10(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "removeAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("removeAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonSet_retainAll11(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "retainAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("retainAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jint JNICALL t_PythonSet_size12(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *result = PyObject_CallMethod(obj, "size", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("size", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static jobject JNICALL t_PythonSet_toArray13(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          JArray< ::java::lang::Object > value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "toArray", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "[o", &value))
          {
            throwTypeError("toArray", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonSet_get__self(t_PythonSet *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/AbstractSet.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *AbstractSet::class$ = NULL;
    jmethodID *AbstractSet::mids$ = NULL;
    bool AbstractSet::live$ = false;

    jclass AbstractSet::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/AbstractSet");

        mids$ = new jmethodID[max_mid];
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_removeAll_9bfb3701] = env->getMethodID(cls, "removeAll", "(Ljava/util/Collection;)Z");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jboolean AbstractSet::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jint AbstractSet::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jboolean AbstractSet::removeAll(const ::java::util::Collection & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_removeAll_9bfb3701], a0.this$);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_AbstractSet_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_AbstractSet_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_AbstractSet_of_(t_AbstractSet *self, PyObject *args);
    static PyObject *t_AbstractSet_equals(t_AbstractSet *self, PyObject *args);
    static PyObject *t_AbstractSet_hashCode(t_AbstractSet *self, PyObject *args);
    static PyObject *t_AbstractSet_removeAll(t_AbstractSet *self, PyObject *args);
    static PyObject *t_AbstractSet_get__parameters_(t_AbstractSet *self, void *data);
    static PyGetSetDef t_AbstractSet__fields_[] = {
      DECLARE_GET_FIELD(t_AbstractSet, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_AbstractSet__methods_[] = {
      DECLARE_METHOD(t_AbstractSet, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_AbstractSet, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_AbstractSet, of_, METH_VARARGS),
      DECLARE_METHOD(t_AbstractSet, equals, METH_VARARGS),
      DECLARE_METHOD(t_AbstractSet, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_AbstractSet, removeAll, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(AbstractSet, t_AbstractSet, ::java::util::AbstractCollection, AbstractSet, abstract_init, 0, 0, t_AbstractSet__fields_, 0, 0);
    PyObject *t_AbstractSet::wrap_Object(const AbstractSet& object, PyTypeObject *p0)
    {
      PyObject *obj = t_AbstractSet::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_AbstractSet *self = (t_AbstractSet *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_AbstractSet::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_AbstractSet::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_AbstractSet *self = (t_AbstractSet *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_AbstractSet::install(PyObject *module)
    {
      installType(&PY_TYPE(AbstractSet), module, "AbstractSet", 0);
    }

    void t_AbstractSet::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(AbstractSet).tp_dict, "class_", make_descriptor(AbstractSet::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(AbstractSet).tp_dict, "wrapfn_", make_descriptor(t_AbstractSet::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(AbstractSet).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_AbstractSet_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, AbstractSet::initializeClass, 1)))
        return NULL;
      return t_AbstractSet::wrap_Object(AbstractSet(((t_AbstractSet *) arg)->object.this$));
    }
    static PyObject *t_AbstractSet_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, AbstractSet::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_AbstractSet_of_(t_AbstractSet *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_AbstractSet_equals(t_AbstractSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(AbstractSet), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_AbstractSet_hashCode(t_AbstractSet *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(AbstractSet), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_AbstractSet_removeAll(t_AbstractSet *self, PyObject *args)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = self->object.removeAll(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(AbstractSet), (PyObject *) self, "removeAll", args, 2);
    }
    static PyObject *t_AbstractSet_get__parameters_(t_AbstractSet *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/BoostQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *BoostQueryNodeProcessor::class$ = NULL;
              jmethodID *BoostQueryNodeProcessor::mids$ = NULL;
              bool BoostQueryNodeProcessor::live$ = false;

              jclass BoostQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/BoostQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BoostQueryNodeProcessor::BoostQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_BoostQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BoostQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BoostQueryNodeProcessor_init_(t_BoostQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_BoostQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_BoostQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BoostQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BoostQueryNodeProcessor, t_BoostQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, BoostQueryNodeProcessor, t_BoostQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_BoostQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(BoostQueryNodeProcessor), module, "BoostQueryNodeProcessor", 0);
              }

              void t_BoostQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BoostQueryNodeProcessor).tp_dict, "class_", make_descriptor(BoostQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BoostQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_BoostQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BoostQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BoostQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BoostQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_BoostQueryNodeProcessor::wrap_Object(BoostQueryNodeProcessor(((t_BoostQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_BoostQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BoostQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BoostQueryNodeProcessor_init_(t_BoostQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                BoostQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = BoostQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/lang/Integer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/Long.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentCommitInfo::class$ = NULL;
        jmethodID *SegmentCommitInfo::mids$ = NULL;
        jfieldID *SegmentCommitInfo::fids$ = NULL;
        bool SegmentCommitInfo::live$ = false;

        jclass SegmentCommitInfo::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentCommitInfo");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f66c7cbe] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentInfo;IJJJ)V");
            mids$[mid_clone_5df298a9] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/index/SegmentCommitInfo;");
            mids$[mid_files_2d2d7de4] = env->getMethodID(cls, "files", "()Ljava/util/Collection;");
            mids$[mid_getDelCount_54c6a179] = env->getMethodID(cls, "getDelCount", "()I");
            mids$[mid_getDelGen_54c6a17a] = env->getMethodID(cls, "getDelGen", "()J");
            mids$[mid_getDocValuesGen_54c6a17a] = env->getMethodID(cls, "getDocValuesGen", "()J");
            mids$[mid_getDocValuesUpdatesFiles_db60befd] = env->getMethodID(cls, "getDocValuesUpdatesFiles", "()Ljava/util/Map;");
            mids$[mid_getFieldInfosFiles_03e99967] = env->getMethodID(cls, "getFieldInfosFiles", "()Ljava/util/Set;");
            mids$[mid_getFieldInfosGen_54c6a17a] = env->getMethodID(cls, "getFieldInfosGen", "()J");
            mids$[mid_getNextDelGen_54c6a17a] = env->getMethodID(cls, "getNextDelGen", "()J");
            mids$[mid_getNextDocValuesGen_54c6a17a] = env->getMethodID(cls, "getNextDocValuesGen", "()J");
            mids$[mid_getNextFieldInfosGen_54c6a17a] = env->getMethodID(cls, "getNextFieldInfosGen", "()J");
            mids$[mid_hasDeletions_54c6a16a] = env->getMethodID(cls, "hasDeletions", "()Z");
            mids$[mid_hasFieldUpdates_54c6a16a] = env->getMethodID(cls, "hasFieldUpdates", "()Z");
            mids$[mid_setDocValuesUpdatesFiles_4c9e2b1c] = env->getMethodID(cls, "setDocValuesUpdatesFiles", "(Ljava/util/Map;)V");
            mids$[mid_setFieldInfosFiles_fb4f2b26] = env->getMethodID(cls, "setFieldInfosFiles", "(Ljava/util/Set;)V");
            mids$[mid_setGenUpdatesFiles_4c9e2b1c] = env->getMethodID(cls, "setGenUpdatesFiles", "(Ljava/util/Map;)V");
            mids$[mid_sizeInBytes_54c6a17a] = env->getMethodID(cls, "sizeInBytes", "()J");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toString_889826bf] = env->getMethodID(cls, "toString", "(Lorg/apache/lucene/store/Directory;I)Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_info] = env->getFieldID(cls, "info", "Lorg/apache/lucene/index/SegmentInfo;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentCommitInfo::SegmentCommitInfo(const ::org::apache::lucene::index::SegmentInfo & a0, jint a1, jlong a2, jlong a3, jlong a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f66c7cbe, a0.this$, a1, a2, a3, a4)) {}

        SegmentCommitInfo SegmentCommitInfo::clone() const
        {
          return SegmentCommitInfo(env->callObjectMethod(this$, mids$[mid_clone_5df298a9]));
        }

        ::java::util::Collection SegmentCommitInfo::files() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_files_2d2d7de4]));
        }

        jint SegmentCommitInfo::getDelCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getDelCount_54c6a179]);
        }

        jlong SegmentCommitInfo::getDelGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getDelGen_54c6a17a]);
        }

        jlong SegmentCommitInfo::getDocValuesGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getDocValuesGen_54c6a17a]);
        }

        ::java::util::Map SegmentCommitInfo::getDocValuesUpdatesFiles() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getDocValuesUpdatesFiles_db60befd]));
        }

        ::java::util::Set SegmentCommitInfo::getFieldInfosFiles() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getFieldInfosFiles_03e99967]));
        }

        jlong SegmentCommitInfo::getFieldInfosGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getFieldInfosGen_54c6a17a]);
        }

        jlong SegmentCommitInfo::getNextDelGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getNextDelGen_54c6a17a]);
        }

        jlong SegmentCommitInfo::getNextDocValuesGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getNextDocValuesGen_54c6a17a]);
        }

        jlong SegmentCommitInfo::getNextFieldInfosGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getNextFieldInfosGen_54c6a17a]);
        }

        jboolean SegmentCommitInfo::hasDeletions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasDeletions_54c6a16a]);
        }

        jboolean SegmentCommitInfo::hasFieldUpdates() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasFieldUpdates_54c6a16a]);
        }

        void SegmentCommitInfo::setDocValuesUpdatesFiles(const ::java::util::Map & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDocValuesUpdatesFiles_4c9e2b1c], a0.this$);
        }

        void SegmentCommitInfo::setFieldInfosFiles(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setFieldInfosFiles_fb4f2b26], a0.this$);
        }

        void SegmentCommitInfo::setGenUpdatesFiles(const ::java::util::Map & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setGenUpdatesFiles_4c9e2b1c], a0.this$);
        }

        jlong SegmentCommitInfo::sizeInBytes() const
        {
          return env->callLongMethod(this$, mids$[mid_sizeInBytes_54c6a17a]);
        }

        ::java::lang::String SegmentCommitInfo::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::String SegmentCommitInfo::toString(const ::org::apache::lucene::store::Directory & a0, jint a1) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_889826bf], a0.this$, a1));
        }

        ::org::apache::lucene::index::SegmentInfo SegmentCommitInfo::_get_info() const
        {
          return ::org::apache::lucene::index::SegmentInfo(env->getObjectField(this$, fids$[fid_info]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentCommitInfo_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentCommitInfo_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SegmentCommitInfo_init_(t_SegmentCommitInfo *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentCommitInfo_clone(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_files(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getDelCount(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getDelGen(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getDocValuesGen(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getDocValuesUpdatesFiles(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getFieldInfosFiles(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getFieldInfosGen(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getNextDelGen(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getNextDocValuesGen(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getNextFieldInfosGen(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_hasDeletions(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_hasFieldUpdates(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_setDocValuesUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg);
        static PyObject *t_SegmentCommitInfo_setFieldInfosFiles(t_SegmentCommitInfo *self, PyObject *arg);
        static PyObject *t_SegmentCommitInfo_setGenUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg);
        static PyObject *t_SegmentCommitInfo_sizeInBytes(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_toString(t_SegmentCommitInfo *self, PyObject *args);
        static PyObject *t_SegmentCommitInfo_get__info(t_SegmentCommitInfo *self, void *data);

        static PyObject *t_SegmentCommitInfo_get__delCount(t_SegmentCommitInfo *self, void *data);
        static PyObject *t_SegmentCommitInfo_get__delGen(t_SegmentCommitInfo *self, void *data);
        static PyObject *t_SegmentCommitInfo_get__docValuesGen(t_SegmentCommitInfo *self, void *data);
        static PyObject *t_SegmentCommitInfo_get__docValuesUpdatesFiles(t_SegmentCommitInfo *self, void *data);
        static int t_SegmentCommitInfo_set__docValuesUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg, void *data);
        static PyObject *t_SegmentCommitInfo_get__fieldInfosFiles(t_SegmentCommitInfo *self, void *data);
        static int t_SegmentCommitInfo_set__fieldInfosFiles(t_SegmentCommitInfo *self, PyObject *arg, void *data);
        static PyObject *t_SegmentCommitInfo_get__fieldInfosGen(t_SegmentCommitInfo *self, void *data);
        static int t_SegmentCommitInfo_set__genUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg, void *data);
        static PyObject *t_SegmentCommitInfo_get__nextDelGen(t_SegmentCommitInfo *self, void *data);
        static PyObject *t_SegmentCommitInfo_get__nextDocValuesGen(t_SegmentCommitInfo *self, void *data);
        static PyObject *t_SegmentCommitInfo_get__nextFieldInfosGen(t_SegmentCommitInfo *self, void *data);
        static PyGetSetDef t_SegmentCommitInfo__fields_[] = {
          DECLARE_GET_FIELD(t_SegmentCommitInfo, info),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, delCount),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, delGen),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, docValuesGen),
          DECLARE_GETSET_FIELD(t_SegmentCommitInfo, docValuesUpdatesFiles),
          DECLARE_GETSET_FIELD(t_SegmentCommitInfo, fieldInfosFiles),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, fieldInfosGen),
          DECLARE_SET_FIELD(t_SegmentCommitInfo, genUpdatesFiles),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, nextDelGen),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, nextDocValuesGen),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, nextFieldInfosGen),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentCommitInfo__methods_[] = {
          DECLARE_METHOD(t_SegmentCommitInfo, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentCommitInfo, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentCommitInfo, clone, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, files, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getDelCount, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getDelGen, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getDocValuesGen, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getDocValuesUpdatesFiles, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getFieldInfosFiles, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getFieldInfosGen, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getNextDelGen, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getNextDocValuesGen, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getNextFieldInfosGen, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, hasDeletions, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, hasFieldUpdates, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, setDocValuesUpdatesFiles, METH_O),
          DECLARE_METHOD(t_SegmentCommitInfo, setFieldInfosFiles, METH_O),
          DECLARE_METHOD(t_SegmentCommitInfo, setGenUpdatesFiles, METH_O),
          DECLARE_METHOD(t_SegmentCommitInfo, sizeInBytes, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentCommitInfo, t_SegmentCommitInfo, ::java::lang::Object, SegmentCommitInfo, t_SegmentCommitInfo_init_, 0, 0, t_SegmentCommitInfo__fields_, 0, 0);

        void t_SegmentCommitInfo::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentCommitInfo), module, "SegmentCommitInfo", 0);
        }

        void t_SegmentCommitInfo::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentCommitInfo).tp_dict, "class_", make_descriptor(SegmentCommitInfo::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentCommitInfo).tp_dict, "wrapfn_", make_descriptor(t_SegmentCommitInfo::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentCommitInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentCommitInfo_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentCommitInfo::initializeClass, 1)))
            return NULL;
          return t_SegmentCommitInfo::wrap_Object(SegmentCommitInfo(((t_SegmentCommitInfo *) arg)->object.this$));
        }
        static PyObject *t_SegmentCommitInfo_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentCommitInfo::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SegmentCommitInfo_init_(t_SegmentCommitInfo *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::SegmentInfo a0((jobject) NULL);
          jint a1;
          jlong a2;
          jlong a3;
          jlong a4;
          SegmentCommitInfo object((jobject) NULL);

          if (!parseArgs(args, "kIJJJ", ::org::apache::lucene::index::SegmentInfo::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            INT_CALL(object = SegmentCommitInfo(a0, a1, a2, a3, a4));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SegmentCommitInfo_clone(t_SegmentCommitInfo *self)
        {
          SegmentCommitInfo result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_SegmentCommitInfo::wrap_Object(result);
        }

        static PyObject *t_SegmentCommitInfo_files(t_SegmentCommitInfo *self)
        {
          ::java::util::Collection result((jobject) NULL);
          OBJ_CALL(result = self->object.files());
          return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_SegmentCommitInfo_getDelCount(t_SegmentCommitInfo *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getDelCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SegmentCommitInfo_getDelGen(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getDelGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_getDocValuesGen(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getDocValuesGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_getDocValuesUpdatesFiles(t_SegmentCommitInfo *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getDocValuesUpdatesFiles());
          return ::java::util::t_Map::wrap_Object(result);
        }

        static PyObject *t_SegmentCommitInfo_getFieldInfosFiles(t_SegmentCommitInfo *self)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = self->object.getFieldInfosFiles());
          return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_SegmentCommitInfo_getFieldInfosGen(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getFieldInfosGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_getNextDelGen(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getNextDelGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_getNextDocValuesGen(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getNextDocValuesGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_getNextFieldInfosGen(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getNextFieldInfosGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_hasDeletions(t_SegmentCommitInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasDeletions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_SegmentCommitInfo_hasFieldUpdates(t_SegmentCommitInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasFieldUpdates());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_SegmentCommitInfo_setDocValuesUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg)
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            OBJ_CALL(self->object.setDocValuesUpdatesFiles(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDocValuesUpdatesFiles", arg);
          return NULL;
        }

        static PyObject *t_SegmentCommitInfo_setFieldInfosFiles(t_SegmentCommitInfo *self, PyObject *arg)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.setFieldInfosFiles(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setFieldInfosFiles", arg);
          return NULL;
        }

        static PyObject *t_SegmentCommitInfo_setGenUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg)
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            OBJ_CALL(self->object.setGenUpdatesFiles(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setGenUpdatesFiles", arg);
          return NULL;
        }

        static PyObject *t_SegmentCommitInfo_sizeInBytes(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.sizeInBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_toString(t_SegmentCommitInfo *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }
            break;
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              jint a1;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.toString(a0, a1));
                return j2p(result);
              }
            }
          }

          return callSuper(&PY_TYPE(SegmentCommitInfo), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_SegmentCommitInfo_get__info(t_SegmentCommitInfo *self, void *data)
        {
          ::org::apache::lucene::index::SegmentInfo value((jobject) NULL);
          OBJ_CALL(value = self->object._get_info());
          return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(value);
        }

        static PyObject *t_SegmentCommitInfo_get__delCount(t_SegmentCommitInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDelCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_SegmentCommitInfo_get__delGen(t_SegmentCommitInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getDelGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_SegmentCommitInfo_get__docValuesGen(t_SegmentCommitInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getDocValuesGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_SegmentCommitInfo_get__docValuesUpdatesFiles(t_SegmentCommitInfo *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getDocValuesUpdatesFiles());
          return ::java::util::t_Map::wrap_Object(value);
        }
        static int t_SegmentCommitInfo_set__docValuesUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg, void *data)
        {
          {
            ::java::util::Map value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
            {
              INT_CALL(self->object.setDocValuesUpdatesFiles(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "docValuesUpdatesFiles", arg);
          return -1;
        }

        static PyObject *t_SegmentCommitInfo_get__fieldInfosFiles(t_SegmentCommitInfo *self, void *data)
        {
          ::java::util::Set value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfosFiles());
          return ::java::util::t_Set::wrap_Object(value);
        }
        static int t_SegmentCommitInfo_set__fieldInfosFiles(t_SegmentCommitInfo *self, PyObject *arg, void *data)
        {
          {
            ::java::util::Set value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::util::Set::initializeClass, &value))
            {
              INT_CALL(self->object.setFieldInfosFiles(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "fieldInfosFiles", arg);
          return -1;
        }

        static PyObject *t_SegmentCommitInfo_get__fieldInfosGen(t_SegmentCommitInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFieldInfosGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static int t_SegmentCommitInfo_set__genUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg, void *data)
        {
          {
            ::java::util::Map value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
            {
              INT_CALL(self->object.setGenUpdatesFiles(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "genUpdatesFiles", arg);
          return -1;
        }

        static PyObject *t_SegmentCommitInfo_get__nextDelGen(t_SegmentCommitInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getNextDelGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_SegmentCommitInfo_get__nextDocValuesGen(t_SegmentCommitInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getNextDocValuesGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_SegmentCommitInfo_get__nextFieldInfosGen(t_SegmentCommitInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getNextFieldInfosGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortedNumericSelector$Type.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortedNumericSelector$Type::class$ = NULL;
        jmethodID *SortedNumericSelector$Type::mids$ = NULL;
        bool SortedNumericSelector$Type::live$ = false;
        SortedNumericSelector$Type *SortedNumericSelector$Type::MAX = NULL;
        SortedNumericSelector$Type *SortedNumericSelector$Type::MIN = NULL;

        jclass SortedNumericSelector$Type::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortedNumericSelector$Type");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_46e516f8] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/SortedNumericSelector$Type;");
            mids$[mid_values_26c59952] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/SortedNumericSelector$Type;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            MAX = new SortedNumericSelector$Type(env->getStaticObjectField(cls, "MAX", "Lorg/apache/lucene/search/SortedNumericSelector$Type;"));
            MIN = new SortedNumericSelector$Type(env->getStaticObjectField(cls, "MIN", "Lorg/apache/lucene/search/SortedNumericSelector$Type;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedNumericSelector$Type SortedNumericSelector$Type::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return SortedNumericSelector$Type(env->callStaticObjectMethod(cls, mids$[mid_valueOf_46e516f8], a0.this$));
        }

        JArray< SortedNumericSelector$Type > SortedNumericSelector$Type::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< SortedNumericSelector$Type >(env->callStaticObjectMethod(cls, mids$[mid_values_26c59952]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortedNumericSelector$Type_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericSelector$Type_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericSelector$Type_of_(t_SortedNumericSelector$Type *self, PyObject *args);
        static PyObject *t_SortedNumericSelector$Type_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_SortedNumericSelector$Type_values(PyTypeObject *type);
        static PyObject *t_SortedNumericSelector$Type_get__parameters_(t_SortedNumericSelector$Type *self, void *data);
        static PyGetSetDef t_SortedNumericSelector$Type__fields_[] = {
          DECLARE_GET_FIELD(t_SortedNumericSelector$Type, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortedNumericSelector$Type__methods_[] = {
          DECLARE_METHOD(t_SortedNumericSelector$Type, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSelector$Type, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSelector$Type, of_, METH_VARARGS),
          DECLARE_METHOD(t_SortedNumericSelector$Type, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSelector$Type, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedNumericSelector$Type, t_SortedNumericSelector$Type, ::java::lang::Enum, SortedNumericSelector$Type, abstract_init, 0, 0, t_SortedNumericSelector$Type__fields_, 0, 0);
        PyObject *t_SortedNumericSelector$Type::wrap_Object(const SortedNumericSelector$Type& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SortedNumericSelector$Type::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SortedNumericSelector$Type *self = (t_SortedNumericSelector$Type *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SortedNumericSelector$Type::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SortedNumericSelector$Type::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SortedNumericSelector$Type *self = (t_SortedNumericSelector$Type *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SortedNumericSelector$Type::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedNumericSelector$Type), module, "SortedNumericSelector$Type", 0);
        }

        void t_SortedNumericSelector$Type::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector$Type).tp_dict, "class_", make_descriptor(SortedNumericSelector$Type::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector$Type).tp_dict, "wrapfn_", make_descriptor(t_SortedNumericSelector$Type::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector$Type).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SortedNumericSelector$Type::initializeClass);
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector$Type).tp_dict, "MAX", make_descriptor(t_SortedNumericSelector$Type::wrap_Object(*SortedNumericSelector$Type::MAX)));
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector$Type).tp_dict, "MIN", make_descriptor(t_SortedNumericSelector$Type::wrap_Object(*SortedNumericSelector$Type::MIN)));
        }

        static PyObject *t_SortedNumericSelector$Type_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedNumericSelector$Type::initializeClass, 1)))
            return NULL;
          return t_SortedNumericSelector$Type::wrap_Object(SortedNumericSelector$Type(((t_SortedNumericSelector$Type *) arg)->object.this$));
        }
        static PyObject *t_SortedNumericSelector$Type_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedNumericSelector$Type::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SortedNumericSelector$Type_of_(t_SortedNumericSelector$Type *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_SortedNumericSelector$Type_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          SortedNumericSelector$Type result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::SortedNumericSelector$Type::valueOf(a0));
            return t_SortedNumericSelector$Type::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_SortedNumericSelector$Type_values(PyTypeObject *type)
        {
          JArray< SortedNumericSelector$Type > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::SortedNumericSelector$Type::values());
          return JArray<jobject>(result.this$).wrap(t_SortedNumericSelector$Type::wrap_jobject);
        }
        static PyObject *t_SortedNumericSelector$Type_get__parameters_(t_SortedNumericSelector$Type *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ParallelAtomicReader.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/index/AtomicReader$CoreClosedListener.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ParallelAtomicReader::class$ = NULL;
        jmethodID *ParallelAtomicReader::mids$ = NULL;
        bool ParallelAtomicReader::live$ = false;

        jclass ParallelAtomicReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ParallelAtomicReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_ec148ef1] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/AtomicReader;)V");
            mids$[mid_init$_dac8e58a] = env->getMethodID(cls, "<init>", "(Z[Lorg/apache/lucene/index/AtomicReader;)V");
            mids$[mid_init$_d26c44dd] = env->getMethodID(cls, "<init>", "(Z[Lorg/apache/lucene/index/AtomicReader;[Lorg/apache/lucene/index/AtomicReader;)V");
            mids$[mid_addCoreClosedListener_cbc2818f] = env->getMethodID(cls, "addCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_document_a2ea3ebe] = env->getMethodID(cls, "document", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_fields_77db581d] = env->getMethodID(cls, "fields", "()Lorg/apache/lucene/index/Fields;");
            mids$[mid_getBinaryDocValues_ecab96be] = env->getMethodID(cls, "getBinaryDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getDocsWithField_e1c6a7db] = env->getMethodID(cls, "getDocsWithField", "(Ljava/lang/String;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getFieldInfos_9ba20825] = env->getMethodID(cls, "getFieldInfos", "()Lorg/apache/lucene/index/FieldInfos;");
            mids$[mid_getLiveDocs_03c2457d] = env->getMethodID(cls, "getLiveDocs", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_getNormValues_d2b19f49] = env->getMethodID(cls, "getNormValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getNumericDocValues_d2b19f49] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSortedDocValues_7b8b1a0a] = env->getMethodID(cls, "getSortedDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumericDocValues_37cd1812] = env->getMethodID(cls, "getSortedNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSetDocValues_43e0e807] = env->getMethodID(cls, "getSortedSetDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getTermVectors_ef1c9c73] = env->getMethodID(cls, "getTermVectors", "(I)Lorg/apache/lucene/index/Fields;");
            mids$[mid_maxDoc_54c6a179] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDocs_54c6a179] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_removeCoreClosedListener_cbc2818f] = env->getMethodID(cls, "removeCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ParallelAtomicReader::ParallelAtomicReader(const JArray< ::org::apache::lucene::index::AtomicReader > & a0) : ::org::apache::lucene::index::AtomicReader(env->newObject(initializeClass, &mids$, mid_init$_ec148ef1, a0.this$)) {}

        ParallelAtomicReader::ParallelAtomicReader(jboolean a0, const JArray< ::org::apache::lucene::index::AtomicReader > & a1) : ::org::apache::lucene::index::AtomicReader(env->newObject(initializeClass, &mids$, mid_init$_dac8e58a, a0, a1.this$)) {}

        ParallelAtomicReader::ParallelAtomicReader(jboolean a0, const JArray< ::org::apache::lucene::index::AtomicReader > & a1, const JArray< ::org::apache::lucene::index::AtomicReader > & a2) : ::org::apache::lucene::index::AtomicReader(env->newObject(initializeClass, &mids$, mid_init$_d26c44dd, a0, a1.this$, a2.this$)) {}

        void ParallelAtomicReader::addCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addCoreClosedListener_cbc2818f], a0.this$);
        }

        void ParallelAtomicReader::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        void ParallelAtomicReader::document(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_document_a2ea3ebe], a0, a1.this$);
        }

        ::org::apache::lucene::index::Fields ParallelAtomicReader::fields() const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_fields_77db581d]));
        }

        ::org::apache::lucene::index::BinaryDocValues ParallelAtomicReader::getBinaryDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinaryDocValues_ecab96be], a0.this$));
        }

        ::org::apache::lucene::util::Bits ParallelAtomicReader::getDocsWithField(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getDocsWithField_e1c6a7db], a0.this$));
        }

        ::org::apache::lucene::index::FieldInfos ParallelAtomicReader::getFieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_getFieldInfos_9ba20825]));
        }

        ::org::apache::lucene::util::Bits ParallelAtomicReader::getLiveDocs() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getLiveDocs_03c2457d]));
        }

        ::org::apache::lucene::index::NumericDocValues ParallelAtomicReader::getNormValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNormValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::NumericDocValues ParallelAtomicReader::getNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNumericDocValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::SortedDocValues ParallelAtomicReader::getSortedDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getSortedDocValues_7b8b1a0a], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues ParallelAtomicReader::getSortedNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callObjectMethod(this$, mids$[mid_getSortedNumericDocValues_37cd1812], a0.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues ParallelAtomicReader::getSortedSetDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getSortedSetDocValues_43e0e807], a0.this$));
        }

        ::org::apache::lucene::index::Fields ParallelAtomicReader::getTermVectors(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_getTermVectors_ef1c9c73], a0));
        }

        jint ParallelAtomicReader::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_54c6a179]);
        }

        jint ParallelAtomicReader::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_54c6a179]);
        }

        void ParallelAtomicReader::removeCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeCoreClosedListener_cbc2818f], a0.this$);
        }

        ::java::lang::String ParallelAtomicReader::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ParallelAtomicReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ParallelAtomicReader_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ParallelAtomicReader_init_(t_ParallelAtomicReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ParallelAtomicReader_addCoreClosedListener(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_checkIntegrity(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_document(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_fields(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getBinaryDocValues(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getDocsWithField(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getFieldInfos(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getLiveDocs(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getNormValues(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getNumericDocValues(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getSortedDocValues(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getSortedNumericDocValues(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getSortedSetDocValues(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getTermVectors(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_maxDoc(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_numDocs(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_removeCoreClosedListener(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_toString(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_get__fieldInfos(t_ParallelAtomicReader *self, void *data);
        static PyObject *t_ParallelAtomicReader_get__liveDocs(t_ParallelAtomicReader *self, void *data);
        static PyGetSetDef t_ParallelAtomicReader__fields_[] = {
          DECLARE_GET_FIELD(t_ParallelAtomicReader, fieldInfos),
          DECLARE_GET_FIELD(t_ParallelAtomicReader, liveDocs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ParallelAtomicReader__methods_[] = {
          DECLARE_METHOD(t_ParallelAtomicReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ParallelAtomicReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ParallelAtomicReader, addCoreClosedListener, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, checkIntegrity, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, document, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, fields, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getBinaryDocValues, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getDocsWithField, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getFieldInfos, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getLiveDocs, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getNormValues, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getSortedDocValues, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getSortedNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getSortedSetDocValues, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getTermVectors, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, maxDoc, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, numDocs, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, removeCoreClosedListener, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ParallelAtomicReader, t_ParallelAtomicReader, ::org::apache::lucene::index::AtomicReader, ParallelAtomicReader, t_ParallelAtomicReader_init_, 0, 0, t_ParallelAtomicReader__fields_, 0, 0);

        void t_ParallelAtomicReader::install(PyObject *module)
        {
          installType(&PY_TYPE(ParallelAtomicReader), module, "ParallelAtomicReader", 0);
        }

        void t_ParallelAtomicReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ParallelAtomicReader).tp_dict, "class_", make_descriptor(ParallelAtomicReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ParallelAtomicReader).tp_dict, "wrapfn_", make_descriptor(t_ParallelAtomicReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ParallelAtomicReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ParallelAtomicReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ParallelAtomicReader::initializeClass, 1)))
            return NULL;
          return t_ParallelAtomicReader::wrap_Object(ParallelAtomicReader(((t_ParallelAtomicReader *) arg)->object.this$));
        }
        static PyObject *t_ParallelAtomicReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ParallelAtomicReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ParallelAtomicReader_init_(t_ParallelAtomicReader *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::AtomicReader > a0((jobject) NULL);
              ParallelAtomicReader object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
              {
                INT_CALL(object = ParallelAtomicReader(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jboolean a0;
              JArray< ::org::apache::lucene::index::AtomicReader > a1((jobject) NULL);
              ParallelAtomicReader object((jobject) NULL);

              if (!parseArgs(args, "Z[k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
              {
                INT_CALL(object = ParallelAtomicReader(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              jboolean a0;
              JArray< ::org::apache::lucene::index::AtomicReader > a1((jobject) NULL);
              JArray< ::org::apache::lucene::index::AtomicReader > a2((jobject) NULL);
              ParallelAtomicReader object((jobject) NULL);

              if (!parseArgs(args, "Z[k[k", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = ParallelAtomicReader(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ParallelAtomicReader_addCoreClosedListener(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "addCoreClosedListener", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_checkIntegrity(t_ParallelAtomicReader *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.checkIntegrity());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "checkIntegrity", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_document(t_ParallelAtomicReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.document(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "document", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_fields(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.fields());
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "fields", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getBinaryDocValues(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryDocValues(a0));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getBinaryDocValues", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getDocsWithField(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocsWithField(a0));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getDocsWithField", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getFieldInfos(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFieldInfos());
            return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getFieldInfos", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getLiveDocs(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLiveDocs());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getLiveDocs", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getNormValues(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNormValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getNormValues", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getNumericDocValues(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNumericDocValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getNumericDocValues", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getSortedDocValues(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedDocValues(a0));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getSortedDocValues", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getSortedNumericDocValues(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedNumericDocValues(a0));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getSortedNumericDocValues", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getSortedSetDocValues(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedSetDocValues(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getSortedSetDocValues", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getTermVectors(t_ParallelAtomicReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getTermVectors(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getTermVectors", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_maxDoc(t_ParallelAtomicReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.maxDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "maxDoc", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_numDocs(t_ParallelAtomicReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.numDocs());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "numDocs", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_removeCoreClosedListener(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.removeCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "removeCoreClosedListener", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_toString(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_get__fieldInfos(t_ParallelAtomicReader *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_ParallelAtomicReader_get__liveDocs(t_ParallelAtomicReader *self, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          OBJ_CALL(value = self->object.getLiveDocs());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *RemoveDuplicatesTokenFilter::class$ = NULL;
          jmethodID *RemoveDuplicatesTokenFilter::mids$ = NULL;
          bool RemoveDuplicatesTokenFilter::live$ = false;

          jclass RemoveDuplicatesTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RemoveDuplicatesTokenFilter::RemoveDuplicatesTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean RemoveDuplicatesTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void RemoveDuplicatesTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_RemoveDuplicatesTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RemoveDuplicatesTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RemoveDuplicatesTokenFilter_init_(t_RemoveDuplicatesTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RemoveDuplicatesTokenFilter_incrementToken(t_RemoveDuplicatesTokenFilter *self, PyObject *args);
          static PyObject *t_RemoveDuplicatesTokenFilter_reset(t_RemoveDuplicatesTokenFilter *self, PyObject *args);

          static PyMethodDef t_RemoveDuplicatesTokenFilter__methods_[] = {
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RemoveDuplicatesTokenFilter, t_RemoveDuplicatesTokenFilter, ::org::apache::lucene::analysis::TokenFilter, RemoveDuplicatesTokenFilter, t_RemoveDuplicatesTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_RemoveDuplicatesTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(RemoveDuplicatesTokenFilter), module, "RemoveDuplicatesTokenFilter", 0);
          }

          void t_RemoveDuplicatesTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RemoveDuplicatesTokenFilter).tp_dict, "class_", make_descriptor(RemoveDuplicatesTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RemoveDuplicatesTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_RemoveDuplicatesTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RemoveDuplicatesTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RemoveDuplicatesTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RemoveDuplicatesTokenFilter::initializeClass, 1)))
              return NULL;
            return t_RemoveDuplicatesTokenFilter::wrap_Object(RemoveDuplicatesTokenFilter(((t_RemoveDuplicatesTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_RemoveDuplicatesTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RemoveDuplicatesTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RemoveDuplicatesTokenFilter_init_(t_RemoveDuplicatesTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            RemoveDuplicatesTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = RemoveDuplicatesTokenFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RemoveDuplicatesTokenFilter_incrementToken(t_RemoveDuplicatesTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(RemoveDuplicatesTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_RemoveDuplicatesTokenFilter_reset(t_RemoveDuplicatesTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(RemoveDuplicatesTokenFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fi/FinnishAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {

          ::java::lang::Class *FinnishAnalyzer::class$ = NULL;
          jmethodID *FinnishAnalyzer::mids$ = NULL;
          bool FinnishAnalyzer::live$ = false;
          ::java::lang::String *FinnishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass FinnishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fi/FinnishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_3ea629c6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FinnishAnalyzer::FinnishAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          FinnishAnalyzer::FinnishAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          FinnishAnalyzer::FinnishAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          FinnishAnalyzer::FinnishAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_3ea629c6, a0.this$, a1.this$)) {}

          FinnishAnalyzer::FinnishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          FinnishAnalyzer::FinnishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet FinnishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {
          static PyObject *t_FinnishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FinnishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FinnishAnalyzer_init_(t_FinnishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FinnishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_FinnishAnalyzer_get__defaultStopSet(t_FinnishAnalyzer *self, void *data);
          static PyGetSetDef t_FinnishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_FinnishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FinnishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_FinnishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FinnishAnalyzer, t_FinnishAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, FinnishAnalyzer, t_FinnishAnalyzer_init_, 0, 0, t_FinnishAnalyzer__fields_, 0, 0);

          void t_FinnishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(FinnishAnalyzer), module, "FinnishAnalyzer", 0);
          }

          void t_FinnishAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FinnishAnalyzer).tp_dict, "class_", make_descriptor(FinnishAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FinnishAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_FinnishAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FinnishAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(FinnishAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(FinnishAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*FinnishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_FinnishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FinnishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_FinnishAnalyzer::wrap_Object(FinnishAnalyzer(((t_FinnishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_FinnishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FinnishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FinnishAnalyzer_init_(t_FinnishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                FinnishAnalyzer object((jobject) NULL);

                INT_CALL(object = FinnishAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                FinnishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = FinnishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                FinnishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = FinnishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                FinnishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = FinnishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                FinnishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = FinnishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                FinnishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = FinnishAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FinnishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::fi::FinnishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_FinnishAnalyzer_get__defaultStopSet(t_FinnishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ByteBlockPool$Allocator.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ByteBlockPool$Allocator::class$ = NULL;
        jmethodID *ByteBlockPool$Allocator::mids$ = NULL;
        bool ByteBlockPool$Allocator::live$ = false;

        jclass ByteBlockPool$Allocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ByteBlockPool$Allocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_getByteBlock_dab10e7e] = env->getMethodID(cls, "getByteBlock", "()[B");
            mids$[mid_recycleByteBlocks_1fde8fc3] = env->getMethodID(cls, "recycleByteBlocks", "(Ljava/util/List;)V");
            mids$[mid_recycleByteBlocks_d3ffa89f] = env->getMethodID(cls, "recycleByteBlocks", "([[BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteBlockPool$Allocator::ByteBlockPool$Allocator(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        JArray< jbyte > ByteBlockPool$Allocator::getByteBlock() const
        {
          return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getByteBlock_dab10e7e]));
        }

        void ByteBlockPool$Allocator::recycleByteBlocks(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleByteBlocks_1fde8fc3], a0.this$);
        }

        void ByteBlockPool$Allocator::recycleByteBlocks(const JArray< JArray< jbyte > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleByteBlocks_d3ffa89f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ByteBlockPool$Allocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteBlockPool$Allocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteBlockPool$Allocator_init_(t_ByteBlockPool$Allocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteBlockPool$Allocator_getByteBlock(t_ByteBlockPool$Allocator *self);
        static PyObject *t_ByteBlockPool$Allocator_recycleByteBlocks(t_ByteBlockPool$Allocator *self, PyObject *args);
        static PyObject *t_ByteBlockPool$Allocator_get__byteBlock(t_ByteBlockPool$Allocator *self, void *data);
        static PyGetSetDef t_ByteBlockPool$Allocator__fields_[] = {
          DECLARE_GET_FIELD(t_ByteBlockPool$Allocator, byteBlock),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ByteBlockPool$Allocator__methods_[] = {
          DECLARE_METHOD(t_ByteBlockPool$Allocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool$Allocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool$Allocator, getByteBlock, METH_NOARGS),
          DECLARE_METHOD(t_ByteBlockPool$Allocator, recycleByteBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ByteBlockPool$Allocator, t_ByteBlockPool$Allocator, ::java::lang::Object, ByteBlockPool$Allocator, t_ByteBlockPool$Allocator_init_, 0, 0, t_ByteBlockPool$Allocator__fields_, 0, 0);

        void t_ByteBlockPool$Allocator::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteBlockPool$Allocator), module, "ByteBlockPool$Allocator", 0);
        }

        void t_ByteBlockPool$Allocator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$Allocator).tp_dict, "class_", make_descriptor(ByteBlockPool$Allocator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$Allocator).tp_dict, "wrapfn_", make_descriptor(t_ByteBlockPool$Allocator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$Allocator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteBlockPool$Allocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteBlockPool$Allocator::initializeClass, 1)))
            return NULL;
          return t_ByteBlockPool$Allocator::wrap_Object(ByteBlockPool$Allocator(((t_ByteBlockPool$Allocator *) arg)->object.this$));
        }
        static PyObject *t_ByteBlockPool$Allocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteBlockPool$Allocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteBlockPool$Allocator_init_(t_ByteBlockPool$Allocator *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          ByteBlockPool$Allocator object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = ByteBlockPool$Allocator(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteBlockPool$Allocator_getByteBlock(t_ByteBlockPool$Allocator *self)
        {
          JArray< jbyte > result((jobject) NULL);
          OBJ_CALL(result = self->object.getByteBlock());
          return result.wrap();
        }

        static PyObject *t_ByteBlockPool$Allocator_recycleByteBlocks(t_ByteBlockPool$Allocator *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(self->object.recycleByteBlocks(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< JArray< jbyte > > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.recycleByteBlocks(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "recycleByteBlocks", args);
          return NULL;
        }

        static PyObject *t_ByteBlockPool$Allocator_get__byteBlock(t_ByteBlockPool$Allocator *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object.getByteBlock());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCacheRewriteMethod.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCacheRewriteMethod::class$ = NULL;
        jmethodID *FieldCacheRewriteMethod::mids$ = NULL;
        bool FieldCacheRewriteMethod::live$ = false;

        jclass FieldCacheRewriteMethod::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCacheRewriteMethod");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_925c5bbc] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/Query;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCacheRewriteMethod::FieldCacheRewriteMethod() : ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean FieldCacheRewriteMethod::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint FieldCacheRewriteMethod::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query FieldCacheRewriteMethod::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_925c5bbc], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCacheRewriteMethod_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheRewriteMethod_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCacheRewriteMethod_init_(t_FieldCacheRewriteMethod *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCacheRewriteMethod_equals(t_FieldCacheRewriteMethod *self, PyObject *args);
        static PyObject *t_FieldCacheRewriteMethod_hashCode(t_FieldCacheRewriteMethod *self, PyObject *args);
        static PyObject *t_FieldCacheRewriteMethod_rewrite(t_FieldCacheRewriteMethod *self, PyObject *args);

        static PyMethodDef t_FieldCacheRewriteMethod__methods_[] = {
          DECLARE_METHOD(t_FieldCacheRewriteMethod, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRewriteMethod, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRewriteMethod, equals, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheRewriteMethod, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheRewriteMethod, rewrite, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCacheRewriteMethod, t_FieldCacheRewriteMethod, ::org::apache::lucene::search::MultiTermQuery$RewriteMethod, FieldCacheRewriteMethod, t_FieldCacheRewriteMethod_init_, 0, 0, 0, 0, 0);

        void t_FieldCacheRewriteMethod::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCacheRewriteMethod), module, "FieldCacheRewriteMethod", 0);
        }

        void t_FieldCacheRewriteMethod::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCacheRewriteMethod).tp_dict, "class_", make_descriptor(FieldCacheRewriteMethod::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCacheRewriteMethod).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheRewriteMethod::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCacheRewriteMethod).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCacheRewriteMethod_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCacheRewriteMethod::initializeClass, 1)))
            return NULL;
          return t_FieldCacheRewriteMethod::wrap_Object(FieldCacheRewriteMethod(((t_FieldCacheRewriteMethod *) arg)->object.this$));
        }
        static PyObject *t_FieldCacheRewriteMethod_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCacheRewriteMethod::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCacheRewriteMethod_init_(t_FieldCacheRewriteMethod *self, PyObject *args, PyObject *kwds)
        {
          FieldCacheRewriteMethod object((jobject) NULL);

          INT_CALL(object = FieldCacheRewriteMethod());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCacheRewriteMethod_equals(t_FieldCacheRewriteMethod *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FieldCacheRewriteMethod), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FieldCacheRewriteMethod_hashCode(t_FieldCacheRewriteMethod *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldCacheRewriteMethod), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FieldCacheRewriteMethod_rewrite(t_FieldCacheRewriteMethod *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.rewrite(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldCacheRewriteMethod), (PyObject *) self, "rewrite", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianMinimalStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianMinimalStemFilter::class$ = NULL;
          jmethodID *GalicianMinimalStemFilter::mids$ = NULL;
          bool GalicianMinimalStemFilter::live$ = false;

          jclass GalicianMinimalStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianMinimalStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianMinimalStemFilter::GalicianMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean GalicianMinimalStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianMinimalStemFilter_init_(t_GalicianMinimalStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianMinimalStemFilter_incrementToken(t_GalicianMinimalStemFilter *self, PyObject *args);

          static PyMethodDef t_GalicianMinimalStemFilter__methods_[] = {
            DECLARE_METHOD(t_GalicianMinimalStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianMinimalStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianMinimalStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GalicianMinimalStemFilter, t_GalicianMinimalStemFilter, ::org::apache::lucene::analysis::TokenFilter, GalicianMinimalStemFilter, t_GalicianMinimalStemFilter_init_, 0, 0, 0, 0, 0);

          void t_GalicianMinimalStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianMinimalStemFilter), module, "GalicianMinimalStemFilter", 0);
          }

          void t_GalicianMinimalStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemFilter).tp_dict, "class_", make_descriptor(GalicianMinimalStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemFilter).tp_dict, "wrapfn_", make_descriptor(t_GalicianMinimalStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GalicianMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianMinimalStemFilter::initializeClass, 1)))
              return NULL;
            return t_GalicianMinimalStemFilter::wrap_Object(GalicianMinimalStemFilter(((t_GalicianMinimalStemFilter *) arg)->object.this$));
          }
          static PyObject *t_GalicianMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianMinimalStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianMinimalStemFilter_init_(t_GalicianMinimalStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GalicianMinimalStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GalicianMinimalStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GalicianMinimalStemFilter_incrementToken(t_GalicianMinimalStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(GalicianMinimalStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ScoreCachingWrappingScorer.h"
#include "org/apache/lucene/search/Scorer$ChildScorer.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ScoreCachingWrappingScorer::class$ = NULL;
        jmethodID *ScoreCachingWrappingScorer::mids$ = NULL;
        bool ScoreCachingWrappingScorer::live$ = false;

        jclass ScoreCachingWrappingScorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ScoreCachingWrappingScorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_8be0880c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Scorer;)V");
            mids$[mid_getChildren_2d2d7de4] = env->getMethodID(cls, "getChildren", "()Ljava/util/Collection;");
            mids$[mid_score_54c6a176] = env->getMethodID(cls, "score", "()F");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ScoreCachingWrappingScorer::ScoreCachingWrappingScorer(const ::org::apache::lucene::search::Scorer & a0) : ::org::apache::lucene::search::FilterScorer(env->newObject(initializeClass, &mids$, mid_init$_8be0880c, a0.this$)) {}

        ::java::util::Collection ScoreCachingWrappingScorer::getChildren() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildren_2d2d7de4]));
        }

        jfloat ScoreCachingWrappingScorer::score() const
        {
          return env->callFloatMethod(this$, mids$[mid_score_54c6a176]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ScoreCachingWrappingScorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ScoreCachingWrappingScorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ScoreCachingWrappingScorer_init_(t_ScoreCachingWrappingScorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ScoreCachingWrappingScorer_getChildren(t_ScoreCachingWrappingScorer *self, PyObject *args);
        static PyObject *t_ScoreCachingWrappingScorer_score(t_ScoreCachingWrappingScorer *self, PyObject *args);
        static PyObject *t_ScoreCachingWrappingScorer_get__children(t_ScoreCachingWrappingScorer *self, void *data);
        static PyGetSetDef t_ScoreCachingWrappingScorer__fields_[] = {
          DECLARE_GET_FIELD(t_ScoreCachingWrappingScorer, children),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ScoreCachingWrappingScorer__methods_[] = {
          DECLARE_METHOD(t_ScoreCachingWrappingScorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScoreCachingWrappingScorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScoreCachingWrappingScorer, getChildren, METH_VARARGS),
          DECLARE_METHOD(t_ScoreCachingWrappingScorer, score, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ScoreCachingWrappingScorer, t_ScoreCachingWrappingScorer, ::org::apache::lucene::search::FilterScorer, ScoreCachingWrappingScorer, t_ScoreCachingWrappingScorer_init_, 0, 0, t_ScoreCachingWrappingScorer__fields_, 0, 0);

        void t_ScoreCachingWrappingScorer::install(PyObject *module)
        {
          installType(&PY_TYPE(ScoreCachingWrappingScorer), module, "ScoreCachingWrappingScorer", 0);
        }

        void t_ScoreCachingWrappingScorer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ScoreCachingWrappingScorer).tp_dict, "class_", make_descriptor(ScoreCachingWrappingScorer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ScoreCachingWrappingScorer).tp_dict, "wrapfn_", make_descriptor(t_ScoreCachingWrappingScorer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ScoreCachingWrappingScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ScoreCachingWrappingScorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ScoreCachingWrappingScorer::initializeClass, 1)))
            return NULL;
          return t_ScoreCachingWrappingScorer::wrap_Object(ScoreCachingWrappingScorer(((t_ScoreCachingWrappingScorer *) arg)->object.this$));
        }
        static PyObject *t_ScoreCachingWrappingScorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ScoreCachingWrappingScorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ScoreCachingWrappingScorer_init_(t_ScoreCachingWrappingScorer *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);
          ScoreCachingWrappingScorer object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            INT_CALL(object = ScoreCachingWrappingScorer(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ScoreCachingWrappingScorer_getChildren(t_ScoreCachingWrappingScorer *self, PyObject *args)
        {
          ::java::util::Collection result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getChildren());
            return ::java::util::t_Collection::wrap_Object(result, &::org::apache::lucene::search::PY_TYPE(Scorer$ChildScorer));
          }

          return callSuper(&PY_TYPE(ScoreCachingWrappingScorer), (PyObject *) self, "getChildren", args, 2);
        }

        static PyObject *t_ScoreCachingWrappingScorer_score(t_ScoreCachingWrappingScorer *self, PyObject *args)
        {
          jfloat result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.score());
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(&PY_TYPE(ScoreCachingWrappingScorer), (PyObject *) self, "score", args, 2);
        }

        static PyObject *t_ScoreCachingWrappingScorer_get__children(t_ScoreCachingWrappingScorer *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getChildren());
          return ::java::util::t_Collection::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/search/SortField.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {

          ::java::lang::Class *ValueSource::class$ = NULL;
          jmethodID *ValueSource::mids$ = NULL;
          bool ValueSource::live$ = false;

          jclass ValueSource::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/ValueSource");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
              mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getSortField_6e3d2211] = env->getMethodID(cls, "getSortField", "(Z)Lorg/apache/lucene/search/SortField;");
              mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_newContext_f71e04af] = env->getStaticMethodID(cls, "newContext", "(Lorg/apache/lucene/search/IndexSearcher;)Ljava/util/Map;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ValueSource::ValueSource() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void ValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
          }

          ::java::lang::String ValueSource::description() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
          }

          jboolean ValueSource::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::search::SortField ValueSource::getSortField(jboolean a0) const
          {
            return ::org::apache::lucene::search::SortField(env->callObjectMethod(this$, mids$[mid_getSortField_6e3d2211], a0));
          }

          ::org::apache::lucene::queries::function::FunctionValues ValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
          {
            return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
          }

          jint ValueSource::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::util::Map ValueSource::newContext(const ::org::apache::lucene::search::IndexSearcher & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_newContext_f71e04af], a0.this$));
          }

          ::java::lang::String ValueSource::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          static PyObject *t_ValueSource_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ValueSource_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ValueSource_init_(t_ValueSource *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ValueSource_createWeight(t_ValueSource *self, PyObject *args);
          static PyObject *t_ValueSource_description(t_ValueSource *self);
          static PyObject *t_ValueSource_equals(t_ValueSource *self, PyObject *args);
          static PyObject *t_ValueSource_getSortField(t_ValueSource *self, PyObject *arg);
          static PyObject *t_ValueSource_getValues(t_ValueSource *self, PyObject *args);
          static PyObject *t_ValueSource_hashCode(t_ValueSource *self, PyObject *args);
          static PyObject *t_ValueSource_newContext(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ValueSource_toString(t_ValueSource *self, PyObject *args);

          static PyMethodDef t_ValueSource__methods_[] = {
            DECLARE_METHOD(t_ValueSource, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ValueSource, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ValueSource, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_ValueSource, description, METH_NOARGS),
            DECLARE_METHOD(t_ValueSource, equals, METH_VARARGS),
            DECLARE_METHOD(t_ValueSource, getSortField, METH_O),
            DECLARE_METHOD(t_ValueSource, getValues, METH_VARARGS),
            DECLARE_METHOD(t_ValueSource, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_ValueSource, newContext, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ValueSource, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ValueSource, t_ValueSource, ::java::lang::Object, ValueSource, t_ValueSource_init_, 0, 0, 0, 0, 0);

          void t_ValueSource::install(PyObject *module)
          {
            installType(&PY_TYPE(ValueSource), module, "ValueSource", 0);
          }

          void t_ValueSource::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ValueSource).tp_dict, "class_", make_descriptor(ValueSource::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ValueSource).tp_dict, "wrapfn_", make_descriptor(t_ValueSource::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ValueSource_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ValueSource::initializeClass, 1)))
              return NULL;
            return t_ValueSource::wrap_Object(ValueSource(((t_ValueSource *) arg)->object.this$));
          }
          static PyObject *t_ValueSource_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ValueSource::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ValueSource_init_(t_ValueSource *self, PyObject *args, PyObject *kwds)
          {
            ValueSource object((jobject) NULL);

            INT_CALL(object = ValueSource());
            self->object = object;

            return 0;
          }

          static PyObject *t_ValueSource_createWeight(t_ValueSource *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

            if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
            {
              OBJ_CALL(self->object.createWeight(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "createWeight", args);
            return NULL;
          }

          static PyObject *t_ValueSource_description(t_ValueSource *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.description());
            return j2p(result);
          }

          static PyObject *t_ValueSource_equals(t_ValueSource *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ValueSource), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_ValueSource_getSortField(t_ValueSource *self, PyObject *arg)
          {
            jboolean a0;
            ::org::apache::lucene::search::SortField result((jobject) NULL);

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = self->object.getSortField(a0));
              return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getSortField", arg);
            return NULL;
          }

          static PyObject *t_ValueSource_getValues(t_ValueSource *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

            if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
            {
              OBJ_CALL(result = self->object.getValues(a0, a1));
              return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getValues", args);
            return NULL;
          }

          static PyObject *t_ValueSource_hashCode(t_ValueSource *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ValueSource), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_ValueSource_newContext(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::java::util::Map result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::function::ValueSource::newContext(a0));
              return ::java::util::t_Map::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "newContext", arg);
            return NULL;
          }

          static PyObject *t_ValueSource_toString(t_ValueSource *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(ValueSource), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniNormalizer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniNormalizer::class$ = NULL;
          jmethodID *SoraniNormalizer::mids$ = NULL;
          bool SoraniNormalizer::live$ = false;

          jclass SoraniNormalizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniNormalizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normalize_ec6430eb] = env->getMethodID(cls, "normalize", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniNormalizer::SoraniNormalizer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint SoraniNormalizer::normalize(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_normalize_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniNormalizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniNormalizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniNormalizer_init_(t_SoraniNormalizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniNormalizer_normalize(t_SoraniNormalizer *self, PyObject *args);

          static PyMethodDef t_SoraniNormalizer__methods_[] = {
            DECLARE_METHOD(t_SoraniNormalizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniNormalizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniNormalizer, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SoraniNormalizer, t_SoraniNormalizer, ::java::lang::Object, SoraniNormalizer, t_SoraniNormalizer_init_, 0, 0, 0, 0, 0);

          void t_SoraniNormalizer::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniNormalizer), module, "SoraniNormalizer", 0);
          }

          void t_SoraniNormalizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SoraniNormalizer).tp_dict, "class_", make_descriptor(SoraniNormalizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SoraniNormalizer).tp_dict, "wrapfn_", make_descriptor(t_SoraniNormalizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SoraniNormalizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SoraniNormalizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniNormalizer::initializeClass, 1)))
              return NULL;
            return t_SoraniNormalizer::wrap_Object(SoraniNormalizer(((t_SoraniNormalizer *) arg)->object.this$));
          }
          static PyObject *t_SoraniNormalizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniNormalizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniNormalizer_init_(t_SoraniNormalizer *self, PyObject *args, PyObject *kwds)
          {
            SoraniNormalizer object((jobject) NULL);

            INT_CALL(object = SoraniNormalizer());
            self->object = object;

            return 0;
          }

          static PyObject *t_SoraniNormalizer_normalize(t_SoraniNormalizer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.normalize(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "normalize", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/StrDocValues.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *StrDocValues::class$ = NULL;
            jmethodID *StrDocValues::mids$ = NULL;
            bool StrDocValues::live$ = false;

            jclass StrDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/StrDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_boolVal_39c7bd30] = env->getMethodID(cls, "boolVal", "(I)Z");
                mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_objectVal_29be6a55] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_strVal_141401b3] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            StrDocValues::StrDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            jboolean StrDocValues::boolVal(jint a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_boolVal_39c7bd30], a0);
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller StrDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
            }

            ::java::lang::Object StrDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_29be6a55], a0));
            }

            ::java::lang::String StrDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_141401b3], a0));
            }

            ::java::lang::String StrDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_StrDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_StrDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_StrDocValues_init_(t_StrDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_StrDocValues_boolVal(t_StrDocValues *self, PyObject *args);
            static PyObject *t_StrDocValues_getValueFiller(t_StrDocValues *self, PyObject *args);
            static PyObject *t_StrDocValues_objectVal(t_StrDocValues *self, PyObject *args);
            static PyObject *t_StrDocValues_strVal(t_StrDocValues *self, PyObject *args);
            static PyObject *t_StrDocValues_toString(t_StrDocValues *self, PyObject *args);
            static PyObject *t_StrDocValues_get__valueFiller(t_StrDocValues *self, void *data);
            static PyGetSetDef t_StrDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_StrDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_StrDocValues__methods_[] = {
              DECLARE_METHOD(t_StrDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StrDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StrDocValues, boolVal, METH_VARARGS),
              DECLARE_METHOD(t_StrDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_StrDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_StrDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_StrDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(StrDocValues, t_StrDocValues, ::org::apache::lucene::queries::function::FunctionValues, StrDocValues, t_StrDocValues_init_, 0, 0, t_StrDocValues__fields_, 0, 0);

            void t_StrDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(StrDocValues), module, "StrDocValues", 0);
            }

            void t_StrDocValues::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(StrDocValues).tp_dict, "class_", make_descriptor(StrDocValues::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(StrDocValues).tp_dict, "wrapfn_", make_descriptor(t_StrDocValues::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(StrDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_StrDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, StrDocValues::initializeClass, 1)))
                return NULL;
              return t_StrDocValues::wrap_Object(StrDocValues(((t_StrDocValues *) arg)->object.this$));
            }
            static PyObject *t_StrDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, StrDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_StrDocValues_init_(t_StrDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              StrDocValues object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = StrDocValues(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_StrDocValues_boolVal(t_StrDocValues *self, PyObject *args)
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.boolVal(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(StrDocValues), (PyObject *) self, "boolVal", args, 2);
            }

            static PyObject *t_StrDocValues_getValueFiller(t_StrDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(StrDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_StrDocValues_objectVal(t_StrDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(StrDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_StrDocValues_strVal(t_StrDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(StrDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_StrDocValues_toString(t_StrDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(StrDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_StrDocValues_get__valueFiller(t_StrDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/BufferedIndexInput.h"
#include "org/apache/lucene/store/RandomAccessInput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *BufferedIndexInput::class$ = NULL;
        jmethodID *BufferedIndexInput::mids$ = NULL;
        bool BufferedIndexInput::live$ = false;
        jint BufferedIndexInput::BUFFER_SIZE = (jint) 0;
        jint BufferedIndexInput::MERGE_BUFFER_SIZE = (jint) 0;
        jint BufferedIndexInput::MIN_BUFFER_SIZE = (jint) 0;

        jclass BufferedIndexInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/BufferedIndexInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_501c6f1c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
            mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
            mids$[mid_bufferSize_e43288a5] = env->getStaticMethodID(cls, "bufferSize", "(Lorg/apache/lucene/store/IOContext;)I");
            mids$[mid_clone_c014db58] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/store/BufferedIndexInput;");
            mids$[mid_getBufferSize_54c6a179] = env->getMethodID(cls, "getBufferSize", "()I");
            mids$[mid_getFilePointer_54c6a17a] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_readByte_54c6a172] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readByte_0ee6df3b] = env->getMethodID(cls, "readByte", "(J)B");
            mids$[mid_readBytes_86f4435f] = env->getMethodID(cls, "readBytes", "([BII)V");
            mids$[mid_readBytes_717964e8] = env->getMethodID(cls, "readBytes", "([BIIZ)V");
            mids$[mid_readInt_54c6a179] = env->getMethodID(cls, "readInt", "()I");
            mids$[mid_readInt_0ee6df30] = env->getMethodID(cls, "readInt", "(J)I");
            mids$[mid_readLong_54c6a17a] = env->getMethodID(cls, "readLong", "()J");
            mids$[mid_readLong_0ee6df33] = env->getMethodID(cls, "readLong", "(J)J");
            mids$[mid_readShort_54c6a163] = env->getMethodID(cls, "readShort", "()S");
            mids$[mid_readShort_0ee6df2a] = env->getMethodID(cls, "readShort", "(J)S");
            mids$[mid_readVInt_54c6a179] = env->getMethodID(cls, "readVInt", "()I");
            mids$[mid_readVLong_54c6a17a] = env->getMethodID(cls, "readVLong", "()J");
            mids$[mid_seek_0ee6df2f] = env->getMethodID(cls, "seek", "(J)V");
            mids$[mid_setBufferSize_39c7bd3c] = env->getMethodID(cls, "setBufferSize", "(I)V");
            mids$[mid_slice_d00c83eb] = env->getMethodID(cls, "slice", "(Ljava/lang/String;JJ)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_wrap_3bd7a9bc] = env->getStaticMethodID(cls, "wrap", "(Ljava/lang/String;Lorg/apache/lucene/store/IndexInput;JJ)Lorg/apache/lucene/store/BufferedIndexInput;");
            mids$[mid_flushBuffer_b3b465fc] = env->getMethodID(cls, "flushBuffer", "(Lorg/apache/lucene/store/IndexOutput;J)I");
            mids$[mid_readInternal_86f4435f] = env->getMethodID(cls, "readInternal", "([BII)V");
            mids$[mid_seekInternal_0ee6df2f] = env->getMethodID(cls, "seekInternal", "(J)V");
            mids$[mid_newBuffer_49b4f12b] = env->getMethodID(cls, "newBuffer", "([B)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            BUFFER_SIZE = env->getStaticIntField(cls, "BUFFER_SIZE");
            MERGE_BUFFER_SIZE = env->getStaticIntField(cls, "MERGE_BUFFER_SIZE");
            MIN_BUFFER_SIZE = env->getStaticIntField(cls, "MIN_BUFFER_SIZE");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BufferedIndexInput::BufferedIndexInput(const ::java::lang::String & a0) : ::org::apache::lucene::store::IndexInput(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        BufferedIndexInput::BufferedIndexInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) : ::org::apache::lucene::store::IndexInput(env->newObject(initializeClass, &mids$, mid_init$_501c6f1c, a0.this$, a1.this$)) {}

        BufferedIndexInput::BufferedIndexInput(const ::java::lang::String & a0, jint a1) : ::org::apache::lucene::store::IndexInput(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

        jint BufferedIndexInput::bufferSize(const ::org::apache::lucene::store::IOContext & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_bufferSize_e43288a5], a0.this$);
        }

        BufferedIndexInput BufferedIndexInput::clone() const
        {
          return BufferedIndexInput(env->callObjectMethod(this$, mids$[mid_clone_c014db58]));
        }

        jint BufferedIndexInput::getBufferSize() const
        {
          return env->callIntMethod(this$, mids$[mid_getBufferSize_54c6a179]);
        }

        jlong BufferedIndexInput::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_54c6a17a]);
        }

        jbyte BufferedIndexInput::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_54c6a172]);
        }

        jbyte BufferedIndexInput::readByte(jlong a0) const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_0ee6df3b], a0);
        }

        void BufferedIndexInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_86f4435f], a0.this$, a1, a2);
        }

        void BufferedIndexInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2, jboolean a3) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_717964e8], a0.this$, a1, a2, a3);
        }

        jint BufferedIndexInput::readInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_54c6a179]);
        }

        jint BufferedIndexInput::readInt(jlong a0) const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_0ee6df30], a0);
        }

        jlong BufferedIndexInput::readLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readLong_54c6a17a]);
        }

        jlong BufferedIndexInput::readLong(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_readLong_0ee6df33], a0);
        }

        jshort BufferedIndexInput::readShort() const
        {
          return env->callShortMethod(this$, mids$[mid_readShort_54c6a163]);
        }

        jshort BufferedIndexInput::readShort(jlong a0) const
        {
          return env->callShortMethod(this$, mids$[mid_readShort_0ee6df2a], a0);
        }

        jint BufferedIndexInput::readVInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readVInt_54c6a179]);
        }

        jlong BufferedIndexInput::readVLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readVLong_54c6a17a]);
        }

        void BufferedIndexInput::seek(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seek_0ee6df2f], a0);
        }

        void BufferedIndexInput::setBufferSize(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBufferSize_39c7bd3c], a0);
        }

        ::org::apache::lucene::store::IndexInput BufferedIndexInput::slice(const ::java::lang::String & a0, jlong a1, jlong a2) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_slice_d00c83eb], a0.this$, a1, a2));
        }

        BufferedIndexInput BufferedIndexInput::wrap(const ::java::lang::String & a0, const ::org::apache::lucene::store::IndexInput & a1, jlong a2, jlong a3)
        {
          jclass cls = env->getClass(initializeClass);
          return BufferedIndexInput(env->callStaticObjectMethod(cls, mids$[mid_wrap_3bd7a9bc], a0.this$, a1.this$, a2, a3));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_BufferedIndexInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedIndexInput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BufferedIndexInput_init_(t_BufferedIndexInput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BufferedIndexInput_bufferSize(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedIndexInput_clone(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_getBufferSize(t_BufferedIndexInput *self);
        static PyObject *t_BufferedIndexInput_getFilePointer(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readByte(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readBytes(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readInt(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readLong(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readShort(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readVInt(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readVLong(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_seek(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_setBufferSize(t_BufferedIndexInput *self, PyObject *arg);
        static PyObject *t_BufferedIndexInput_slice(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_wrap(PyTypeObject *type, PyObject *args);
        static PyObject *t_BufferedIndexInput_get__filePointer(t_BufferedIndexInput *self, void *data);
        static PyGetSetDef t_BufferedIndexInput__fields_[] = {
          DECLARE_GET_FIELD(t_BufferedIndexInput, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BufferedIndexInput__methods_[] = {
          DECLARE_METHOD(t_BufferedIndexInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedIndexInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedIndexInput, bufferSize, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedIndexInput, clone, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, getBufferSize, METH_NOARGS),
          DECLARE_METHOD(t_BufferedIndexInput, getFilePointer, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readByte, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readInt, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readLong, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readShort, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readVInt, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readVLong, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, seek, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, setBufferSize, METH_O),
          DECLARE_METHOD(t_BufferedIndexInput, slice, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, wrap, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BufferedIndexInput, t_BufferedIndexInput, ::org::apache::lucene::store::IndexInput, BufferedIndexInput, t_BufferedIndexInput_init_, 0, 0, t_BufferedIndexInput__fields_, 0, 0);

        void t_BufferedIndexInput::install(PyObject *module)
        {
          installType(&PY_TYPE(BufferedIndexInput), module, "BufferedIndexInput", 0);
        }

        void t_BufferedIndexInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BufferedIndexInput).tp_dict, "class_", make_descriptor(BufferedIndexInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BufferedIndexInput).tp_dict, "wrapfn_", make_descriptor(t_BufferedIndexInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BufferedIndexInput).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(BufferedIndexInput::initializeClass);
          PyDict_SetItemString(PY_TYPE(BufferedIndexInput).tp_dict, "BUFFER_SIZE", make_descriptor(BufferedIndexInput::BUFFER_SIZE));
          PyDict_SetItemString(PY_TYPE(BufferedIndexInput).tp_dict, "MERGE_BUFFER_SIZE", make_descriptor(BufferedIndexInput::MERGE_BUFFER_SIZE));
          PyDict_SetItemString(PY_TYPE(BufferedIndexInput).tp_dict, "MIN_BUFFER_SIZE", make_descriptor(BufferedIndexInput::MIN_BUFFER_SIZE));
        }

        static PyObject *t_BufferedIndexInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BufferedIndexInput::initializeClass, 1)))
            return NULL;
          return t_BufferedIndexInput::wrap_Object(BufferedIndexInput(((t_BufferedIndexInput *) arg)->object.this$));
        }
        static PyObject *t_BufferedIndexInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BufferedIndexInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BufferedIndexInput_init_(t_BufferedIndexInput *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              BufferedIndexInput object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = BufferedIndexInput(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::store::IOContext a1((jobject) NULL);
              BufferedIndexInput object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
              {
                INT_CALL(object = BufferedIndexInput(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              BufferedIndexInput object((jobject) NULL);

              if (!parseArgs(args, "sI", &a0, &a1))
              {
                INT_CALL(object = BufferedIndexInput(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BufferedIndexInput_bufferSize(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::IOContext a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IOContext::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::store::BufferedIndexInput::bufferSize(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "bufferSize", arg);
          return NULL;
        }

        static PyObject *t_BufferedIndexInput_clone(t_BufferedIndexInput *self, PyObject *args)
        {
          BufferedIndexInput result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_BufferedIndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_BufferedIndexInput_getBufferSize(t_BufferedIndexInput *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getBufferSize());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_BufferedIndexInput_getFilePointer(t_BufferedIndexInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFilePointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "getFilePointer", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readByte(t_BufferedIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jbyte result;
              OBJ_CALL(result = self->object.readByte());
              return PyInt_FromLong((long) result);
            }
            break;
           case 1:
            {
              jlong a0;
              jbyte result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.readByte(a0));
                return PyInt_FromLong((long) result);
              }
            }
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "readByte", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readBytes(t_BufferedIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.readBytes(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
            break;
           case 4:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              jboolean a3;

              if (!parseArgs(args, "[BIIZ", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(self->object.readBytes(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "readBytes", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readInt(t_BufferedIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jint result;
              OBJ_CALL(result = self->object.readInt());
              return PyInt_FromLong((long) result);
            }
            break;
           case 1:
            {
              jlong a0;
              jint result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.readInt(a0));
                return PyInt_FromLong((long) result);
              }
            }
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "readInt", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readLong(t_BufferedIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.readLong());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.readLong(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "readLong", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readShort(t_BufferedIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jshort result;
              OBJ_CALL(result = self->object.readShort());
              return PyInt_FromLong((long) result);
            }
            break;
           case 1:
            {
              jlong a0;
              jshort result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.readShort(a0));
                return PyInt_FromLong((long) result);
              }
            }
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "readShort", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readVInt(t_BufferedIndexInput *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readVInt());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "readVInt", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readVLong(t_BufferedIndexInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readVLong());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "readVLong", args, 2);
        }

        static PyObject *t_BufferedIndexInput_seek(t_BufferedIndexInput *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.seek(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "seek", args, 2);
        }

        static PyObject *t_BufferedIndexInput_setBufferSize(t_BufferedIndexInput *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setBufferSize(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBufferSize", arg);
          return NULL;
        }

        static PyObject *t_BufferedIndexInput_slice(t_BufferedIndexInput *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          jlong a2;
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sJJ", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.slice(a0, a1, a2));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "slice", args, 2);
        }

        static PyObject *t_BufferedIndexInput_wrap(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IndexInput a1((jobject) NULL);
          jlong a2;
          jlong a3;
          BufferedIndexInput result((jobject) NULL);

          if (!parseArgs(args, "skJJ", ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::store::BufferedIndexInput::wrap(a0, a1, a2, a3));
            return t_BufferedIndexInput::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "wrap", args);
          return NULL;
        }

        static PyObject *t_BufferedIndexInput_get__filePointer(t_BufferedIndexInput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *RuntimeException::class$ = NULL;
    jmethodID *RuntimeException::mids$ = NULL;
    bool RuntimeException::live$ = false;

    jclass RuntimeException::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/RuntimeException");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    RuntimeException::RuntimeException() : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    RuntimeException::RuntimeException(const ::java::lang::Throwable & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

    RuntimeException::RuntimeException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    RuntimeException::RuntimeException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_RuntimeException_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_RuntimeException_instance_(PyTypeObject *type, PyObject *arg);
    static int t_RuntimeException_init_(t_RuntimeException *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_RuntimeException__methods_[] = {
      DECLARE_METHOD(t_RuntimeException, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_RuntimeException, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(RuntimeException, t_RuntimeException, ::java::lang::Exception, RuntimeException, t_RuntimeException_init_, 0, 0, 0, 0, 0);

    void t_RuntimeException::install(PyObject *module)
    {
      installType(&PY_TYPE(RuntimeException), module, "RuntimeException", 0);
    }

    void t_RuntimeException::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(RuntimeException).tp_dict, "class_", make_descriptor(RuntimeException::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(RuntimeException).tp_dict, "wrapfn_", make_descriptor(t_RuntimeException::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(RuntimeException).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_RuntimeException_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, RuntimeException::initializeClass, 1)))
        return NULL;
      return t_RuntimeException::wrap_Object(RuntimeException(((t_RuntimeException *) arg)->object.this$));
    }
    static PyObject *t_RuntimeException_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, RuntimeException::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_RuntimeException_init_(t_RuntimeException *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          RuntimeException object((jobject) NULL);

          INT_CALL(object = RuntimeException());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::Throwable a0((jobject) NULL);
          RuntimeException object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            INT_CALL(object = RuntimeException(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          RuntimeException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = RuntimeException(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Throwable a1((jobject) NULL);
          RuntimeException object((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = RuntimeException(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonByteParser.h"
#include "org/apache/lucene/search/FieldCache$ByteParser.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonByteParser::class$ = NULL;
        jmethodID *PythonByteParser::mids$ = NULL;
        bool PythonByteParser::live$ = false;

        jclass PythonByteParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonByteParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_parseByte_7bc03dd0] = env->getMethodID(cls, "parseByte", "(Lorg/apache/lucene/util/BytesRef;)B");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_termsEnum_fb3ac14e] = env->getMethodID(cls, "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonByteParser::PythonByteParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonByteParser::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonByteParser::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonByteParser::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonByteParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonByteParser_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonByteParser_init_(t_PythonByteParser *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonByteParser_finalize(t_PythonByteParser *self);
        static PyObject *t_PythonByteParser_pythonExtension(t_PythonByteParser *self, PyObject *args);
        static jbyte JNICALL t_PythonByteParser_parseByte0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonByteParser_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonByteParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonByteParser_get__self(t_PythonByteParser *self, void *data);
        static PyGetSetDef t_PythonByteParser__fields_[] = {
          DECLARE_GET_FIELD(t_PythonByteParser, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonByteParser__methods_[] = {
          DECLARE_METHOD(t_PythonByteParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonByteParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonByteParser, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonByteParser, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonByteParser, t_PythonByteParser, ::java::lang::Object, PythonByteParser, t_PythonByteParser_init_, 0, 0, t_PythonByteParser__fields_, 0, 0);

        void t_PythonByteParser::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonByteParser), module, "PythonByteParser", 1);
        }

        void t_PythonByteParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonByteParser).tp_dict, "class_", make_descriptor(PythonByteParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonByteParser).tp_dict, "wrapfn_", make_descriptor(t_PythonByteParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonByteParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonByteParser::initializeClass);
          JNINativeMethod methods[] = {
            { "parseByte", "(Lorg/apache/lucene/util/BytesRef;)B", (void *) t_PythonByteParser_parseByte0 },
            { "pythonDecRef", "()V", (void *) t_PythonByteParser_pythonDecRef1 },
            { "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;", (void *) t_PythonByteParser_termsEnum2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonByteParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonByteParser::initializeClass, 1)))
            return NULL;
          return t_PythonByteParser::wrap_Object(PythonByteParser(((t_PythonByteParser *) arg)->object.this$));
        }
        static PyObject *t_PythonByteParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonByteParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonByteParser_init_(t_PythonByteParser *self, PyObject *args, PyObject *kwds)
        {
          PythonByteParser object((jobject) NULL);

          INT_CALL(object = PythonByteParser());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonByteParser_finalize(t_PythonByteParser *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonByteParser_pythonExtension(t_PythonByteParser *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jbyte JNICALL t_PythonByteParser_parseByte0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonByteParser::mids$[PythonByteParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jbyte value;
          PyObject *o0 = ::org::apache::lucene::util::t_BytesRef::wrap_Object(::org::apache::lucene::util::BytesRef(a0));
          PyObject *result = PyObject_CallMethod(obj, "parseByte", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "B", &value))
          {
            throwTypeError("parseByte", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jbyte) 0;
        }

        static void JNICALL t_PythonByteParser_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonByteParser::mids$[PythonByteParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonByteParser::mids$[PythonByteParser::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jobject JNICALL t_PythonByteParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonByteParser::mids$[PythonByteParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::index::TermsEnum value((jobject) NULL);
          PyObject *o0 = ::org::apache::lucene::index::t_Terms::wrap_Object(::org::apache::lucene::index::Terms(a0));
          PyObject *result = PyObject_CallMethod(obj, "termsEnum", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &value))
          {
            throwTypeError("termsEnum", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonByteParser_get__self(t_PythonByteParser *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/LucenePackage.h"
#include "java/lang/Package.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {

      ::java::lang::Class *LucenePackage::class$ = NULL;
      jmethodID *LucenePackage::mids$ = NULL;
      bool LucenePackage::live$ = false;

      jclass LucenePackage::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/apache/lucene/LucenePackage");

          mids$ = new jmethodID[max_mid];
          mids$[mid_get_b0f2f7bb] = env->getStaticMethodID(cls, "get", "()Ljava/lang/Package;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ::java::lang::Package LucenePackage::get()
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::lang::Package(env->callStaticObjectMethod(cls, mids$[mid_get_b0f2f7bb]));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      static PyObject *t_LucenePackage_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_LucenePackage_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_LucenePackage_get(PyTypeObject *type);

      static PyMethodDef t_LucenePackage__methods_[] = {
        DECLARE_METHOD(t_LucenePackage, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_LucenePackage, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_LucenePackage, get, METH_NOARGS | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(LucenePackage, t_LucenePackage, ::java::lang::Object, LucenePackage, abstract_init, 0, 0, 0, 0, 0);

      void t_LucenePackage::install(PyObject *module)
      {
        installType(&PY_TYPE(LucenePackage), module, "LucenePackage", 0);
      }

      void t_LucenePackage::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(LucenePackage).tp_dict, "class_", make_descriptor(LucenePackage::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(LucenePackage).tp_dict, "wrapfn_", make_descriptor(t_LucenePackage::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(LucenePackage).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_LucenePackage_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, LucenePackage::initializeClass, 1)))
          return NULL;
        return t_LucenePackage::wrap_Object(LucenePackage(((t_LucenePackage *) arg)->object.this$));
      }
      static PyObject *t_LucenePackage_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, LucenePackage::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_LucenePackage_get(PyTypeObject *type)
      {
        ::java::lang::Package result((jobject) NULL);
        OBJ_CALL(result = ::org::apache::lucene::LucenePackage::get());
        return ::java::lang::t_Package::wrap_Object(result);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/JoinUtil.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/join/ScoreMode.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *JoinUtil::class$ = NULL;
          jmethodID *JoinUtil::mids$ = NULL;
          bool JoinUtil::live$ = false;

          jclass JoinUtil::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/JoinUtil");

              mids$ = new jmethodID[max_mid];
              mids$[mid_createJoinQuery_ef4ce860] = env->getStaticMethodID(cls, "createJoinQuery", "(Ljava/lang/String;ZLjava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/join/ScoreMode;)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::search::Query JoinUtil::createJoinQuery(const ::java::lang::String & a0, jboolean a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::Query & a3, const ::org::apache::lucene::search::IndexSearcher & a4, const ::org::apache::lucene::search::join::ScoreMode & a5)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_createJoinQuery_ef4ce860], a0.this$, a1, a2.this$, a3.this$, a4.this$, a5.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_JoinUtil_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JoinUtil_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JoinUtil_createJoinQuery(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_JoinUtil__methods_[] = {
            DECLARE_METHOD(t_JoinUtil, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JoinUtil, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JoinUtil, createJoinQuery, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JoinUtil, t_JoinUtil, ::java::lang::Object, JoinUtil, abstract_init, 0, 0, 0, 0, 0);

          void t_JoinUtil::install(PyObject *module)
          {
            installType(&PY_TYPE(JoinUtil), module, "JoinUtil", 0);
          }

          void t_JoinUtil::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JoinUtil).tp_dict, "class_", make_descriptor(JoinUtil::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JoinUtil).tp_dict, "wrapfn_", make_descriptor(t_JoinUtil::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JoinUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JoinUtil_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JoinUtil::initializeClass, 1)))
              return NULL;
            return t_JoinUtil::wrap_Object(JoinUtil(((t_JoinUtil *) arg)->object.this$));
          }
          static PyObject *t_JoinUtil_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JoinUtil::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_JoinUtil_createJoinQuery(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            jboolean a1;
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::search::Query a3((jobject) NULL);
            ::org::apache::lucene::search::IndexSearcher a4((jobject) NULL);
            ::org::apache::lucene::search::join::ScoreMode a5((jobject) NULL);
            PyTypeObject **p5;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "sZskkK", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::join::ScoreMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &p5, ::org::apache::lucene::search::join::t_ScoreMode::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::join::JoinUtil::createJoinQuery(a0, a1, a2, a3, a4, a5));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "createJoinQuery", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/commongrams/CommonGramsFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {

          ::java::lang::Class *CommonGramsFilterFactory::class$ = NULL;
          jmethodID *CommonGramsFilterFactory::mids$ = NULL;
          bool CommonGramsFilterFactory::live$ = false;

          jclass CommonGramsFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/commongrams/CommonGramsFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_2969f76d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");
              mids$[mid_getCommonWords_d2d3505c] = env->getMethodID(cls, "getCommonWords", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_isIgnoreCase_54c6a16a] = env->getMethodID(cls, "isIgnoreCase", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CommonGramsFilterFactory::CommonGramsFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter CommonGramsFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_2969f76d], a0.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet CommonGramsFilterFactory::getCommonWords() const
          {
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callObjectMethod(this$, mids$[mid_getCommonWords_d2d3505c]));
          }

          void CommonGramsFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }

          jboolean CommonGramsFilterFactory::isIgnoreCase() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIgnoreCase_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {
          static PyObject *t_CommonGramsFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CommonGramsFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CommonGramsFilterFactory_init_(t_CommonGramsFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CommonGramsFilterFactory_create(t_CommonGramsFilterFactory *self, PyObject *args);
          static PyObject *t_CommonGramsFilterFactory_getCommonWords(t_CommonGramsFilterFactory *self);
          static PyObject *t_CommonGramsFilterFactory_inform(t_CommonGramsFilterFactory *self, PyObject *arg);
          static PyObject *t_CommonGramsFilterFactory_isIgnoreCase(t_CommonGramsFilterFactory *self);
          static PyObject *t_CommonGramsFilterFactory_get__commonWords(t_CommonGramsFilterFactory *self, void *data);
          static PyObject *t_CommonGramsFilterFactory_get__ignoreCase(t_CommonGramsFilterFactory *self, void *data);
          static PyGetSetDef t_CommonGramsFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_CommonGramsFilterFactory, commonWords),
            DECLARE_GET_FIELD(t_CommonGramsFilterFactory, ignoreCase),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CommonGramsFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CommonGramsFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_CommonGramsFilterFactory, getCommonWords, METH_NOARGS),
            DECLARE_METHOD(t_CommonGramsFilterFactory, inform, METH_O),
            DECLARE_METHOD(t_CommonGramsFilterFactory, isIgnoreCase, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CommonGramsFilterFactory, t_CommonGramsFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, CommonGramsFilterFactory, t_CommonGramsFilterFactory_init_, 0, 0, t_CommonGramsFilterFactory__fields_, 0, 0);

          void t_CommonGramsFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CommonGramsFilterFactory), module, "CommonGramsFilterFactory", 0);
          }

          void t_CommonGramsFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CommonGramsFilterFactory).tp_dict, "class_", make_descriptor(CommonGramsFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CommonGramsFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CommonGramsFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CommonGramsFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CommonGramsFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CommonGramsFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CommonGramsFilterFactory::wrap_Object(CommonGramsFilterFactory(((t_CommonGramsFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CommonGramsFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CommonGramsFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CommonGramsFilterFactory_init_(t_CommonGramsFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CommonGramsFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CommonGramsFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CommonGramsFilterFactory_create(t_CommonGramsFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CommonGramsFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_CommonGramsFilterFactory_getCommonWords(t_CommonGramsFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = self->object.getCommonWords());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_CommonGramsFilterFactory_inform(t_CommonGramsFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_CommonGramsFilterFactory_isIgnoreCase(t_CommonGramsFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isIgnoreCase());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_CommonGramsFilterFactory_get__commonWords(t_CommonGramsFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getCommonWords());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }

          static PyObject *t_CommonGramsFilterFactory_get__ignoreCase(t_CommonGramsFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isIgnoreCase());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanNormalizationFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanNormalizationFilterFactory::class$ = NULL;
          jmethodID *GermanNormalizationFilterFactory::mids$ = NULL;
          bool GermanNormalizationFilterFactory::live$ = false;

          jclass GermanNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanNormalizationFilterFactory::GermanNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream GermanNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory GermanNormalizationFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanNormalizationFilterFactory_init_(t_GermanNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanNormalizationFilterFactory_create(t_GermanNormalizationFilterFactory *self, PyObject *args);
          static PyObject *t_GermanNormalizationFilterFactory_getMultiTermComponent(t_GermanNormalizationFilterFactory *self);
          static PyObject *t_GermanNormalizationFilterFactory_get__multiTermComponent(t_GermanNormalizationFilterFactory *self, void *data);
          static PyGetSetDef t_GermanNormalizationFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_GermanNormalizationFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GermanNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GermanNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanNormalizationFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_GermanNormalizationFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanNormalizationFilterFactory, t_GermanNormalizationFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, GermanNormalizationFilterFactory, t_GermanNormalizationFilterFactory_init_, 0, 0, t_GermanNormalizationFilterFactory__fields_, 0, 0);

          void t_GermanNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanNormalizationFilterFactory), module, "GermanNormalizationFilterFactory", 0);
          }

          void t_GermanNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanNormalizationFilterFactory).tp_dict, "class_", make_descriptor(GermanNormalizationFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanNormalizationFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_GermanNormalizationFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanNormalizationFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GermanNormalizationFilterFactory::wrap_Object(GermanNormalizationFilterFactory(((t_GermanNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GermanNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanNormalizationFilterFactory_init_(t_GermanNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GermanNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GermanNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanNormalizationFilterFactory_create(t_GermanNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(GermanNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_GermanNormalizationFilterFactory_getMultiTermComponent(t_GermanNormalizationFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_GermanNormalizationFilterFactory_get__multiTermComponent(t_GermanNormalizationFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/CustomScoreQuery.h"
#include "org/apache/lucene/queries/function/FunctionQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *CustomScoreQuery::class$ = NULL;
        jmethodID *CustomScoreQuery::mids$ = NULL;
        bool CustomScoreQuery::live$ = false;

        jclass CustomScoreQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/CustomScoreQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6e301113] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;)V");
            mids$[mid_init$_bf3fc62f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;[Lorg/apache/lucene/queries/function/FunctionQuery;)V");
            mids$[mid_init$_02f9eae9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/queries/function/FunctionQuery;)V");
            mids$[mid_clone_c1341b71] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/queries/CustomScoreQuery;");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getScoringQueries_e66abcfa] = env->getMethodID(cls, "getScoringQueries", "()[Lorg/apache/lucene/search/Query;");
            mids$[mid_getSubQuery_97e3851a] = env->getMethodID(cls, "getSubQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isStrict_54c6a16a] = env->getMethodID(cls, "isStrict", "()Z");
            mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setStrict_bb0c767f] = env->getMethodID(cls, "setStrict", "(Z)V");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getCustomScoreProvider_a7245052] = env->getMethodID(cls, "getCustomScoreProvider", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/CustomScoreProvider;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CustomScoreQuery::CustomScoreQuery(const ::org::apache::lucene::search::Query & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_6e301113, a0.this$)) {}

        CustomScoreQuery::CustomScoreQuery(const ::org::apache::lucene::search::Query & a0, const JArray< ::org::apache::lucene::queries::function::FunctionQuery > & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_bf3fc62f, a0.this$, a1.this$)) {}

        CustomScoreQuery::CustomScoreQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::queries::function::FunctionQuery & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_02f9eae9, a0.this$, a1.this$)) {}

        CustomScoreQuery CustomScoreQuery::clone() const
        {
          return CustomScoreQuery(env->callObjectMethod(this$, mids$[mid_clone_c1341b71]));
        }

        ::org::apache::lucene::search::Weight CustomScoreQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean CustomScoreQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void CustomScoreQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        JArray< ::org::apache::lucene::search::Query > CustomScoreQuery::getScoringQueries() const
        {
          return JArray< ::org::apache::lucene::search::Query >(env->callObjectMethod(this$, mids$[mid_getScoringQueries_e66abcfa]));
        }

        ::org::apache::lucene::search::Query CustomScoreQuery::getSubQuery() const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getSubQuery_97e3851a]));
        }

        jint CustomScoreQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean CustomScoreQuery::isStrict() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isStrict_54c6a16a]);
        }

        ::java::lang::String CustomScoreQuery::name() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
        }

        ::org::apache::lucene::search::Query CustomScoreQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        void CustomScoreQuery::setStrict(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStrict_bb0c767f], a0);
        }

        ::java::lang::String CustomScoreQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_CustomScoreQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CustomScoreQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CustomScoreQuery_init_(t_CustomScoreQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CustomScoreQuery_clone(t_CustomScoreQuery *self, PyObject *args);
        static PyObject *t_CustomScoreQuery_createWeight(t_CustomScoreQuery *self, PyObject *args);
        static PyObject *t_CustomScoreQuery_equals(t_CustomScoreQuery *self, PyObject *args);
        static PyObject *t_CustomScoreQuery_extractTerms(t_CustomScoreQuery *self, PyObject *args);
        static PyObject *t_CustomScoreQuery_getScoringQueries(t_CustomScoreQuery *self);
        static PyObject *t_CustomScoreQuery_getSubQuery(t_CustomScoreQuery *self);
        static PyObject *t_CustomScoreQuery_hashCode(t_CustomScoreQuery *self, PyObject *args);
        static PyObject *t_CustomScoreQuery_isStrict(t_CustomScoreQuery *self);
        static PyObject *t_CustomScoreQuery_name(t_CustomScoreQuery *self);
        static PyObject *t_CustomScoreQuery_rewrite(t_CustomScoreQuery *self, PyObject *args);
        static PyObject *t_CustomScoreQuery_setStrict(t_CustomScoreQuery *self, PyObject *arg);
        static PyObject *t_CustomScoreQuery_toString(t_CustomScoreQuery *self, PyObject *args);
        static PyObject *t_CustomScoreQuery_get__scoringQueries(t_CustomScoreQuery *self, void *data);
        static PyObject *t_CustomScoreQuery_get__strict(t_CustomScoreQuery *self, void *data);
        static int t_CustomScoreQuery_set__strict(t_CustomScoreQuery *self, PyObject *arg, void *data);
        static PyObject *t_CustomScoreQuery_get__subQuery(t_CustomScoreQuery *self, void *data);
        static PyGetSetDef t_CustomScoreQuery__fields_[] = {
          DECLARE_GET_FIELD(t_CustomScoreQuery, scoringQueries),
          DECLARE_GETSET_FIELD(t_CustomScoreQuery, strict),
          DECLARE_GET_FIELD(t_CustomScoreQuery, subQuery),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CustomScoreQuery__methods_[] = {
          DECLARE_METHOD(t_CustomScoreQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CustomScoreQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CustomScoreQuery, clone, METH_VARARGS),
          DECLARE_METHOD(t_CustomScoreQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_CustomScoreQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_CustomScoreQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_CustomScoreQuery, getScoringQueries, METH_NOARGS),
          DECLARE_METHOD(t_CustomScoreQuery, getSubQuery, METH_NOARGS),
          DECLARE_METHOD(t_CustomScoreQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_CustomScoreQuery, isStrict, METH_NOARGS),
          DECLARE_METHOD(t_CustomScoreQuery, name, METH_NOARGS),
          DECLARE_METHOD(t_CustomScoreQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_CustomScoreQuery, setStrict, METH_O),
          DECLARE_METHOD(t_CustomScoreQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CustomScoreQuery, t_CustomScoreQuery, ::org::apache::lucene::search::Query, CustomScoreQuery, t_CustomScoreQuery_init_, 0, 0, t_CustomScoreQuery__fields_, 0, 0);

        void t_CustomScoreQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(CustomScoreQuery), module, "CustomScoreQuery", 0);
        }

        void t_CustomScoreQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CustomScoreQuery).tp_dict, "class_", make_descriptor(CustomScoreQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CustomScoreQuery).tp_dict, "wrapfn_", make_descriptor(t_CustomScoreQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CustomScoreQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CustomScoreQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CustomScoreQuery::initializeClass, 1)))
            return NULL;
          return t_CustomScoreQuery::wrap_Object(CustomScoreQuery(((t_CustomScoreQuery *) arg)->object.this$));
        }
        static PyObject *t_CustomScoreQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CustomScoreQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CustomScoreQuery_init_(t_CustomScoreQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              CustomScoreQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
              {
                INT_CALL(object = CustomScoreQuery(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              JArray< ::org::apache::lucene::queries::function::FunctionQuery > a1((jobject) NULL);
              CustomScoreQuery object((jobject) NULL);

              if (!parseArgs(args, "k[k", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::queries::function::FunctionQuery::initializeClass, &a0, &a1))
              {
                INT_CALL(object = CustomScoreQuery(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionQuery a1((jobject) NULL);
              CustomScoreQuery object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::queries::function::FunctionQuery::initializeClass, &a0, &a1))
              {
                INT_CALL(object = CustomScoreQuery(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CustomScoreQuery_clone(t_CustomScoreQuery *self, PyObject *args)
        {
          CustomScoreQuery result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_CustomScoreQuery::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CustomScoreQuery), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_CustomScoreQuery_createWeight(t_CustomScoreQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CustomScoreQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_CustomScoreQuery_equals(t_CustomScoreQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CustomScoreQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_CustomScoreQuery_extractTerms(t_CustomScoreQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CustomScoreQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_CustomScoreQuery_getScoringQueries(t_CustomScoreQuery *self)
        {
          JArray< ::org::apache::lucene::search::Query > result((jobject) NULL);
          OBJ_CALL(result = self->object.getScoringQueries());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::t_Query::wrap_jobject);
        }

        static PyObject *t_CustomScoreQuery_getSubQuery(t_CustomScoreQuery *self)
        {
          ::org::apache::lucene::search::Query result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(result);
        }

        static PyObject *t_CustomScoreQuery_hashCode(t_CustomScoreQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(CustomScoreQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_CustomScoreQuery_isStrict(t_CustomScoreQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isStrict());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_CustomScoreQuery_name(t_CustomScoreQuery *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.name());
          return j2p(result);
        }

        static PyObject *t_CustomScoreQuery_rewrite(t_CustomScoreQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CustomScoreQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_CustomScoreQuery_setStrict(t_CustomScoreQuery *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setStrict(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStrict", arg);
          return NULL;
        }

        static PyObject *t_CustomScoreQuery_toString(t_CustomScoreQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(CustomScoreQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_CustomScoreQuery_get__scoringQueries(t_CustomScoreQuery *self, void *data)
        {
          JArray< ::org::apache::lucene::search::Query > value((jobject) NULL);
          OBJ_CALL(value = self->object.getScoringQueries());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_Query::wrap_jobject);
        }

        static PyObject *t_CustomScoreQuery_get__strict(t_CustomScoreQuery *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isStrict());
          Py_RETURN_BOOL(value);
        }
        static int t_CustomScoreQuery_set__strict(t_CustomScoreQuery *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setStrict(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "strict", arg);
          return -1;
        }

        static PyObject *t_CustomScoreQuery_get__subQuery(t_CustomScoreQuery *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/LiteralValueSource.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *LiteralValueSource::class$ = NULL;
            jmethodID *LiteralValueSource::mids$ = NULL;
            bool LiteralValueSource::live$ = false;
            jint LiteralValueSource::hash = (jint) 0;

            jclass LiteralValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/LiteralValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValue_14c7b5c5] = env->getMethodID(cls, "getValue", "()Ljava/lang/String;");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                hash = env->getStaticIntField(cls, "hash");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LiteralValueSource::LiteralValueSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            ::java::lang::String LiteralValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean LiteralValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::java::lang::String LiteralValueSource::getValue() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getValue_14c7b5c5]));
            }

            ::org::apache::lucene::queries::function::FunctionValues LiteralValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint LiteralValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_LiteralValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LiteralValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LiteralValueSource_init_(t_LiteralValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_LiteralValueSource_description(t_LiteralValueSource *self, PyObject *args);
            static PyObject *t_LiteralValueSource_equals(t_LiteralValueSource *self, PyObject *args);
            static PyObject *t_LiteralValueSource_getValue(t_LiteralValueSource *self);
            static PyObject *t_LiteralValueSource_getValues(t_LiteralValueSource *self, PyObject *args);
            static PyObject *t_LiteralValueSource_hashCode(t_LiteralValueSource *self, PyObject *args);
            static PyObject *t_LiteralValueSource_get__value(t_LiteralValueSource *self, void *data);
            static PyGetSetDef t_LiteralValueSource__fields_[] = {
              DECLARE_GET_FIELD(t_LiteralValueSource, value),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_LiteralValueSource__methods_[] = {
              DECLARE_METHOD(t_LiteralValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LiteralValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LiteralValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_LiteralValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_LiteralValueSource, getValue, METH_NOARGS),
              DECLARE_METHOD(t_LiteralValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_LiteralValueSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(LiteralValueSource, t_LiteralValueSource, ::org::apache::lucene::queries::function::ValueSource, LiteralValueSource, t_LiteralValueSource_init_, 0, 0, t_LiteralValueSource__fields_, 0, 0);

            void t_LiteralValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(LiteralValueSource), module, "LiteralValueSource", 0);
            }

            void t_LiteralValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(LiteralValueSource).tp_dict, "class_", make_descriptor(LiteralValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(LiteralValueSource).tp_dict, "wrapfn_", make_descriptor(t_LiteralValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(LiteralValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(LiteralValueSource::initializeClass);
              PyDict_SetItemString(PY_TYPE(LiteralValueSource).tp_dict, "hash", make_descriptor(LiteralValueSource::hash));
            }

            static PyObject *t_LiteralValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LiteralValueSource::initializeClass, 1)))
                return NULL;
              return t_LiteralValueSource::wrap_Object(LiteralValueSource(((t_LiteralValueSource *) arg)->object.this$));
            }
            static PyObject *t_LiteralValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LiteralValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LiteralValueSource_init_(t_LiteralValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              LiteralValueSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = LiteralValueSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_LiteralValueSource_description(t_LiteralValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(LiteralValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_LiteralValueSource_equals(t_LiteralValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(LiteralValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_LiteralValueSource_getValue(t_LiteralValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getValue());
              return j2p(result);
            }

            static PyObject *t_LiteralValueSource_getValues(t_LiteralValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(LiteralValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_LiteralValueSource_hashCode(t_LiteralValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(LiteralValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_LiteralValueSource_get__value(t_LiteralValueSource *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getValue());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/LiveFieldValues.h"
#include "java/lang/Class.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/ReferenceManager$RefreshListener.h"
#include "org/apache/lucene/search/ReferenceManager.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *LiveFieldValues::class$ = NULL;
        jmethodID *LiveFieldValues::mids$ = NULL;
        bool LiveFieldValues::live$ = false;

        jclass LiveFieldValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/LiveFieldValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_48ea9202] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/ReferenceManager;Ljava/lang/Object;)V");
            mids$[mid_add_2da4da24] = env->getMethodID(cls, "add", "(Ljava/lang/String;Ljava/lang/Object;)V");
            mids$[mid_afterRefresh_bb0c767f] = env->getMethodID(cls, "afterRefresh", "(Z)V");
            mids$[mid_beforeRefresh_54c6a166] = env->getMethodID(cls, "beforeRefresh", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_delete_5fdc3f48] = env->getMethodID(cls, "delete", "(Ljava/lang/String;)V");
            mids$[mid_get_2a1c4d09] = env->getMethodID(cls, "get", "(Ljava/lang/String;)Ljava/lang/Object;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_lookupFromSearcher_e0270375] = env->getMethodID(cls, "lookupFromSearcher", "(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LiveFieldValues::LiveFieldValues(const ::org::apache::lucene::search::ReferenceManager & a0, const ::java::lang::Object & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_48ea9202, a0.this$, a1.this$)) {}

        void LiveFieldValues::add(const ::java::lang::String & a0, const ::java::lang::Object & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_2da4da24], a0.this$, a1.this$);
        }

        void LiveFieldValues::afterRefresh(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_afterRefresh_bb0c767f], a0);
        }

        void LiveFieldValues::beforeRefresh() const
        {
          env->callVoidMethod(this$, mids$[mid_beforeRefresh_54c6a166]);
        }

        void LiveFieldValues::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void LiveFieldValues::delete$(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_delete_5fdc3f48], a0.this$);
        }

        ::java::lang::Object LiveFieldValues::get(const ::java::lang::String & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_2a1c4d09], a0.this$));
        }

        jint LiveFieldValues::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_LiveFieldValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LiveFieldValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LiveFieldValues_of_(t_LiveFieldValues *self, PyObject *args);
        static int t_LiveFieldValues_init_(t_LiveFieldValues *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LiveFieldValues_add(t_LiveFieldValues *self, PyObject *args);
        static PyObject *t_LiveFieldValues_afterRefresh(t_LiveFieldValues *self, PyObject *arg);
        static PyObject *t_LiveFieldValues_beforeRefresh(t_LiveFieldValues *self);
        static PyObject *t_LiveFieldValues_close(t_LiveFieldValues *self);
        static PyObject *t_LiveFieldValues_delete(t_LiveFieldValues *self, PyObject *arg);
        static PyObject *t_LiveFieldValues_get(t_LiveFieldValues *self, PyObject *arg);
        static PyObject *t_LiveFieldValues_size(t_LiveFieldValues *self);
        static PyObject *t_LiveFieldValues_get__parameters_(t_LiveFieldValues *self, void *data);
        static PyGetSetDef t_LiveFieldValues__fields_[] = {
          DECLARE_GET_FIELD(t_LiveFieldValues, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LiveFieldValues__methods_[] = {
          DECLARE_METHOD(t_LiveFieldValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LiveFieldValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LiveFieldValues, of_, METH_VARARGS),
          DECLARE_METHOD(t_LiveFieldValues, add, METH_VARARGS),
          DECLARE_METHOD(t_LiveFieldValues, afterRefresh, METH_O),
          DECLARE_METHOD(t_LiveFieldValues, beforeRefresh, METH_NOARGS),
          DECLARE_METHOD(t_LiveFieldValues, close, METH_NOARGS),
          DECLARE_METHOD(t_LiveFieldValues, delete, METH_O),
          DECLARE_METHOD(t_LiveFieldValues, get, METH_O),
          DECLARE_METHOD(t_LiveFieldValues, size, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LiveFieldValues, t_LiveFieldValues, ::java::lang::Object, LiveFieldValues, t_LiveFieldValues_init_, 0, 0, t_LiveFieldValues__fields_, 0, 0);
        PyObject *t_LiveFieldValues::wrap_Object(const LiveFieldValues& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_LiveFieldValues::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_LiveFieldValues *self = (t_LiveFieldValues *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        PyObject *t_LiveFieldValues::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_LiveFieldValues::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_LiveFieldValues *self = (t_LiveFieldValues *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        void t_LiveFieldValues::install(PyObject *module)
        {
          installType(&PY_TYPE(LiveFieldValues), module, "LiveFieldValues", 0);
        }

        void t_LiveFieldValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LiveFieldValues).tp_dict, "class_", make_descriptor(LiveFieldValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LiveFieldValues).tp_dict, "wrapfn_", make_descriptor(t_LiveFieldValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LiveFieldValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LiveFieldValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LiveFieldValues::initializeClass, 1)))
            return NULL;
          return t_LiveFieldValues::wrap_Object(LiveFieldValues(((t_LiveFieldValues *) arg)->object.this$));
        }
        static PyObject *t_LiveFieldValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LiveFieldValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_LiveFieldValues_of_(t_LiveFieldValues *self, PyObject *args)
        {
          if (!parseArg(args, "T", 2, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_LiveFieldValues_init_(t_LiveFieldValues *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::ReferenceManager a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object a1((jobject) NULL);
          LiveFieldValues object((jobject) NULL);

          if (!parseArgs(args, "Ko", ::org::apache::lucene::search::ReferenceManager::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_ReferenceManager::parameters_, &a1))
          {
            INT_CALL(object = LiveFieldValues(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LiveFieldValues_add(t_LiveFieldValues *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);

          if (!parseArgs(args, "sO", self->parameters[1], &a0, &a1))
          {
            OBJ_CALL(self->object.add(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_LiveFieldValues_afterRefresh(t_LiveFieldValues *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.afterRefresh(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "afterRefresh", arg);
          return NULL;
        }

        static PyObject *t_LiveFieldValues_beforeRefresh(t_LiveFieldValues *self)
        {
          OBJ_CALL(self->object.beforeRefresh());
          Py_RETURN_NONE;
        }

        static PyObject *t_LiveFieldValues_close(t_LiveFieldValues *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_LiveFieldValues_delete(t_LiveFieldValues *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.delete$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "delete", arg);
          return NULL;
        }

        static PyObject *t_LiveFieldValues_get(t_LiveFieldValues *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_LiveFieldValues_size(t_LiveFieldValues *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }
        static PyObject *t_LiveFieldValues_get__parameters_(t_LiveFieldValues *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/Hyphen.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *Hyphen::class$ = NULL;
            jmethodID *Hyphen::mids$ = NULL;
            jfieldID *Hyphen::fids$ = NULL;
            bool Hyphen::live$ = false;

            jclass Hyphen::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/Hyphen");

                mids$ = new jmethodID[max_mid];
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                fids$ = new jfieldID[max_fid];
                fids$[fid_noBreak] = env->getFieldID(cls, "noBreak", "Ljava/lang/String;");
                fids$[fid_postBreak] = env->getFieldID(cls, "postBreak", "Ljava/lang/String;");
                fids$[fid_preBreak] = env->getFieldID(cls, "preBreak", "Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::java::lang::String Hyphen::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }

            ::java::lang::String Hyphen::_get_noBreak() const
            {
              return ::java::lang::String(env->getObjectField(this$, fids$[fid_noBreak]));
            }

            void Hyphen::_set_noBreak(const ::java::lang::String & a0) const
            {
              env->setObjectField(this$, fids$[fid_noBreak], a0.this$);
            }

            ::java::lang::String Hyphen::_get_postBreak() const
            {
              return ::java::lang::String(env->getObjectField(this$, fids$[fid_postBreak]));
            }

            void Hyphen::_set_postBreak(const ::java::lang::String & a0) const
            {
              env->setObjectField(this$, fids$[fid_postBreak], a0.this$);
            }

            ::java::lang::String Hyphen::_get_preBreak() const
            {
              return ::java::lang::String(env->getObjectField(this$, fids$[fid_preBreak]));
            }

            void Hyphen::_set_preBreak(const ::java::lang::String & a0) const
            {
              env->setObjectField(this$, fids$[fid_preBreak], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_Hyphen_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Hyphen_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Hyphen_toString(t_Hyphen *self, PyObject *args);
            static PyObject *t_Hyphen_get__noBreak(t_Hyphen *self, void *data);
            static int t_Hyphen_set__noBreak(t_Hyphen *self, PyObject *arg, void *data);
            static PyObject *t_Hyphen_get__postBreak(t_Hyphen *self, void *data);
            static int t_Hyphen_set__postBreak(t_Hyphen *self, PyObject *arg, void *data);
            static PyObject *t_Hyphen_get__preBreak(t_Hyphen *self, void *data);
            static int t_Hyphen_set__preBreak(t_Hyphen *self, PyObject *arg, void *data);

            static PyGetSetDef t_Hyphen__fields_[] = {
              DECLARE_GETSET_FIELD(t_Hyphen, noBreak),
              DECLARE_GETSET_FIELD(t_Hyphen, postBreak),
              DECLARE_GETSET_FIELD(t_Hyphen, preBreak),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_Hyphen__methods_[] = {
              DECLARE_METHOD(t_Hyphen, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Hyphen, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Hyphen, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(Hyphen, t_Hyphen, ::java::lang::Object, Hyphen, abstract_init, 0, 0, t_Hyphen__fields_, 0, 0);

            void t_Hyphen::install(PyObject *module)
            {
              installType(&PY_TYPE(Hyphen), module, "Hyphen", 0);
            }

            void t_Hyphen::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(Hyphen).tp_dict, "class_", make_descriptor(Hyphen::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(Hyphen).tp_dict, "wrapfn_", make_descriptor(t_Hyphen::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(Hyphen).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_Hyphen_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, Hyphen::initializeClass, 1)))
                return NULL;
              return t_Hyphen::wrap_Object(Hyphen(((t_Hyphen *) arg)->object.this$));
            }
            static PyObject *t_Hyphen_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, Hyphen::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_Hyphen_toString(t_Hyphen *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(Hyphen), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_Hyphen_get__noBreak(t_Hyphen *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object._get_noBreak());
              return j2p(value);
            }
            static int t_Hyphen_set__noBreak(t_Hyphen *self, PyObject *arg, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object._set_noBreak(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "noBreak", arg);
              return -1;
            }

            static PyObject *t_Hyphen_get__postBreak(t_Hyphen *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object._get_postBreak());
              return j2p(value);
            }
            static int t_Hyphen_set__postBreak(t_Hyphen *self, PyObject *arg, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object._set_postBreak(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "postBreak", arg);
              return -1;
            }

            static PyObject *t_Hyphen_get__preBreak(t_Hyphen *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object._get_preBreak());
              return j2p(value);
            }
            static int t_Hyphen_set__preBreak(t_Hyphen *self, PyObject *arg, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object._set_preBreak(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "preBreak", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cz/CzechStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {

          ::java::lang::Class *CzechStemmer::class$ = NULL;
          jmethodID *CzechStemmer::mids$ = NULL;
          bool CzechStemmer::live$ = false;

          jclass CzechStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cz/CzechStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CzechStemmer::CzechStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint CzechStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {
          static PyObject *t_CzechStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CzechStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CzechStemmer_init_(t_CzechStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CzechStemmer_stem(t_CzechStemmer *self, PyObject *args);

          static PyMethodDef t_CzechStemmer__methods_[] = {
            DECLARE_METHOD(t_CzechStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CzechStemmer, t_CzechStemmer, ::java::lang::Object, CzechStemmer, t_CzechStemmer_init_, 0, 0, 0, 0, 0);

          void t_CzechStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(CzechStemmer), module, "CzechStemmer", 0);
          }

          void t_CzechStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CzechStemmer).tp_dict, "class_", make_descriptor(CzechStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CzechStemmer).tp_dict, "wrapfn_", make_descriptor(t_CzechStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CzechStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CzechStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CzechStemmer::initializeClass, 1)))
              return NULL;
            return t_CzechStemmer::wrap_Object(CzechStemmer(((t_CzechStemmer *) arg)->object.this$));
          }
          static PyObject *t_CzechStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CzechStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CzechStemmer_init_(t_CzechStemmer *self, PyObject *args, PyObject *kwds)
          {
            CzechStemmer object((jobject) NULL);

            INT_CALL(object = CzechStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_CzechStemmer_stem(t_CzechStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Normalization$NoNormalization.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Normalization$NoNormalization::class$ = NULL;
          jmethodID *Normalization$NoNormalization::mids$ = NULL;
          bool Normalization$NoNormalization::live$ = false;

          jclass Normalization$NoNormalization::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Normalization$NoNormalization");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_aa9c2b5b] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_tfn_63482206] = env->getMethodID(cls, "tfn", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Normalization$NoNormalization::Normalization$NoNormalization() : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation Normalization$NoNormalization::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_aa9c2b5b], a0.this$, a1, a2));
          }

          jfloat Normalization$NoNormalization::tfn(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_tfn_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String Normalization$NoNormalization::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Normalization$NoNormalization_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Normalization$NoNormalization_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Normalization$NoNormalization_init_(t_Normalization$NoNormalization *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Normalization$NoNormalization_explain(t_Normalization$NoNormalization *self, PyObject *args);
          static PyObject *t_Normalization$NoNormalization_tfn(t_Normalization$NoNormalization *self, PyObject *args);
          static PyObject *t_Normalization$NoNormalization_toString(t_Normalization$NoNormalization *self, PyObject *args);

          static PyMethodDef t_Normalization$NoNormalization__methods_[] = {
            DECLARE_METHOD(t_Normalization$NoNormalization, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Normalization$NoNormalization, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Normalization$NoNormalization, explain, METH_VARARGS),
            DECLARE_METHOD(t_Normalization$NoNormalization, tfn, METH_VARARGS),
            DECLARE_METHOD(t_Normalization$NoNormalization, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Normalization$NoNormalization, t_Normalization$NoNormalization, ::org::apache::lucene::search::similarities::Normalization, Normalization$NoNormalization, t_Normalization$NoNormalization_init_, 0, 0, 0, 0, 0);

          void t_Normalization$NoNormalization::install(PyObject *module)
          {
            installType(&PY_TYPE(Normalization$NoNormalization), module, "Normalization$NoNormalization", 0);
          }

          void t_Normalization$NoNormalization::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Normalization$NoNormalization).tp_dict, "class_", make_descriptor(Normalization$NoNormalization::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Normalization$NoNormalization).tp_dict, "wrapfn_", make_descriptor(t_Normalization$NoNormalization::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Normalization$NoNormalization).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Normalization$NoNormalization_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Normalization$NoNormalization::initializeClass, 1)))
              return NULL;
            return t_Normalization$NoNormalization::wrap_Object(Normalization$NoNormalization(((t_Normalization$NoNormalization *) arg)->object.this$));
          }
          static PyObject *t_Normalization$NoNormalization_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Normalization$NoNormalization::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Normalization$NoNormalization_init_(t_Normalization$NoNormalization *self, PyObject *args, PyObject *kwds)
          {
            Normalization$NoNormalization object((jobject) NULL);

            INT_CALL(object = Normalization$NoNormalization());
            self->object = object;

            return 0;
          }

          static PyObject *t_Normalization$NoNormalization_explain(t_Normalization$NoNormalization *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.explain(a0, a1, a2));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Normalization$NoNormalization), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_Normalization$NoNormalization_tfn(t_Normalization$NoNormalization *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.tfn(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(Normalization$NoNormalization), (PyObject *) self, "tfn", args, 2);
          }

          static PyObject *t_Normalization$NoNormalization_toString(t_Normalization$NoNormalization *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Normalization$NoNormalization), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/term/TermSecondPassGroupingCollector.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {

            ::java::lang::Class *TermSecondPassGroupingCollector::class$ = NULL;
            jmethodID *TermSecondPassGroupingCollector::mids$ = NULL;
            bool TermSecondPassGroupingCollector::live$ = false;

            jclass TermSecondPassGroupingCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/term/TermSecondPassGroupingCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_11c7601a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/util/Collection;Lorg/apache/lucene/search/Sort;Lorg/apache/lucene/search/Sort;IZZZ)V");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
                mids$[mid_retrieveGroup_e4de8d52] = env->getMethodID(cls, "retrieveGroup", "(I)Lorg/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector$SearchGroupDocs;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermSecondPassGroupingCollector::TermSecondPassGroupingCollector(const ::java::lang::String & a0, const ::java::util::Collection & a1, const ::org::apache::lucene::search::Sort & a2, const ::org::apache::lucene::search::Sort & a3, jint a4, jboolean a5, jboolean a6, jboolean a7) : ::org::apache::lucene::search::grouping::AbstractSecondPassGroupingCollector(env->newObject(initializeClass, &mids$, mid_init$_11c7601a, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5, a6, a7)) {}

            void TermSecondPassGroupingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {
            static PyObject *t_TermSecondPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermSecondPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermSecondPassGroupingCollector_of_(t_TermSecondPassGroupingCollector *self, PyObject *args);
            static int t_TermSecondPassGroupingCollector_init_(t_TermSecondPassGroupingCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TermSecondPassGroupingCollector_setNextReader(t_TermSecondPassGroupingCollector *self, PyObject *args);
            static int t_TermSecondPassGroupingCollector_set__nextReader(t_TermSecondPassGroupingCollector *self, PyObject *arg, void *data);
            static PyObject *t_TermSecondPassGroupingCollector_get__parameters_(t_TermSecondPassGroupingCollector *self, void *data);
            static PyGetSetDef t_TermSecondPassGroupingCollector__fields_[] = {
              DECLARE_SET_FIELD(t_TermSecondPassGroupingCollector, nextReader),
              DECLARE_GET_FIELD(t_TermSecondPassGroupingCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TermSecondPassGroupingCollector__methods_[] = {
              DECLARE_METHOD(t_TermSecondPassGroupingCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermSecondPassGroupingCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermSecondPassGroupingCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_TermSecondPassGroupingCollector, setNextReader, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermSecondPassGroupingCollector, t_TermSecondPassGroupingCollector, ::org::apache::lucene::search::grouping::AbstractSecondPassGroupingCollector, TermSecondPassGroupingCollector, t_TermSecondPassGroupingCollector_init_, 0, 0, t_TermSecondPassGroupingCollector__fields_, 0, 0);
            PyObject *t_TermSecondPassGroupingCollector::wrap_Object(const TermSecondPassGroupingCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermSecondPassGroupingCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermSecondPassGroupingCollector *self = (t_TermSecondPassGroupingCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_TermSecondPassGroupingCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermSecondPassGroupingCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermSecondPassGroupingCollector *self = (t_TermSecondPassGroupingCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_TermSecondPassGroupingCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(TermSecondPassGroupingCollector), module, "TermSecondPassGroupingCollector", 0);
            }

            void t_TermSecondPassGroupingCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermSecondPassGroupingCollector).tp_dict, "class_", make_descriptor(TermSecondPassGroupingCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermSecondPassGroupingCollector).tp_dict, "wrapfn_", make_descriptor(t_TermSecondPassGroupingCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermSecondPassGroupingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermSecondPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermSecondPassGroupingCollector::initializeClass, 1)))
                return NULL;
              return t_TermSecondPassGroupingCollector::wrap_Object(TermSecondPassGroupingCollector(((t_TermSecondPassGroupingCollector *) arg)->object.this$));
            }
            static PyObject *t_TermSecondPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermSecondPassGroupingCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TermSecondPassGroupingCollector_of_(t_TermSecondPassGroupingCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_TermSecondPassGroupingCollector_init_(t_TermSecondPassGroupingCollector *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::Collection a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::search::Sort a2((jobject) NULL);
              ::org::apache::lucene::search::Sort a3((jobject) NULL);
              jint a4;
              jboolean a5;
              jboolean a6;
              jboolean a7;
              TermSecondPassGroupingCollector object((jobject) NULL);

              if (!parseArgs(args, "sKkkIZZZ", ::java::util::Collection::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_, &a2, &a3, &a4, &a5, &a6, &a7))
              {
                INT_CALL(object = TermSecondPassGroupingCollector(a0, a1, a2, a3, a4, a5, a6, a7));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::util::PY_TYPE(BytesRef);
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TermSecondPassGroupingCollector_setNextReader(t_TermSecondPassGroupingCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(TermSecondPassGroupingCollector), (PyObject *) self, "setNextReader", args, 2);
            }
            static PyObject *t_TermSecondPassGroupingCollector_get__parameters_(t_TermSecondPassGroupingCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static int t_TermSecondPassGroupingCollector_set__nextReader(t_TermSecondPassGroupingCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/EmptyTokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *EmptyTokenStream::class$ = NULL;
          jmethodID *EmptyTokenStream::mids$ = NULL;
          bool EmptyTokenStream::live$ = false;

          jclass EmptyTokenStream::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/EmptyTokenStream");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EmptyTokenStream::EmptyTokenStream() : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean EmptyTokenStream::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_EmptyTokenStream_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EmptyTokenStream_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EmptyTokenStream_init_(t_EmptyTokenStream *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EmptyTokenStream_incrementToken(t_EmptyTokenStream *self, PyObject *args);

          static PyMethodDef t_EmptyTokenStream__methods_[] = {
            DECLARE_METHOD(t_EmptyTokenStream, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EmptyTokenStream, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EmptyTokenStream, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EmptyTokenStream, t_EmptyTokenStream, ::org::apache::lucene::analysis::TokenStream, EmptyTokenStream, t_EmptyTokenStream_init_, 0, 0, 0, 0, 0);

          void t_EmptyTokenStream::install(PyObject *module)
          {
            installType(&PY_TYPE(EmptyTokenStream), module, "EmptyTokenStream", 0);
          }

          void t_EmptyTokenStream::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EmptyTokenStream).tp_dict, "class_", make_descriptor(EmptyTokenStream::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EmptyTokenStream).tp_dict, "wrapfn_", make_descriptor(t_EmptyTokenStream::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EmptyTokenStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EmptyTokenStream_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EmptyTokenStream::initializeClass, 1)))
              return NULL;
            return t_EmptyTokenStream::wrap_Object(EmptyTokenStream(((t_EmptyTokenStream *) arg)->object.this$));
          }
          static PyObject *t_EmptyTokenStream_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EmptyTokenStream::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EmptyTokenStream_init_(t_EmptyTokenStream *self, PyObject *args, PyObject *kwds)
          {
            EmptyTokenStream object((jobject) NULL);

            INT_CALL(object = EmptyTokenStream());
            self->object = object;

            return 0;
          }

          static PyObject *t_EmptyTokenStream_incrementToken(t_EmptyTokenStream *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(EmptyTokenStream), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/HTMLStripCharFilterFactory.h"
#include "java/io/Reader.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/charfilter/HTMLStripCharFilter.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *HTMLStripCharFilterFactory::class$ = NULL;
          jmethodID *HTMLStripCharFilterFactory::mids$ = NULL;
          bool HTMLStripCharFilterFactory::live$ = false;

          jclass HTMLStripCharFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/HTMLStripCharFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ca5f8ca1] = env->getMethodID(cls, "create", "(Ljava/io/Reader;)Lorg/apache/lucene/analysis/charfilter/HTMLStripCharFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HTMLStripCharFilterFactory::HTMLStripCharFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::CharFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::charfilter::HTMLStripCharFilter HTMLStripCharFilterFactory::create(const ::java::io::Reader & a0) const
          {
            return ::org::apache::lucene::analysis::charfilter::HTMLStripCharFilter(env->callObjectMethod(this$, mids$[mid_create_ca5f8ca1], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_HTMLStripCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HTMLStripCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HTMLStripCharFilterFactory_init_(t_HTMLStripCharFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HTMLStripCharFilterFactory_create(t_HTMLStripCharFilterFactory *self, PyObject *args);

          static PyMethodDef t_HTMLStripCharFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HTMLStripCharFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HTMLStripCharFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HTMLStripCharFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HTMLStripCharFilterFactory, t_HTMLStripCharFilterFactory, ::org::apache::lucene::analysis::util::CharFilterFactory, HTMLStripCharFilterFactory, t_HTMLStripCharFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_HTMLStripCharFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HTMLStripCharFilterFactory), module, "HTMLStripCharFilterFactory", 0);
          }

          void t_HTMLStripCharFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HTMLStripCharFilterFactory).tp_dict, "class_", make_descriptor(HTMLStripCharFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HTMLStripCharFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_HTMLStripCharFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HTMLStripCharFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HTMLStripCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HTMLStripCharFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HTMLStripCharFilterFactory::wrap_Object(HTMLStripCharFilterFactory(((t_HTMLStripCharFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HTMLStripCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HTMLStripCharFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HTMLStripCharFilterFactory_init_(t_HTMLStripCharFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HTMLStripCharFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HTMLStripCharFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HTMLStripCharFilterFactory_create(t_HTMLStripCharFilterFactory *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::org::apache::lucene::analysis::charfilter::HTMLStripCharFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::charfilter::t_HTMLStripCharFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(HTMLStripCharFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueInt.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueInt::class$ = NULL;
          jmethodID *MutableValueInt::mids$ = NULL;
          jfieldID *MutableValueInt::fids$ = NULL;
          bool MutableValueInt::live$ = false;

          jclass MutableValueInt::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueInt");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_290588f1] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_copy_d590ce7c] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_15ab3811] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equalsSameType_290588e2] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_846352c3] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_value] = env->getFieldID(cls, "value", "I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueInt::MutableValueInt() : ::org::apache::lucene::util::mutable$::MutableValue(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint MutableValueInt::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_290588f1], a0.this$);
          }

          void MutableValueInt::copy(const ::org::apache::lucene::util::mutable$::MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d590ce7c], a0.this$);
          }

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueInt::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_15ab3811]));
          }

          jboolean MutableValueInt::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_290588e2], a0.this$);
          }

          jint MutableValueInt::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::Object MutableValueInt::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_846352c3]));
          }

          jint MutableValueInt::_get_value() const
          {
            return env->getIntField(this$, fids$[fid_value]);
          }

          void MutableValueInt::_set_value(jint a0) const
          {
            env->setIntField(this$, fids$[fid_value], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueInt_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueInt_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueInt_init_(t_MutableValueInt *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueInt_compareSameType(t_MutableValueInt *self, PyObject *args);
          static PyObject *t_MutableValueInt_copy(t_MutableValueInt *self, PyObject *args);
          static PyObject *t_MutableValueInt_duplicate(t_MutableValueInt *self, PyObject *args);
          static PyObject *t_MutableValueInt_equalsSameType(t_MutableValueInt *self, PyObject *args);
          static PyObject *t_MutableValueInt_hashCode(t_MutableValueInt *self, PyObject *args);
          static PyObject *t_MutableValueInt_toObject(t_MutableValueInt *self, PyObject *args);
          static PyObject *t_MutableValueInt_get__value(t_MutableValueInt *self, void *data);
          static int t_MutableValueInt_set__value(t_MutableValueInt *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValueInt__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValueInt, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValueInt__methods_[] = {
            DECLARE_METHOD(t_MutableValueInt, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueInt, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueInt, compareSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueInt, copy, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueInt, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueInt, equalsSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueInt, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueInt, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MutableValueInt, t_MutableValueInt, ::org::apache::lucene::util::mutable$::MutableValue, MutableValueInt, t_MutableValueInt_init_, 0, 0, t_MutableValueInt__fields_, 0, 0);

          void t_MutableValueInt::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueInt), module, "MutableValueInt", 0);
          }

          void t_MutableValueInt::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MutableValueInt).tp_dict, "class_", make_descriptor(MutableValueInt::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MutableValueInt).tp_dict, "wrapfn_", make_descriptor(t_MutableValueInt::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MutableValueInt).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueInt_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueInt::initializeClass, 1)))
              return NULL;
            return t_MutableValueInt::wrap_Object(MutableValueInt(((t_MutableValueInt *) arg)->object.this$));
          }
          static PyObject *t_MutableValueInt_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueInt::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueInt_init_(t_MutableValueInt *self, PyObject *args, PyObject *kwds)
          {
            MutableValueInt object((jobject) NULL);

            INT_CALL(object = MutableValueInt());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueInt_compareSameType(t_MutableValueInt *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueInt), (PyObject *) self, "compareSameType", args, 2);
          }

          static PyObject *t_MutableValueInt_copy(t_MutableValueInt *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::mutable$::MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(MutableValueInt), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_MutableValueInt_duplicate(t_MutableValueInt *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueInt), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueInt_equalsSameType(t_MutableValueInt *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MutableValueInt), (PyObject *) self, "equalsSameType", args, 2);
          }

          static PyObject *t_MutableValueInt_hashCode(t_MutableValueInt *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueInt), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValueInt_toObject(t_MutableValueInt *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueInt), (PyObject *) self, "toObject", args, 2);
          }

          static PyObject *t_MutableValueInt_get__value(t_MutableValueInt *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_value());
            return PyInt_FromLong((long) value);
          }
          static int t_MutableValueInt_set__value(t_MutableValueInt *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_value(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicLetterTokenizerFactory.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/analysis/ar/ArabicLetterTokenizer.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicLetterTokenizerFactory::class$ = NULL;
          jmethodID *ArabicLetterTokenizerFactory::mids$ = NULL;
          bool ArabicLetterTokenizerFactory::live$ = false;

          jclass ArabicLetterTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicLetterTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ee4a774c] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/ar/ArabicLetterTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicLetterTokenizerFactory::ArabicLetterTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::ar::ArabicLetterTokenizer ArabicLetterTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::ar::ArabicLetterTokenizer(env->callObjectMethod(this$, mids$[mid_create_ee4a774c], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicLetterTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicLetterTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicLetterTokenizerFactory_init_(t_ArabicLetterTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicLetterTokenizerFactory_create(t_ArabicLetterTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_ArabicLetterTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_ArabicLetterTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicLetterTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicLetterTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicLetterTokenizerFactory, t_ArabicLetterTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, ArabicLetterTokenizerFactory, t_ArabicLetterTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_ArabicLetterTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicLetterTokenizerFactory), module, "ArabicLetterTokenizerFactory", 0);
          }

          void t_ArabicLetterTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicLetterTokenizerFactory).tp_dict, "class_", make_descriptor(ArabicLetterTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicLetterTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_ArabicLetterTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicLetterTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ArabicLetterTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicLetterTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_ArabicLetterTokenizerFactory::wrap_Object(ArabicLetterTokenizerFactory(((t_ArabicLetterTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_ArabicLetterTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicLetterTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicLetterTokenizerFactory_init_(t_ArabicLetterTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ArabicLetterTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ArabicLetterTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArabicLetterTokenizerFactory_create(t_ArabicLetterTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::ar::ArabicLetterTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::ar::t_ArabicLetterTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ArabicLetterTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/TermRangeQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *TermRangeQueryNode::class$ = NULL;
              jmethodID *TermRangeQueryNode::mids$ = NULL;
              bool TermRangeQueryNode::live$ = false;

              jclass TermRangeQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/TermRangeQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_b4afba80] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode;Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode;ZZ)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              TermRangeQueryNode::TermRangeQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode & a0, const ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode & a1, jboolean a2, jboolean a3) : ::org::apache::lucene::queryparser::flexible::standard::nodes::AbstractRangeQueryNode(env->newObject(initializeClass, &mids$, mid_init$_b4afba80, a0.this$, a1.this$, a2, a3)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_TermRangeQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TermRangeQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TermRangeQueryNode_of_(t_TermRangeQueryNode *self, PyObject *args);
              static int t_TermRangeQueryNode_init_(t_TermRangeQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_TermRangeQueryNode_get__parameters_(t_TermRangeQueryNode *self, void *data);
              static PyGetSetDef t_TermRangeQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_TermRangeQueryNode, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_TermRangeQueryNode__methods_[] = {
                DECLARE_METHOD(t_TermRangeQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TermRangeQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TermRangeQueryNode, of_, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(TermRangeQueryNode, t_TermRangeQueryNode, ::org::apache::lucene::queryparser::flexible::standard::nodes::AbstractRangeQueryNode, TermRangeQueryNode, t_TermRangeQueryNode_init_, 0, 0, t_TermRangeQueryNode__fields_, 0, 0);
              PyObject *t_TermRangeQueryNode::wrap_Object(const TermRangeQueryNode& object, PyTypeObject *p0)
              {
                PyObject *obj = t_TermRangeQueryNode::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_TermRangeQueryNode *self = (t_TermRangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_TermRangeQueryNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_TermRangeQueryNode::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_TermRangeQueryNode *self = (t_TermRangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_TermRangeQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(TermRangeQueryNode), module, "TermRangeQueryNode", 0);
              }

              void t_TermRangeQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNode).tp_dict, "class_", make_descriptor(TermRangeQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNode).tp_dict, "wrapfn_", make_descriptor(t_TermRangeQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_TermRangeQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, TermRangeQueryNode::initializeClass, 1)))
                  return NULL;
                return t_TermRangeQueryNode::wrap_Object(TermRangeQueryNode(((t_TermRangeQueryNode *) arg)->object.this$));
              }
              static PyObject *t_TermRangeQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, TermRangeQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_TermRangeQueryNode_of_(t_TermRangeQueryNode *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static int t_TermRangeQueryNode_init_(t_TermRangeQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode a1((jobject) NULL);
                jboolean a2;
                jboolean a3;
                TermRangeQueryNode object((jobject) NULL);

                if (!parseArgs(args, "kkZZ", ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = TermRangeQueryNode(a0, a1, a2, a3));
                  self->object = object;
                  self->parameters[0] = &::org::apache::lucene::queryparser::flexible::core::nodes::PY_TYPE(FieldQueryNode);
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }
              static PyObject *t_TermRangeQueryNode_get__parameters_(t_TermRangeQueryNode *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/bg/BulgarianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {

          ::java::lang::Class *BulgarianAnalyzer::class$ = NULL;
          jmethodID *BulgarianAnalyzer::mids$ = NULL;
          bool BulgarianAnalyzer::live$ = false;
          ::java::lang::String *BulgarianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass BulgarianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/bg/BulgarianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_3ea629c6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BulgarianAnalyzer::BulgarianAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          BulgarianAnalyzer::BulgarianAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          BulgarianAnalyzer::BulgarianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          BulgarianAnalyzer::BulgarianAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_3ea629c6, a0.this$, a1.this$)) {}

          BulgarianAnalyzer::BulgarianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          BulgarianAnalyzer::BulgarianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents BulgarianAnalyzer::createComponents(const ::java::lang::String & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents(env->callObjectMethod(this$, mids$[mid_createComponents_1be39cae], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet BulgarianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {
          static PyObject *t_BulgarianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BulgarianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BulgarianAnalyzer_init_(t_BulgarianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BulgarianAnalyzer_createComponents(t_BulgarianAnalyzer *self, PyObject *args);
          static PyObject *t_BulgarianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_BulgarianAnalyzer_get__defaultStopSet(t_BulgarianAnalyzer *self, void *data);
          static PyGetSetDef t_BulgarianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_BulgarianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BulgarianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_BulgarianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianAnalyzer, createComponents, METH_VARARGS),
            DECLARE_METHOD(t_BulgarianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BulgarianAnalyzer, t_BulgarianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, BulgarianAnalyzer, t_BulgarianAnalyzer_init_, 0, 0, t_BulgarianAnalyzer__fields_, 0, 0);

          void t_BulgarianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(BulgarianAnalyzer), module, "BulgarianAnalyzer", 0);
          }

          void t_BulgarianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BulgarianAnalyzer).tp_dict, "class_", make_descriptor(BulgarianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BulgarianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_BulgarianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BulgarianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(BulgarianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(BulgarianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*BulgarianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_BulgarianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BulgarianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_BulgarianAnalyzer::wrap_Object(BulgarianAnalyzer(((t_BulgarianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_BulgarianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BulgarianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BulgarianAnalyzer_init_(t_BulgarianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                BulgarianAnalyzer object((jobject) NULL);

                INT_CALL(object = BulgarianAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                BulgarianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BulgarianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                BulgarianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = BulgarianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                BulgarianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BulgarianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                BulgarianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BulgarianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                BulgarianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BulgarianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BulgarianAnalyzer_createComponents(t_BulgarianAnalyzer *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents result((jobject) NULL);

            if (!parseArgs(args, "sk", ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.createComponents(a0, a1));
              return ::org::apache::lucene::analysis::t_Analyzer$TokenStreamComponents::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "createComponents", args);
            return NULL;
          }

          static PyObject *t_BulgarianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::bg::BulgarianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_BulgarianAnalyzer_get__defaultStopSet(t_BulgarianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicLetterTokenizer.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicLetterTokenizer::class$ = NULL;
          jmethodID *ArabicLetterTokenizer::mids$ = NULL;
          bool ArabicLetterTokenizer::live$ = false;

          jclass ArabicLetterTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicLetterTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_isTokenChar_39c7bd30] = env->getMethodID(cls, "isTokenChar", "(I)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicLetterTokenizer::ArabicLetterTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::core::LetterTokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          ArabicLetterTokenizer::ArabicLetterTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::core::LetterTokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicLetterTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicLetterTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicLetterTokenizer_init_(t_ArabicLetterTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_ArabicLetterTokenizer__methods_[] = {
            DECLARE_METHOD(t_ArabicLetterTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicLetterTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicLetterTokenizer, t_ArabicLetterTokenizer, ::org::apache::lucene::analysis::core::LetterTokenizer, ArabicLetterTokenizer, t_ArabicLetterTokenizer_init_, 0, 0, 0, 0, 0);

          void t_ArabicLetterTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicLetterTokenizer), module, "ArabicLetterTokenizer", 0);
          }

          void t_ArabicLetterTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicLetterTokenizer).tp_dict, "class_", make_descriptor(ArabicLetterTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicLetterTokenizer).tp_dict, "wrapfn_", make_descriptor(t_ArabicLetterTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicLetterTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ArabicLetterTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicLetterTokenizer::initializeClass, 1)))
              return NULL;
            return t_ArabicLetterTokenizer::wrap_Object(ArabicLetterTokenizer(((t_ArabicLetterTokenizer *) arg)->object.this$));
          }
          static PyObject *t_ArabicLetterTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicLetterTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicLetterTokenizer_init_(t_ArabicLetterTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ArabicLetterTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ArabicLetterTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                ArabicLetterTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ArabicLetterTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *TypeAsPayloadTokenFilter::class$ = NULL;
          jmethodID *TypeAsPayloadTokenFilter::mids$ = NULL;
          bool TypeAsPayloadTokenFilter::live$ = false;

          jclass TypeAsPayloadTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TypeAsPayloadTokenFilter::TypeAsPayloadTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean TypeAsPayloadTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_TypeAsPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeAsPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TypeAsPayloadTokenFilter_init_(t_TypeAsPayloadTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TypeAsPayloadTokenFilter_incrementToken(t_TypeAsPayloadTokenFilter *self, PyObject *args);

          static PyMethodDef t_TypeAsPayloadTokenFilter__methods_[] = {
            DECLARE_METHOD(t_TypeAsPayloadTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAsPayloadTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAsPayloadTokenFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TypeAsPayloadTokenFilter, t_TypeAsPayloadTokenFilter, ::org::apache::lucene::analysis::TokenFilter, TypeAsPayloadTokenFilter, t_TypeAsPayloadTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_TypeAsPayloadTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TypeAsPayloadTokenFilter), module, "TypeAsPayloadTokenFilter", 0);
          }

          void t_TypeAsPayloadTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TypeAsPayloadTokenFilter).tp_dict, "class_", make_descriptor(TypeAsPayloadTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TypeAsPayloadTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_TypeAsPayloadTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TypeAsPayloadTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TypeAsPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TypeAsPayloadTokenFilter::initializeClass, 1)))
              return NULL;
            return t_TypeAsPayloadTokenFilter::wrap_Object(TypeAsPayloadTokenFilter(((t_TypeAsPayloadTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_TypeAsPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TypeAsPayloadTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TypeAsPayloadTokenFilter_init_(t_TypeAsPayloadTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            TypeAsPayloadTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = TypeAsPayloadTokenFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TypeAsPayloadTokenFilter_incrementToken(t_TypeAsPayloadTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TypeAsPayloadTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/FuzzySuggester.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *FuzzySuggester::class$ = NULL;
            jmethodID *FuzzySuggester::mids$ = NULL;
            bool FuzzySuggester::live$ = false;
            jint FuzzySuggester::DEFAULT_MAX_EDITS = (jint) 0;
            jint FuzzySuggester::DEFAULT_MIN_FUZZY_LENGTH = (jint) 0;
            jint FuzzySuggester::DEFAULT_NON_FUZZY_PREFIX = (jint) 0;
            jboolean FuzzySuggester::DEFAULT_TRANSPOSITIONS = (jboolean) 0;
            jboolean FuzzySuggester::DEFAULT_UNICODE_AWARE = (jboolean) 0;

            jclass FuzzySuggester::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/FuzzySuggester");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_6a3c5772] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_ec63f0d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;IIIZIZIIZ)V");
                mids$[mid_convertAutomaton_7aca8e1f] = env->getMethodID(cls, "convertAutomaton", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
                mids$[mid_getFullPrefixPaths_a9ea3855] = env->getMethodID(cls, "getFullPrefixPaths", "(Ljava/util/List;Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/fst/FST;)Ljava/util/List;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                DEFAULT_MAX_EDITS = env->getStaticIntField(cls, "DEFAULT_MAX_EDITS");
                DEFAULT_MIN_FUZZY_LENGTH = env->getStaticIntField(cls, "DEFAULT_MIN_FUZZY_LENGTH");
                DEFAULT_NON_FUZZY_PREFIX = env->getStaticIntField(cls, "DEFAULT_NON_FUZZY_PREFIX");
                DEFAULT_TRANSPOSITIONS = env->getStaticBooleanField(cls, "DEFAULT_TRANSPOSITIONS");
                DEFAULT_UNICODE_AWARE = env->getStaticBooleanField(cls, "DEFAULT_UNICODE_AWARE");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FuzzySuggester::FuzzySuggester(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::search::suggest::analyzing::AnalyzingSuggester(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}

            FuzzySuggester::FuzzySuggester(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::search::suggest::analyzing::AnalyzingSuggester(env->newObject(initializeClass, &mids$, mid_init$_6a3c5772, a0.this$, a1.this$)) {}

            FuzzySuggester::FuzzySuggester(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::Analyzer & a1, jint a2, jint a3, jint a4, jboolean a5, jint a6, jboolean a7, jint a8, jint a9, jboolean a10) : ::org::apache::lucene::search::suggest::analyzing::AnalyzingSuggester(env->newObject(initializeClass, &mids$, mid_init$_ec63f0d3, a0.this$, a1.this$, a2, a3, a4, a5, a6, a7, a8, a9, a10)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_FuzzySuggester_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FuzzySuggester_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FuzzySuggester_init_(t_FuzzySuggester *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_FuzzySuggester__methods_[] = {
              DECLARE_METHOD(t_FuzzySuggester, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FuzzySuggester, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FuzzySuggester, t_FuzzySuggester, ::org::apache::lucene::search::suggest::analyzing::AnalyzingSuggester, FuzzySuggester, t_FuzzySuggester_init_, 0, 0, 0, 0, 0);

            void t_FuzzySuggester::install(PyObject *module)
            {
              installType(&PY_TYPE(FuzzySuggester), module, "FuzzySuggester", 0);
            }

            void t_FuzzySuggester::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FuzzySuggester).tp_dict, "class_", make_descriptor(FuzzySuggester::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FuzzySuggester).tp_dict, "wrapfn_", make_descriptor(t_FuzzySuggester::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FuzzySuggester).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(FuzzySuggester::initializeClass);
              PyDict_SetItemString(PY_TYPE(FuzzySuggester).tp_dict, "DEFAULT_MAX_EDITS", make_descriptor(FuzzySuggester::DEFAULT_MAX_EDITS));
              PyDict_SetItemString(PY_TYPE(FuzzySuggester).tp_dict, "DEFAULT_MIN_FUZZY_LENGTH", make_descriptor(FuzzySuggester::DEFAULT_MIN_FUZZY_LENGTH));
              PyDict_SetItemString(PY_TYPE(FuzzySuggester).tp_dict, "DEFAULT_NON_FUZZY_PREFIX", make_descriptor(FuzzySuggester::DEFAULT_NON_FUZZY_PREFIX));
              PyDict_SetItemString(PY_TYPE(FuzzySuggester).tp_dict, "DEFAULT_TRANSPOSITIONS", make_descriptor(FuzzySuggester::DEFAULT_TRANSPOSITIONS));
              PyDict_SetItemString(PY_TYPE(FuzzySuggester).tp_dict, "DEFAULT_UNICODE_AWARE", make_descriptor(FuzzySuggester::DEFAULT_UNICODE_AWARE));
            }

            static PyObject *t_FuzzySuggester_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FuzzySuggester::initializeClass, 1)))
                return NULL;
              return t_FuzzySuggester::wrap_Object(FuzzySuggester(((t_FuzzySuggester *) arg)->object.this$));
            }
            static PyObject *t_FuzzySuggester_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FuzzySuggester::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FuzzySuggester_init_(t_FuzzySuggester *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  FuzzySuggester object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                  {
                    INT_CALL(object = FuzzySuggester(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  FuzzySuggester object((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = FuzzySuggester(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 11:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  jint a2;
                  jint a3;
                  jint a4;
                  jboolean a5;
                  jint a6;
                  jboolean a7;
                  jint a8;
                  jint a9;
                  jboolean a10;
                  FuzzySuggester object((jobject) NULL);

                  if (!parseArgs(args, "kkIIIZIZIIZ", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10))
                  {
                    INT_CALL(object = FuzzySuggester(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TermsEnum::class$ = NULL;
        jmethodID *TermsEnum::mids$ = NULL;
        bool TermsEnum::live$ = false;
        TermsEnum *TermsEnum::EMPTY = NULL;

        jclass TermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_attributes_f901022b] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_docFreq_54c6a179] = env->getMethodID(cls, "docFreq", "()I");
            mids$[mid_docs_fb0743a7] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_docs_e6d4c3ef] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_docsAndPositions_ffc1634d] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_docsAndPositions_b5d9c11b] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_ord_54c6a17a] = env->getMethodID(cls, "ord", "()J");
            mids$[mid_seekCeil_fa9d72c4] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
            mids$[mid_seekExact_7bc03dc8] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_seekExact_0ee6df2f] = env->getMethodID(cls, "seekExact", "(J)V");
            mids$[mid_seekExact_fe46da51] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/index/TermState;)V");
            mids$[mid_term_4ae19461] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_termState_3e41fede] = env->getMethodID(cls, "termState", "()Lorg/apache/lucene/index/TermState;");
            mids$[mid_totalTermFreq_54c6a17a] = env->getMethodID(cls, "totalTermFreq", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new TermsEnum(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/index/TermsEnum;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::AttributeSource TermsEnum::attributes() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_f901022b]));
        }

        jint TermsEnum::docFreq() const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_54c6a179]);
        }

        ::org::apache::lucene::index::DocsEnum TermsEnum::docs(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsEnum & a1) const
        {
          return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_fb0743a7], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::DocsEnum TermsEnum::docs(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_e6d4c3ef], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum TermsEnum::docsAndPositions(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsAndPositionsEnum & a1) const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_ffc1634d], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum TermsEnum::docsAndPositions(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsAndPositionsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_b5d9c11b], a0.this$, a1.this$, a2));
        }

        jlong TermsEnum::ord() const
        {
          return env->callLongMethod(this$, mids$[mid_ord_54c6a17a]);
        }

        ::org::apache::lucene::index::TermsEnum$SeekStatus TermsEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_fa9d72c4], a0.this$));
        }

        jboolean TermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_seekExact_7bc03dc8], a0.this$);
        }

        void TermsEnum::seekExact(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_0ee6df2f], a0);
        }

        void TermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::index::TermState & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_fe46da51], a0.this$, a1.this$);
        }

        ::org::apache::lucene::util::BytesRef TermsEnum::term() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_4ae19461]));
        }

        ::org::apache::lucene::index::TermState TermsEnum::termState() const
        {
          return ::org::apache::lucene::index::TermState(env->callObjectMethod(this$, mids$[mid_termState_3e41fede]));
        }

        jlong TermsEnum::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermsEnum_attributes(t_TermsEnum *self);
        static PyObject *t_TermsEnum_docFreq(t_TermsEnum *self);
        static PyObject *t_TermsEnum_docs(t_TermsEnum *self, PyObject *args);
        static PyObject *t_TermsEnum_docsAndPositions(t_TermsEnum *self, PyObject *args);
        static PyObject *t_TermsEnum_ord(t_TermsEnum *self);
        static PyObject *t_TermsEnum_seekCeil(t_TermsEnum *self, PyObject *arg);
        static PyObject *t_TermsEnum_seekExact(t_TermsEnum *self, PyObject *args);
        static PyObject *t_TermsEnum_term(t_TermsEnum *self);
        static PyObject *t_TermsEnum_termState(t_TermsEnum *self);
        static PyObject *t_TermsEnum_totalTermFreq(t_TermsEnum *self);

        static PyMethodDef t_TermsEnum__methods_[] = {
          DECLARE_METHOD(t_TermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsEnum, attributes, METH_NOARGS),
          DECLARE_METHOD(t_TermsEnum, docFreq, METH_NOARGS),
          DECLARE_METHOD(t_TermsEnum, docs, METH_VARARGS),
          DECLARE_METHOD(t_TermsEnum, docsAndPositions, METH_VARARGS),
          DECLARE_METHOD(t_TermsEnum, ord, METH_NOARGS),
          DECLARE_METHOD(t_TermsEnum, seekCeil, METH_O),
          DECLARE_METHOD(t_TermsEnum, seekExact, METH_VARARGS),
          DECLARE_METHOD(t_TermsEnum, term, METH_NOARGS),
          DECLARE_METHOD(t_TermsEnum, termState, METH_NOARGS),
          DECLARE_METHOD(t_TermsEnum, totalTermFreq, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermsEnum, t_TermsEnum, ::java::lang::Object, TermsEnum, abstract_init, 0, 0, 0, 0, 0);

        void t_TermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(TermsEnum), module, "TermsEnum", 0);
          PyDict_SetItemString(PY_TYPE(TermsEnum).tp_dict, "SeekStatus", make_descriptor(&PY_TYPE(TermsEnum$SeekStatus)));
        }

        void t_TermsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermsEnum).tp_dict, "class_", make_descriptor(TermsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermsEnum).tp_dict, "wrapfn_", make_descriptor(t_TermsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(TermsEnum::initializeClass);
          PyDict_SetItemString(PY_TYPE(TermsEnum).tp_dict, "EMPTY", make_descriptor(t_TermsEnum::wrap_Object(*TermsEnum::EMPTY)));
        }

        static PyObject *t_TermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermsEnum::initializeClass, 1)))
            return NULL;
          return t_TermsEnum::wrap_Object(TermsEnum(((t_TermsEnum *) arg)->object.this$));
        }
        static PyObject *t_TermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermsEnum_attributes(t_TermsEnum *self)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);
          OBJ_CALL(result = self->object.attributes());
          return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
        }

        static PyObject *t_TermsEnum_docFreq(t_TermsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.docFreq());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_TermsEnum_docs(t_TermsEnum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::util::Bits a0((jobject) NULL);
              ::org::apache::lucene::index::DocsEnum a1((jobject) NULL);
              ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.docs(a0, a1));
                return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::util::Bits a0((jobject) NULL);
              ::org::apache::lucene::index::DocsEnum a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

              if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.docs(a0, a1, a2));
                return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "docs", args);
          return NULL;
        }

        static PyObject *t_TermsEnum_docsAndPositions(t_TermsEnum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::util::Bits a0((jobject) NULL);
              ::org::apache::lucene::index::DocsAndPositionsEnum a1((jobject) NULL);
              ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.docsAndPositions(a0, a1));
                return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::util::Bits a0((jobject) NULL);
              ::org::apache::lucene::index::DocsAndPositionsEnum a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

              if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2));
                return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "docsAndPositions", args);
          return NULL;
        }

        static PyObject *t_TermsEnum_ord(t_TermsEnum *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ord());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TermsEnum_seekCeil(t_TermsEnum *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.seekCeil(a0));
            return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "seekCeil", arg);
          return NULL;
        }

        static PyObject *t_TermsEnum_seekExact(t_TermsEnum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.seekExact(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.seekExact(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::index::TermState a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.seekExact(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "seekExact", args);
          return NULL;
        }

        static PyObject *t_TermsEnum_term(t_TermsEnum *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.term());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_TermsEnum_termState(t_TermsEnum *self)
        {
          ::org::apache::lucene::index::TermState result((jobject) NULL);
          OBJ_CALL(result = self->object.termState());
          return ::org::apache::lucene::index::t_TermState::wrap_Object(result);
        }

        static PyObject *t_TermsEnum_totalTermFreq(t_TermsEnum *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.totalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {

          ::java::lang::Class *Lucene41PostingsWriter::class$ = NULL;
          jmethodID *Lucene41PostingsWriter::mids$ = NULL;
          bool Lucene41PostingsWriter::live$ = false;

          jclass Lucene41PostingsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_3be9bed9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentWriteState;)V");
              mids$[mid_init$_a7564e76] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentWriteState;F)V");
              mids$[mid_addPosition_d481f39e] = env->getMethodID(cls, "addPosition", "(ILorg/apache/lucene/util/BytesRef;II)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_encodeTerm_1ec2f80c] = env->getMethodID(cls, "encodeTerm", "([JLorg/apache/lucene/store/DataOutput;Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Z)V");
              mids$[mid_finishDoc_54c6a166] = env->getMethodID(cls, "finishDoc", "()V");
              mids$[mid_finishTerm_47bdc871] = env->getMethodID(cls, "finishTerm", "(Lorg/apache/lucene/codecs/BlockTermState;)V");
              mids$[mid_init_faad620a] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/store/IndexOutput;)V");
              mids$[mid_setField_5f0ccd17] = env->getMethodID(cls, "setField", "(Lorg/apache/lucene/index/FieldInfo;)I");
              mids$[mid_startDoc_d8d154a6] = env->getMethodID(cls, "startDoc", "(II)V");
              mids$[mid_startTerm_54c6a166] = env->getMethodID(cls, "startTerm", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene41PostingsWriter::Lucene41PostingsWriter(const ::org::apache::lucene::index::SegmentWriteState & a0) : ::org::apache::lucene::codecs::PostingsWriterBase(env->newObject(initializeClass, &mids$, mid_init$_3be9bed9, a0.this$)) {}

          Lucene41PostingsWriter::Lucene41PostingsWriter(const ::org::apache::lucene::index::SegmentWriteState & a0, jfloat a1) : ::org::apache::lucene::codecs::PostingsWriterBase(env->newObject(initializeClass, &mids$, mid_init$_a7564e76, a0.this$, a1)) {}

          void Lucene41PostingsWriter::addPosition(jint a0, const ::org::apache::lucene::util::BytesRef & a1, jint a2, jint a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addPosition_d481f39e], a0, a1.this$, a2, a3);
          }

          void Lucene41PostingsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void Lucene41PostingsWriter::encodeTerm(const JArray< jlong > & a0, const ::org::apache::lucene::store::DataOutput & a1, const ::org::apache::lucene::index::FieldInfo & a2, const ::org::apache::lucene::codecs::BlockTermState & a3, jboolean a4) const
          {
            env->callVoidMethod(this$, mids$[mid_encodeTerm_1ec2f80c], a0.this$, a1.this$, a2.this$, a3.this$, a4);
          }

          void Lucene41PostingsWriter::finishDoc() const
          {
            env->callVoidMethod(this$, mids$[mid_finishDoc_54c6a166]);
          }

          void Lucene41PostingsWriter::finishTerm(const ::org::apache::lucene::codecs::BlockTermState & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_finishTerm_47bdc871], a0.this$);
          }

          void Lucene41PostingsWriter::init(const ::org::apache::lucene::store::IndexOutput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_init_faad620a], a0.this$);
          }

          jint Lucene41PostingsWriter::setField(const ::org::apache::lucene::index::FieldInfo & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_setField_5f0ccd17], a0.this$);
          }

          void Lucene41PostingsWriter::startDoc(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_startDoc_d8d154a6], a0, a1);
          }

          void Lucene41PostingsWriter::startTerm() const
          {
            env->callVoidMethod(this$, mids$[mid_startTerm_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {
          static PyObject *t_Lucene41PostingsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene41PostingsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene41PostingsWriter_init_(t_Lucene41PostingsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene41PostingsWriter_addPosition(t_Lucene41PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene41PostingsWriter_close(t_Lucene41PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene41PostingsWriter_encodeTerm(t_Lucene41PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene41PostingsWriter_finishDoc(t_Lucene41PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene41PostingsWriter_finishTerm(t_Lucene41PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene41PostingsWriter_init(t_Lucene41PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene41PostingsWriter_setField(t_Lucene41PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene41PostingsWriter_startDoc(t_Lucene41PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene41PostingsWriter_startTerm(t_Lucene41PostingsWriter *self, PyObject *args);
          static int t_Lucene41PostingsWriter_set__field(t_Lucene41PostingsWriter *self, PyObject *arg, void *data);
          static PyGetSetDef t_Lucene41PostingsWriter__fields_[] = {
            DECLARE_SET_FIELD(t_Lucene41PostingsWriter, field),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene41PostingsWriter__methods_[] = {
            DECLARE_METHOD(t_Lucene41PostingsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, addPosition, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, encodeTerm, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, finishDoc, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, finishTerm, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, init, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, setField, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, startDoc, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, startTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene41PostingsWriter, t_Lucene41PostingsWriter, ::org::apache::lucene::codecs::PostingsWriterBase, Lucene41PostingsWriter, t_Lucene41PostingsWriter_init_, 0, 0, t_Lucene41PostingsWriter__fields_, 0, 0);

          void t_Lucene41PostingsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene41PostingsWriter), module, "Lucene41PostingsWriter", 0);
          }

          void t_Lucene41PostingsWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsWriter).tp_dict, "class_", make_descriptor(Lucene41PostingsWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsWriter).tp_dict, "wrapfn_", make_descriptor(t_Lucene41PostingsWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene41PostingsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene41PostingsWriter::initializeClass, 1)))
              return NULL;
            return t_Lucene41PostingsWriter::wrap_Object(Lucene41PostingsWriter(((t_Lucene41PostingsWriter *) arg)->object.this$));
          }
          static PyObject *t_Lucene41PostingsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene41PostingsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene41PostingsWriter_init_(t_Lucene41PostingsWriter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
                Lucene41PostingsWriter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
                {
                  INT_CALL(object = Lucene41PostingsWriter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
                jfloat a1;
                Lucene41PostingsWriter object((jobject) NULL);

                if (!parseArgs(args, "kF", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = Lucene41PostingsWriter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene41PostingsWriter_addPosition(t_Lucene41PostingsWriter *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            jint a2;
            jint a3;

            if (!parseArgs(args, "IkII", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.addPosition(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "addPosition", args, 2);
          }

          static PyObject *t_Lucene41PostingsWriter_close(t_Lucene41PostingsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene41PostingsWriter_encodeTerm(t_Lucene41PostingsWriter *self, PyObject *args)
          {
            JArray< jlong > a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfo a2((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a3((jobject) NULL);
            jboolean a4;

            if (!parseArgs(args, "[JkkkZ", ::org::apache::lucene::store::DataOutput::initializeClass, ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.encodeTerm(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "encodeTerm", args, 2);
          }

          static PyObject *t_Lucene41PostingsWriter_finishDoc(t_Lucene41PostingsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.finishDoc());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "finishDoc", args, 2);
          }

          static PyObject *t_Lucene41PostingsWriter_finishTerm(t_Lucene41PostingsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::BlockTermState a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0))
            {
              OBJ_CALL(self->object.finishTerm(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "finishTerm", args, 2);
          }

          static PyObject *t_Lucene41PostingsWriter_init(t_Lucene41PostingsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::store::IndexOutput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::IndexOutput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.init(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "init", args, 2);
          }

          static PyObject *t_Lucene41PostingsWriter_setField(t_Lucene41PostingsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.setField(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "setField", args, 2);
          }

          static PyObject *t_Lucene41PostingsWriter_startDoc(t_Lucene41PostingsWriter *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.startDoc(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "startDoc", args, 2);
          }

          static PyObject *t_Lucene41PostingsWriter_startTerm(t_Lucene41PostingsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.startTerm());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "startTerm", args, 2);
          }

          static int t_Lucene41PostingsWriter_set__field(t_Lucene41PostingsWriter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::FieldInfo value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &value))
              {
                INT_CALL(self->object.setField(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "field", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/PerFieldAnalyzerWrapper.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *PerFieldAnalyzerWrapper::class$ = NULL;
          jmethodID *PerFieldAnalyzerWrapper::mids$ = NULL;
          bool PerFieldAnalyzerWrapper::live$ = false;

          jclass PerFieldAnalyzerWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/PerFieldAnalyzerWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_init$_b5f2d646] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/util/Map;)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_getWrappedAnalyzer_29a2299f] = env->getMethodID(cls, "getWrappedAnalyzer", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PerFieldAnalyzerWrapper::PerFieldAnalyzerWrapper(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::analysis::DelegatingAnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}

          PerFieldAnalyzerWrapper::PerFieldAnalyzerWrapper(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::util::Map & a1) : ::org::apache::lucene::analysis::DelegatingAnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_b5f2d646, a0.this$, a1.this$)) {}

          ::java::lang::String PerFieldAnalyzerWrapper::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_PerFieldAnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PerFieldAnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PerFieldAnalyzerWrapper_init_(t_PerFieldAnalyzerWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PerFieldAnalyzerWrapper_toString(t_PerFieldAnalyzerWrapper *self, PyObject *args);

          static PyMethodDef t_PerFieldAnalyzerWrapper__methods_[] = {
            DECLARE_METHOD(t_PerFieldAnalyzerWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldAnalyzerWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldAnalyzerWrapper, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PerFieldAnalyzerWrapper, t_PerFieldAnalyzerWrapper, ::org::apache::lucene::analysis::DelegatingAnalyzerWrapper, PerFieldAnalyzerWrapper, t_PerFieldAnalyzerWrapper_init_, 0, 0, 0, 0, 0);

          void t_PerFieldAnalyzerWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(PerFieldAnalyzerWrapper), module, "PerFieldAnalyzerWrapper", 0);
          }

          void t_PerFieldAnalyzerWrapper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PerFieldAnalyzerWrapper).tp_dict, "class_", make_descriptor(PerFieldAnalyzerWrapper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PerFieldAnalyzerWrapper).tp_dict, "wrapfn_", make_descriptor(t_PerFieldAnalyzerWrapper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PerFieldAnalyzerWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PerFieldAnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PerFieldAnalyzerWrapper::initializeClass, 1)))
              return NULL;
            return t_PerFieldAnalyzerWrapper::wrap_Object(PerFieldAnalyzerWrapper(((t_PerFieldAnalyzerWrapper *) arg)->object.this$));
          }
          static PyObject *t_PerFieldAnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PerFieldAnalyzerWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PerFieldAnalyzerWrapper_init_(t_PerFieldAnalyzerWrapper *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                PerFieldAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                {
                  INT_CALL(object = PerFieldAnalyzerWrapper(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                PerFieldAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
                {
                  INT_CALL(object = PerFieldAnalyzerWrapper(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PerFieldAnalyzerWrapper_toString(t_PerFieldAnalyzerWrapper *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(PerFieldAnalyzerWrapper), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanMinimalStemFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanMinimalStemFilterFactory::class$ = NULL;
          jmethodID *GermanMinimalStemFilterFactory::mids$ = NULL;
          bool GermanMinimalStemFilterFactory::live$ = false;

          jclass GermanMinimalStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanMinimalStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanMinimalStemFilterFactory::GermanMinimalStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream GermanMinimalStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanMinimalStemFilterFactory_init_(t_GermanMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanMinimalStemFilterFactory_create(t_GermanMinimalStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_GermanMinimalStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GermanMinimalStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanMinimalStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanMinimalStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanMinimalStemFilterFactory, t_GermanMinimalStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, GermanMinimalStemFilterFactory, t_GermanMinimalStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_GermanMinimalStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanMinimalStemFilterFactory), module, "GermanMinimalStemFilterFactory", 0);
          }

          void t_GermanMinimalStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemFilterFactory).tp_dict, "class_", make_descriptor(GermanMinimalStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_GermanMinimalStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanMinimalStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GermanMinimalStemFilterFactory::wrap_Object(GermanMinimalStemFilterFactory(((t_GermanMinimalStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GermanMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanMinimalStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanMinimalStemFilterFactory_init_(t_GermanMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GermanMinimalStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GermanMinimalStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanMinimalStemFilterFactory_create(t_GermanMinimalStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(GermanMinimalStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ru/RussianAnalyzer.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {

          ::java::lang::Class *RussianAnalyzer::class$ = NULL;
          jmethodID *RussianAnalyzer::mids$ = NULL;
          bool RussianAnalyzer::live$ = false;
          ::java::lang::String *RussianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass RussianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ru/RussianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_3ea629c6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RussianAnalyzer::RussianAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          RussianAnalyzer::RussianAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          RussianAnalyzer::RussianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          RussianAnalyzer::RussianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          RussianAnalyzer::RussianAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_3ea629c6, a0.this$, a1.this$)) {}

          RussianAnalyzer::RussianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet RussianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {
          static PyObject *t_RussianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RussianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RussianAnalyzer_init_(t_RussianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RussianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_RussianAnalyzer_get__defaultStopSet(t_RussianAnalyzer *self, void *data);
          static PyGetSetDef t_RussianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_RussianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_RussianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_RussianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RussianAnalyzer, t_RussianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, RussianAnalyzer, t_RussianAnalyzer_init_, 0, 0, t_RussianAnalyzer__fields_, 0, 0);

          void t_RussianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(RussianAnalyzer), module, "RussianAnalyzer", 0);
          }

          void t_RussianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RussianAnalyzer).tp_dict, "class_", make_descriptor(RussianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RussianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_RussianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RussianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(RussianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(RussianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*RussianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_RussianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RussianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_RussianAnalyzer::wrap_Object(RussianAnalyzer(((t_RussianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_RussianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RussianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RussianAnalyzer_init_(t_RussianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                RussianAnalyzer object((jobject) NULL);

                INT_CALL(object = RussianAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                RussianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = RussianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                RussianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = RussianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                RussianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = RussianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                RussianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = RussianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                RussianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = RussianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RussianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ru::RussianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_RussianAnalyzer_get__defaultStopSet(t_RussianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TopScoreDocCollector.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TopScoreDocCollector::class$ = NULL;
        jmethodID *TopScoreDocCollector::mids$ = NULL;
        bool TopScoreDocCollector::live$ = false;

        jclass TopScoreDocCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TopScoreDocCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_create_ed0bbc86] = env->getStaticMethodID(cls, "create", "(IZ)Lorg/apache/lucene/search/TopScoreDocCollector;");
            mids$[mid_create_113a7b62] = env->getStaticMethodID(cls, "create", "(ILorg/apache/lucene/search/ScoreDoc;Z)Lorg/apache/lucene/search/TopScoreDocCollector;");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
            mids$[mid_newTopDocs_a5bceb12] = env->getMethodID(cls, "newTopDocs", "([Lorg/apache/lucene/search/ScoreDoc;I)Lorg/apache/lucene/search/TopDocs;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopScoreDocCollector TopScoreDocCollector::create(jint a0, jboolean a1)
        {
          jclass cls = env->getClass(initializeClass);
          return TopScoreDocCollector(env->callStaticObjectMethod(cls, mids$[mid_create_ed0bbc86], a0, a1));
        }

        TopScoreDocCollector TopScoreDocCollector::create(jint a0, const ::org::apache::lucene::search::ScoreDoc & a1, jboolean a2)
        {
          jclass cls = env->getClass(initializeClass);
          return TopScoreDocCollector(env->callStaticObjectMethod(cls, mids$[mid_create_113a7b62], a0, a1.this$, a2));
        }

        void TopScoreDocCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
        }

        void TopScoreDocCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TopScoreDocCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopScoreDocCollector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopScoreDocCollector_of_(t_TopScoreDocCollector *self, PyObject *args);
        static PyObject *t_TopScoreDocCollector_create(PyTypeObject *type, PyObject *args);
        static PyObject *t_TopScoreDocCollector_setNextReader(t_TopScoreDocCollector *self, PyObject *args);
        static PyObject *t_TopScoreDocCollector_setScorer(t_TopScoreDocCollector *self, PyObject *args);
        static int t_TopScoreDocCollector_set__nextReader(t_TopScoreDocCollector *self, PyObject *arg, void *data);
        static int t_TopScoreDocCollector_set__scorer(t_TopScoreDocCollector *self, PyObject *arg, void *data);
        static PyObject *t_TopScoreDocCollector_get__parameters_(t_TopScoreDocCollector *self, void *data);
        static PyGetSetDef t_TopScoreDocCollector__fields_[] = {
          DECLARE_SET_FIELD(t_TopScoreDocCollector, nextReader),
          DECLARE_SET_FIELD(t_TopScoreDocCollector, scorer),
          DECLARE_GET_FIELD(t_TopScoreDocCollector, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopScoreDocCollector__methods_[] = {
          DECLARE_METHOD(t_TopScoreDocCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopScoreDocCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopScoreDocCollector, of_, METH_VARARGS),
          DECLARE_METHOD(t_TopScoreDocCollector, create, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TopScoreDocCollector, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_TopScoreDocCollector, setScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopScoreDocCollector, t_TopScoreDocCollector, ::org::apache::lucene::search::TopDocsCollector, TopScoreDocCollector, abstract_init, 0, 0, t_TopScoreDocCollector__fields_, 0, 0);
        PyObject *t_TopScoreDocCollector::wrap_Object(const TopScoreDocCollector& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopScoreDocCollector::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopScoreDocCollector *self = (t_TopScoreDocCollector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopScoreDocCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopScoreDocCollector::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopScoreDocCollector *self = (t_TopScoreDocCollector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopScoreDocCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(TopScoreDocCollector), module, "TopScoreDocCollector", 0);
        }

        void t_TopScoreDocCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopScoreDocCollector).tp_dict, "class_", make_descriptor(TopScoreDocCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopScoreDocCollector).tp_dict, "wrapfn_", make_descriptor(t_TopScoreDocCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopScoreDocCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopScoreDocCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopScoreDocCollector::initializeClass, 1)))
            return NULL;
          return t_TopScoreDocCollector::wrap_Object(TopScoreDocCollector(((t_TopScoreDocCollector *) arg)->object.this$));
        }
        static PyObject *t_TopScoreDocCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopScoreDocCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopScoreDocCollector_of_(t_TopScoreDocCollector *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_TopScoreDocCollector_create(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jint a0;
              jboolean a1;
              TopScoreDocCollector result((jobject) NULL);

              if (!parseArgs(args, "IZ", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::TopScoreDocCollector::create(a0, a1));
                return t_TopScoreDocCollector::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              jint a0;
              ::org::apache::lucene::search::ScoreDoc a1((jobject) NULL);
              jboolean a2;
              TopScoreDocCollector result((jobject) NULL);

              if (!parseArgs(args, "IkZ", ::org::apache::lucene::search::ScoreDoc::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::TopScoreDocCollector::create(a0, a1, a2));
                return t_TopScoreDocCollector::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "create", args);
          return NULL;
        }

        static PyObject *t_TopScoreDocCollector_setNextReader(t_TopScoreDocCollector *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setNextReader(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TopScoreDocCollector), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_TopScoreDocCollector_setScorer(t_TopScoreDocCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TopScoreDocCollector), (PyObject *) self, "setScorer", args, 2);
        }
        static PyObject *t_TopScoreDocCollector_get__parameters_(t_TopScoreDocCollector *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_TopScoreDocCollector_set__nextReader(t_TopScoreDocCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_TopScoreDocCollector_set__scorer(t_TopScoreDocCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/UpperCaseFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *UpperCaseFilter::class$ = NULL;
          jmethodID *UpperCaseFilter::mids$ = NULL;
          bool UpperCaseFilter::live$ = false;

          jclass UpperCaseFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/UpperCaseFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UpperCaseFilter::UpperCaseFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          UpperCaseFilter::UpperCaseFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          jboolean UpperCaseFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_UpperCaseFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UpperCaseFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UpperCaseFilter_init_(t_UpperCaseFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UpperCaseFilter_incrementToken(t_UpperCaseFilter *self, PyObject *args);

          static PyMethodDef t_UpperCaseFilter__methods_[] = {
            DECLARE_METHOD(t_UpperCaseFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UpperCaseFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UpperCaseFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(UpperCaseFilter, t_UpperCaseFilter, ::org::apache::lucene::analysis::TokenFilter, UpperCaseFilter, t_UpperCaseFilter_init_, 0, 0, 0, 0, 0);

          void t_UpperCaseFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(UpperCaseFilter), module, "UpperCaseFilter", 0);
          }

          void t_UpperCaseFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(UpperCaseFilter).tp_dict, "class_", make_descriptor(UpperCaseFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(UpperCaseFilter).tp_dict, "wrapfn_", make_descriptor(t_UpperCaseFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(UpperCaseFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_UpperCaseFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UpperCaseFilter::initializeClass, 1)))
              return NULL;
            return t_UpperCaseFilter::wrap_Object(UpperCaseFilter(((t_UpperCaseFilter *) arg)->object.this$));
          }
          static PyObject *t_UpperCaseFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UpperCaseFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UpperCaseFilter_init_(t_UpperCaseFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                UpperCaseFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = UpperCaseFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                UpperCaseFilter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = UpperCaseFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UpperCaseFilter_incrementToken(t_UpperCaseFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(UpperCaseFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianMinimalStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianMinimalStemFilter::class$ = NULL;
          jmethodID *NorwegianMinimalStemFilter::mids$ = NULL;
          bool NorwegianMinimalStemFilter::live$ = false;

          jclass NorwegianMinimalStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianMinimalStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianMinimalStemFilter::NorwegianMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          NorwegianMinimalStemFilter::NorwegianMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          jboolean NorwegianMinimalStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianMinimalStemFilter_init_(t_NorwegianMinimalStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianMinimalStemFilter_incrementToken(t_NorwegianMinimalStemFilter *self, PyObject *args);

          static PyMethodDef t_NorwegianMinimalStemFilter__methods_[] = {
            DECLARE_METHOD(t_NorwegianMinimalStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianMinimalStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianMinimalStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NorwegianMinimalStemFilter, t_NorwegianMinimalStemFilter, ::org::apache::lucene::analysis::TokenFilter, NorwegianMinimalStemFilter, t_NorwegianMinimalStemFilter_init_, 0, 0, 0, 0, 0);

          void t_NorwegianMinimalStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianMinimalStemFilter), module, "NorwegianMinimalStemFilter", 0);
          }

          void t_NorwegianMinimalStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemFilter).tp_dict, "class_", make_descriptor(NorwegianMinimalStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemFilter).tp_dict, "wrapfn_", make_descriptor(t_NorwegianMinimalStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NorwegianMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianMinimalStemFilter::initializeClass, 1)))
              return NULL;
            return t_NorwegianMinimalStemFilter::wrap_Object(NorwegianMinimalStemFilter(((t_NorwegianMinimalStemFilter *) arg)->object.this$));
          }
          static PyObject *t_NorwegianMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianMinimalStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianMinimalStemFilter_init_(t_NorwegianMinimalStemFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                NorwegianMinimalStemFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = NorwegianMinimalStemFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                NorwegianMinimalStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = NorwegianMinimalStemFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianMinimalStemFilter_incrementToken(t_NorwegianMinimalStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NorwegianMinimalStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiTermQuery$RewriteMethod::class$ = NULL;
        jmethodID *MultiTermQuery$RewriteMethod::mids$ = NULL;
        bool MultiTermQuery$RewriteMethod::live$ = false;

        jclass MultiTermQuery$RewriteMethod::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiTermQuery$RewriteMethod");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_rewrite_925c5bbc] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/Query;");
            mids$[mid_getTermsEnum_432efaeb] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/search/MultiTermQuery;Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTermQuery$RewriteMethod::MultiTermQuery$RewriteMethod() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::Query MultiTermQuery$RewriteMethod::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_925c5bbc], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiTermQuery$RewriteMethod_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$RewriteMethod_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiTermQuery$RewriteMethod_init_(t_MultiTermQuery$RewriteMethod *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTermQuery$RewriteMethod_rewrite(t_MultiTermQuery$RewriteMethod *self, PyObject *args);

        static PyMethodDef t_MultiTermQuery$RewriteMethod__methods_[] = {
          DECLARE_METHOD(t_MultiTermQuery$RewriteMethod, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$RewriteMethod, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$RewriteMethod, rewrite, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiTermQuery$RewriteMethod, t_MultiTermQuery$RewriteMethod, ::java::lang::Object, MultiTermQuery$RewriteMethod, t_MultiTermQuery$RewriteMethod_init_, 0, 0, 0, 0, 0);

        void t_MultiTermQuery$RewriteMethod::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermQuery$RewriteMethod), module, "MultiTermQuery$RewriteMethod", 0);
        }

        void t_MultiTermQuery$RewriteMethod::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$RewriteMethod).tp_dict, "class_", make_descriptor(MultiTermQuery$RewriteMethod::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$RewriteMethod).tp_dict, "wrapfn_", make_descriptor(t_MultiTermQuery$RewriteMethod::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$RewriteMethod).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTermQuery$RewriteMethod_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermQuery$RewriteMethod::initializeClass, 1)))
            return NULL;
          return t_MultiTermQuery$RewriteMethod::wrap_Object(MultiTermQuery$RewriteMethod(((t_MultiTermQuery$RewriteMethod *) arg)->object.this$));
        }
        static PyObject *t_MultiTermQuery$RewriteMethod_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermQuery$RewriteMethod::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiTermQuery$RewriteMethod_init_(t_MultiTermQuery$RewriteMethod *self, PyObject *args, PyObject *kwds)
        {
          MultiTermQuery$RewriteMethod object((jobject) NULL);

          INT_CALL(object = MultiTermQuery$RewriteMethod());
          self->object = object;

          return 0;
        }

        static PyObject *t_MultiTermQuery$RewriteMethod_rewrite(t_MultiTermQuery$RewriteMethod *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.rewrite(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "rewrite", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/NormalizeCharMap.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *NormalizeCharMap::class$ = NULL;
          jmethodID *NormalizeCharMap::mids$ = NULL;
          bool NormalizeCharMap::live$ = false;

          jclass NormalizeCharMap::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/NormalizeCharMap");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/analysis/charfilter/NormalizeCharMap$Builder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_NormalizeCharMap_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NormalizeCharMap_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_NormalizeCharMap__methods_[] = {
            DECLARE_METHOD(t_NormalizeCharMap, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizeCharMap, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NormalizeCharMap, t_NormalizeCharMap, ::java::lang::Object, NormalizeCharMap, abstract_init, 0, 0, 0, 0, 0);

          void t_NormalizeCharMap::install(PyObject *module)
          {
            installType(&PY_TYPE(NormalizeCharMap), module, "NormalizeCharMap", 0);
            PyDict_SetItemString(PY_TYPE(NormalizeCharMap).tp_dict, "Builder", make_descriptor(&PY_TYPE(NormalizeCharMap$Builder)));
          }

          void t_NormalizeCharMap::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NormalizeCharMap).tp_dict, "class_", make_descriptor(NormalizeCharMap::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NormalizeCharMap).tp_dict, "wrapfn_", make_descriptor(t_NormalizeCharMap::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NormalizeCharMap).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NormalizeCharMap_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NormalizeCharMap::initializeClass, 1)))
              return NULL;
            return t_NormalizeCharMap::wrap_Object(NormalizeCharMap(((t_NormalizeCharMap *) arg)->object.this$));
          }
          static PyObject *t_NormalizeCharMap_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NormalizeCharMap::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Similarity$SimWeight.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Similarity$SimWeight::class$ = NULL;
          jmethodID *Similarity$SimWeight::mids$ = NULL;
          bool Similarity$SimWeight::live$ = false;

          jclass Similarity$SimWeight::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Similarity$SimWeight");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getValueForNormalization_54c6a176] = env->getMethodID(cls, "getValueForNormalization", "()F");
              mids$[mid_normalize_f1b0c004] = env->getMethodID(cls, "normalize", "(FF)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Similarity$SimWeight::Similarity$SimWeight() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat Similarity$SimWeight::getValueForNormalization() const
          {
            return env->callFloatMethod(this$, mids$[mid_getValueForNormalization_54c6a176]);
          }

          void Similarity$SimWeight::normalize(jfloat a0, jfloat a1) const
          {
            env->callVoidMethod(this$, mids$[mid_normalize_f1b0c004], a0, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Similarity$SimWeight_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Similarity$SimWeight_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Similarity$SimWeight_init_(t_Similarity$SimWeight *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Similarity$SimWeight_getValueForNormalization(t_Similarity$SimWeight *self);
          static PyObject *t_Similarity$SimWeight_normalize(t_Similarity$SimWeight *self, PyObject *args);
          static PyObject *t_Similarity$SimWeight_get__valueForNormalization(t_Similarity$SimWeight *self, void *data);
          static PyGetSetDef t_Similarity$SimWeight__fields_[] = {
            DECLARE_GET_FIELD(t_Similarity$SimWeight, valueForNormalization),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Similarity$SimWeight__methods_[] = {
            DECLARE_METHOD(t_Similarity$SimWeight, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Similarity$SimWeight, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Similarity$SimWeight, getValueForNormalization, METH_NOARGS),
            DECLARE_METHOD(t_Similarity$SimWeight, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Similarity$SimWeight, t_Similarity$SimWeight, ::java::lang::Object, Similarity$SimWeight, t_Similarity$SimWeight_init_, 0, 0, t_Similarity$SimWeight__fields_, 0, 0);

          void t_Similarity$SimWeight::install(PyObject *module)
          {
            installType(&PY_TYPE(Similarity$SimWeight), module, "Similarity$SimWeight", 0);
          }

          void t_Similarity$SimWeight::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Similarity$SimWeight).tp_dict, "class_", make_descriptor(Similarity$SimWeight::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Similarity$SimWeight).tp_dict, "wrapfn_", make_descriptor(t_Similarity$SimWeight::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Similarity$SimWeight).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Similarity$SimWeight_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Similarity$SimWeight::initializeClass, 1)))
              return NULL;
            return t_Similarity$SimWeight::wrap_Object(Similarity$SimWeight(((t_Similarity$SimWeight *) arg)->object.this$));
          }
          static PyObject *t_Similarity$SimWeight_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Similarity$SimWeight::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Similarity$SimWeight_init_(t_Similarity$SimWeight *self, PyObject *args, PyObject *kwds)
          {
            Similarity$SimWeight object((jobject) NULL);

            INT_CALL(object = Similarity$SimWeight());
            self->object = object;

            return 0;
          }

          static PyObject *t_Similarity$SimWeight_getValueForNormalization(t_Similarity$SimWeight *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getValueForNormalization());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_Similarity$SimWeight_normalize(t_Similarity$SimWeight *self, PyObject *args)
          {
            jfloat a0;
            jfloat a1;

            if (!parseArgs(args, "FF", &a0, &a1))
            {
              OBJ_CALL(self->object.normalize(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "normalize", args);
            return NULL;
          }

          static PyObject *t_Similarity$SimWeight_get__valueForNormalization(t_Similarity$SimWeight *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getValueForNormalization());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternReplaceCharFilterFactory.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/CharFilter.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternReplaceCharFilterFactory::class$ = NULL;
          jmethodID *PatternReplaceCharFilterFactory::mids$ = NULL;
          bool PatternReplaceCharFilterFactory::live$ = false;

          jclass PatternReplaceCharFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternReplaceCharFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_567624d1] = env->getMethodID(cls, "create", "(Ljava/io/Reader;)Lorg/apache/lucene/analysis/CharFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternReplaceCharFilterFactory::PatternReplaceCharFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::CharFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::CharFilter PatternReplaceCharFilterFactory::create(const ::java::io::Reader & a0) const
          {
            return ::org::apache::lucene::analysis::CharFilter(env->callObjectMethod(this$, mids$[mid_create_567624d1], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternReplaceCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternReplaceCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternReplaceCharFilterFactory_init_(t_PatternReplaceCharFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternReplaceCharFilterFactory_create(t_PatternReplaceCharFilterFactory *self, PyObject *args);

          static PyMethodDef t_PatternReplaceCharFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PatternReplaceCharFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceCharFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceCharFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternReplaceCharFilterFactory, t_PatternReplaceCharFilterFactory, ::org::apache::lucene::analysis::util::CharFilterFactory, PatternReplaceCharFilterFactory, t_PatternReplaceCharFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_PatternReplaceCharFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternReplaceCharFilterFactory), module, "PatternReplaceCharFilterFactory", 0);
          }

          void t_PatternReplaceCharFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternReplaceCharFilterFactory).tp_dict, "class_", make_descriptor(PatternReplaceCharFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternReplaceCharFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PatternReplaceCharFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternReplaceCharFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternReplaceCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternReplaceCharFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PatternReplaceCharFilterFactory::wrap_Object(PatternReplaceCharFilterFactory(((t_PatternReplaceCharFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PatternReplaceCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternReplaceCharFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternReplaceCharFilterFactory_init_(t_PatternReplaceCharFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PatternReplaceCharFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PatternReplaceCharFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternReplaceCharFilterFactory_create(t_PatternReplaceCharFilterFactory *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::org::apache::lucene::analysis::CharFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_CharFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PatternReplaceCharFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$TermValComparator.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$TermValComparator::class$ = NULL;
        jmethodID *FieldComparator$TermValComparator::mids$ = NULL;
        bool FieldComparator$TermValComparator::live$ = false;

        jclass FieldComparator$TermValComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$TermValComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_cab89017] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;Z)V");
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_compareValues_594e5ef9] = env->getMethodID(cls, "compareValues", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_7bc03dc4] = env->getMethodID(cls, "setTopValue", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_value_b57e9c3f] = env->getMethodID(cls, "value", "(I)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_isNull_b7fef192] = env->getMethodID(cls, "isNull", "(ILorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_getBinaryDocValues_1d0f9c23] = env->getMethodID(cls, "getBinaryDocValues", "(Lorg/apache/lucene/index/AtomicReaderContext;Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getDocsWithField_efadd646] = env->getMethodID(cls, "getDocsWithField", "(Lorg/apache/lucene/index/AtomicReaderContext;Ljava/lang/String;)Lorg/apache/lucene/util/Bits;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparator$TermValComparator::FieldComparator$TermValComparator(jint a0, const ::java::lang::String & a1, jboolean a2) : ::org::apache::lucene::search::FieldComparator(env->newObject(initializeClass, &mids$, mid_init$_cab89017, a0, a1.this$, a2)) {}

        jint FieldComparator$TermValComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$TermValComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$TermValComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        jint FieldComparator$TermValComparator::compareValues(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compareValues_594e5ef9], a0.this$, a1.this$);
        }

        void FieldComparator$TermValComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$TermValComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$TermValComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$TermValComparator::setTopValue(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_7bc03dc4], a0.this$);
        }

        ::org::apache::lucene::util::BytesRef FieldComparator$TermValComparator::value(jint a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_value_b57e9c3f], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$TermValComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$TermValComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$TermValComparator_of_(t_FieldComparator$TermValComparator *self, PyObject *args);
        static int t_FieldComparator$TermValComparator_init_(t_FieldComparator$TermValComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparator$TermValComparator_compare(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_compareBottom(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_compareTop(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_compareValues(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_copy(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_setBottom(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_setNextReader(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_setTopValue(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_value(t_FieldComparator$TermValComparator *self, PyObject *args);
        static int t_FieldComparator$TermValComparator_set__bottom(t_FieldComparator$TermValComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$TermValComparator_set__nextReader(t_FieldComparator$TermValComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$TermValComparator_set__topValue(t_FieldComparator$TermValComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$TermValComparator_get__parameters_(t_FieldComparator$TermValComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$TermValComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$TermValComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$TermValComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$TermValComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$TermValComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$TermValComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$TermValComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, compareValues, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$TermValComparator, t_FieldComparator$TermValComparator, ::org::apache::lucene::search::FieldComparator, FieldComparator$TermValComparator, t_FieldComparator$TermValComparator_init_, 0, 0, t_FieldComparator$TermValComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$TermValComparator::wrap_Object(const FieldComparator$TermValComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$TermValComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$TermValComparator *self = (t_FieldComparator$TermValComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$TermValComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$TermValComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$TermValComparator *self = (t_FieldComparator$TermValComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$TermValComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$TermValComparator), module, "FieldComparator$TermValComparator", 0);
        }

        void t_FieldComparator$TermValComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$TermValComparator).tp_dict, "class_", make_descriptor(FieldComparator$TermValComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$TermValComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$TermValComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$TermValComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$TermValComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$TermValComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$TermValComparator::wrap_Object(FieldComparator$TermValComparator(((t_FieldComparator$TermValComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$TermValComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$TermValComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$TermValComparator_of_(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldComparator$TermValComparator_init_(t_FieldComparator$TermValComparator *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          jboolean a2;
          FieldComparator$TermValComparator object((jobject) NULL);

          if (!parseArgs(args, "IsZ", &a0, &a1, &a2))
          {
            INT_CALL(object = FieldComparator$TermValComparator(a0, a1, a2));
            self->object = object;
            self->parameters[0] = &::org::apache::lucene::util::PY_TYPE(BytesRef);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldComparator$TermValComparator_compare(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_compareBottom(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_compareTop(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_compareValues(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.compareValues(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "compareValues", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_copy(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_setBottom(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_setNextReader(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_setTopValue(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_value(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$TermValComparator_get__parameters_(t_FieldComparator$TermValComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$TermValComparator_set__bottom(t_FieldComparator$TermValComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$TermValComparator_set__nextReader(t_FieldComparator$TermValComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$TermValComparator_set__topValue(t_FieldComparator$TermValComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$ShortParser.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$ShortParser::class$ = NULL;
        jmethodID *FieldCache$ShortParser::mids$ = NULL;
        bool FieldCache$ShortParser::live$ = false;

        jclass FieldCache$ShortParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$ShortParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_parseShort_7bc03dc1] = env->getMethodID(cls, "parseShort", "(Lorg/apache/lucene/util/BytesRef;)S");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jshort FieldCache$ShortParser::parseShort(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callShortMethod(this$, mids$[mid_parseShort_7bc03dc1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$ShortParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$ShortParser_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$ShortParser_parseShort(t_FieldCache$ShortParser *self, PyObject *arg);

        static PyMethodDef t_FieldCache$ShortParser__methods_[] = {
          DECLARE_METHOD(t_FieldCache$ShortParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$ShortParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$ShortParser, parseShort, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$ShortParser, t_FieldCache$ShortParser, ::org::apache::lucene::search::FieldCache$Parser, FieldCache$ShortParser, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldCache$ShortParser::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$ShortParser), module, "FieldCache$ShortParser", 0);
        }

        void t_FieldCache$ShortParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$ShortParser).tp_dict, "class_", make_descriptor(FieldCache$ShortParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$ShortParser).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$ShortParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$ShortParser).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$ShortParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$ShortParser::initializeClass, 1)))
            return NULL;
          return t_FieldCache$ShortParser::wrap_Object(FieldCache$ShortParser(((t_FieldCache$ShortParser *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$ShortParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$ShortParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCache$ShortParser_parseShort(t_FieldCache$ShortParser *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jshort result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.parseShort(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "parseShort", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiPhraseQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "java/util/List.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiPhraseQuery::class$ = NULL;
        jmethodID *MultiPhraseQuery::mids$ = NULL;
        bool MultiPhraseQuery::live$ = false;

        jclass MultiPhraseQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiPhraseQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_c9f85e01] = env->getMethodID(cls, "add", "([Lorg/apache/lucene/index/Term;)V");
            mids$[mid_add_7eca6a81] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_add_8f4de701] = env->getMethodID(cls, "add", "([Lorg/apache/lucene/index/Term;I)V");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getPositions_dab10e75] = env->getMethodID(cls, "getPositions", "()[I");
            mids$[mid_getSlop_54c6a179] = env->getMethodID(cls, "getSlop", "()I");
            mids$[mid_getTermArrays_87851566] = env->getMethodID(cls, "getTermArrays", "()Ljava/util/List;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setSlop_39c7bd3c] = env->getMethodID(cls, "setSlop", "(I)V");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiPhraseQuery::MultiPhraseQuery() : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void MultiPhraseQuery::add(const JArray< ::org::apache::lucene::index::Term > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_c9f85e01], a0.this$);
        }

        void MultiPhraseQuery::add(const ::org::apache::lucene::index::Term & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_7eca6a81], a0.this$);
        }

        void MultiPhraseQuery::add(const JArray< ::org::apache::lucene::index::Term > & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_8f4de701], a0.this$, a1);
        }

        ::org::apache::lucene::search::Weight MultiPhraseQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean MultiPhraseQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void MultiPhraseQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        JArray< jint > MultiPhraseQuery::getPositions() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getPositions_dab10e75]));
        }

        jint MultiPhraseQuery::getSlop() const
        {
          return env->callIntMethod(this$, mids$[mid_getSlop_54c6a179]);
        }

        ::java::util::List MultiPhraseQuery::getTermArrays() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getTermArrays_87851566]));
        }

        jint MultiPhraseQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query MultiPhraseQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        void MultiPhraseQuery::setSlop(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setSlop_39c7bd3c], a0);
        }

        ::java::lang::String MultiPhraseQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiPhraseQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiPhraseQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiPhraseQuery_init_(t_MultiPhraseQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiPhraseQuery_add(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_createWeight(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_equals(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_extractTerms(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_getPositions(t_MultiPhraseQuery *self);
        static PyObject *t_MultiPhraseQuery_getSlop(t_MultiPhraseQuery *self);
        static PyObject *t_MultiPhraseQuery_getTermArrays(t_MultiPhraseQuery *self);
        static PyObject *t_MultiPhraseQuery_hashCode(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_rewrite(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_setSlop(t_MultiPhraseQuery *self, PyObject *arg);
        static PyObject *t_MultiPhraseQuery_toString(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_get__positions(t_MultiPhraseQuery *self, void *data);
        static PyObject *t_MultiPhraseQuery_get__slop(t_MultiPhraseQuery *self, void *data);
        static int t_MultiPhraseQuery_set__slop(t_MultiPhraseQuery *self, PyObject *arg, void *data);
        static PyObject *t_MultiPhraseQuery_get__termArrays(t_MultiPhraseQuery *self, void *data);
        static PyGetSetDef t_MultiPhraseQuery__fields_[] = {
          DECLARE_GET_FIELD(t_MultiPhraseQuery, positions),
          DECLARE_GETSET_FIELD(t_MultiPhraseQuery, slop),
          DECLARE_GET_FIELD(t_MultiPhraseQuery, termArrays),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiPhraseQuery__methods_[] = {
          DECLARE_METHOD(t_MultiPhraseQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiPhraseQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiPhraseQuery, add, METH_VARARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, getPositions, METH_NOARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, getSlop, METH_NOARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, getTermArrays, METH_NOARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, setSlop, METH_O),
          DECLARE_METHOD(t_MultiPhraseQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiPhraseQuery, t_MultiPhraseQuery, ::org::apache::lucene::search::Query, MultiPhraseQuery, t_MultiPhraseQuery_init_, 0, 0, t_MultiPhraseQuery__fields_, 0, 0);

        void t_MultiPhraseQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiPhraseQuery), module, "MultiPhraseQuery", 0);
        }

        void t_MultiPhraseQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiPhraseQuery).tp_dict, "class_", make_descriptor(MultiPhraseQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiPhraseQuery).tp_dict, "wrapfn_", make_descriptor(t_MultiPhraseQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiPhraseQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiPhraseQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiPhraseQuery::initializeClass, 1)))
            return NULL;
          return t_MultiPhraseQuery::wrap_Object(MultiPhraseQuery(((t_MultiPhraseQuery *) arg)->object.this$));
        }
        static PyObject *t_MultiPhraseQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiPhraseQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiPhraseQuery_init_(t_MultiPhraseQuery *self, PyObject *args, PyObject *kwds)
        {
          MultiPhraseQuery object((jobject) NULL);

          INT_CALL(object = MultiPhraseQuery());
          self->object = object;

          return 0;
        }

        static PyObject *t_MultiPhraseQuery_add(t_MultiPhraseQuery *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::Term > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              JArray< ::org::apache::lucene::index::Term > a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "[kI", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_MultiPhraseQuery_createWeight(t_MultiPhraseQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiPhraseQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_MultiPhraseQuery_equals(t_MultiPhraseQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MultiPhraseQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_MultiPhraseQuery_extractTerms(t_MultiPhraseQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(MultiPhraseQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_MultiPhraseQuery_getPositions(t_MultiPhraseQuery *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.getPositions());
          return result.wrap();
        }

        static PyObject *t_MultiPhraseQuery_getSlop(t_MultiPhraseQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getSlop());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MultiPhraseQuery_getTermArrays(t_MultiPhraseQuery *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.getTermArrays());
          return ::java::util::t_List::wrap_Object(result, &::java::lang::PY_TYPE(Object));
        }

        static PyObject *t_MultiPhraseQuery_hashCode(t_MultiPhraseQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiPhraseQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_MultiPhraseQuery_rewrite(t_MultiPhraseQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiPhraseQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_MultiPhraseQuery_setSlop(t_MultiPhraseQuery *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setSlop(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setSlop", arg);
          return NULL;
        }

        static PyObject *t_MultiPhraseQuery_toString(t_MultiPhraseQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MultiPhraseQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MultiPhraseQuery_get__positions(t_MultiPhraseQuery *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object.getPositions());
          return value.wrap();
        }

        static PyObject *t_MultiPhraseQuery_get__slop(t_MultiPhraseQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getSlop());
          return PyInt_FromLong((long) value);
        }
        static int t_MultiPhraseQuery_set__slop(t_MultiPhraseQuery *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setSlop(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "slop", arg);
          return -1;
        }

        static PyObject *t_MultiPhraseQuery_get__termArrays(t_MultiPhraseQuery *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getTermArrays());
          return ::java::util::t_List::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *CollectionStatistics::class$ = NULL;
        jmethodID *CollectionStatistics::mids$ = NULL;
        bool CollectionStatistics::live$ = false;

        jclass CollectionStatistics::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/CollectionStatistics");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_2d72e40c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;JJJJ)V");
            mids$[mid_docCount_54c6a17a] = env->getMethodID(cls, "docCount", "()J");
            mids$[mid_field_14c7b5c5] = env->getMethodID(cls, "field", "()Ljava/lang/String;");
            mids$[mid_maxDoc_54c6a17a] = env->getMethodID(cls, "maxDoc", "()J");
            mids$[mid_sumDocFreq_54c6a17a] = env->getMethodID(cls, "sumDocFreq", "()J");
            mids$[mid_sumTotalTermFreq_54c6a17a] = env->getMethodID(cls, "sumTotalTermFreq", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CollectionStatistics::CollectionStatistics(const ::java::lang::String & a0, jlong a1, jlong a2, jlong a3, jlong a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2d72e40c, a0.this$, a1, a2, a3, a4)) {}

        jlong CollectionStatistics::docCount() const
        {
          return env->callLongMethod(this$, mids$[mid_docCount_54c6a17a]);
        }

        ::java::lang::String CollectionStatistics::field() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_field_14c7b5c5]));
        }

        jlong CollectionStatistics::maxDoc() const
        {
          return env->callLongMethod(this$, mids$[mid_maxDoc_54c6a17a]);
        }

        jlong CollectionStatistics::sumDocFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_sumDocFreq_54c6a17a]);
        }

        jlong CollectionStatistics::sumTotalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_sumTotalTermFreq_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_CollectionStatistics_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollectionStatistics_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CollectionStatistics_init_(t_CollectionStatistics *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CollectionStatistics_docCount(t_CollectionStatistics *self);
        static PyObject *t_CollectionStatistics_field(t_CollectionStatistics *self);
        static PyObject *t_CollectionStatistics_maxDoc(t_CollectionStatistics *self);
        static PyObject *t_CollectionStatistics_sumDocFreq(t_CollectionStatistics *self);
        static PyObject *t_CollectionStatistics_sumTotalTermFreq(t_CollectionStatistics *self);

        static PyMethodDef t_CollectionStatistics__methods_[] = {
          DECLARE_METHOD(t_CollectionStatistics, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollectionStatistics, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollectionStatistics, docCount, METH_NOARGS),
          DECLARE_METHOD(t_CollectionStatistics, field, METH_NOARGS),
          DECLARE_METHOD(t_CollectionStatistics, maxDoc, METH_NOARGS),
          DECLARE_METHOD(t_CollectionStatistics, sumDocFreq, METH_NOARGS),
          DECLARE_METHOD(t_CollectionStatistics, sumTotalTermFreq, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CollectionStatistics, t_CollectionStatistics, ::java::lang::Object, CollectionStatistics, t_CollectionStatistics_init_, 0, 0, 0, 0, 0);

        void t_CollectionStatistics::install(PyObject *module)
        {
          installType(&PY_TYPE(CollectionStatistics), module, "CollectionStatistics", 0);
        }

        void t_CollectionStatistics::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CollectionStatistics).tp_dict, "class_", make_descriptor(CollectionStatistics::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CollectionStatistics).tp_dict, "wrapfn_", make_descriptor(t_CollectionStatistics::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CollectionStatistics).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollectionStatistics_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollectionStatistics::initializeClass, 1)))
            return NULL;
          return t_CollectionStatistics::wrap_Object(CollectionStatistics(((t_CollectionStatistics *) arg)->object.this$));
        }
        static PyObject *t_CollectionStatistics_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollectionStatistics::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CollectionStatistics_init_(t_CollectionStatistics *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          jlong a2;
          jlong a3;
          jlong a4;
          CollectionStatistics object((jobject) NULL);

          if (!parseArgs(args, "sJJJJ", &a0, &a1, &a2, &a3, &a4))
          {
            INT_CALL(object = CollectionStatistics(a0, a1, a2, a3, a4));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CollectionStatistics_docCount(t_CollectionStatistics *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.docCount());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_CollectionStatistics_field(t_CollectionStatistics *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.field());
          return j2p(result);
        }

        static PyObject *t_CollectionStatistics_maxDoc(t_CollectionStatistics *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.maxDoc());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_CollectionStatistics_sumDocFreq(t_CollectionStatistics *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.sumDocFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_CollectionStatistics_sumTotalTermFreq(t_CollectionStatistics *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.sumTotalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BitUtil.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BitUtil::class$ = NULL;
        jmethodID *BitUtil::mids$ = NULL;
        bool BitUtil::live$ = false;

        jclass BitUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BitUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_bitCount_b2271698] = env->getStaticMethodID(cls, "bitCount", "(B)I");
            mids$[mid_bitList_b2271698] = env->getStaticMethodID(cls, "bitList", "(B)I");
            mids$[mid_nextHighestPowerOfTwo_0ee6df33] = env->getStaticMethodID(cls, "nextHighestPowerOfTwo", "(J)J");
            mids$[mid_nextHighestPowerOfTwo_39c7bd23] = env->getStaticMethodID(cls, "nextHighestPowerOfTwo", "(I)I");
            mids$[mid_pop_andnot_c347d95a] = env->getStaticMethodID(cls, "pop_andnot", "([J[JII)J");
            mids$[mid_pop_array_6ae021fb] = env->getStaticMethodID(cls, "pop_array", "([JII)J");
            mids$[mid_pop_intersect_c347d95a] = env->getStaticMethodID(cls, "pop_intersect", "([J[JII)J");
            mids$[mid_pop_union_c347d95a] = env->getStaticMethodID(cls, "pop_union", "([J[JII)J");
            mids$[mid_pop_xor_c347d95a] = env->getStaticMethodID(cls, "pop_xor", "([J[JII)J");
            mids$[mid_zigZagDecode_39c7bd23] = env->getStaticMethodID(cls, "zigZagDecode", "(I)I");
            mids$[mid_zigZagDecode_0ee6df33] = env->getStaticMethodID(cls, "zigZagDecode", "(J)J");
            mids$[mid_zigZagEncode_39c7bd23] = env->getStaticMethodID(cls, "zigZagEncode", "(I)I");
            mids$[mid_zigZagEncode_0ee6df33] = env->getStaticMethodID(cls, "zigZagEncode", "(J)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint BitUtil::bitCount(jbyte a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_bitCount_b2271698], a0);
        }

        jint BitUtil::bitList(jbyte a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_bitList_b2271698], a0);
        }

        jlong BitUtil::nextHighestPowerOfTwo(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_nextHighestPowerOfTwo_0ee6df33], a0);
        }

        jint BitUtil::nextHighestPowerOfTwo(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_nextHighestPowerOfTwo_39c7bd23], a0);
        }

        jlong BitUtil::pop_andnot(const JArray< jlong > & a0, const JArray< jlong > & a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_pop_andnot_c347d95a], a0.this$, a1.this$, a2, a3);
        }

        jlong BitUtil::pop_array(const JArray< jlong > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_pop_array_6ae021fb], a0.this$, a1, a2);
        }

        jlong BitUtil::pop_intersect(const JArray< jlong > & a0, const JArray< jlong > & a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_pop_intersect_c347d95a], a0.this$, a1.this$, a2, a3);
        }

        jlong BitUtil::pop_union(const JArray< jlong > & a0, const JArray< jlong > & a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_pop_union_c347d95a], a0.this$, a1.this$, a2, a3);
        }

        jlong BitUtil::pop_xor(const JArray< jlong > & a0, const JArray< jlong > & a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_pop_xor_c347d95a], a0.this$, a1.this$, a2, a3);
        }

        jint BitUtil::zigZagDecode(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_zigZagDecode_39c7bd23], a0);
        }

        jlong BitUtil::zigZagDecode(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_zigZagDecode_0ee6df33], a0);
        }

        jint BitUtil::zigZagEncode(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_zigZagEncode_39c7bd23], a0);
        }

        jlong BitUtil::zigZagEncode(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_zigZagEncode_0ee6df33], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BitUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BitUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BitUtil_bitCount(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BitUtil_bitList(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BitUtil_nextHighestPowerOfTwo(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_pop_andnot(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_pop_array(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_pop_intersect(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_pop_union(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_pop_xor(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_zigZagDecode(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_zigZagEncode(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_BitUtil__methods_[] = {
          DECLARE_METHOD(t_BitUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, bitCount, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, bitList, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, nextHighestPowerOfTwo, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, pop_andnot, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, pop_array, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, pop_intersect, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, pop_union, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, pop_xor, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, zigZagDecode, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, zigZagEncode, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BitUtil, t_BitUtil, ::java::lang::Object, BitUtil, abstract_init, 0, 0, 0, 0, 0);

        void t_BitUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(BitUtil), module, "BitUtil", 0);
        }

        void t_BitUtil::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BitUtil).tp_dict, "class_", make_descriptor(BitUtil::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BitUtil).tp_dict, "wrapfn_", make_descriptor(t_BitUtil::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BitUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BitUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BitUtil::initializeClass, 1)))
            return NULL;
          return t_BitUtil::wrap_Object(BitUtil(((t_BitUtil *) arg)->object.this$));
        }
        static PyObject *t_BitUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BitUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BitUtil_bitCount(PyTypeObject *type, PyObject *arg)
        {
          jbyte a0;
          jint result;

          if (!parseArg(arg, "B", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::bitCount(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "bitCount", arg);
          return NULL;
        }

        static PyObject *t_BitUtil_bitList(PyTypeObject *type, PyObject *arg)
        {
          jbyte a0;
          jint result;

          if (!parseArg(arg, "B", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::bitList(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "bitList", arg);
          return NULL;
        }

        static PyObject *t_BitUtil_nextHighestPowerOfTwo(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::nextHighestPowerOfTwo(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::nextHighestPowerOfTwo(a0));
                return PyInt_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError(type, "nextHighestPowerOfTwo", args);
          return NULL;
        }

        static PyObject *t_BitUtil_pop_andnot(PyTypeObject *type, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);
          jint a2;
          jint a3;
          jlong result;

          if (!parseArgs(args, "[J[JII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::pop_andnot(a0, a1, a2, a3));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "pop_andnot", args);
          return NULL;
        }

        static PyObject *t_BitUtil_pop_array(PyTypeObject *type, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;
          jlong result;

          if (!parseArgs(args, "[JII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::pop_array(a0, a1, a2));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "pop_array", args);
          return NULL;
        }

        static PyObject *t_BitUtil_pop_intersect(PyTypeObject *type, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);
          jint a2;
          jint a3;
          jlong result;

          if (!parseArgs(args, "[J[JII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::pop_intersect(a0, a1, a2, a3));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "pop_intersect", args);
          return NULL;
        }

        static PyObject *t_BitUtil_pop_union(PyTypeObject *type, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);
          jint a2;
          jint a3;
          jlong result;

          if (!parseArgs(args, "[J[JII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::pop_union(a0, a1, a2, a3));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "pop_union", args);
          return NULL;
        }

        static PyObject *t_BitUtil_pop_xor(PyTypeObject *type, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);
          jint a2;
          jint a3;
          jlong result;

          if (!parseArgs(args, "[J[JII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::pop_xor(a0, a1, a2, a3));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "pop_xor", args);
          return NULL;
        }

        static PyObject *t_BitUtil_zigZagDecode(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::zigZagDecode(a0));
                return PyInt_FromLong((long) result);
              }
            }
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::zigZagDecode(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "zigZagDecode", args);
          return NULL;
        }

        static PyObject *t_BitUtil_zigZagEncode(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::zigZagEncode(a0));
                return PyInt_FromLong((long) result);
              }
            }
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::zigZagEncode(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "zigZagEncode", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ProductFloatFunction.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ProductFloatFunction::class$ = NULL;
            jmethodID *ProductFloatFunction::mids$ = NULL;
            bool ProductFloatFunction::live$ = false;

            jclass ProductFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ProductFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ee9922ca] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_d2e34bb9] = env->getMethodID(cls, "func", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ProductFloatFunction::ProductFloatFunction(const JArray< ::org::apache::lucene::queries::function::ValueSource > & a0) : ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction(env->newObject(initializeClass, &mids$, mid_init$_ee9922ca, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ProductFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ProductFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ProductFloatFunction_init_(t_ProductFloatFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_ProductFloatFunction__methods_[] = {
              DECLARE_METHOD(t_ProductFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ProductFloatFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ProductFloatFunction, t_ProductFloatFunction, ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction, ProductFloatFunction, t_ProductFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_ProductFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(ProductFloatFunction), module, "ProductFloatFunction", 0);
            }

            void t_ProductFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ProductFloatFunction).tp_dict, "class_", make_descriptor(ProductFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ProductFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_ProductFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ProductFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ProductFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ProductFloatFunction::initializeClass, 1)))
                return NULL;
              return t_ProductFloatFunction::wrap_Object(ProductFloatFunction(((t_ProductFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_ProductFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ProductFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ProductFloatFunction_init_(t_ProductFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              JArray< ::org::apache::lucene::queries::function::ValueSource > a0((jobject) NULL);
              ProductFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = ProductFloatFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PayloadAttribute.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PayloadAttribute::class$ = NULL;
          jmethodID *PayloadAttribute::mids$ = NULL;
          bool PayloadAttribute::live$ = false;

          jclass PayloadAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PayloadAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getPayload_4ae19461] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_setPayload_7bc03dc4] = env->getMethodID(cls, "setPayload", "(Lorg/apache/lucene/util/BytesRef;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::BytesRef PayloadAttribute::getPayload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_4ae19461]));
          }

          void PayloadAttribute::setPayload(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPayload_7bc03dc4], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PayloadAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadAttribute_getPayload(t_PayloadAttribute *self);
          static PyObject *t_PayloadAttribute_setPayload(t_PayloadAttribute *self, PyObject *arg);
          static PyObject *t_PayloadAttribute_get__payload(t_PayloadAttribute *self, void *data);
          static int t_PayloadAttribute_set__payload(t_PayloadAttribute *self, PyObject *arg, void *data);
          static PyGetSetDef t_PayloadAttribute__fields_[] = {
            DECLARE_GETSET_FIELD(t_PayloadAttribute, payload),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PayloadAttribute__methods_[] = {
            DECLARE_METHOD(t_PayloadAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadAttribute, getPayload, METH_NOARGS),
            DECLARE_METHOD(t_PayloadAttribute, setPayload, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadAttribute, t_PayloadAttribute, ::org::apache::lucene::util::Attribute, PayloadAttribute, abstract_init, 0, 0, t_PayloadAttribute__fields_, 0, 0);

          void t_PayloadAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadAttribute), module, "PayloadAttribute", 0);
          }

          void t_PayloadAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadAttribute).tp_dict, "class_", make_descriptor(PayloadAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadAttribute).tp_dict, "wrapfn_", make_descriptor(t_PayloadAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadAttribute::initializeClass, 1)))
              return NULL;
            return t_PayloadAttribute::wrap_Object(PayloadAttribute(((t_PayloadAttribute *) arg)->object.this$));
          }
          static PyObject *t_PayloadAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PayloadAttribute_getPayload(t_PayloadAttribute *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_PayloadAttribute_setPayload(t_PayloadAttribute *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setPayload(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPayload", arg);
            return NULL;
          }

          static PyObject *t_PayloadAttribute_get__payload(t_PayloadAttribute *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
          static int t_PayloadAttribute_set__payload(t_PayloadAttribute *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::util::BytesRef value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
              {
                INT_CALL(self->object.setPayload(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "payload", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/in/IndicTokenizer.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {

          ::java::lang::Class *IndicTokenizer::class$ = NULL;
          jmethodID *IndicTokenizer::mids$ = NULL;
          bool IndicTokenizer::live$ = false;

          jclass IndicTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/in/IndicTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_isTokenChar_39c7bd30] = env->getMethodID(cls, "isTokenChar", "(I)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndicTokenizer::IndicTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          IndicTokenizer::IndicTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {
          static PyObject *t_IndicTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndicTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndicTokenizer_init_(t_IndicTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_IndicTokenizer__methods_[] = {
            DECLARE_METHOD(t_IndicTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IndicTokenizer, t_IndicTokenizer, ::org::apache::lucene::analysis::util::CharTokenizer, IndicTokenizer, t_IndicTokenizer_init_, 0, 0, 0, 0, 0);

          void t_IndicTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(IndicTokenizer), module, "IndicTokenizer", 0);
          }

          void t_IndicTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IndicTokenizer).tp_dict, "class_", make_descriptor(IndicTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IndicTokenizer).tp_dict, "wrapfn_", make_descriptor(t_IndicTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IndicTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndicTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndicTokenizer::initializeClass, 1)))
              return NULL;
            return t_IndicTokenizer::wrap_Object(IndicTokenizer(((t_IndicTokenizer *) arg)->object.this$));
          }
          static PyObject *t_IndicTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndicTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndicTokenizer_init_(t_IndicTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                IndicTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = IndicTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                IndicTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = IndicTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/KeywordTokenizer.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *KeywordTokenizer::class$ = NULL;
          jmethodID *KeywordTokenizer::mids$ = NULL;
          bool KeywordTokenizer::live$ = false;
          jint KeywordTokenizer::DEFAULT_BUFFER_SIZE = (jint) 0;

          jclass KeywordTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/KeywordTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_8c604f56] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;I)V");
              mids$[mid_init$_338c3a92] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;I)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_BUFFER_SIZE = env->getStaticIntField(cls, "DEFAULT_BUFFER_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordTokenizer::KeywordTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          KeywordTokenizer::KeywordTokenizer(const ::java::io::Reader & a0, jint a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_8c604f56, a0.this$, a1)) {}

          KeywordTokenizer::KeywordTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, jint a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_338c3a92, a0.this$, a1.this$, a2)) {}

          void KeywordTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean KeywordTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void KeywordTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_KeywordTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordTokenizer_init_(t_KeywordTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeywordTokenizer_end(t_KeywordTokenizer *self, PyObject *args);
          static PyObject *t_KeywordTokenizer_incrementToken(t_KeywordTokenizer *self, PyObject *args);
          static PyObject *t_KeywordTokenizer_reset(t_KeywordTokenizer *self, PyObject *args);

          static PyMethodDef t_KeywordTokenizer__methods_[] = {
            DECLARE_METHOD(t_KeywordTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_KeywordTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_KeywordTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordTokenizer, t_KeywordTokenizer, ::org::apache::lucene::analysis::Tokenizer, KeywordTokenizer, t_KeywordTokenizer_init_, 0, 0, 0, 0, 0);

          void t_KeywordTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordTokenizer), module, "KeywordTokenizer", 0);
          }

          void t_KeywordTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordTokenizer).tp_dict, "class_", make_descriptor(KeywordTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordTokenizer).tp_dict, "wrapfn_", make_descriptor(t_KeywordTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(KeywordTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(KeywordTokenizer).tp_dict, "DEFAULT_BUFFER_SIZE", make_descriptor(KeywordTokenizer::DEFAULT_BUFFER_SIZE));
          }

          static PyObject *t_KeywordTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordTokenizer::initializeClass, 1)))
              return NULL;
            return t_KeywordTokenizer::wrap_Object(KeywordTokenizer(((t_KeywordTokenizer *) arg)->object.this$));
          }
          static PyObject *t_KeywordTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordTokenizer_init_(t_KeywordTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                KeywordTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = KeywordTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                KeywordTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kI", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = KeywordTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                KeywordTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkI", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = KeywordTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeywordTokenizer_end(t_KeywordTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(KeywordTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_KeywordTokenizer_incrementToken(t_KeywordTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(KeywordTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_KeywordTokenizer_reset(t_KeywordTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(KeywordTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {

          ::java::lang::Class *DictionaryCompoundWordTokenFilter::class$ = NULL;
          jmethodID *DictionaryCompoundWordTokenFilter::mids$ = NULL;
          bool DictionaryCompoundWordTokenFilter::live$ = false;

          jclass DictionaryCompoundWordTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_64fb9de3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_e67dd59e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c165ef98] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;IIIZ)V");
              mids$[mid_init$_42fe450d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;IIIZ)V");
              mids$[mid_decompose_54c6a166] = env->getMethodID(cls, "decompose", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DictionaryCompoundWordTokenFilter::DictionaryCompoundWordTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_64fb9de3, a0.this$, a1.this$)) {}

          DictionaryCompoundWordTokenFilter::DictionaryCompoundWordTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_e67dd59e, a0.this$, a1.this$, a2.this$)) {}

          DictionaryCompoundWordTokenFilter::DictionaryCompoundWordTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, jint a2, jint a3, jint a4, jboolean a5) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_c165ef98, a0.this$, a1.this$, a2, a3, a4, a5)) {}

          DictionaryCompoundWordTokenFilter::DictionaryCompoundWordTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2, jint a3, jint a4, jint a5, jboolean a6) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_42fe450d, a0.this$, a1.this$, a2.this$, a3, a4, a5, a6)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          static PyObject *t_DictionaryCompoundWordTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DictionaryCompoundWordTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DictionaryCompoundWordTokenFilter_init_(t_DictionaryCompoundWordTokenFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_DictionaryCompoundWordTokenFilter__methods_[] = {
            DECLARE_METHOD(t_DictionaryCompoundWordTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DictionaryCompoundWordTokenFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DictionaryCompoundWordTokenFilter, t_DictionaryCompoundWordTokenFilter, ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase, DictionaryCompoundWordTokenFilter, t_DictionaryCompoundWordTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_DictionaryCompoundWordTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(DictionaryCompoundWordTokenFilter), module, "DictionaryCompoundWordTokenFilter", 0);
          }

          void t_DictionaryCompoundWordTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DictionaryCompoundWordTokenFilter).tp_dict, "class_", make_descriptor(DictionaryCompoundWordTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DictionaryCompoundWordTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_DictionaryCompoundWordTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DictionaryCompoundWordTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DictionaryCompoundWordTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DictionaryCompoundWordTokenFilter::initializeClass, 1)))
              return NULL;
            return t_DictionaryCompoundWordTokenFilter::wrap_Object(DictionaryCompoundWordTokenFilter(((t_DictionaryCompoundWordTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_DictionaryCompoundWordTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DictionaryCompoundWordTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DictionaryCompoundWordTokenFilter_init_(t_DictionaryCompoundWordTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                DictionaryCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = DictionaryCompoundWordTokenFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                DictionaryCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kkK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = DictionaryCompoundWordTokenFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 6:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                jint a2;
                jint a3;
                jint a4;
                jboolean a5;
                DictionaryCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kKIIIZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &a3, &a4, &a5))
                {
                  INT_CALL(object = DictionaryCompoundWordTokenFilter(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 7:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                jint a3;
                jint a4;
                jint a5;
                jboolean a6;
                DictionaryCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kkKIIIZ", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a3, &a4, &a5, &a6))
                {
                  INT_CALL(object = DictionaryCompoundWordTokenFilter(a0, a1, a2, a3, a4, a5, a6));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex.h"
#include "org/apache/lucene/index/CheckIndex$Status$StoredFieldStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermVectorStatus.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermIndexStatus.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/lang/InterruptedException.h"
#include "org/apache/lucene/index/CheckIndex$Status$FieldNormStatus.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/CheckIndex$Status.h"
#include "java/io/PrintStream.h"
#include "org/apache/lucene/index/CheckIndex$Status$DocValuesStatus.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex::class$ = NULL;
        jmethodID *CheckIndex::mids$ = NULL;
        bool CheckIndex::live$ = false;

        jclass CheckIndex::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_2e261ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_checkIndex_91a82b33] = env->getMethodID(cls, "checkIndex", "()Lorg/apache/lucene/index/CheckIndex$Status;");
            mids$[mid_checkIndex_a75717b2] = env->getMethodID(cls, "checkIndex", "(Ljava/util/List;)Lorg/apache/lucene/index/CheckIndex$Status;");
            mids$[mid_fixIndex_a89756fe] = env->getMethodID(cls, "fixIndex", "(Lorg/apache/lucene/index/CheckIndex$Status;)V");
            mids$[mid_getCrossCheckTermVectors_54c6a16a] = env->getMethodID(cls, "getCrossCheckTermVectors", "()Z");
            mids$[mid_getFailFast_54c6a16a] = env->getMethodID(cls, "getFailFast", "()Z");
            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
            mids$[mid_setCrossCheckTermVectors_bb0c767f] = env->getMethodID(cls, "setCrossCheckTermVectors", "(Z)V");
            mids$[mid_setFailFast_bb0c767f] = env->getMethodID(cls, "setFailFast", "(Z)V");
            mids$[mid_setInfoStream_1b7c898b] = env->getMethodID(cls, "setInfoStream", "(Ljava/io/PrintStream;)V");
            mids$[mid_setInfoStream_ee355e40] = env->getMethodID(cls, "setInfoStream", "(Ljava/io/PrintStream;Z)V");
            mids$[mid_testDocValues_41c9b49c] = env->getStaticMethodID(cls, "testDocValues", "(Lorg/apache/lucene/index/AtomicReader;Ljava/io/PrintStream;Z)Lorg/apache/lucene/index/CheckIndex$Status$DocValuesStatus;");
            mids$[mid_testFieldNorms_bc1c88be] = env->getStaticMethodID(cls, "testFieldNorms", "(Lorg/apache/lucene/index/AtomicReader;Ljava/io/PrintStream;Z)Lorg/apache/lucene/index/CheckIndex$Status$FieldNormStatus;");
            mids$[mid_testPostings_2a988783] = env->getStaticMethodID(cls, "testPostings", "(Lorg/apache/lucene/index/AtomicReader;Ljava/io/PrintStream;)Lorg/apache/lucene/index/CheckIndex$Status$TermIndexStatus;");
            mids$[mid_testPostings_1ecea911] = env->getStaticMethodID(cls, "testPostings", "(Lorg/apache/lucene/index/AtomicReader;Ljava/io/PrintStream;ZZ)Lorg/apache/lucene/index/CheckIndex$Status$TermIndexStatus;");
            mids$[mid_testStoredFields_ad92fa83] = env->getStaticMethodID(cls, "testStoredFields", "(Lorg/apache/lucene/index/AtomicReader;Ljava/io/PrintStream;Z)Lorg/apache/lucene/index/CheckIndex$Status$StoredFieldStatus;");
            mids$[mid_testTermVectors_f049a3c1] = env->getStaticMethodID(cls, "testTermVectors", "(Lorg/apache/lucene/index/AtomicReader;Ljava/io/PrintStream;)Lorg/apache/lucene/index/CheckIndex$Status$TermVectorStatus;");
            mids$[mid_testTermVectors_524cdfbc] = env->getStaticMethodID(cls, "testTermVectors", "(Lorg/apache/lucene/index/AtomicReader;Ljava/io/PrintStream;ZZZ)Lorg/apache/lucene/index/CheckIndex$Status$TermVectorStatus;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CheckIndex::CheckIndex(const ::org::apache::lucene::store::Directory & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2e261ef2, a0.this$)) {}

        ::org::apache::lucene::index::CheckIndex$Status CheckIndex::checkIndex() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status(env->callObjectMethod(this$, mids$[mid_checkIndex_91a82b33]));
        }

        ::org::apache::lucene::index::CheckIndex$Status CheckIndex::checkIndex(const ::java::util::List & a0) const
        {
          return ::org::apache::lucene::index::CheckIndex$Status(env->callObjectMethod(this$, mids$[mid_checkIndex_a75717b2], a0.this$));
        }

        void CheckIndex::fixIndex(const ::org::apache::lucene::index::CheckIndex$Status & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_fixIndex_a89756fe], a0.this$);
        }

        jboolean CheckIndex::getCrossCheckTermVectors() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getCrossCheckTermVectors_54c6a16a]);
        }

        jboolean CheckIndex::getFailFast() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getFailFast_54c6a16a]);
        }

        void CheckIndex::main(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
        }

        void CheckIndex::setCrossCheckTermVectors(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setCrossCheckTermVectors_bb0c767f], a0);
        }

        void CheckIndex::setFailFast(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setFailFast_bb0c767f], a0);
        }

        void CheckIndex::setInfoStream(const ::java::io::PrintStream & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setInfoStream_1b7c898b], a0.this$);
        }

        void CheckIndex::setInfoStream(const ::java::io::PrintStream & a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setInfoStream_ee355e40], a0.this$, a1);
        }

        ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus CheckIndex::testDocValues(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::io::PrintStream & a1, jboolean a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus(env->callStaticObjectMethod(cls, mids$[mid_testDocValues_41c9b49c], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus CheckIndex::testFieldNorms(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::io::PrintStream & a1, jboolean a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus(env->callStaticObjectMethod(cls, mids$[mid_testFieldNorms_bc1c88be], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus CheckIndex::testPostings(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::io::PrintStream & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus(env->callStaticObjectMethod(cls, mids$[mid_testPostings_2a988783], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus CheckIndex::testPostings(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::io::PrintStream & a1, jboolean a2, jboolean a3)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus(env->callStaticObjectMethod(cls, mids$[mid_testPostings_1ecea911], a0.this$, a1.this$, a2, a3));
        }

        ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus CheckIndex::testStoredFields(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::io::PrintStream & a1, jboolean a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus(env->callStaticObjectMethod(cls, mids$[mid_testStoredFields_ad92fa83], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus CheckIndex::testTermVectors(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::io::PrintStream & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus(env->callStaticObjectMethod(cls, mids$[mid_testTermVectors_f049a3c1], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus CheckIndex::testTermVectors(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::io::PrintStream & a1, jboolean a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus(env->callStaticObjectMethod(cls, mids$[mid_testTermVectors_524cdfbc], a0.this$, a1.this$, a2, a3, a4));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CheckIndex_init_(t_CheckIndex *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CheckIndex_checkIndex(t_CheckIndex *self, PyObject *args);
        static PyObject *t_CheckIndex_fixIndex(t_CheckIndex *self, PyObject *arg);
        static PyObject *t_CheckIndex_getCrossCheckTermVectors(t_CheckIndex *self);
        static PyObject *t_CheckIndex_getFailFast(t_CheckIndex *self);
        static PyObject *t_CheckIndex_main(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex_setCrossCheckTermVectors(t_CheckIndex *self, PyObject *arg);
        static PyObject *t_CheckIndex_setFailFast(t_CheckIndex *self, PyObject *arg);
        static PyObject *t_CheckIndex_setInfoStream(t_CheckIndex *self, PyObject *args);
        static PyObject *t_CheckIndex_testDocValues(PyTypeObject *type, PyObject *args);
        static PyObject *t_CheckIndex_testFieldNorms(PyTypeObject *type, PyObject *args);
        static PyObject *t_CheckIndex_testPostings(PyTypeObject *type, PyObject *args);
        static PyObject *t_CheckIndex_testStoredFields(PyTypeObject *type, PyObject *args);
        static PyObject *t_CheckIndex_testTermVectors(PyTypeObject *type, PyObject *args);
        static PyObject *t_CheckIndex_get__crossCheckTermVectors(t_CheckIndex *self, void *data);
        static int t_CheckIndex_set__crossCheckTermVectors(t_CheckIndex *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex_get__failFast(t_CheckIndex *self, void *data);
        static int t_CheckIndex_set__failFast(t_CheckIndex *self, PyObject *arg, void *data);
        static int t_CheckIndex_set__infoStream(t_CheckIndex *self, PyObject *arg, void *data);
        static PyGetSetDef t_CheckIndex__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex, crossCheckTermVectors),
          DECLARE_GETSET_FIELD(t_CheckIndex, failFast),
          DECLARE_SET_FIELD(t_CheckIndex, infoStream),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex__methods_[] = {
          DECLARE_METHOD(t_CheckIndex, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, checkIndex, METH_VARARGS),
          DECLARE_METHOD(t_CheckIndex, fixIndex, METH_O),
          DECLARE_METHOD(t_CheckIndex, getCrossCheckTermVectors, METH_NOARGS),
          DECLARE_METHOD(t_CheckIndex, getFailFast, METH_NOARGS),
          DECLARE_METHOD(t_CheckIndex, main, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, setCrossCheckTermVectors, METH_O),
          DECLARE_METHOD(t_CheckIndex, setFailFast, METH_O),
          DECLARE_METHOD(t_CheckIndex, setInfoStream, METH_VARARGS),
          DECLARE_METHOD(t_CheckIndex, testDocValues, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, testFieldNorms, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, testPostings, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, testStoredFields, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, testTermVectors, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CheckIndex, t_CheckIndex, ::java::lang::Object, CheckIndex, t_CheckIndex_init_, 0, 0, t_CheckIndex__fields_, 0, 0);

        void t_CheckIndex::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex), module, "CheckIndex", 0);
          PyDict_SetItemString(PY_TYPE(CheckIndex).tp_dict, "Status", make_descriptor(&PY_TYPE(CheckIndex$Status)));
        }

        void t_CheckIndex::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CheckIndex).tp_dict, "class_", make_descriptor(CheckIndex::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CheckIndex).tp_dict, "wrapfn_", make_descriptor(t_CheckIndex::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CheckIndex).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex::initializeClass, 1)))
            return NULL;
          return t_CheckIndex::wrap_Object(CheckIndex(((t_CheckIndex *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CheckIndex_init_(t_CheckIndex *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          CheckIndex object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            INT_CALL(object = CheckIndex(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CheckIndex_checkIndex(t_CheckIndex *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::org::apache::lucene::index::CheckIndex$Status result((jobject) NULL);
              OBJ_CALL(result = self->object.checkIndex());
              return ::org::apache::lucene::index::t_CheckIndex$Status::wrap_Object(result);
            }
            break;
           case 1:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::CheckIndex$Status result((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(result = self->object.checkIndex(a0));
                return ::org::apache::lucene::index::t_CheckIndex$Status::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "checkIndex", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_fixIndex(t_CheckIndex *self, PyObject *arg)
        {
          ::org::apache::lucene::index::CheckIndex$Status a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status::initializeClass, &a0))
          {
            OBJ_CALL(self->object.fixIndex(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "fixIndex", arg);
          return NULL;
        }

        static PyObject *t_CheckIndex_getCrossCheckTermVectors(t_CheckIndex *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getCrossCheckTermVectors());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_CheckIndex_getFailFast(t_CheckIndex *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getFailFast());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_CheckIndex_main(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::java::lang::String > a0((jobject) NULL);

          if (!parseArg(arg, "[s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::CheckIndex::main(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "main", arg);
          return NULL;
        }

        static PyObject *t_CheckIndex_setCrossCheckTermVectors(t_CheckIndex *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setCrossCheckTermVectors(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCrossCheckTermVectors", arg);
          return NULL;
        }

        static PyObject *t_CheckIndex_setFailFast(t_CheckIndex *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setFailFast(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setFailFast", arg);
          return NULL;
        }

        static PyObject *t_CheckIndex_setInfoStream(t_CheckIndex *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::PrintStream a0((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::PrintStream::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setInfoStream(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::java::io::PrintStream a0((jobject) NULL);
              jboolean a1;

              if (!parseArgs(args, "kZ", ::java::io::PrintStream::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.setInfoStream(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "setInfoStream", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_testDocValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::io::PrintStream a1((jobject) NULL);
          jboolean a2;
          ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus result((jobject) NULL);

          if (!parseArgs(args, "kkZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testDocValues(a0, a1, a2));
            return ::org::apache::lucene::index::t_CheckIndex$Status$DocValuesStatus::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "testDocValues", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_testFieldNorms(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::io::PrintStream a1((jobject) NULL);
          jboolean a2;
          ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus result((jobject) NULL);

          if (!parseArgs(args, "kkZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testFieldNorms(a0, a1, a2));
            return ::org::apache::lucene::index::t_CheckIndex$Status$FieldNormStatus::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "testFieldNorms", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_testPostings(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::io::PrintStream a1((jobject) NULL);
              ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testPostings(a0, a1));
                return ::org::apache::lucene::index::t_CheckIndex$Status$TermIndexStatus::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::io::PrintStream a1((jobject) NULL);
              jboolean a2;
              jboolean a3;
              ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus result((jobject) NULL);

              if (!parseArgs(args, "kkZZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testPostings(a0, a1, a2, a3));
                return ::org::apache::lucene::index::t_CheckIndex$Status$TermIndexStatus::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "testPostings", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_testStoredFields(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::io::PrintStream a1((jobject) NULL);
          jboolean a2;
          ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus result((jobject) NULL);

          if (!parseArgs(args, "kkZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testStoredFields(a0, a1, a2));
            return ::org::apache::lucene::index::t_CheckIndex$Status$StoredFieldStatus::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "testStoredFields", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_testTermVectors(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::io::PrintStream a1((jobject) NULL);
              ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testTermVectors(a0, a1));
                return ::org::apache::lucene::index::t_CheckIndex$Status$TermVectorStatus::wrap_Object(result);
              }
            }
            break;
           case 5:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::io::PrintStream a1((jobject) NULL);
              jboolean a2;
              jboolean a3;
              jboolean a4;
              ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus result((jobject) NULL);

              if (!parseArgs(args, "kkZZZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testTermVectors(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::index::t_CheckIndex$Status$TermVectorStatus::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "testTermVectors", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_get__crossCheckTermVectors(t_CheckIndex *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getCrossCheckTermVectors());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex_set__crossCheckTermVectors(t_CheckIndex *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setCrossCheckTermVectors(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "crossCheckTermVectors", arg);
          return -1;
        }

        static PyObject *t_CheckIndex_get__failFast(t_CheckIndex *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getFailFast());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex_set__failFast(t_CheckIndex *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setFailFast(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "failFast", arg);
          return -1;
        }

        static int t_CheckIndex_set__infoStream(t_CheckIndex *self, PyObject *arg, void *data)
        {
          {
            ::java::io::PrintStream value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
            {
              INT_CALL(self->object.setInfoStream(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "infoStream", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/io/IOException.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *Lock::class$ = NULL;
        jmethodID *Lock::mids$ = NULL;
        bool Lock::live$ = false;
        jlong Lock::LOCK_OBTAIN_WAIT_FOREVER = (jlong) 0;
        jlong Lock::LOCK_POLL_INTERVAL = (jlong) 0;

        jclass Lock::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/Lock");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_isLocked_54c6a16a] = env->getMethodID(cls, "isLocked", "()Z");
            mids$[mid_obtain_54c6a16a] = env->getMethodID(cls, "obtain", "()Z");
            mids$[mid_obtain_0ee6df23] = env->getMethodID(cls, "obtain", "(J)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            LOCK_OBTAIN_WAIT_FOREVER = env->getStaticLongField(cls, "LOCK_OBTAIN_WAIT_FOREVER");
            LOCK_POLL_INTERVAL = env->getStaticLongField(cls, "LOCK_POLL_INTERVAL");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Lock::Lock() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void Lock::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jboolean Lock::isLocked() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isLocked_54c6a16a]);
        }

        jboolean Lock::obtain() const
        {
          return env->callBooleanMethod(this$, mids$[mid_obtain_54c6a16a]);
        }

        jboolean Lock::obtain(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_obtain_0ee6df23], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/store/Lock$With.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_Lock_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Lock_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Lock_init_(t_Lock *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Lock_close(t_Lock *self);
        static PyObject *t_Lock_isLocked(t_Lock *self);
        static PyObject *t_Lock_obtain(t_Lock *self, PyObject *args);
        static PyObject *t_Lock_get__locked(t_Lock *self, void *data);
        static PyGetSetDef t_Lock__fields_[] = {
          DECLARE_GET_FIELD(t_Lock, locked),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Lock__methods_[] = {
          DECLARE_METHOD(t_Lock, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Lock, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Lock, close, METH_NOARGS),
          DECLARE_METHOD(t_Lock, isLocked, METH_NOARGS),
          DECLARE_METHOD(t_Lock, obtain, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Lock, t_Lock, ::java::lang::Object, Lock, t_Lock_init_, 0, 0, t_Lock__fields_, 0, 0);

        void t_Lock::install(PyObject *module)
        {
          installType(&PY_TYPE(Lock), module, "Lock", 0);
          PyDict_SetItemString(PY_TYPE(Lock).tp_dict, "With", make_descriptor(&PY_TYPE(Lock$With)));
        }

        void t_Lock::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Lock).tp_dict, "class_", make_descriptor(Lock::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Lock).tp_dict, "wrapfn_", make_descriptor(t_Lock::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Lock).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Lock::initializeClass);
          PyDict_SetItemString(PY_TYPE(Lock).tp_dict, "LOCK_OBTAIN_WAIT_FOREVER", make_descriptor(Lock::LOCK_OBTAIN_WAIT_FOREVER));
          PyDict_SetItemString(PY_TYPE(Lock).tp_dict, "LOCK_POLL_INTERVAL", make_descriptor(Lock::LOCK_POLL_INTERVAL));
        }

        static PyObject *t_Lock_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Lock::initializeClass, 1)))
            return NULL;
          return t_Lock::wrap_Object(Lock(((t_Lock *) arg)->object.this$));
        }
        static PyObject *t_Lock_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Lock::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Lock_init_(t_Lock *self, PyObject *args, PyObject *kwds)
        {
          Lock object((jobject) NULL);

          INT_CALL(object = Lock());
          self->object = object;

          return 0;
        }

        static PyObject *t_Lock_close(t_Lock *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_Lock_isLocked(t_Lock *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isLocked());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Lock_obtain(t_Lock *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jboolean result;
              OBJ_CALL(result = self->object.obtain());
              Py_RETURN_BOOL(result);
            }
            break;
           case 1:
            {
              jlong a0;
              jboolean result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.obtain(a0));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "obtain", args);
          return NULL;
        }

        static PyObject *t_Lock_get__locked(t_Lock *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isLocked());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/KeywordAttributeImpl.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/tokenattributes/KeywordAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *KeywordAttributeImpl::class$ = NULL;
          jmethodID *KeywordAttributeImpl::mids$ = NULL;
          bool KeywordAttributeImpl::live$ = false;

          jclass KeywordAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/KeywordAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_isKeyword_54c6a16a] = env->getMethodID(cls, "isKeyword", "()Z");
              mids$[mid_setKeyword_bb0c767f] = env->getMethodID(cls, "setKeyword", "(Z)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordAttributeImpl::KeywordAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void KeywordAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          void KeywordAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jboolean KeywordAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint KeywordAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jboolean KeywordAttributeImpl::isKeyword() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isKeyword_54c6a16a]);
          }

          void KeywordAttributeImpl::setKeyword(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setKeyword_bb0c767f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_KeywordAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordAttributeImpl_init_(t_KeywordAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeywordAttributeImpl_clear(t_KeywordAttributeImpl *self, PyObject *args);
          static PyObject *t_KeywordAttributeImpl_copyTo(t_KeywordAttributeImpl *self, PyObject *args);
          static PyObject *t_KeywordAttributeImpl_equals(t_KeywordAttributeImpl *self, PyObject *args);
          static PyObject *t_KeywordAttributeImpl_hashCode(t_KeywordAttributeImpl *self, PyObject *args);
          static PyObject *t_KeywordAttributeImpl_isKeyword(t_KeywordAttributeImpl *self);
          static PyObject *t_KeywordAttributeImpl_setKeyword(t_KeywordAttributeImpl *self, PyObject *arg);
          static PyObject *t_KeywordAttributeImpl_get__keyword(t_KeywordAttributeImpl *self, void *data);
          static int t_KeywordAttributeImpl_set__keyword(t_KeywordAttributeImpl *self, PyObject *arg, void *data);
          static PyGetSetDef t_KeywordAttributeImpl__fields_[] = {
            DECLARE_GETSET_FIELD(t_KeywordAttributeImpl, keyword),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_KeywordAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_KeywordAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_KeywordAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_KeywordAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_KeywordAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_KeywordAttributeImpl, isKeyword, METH_NOARGS),
            DECLARE_METHOD(t_KeywordAttributeImpl, setKeyword, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordAttributeImpl, t_KeywordAttributeImpl, ::org::apache::lucene::util::AttributeImpl, KeywordAttributeImpl, t_KeywordAttributeImpl_init_, 0, 0, t_KeywordAttributeImpl__fields_, 0, 0);

          void t_KeywordAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordAttributeImpl), module, "KeywordAttributeImpl", 0);
          }

          void t_KeywordAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordAttributeImpl).tp_dict, "class_", make_descriptor(KeywordAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_KeywordAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeywordAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_KeywordAttributeImpl::wrap_Object(KeywordAttributeImpl(((t_KeywordAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_KeywordAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordAttributeImpl_init_(t_KeywordAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            KeywordAttributeImpl object((jobject) NULL);

            INT_CALL(object = KeywordAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_KeywordAttributeImpl_clear(t_KeywordAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(KeywordAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_KeywordAttributeImpl_copyTo(t_KeywordAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(KeywordAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_KeywordAttributeImpl_equals(t_KeywordAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(KeywordAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_KeywordAttributeImpl_hashCode(t_KeywordAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(KeywordAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_KeywordAttributeImpl_isKeyword(t_KeywordAttributeImpl *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isKeyword());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_KeywordAttributeImpl_setKeyword(t_KeywordAttributeImpl *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setKeyword(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setKeyword", arg);
            return NULL;
          }

          static PyObject *t_KeywordAttributeImpl_get__keyword(t_KeywordAttributeImpl *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isKeyword());
            Py_RETURN_BOOL(value);
          }
          static int t_KeywordAttributeImpl_set__keyword(t_KeywordAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setKeyword(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "keyword", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/ValueSourceScorer.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {

          ::java::lang::Class *FunctionValues::class$ = NULL;
          jmethodID *FunctionValues::mids$ = NULL;
          bool FunctionValues::live$ = false;

          jclass FunctionValues::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/FunctionValues");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_boolVal_39c7bd30] = env->getMethodID(cls, "boolVal", "(I)Z");
              mids$[mid_byteVal_39c7bd28] = env->getMethodID(cls, "byteVal", "(I)B");
              mids$[mid_byteVal_5d2e3265] = env->getMethodID(cls, "byteVal", "(I[B)V");
              mids$[mid_bytesVal_b7fef192] = env->getMethodID(cls, "bytesVal", "(ILorg/apache/lucene/util/BytesRef;)Z");
              mids$[mid_doubleVal_39c7bd2e] = env->getMethodID(cls, "doubleVal", "(I)D");
              mids$[mid_doubleVal_08239127] = env->getMethodID(cls, "doubleVal", "(I[D)V");
              mids$[mid_exists_39c7bd30] = env->getMethodID(cls, "exists", "(I)Z");
              mids$[mid_explain_ae608291] = env->getMethodID(cls, "explain", "(I)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_floatVal_39c7bd2c] = env->getMethodID(cls, "floatVal", "(I)F");
              mids$[mid_floatVal_b130a809] = env->getMethodID(cls, "floatVal", "(I[F)V");
              mids$[mid_getRangeScorer_d201bc96] = env->getMethodID(cls, "getRangeScorer", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/queries/function/ValueSourceScorer;");
              mids$[mid_getScorer_fca96384] = env->getMethodID(cls, "getScorer", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/queries/function/ValueSourceScorer;");
              mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
              mids$[mid_intVal_39c7bd23] = env->getMethodID(cls, "intVal", "(I)I");
              mids$[mid_intVal_dd2db71e] = env->getMethodID(cls, "intVal", "(I[I)V");
              mids$[mid_longVal_39c7bd20] = env->getMethodID(cls, "longVal", "(I)J");
              mids$[mid_longVal_b24cd90d] = env->getMethodID(cls, "longVal", "(I[J)V");
              mids$[mid_numOrd_54c6a179] = env->getMethodID(cls, "numOrd", "()I");
              mids$[mid_objectVal_29be6a55] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
              mids$[mid_ordVal_39c7bd23] = env->getMethodID(cls, "ordVal", "(I)I");
              mids$[mid_shortVal_39c7bd39] = env->getMethodID(cls, "shortVal", "(I)S");
              mids$[mid_shortVal_df2a0648] = env->getMethodID(cls, "shortVal", "(I[S)V");
              mids$[mid_strVal_141401b3] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
              mids$[mid_strVal_2f05a56a] = env->getMethodID(cls, "strVal", "(I[Ljava/lang/String;)V");
              mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FunctionValues::FunctionValues() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean FunctionValues::boolVal(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_boolVal_39c7bd30], a0);
          }

          jbyte FunctionValues::byteVal(jint a0) const
          {
            return env->callByteMethod(this$, mids$[mid_byteVal_39c7bd28], a0);
          }

          void FunctionValues::byteVal(jint a0, const JArray< jbyte > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_byteVal_5d2e3265], a0, a1.this$);
          }

          jboolean FunctionValues::bytesVal(jint a0, const ::org::apache::lucene::util::BytesRef & a1) const
          {
            return env->callBooleanMethod(this$, mids$[mid_bytesVal_b7fef192], a0, a1.this$);
          }

          jdouble FunctionValues::doubleVal(jint a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_doubleVal_39c7bd2e], a0);
          }

          void FunctionValues::doubleVal(jint a0, const JArray< jdouble > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_doubleVal_08239127], a0, a1.this$);
          }

          jboolean FunctionValues::exists(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_exists_39c7bd30], a0);
          }

          ::org::apache::lucene::search::Explanation FunctionValues::explain(jint a0) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_ae608291], a0));
          }

          jfloat FunctionValues::floatVal(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_floatVal_39c7bd2c], a0);
          }

          void FunctionValues::floatVal(jint a0, const JArray< jfloat > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_floatVal_b130a809], a0, a1.this$);
          }

          ::org::apache::lucene::queries::function::ValueSourceScorer FunctionValues::getRangeScorer(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4) const
          {
            return ::org::apache::lucene::queries::function::ValueSourceScorer(env->callObjectMethod(this$, mids$[mid_getRangeScorer_d201bc96], a0.this$, a1.this$, a2.this$, a3, a4));
          }

          ::org::apache::lucene::queries::function::ValueSourceScorer FunctionValues::getScorer(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::queries::function::ValueSourceScorer(env->callObjectMethod(this$, mids$[mid_getScorer_fca96384], a0.this$));
          }

          ::org::apache::lucene::queries::function::FunctionValues$ValueFiller FunctionValues::getValueFiller() const
          {
            return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
          }

          jint FunctionValues::intVal(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_intVal_39c7bd23], a0);
          }

          void FunctionValues::intVal(jint a0, const JArray< jint > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_intVal_dd2db71e], a0, a1.this$);
          }

          jlong FunctionValues::longVal(jint a0) const
          {
            return env->callLongMethod(this$, mids$[mid_longVal_39c7bd20], a0);
          }

          void FunctionValues::longVal(jint a0, const JArray< jlong > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_longVal_b24cd90d], a0, a1.this$);
          }

          jint FunctionValues::numOrd() const
          {
            return env->callIntMethod(this$, mids$[mid_numOrd_54c6a179]);
          }

          ::java::lang::Object FunctionValues::objectVal(jint a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_29be6a55], a0));
          }

          jint FunctionValues::ordVal(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_ordVal_39c7bd23], a0);
          }

          jshort FunctionValues::shortVal(jint a0) const
          {
            return env->callShortMethod(this$, mids$[mid_shortVal_39c7bd39], a0);
          }

          void FunctionValues::shortVal(jint a0, const JArray< jshort > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_shortVal_df2a0648], a0, a1.this$);
          }

          ::java::lang::String FunctionValues::strVal(jint a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_141401b3], a0));
          }

          void FunctionValues::strVal(jint a0, const JArray< ::java::lang::String > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_strVal_2f05a56a], a0, a1.this$);
          }

          ::java::lang::String FunctionValues::toString(jint a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          static PyObject *t_FunctionValues_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FunctionValues_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FunctionValues_init_(t_FunctionValues *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FunctionValues_boolVal(t_FunctionValues *self, PyObject *arg);
          static PyObject *t_FunctionValues_byteVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_bytesVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_doubleVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_exists(t_FunctionValues *self, PyObject *arg);
          static PyObject *t_FunctionValues_explain(t_FunctionValues *self, PyObject *arg);
          static PyObject *t_FunctionValues_floatVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_getRangeScorer(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_getScorer(t_FunctionValues *self, PyObject *arg);
          static PyObject *t_FunctionValues_getValueFiller(t_FunctionValues *self);
          static PyObject *t_FunctionValues_intVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_longVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_numOrd(t_FunctionValues *self);
          static PyObject *t_FunctionValues_objectVal(t_FunctionValues *self, PyObject *arg);
          static PyObject *t_FunctionValues_ordVal(t_FunctionValues *self, PyObject *arg);
          static PyObject *t_FunctionValues_shortVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_strVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_toString(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_get__valueFiller(t_FunctionValues *self, void *data);
          static PyGetSetDef t_FunctionValues__fields_[] = {
            DECLARE_GET_FIELD(t_FunctionValues, valueFiller),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FunctionValues__methods_[] = {
            DECLARE_METHOD(t_FunctionValues, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionValues, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionValues, boolVal, METH_O),
            DECLARE_METHOD(t_FunctionValues, byteVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, bytesVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, doubleVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, exists, METH_O),
            DECLARE_METHOD(t_FunctionValues, explain, METH_O),
            DECLARE_METHOD(t_FunctionValues, floatVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, getRangeScorer, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, getScorer, METH_O),
            DECLARE_METHOD(t_FunctionValues, getValueFiller, METH_NOARGS),
            DECLARE_METHOD(t_FunctionValues, intVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, longVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, numOrd, METH_NOARGS),
            DECLARE_METHOD(t_FunctionValues, objectVal, METH_O),
            DECLARE_METHOD(t_FunctionValues, ordVal, METH_O),
            DECLARE_METHOD(t_FunctionValues, shortVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, strVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FunctionValues, t_FunctionValues, ::java::lang::Object, FunctionValues, t_FunctionValues_init_, 0, 0, t_FunctionValues__fields_, 0, 0);

          void t_FunctionValues::install(PyObject *module)
          {
            installType(&PY_TYPE(FunctionValues), module, "FunctionValues", 0);
            PyDict_SetItemString(PY_TYPE(FunctionValues).tp_dict, "ValueFiller", make_descriptor(&PY_TYPE(FunctionValues$ValueFiller)));
          }

          void t_FunctionValues::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FunctionValues).tp_dict, "class_", make_descriptor(FunctionValues::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FunctionValues).tp_dict, "wrapfn_", make_descriptor(t_FunctionValues::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FunctionValues).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FunctionValues_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FunctionValues::initializeClass, 1)))
              return NULL;
            return t_FunctionValues::wrap_Object(FunctionValues(((t_FunctionValues *) arg)->object.this$));
          }
          static PyObject *t_FunctionValues_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FunctionValues::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FunctionValues_init_(t_FunctionValues *self, PyObject *args, PyObject *kwds)
          {
            FunctionValues object((jobject) NULL);

            INT_CALL(object = FunctionValues());
            self->object = object;

            return 0;
          }

          static PyObject *t_FunctionValues_boolVal(t_FunctionValues *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.boolVal(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "boolVal", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues_byteVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jbyte result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.byteVal(a0));
                  return PyInt_FromLong((long) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< jbyte > a1((jobject) NULL);

                if (!parseArgs(args, "I[B", &a0, &a1))
                {
                  OBJ_CALL(self->object.byteVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "byteVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_bytesVal(t_FunctionValues *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "Ik", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.bytesVal(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "bytesVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_doubleVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jdouble result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.doubleVal(a0));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< jdouble > a1((jobject) NULL);

                if (!parseArgs(args, "I[D", &a0, &a1))
                {
                  OBJ_CALL(self->object.doubleVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "doubleVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_exists(t_FunctionValues *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.exists(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "exists", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues_explain(t_FunctionValues *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.explain(a0));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues_floatVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jfloat result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.floatVal(a0));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< jfloat > a1((jobject) NULL);

                if (!parseArgs(args, "I[F", &a0, &a1))
                {
                  OBJ_CALL(self->object.floatVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "floatVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_getRangeScorer(t_FunctionValues *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jboolean a3;
            jboolean a4;
            ::org::apache::lucene::queries::function::ValueSourceScorer result((jobject) NULL);

            if (!parseArgs(args, "kssZZ", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.getRangeScorer(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::queries::function::t_ValueSourceScorer::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getRangeScorer", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_getScorer(t_FunctionValues *self, PyObject *arg)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::queries::function::ValueSourceScorer result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getScorer(a0));
              return ::org::apache::lucene::queries::function::t_ValueSourceScorer::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getScorer", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues_getValueFiller(t_FunctionValues *self)
          {
            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);
            OBJ_CALL(result = self->object.getValueFiller());
            return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
          }

          static PyObject *t_FunctionValues_intVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jint result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.intVal(a0));
                  return PyInt_FromLong((long) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< jint > a1((jobject) NULL);

                if (!parseArgs(args, "I[I", &a0, &a1))
                {
                  OBJ_CALL(self->object.intVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "intVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_longVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jlong result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.longVal(a0));
                  return PyLong_FromLongLong((PY_LONG_LONG) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< jlong > a1((jobject) NULL);

                if (!parseArgs(args, "I[J", &a0, &a1))
                {
                  OBJ_CALL(self->object.longVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "longVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_numOrd(t_FunctionValues *self)
          {
            jint result;
            OBJ_CALL(result = self->object.numOrd());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FunctionValues_objectVal(t_FunctionValues *self, PyObject *arg)
          {
            jint a0;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.objectVal(a0));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "objectVal", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues_ordVal(t_FunctionValues *self, PyObject *arg)
          {
            jint a0;
            jint result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.ordVal(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "ordVal", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues_shortVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jshort result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.shortVal(a0));
                  return PyInt_FromLong((long) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< jshort > a1((jobject) NULL);

                if (!parseArgs(args, "I[S", &a0, &a1))
                {
                  OBJ_CALL(self->object.shortVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "shortVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_strVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.strVal(a0));
                  return j2p(result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< ::java::lang::String > a1((jobject) NULL);

                if (!parseArgs(args, "I[s", &a0, &a1))
                {
                  OBJ_CALL(self->object.strVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "strVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_toString(t_FunctionValues *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FunctionValues), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FunctionValues_get__valueFiller(t_FunctionValues *self, void *data)
          {
            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
            OBJ_CALL(value = self->object.getValueFiller());
            return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/DisjunctionMaxQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *DisjunctionMaxQueryBuilder::class$ = NULL;
            jmethodID *DisjunctionMaxQueryBuilder::mids$ = NULL;
            bool DisjunctionMaxQueryBuilder::live$ = false;

            jclass DisjunctionMaxQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/DisjunctionMaxQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_6566a539] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/QueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DisjunctionMaxQueryBuilder::DisjunctionMaxQueryBuilder(const ::org::apache::lucene::queryparser::xml::QueryBuilder & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6566a539, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_DisjunctionMaxQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DisjunctionMaxQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DisjunctionMaxQueryBuilder_init_(t_DisjunctionMaxQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_DisjunctionMaxQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_DisjunctionMaxQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DisjunctionMaxQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DisjunctionMaxQueryBuilder, t_DisjunctionMaxQueryBuilder, ::java::lang::Object, DisjunctionMaxQueryBuilder, t_DisjunctionMaxQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_DisjunctionMaxQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(DisjunctionMaxQueryBuilder), module, "DisjunctionMaxQueryBuilder", 0);
            }

            void t_DisjunctionMaxQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DisjunctionMaxQueryBuilder).tp_dict, "class_", make_descriptor(DisjunctionMaxQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DisjunctionMaxQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_DisjunctionMaxQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DisjunctionMaxQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DisjunctionMaxQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DisjunctionMaxQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_DisjunctionMaxQueryBuilder::wrap_Object(DisjunctionMaxQueryBuilder(((t_DisjunctionMaxQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_DisjunctionMaxQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DisjunctionMaxQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DisjunctionMaxQueryBuilder_init_(t_DisjunctionMaxQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::QueryBuilder a0((jobject) NULL);
              DisjunctionMaxQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::QueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = DisjunctionMaxQueryBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hu/HungarianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {

          ::java::lang::Class *HungarianAnalyzer::class$ = NULL;
          jmethodID *HungarianAnalyzer::mids$ = NULL;
          bool HungarianAnalyzer::live$ = false;
          ::java::lang::String *HungarianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass HungarianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hu/HungarianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6d1f9881] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_3ea629c6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HungarianAnalyzer::HungarianAnalyzer() : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          HungarianAnalyzer::HungarianAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_6d1f9881, a0.this$)) {}

          HungarianAnalyzer::HungarianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          HungarianAnalyzer::HungarianAnalyzer(const ::org::apache::lucene::analysis::util::CharArraySet & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_3ea629c6, a0.this$, a1.this$)) {}

          HungarianAnalyzer::HungarianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          HungarianAnalyzer::HungarianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet HungarianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {
          static PyObject *t_HungarianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HungarianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HungarianAnalyzer_init_(t_HungarianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HungarianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_HungarianAnalyzer_get__defaultStopSet(t_HungarianAnalyzer *self, void *data);
          static PyGetSetDef t_HungarianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_HungarianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_HungarianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_HungarianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HungarianAnalyzer, t_HungarianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, HungarianAnalyzer, t_HungarianAnalyzer_init_, 0, 0, t_HungarianAnalyzer__fields_, 0, 0);

          void t_HungarianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(HungarianAnalyzer), module, "HungarianAnalyzer", 0);
          }

          void t_HungarianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HungarianAnalyzer).tp_dict, "class_", make_descriptor(HungarianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HungarianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_HungarianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HungarianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(HungarianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(HungarianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*HungarianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_HungarianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HungarianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_HungarianAnalyzer::wrap_Object(HungarianAnalyzer(((t_HungarianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_HungarianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HungarianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HungarianAnalyzer_init_(t_HungarianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                HungarianAnalyzer object((jobject) NULL);

                INT_CALL(object = HungarianAnalyzer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                HungarianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = HungarianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                HungarianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
                {
                  INT_CALL(object = HungarianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::util::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                HungarianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = HungarianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                HungarianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = HungarianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                HungarianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = HungarianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HungarianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::hu::HungarianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_HungarianAnalyzer_get__defaultStopSet(t_HungarianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter.h"
#include "org/apache/lucene/analysis/commongrams/CommonGramsFilter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {

          ::java::lang::Class *CommonGramsQueryFilter::class$ = NULL;
          jmethodID *CommonGramsQueryFilter::mids$ = NULL;
          bool CommonGramsQueryFilter::live$ = false;

          jclass CommonGramsQueryFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_625c9356] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/commongrams/CommonGramsFilter;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_isGramType_54c6a16a] = env->getMethodID(cls, "isGramType", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CommonGramsQueryFilter::CommonGramsQueryFilter(const ::org::apache::lucene::analysis::commongrams::CommonGramsFilter & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_625c9356, a0.this$)) {}

          jboolean CommonGramsQueryFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          jboolean CommonGramsQueryFilter::isGramType() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isGramType_54c6a16a]);
          }

          void CommonGramsQueryFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {
          static PyObject *t_CommonGramsQueryFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CommonGramsQueryFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CommonGramsQueryFilter_init_(t_CommonGramsQueryFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CommonGramsQueryFilter_incrementToken(t_CommonGramsQueryFilter *self, PyObject *args);
          static PyObject *t_CommonGramsQueryFilter_isGramType(t_CommonGramsQueryFilter *self);
          static PyObject *t_CommonGramsQueryFilter_reset(t_CommonGramsQueryFilter *self, PyObject *args);
          static PyObject *t_CommonGramsQueryFilter_get__gramType(t_CommonGramsQueryFilter *self, void *data);
          static PyGetSetDef t_CommonGramsQueryFilter__fields_[] = {
            DECLARE_GET_FIELD(t_CommonGramsQueryFilter, gramType),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CommonGramsQueryFilter__methods_[] = {
            DECLARE_METHOD(t_CommonGramsQueryFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsQueryFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsQueryFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_CommonGramsQueryFilter, isGramType, METH_NOARGS),
            DECLARE_METHOD(t_CommonGramsQueryFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CommonGramsQueryFilter, t_CommonGramsQueryFilter, ::org::apache::lucene::analysis::TokenFilter, CommonGramsQueryFilter, t_CommonGramsQueryFilter_init_, 0, 0, t_CommonGramsQueryFilter__fields_, 0, 0);

          void t_CommonGramsQueryFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CommonGramsQueryFilter), module, "CommonGramsQueryFilter", 0);
          }

          void t_CommonGramsQueryFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CommonGramsQueryFilter).tp_dict, "class_", make_descriptor(CommonGramsQueryFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CommonGramsQueryFilter).tp_dict, "wrapfn_", make_descriptor(t_CommonGramsQueryFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CommonGramsQueryFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CommonGramsQueryFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CommonGramsQueryFilter::initializeClass, 1)))
              return NULL;
            return t_CommonGramsQueryFilter::wrap_Object(CommonGramsQueryFilter(((t_CommonGramsQueryFilter *) arg)->object.this$));
          }
          static PyObject *t_CommonGramsQueryFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CommonGramsQueryFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CommonGramsQueryFilter_init_(t_CommonGramsQueryFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::commongrams::CommonGramsFilter a0((jobject) NULL);
            CommonGramsQueryFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::commongrams::CommonGramsFilter::initializeClass, &a0))
            {
              INT_CALL(object = CommonGramsQueryFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CommonGramsQueryFilter_incrementToken(t_CommonGramsQueryFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CommonGramsQueryFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_CommonGramsQueryFilter_isGramType(t_CommonGramsQueryFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isGramType());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_CommonGramsQueryFilter_reset(t_CommonGramsQueryFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CommonGramsQueryFilter), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_CommonGramsQueryFilter_get__gramType(t_CommonGramsQueryFilter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isGramType());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap$Builder.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/CharsRefBuilder.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *SynonymMap$Builder::class$ = NULL;
          jmethodID *SynonymMap$Builder::mids$ = NULL;
          bool SynonymMap$Builder::live$ = false;

          jclass SynonymMap$Builder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/SynonymMap$Builder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
              mids$[mid_add_2c2b250f] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/CharsRef;Lorg/apache/lucene/util/CharsRef;Z)V");
              mids$[mid_build_6def3d42] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/analysis/synonym/SynonymMap;");
              mids$[mid_join_cfe8f22d] = env->getStaticMethodID(cls, "join", "([Ljava/lang/String;Lorg/apache/lucene/util/CharsRefBuilder;)Lorg/apache/lucene/util/CharsRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SynonymMap$Builder::SynonymMap$Builder(jboolean a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

          void SynonymMap$Builder::add(const ::org::apache::lucene::util::CharsRef & a0, const ::org::apache::lucene::util::CharsRef & a1, jboolean a2) const
          {
            env->callVoidMethod(this$, mids$[mid_add_2c2b250f], a0.this$, a1.this$, a2);
          }

          ::org::apache::lucene::analysis::synonym::SynonymMap SynonymMap$Builder::build() const
          {
            return ::org::apache::lucene::analysis::synonym::SynonymMap(env->callObjectMethod(this$, mids$[mid_build_6def3d42]));
          }

          ::org::apache::lucene::util::CharsRef SynonymMap$Builder::join(const JArray< ::java::lang::String > & a0, const ::org::apache::lucene::util::CharsRefBuilder & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::CharsRef(env->callStaticObjectMethod(cls, mids$[mid_join_cfe8f22d], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_SynonymMap$Builder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SynonymMap$Builder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SynonymMap$Builder_init_(t_SynonymMap$Builder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SynonymMap$Builder_add(t_SynonymMap$Builder *self, PyObject *args);
          static PyObject *t_SynonymMap$Builder_build(t_SynonymMap$Builder *self);
          static PyObject *t_SynonymMap$Builder_join(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_SynonymMap$Builder__methods_[] = {
            DECLARE_METHOD(t_SynonymMap$Builder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymMap$Builder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymMap$Builder, add, METH_VARARGS),
            DECLARE_METHOD(t_SynonymMap$Builder, build, METH_NOARGS),
            DECLARE_METHOD(t_SynonymMap$Builder, join, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SynonymMap$Builder, t_SynonymMap$Builder, ::java::lang::Object, SynonymMap$Builder, t_SynonymMap$Builder_init_, 0, 0, 0, 0, 0);

          void t_SynonymMap$Builder::install(PyObject *module)
          {
            installType(&PY_TYPE(SynonymMap$Builder), module, "SynonymMap$Builder", 0);
          }

          void t_SynonymMap$Builder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SynonymMap$Builder).tp_dict, "class_", make_descriptor(SynonymMap$Builder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SynonymMap$Builder).tp_dict, "wrapfn_", make_descriptor(t_SynonymMap$Builder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SynonymMap$Builder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SynonymMap$Builder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SynonymMap$Builder::initializeClass, 1)))
              return NULL;
            return t_SynonymMap$Builder::wrap_Object(SynonymMap$Builder(((t_SynonymMap$Builder *) arg)->object.this$));
          }
          static PyObject *t_SynonymMap$Builder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SynonymMap$Builder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SynonymMap$Builder_init_(t_SynonymMap$Builder *self, PyObject *args, PyObject *kwds)
          {
            jboolean a0;
            SynonymMap$Builder object((jobject) NULL);

            if (!parseArgs(args, "Z", &a0))
            {
              INT_CALL(object = SynonymMap$Builder(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SynonymMap$Builder_add(t_SynonymMap$Builder *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRef a1((jobject) NULL);
            jboolean a2;

            if (!parseArgs(args, "kkZ", ::org::apache::lucene::util::CharsRef::initializeClass, ::org::apache::lucene::util::CharsRef::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.add(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_SynonymMap$Builder_build(t_SynonymMap$Builder *self)
          {
            ::org::apache::lucene::analysis::synonym::SynonymMap result((jobject) NULL);
            OBJ_CALL(result = self->object.build());
            return ::org::apache::lucene::analysis::synonym::t_SynonymMap::wrap_Object(result);
          }

          static PyObject *t_SynonymMap$Builder_join(PyTypeObject *type, PyObject *args)
          {
            JArray< ::java::lang::String > a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRefBuilder a1((jobject) NULL);
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, "[sk", ::org::apache::lucene::util::CharsRefBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::synonym::SynonymMap$Builder::join(a0, a1));
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "join", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Lift.h"
#include "org/egothor/stemmer/Trie.h"
#include "java/util/List.h"
#include "org/egothor/stemmer/Row.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Lift::class$ = NULL;
      jmethodID *Lift::mids$ = NULL;
      bool Lift::live$ = false;

      jclass Lift::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Lift");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
          mids$[mid_liftUp_1357655d] = env->getMethodID(cls, "liftUp", "(Lorg/egothor/stemmer/Row;Ljava/util/List;)V");
          mids$[mid_optimize_c26c0475] = env->getMethodID(cls, "optimize", "(Lorg/egothor/stemmer/Trie;)Lorg/egothor/stemmer/Trie;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Lift::Lift(jboolean a0) : ::org::egothor::stemmer::Reduce(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

      void Lift::liftUp(const ::org::egothor::stemmer::Row & a0, const ::java::util::List & a1) const
      {
        env->callVoidMethod(this$, mids$[mid_liftUp_1357655d], a0.this$, a1.this$);
      }

      ::org::egothor::stemmer::Trie Lift::optimize(const ::org::egothor::stemmer::Trie & a0) const
      {
        return ::org::egothor::stemmer::Trie(env->callObjectMethod(this$, mids$[mid_optimize_c26c0475], a0.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Lift_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Lift_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Lift_init_(t_Lift *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Lift_liftUp(t_Lift *self, PyObject *args);
      static PyObject *t_Lift_optimize(t_Lift *self, PyObject *args);

      static PyMethodDef t_Lift__methods_[] = {
        DECLARE_METHOD(t_Lift, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Lift, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Lift, liftUp, METH_VARARGS),
        DECLARE_METHOD(t_Lift, optimize, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Lift, t_Lift, ::org::egothor::stemmer::Reduce, Lift, t_Lift_init_, 0, 0, 0, 0, 0);

      void t_Lift::install(PyObject *module)
      {
        installType(&PY_TYPE(Lift), module, "Lift", 0);
      }

      void t_Lift::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Lift).tp_dict, "class_", make_descriptor(Lift::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Lift).tp_dict, "wrapfn_", make_descriptor(t_Lift::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Lift).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Lift_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Lift::initializeClass, 1)))
          return NULL;
        return t_Lift::wrap_Object(Lift(((t_Lift *) arg)->object.this$));
      }
      static PyObject *t_Lift_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Lift::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Lift_init_(t_Lift *self, PyObject *args, PyObject *kwds)
      {
        jboolean a0;
        Lift object((jobject) NULL);

        if (!parseArgs(args, "Z", &a0))
        {
          INT_CALL(object = Lift(a0));
          self->object = object;
        }
        else
        {
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_Lift_liftUp(t_Lift *self, PyObject *args)
      {
        ::org::egothor::stemmer::Row a0((jobject) NULL);
        ::java::util::List a1((jobject) NULL);
        PyTypeObject **p1;

        if (!parseArgs(args, "kK", ::org::egothor::stemmer::Row::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
        {
          OBJ_CALL(self->object.liftUp(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "liftUp", args);
        return NULL;
      }

      static PyObject *t_Lift_optimize(t_Lift *self, PyObject *args)
      {
        ::org::egothor::stemmer::Trie a0((jobject) NULL);
        ::org::egothor::stemmer::Trie result((jobject) NULL);

        if (!parseArgs(args, "k", ::org::egothor::stemmer::Trie::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.optimize(a0));
          return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(Lift), (PyObject *) self, "optimize", args, 2);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/AbstractMap.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "java/util/Map$Entry.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *AbstractMap::class$ = NULL;
    jmethodID *AbstractMap::mids$ = NULL;
    bool AbstractMap::live$ = false;

    jclass AbstractMap::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/AbstractMap");

        mids$ = new jmethodID[max_mid];
        mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
        mids$[mid_containsKey_290588e2] = env->getMethodID(cls, "containsKey", "(Ljava/lang/Object;)Z");
        mids$[mid_containsValue_290588e2] = env->getMethodID(cls, "containsValue", "(Ljava/lang/Object;)Z");
        mids$[mid_entrySet_03e99967] = env->getMethodID(cls, "entrySet", "()Ljava/util/Set;");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_get_a932a95f] = env->getMethodID(cls, "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
        mids$[mid_keySet_03e99967] = env->getMethodID(cls, "keySet", "()Ljava/util/Set;");
        mids$[mid_put_537d5bdf] = env->getMethodID(cls, "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_putAll_4c9e2b1c] = env->getMethodID(cls, "putAll", "(Ljava/util/Map;)V");
        mids$[mid_remove_a932a95f] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_values_2d2d7de4] = env->getMethodID(cls, "values", "()Ljava/util/Collection;");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    void AbstractMap::clear() const
    {
      env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
    }

    jboolean AbstractMap::containsKey(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_containsKey_290588e2], a0.this$);
    }

    jboolean AbstractMap::containsValue(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_containsValue_290588e2], a0.this$);
    }

    ::java::util::Set AbstractMap::entrySet() const
    {
      return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_entrySet_03e99967]));
    }

    jboolean AbstractMap::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    ::java::lang::Object AbstractMap::get(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a932a95f], a0.this$));
    }

    jint AbstractMap::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jboolean AbstractMap::isEmpty() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
    }

    ::java::util::Set AbstractMap::keySet() const
    {
      return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_keySet_03e99967]));
    }

    ::java::lang::Object AbstractMap::put(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_537d5bdf], a0.this$, a1.this$));
    }

    void AbstractMap::putAll(const ::java::util::Map & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_putAll_4c9e2b1c], a0.this$);
    }

    ::java::lang::Object AbstractMap::remove(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_remove_a932a95f], a0.this$));
    }

    jint AbstractMap::size() const
    {
      return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
    }

    ::java::lang::String AbstractMap::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::util::Collection AbstractMap::values() const
    {
      return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_values_2d2d7de4]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_AbstractMap_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_AbstractMap_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_AbstractMap_of_(t_AbstractMap *self, PyObject *args);
    static PyObject *t_AbstractMap_clear(t_AbstractMap *self);
    static PyObject *t_AbstractMap_containsKey(t_AbstractMap *self, PyObject *arg);
    static PyObject *t_AbstractMap_containsValue(t_AbstractMap *self, PyObject *arg);
    static PyObject *t_AbstractMap_entrySet(t_AbstractMap *self);
    static PyObject *t_AbstractMap_equals(t_AbstractMap *self, PyObject *args);
    static PyObject *t_AbstractMap_get(t_AbstractMap *self, PyObject *arg);
    static PyObject *t_AbstractMap_hashCode(t_AbstractMap *self, PyObject *args);
    static PyObject *t_AbstractMap_isEmpty(t_AbstractMap *self);
    static PyObject *t_AbstractMap_keySet(t_AbstractMap *self);
    static PyObject *t_AbstractMap_put(t_AbstractMap *self, PyObject *args);
    static PyObject *t_AbstractMap_putAll(t_AbstractMap *self, PyObject *arg);
    static PyObject *t_AbstractMap_remove(t_AbstractMap *self, PyObject *arg);
    static PyObject *t_AbstractMap_size(t_AbstractMap *self);
    static PyObject *t_AbstractMap_toString(t_AbstractMap *self, PyObject *args);
    static PyObject *t_AbstractMap_values(t_AbstractMap *self);
    static PyObject *t_AbstractMap_get__empty(t_AbstractMap *self, void *data);
    static PyObject *t_AbstractMap_get__parameters_(t_AbstractMap *self, void *data);
    static PyGetSetDef t_AbstractMap__fields_[] = {
      DECLARE_GET_FIELD(t_AbstractMap, empty),
      DECLARE_GET_FIELD(t_AbstractMap, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_AbstractMap__methods_[] = {
      DECLARE_METHOD(t_AbstractMap, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_AbstractMap, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_AbstractMap, of_, METH_VARARGS),
      DECLARE_METHOD(t_AbstractMap, clear, METH_NOARGS),
      DECLARE_METHOD(t_AbstractMap, containsKey, METH_O),
      DECLARE_METHOD(t_AbstractMap, containsValue, METH_O),
      DECLARE_METHOD(t_AbstractMap, entrySet, METH_NOARGS),
      DECLARE_METHOD(t_AbstractMap, equals, METH_VARARGS),
      DECLARE_METHOD(t_AbstractMap, get, METH_O),
      DECLARE_METHOD(t_AbstractMap, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_AbstractMap, isEmpty, METH_NOARGS),
      DECLARE_METHOD(t_AbstractMap, keySet, METH_NOARGS),
      DECLARE_METHOD(t_AbstractMap, put, METH_VARARGS),
      DECLARE_METHOD(t_AbstractMap, putAll, METH_O),
      DECLARE_METHOD(t_AbstractMap, remove, METH_O),
      DECLARE_METHOD(t_AbstractMap, size, METH_NOARGS),
      DECLARE_METHOD(t_AbstractMap, toString, METH_VARARGS),
      DECLARE_METHOD(t_AbstractMap, values, METH_NOARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(AbstractMap, t_AbstractMap, ::java::lang::Object, AbstractMap, abstract_init, 0, 0, t_AbstractMap__fields_, 0, 0);
    PyObject *t_AbstractMap::wrap_Object(const AbstractMap& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_AbstractMap::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_AbstractMap *self = (t_AbstractMap *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    PyObject *t_AbstractMap::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_AbstractMap::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_AbstractMap *self = (t_AbstractMap *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    void t_AbstractMap::install(PyObject *module)
    {
      installType(&PY_TYPE(AbstractMap), module, "AbstractMap", 0);
    }

    void t_AbstractMap::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(AbstractMap).tp_dict, "class_", make_descriptor(AbstractMap::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(AbstractMap).tp_dict, "wrapfn_", make_descriptor(t_AbstractMap::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(AbstractMap).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_AbstractMap_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, AbstractMap::initializeClass, 1)))
        return NULL;
      return t_AbstractMap::wrap_Object(AbstractMap(((t_AbstractMap *) arg)->object.this$));
    }
    static PyObject *t_AbstractMap_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, AbstractMap::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_AbstractMap_of_(t_AbstractMap *self, PyObject *args)
    {
      if (!parseArg(args, "T", 2, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_AbstractMap_clear(t_AbstractMap *self)
    {
      OBJ_CALL(self->object.clear());
      Py_RETURN_NONE;
    }

    static PyObject *t_AbstractMap_containsKey(t_AbstractMap *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.containsKey(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "containsKey", arg);
      return NULL;
    }

    static PyObject *t_AbstractMap_containsValue(t_AbstractMap *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.containsValue(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "containsValue", arg);
      return NULL;
    }

    static PyObject *t_AbstractMap_entrySet(t_AbstractMap *self)
    {
      ::java::util::Set result((jobject) NULL);
      OBJ_CALL(result = self->object.entrySet());
      return ::java::util::t_Set::wrap_Object(result);
    }

    static PyObject *t_AbstractMap_equals(t_AbstractMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(AbstractMap), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_AbstractMap_get(t_AbstractMap *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.get(a0));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "get", arg);
      return NULL;
    }

    static PyObject *t_AbstractMap_hashCode(t_AbstractMap *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(AbstractMap), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_AbstractMap_isEmpty(t_AbstractMap *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isEmpty());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_AbstractMap_keySet(t_AbstractMap *self)
    {
      ::java::util::Set result((jobject) NULL);
      OBJ_CALL(result = self->object.keySet());
      return ::java::util::t_Set::wrap_Object(result, self->parameters[0]);
    }

    static PyObject *t_AbstractMap_put(t_AbstractMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object a1((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "OO", self->parameters[0], self->parameters[1], &a0, &a1))
      {
        OBJ_CALL(result = self->object.put(a0, a1));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "put", args);
      return NULL;
    }

    static PyObject *t_AbstractMap_putAll(t_AbstractMap *self, PyObject *arg)
    {
      ::java::util::Map a0((jobject) NULL);
      PyTypeObject **p0;

      if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
      {
        OBJ_CALL(self->object.putAll(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "putAll", arg);
      return NULL;
    }

    static PyObject *t_AbstractMap_remove(t_AbstractMap *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.remove(a0));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "remove", arg);
      return NULL;
    }

    static PyObject *t_AbstractMap_size(t_AbstractMap *self)
    {
      jint result;
      OBJ_CALL(result = self->object.size());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_AbstractMap_toString(t_AbstractMap *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(AbstractMap), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_AbstractMap_values(t_AbstractMap *self)
    {
      ::java::util::Collection result((jobject) NULL);
      OBJ_CALL(result = self->object.values());
      return ::java::util::t_Collection::wrap_Object(result, self->parameters[1]);
    }
    static PyObject *t_AbstractMap_get__parameters_(t_AbstractMap *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_AbstractMap_get__empty(t_AbstractMap *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEmpty());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/util/Version.h"
#include "java/io/PrintStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "org/apache/lucene/index/IndexWriter$IndexReaderWarmer.h"
#include "org/apache/lucene/index/MergeScheduler.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "org/apache/lucene/index/IndexWriterConfig$OpenMode.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "org/apache/lucene/index/IndexDeletionPolicy.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/MergePolicy.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexWriterConfig::class$ = NULL;
        jmethodID *IndexWriterConfig::mids$ = NULL;
        bool IndexWriterConfig::live$ = false;
        jboolean IndexWriterConfig::DEFAULT_CHECK_INTEGRITY_AT_MERGE = (jboolean) 0;
        jint IndexWriterConfig::DEFAULT_MAX_BUFFERED_DELETE_TERMS = (jint) 0;
        jint IndexWriterConfig::DEFAULT_MAX_BUFFERED_DOCS = (jint) 0;
        jint IndexWriterConfig::DEFAULT_MAX_THREAD_STATES = (jint) 0;
        jdouble IndexWriterConfig::DEFAULT_RAM_BUFFER_SIZE_MB = (jdouble) 0;
        jint IndexWriterConfig::DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB = (jint) 0;
        jboolean IndexWriterConfig::DEFAULT_READER_POOLING = (jboolean) 0;
        jint IndexWriterConfig::DEFAULT_READER_TERMS_INDEX_DIVISOR = (jint) 0;
        jint IndexWriterConfig::DEFAULT_TERM_INDEX_INTERVAL = (jint) 0;
        jboolean IndexWriterConfig::DEFAULT_USE_COMPOUND_FILE_SYSTEM = (jboolean) 0;
        jint IndexWriterConfig::DISABLE_AUTO_FLUSH = (jint) 0;
        jlong IndexWriterConfig::WRITE_LOCK_TIMEOUT = (jlong) 0;

        jclass IndexWriterConfig::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexWriterConfig");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_b2a1ba2f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/Analyzer;)V");
            mids$[mid_getAnalyzer_347f60a9] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
            mids$[mid_getCodec_27f0a02b] = env->getMethodID(cls, "getCodec", "()Lorg/apache/lucene/codecs/Codec;");
            mids$[mid_getDefaultWriteLockTimeout_54c6a17a] = env->getStaticMethodID(cls, "getDefaultWriteLockTimeout", "()J");
            mids$[mid_getIndexCommit_09307276] = env->getMethodID(cls, "getIndexCommit", "()Lorg/apache/lucene/index/IndexCommit;");
            mids$[mid_getIndexDeletionPolicy_a18376c3] = env->getMethodID(cls, "getIndexDeletionPolicy", "()Lorg/apache/lucene/index/IndexDeletionPolicy;");
            mids$[mid_getInfoStream_1923150b] = env->getMethodID(cls, "getInfoStream", "()Lorg/apache/lucene/util/InfoStream;");
            mids$[mid_getMaxBufferedDeleteTerms_54c6a179] = env->getMethodID(cls, "getMaxBufferedDeleteTerms", "()I");
            mids$[mid_getMaxBufferedDocs_54c6a179] = env->getMethodID(cls, "getMaxBufferedDocs", "()I");
            mids$[mid_getMaxThreadStates_54c6a179] = env->getMethodID(cls, "getMaxThreadStates", "()I");
            mids$[mid_getMergePolicy_753f8dfd] = env->getMethodID(cls, "getMergePolicy", "()Lorg/apache/lucene/index/MergePolicy;");
            mids$[mid_getMergeScheduler_ff96d655] = env->getMethodID(cls, "getMergeScheduler", "()Lorg/apache/lucene/index/MergeScheduler;");
            mids$[mid_getMergedSegmentWarmer_b145c9d7] = env->getMethodID(cls, "getMergedSegmentWarmer", "()Lorg/apache/lucene/index/IndexWriter$IndexReaderWarmer;");
            mids$[mid_getOpenMode_4134b214] = env->getMethodID(cls, "getOpenMode", "()Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;");
            mids$[mid_getRAMBufferSizeMB_54c6a174] = env->getMethodID(cls, "getRAMBufferSizeMB", "()D");
            mids$[mid_getRAMPerThreadHardLimitMB_54c6a179] = env->getMethodID(cls, "getRAMPerThreadHardLimitMB", "()I");
            mids$[mid_getReaderPooling_54c6a16a] = env->getMethodID(cls, "getReaderPooling", "()Z");
            mids$[mid_getReaderTermsIndexDivisor_54c6a179] = env->getMethodID(cls, "getReaderTermsIndexDivisor", "()I");
            mids$[mid_getSimilarity_efcb1233] = env->getMethodID(cls, "getSimilarity", "()Lorg/apache/lucene/search/similarities/Similarity;");
            mids$[mid_getTermIndexInterval_54c6a179] = env->getMethodID(cls, "getTermIndexInterval", "()I");
            mids$[mid_getWriteLockTimeout_54c6a17a] = env->getMethodID(cls, "getWriteLockTimeout", "()J");
            mids$[mid_setCodec_c6322414] = env->getMethodID(cls, "setCodec", "(Lorg/apache/lucene/codecs/Codec;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setDefaultWriteLockTimeout_0ee6df2f] = env->getStaticMethodID(cls, "setDefaultWriteLockTimeout", "(J)V");
            mids$[mid_setIndexCommit_ec04569d] = env->getMethodID(cls, "setIndexCommit", "(Lorg/apache/lucene/index/IndexCommit;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setIndexDeletionPolicy_e3778c88] = env->getMethodID(cls, "setIndexDeletionPolicy", "(Lorg/apache/lucene/index/IndexDeletionPolicy;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setInfoStream_46a28868] = env->getMethodID(cls, "setInfoStream", "(Lorg/apache/lucene/util/InfoStream;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setInfoStream_915f97a5] = env->getMethodID(cls, "setInfoStream", "(Ljava/io/PrintStream;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setMaxBufferedDeleteTerms_0a512c4a] = env->getMethodID(cls, "setMaxBufferedDeleteTerms", "(I)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setMaxBufferedDocs_0a512c4a] = env->getMethodID(cls, "setMaxBufferedDocs", "(I)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setMaxThreadStates_0a512c4a] = env->getMethodID(cls, "setMaxThreadStates", "(I)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setMergePolicy_35fd1692] = env->getMethodID(cls, "setMergePolicy", "(Lorg/apache/lucene/index/MergePolicy;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setMergeScheduler_a7b4ba7a] = env->getMethodID(cls, "setMergeScheduler", "(Lorg/apache/lucene/index/MergeScheduler;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setMergedSegmentWarmer_f60591d0] = env->getMethodID(cls, "setMergedSegmentWarmer", "(Lorg/apache/lucene/index/IndexWriter$IndexReaderWarmer;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setOpenMode_ecf4c6f7] = env->getMethodID(cls, "setOpenMode", "(Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setRAMBufferSizeMB_f49ea4cb] = env->getMethodID(cls, "setRAMBufferSizeMB", "(D)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setRAMPerThreadHardLimitMB_0a512c4a] = env->getMethodID(cls, "setRAMPerThreadHardLimitMB", "(I)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setReaderPooling_53913b61] = env->getMethodID(cls, "setReaderPooling", "(Z)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setReaderTermsIndexDivisor_0a512c4a] = env->getMethodID(cls, "setReaderTermsIndexDivisor", "(I)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setSimilarity_842e4878] = env->getMethodID(cls, "setSimilarity", "(Lorg/apache/lucene/search/similarities/Similarity;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setTermIndexInterval_0a512c4a] = env->getMethodID(cls, "setTermIndexInterval", "(I)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setUseCompoundFile_53913b61] = env->getMethodID(cls, "setUseCompoundFile", "(Z)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setWriteLockTimeout_c56ab6f1] = env->getMethodID(cls, "setWriteLockTimeout", "(J)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_CHECK_INTEGRITY_AT_MERGE = env->getStaticBooleanField(cls, "DEFAULT_CHECK_INTEGRITY_AT_MERGE");
            DEFAULT_MAX_BUFFERED_DELETE_TERMS = env->getStaticIntField(cls, "DEFAULT_MAX_BUFFERED_DELETE_TERMS");
            DEFAULT_MAX_BUFFERED_DOCS = env->getStaticIntField(cls, "DEFAULT_MAX_BUFFERED_DOCS");
            DEFAULT_MAX_THREAD_STATES = env->getStaticIntField(cls, "DEFAULT_MAX_THREAD_STATES");
            DEFAULT_RAM_BUFFER_SIZE_MB = env->getStaticDoubleField(cls, "DEFAULT_RAM_BUFFER_SIZE_MB");
            DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB = env->getStaticIntField(cls, "DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB");
            DEFAULT_READER_POOLING = env->getStaticBooleanField(cls, "DEFAULT_READER_POOLING");
            DEFAULT_READER_TERMS_INDEX_DIVISOR = env->getStaticIntField(cls, "DEFAULT_READER_TERMS_INDEX_DIVISOR");
            DEFAULT_TERM_INDEX_INTERVAL = env->getStaticIntField(cls, "DEFAULT_TERM_INDEX_INTERVAL");
            DEFAULT_USE_COMPOUND_FILE_SYSTEM = env->getStaticBooleanField(cls, "DEFAULT_USE_COMPOUND_FILE_SYSTEM");
            DISABLE_AUTO_FLUSH = env->getStaticIntField(cls, "DISABLE_AUTO_FLUSH");
            WRITE_LOCK_TIMEOUT = env->getStaticLongField(cls, "WRITE_LOCK_TIMEOUT");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexWriterConfig::IndexWriterConfig(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::index::LiveIndexWriterConfig(env->newObject(initializeClass, &mids$, mid_init$_b2a1ba2f, a0.this$, a1.this$)) {}

        ::org::apache::lucene::analysis::Analyzer IndexWriterConfig::getAnalyzer() const
        {
          return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_347f60a9]));
        }

        ::org::apache::lucene::codecs::Codec IndexWriterConfig::getCodec() const
        {
          return ::org::apache::lucene::codecs::Codec(env->callObjectMethod(this$, mids$[mid_getCodec_27f0a02b]));
        }

        jlong IndexWriterConfig::getDefaultWriteLockTimeout()
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_getDefaultWriteLockTimeout_54c6a17a]);
        }

        ::org::apache::lucene::index::IndexCommit IndexWriterConfig::getIndexCommit() const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_getIndexCommit_09307276]));
        }

        ::org::apache::lucene::index::IndexDeletionPolicy IndexWriterConfig::getIndexDeletionPolicy() const
        {
          return ::org::apache::lucene::index::IndexDeletionPolicy(env->callObjectMethod(this$, mids$[mid_getIndexDeletionPolicy_a18376c3]));
        }

        ::org::apache::lucene::util::InfoStream IndexWriterConfig::getInfoStream() const
        {
          return ::org::apache::lucene::util::InfoStream(env->callObjectMethod(this$, mids$[mid_getInfoStream_1923150b]));
        }

        jint IndexWriterConfig::getMaxBufferedDeleteTerms() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxBufferedDeleteTerms_54c6a179]);
        }

        jint IndexWriterConfig::getMaxBufferedDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxBufferedDocs_54c6a179]);
        }

        jint IndexWriterConfig::getMaxThreadStates() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxThreadStates_54c6a179]);
        }

        ::org::apache::lucene::index::MergePolicy IndexWriterConfig::getMergePolicy() const
        {
          return ::org::apache::lucene::index::MergePolicy(env->callObjectMethod(this$, mids$[mid_getMergePolicy_753f8dfd]));
        }

        ::org::apache::lucene::index::MergeScheduler IndexWriterConfig::getMergeScheduler() const
        {
          return ::org::apache::lucene::index::MergeScheduler(env->callObjectMethod(this$, mids$[mid_getMergeScheduler_ff96d655]));
        }

        ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer IndexWriterConfig::getMergedSegmentWarmer() const
        {
          return ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer(env->callObjectMethod(this$, mids$[mid_getMergedSegmentWarmer_b145c9d7]));
        }

        ::org::apache::lucene::index::IndexWriterConfig$OpenMode IndexWriterConfig::getOpenMode() const
        {
          return ::org::apache::lucene::index::IndexWriterConfig$OpenMode(env->callObjectMethod(this$, mids$[mid_getOpenMode_4134b214]));
        }

        jdouble IndexWriterConfig::getRAMBufferSizeMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getRAMBufferSizeMB_54c6a174]);
        }

        jint IndexWriterConfig::getRAMPerThreadHardLimitMB() const
        {
          return env->callIntMethod(this$, mids$[mid_getRAMPerThreadHardLimitMB_54c6a179]);
        }

        jboolean IndexWriterConfig::getReaderPooling() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getReaderPooling_54c6a16a]);
        }

        jint IndexWriterConfig::getReaderTermsIndexDivisor() const
        {
          return env->callIntMethod(this$, mids$[mid_getReaderTermsIndexDivisor_54c6a179]);
        }

        ::org::apache::lucene::search::similarities::Similarity IndexWriterConfig::getSimilarity() const
        {
          return ::org::apache::lucene::search::similarities::Similarity(env->callObjectMethod(this$, mids$[mid_getSimilarity_efcb1233]));
        }

        jint IndexWriterConfig::getTermIndexInterval() const
        {
          return env->callIntMethod(this$, mids$[mid_getTermIndexInterval_54c6a179]);
        }

        jlong IndexWriterConfig::getWriteLockTimeout() const
        {
          return env->callLongMethod(this$, mids$[mid_getWriteLockTimeout_54c6a17a]);
        }

        IndexWriterConfig IndexWriterConfig::setCodec(const ::org::apache::lucene::codecs::Codec & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setCodec_c6322414], a0.this$));
        }

        void IndexWriterConfig::setDefaultWriteLockTimeout(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_setDefaultWriteLockTimeout_0ee6df2f], a0);
        }

        IndexWriterConfig IndexWriterConfig::setIndexCommit(const ::org::apache::lucene::index::IndexCommit & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setIndexCommit_ec04569d], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setIndexDeletionPolicy(const ::org::apache::lucene::index::IndexDeletionPolicy & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setIndexDeletionPolicy_e3778c88], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setInfoStream(const ::org::apache::lucene::util::InfoStream & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setInfoStream_46a28868], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setInfoStream(const ::java::io::PrintStream & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setInfoStream_915f97a5], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setMaxBufferedDeleteTerms(jint a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMaxBufferedDeleteTerms_0a512c4a], a0));
        }

        IndexWriterConfig IndexWriterConfig::setMaxBufferedDocs(jint a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMaxBufferedDocs_0a512c4a], a0));
        }

        IndexWriterConfig IndexWriterConfig::setMaxThreadStates(jint a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMaxThreadStates_0a512c4a], a0));
        }

        IndexWriterConfig IndexWriterConfig::setMergePolicy(const ::org::apache::lucene::index::MergePolicy & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMergePolicy_35fd1692], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setMergeScheduler(const ::org::apache::lucene::index::MergeScheduler & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMergeScheduler_a7b4ba7a], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setMergedSegmentWarmer(const ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMergedSegmentWarmer_f60591d0], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setOpenMode(const ::org::apache::lucene::index::IndexWriterConfig$OpenMode & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setOpenMode_ecf4c6f7], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setRAMBufferSizeMB(jdouble a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setRAMBufferSizeMB_f49ea4cb], a0));
        }

        IndexWriterConfig IndexWriterConfig::setRAMPerThreadHardLimitMB(jint a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setRAMPerThreadHardLimitMB_0a512c4a], a0));
        }

        IndexWriterConfig IndexWriterConfig::setReaderPooling(jboolean a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setReaderPooling_53913b61], a0));
        }

        IndexWriterConfig IndexWriterConfig::setReaderTermsIndexDivisor(jint a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setReaderTermsIndexDivisor_0a512c4a], a0));
        }

        IndexWriterConfig IndexWriterConfig::setSimilarity(const ::org::apache::lucene::search::similarities::Similarity & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setSimilarity_842e4878], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setTermIndexInterval(jint a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setTermIndexInterval_0a512c4a], a0));
        }

        IndexWriterConfig IndexWriterConfig::setUseCompoundFile(jboolean a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setUseCompoundFile_53913b61], a0));
        }

        IndexWriterConfig IndexWriterConfig::setWriteLockTimeout(jlong a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setWriteLockTimeout_c56ab6f1], a0));
        }

        ::java::lang::String IndexWriterConfig::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexWriterConfig_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriterConfig_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexWriterConfig_init_(t_IndexWriterConfig *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexWriterConfig_getAnalyzer(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getCodec(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getDefaultWriteLockTimeout(PyTypeObject *type);
        static PyObject *t_IndexWriterConfig_getIndexCommit(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getIndexDeletionPolicy(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getInfoStream(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getMaxBufferedDeleteTerms(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getMaxBufferedDocs(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getMaxThreadStates(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getMergePolicy(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getMergeScheduler(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getMergedSegmentWarmer(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getOpenMode(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getRAMBufferSizeMB(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getRAMPerThreadHardLimitMB(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getReaderPooling(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getReaderTermsIndexDivisor(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getSimilarity(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getTermIndexInterval(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getWriteLockTimeout(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setCodec(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setDefaultWriteLockTimeout(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setIndexCommit(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setIndexDeletionPolicy(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setInfoStream(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setMaxBufferedDeleteTerms(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setMaxBufferedDocs(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setMaxThreadStates(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setMergePolicy(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setMergeScheduler(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setMergedSegmentWarmer(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setOpenMode(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setRAMBufferSizeMB(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setRAMPerThreadHardLimitMB(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setReaderPooling(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setReaderTermsIndexDivisor(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setSimilarity(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setTermIndexInterval(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setUseCompoundFile(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setWriteLockTimeout(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_toString(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_get__analyzer(t_IndexWriterConfig *self, void *data);
        static PyObject *t_IndexWriterConfig_get__codec(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__codec(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__defaultWriteLockTimeout(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__defaultWriteLockTimeout(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__indexCommit(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__indexCommit(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__indexDeletionPolicy(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__indexDeletionPolicy(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__infoStream(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__infoStream(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__maxBufferedDeleteTerms(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__maxBufferedDeleteTerms(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__maxBufferedDocs(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__maxBufferedDocs(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__maxThreadStates(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__maxThreadStates(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__mergePolicy(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__mergePolicy(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__mergeScheduler(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__mergeScheduler(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__mergedSegmentWarmer(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__mergedSegmentWarmer(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__openMode(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__openMode(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__rAMBufferSizeMB(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__rAMBufferSizeMB(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__rAMPerThreadHardLimitMB(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__rAMPerThreadHardLimitMB(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__readerPooling(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__readerPooling(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__readerTermsIndexDivisor(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__readerTermsIndexDivisor(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__similarity(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__similarity(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__termIndexInterval(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__termIndexInterval(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static int t_IndexWriterConfig_set__useCompoundFile(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__writeLockTimeout(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__writeLockTimeout(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyGetSetDef t_IndexWriterConfig__fields_[] = {
          DECLARE_GET_FIELD(t_IndexWriterConfig, analyzer),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, codec),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, defaultWriteLockTimeout),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, indexCommit),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, indexDeletionPolicy),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, infoStream),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, maxBufferedDeleteTerms),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, maxBufferedDocs),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, maxThreadStates),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, mergePolicy),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, mergeScheduler),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, mergedSegmentWarmer),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, openMode),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, rAMBufferSizeMB),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, rAMPerThreadHardLimitMB),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, readerPooling),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, readerTermsIndexDivisor),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, similarity),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, termIndexInterval),
          DECLARE_SET_FIELD(t_IndexWriterConfig, useCompoundFile),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, writeLockTimeout),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexWriterConfig__methods_[] = {
          DECLARE_METHOD(t_IndexWriterConfig, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriterConfig, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriterConfig, getAnalyzer, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getCodec, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getDefaultWriteLockTimeout, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexWriterConfig, getIndexCommit, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getIndexDeletionPolicy, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getInfoStream, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getMaxBufferedDeleteTerms, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getMaxBufferedDocs, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getMaxThreadStates, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getMergePolicy, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getMergeScheduler, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getMergedSegmentWarmer, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getOpenMode, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getRAMBufferSizeMB, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getRAMPerThreadHardLimitMB, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getReaderPooling, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getReaderTermsIndexDivisor, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getSimilarity, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getTermIndexInterval, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getWriteLockTimeout, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setCodec, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setDefaultWriteLockTimeout, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriterConfig, setIndexCommit, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setIndexDeletionPolicy, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setInfoStream, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setMaxBufferedDeleteTerms, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setMaxBufferedDocs, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setMaxThreadStates, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setMergePolicy, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setMergeScheduler, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setMergedSegmentWarmer, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setOpenMode, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setRAMBufferSizeMB, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setRAMPerThreadHardLimitMB, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setReaderPooling, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setReaderTermsIndexDivisor, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setSimilarity, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setTermIndexInterval, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setUseCompoundFile, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setWriteLockTimeout, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexWriterConfig, t_IndexWriterConfig, ::org::apache::lucene::index::LiveIndexWriterConfig, IndexWriterConfig, t_IndexWriterConfig_init_, 0, 0, t_IndexWriterConfig__fields_, 0, 0);

        void t_IndexWriterConfig::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexWriterConfig), module, "IndexWriterConfig", 0);
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "OpenMode", make_descriptor(&PY_TYPE(IndexWriterConfig$OpenMode)));
        }

        void t_IndexWriterConfig::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "class_", make_descriptor(IndexWriterConfig::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "wrapfn_", make_descriptor(t_IndexWriterConfig::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IndexWriterConfig::initializeClass);
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_CHECK_INTEGRITY_AT_MERGE", make_descriptor(IndexWriterConfig::DEFAULT_CHECK_INTEGRITY_AT_MERGE));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_MAX_BUFFERED_DELETE_TERMS", make_descriptor(IndexWriterConfig::DEFAULT_MAX_BUFFERED_DELETE_TERMS));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_MAX_BUFFERED_DOCS", make_descriptor(IndexWriterConfig::DEFAULT_MAX_BUFFERED_DOCS));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_MAX_THREAD_STATES", make_descriptor(IndexWriterConfig::DEFAULT_MAX_THREAD_STATES));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_RAM_BUFFER_SIZE_MB", make_descriptor(IndexWriterConfig::DEFAULT_RAM_BUFFER_SIZE_MB));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB", make_descriptor(IndexWriterConfig::DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_READER_POOLING", make_descriptor(IndexWriterConfig::DEFAULT_READER_POOLING));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_READER_TERMS_INDEX_DIVISOR", make_descriptor(IndexWriterConfig::DEFAULT_READER_TERMS_INDEX_DIVISOR));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_TERM_INDEX_INTERVAL", make_descriptor(IndexWriterConfig::DEFAULT_TERM_INDEX_INTERVAL));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_USE_COMPOUND_FILE_SYSTEM", make_descriptor(IndexWriterConfig::DEFAULT_USE_COMPOUND_FILE_SYSTEM));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DISABLE_AUTO_FLUSH", make_descriptor(IndexWriterConfig::DISABLE_AUTO_FLUSH));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "WRITE_LOCK_TIMEOUT", make_descriptor(IndexWriterConfig::WRITE_LOCK_TIMEOUT));
        }

        static PyObject *t_IndexWriterConfig_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexWriterConfig::initializeClass, 1)))
            return NULL;
          return t_IndexWriterConfig::wrap_Object(IndexWriterConfig(((t_IndexWriterConfig *) arg)->object.this$));
        }
        static PyObject *t_IndexWriterConfig_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexWriterConfig::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexWriterConfig_init_(t_IndexWriterConfig *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::Version a0((jobject) NULL);
          ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
          IndexWriterConfig object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
          {
            INT_CALL(object = IndexWriterConfig(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndexWriterConfig_getAnalyzer(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getAnalyzer());
            return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getAnalyzer", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getCodec(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::Codec result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getCodec());
            return ::org::apache::lucene::codecs::t_Codec::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getCodec", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getDefaultWriteLockTimeout(PyTypeObject *type)
        {
          jlong result;
          OBJ_CALL(result = ::org::apache::lucene::index::IndexWriterConfig::getDefaultWriteLockTimeout());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexWriterConfig_getIndexCommit(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getIndexCommit());
            return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getIndexCommit", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getIndexDeletionPolicy(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getIndexDeletionPolicy());
            return ::org::apache::lucene::index::t_IndexDeletionPolicy::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getIndexDeletionPolicy", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getInfoStream(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::util::InfoStream result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getInfoStream());
            return ::org::apache::lucene::util::t_InfoStream::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getInfoStream", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getMaxBufferedDeleteTerms(t_IndexWriterConfig *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMaxBufferedDeleteTerms());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getMaxBufferedDeleteTerms", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getMaxBufferedDocs(t_IndexWriterConfig *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMaxBufferedDocs());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getMaxBufferedDocs", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getMaxThreadStates(t_IndexWriterConfig *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMaxThreadStates());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getMaxThreadStates", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getMergePolicy(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergePolicy result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMergePolicy());
            return ::org::apache::lucene::index::t_MergePolicy::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getMergePolicy", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getMergeScheduler(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeScheduler result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMergeScheduler());
            return ::org::apache::lucene::index::t_MergeScheduler::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getMergeScheduler", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getMergedSegmentWarmer(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMergedSegmentWarmer());
            return ::org::apache::lucene::index::t_IndexWriter$IndexReaderWarmer::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getMergedSegmentWarmer", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getOpenMode(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexWriterConfig$OpenMode result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getOpenMode());
            return ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getOpenMode", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getRAMBufferSizeMB(t_IndexWriterConfig *self, PyObject *args)
        {
          jdouble result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getRAMBufferSizeMB());
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getRAMBufferSizeMB", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getRAMPerThreadHardLimitMB(t_IndexWriterConfig *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getRAMPerThreadHardLimitMB());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getRAMPerThreadHardLimitMB", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getReaderPooling(t_IndexWriterConfig *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getReaderPooling());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getReaderPooling", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getReaderTermsIndexDivisor(t_IndexWriterConfig *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getReaderTermsIndexDivisor());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getReaderTermsIndexDivisor", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getSimilarity(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::search::similarities::Similarity result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getSimilarity());
            return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getSimilarity", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getTermIndexInterval(t_IndexWriterConfig *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getTermIndexInterval());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getTermIndexInterval", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getWriteLockTimeout(t_IndexWriterConfig *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getWriteLockTimeout());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getWriteLockTimeout", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setCodec(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::codecs::Codec a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::codecs::Codec::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setCodec(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setCodec", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setDefaultWriteLockTimeout(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::IndexWriterConfig::setDefaultWriteLockTimeout(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "setDefaultWriteLockTimeout", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setIndexCommit(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setIndexCommit(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexCommit", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setIndexDeletionPolicy(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexDeletionPolicy::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setIndexDeletionPolicy(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexDeletionPolicy", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setInfoStream(t_IndexWriterConfig *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::InfoStream a0((jobject) NULL);
              IndexWriterConfig result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::InfoStream::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.setInfoStream(a0));
                return t_IndexWriterConfig::wrap_Object(result);
              }
            }
            {
              ::java::io::PrintStream a0((jobject) NULL);
              IndexWriterConfig result((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::PrintStream::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.setInfoStream(a0));
                return t_IndexWriterConfig::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "setInfoStream", args);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setMaxBufferedDeleteTerms(t_IndexWriterConfig *self, PyObject *args)
        {
          jint a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.setMaxBufferedDeleteTerms(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "setMaxBufferedDeleteTerms", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setMaxBufferedDocs(t_IndexWriterConfig *self, PyObject *args)
        {
          jint a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.setMaxBufferedDocs(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "setMaxBufferedDocs", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setMaxThreadStates(t_IndexWriterConfig *self, PyObject *arg)
        {
          jint a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setMaxThreadStates(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxThreadStates", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setMergePolicy(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergePolicy a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::MergePolicy::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setMergePolicy(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "setMergePolicy", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setMergeScheduler(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergeScheduler a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeScheduler::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setMergeScheduler(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMergeScheduler", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setMergedSegmentWarmer(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setMergedSegmentWarmer(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "setMergedSegmentWarmer", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setOpenMode(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexWriterConfig$OpenMode a0((jobject) NULL);
          PyTypeObject **p0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "K", ::org::apache::lucene::index::IndexWriterConfig$OpenMode::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::parameters_))
          {
            OBJ_CALL(result = self->object.setOpenMode(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setOpenMode", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setRAMBufferSizeMB(t_IndexWriterConfig *self, PyObject *args)
        {
          jdouble a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(result = self->object.setRAMBufferSizeMB(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "setRAMBufferSizeMB", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setRAMPerThreadHardLimitMB(t_IndexWriterConfig *self, PyObject *arg)
        {
          jint a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setRAMPerThreadHardLimitMB(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setRAMPerThreadHardLimitMB", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setReaderPooling(t_IndexWriterConfig *self, PyObject *arg)
        {
          jboolean a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.setReaderPooling(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setReaderPooling", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setReaderTermsIndexDivisor(t_IndexWriterConfig *self, PyObject *args)
        {
          jint a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.setReaderTermsIndexDivisor(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "setReaderTermsIndexDivisor", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setSimilarity(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::search::similarities::Similarity a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::Similarity::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setSimilarity(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setSimilarity", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setTermIndexInterval(t_IndexWriterConfig *self, PyObject *args)
        {
          jint a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.setTermIndexInterval(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "setTermIndexInterval", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setUseCompoundFile(t_IndexWriterConfig *self, PyObject *args)
        {
          jboolean a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "Z", &a0))
          {
            OBJ_CALL(result = self->object.setUseCompoundFile(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "setUseCompoundFile", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setWriteLockTimeout(t_IndexWriterConfig *self, PyObject *arg)
        {
          jlong a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.setWriteLockTimeout(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setWriteLockTimeout", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_toString(t_IndexWriterConfig *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_IndexWriterConfig_get__analyzer(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
          OBJ_CALL(value = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
        }

        static PyObject *t_IndexWriterConfig_get__codec(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::codecs::Codec value((jobject) NULL);
          OBJ_CALL(value = self->object.getCodec());
          return ::org::apache::lucene::codecs::t_Codec::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__codec(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::codecs::Codec value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::codecs::Codec::initializeClass, &value))
            {
              INT_CALL(self->object.setCodec(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "codec", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__defaultWriteLockTimeout(t_IndexWriterConfig *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getDefaultWriteLockTimeout());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_IndexWriterConfig_set__defaultWriteLockTimeout(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setDefaultWriteLockTimeout(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "defaultWriteLockTimeout", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__indexCommit(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexCommit value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexCommit());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__indexCommit(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::IndexCommit value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &value))
            {
              INT_CALL(self->object.setIndexCommit(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "indexCommit", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__indexDeletionPolicy(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexDeletionPolicy());
          return ::org::apache::lucene::index::t_IndexDeletionPolicy::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__indexDeletionPolicy(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::IndexDeletionPolicy value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexDeletionPolicy::initializeClass, &value))
            {
              INT_CALL(self->object.setIndexDeletionPolicy(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "indexDeletionPolicy", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__infoStream(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::util::InfoStream value((jobject) NULL);
          OBJ_CALL(value = self->object.getInfoStream());
          return ::org::apache::lucene::util::t_InfoStream::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__infoStream(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::InfoStream value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::InfoStream::initializeClass, &value))
            {
              INT_CALL(self->object.setInfoStream(value));
              return 0;
            }
          }
          {
            ::java::io::PrintStream value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
            {
              INT_CALL(self->object.setInfoStream(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "infoStream", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__maxBufferedDeleteTerms(t_IndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxBufferedDeleteTerms());
          return PyInt_FromLong((long) value);
        }
        static int t_IndexWriterConfig_set__maxBufferedDeleteTerms(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxBufferedDeleteTerms(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxBufferedDeleteTerms", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__maxBufferedDocs(t_IndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxBufferedDocs());
          return PyInt_FromLong((long) value);
        }
        static int t_IndexWriterConfig_set__maxBufferedDocs(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxBufferedDocs(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxBufferedDocs", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__maxThreadStates(t_IndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxThreadStates());
          return PyInt_FromLong((long) value);
        }
        static int t_IndexWriterConfig_set__maxThreadStates(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxThreadStates(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxThreadStates", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__mergePolicy(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::MergePolicy value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergePolicy());
          return ::org::apache::lucene::index::t_MergePolicy::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__mergePolicy(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::MergePolicy value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::MergePolicy::initializeClass, &value))
            {
              INT_CALL(self->object.setMergePolicy(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergePolicy", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__mergeScheduler(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::MergeScheduler value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergeScheduler());
          return ::org::apache::lucene::index::t_MergeScheduler::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__mergeScheduler(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::MergeScheduler value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeScheduler::initializeClass, &value))
            {
              INT_CALL(self->object.setMergeScheduler(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergeScheduler", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__mergedSegmentWarmer(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergedSegmentWarmer());
          return ::org::apache::lucene::index::t_IndexWriter$IndexReaderWarmer::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__mergedSegmentWarmer(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer::initializeClass, &value))
            {
              INT_CALL(self->object.setMergedSegmentWarmer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergedSegmentWarmer", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__openMode(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexWriterConfig$OpenMode value((jobject) NULL);
          OBJ_CALL(value = self->object.getOpenMode());
          return ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__openMode(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::IndexWriterConfig$OpenMode value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexWriterConfig$OpenMode::initializeClass, &value))
            {
              INT_CALL(self->object.setOpenMode(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "openMode", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__rAMBufferSizeMB(t_IndexWriterConfig *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getRAMBufferSizeMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_IndexWriterConfig_set__rAMBufferSizeMB(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setRAMBufferSizeMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "rAMBufferSizeMB", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__rAMPerThreadHardLimitMB(t_IndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getRAMPerThreadHardLimitMB());
          return PyInt_FromLong((long) value);
        }
        static int t_IndexWriterConfig_set__rAMPerThreadHardLimitMB(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setRAMPerThreadHardLimitMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "rAMPerThreadHardLimitMB", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__readerPooling(t_IndexWriterConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getReaderPooling());
          Py_RETURN_BOOL(value);
        }
        static int t_IndexWriterConfig_set__readerPooling(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setReaderPooling(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "readerPooling", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__readerTermsIndexDivisor(t_IndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getReaderTermsIndexDivisor());
          return PyInt_FromLong((long) value);
        }
        static int t_IndexWriterConfig_set__readerTermsIndexDivisor(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setReaderTermsIndexDivisor(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "readerTermsIndexDivisor", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__similarity(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::search::similarities::Similarity value((jobject) NULL);
          OBJ_CALL(value = self->object.getSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__similarity(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::similarities::Similarity value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::Similarity::initializeClass, &value))
            {
              INT_CALL(self->object.setSimilarity(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "similarity", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__termIndexInterval(t_IndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getTermIndexInterval());
          return PyInt_FromLong((long) value);
        }
        static int t_IndexWriterConfig_set__termIndexInterval(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setTermIndexInterval(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "termIndexInterval", arg);
          return -1;
        }

        static int t_IndexWriterConfig_set__useCompoundFile(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setUseCompoundFile(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "useCompoundFile", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__writeLockTimeout(t_IndexWriterConfig *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getWriteLockTimeout());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_IndexWriterConfig_set__writeLockTimeout(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setWriteLockTimeout(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "writeLockTimeout", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *MultiTermAwareComponent::class$ = NULL;
          jmethodID *MultiTermAwareComponent::mids$ = NULL;
          bool MultiTermAwareComponent::live$ = false;

          jclass MultiTermAwareComponent::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/MultiTermAwareComponent");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory MultiTermAwareComponent::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_MultiTermAwareComponent_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MultiTermAwareComponent_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MultiTermAwareComponent_getMultiTermComponent(t_MultiTermAwareComponent *self);
          static PyObject *t_MultiTermAwareComponent_get__multiTermComponent(t_MultiTermAwareComponent *self, void *data);
          static PyGetSetDef t_MultiTermAwareComponent__fields_[] = {
            DECLARE_GET_FIELD(t_MultiTermAwareComponent, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MultiTermAwareComponent__methods_[] = {
            DECLARE_METHOD(t_MultiTermAwareComponent, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MultiTermAwareComponent, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MultiTermAwareComponent, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MultiTermAwareComponent, t_MultiTermAwareComponent, ::java::lang::Object, MultiTermAwareComponent, abstract_init, 0, 0, t_MultiTermAwareComponent__fields_, 0, 0);

          void t_MultiTermAwareComponent::install(PyObject *module)
          {
            installType(&PY_TYPE(MultiTermAwareComponent), module, "MultiTermAwareComponent", 0);
          }

          void t_MultiTermAwareComponent::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MultiTermAwareComponent).tp_dict, "class_", make_descriptor(MultiTermAwareComponent::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MultiTermAwareComponent).tp_dict, "wrapfn_", make_descriptor(t_MultiTermAwareComponent::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MultiTermAwareComponent).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MultiTermAwareComponent_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MultiTermAwareComponent::initializeClass, 1)))
              return NULL;
            return t_MultiTermAwareComponent::wrap_Object(MultiTermAwareComponent(((t_MultiTermAwareComponent *) arg)->object.this$));
          }
          static PyObject *t_MultiTermAwareComponent_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MultiTermAwareComponent::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_MultiTermAwareComponent_getMultiTermComponent(t_MultiTermAwareComponent *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_MultiTermAwareComponent_get__multiTermComponent(t_MultiTermAwareComponent *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FuzzyQueryNode.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *FuzzyQueryNode::class$ = NULL;
              jmethodID *FuzzyQueryNode::mids$ = NULL;
              bool FuzzyQueryNode::live$ = false;

              jclass FuzzyQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/FuzzyQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_7cd5e8f3] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;FII)V");
                  mids$[mid_cloneTree_90198571] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/FuzzyQueryNode;");
                  mids$[mid_getPrefixLength_54c6a179] = env->getMethodID(cls, "getPrefixLength", "()I");
                  mids$[mid_getSimilarity_54c6a176] = env->getMethodID(cls, "getSimilarity", "()F");
                  mids$[mid_setPrefixLength_39c7bd3c] = env->getMethodID(cls, "setPrefixLength", "(I)V");
                  mids$[mid_setSimilarity_06298cab] = env->getMethodID(cls, "setSimilarity", "(F)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FuzzyQueryNode::FuzzyQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1, jfloat a2, jint a3, jint a4) : ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode(env->newObject(initializeClass, &mids$, mid_init$_7cd5e8f3, a0.this$, a1.this$, a2, a3, a4)) {}

              FuzzyQueryNode FuzzyQueryNode::cloneTree() const
              {
                return FuzzyQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_90198571]));
              }

              jint FuzzyQueryNode::getPrefixLength() const
              {
                return env->callIntMethod(this$, mids$[mid_getPrefixLength_54c6a179]);
              }

              jfloat FuzzyQueryNode::getSimilarity() const
              {
                return env->callFloatMethod(this$, mids$[mid_getSimilarity_54c6a176]);
              }

              void FuzzyQueryNode::setPrefixLength(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setPrefixLength_39c7bd3c], a0);
              }

              void FuzzyQueryNode::setSimilarity(jfloat a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setSimilarity_06298cab], a0);
              }

              ::java::lang::CharSequence FuzzyQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String FuzzyQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_FuzzyQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FuzzyQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FuzzyQueryNode_init_(t_FuzzyQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FuzzyQueryNode_cloneTree(t_FuzzyQueryNode *self, PyObject *args);
              static PyObject *t_FuzzyQueryNode_getPrefixLength(t_FuzzyQueryNode *self);
              static PyObject *t_FuzzyQueryNode_getSimilarity(t_FuzzyQueryNode *self);
              static PyObject *t_FuzzyQueryNode_setPrefixLength(t_FuzzyQueryNode *self, PyObject *arg);
              static PyObject *t_FuzzyQueryNode_setSimilarity(t_FuzzyQueryNode *self, PyObject *arg);
              static PyObject *t_FuzzyQueryNode_toQueryString(t_FuzzyQueryNode *self, PyObject *args);
              static PyObject *t_FuzzyQueryNode_toString(t_FuzzyQueryNode *self, PyObject *args);
              static PyObject *t_FuzzyQueryNode_get__prefixLength(t_FuzzyQueryNode *self, void *data);
              static int t_FuzzyQueryNode_set__prefixLength(t_FuzzyQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_FuzzyQueryNode_get__similarity(t_FuzzyQueryNode *self, void *data);
              static int t_FuzzyQueryNode_set__similarity(t_FuzzyQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_FuzzyQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_FuzzyQueryNode, prefixLength),
                DECLARE_GETSET_FIELD(t_FuzzyQueryNode, similarity),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FuzzyQueryNode__methods_[] = {
                DECLARE_METHOD(t_FuzzyQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_FuzzyQueryNode, getPrefixLength, METH_NOARGS),
                DECLARE_METHOD(t_FuzzyQueryNode, getSimilarity, METH_NOARGS),
                DECLARE_METHOD(t_FuzzyQueryNode, setPrefixLength, METH_O),
                DECLARE_METHOD(t_FuzzyQueryNode, setSimilarity, METH_O),
                DECLARE_METHOD(t_FuzzyQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_FuzzyQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FuzzyQueryNode, t_FuzzyQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode, FuzzyQueryNode, t_FuzzyQueryNode_init_, 0, 0, t_FuzzyQueryNode__fields_, 0, 0);

              void t_FuzzyQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(FuzzyQueryNode), module, "FuzzyQueryNode", 0);
              }

              void t_FuzzyQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNode).tp_dict, "class_", make_descriptor(FuzzyQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNode).tp_dict, "wrapfn_", make_descriptor(t_FuzzyQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FuzzyQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FuzzyQueryNode::initializeClass, 1)))
                  return NULL;
                return t_FuzzyQueryNode::wrap_Object(FuzzyQueryNode(((t_FuzzyQueryNode *) arg)->object.this$));
              }
              static PyObject *t_FuzzyQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FuzzyQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FuzzyQueryNode_init_(t_FuzzyQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                jfloat a2;
                jint a3;
                jint a4;
                FuzzyQueryNode object((jobject) NULL);

                if (!parseArgs(args, "OOFII", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = FuzzyQueryNode(a0, a1, a2, a3, a4));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_FuzzyQueryNode_cloneTree(t_FuzzyQueryNode *self, PyObject *args)
              {
                FuzzyQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_FuzzyQueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(FuzzyQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_FuzzyQueryNode_getPrefixLength(t_FuzzyQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getPrefixLength());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FuzzyQueryNode_getSimilarity(t_FuzzyQueryNode *self)
              {
                jfloat result;
                OBJ_CALL(result = self->object.getSimilarity());
                return PyFloat_FromDouble((double) result);
              }

              static PyObject *t_FuzzyQueryNode_setPrefixLength(t_FuzzyQueryNode *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.setPrefixLength(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setPrefixLength", arg);
                return NULL;
              }

              static PyObject *t_FuzzyQueryNode_setSimilarity(t_FuzzyQueryNode *self, PyObject *arg)
              {
                jfloat a0;

                if (!parseArg(arg, "F", &a0))
                {
                  OBJ_CALL(self->object.setSimilarity(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setSimilarity", arg);
                return NULL;
              }

              static PyObject *t_FuzzyQueryNode_toQueryString(t_FuzzyQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(FuzzyQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_FuzzyQueryNode_toString(t_FuzzyQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(FuzzyQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_FuzzyQueryNode_get__prefixLength(t_FuzzyQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getPrefixLength());
                return PyInt_FromLong((long) value);
              }
              static int t_FuzzyQueryNode_set__prefixLength(t_FuzzyQueryNode *self, PyObject *arg, void *data)
              {
                {
                  jint value;
                  if (!parseArg(arg, "I", &value))
                  {
                    INT_CALL(self->object.setPrefixLength(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "prefixLength", arg);
                return -1;
              }

              static PyObject *t_FuzzyQueryNode_get__similarity(t_FuzzyQueryNode *self, void *data)
              {
                jfloat value;
                OBJ_CALL(value = self->object.getSimilarity());
                return PyFloat_FromDouble((double) value);
              }
              static int t_FuzzyQueryNode_set__similarity(t_FuzzyQueryNode *self, PyObject *arg, void *data)
              {
                {
                  jfloat value;
                  if (!parseArg(arg, "F", &value))
                  {
                    INT_CALL(self->object.setSimilarity(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "similarity", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ScandinavianNormalizationFilter::class$ = NULL;
          jmethodID *ScandinavianNormalizationFilter::mids$ = NULL;
          bool ScandinavianNormalizationFilter::live$ = false;

          jclass ScandinavianNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScandinavianNormalizationFilter::ScandinavianNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean ScandinavianNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ScandinavianNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScandinavianNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ScandinavianNormalizationFilter_init_(t_ScandinavianNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ScandinavianNormalizationFilter_incrementToken(t_ScandinavianNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_ScandinavianNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_ScandinavianNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ScandinavianNormalizationFilter, t_ScandinavianNormalizationFilter, ::org::apache::lucene::analysis::TokenFilter, ScandinavianNormalizationFilter, t_ScandinavianNormalizationFilter_init_, 0, 0, 0, 0, 0);

          void t_ScandinavianNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ScandinavianNormalizationFilter), module, "ScandinavianNormalizationFilter", 0);
          }

          void t_ScandinavianNormalizationFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ScandinavianNormalizationFilter).tp_dict, "class_", make_descriptor(ScandinavianNormalizationFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ScandinavianNormalizationFilter).tp_dict, "wrapfn_", make_descriptor(t_ScandinavianNormalizationFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ScandinavianNormalizationFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ScandinavianNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScandinavianNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_ScandinavianNormalizationFilter::wrap_Object(ScandinavianNormalizationFilter(((t_ScandinavianNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_ScandinavianNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScandinavianNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ScandinavianNormalizationFilter_init_(t_ScandinavianNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ScandinavianNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ScandinavianNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ScandinavianNormalizationFilter_incrementToken(t_ScandinavianNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ScandinavianNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tr/ApostropheFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {

          ::java::lang::Class *ApostropheFilterFactory::class$ = NULL;
          jmethodID *ApostropheFilterFactory::mids$ = NULL;
          bool ApostropheFilterFactory::live$ = false;

          jclass ApostropheFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tr/ApostropheFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ApostropheFilterFactory::ApostropheFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream ApostropheFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {
          static PyObject *t_ApostropheFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ApostropheFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ApostropheFilterFactory_init_(t_ApostropheFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ApostropheFilterFactory_create(t_ApostropheFilterFactory *self, PyObject *args);

          static PyMethodDef t_ApostropheFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ApostropheFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ApostropheFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ApostropheFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ApostropheFilterFactory, t_ApostropheFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ApostropheFilterFactory, t_ApostropheFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ApostropheFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ApostropheFilterFactory), module, "ApostropheFilterFactory", 0);
          }

          void t_ApostropheFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ApostropheFilterFactory).tp_dict, "class_", make_descriptor(ApostropheFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ApostropheFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ApostropheFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ApostropheFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ApostropheFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ApostropheFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ApostropheFilterFactory::wrap_Object(ApostropheFilterFactory(((t_ApostropheFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ApostropheFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ApostropheFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ApostropheFilterFactory_init_(t_ApostropheFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ApostropheFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ApostropheFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ApostropheFilterFactory_create(t_ApostropheFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ApostropheFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Builder.h"
#include "org/apache/lucene/util/fst/FST$INPUT_TYPE.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/fst/Outputs.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Builder::class$ = NULL;
          jmethodID *Builder::mids$ = NULL;
          bool Builder::live$ = false;

          jclass Builder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Builder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_024447c3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;Lorg/apache/lucene/util/fst/Outputs;)V");
              mids$[mid_init$_e93f16d8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;IIZZILorg/apache/lucene/util/fst/Outputs;ZFZI)V");
              mids$[mid_add_52197430] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/IntsRef;Ljava/lang/Object;)V");
              mids$[mid_finish_917b3659] = env->getMethodID(cls, "finish", "()Lorg/apache/lucene/util/fst/FST;");
              mids$[mid_fstRamBytesUsed_54c6a17a] = env->getMethodID(cls, "fstRamBytesUsed", "()J");
              mids$[mid_getMappedStateCount_54c6a17a] = env->getMethodID(cls, "getMappedStateCount", "()J");
              mids$[mid_getTermCount_54c6a17a] = env->getMethodID(cls, "getTermCount", "()J");
              mids$[mid_getTotStateCount_54c6a17a] = env->getMethodID(cls, "getTotStateCount", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Builder::Builder(const ::org::apache::lucene::util::fst::FST$INPUT_TYPE & a0, const ::org::apache::lucene::util::fst::Outputs & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_024447c3, a0.this$, a1.this$)) {}

          Builder::Builder(const ::org::apache::lucene::util::fst::FST$INPUT_TYPE & a0, jint a1, jint a2, jboolean a3, jboolean a4, jint a5, const ::org::apache::lucene::util::fst::Outputs & a6, jboolean a7, jfloat a8, jboolean a9, jint a10) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e93f16d8, a0.this$, a1, a2, a3, a4, a5, a6.this$, a7, a8, a9, a10)) {}

          void Builder::add(const ::org::apache::lucene::util::IntsRef & a0, const ::java::lang::Object & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_add_52197430], a0.this$, a1.this$);
          }

          ::org::apache::lucene::util::fst::FST Builder::finish() const
          {
            return ::org::apache::lucene::util::fst::FST(env->callObjectMethod(this$, mids$[mid_finish_917b3659]));
          }

          jlong Builder::fstRamBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_fstRamBytesUsed_54c6a17a]);
          }

          jlong Builder::getMappedStateCount() const
          {
            return env->callLongMethod(this$, mids$[mid_getMappedStateCount_54c6a17a]);
          }

          jlong Builder::getTermCount() const
          {
            return env->callLongMethod(this$, mids$[mid_getTermCount_54c6a17a]);
          }

          jlong Builder::getTotStateCount() const
          {
            return env->callLongMethod(this$, mids$[mid_getTotStateCount_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/fst/Builder$UnCompiledNode.h"
#include "org/apache/lucene/util/fst/Builder$Arc.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Builder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder_of_(t_Builder *self, PyObject *args);
          static int t_Builder_init_(t_Builder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Builder_add(t_Builder *self, PyObject *args);
          static PyObject *t_Builder_finish(t_Builder *self);
          static PyObject *t_Builder_fstRamBytesUsed(t_Builder *self);
          static PyObject *t_Builder_getMappedStateCount(t_Builder *self);
          static PyObject *t_Builder_getTermCount(t_Builder *self);
          static PyObject *t_Builder_getTotStateCount(t_Builder *self);
          static PyObject *t_Builder_get__mappedStateCount(t_Builder *self, void *data);
          static PyObject *t_Builder_get__termCount(t_Builder *self, void *data);
          static PyObject *t_Builder_get__totStateCount(t_Builder *self, void *data);
          static PyObject *t_Builder_get__parameters_(t_Builder *self, void *data);
          static PyGetSetDef t_Builder__fields_[] = {
            DECLARE_GET_FIELD(t_Builder, mappedStateCount),
            DECLARE_GET_FIELD(t_Builder, termCount),
            DECLARE_GET_FIELD(t_Builder, totStateCount),
            DECLARE_GET_FIELD(t_Builder, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Builder__methods_[] = {
            DECLARE_METHOD(t_Builder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder, of_, METH_VARARGS),
            DECLARE_METHOD(t_Builder, add, METH_VARARGS),
            DECLARE_METHOD(t_Builder, finish, METH_NOARGS),
            DECLARE_METHOD(t_Builder, fstRamBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_Builder, getMappedStateCount, METH_NOARGS),
            DECLARE_METHOD(t_Builder, getTermCount, METH_NOARGS),
            DECLARE_METHOD(t_Builder, getTotStateCount, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Builder, t_Builder, ::java::lang::Object, Builder, t_Builder_init_, 0, 0, t_Builder__fields_, 0, 0);
          PyObject *t_Builder::wrap_Object(const Builder& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder *self = (t_Builder *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Builder::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder *self = (t_Builder *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Builder::install(PyObject *module)
          {
            installType(&PY_TYPE(Builder), module, "Builder", 0);
            PyDict_SetItemString(PY_TYPE(Builder).tp_dict, "UnCompiledNode", make_descriptor(&PY_TYPE(Builder$UnCompiledNode)));
            PyDict_SetItemString(PY_TYPE(Builder).tp_dict, "Arc", make_descriptor(&PY_TYPE(Builder$Arc)));
          }

          void t_Builder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Builder).tp_dict, "class_", make_descriptor(Builder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Builder).tp_dict, "wrapfn_", make_descriptor(t_Builder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Builder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Builder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Builder::initializeClass, 1)))
              return NULL;
            return t_Builder::wrap_Object(Builder(((t_Builder *) arg)->object.this$));
          }
          static PyObject *t_Builder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Builder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Builder_of_(t_Builder *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Builder_init_(t_Builder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::fst::FST$INPUT_TYPE a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::fst::Outputs a1((jobject) NULL);
                PyTypeObject **p1;
                Builder object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::FST$INPUT_TYPE::initializeClass, ::org::apache::lucene::util::fst::Outputs::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$INPUT_TYPE::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_Outputs::parameters_))
                {
                  INT_CALL(object = Builder(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 11:
              {
                ::org::apache::lucene::util::fst::FST$INPUT_TYPE a0((jobject) NULL);
                PyTypeObject **p0;
                jint a1;
                jint a2;
                jboolean a3;
                jboolean a4;
                jint a5;
                ::org::apache::lucene::util::fst::Outputs a6((jobject) NULL);
                PyTypeObject **p6;
                jboolean a7;
                jfloat a8;
                jboolean a9;
                jint a10;
                Builder object((jobject) NULL);

                if (!parseArgs(args, "KIIZZIKZFZI", ::org::apache::lucene::util::fst::FST$INPUT_TYPE::initializeClass, ::org::apache::lucene::util::fst::Outputs::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$INPUT_TYPE::parameters_, &a1, &a2, &a3, &a4, &a5, &a6, &p6, ::org::apache::lucene::util::fst::t_Outputs::parameters_, &a7, &a8, &a9, &a10))
                {
                  INT_CALL(object = Builder(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Builder_add(t_Builder *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);

            if (!parseArgs(args, "kO", ::org::apache::lucene::util::IntsRef::initializeClass, self->parameters[0], &a0, &a1))
            {
              OBJ_CALL(self->object.add(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_Builder_finish(t_Builder *self)
          {
            ::org::apache::lucene::util::fst::FST result((jobject) NULL);
            OBJ_CALL(result = self->object.finish());
            return ::org::apache::lucene::util::fst::t_FST::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_Builder_fstRamBytesUsed(t_Builder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.fstRamBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Builder_getMappedStateCount(t_Builder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getMappedStateCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Builder_getTermCount(t_Builder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getTermCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Builder_getTotStateCount(t_Builder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getTotStateCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
          static PyObject *t_Builder_get__parameters_(t_Builder *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Builder_get__mappedStateCount(t_Builder *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getMappedStateCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_Builder_get__termCount(t_Builder *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getTermCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_Builder_get__totStateCount(t_Builder *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getTotStateCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/EnglishPossessiveFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *EnglishPossessiveFilterFactory::class$ = NULL;
          jmethodID *EnglishPossessiveFilterFactory::mids$ = NULL;
          bool EnglishPossessiveFilterFactory::live$ = false;

          jclass EnglishPossessiveFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/EnglishPossessiveFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EnglishPossessiveFilterFactory::EnglishPossessiveFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream EnglishPossessiveFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_EnglishPossessiveFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EnglishPossessiveFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EnglishPossessiveFilterFactory_init_(t_EnglishPossessiveFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EnglishPossessiveFilterFactory_create(t_EnglishPossessiveFilterFactory *self, PyObject *args);

          static PyMethodDef t_EnglishPossessiveFilterFactory__methods_[] = {
            DECLARE_METHOD(t_EnglishPossessiveFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishPossessiveFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishPossessiveFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EnglishPossessiveFilterFactory, t_EnglishPossessiveFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, EnglishPossessiveFilterFactory, t_EnglishPossessiveFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_EnglishPossessiveFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(EnglishPossessiveFilterFactory), module, "EnglishPossessiveFilterFactory", 0);
          }

          void t_EnglishPossessiveFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EnglishPossessiveFilterFactory).tp_dict, "class_", make_descriptor(EnglishPossessiveFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EnglishPossessiveFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_EnglishPossessiveFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EnglishPossessiveFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EnglishPossessiveFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EnglishPossessiveFilterFactory::initializeClass, 1)))
              return NULL;
            return t_EnglishPossessiveFilterFactory::wrap_Object(EnglishPossessiveFilterFactory(((t_EnglishPossessiveFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_EnglishPossessiveFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EnglishPossessiveFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EnglishPossessiveFilterFactory_init_(t_EnglishPossessiveFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            EnglishPossessiveFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = EnglishPossessiveFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EnglishPossessiveFilterFactory_create(t_EnglishPossessiveFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(EnglishPossessiveFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/Lucene43NGramTokenizer.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *Lucene43NGramTokenizer::class$ = NULL;
          jmethodID *Lucene43NGramTokenizer::mids$ = NULL;
          bool Lucene43NGramTokenizer::live$ = false;
          jint Lucene43NGramTokenizer::DEFAULT_MAX_NGRAM_SIZE = (jint) 0;
          jint Lucene43NGramTokenizer::DEFAULT_MIN_NGRAM_SIZE = (jint) 0;

          jclass Lucene43NGramTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/Lucene43NGramTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_92513554] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;II)V");
              mids$[mid_init$_fb18a8f8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;II)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_NGRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_NGRAM_SIZE");
              DEFAULT_MIN_NGRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_NGRAM_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene43NGramTokenizer::Lucene43NGramTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          Lucene43NGramTokenizer::Lucene43NGramTokenizer(const ::java::io::Reader & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_92513554, a0.this$, a1, a2)) {}

          Lucene43NGramTokenizer::Lucene43NGramTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_fb18a8f8, a0.this$, a1.this$, a2, a3)) {}

          void Lucene43NGramTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean Lucene43NGramTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void Lucene43NGramTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_Lucene43NGramTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene43NGramTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene43NGramTokenizer_init_(t_Lucene43NGramTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene43NGramTokenizer_end(t_Lucene43NGramTokenizer *self, PyObject *args);
          static PyObject *t_Lucene43NGramTokenizer_incrementToken(t_Lucene43NGramTokenizer *self, PyObject *args);
          static PyObject *t_Lucene43NGramTokenizer_reset(t_Lucene43NGramTokenizer *self, PyObject *args);

          static PyMethodDef t_Lucene43NGramTokenizer__methods_[] = {
            DECLARE_METHOD(t_Lucene43NGramTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43NGramTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43NGramTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_Lucene43NGramTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_Lucene43NGramTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene43NGramTokenizer, t_Lucene43NGramTokenizer, ::org::apache::lucene::analysis::Tokenizer, Lucene43NGramTokenizer, t_Lucene43NGramTokenizer_init_, 0, 0, 0, 0, 0);

          void t_Lucene43NGramTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene43NGramTokenizer), module, "Lucene43NGramTokenizer", 0);
          }

          void t_Lucene43NGramTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene43NGramTokenizer).tp_dict, "class_", make_descriptor(Lucene43NGramTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene43NGramTokenizer).tp_dict, "wrapfn_", make_descriptor(t_Lucene43NGramTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene43NGramTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene43NGramTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene43NGramTokenizer).tp_dict, "DEFAULT_MAX_NGRAM_SIZE", make_descriptor(Lucene43NGramTokenizer::DEFAULT_MAX_NGRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(Lucene43NGramTokenizer).tp_dict, "DEFAULT_MIN_NGRAM_SIZE", make_descriptor(Lucene43NGramTokenizer::DEFAULT_MIN_NGRAM_SIZE));
          }

          static PyObject *t_Lucene43NGramTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene43NGramTokenizer::initializeClass, 1)))
              return NULL;
            return t_Lucene43NGramTokenizer::wrap_Object(Lucene43NGramTokenizer(((t_Lucene43NGramTokenizer *) arg)->object.this$));
          }
          static PyObject *t_Lucene43NGramTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene43NGramTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene43NGramTokenizer_init_(t_Lucene43NGramTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                Lucene43NGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = Lucene43NGramTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                jint a2;
                Lucene43NGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kII", ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = Lucene43NGramTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                jint a3;
                Lucene43NGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkII", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = Lucene43NGramTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene43NGramTokenizer_end(t_Lucene43NGramTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene43NGramTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_Lucene43NGramTokenizer_incrementToken(t_Lucene43NGramTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Lucene43NGramTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_Lucene43NGramTokenizer_reset(t_Lucene43NGramTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene43NGramTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/CharsRefBuilder.h"
#include "java/lang/Appendable.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *CharsRefBuilder::class$ = NULL;
        jmethodID *CharsRefBuilder::mids$ = NULL;
        bool CharsRefBuilder::live$ = false;

        jclass CharsRefBuilder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/CharsRefBuilder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_append_c19c439b] = env->getMethodID(cls, "append", "(C)Lorg/apache/lucene/util/CharsRefBuilder;");
            mids$[mid_append_a1a48567] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/util/CharsRefBuilder;");
            mids$[mid_append_6f0bb356] = env->getMethodID(cls, "append", "([CII)V");
            mids$[mid_append_d8f1527f] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Lorg/apache/lucene/util/CharsRefBuilder;");
            mids$[mid_charAt_39c7bd29] = env->getMethodID(cls, "charAt", "(I)C");
            mids$[mid_chars_dab10e7f] = env->getMethodID(cls, "chars", "()[C");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_copyChars_ee7999c6] = env->getMethodID(cls, "copyChars", "(Lorg/apache/lucene/util/CharsRef;)V");
            mids$[mid_copyChars_6f0bb356] = env->getMethodID(cls, "copyChars", "([CII)V");
            mids$[mid_copyUTF8Bytes_7bc03dc4] = env->getMethodID(cls, "copyUTF8Bytes", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_copyUTF8Bytes_86f4435f] = env->getMethodID(cls, "copyUTF8Bytes", "([BII)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_get_399267bb] = env->getMethodID(cls, "get", "()Lorg/apache/lucene/util/CharsRef;");
            mids$[mid_grow_39c7bd3c] = env->getMethodID(cls, "grow", "(I)V");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
            mids$[mid_setCharAt_83eec158] = env->getMethodID(cls, "setCharAt", "(IC)V");
            mids$[mid_setLength_39c7bd3c] = env->getMethodID(cls, "setLength", "(I)V");
            mids$[mid_toCharsRef_399267bb] = env->getMethodID(cls, "toCharsRef", "()Lorg/apache/lucene/util/CharsRef;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CharsRefBuilder::CharsRefBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        CharsRefBuilder CharsRefBuilder::append(jchar a0) const
        {
          return CharsRefBuilder(env->callObjectMethod(this$, mids$[mid_append_c19c439b], a0));
        }

        CharsRefBuilder CharsRefBuilder::append(const ::java::lang::CharSequence & a0) const
        {
          return CharsRefBuilder(env->callObjectMethod(this$, mids$[mid_append_a1a48567], a0.this$));
        }

        void CharsRefBuilder::append(const JArray< jchar > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_append_6f0bb356], a0.this$, a1, a2);
        }

        CharsRefBuilder CharsRefBuilder::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
        {
          return CharsRefBuilder(env->callObjectMethod(this$, mids$[mid_append_d8f1527f], a0.this$, a1, a2));
        }

        jchar CharsRefBuilder::charAt(jint a0) const
        {
          return env->callCharMethod(this$, mids$[mid_charAt_39c7bd29], a0);
        }

        JArray< jchar > CharsRefBuilder::chars() const
        {
          return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_chars_dab10e7f]));
        }

        void CharsRefBuilder::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        void CharsRefBuilder::copyChars(const ::org::apache::lucene::util::CharsRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyChars_ee7999c6], a0.this$);
        }

        void CharsRefBuilder::copyChars(const JArray< jchar > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_copyChars_6f0bb356], a0.this$, a1, a2);
        }

        void CharsRefBuilder::copyUTF8Bytes(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyUTF8Bytes_7bc03dc4], a0.this$);
        }

        void CharsRefBuilder::copyUTF8Bytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_copyUTF8Bytes_86f4435f], a0.this$, a1, a2);
        }

        jboolean CharsRefBuilder::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::util::CharsRef CharsRefBuilder::get() const
        {
          return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_get_399267bb]));
        }

        void CharsRefBuilder::grow(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_grow_39c7bd3c], a0);
        }

        jint CharsRefBuilder::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jint CharsRefBuilder::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }

        void CharsRefBuilder::setCharAt(jint a0, jchar a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setCharAt_83eec158], a0, a1);
        }

        void CharsRefBuilder::setLength(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLength_39c7bd3c], a0);
        }

        ::org::apache::lucene::util::CharsRef CharsRefBuilder::toCharsRef() const
        {
          return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_toCharsRef_399267bb]));
        }

        ::java::lang::String CharsRefBuilder::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_CharsRefBuilder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharsRefBuilder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CharsRefBuilder_init_(t_CharsRefBuilder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CharsRefBuilder_append(t_CharsRefBuilder *self, PyObject *args);
        static PyObject *t_CharsRefBuilder_charAt(t_CharsRefBuilder *self, PyObject *arg);
        static PyObject *t_CharsRefBuilder_chars(t_CharsRefBuilder *self);
        static PyObject *t_CharsRefBuilder_clear(t_CharsRefBuilder *self);
        static PyObject *t_CharsRefBuilder_copyChars(t_CharsRefBuilder *self, PyObject *args);
        static PyObject *t_CharsRefBuilder_copyUTF8Bytes(t_CharsRefBuilder *self, PyObject *args);
        static PyObject *t_CharsRefBuilder_equals(t_CharsRefBuilder *self, PyObject *args);
        static PyObject *t_CharsRefBuilder_get(t_CharsRefBuilder *self);
        static PyObject *t_CharsRefBuilder_grow(t_CharsRefBuilder *self, PyObject *arg);
        static PyObject *t_CharsRefBuilder_hashCode(t_CharsRefBuilder *self, PyObject *args);
        static PyObject *t_CharsRefBuilder_length(t_CharsRefBuilder *self);
        static PyObject *t_CharsRefBuilder_setCharAt(t_CharsRefBuilder *self, PyObject *args);
        static PyObject *t_CharsRefBuilder_setLength(t_CharsRefBuilder *self, PyObject *arg);
        static PyObject *t_CharsRefBuilder_toCharsRef(t_CharsRefBuilder *self);
        static PyObject *t_CharsRefBuilder_toString(t_CharsRefBuilder *self, PyObject *args);

        static PyMethodDef t_CharsRefBuilder__methods_[] = {
          DECLARE_METHOD(t_CharsRefBuilder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharsRefBuilder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharsRefBuilder, append, METH_VARARGS),
          DECLARE_METHOD(t_CharsRefBuilder, charAt, METH_O),
          DECLARE_METHOD(t_CharsRefBuilder, chars, METH_NOARGS),
          DECLARE_METHOD(t_CharsRefBuilder, clear, METH_NOARGS),
          DECLARE_METHOD(t_CharsRefBuilder, copyChars, METH_VARARGS),
          DECLARE_METHOD(t_CharsRefBuilder, copyUTF8Bytes, METH_VARARGS),
          DECLARE_METHOD(t_CharsRefBuilder, equals, METH_VARARGS),
          DECLARE_METHOD(t_CharsRefBuilder, get, METH_NOARGS),
          DECLARE_METHOD(t_CharsRefBuilder, grow, METH_O),
          DECLARE_METHOD(t_CharsRefBuilder, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_CharsRefBuilder, length, METH_NOARGS),
          DECLARE_METHOD(t_CharsRefBuilder, setCharAt, METH_VARARGS),
          DECLARE_METHOD(t_CharsRefBuilder, setLength, METH_O),
          DECLARE_METHOD(t_CharsRefBuilder, toCharsRef, METH_NOARGS),
          DECLARE_METHOD(t_CharsRefBuilder, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CharsRefBuilder, t_CharsRefBuilder, ::java::lang::Object, CharsRefBuilder, t_CharsRefBuilder_init_, 0, 0, 0, 0, 0);

        void t_CharsRefBuilder::install(PyObject *module)
        {
          installType(&PY_TYPE(CharsRefBuilder), module, "CharsRefBuilder", 0);
        }

        void t_CharsRefBuilder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CharsRefBuilder).tp_dict, "class_", make_descriptor(CharsRefBuilder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CharsRefBuilder).tp_dict, "wrapfn_", make_descriptor(t_CharsRefBuilder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CharsRefBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CharsRefBuilder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CharsRefBuilder::initializeClass, 1)))
            return NULL;
          return t_CharsRefBuilder::wrap_Object(CharsRefBuilder(((t_CharsRefBuilder *) arg)->object.this$));
        }
        static PyObject *t_CharsRefBuilder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CharsRefBuilder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CharsRefBuilder_init_(t_CharsRefBuilder *self, PyObject *args, PyObject *kwds)
        {
          CharsRefBuilder object((jobject) NULL);

          INT_CALL(object = CharsRefBuilder());
          self->object = object;

          return 0;
        }

        static PyObject *t_CharsRefBuilder_append(t_CharsRefBuilder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jchar a0;
              CharsRefBuilder result((jobject) NULL);

              if (!parseArgs(args, "C", &a0))
              {
                OBJ_CALL(result = self->object.append(a0));
                return t_CharsRefBuilder::wrap_Object(result);
              }
            }
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              CharsRefBuilder result((jobject) NULL);

              if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.append(a0));
                return t_CharsRefBuilder::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.append(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              jint a1;
              jint a2;
              CharsRefBuilder result((jobject) NULL);

              if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.append(a0, a1, a2));
                return t_CharsRefBuilder::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "append", args);
          return NULL;
        }

        static PyObject *t_CharsRefBuilder_charAt(t_CharsRefBuilder *self, PyObject *arg)
        {
          jint a0;
          jchar result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.charAt(a0));
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          PyErr_SetArgsError((PyObject *) self, "charAt", arg);
          return NULL;
        }

        static PyObject *t_CharsRefBuilder_chars(t_CharsRefBuilder *self)
        {
          JArray< jchar > result((jobject) NULL);
          OBJ_CALL(result = self->object.chars());
          return result.wrap();
        }

        static PyObject *t_CharsRefBuilder_clear(t_CharsRefBuilder *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_CharsRefBuilder_copyChars(t_CharsRefBuilder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::CharsRef a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::CharsRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.copyChars(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.copyChars(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "copyChars", args);
          return NULL;
        }

        static PyObject *t_CharsRefBuilder_copyUTF8Bytes(t_CharsRefBuilder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.copyUTF8Bytes(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.copyUTF8Bytes(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "copyUTF8Bytes", args);
          return NULL;
        }

        static PyObject *t_CharsRefBuilder_equals(t_CharsRefBuilder *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CharsRefBuilder), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_CharsRefBuilder_get(t_CharsRefBuilder *self)
        {
          ::org::apache::lucene::util::CharsRef result((jobject) NULL);
          OBJ_CALL(result = self->object.get());
          return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
        }

        static PyObject *t_CharsRefBuilder_grow(t_CharsRefBuilder *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.grow(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "grow", arg);
          return NULL;
        }

        static PyObject *t_CharsRefBuilder_hashCode(t_CharsRefBuilder *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(CharsRefBuilder), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_CharsRefBuilder_length(t_CharsRefBuilder *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_CharsRefBuilder_setCharAt(t_CharsRefBuilder *self, PyObject *args)
        {
          jint a0;
          jchar a1;

          if (!parseArgs(args, "IC", &a0, &a1))
          {
            OBJ_CALL(self->object.setCharAt(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCharAt", args);
          return NULL;
        }

        static PyObject *t_CharsRefBuilder_setLength(t_CharsRefBuilder *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setLength(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLength", arg);
          return NULL;
        }

        static PyObject *t_CharsRefBuilder_toCharsRef(t_CharsRefBuilder *self)
        {
          ::org::apache::lucene::util::CharsRef result((jobject) NULL);
          OBJ_CALL(result = self->object.toCharsRef());
          return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
        }

        static PyObject *t_CharsRefBuilder_toString(t_CharsRefBuilder *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(CharsRefBuilder), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonFloatParser.h"
#include "org/apache/lucene/search/FieldCache$FloatParser.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonFloatParser::class$ = NULL;
        jmethodID *PythonFloatParser::mids$ = NULL;
        bool PythonFloatParser::live$ = false;

        jclass PythonFloatParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonFloatParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_parseFloat_7bc03dd4] = env->getMethodID(cls, "parseFloat", "(Lorg/apache/lucene/util/BytesRef;)F");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_termsEnum_fb3ac14e] = env->getMethodID(cls, "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonFloatParser::PythonFloatParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonFloatParser::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonFloatParser::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonFloatParser::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonFloatParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonFloatParser_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonFloatParser_init_(t_PythonFloatParser *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonFloatParser_finalize(t_PythonFloatParser *self);
        static PyObject *t_PythonFloatParser_pythonExtension(t_PythonFloatParser *self, PyObject *args);
        static jfloat JNICALL t_PythonFloatParser_parseFloat0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonFloatParser_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonFloatParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonFloatParser_get__self(t_PythonFloatParser *self, void *data);
        static PyGetSetDef t_PythonFloatParser__fields_[] = {
          DECLARE_GET_FIELD(t_PythonFloatParser, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonFloatParser__methods_[] = {
          DECLARE_METHOD(t_PythonFloatParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFloatParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFloatParser, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonFloatParser, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonFloatParser, t_PythonFloatParser, ::java::lang::Object, PythonFloatParser, t_PythonFloatParser_init_, 0, 0, t_PythonFloatParser__fields_, 0, 0);

        void t_PythonFloatParser::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonFloatParser), module, "PythonFloatParser", 1);
        }

        void t_PythonFloatParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonFloatParser).tp_dict, "class_", make_descriptor(PythonFloatParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonFloatParser).tp_dict, "wrapfn_", make_descriptor(t_PythonFloatParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonFloatParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonFloatParser::initializeClass);
          JNINativeMethod methods[] = {
            { "parseFloat", "(Lorg/apache/lucene/util/BytesRef;)F", (void *) t_PythonFloatParser_parseFloat0 },
            { "pythonDecRef", "()V", (void *) t_PythonFloatParser_pythonDecRef1 },
            { "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;", (void *) t_PythonFloatParser_termsEnum2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonFloatParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonFloatParser::initializeClass, 1)))
            return NULL;
          return t_PythonFloatParser::wrap_Object(PythonFloatParser(((t_PythonFloatParser *) arg)->object.this$));
        }
        static PyObject *t_PythonFloatParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonFloatParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonFloatParser_init_(t_PythonFloatParser *self, PyObject *args, PyObject *kwds)
        {
          PythonFloatParser object((jobject) NULL);

          INT_CALL(object = PythonFloatParser());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonFloatParser_finalize(t_PythonFloatParser *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonFloatParser_pythonExtension(t_PythonFloatParser *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jfloat JNICALL t_PythonFloatParser_parseFloat0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFloatParser::mids$[PythonFloatParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jfloat value;
          PyObject *o0 = ::org::apache::lucene::util::t_BytesRef::wrap_Object(::org::apache::lucene::util::BytesRef(a0));
          PyObject *result = PyObject_CallMethod(obj, "parseFloat", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "F", &value))
          {
            throwTypeError("parseFloat", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jfloat) 0;
        }

        static void JNICALL t_PythonFloatParser_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFloatParser::mids$[PythonFloatParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonFloatParser::mids$[PythonFloatParser::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jobject JNICALL t_PythonFloatParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFloatParser::mids$[PythonFloatParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::index::TermsEnum value((jobject) NULL);
          PyObject *o0 = ::org::apache::lucene::index::t_Terms::wrap_Object(::org::apache::lucene::index::Terms(a0));
          PyObject *result = PyObject_CallMethod(obj, "termsEnum", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &value))
          {
            throwTypeError("termsEnum", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonFloatParser_get__self(t_PythonFloatParser *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene41/Lucene41Codec.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {

          ::java::lang::Class *Lucene41Codec::class$ = NULL;
          jmethodID *Lucene41Codec::mids$ = NULL;
          bool Lucene41Codec::live$ = false;

          jclass Lucene41Codec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene41/Lucene41Codec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_getPostingsFormatForField_19d2f1c6] = env->getMethodID(cls, "getPostingsFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene41Codec::Lucene41Codec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesFormat Lucene41Codec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene41Codec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene41Codec::getPostingsFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_getPostingsFormatForField_19d2f1c6], a0.this$));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene41Codec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene41Codec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene41Codec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene41Codec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene41Codec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene41Codec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {
          static PyObject *t_Lucene41Codec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene41Codec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene41Codec_init_(t_Lucene41Codec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene41Codec_docValuesFormat(t_Lucene41Codec *self, PyObject *args);
          static PyObject *t_Lucene41Codec_fieldInfosFormat(t_Lucene41Codec *self, PyObject *args);
          static PyObject *t_Lucene41Codec_getPostingsFormatForField(t_Lucene41Codec *self, PyObject *arg);
          static PyObject *t_Lucene41Codec_liveDocsFormat(t_Lucene41Codec *self, PyObject *args);
          static PyObject *t_Lucene41Codec_normsFormat(t_Lucene41Codec *self, PyObject *args);
          static PyObject *t_Lucene41Codec_postingsFormat(t_Lucene41Codec *self, PyObject *args);
          static PyObject *t_Lucene41Codec_segmentInfoFormat(t_Lucene41Codec *self, PyObject *args);
          static PyObject *t_Lucene41Codec_storedFieldsFormat(t_Lucene41Codec *self, PyObject *args);
          static PyObject *t_Lucene41Codec_termVectorsFormat(t_Lucene41Codec *self, PyObject *args);

          static PyMethodDef t_Lucene41Codec__methods_[] = {
            DECLARE_METHOD(t_Lucene41Codec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41Codec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41Codec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41Codec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41Codec, getPostingsFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene41Codec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41Codec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41Codec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41Codec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41Codec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41Codec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene41Codec, t_Lucene41Codec, ::org::apache::lucene::codecs::Codec, Lucene41Codec, t_Lucene41Codec_init_, 0, 0, 0, 0, 0);

          void t_Lucene41Codec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene41Codec), module, "Lucene41Codec", 0);
          }

          void t_Lucene41Codec::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene41Codec).tp_dict, "class_", make_descriptor(Lucene41Codec::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene41Codec).tp_dict, "wrapfn_", make_descriptor(t_Lucene41Codec::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene41Codec).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene41Codec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene41Codec::initializeClass, 1)))
              return NULL;
            return t_Lucene41Codec::wrap_Object(Lucene41Codec(((t_Lucene41Codec *) arg)->object.this$));
          }
          static PyObject *t_Lucene41Codec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene41Codec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene41Codec_init_(t_Lucene41Codec *self, PyObject *args, PyObject *kwds)
          {
            Lucene41Codec object((jobject) NULL);

            INT_CALL(object = Lucene41Codec());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene41Codec_docValuesFormat(t_Lucene41Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41Codec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene41Codec_fieldInfosFormat(t_Lucene41Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41Codec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene41Codec_getPostingsFormatForField(t_Lucene41Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPostingsFormatForField(a0));
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPostingsFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene41Codec_liveDocsFormat(t_Lucene41Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41Codec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene41Codec_normsFormat(t_Lucene41Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41Codec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene41Codec_postingsFormat(t_Lucene41Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41Codec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene41Codec_segmentInfoFormat(t_Lucene41Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41Codec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene41Codec_storedFieldsFormat(t_Lucene41Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41Codec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene41Codec_termVectorsFormat(t_Lucene41Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41Codec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
